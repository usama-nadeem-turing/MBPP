{
  "mbpp_id": 940,
  "problem": {
    "task_id": 940,
    "text": "Write a function to sort the given array by using heap sort.",
    "code": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n",
    "test_list": [
      "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]",
      "assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]",
      "assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]"
    ],
    "test_setup_code": "",
    "challenge_test_list": []
  },
  "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort the given array by using heap sort.\n\nTask ID: 940\n\nExpected behavior (test cases):\n1. heap_sort([12, 2, 4, 5, 2, 3]) should return [2, 2, 3, 4, 5, 12]\n2. heap_sort([32, 14, 5, 6, 7, 19]) should return [5, 6, 7, 14, 19, 32]\n3. heap_sort([21, 15, 29, 78, 65]) should return [15, 21, 29, 65, 78]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
  "model_response": {
    "id": "chatcmpl-0277d944577b4f8cb008db8299063571",
    "object": "chat.completion",
    "created": 1750868520,
    "model": "Qwen/Qwen2.5-1.5B-Instruct",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "reasoning_content": null,
          "content": "```python\ndef heapify(arr, n, i): \n    largest = i  \n    l = 2 * i + 1     \n    r = 2 * i + 2     \n\n    if l < n and arr[i] < arr[l]: \n        largest = l \n\n    if r < n and arr[largest] < arr[r]: \n        largest = r \n\n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i]   # swap \n\n        heapify(arr, n, largest) \n\n\ndef heap_sort(arr): \n    n = len(arr) \n  \n    for i in range(n//2 - 1, -1, -1): \n        heapify(arr, n, i) \n\n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap \n        heapify(arr, i, 0)\n\n# Test cases\nprint(heap_sort([12, 2, 4, 5, 2, 3]))  # Expected output: [2, 2, 3, 4, 5, 12]\nprint(heap_sort([32, 14, 5, 6, 7, 19]))  # Expected output: [5, 6, 7, 14, 19, 32]\nprint(heap_sort([21, 15, 29, 78, 65]))  # Expected output: [15, 21, 29, 65, 78]\n```",
          "tool_calls": []
        },
        "logprobs": null,
        "finish_reason": "stop",
        "stop_reason": null
      }
    ],
    "usage": {
      "prompt_tokens": 226,
      "total_tokens": 580,
      "completion_tokens": 354,
      "prompt_tokens_details": null
    },
    "prompt_logprobs": null
  },
  "timestamp": 1750868526.3439014
}