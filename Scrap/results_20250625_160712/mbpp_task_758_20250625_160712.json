{
  "mbpp_id": 758,
  "problem": {
    "task_id": 758,
    "text": "Write a function to count number of unique lists within a list.",
    "code": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result",
    "test_list": [
      "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
      "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
      "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}"
    ],
    "test_setup_code": "",
    "challenge_test_list": []
  },
  "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count number of unique lists within a list.\n\nTask ID: 758\n\nExpected behavior (test cases):\n1. unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n2. unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n3. unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
  "model_response": {
    "id": "chatcmpl-b07a9601e02b4379b6e3737b066cf96d",
    "object": "chat.completion",
    "created": 1750868040,
    "model": "Qwen/Qwen2.5-1.5B-Instruct",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "reasoning_content": null,
          "content": "```python\ndef unique_sublists(lst):\n    from collections import defaultdict\n    \n    # Dictionary to store sets of sublists for each key\n    result = defaultdict(set)\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Convert the sublist into a tuple and add it to the corresponding set in the dictionary\n        result[tuple(sublist)].add(tuple(sublist))\n    \n    # Return the dictionary with sets of unique sublists as values\n    return {key: len(value) for key, value in result.items()}\n```\n\nThis solution uses a `defaultdict` from the `collections` module to automatically create empty sets when keys are not found. It iterates over each sublist in the input list, converts it to a tuple (since tuples cannot be added to sets), and adds the original sublist to the corresponding set in the dictionary. Finally, it returns a new dictionary where each key is associated with the length of its corresponding set of unique sublists.",
          "tool_calls": []
        },
        "logprobs": null,
        "finish_reason": "stop",
        "stop_reason": null
      }
    ],
    "usage": {
      "prompt_tokens": 337,
      "total_tokens": 541,
      "completion_tokens": 204,
      "prompt_tokens_details": null
    },
    "prompt_logprobs": null
  },
  "timestamp": 1750868043.9336748
}