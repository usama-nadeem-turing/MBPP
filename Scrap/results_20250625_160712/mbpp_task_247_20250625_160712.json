{
  "mbpp_id": 247,
  "problem": {
    "task_id": 247,
    "text": "Write a function to find the longest palindromic subsequence in the given string.",
    "code": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]",
    "test_list": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ],
    "test_setup_code": "",
    "challenge_test_list": []
  },
  "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the longest palindromic subsequence in the given string.\n\nTask ID: 247\n\nExpected behavior (test cases):\n1. lps(\"TENS FOR TENS\") should return 5 \n2. lps(\"CARDIO FOR CARDS\") should return 7\n3. lps(\"PART OF THE JOURNEY IS PART\") should return 9 \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
  "model_response": {
    "id": "chatcmpl-32bf50e1dfd441da8741b890a5b6a185",
    "object": "chat.completion",
    "created": 1750869226,
    "model": "Qwen/Qwen2.5-1.5B-Instruct",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "reasoning_content": null,
          "content": "```python\ndef lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Fill the diagonal with 1s as every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    max_length = 1\n    start_index = 0\n    \n    # Build the table from bottom right to top left\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            \n            if s[i] == s[j]:\n                if cl == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i + 1][j - 1]\n                \n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n            \n            if dp[i][j] > max_length:\n                max_length = dp[i][j]\n                start_index = i\n                \n    return s[start_index:start_index + max_length]\n\n# Test cases\nprint(lps(\"TENS FOR TENS\"))  # Expected output: \"ENT\"\nprint(lps(\"CARDIO FOR CARDS\"))  # Expected output: \"ARDI\"\nprint(lps(\"PART OF THE JOURNEY IS PART\"))  # Expected output: \"PRTOJRI\"\n```",
          "tool_calls": []
        },
        "logprobs": null,
        "finish_reason": "stop",
        "stop_reason": null
      }
    ],
    "usage": {
      "prompt_tokens": 144,
      "total_tokens": 453,
      "completion_tokens": 309,
      "prompt_tokens_details": null
    },
    "prompt_logprobs": null
  },
  "timestamp": 1750869231.7412717
}