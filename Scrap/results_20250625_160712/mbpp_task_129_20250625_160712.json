{
  "mbpp_id": 129,
  "problem": {
    "task_id": 129,
    "text": "Write a function to calculate magic square.",
    "code": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True",
    "test_list": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ],
    "test_setup_code": "",
    "challenge_test_list": []
  },
  "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate magic square.\n\nTask ID: 129\n\nExpected behavior (test cases):\n1. magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n2. magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n3. magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
  "model_response": {
    "id": "chatcmpl-e10b86b489044d21a64c39bac5ddcbb2",
    "object": "chat.completion",
    "created": 1750868913,
    "model": "Qwen/Qwen2.5-1.5B-Instruct",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "reasoning_content": null,
          "content": "```python\ndef is_magic_square(matrix):\n    n = len(matrix)\n    sum_row = sum_col = sum_diagonal = sum_inverse_diagonal = 0\n    \n    # Calculate sums of rows and columns\n    for i in range(n):\n        sum_row += matrix[i][0]\n        sum_col += matrix[0][i]\n    \n    # Check if first row/column forms a magic square\n    if sum_row != sum_col:\n        return False\n    \n    # Calculate diagonals' sums\n    for i in range(n):\n        sum_diagonal += matrix[i][i]\n        sum_inverse_diagonal += matrix[i][n - 1 - i]\n    \n    # Check if main diagonal and anti-diagonal form magic squares\n    if sum_diagonal != sum_inverse_diagonal:\n        return False\n    \n    # Check remaining elements\n    for i in range(n):\n        for j in range(1, n):\n            if matrix[i][j] + sum_row != sum_col:\n                return False\n            if matrix[j][i] + sum_row != sum_col:\n                return False\n            if matrix[n - 1 - i][j] + sum_row != sum_col:\n                return False\n            if matrix[j][n - 1 - i] + sum_row != sum_col:\n                return False\n    \n    return True\n\n# Test cases\nprint(is_magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))  # Expected output: True\nprint(is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))  # Expected output: True\nprint(is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 7]]))  # Expected output: False\n```",
          "tool_calls": []
        },
        "logprobs": null,
        "finish_reason": "stop",
        "stop_reason": null
      }
    ],
    "usage": {
      "prompt_tokens": 216,
      "total_tokens": 641,
      "completion_tokens": 425,
      "prompt_tokens_details": null
    },
    "prompt_logprobs": null
  },
  "timestamp": 1750868920.1814518
}