{
  "mbpp_id": 469,
  "problem": {
    "task_id": 469,
    "text": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
    "test_list": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ],
    "test_setup_code": "",
    "challenge_test_list": []
  },
  "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum profit earned from a maximum of k stock transactions\n\nTask ID: 469\n\nExpected behavior (test cases):\n1. max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) should return 10\n2. max_profit([2, 4, 7, 5, 4, 3, 5], 2) should return 7\n3. max_profit([10, 6, 8, 4, 2], 2) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
  "model_response": {
    "id": "chatcmpl-3ec144c6b2a74dc4b694ced95c631742",
    "object": "chat.completion",
    "created": 1750869772,
    "model": "Qwen/Qwen2.5-1.5B-Instruct",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "reasoning_content": null,
          "content": "```python\ndef max_profit(prices, k):\n    if not prices:\n        return 0\n    \n    n = len(prices)\n    \n    # Initialize DP table with zeros\n    dp = [[0] * (k + 1) for _ in range(n)]\n    \n    # Fill the first row of the DP table\n    for i in range(1, n):\n        dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\n    \n    # Fill the rest of the DP table\n    for j in range(2, k + 1):\n        for i in range(j, n):\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + prices[i])\n    \n    return dp[n-1][k]\n\n# Test cases\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3))  # Expected output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2))     # Expected output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2))          # Expected output: 2\n```",
          "tool_calls": []
        },
        "logprobs": null,
        "finish_reason": "stop",
        "stop_reason": null
      }
    ],
    "usage": {
      "prompt_tokens": 190,
      "total_tokens": 475,
      "completion_tokens": 285,
      "prompt_tokens_details": null
    },
    "prompt_logprobs": null
  },
  "timestamp": 1750869777.2878654
}