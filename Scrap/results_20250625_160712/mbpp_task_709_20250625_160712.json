{
  "mbpp_id": 709,
  "problem": {
    "task_id": 709,
    "text": "Write a function to count unique keys for each value present in the tuple.",
    "code": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) ",
    "test_list": [
      "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'",
      "assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'",
      "assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"
    ],
    "test_setup_code": "",
    "challenge_test_list": []
  },
  "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count unique keys for each value present in the tuple.\n\nTask ID: 709\n\nExpected behavior (test cases):\n1. get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) should return '{4: 4, 2: 3, 1: 2}'\n2. get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) should return '{5: 4, 3: 3, 2: 2}'\n3. get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) should return '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
  "model_response": {
    "id": "chatcmpl-ce1de5b0313f467686822abb73a33c85",
    "object": "chat.completion",
    "created": 1750867902,
    "model": "Qwen/Qwen2.5-1.5B-Instruct",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "reasoning_content": null,
          "content": "```python\ndef get_unique(tuples_list):\n    # Create an empty dictionary to store counts of each unique key-value pair\n    result = {}\n    \n    # Iterate through each tuple in the list\n    for tup in tuples_list:\n        # Check if the first element of the tuple is already a key in the result dictionary\n        if tup[0] not in result:\n            # If it's not, initialize its count to 1\n            result[tup[0]] = 1\n        else:\n            # If it is, increment its count by 1\n            result[tup[0]] += 1\n    \n    # Convert the dictionary into a string format as required\n    return str({k: v for k, v in sorted(result.items(), key=lambda item: item[1], reverse=True)})\n\n# Test cases\nprint(get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)]))  # Expected output: \"{4: 4, 2: 3, 1: 2}\"\nprint(get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)]))  # Expected output: \"{5: 4, 3: 3, 2: 2}\"\nprint(get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)]))  # Expected output: \"{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}\"\n```",
          "tool_calls": []
        },
        "logprobs": null,
        "finish_reason": "stop",
        "stop_reason": null
      }
    ],
    "usage": {
      "prompt_tokens": 362,
      "total_tokens": 814,
      "completion_tokens": 452,
      "prompt_tokens_details": null
    },
    "prompt_logprobs": null
  },
  "timestamp": 1750867910.133667
}