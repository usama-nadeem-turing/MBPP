{
  "mbpp_id": 223,
  "problem": {
    "task_id": 223,
    "text": "Write a function to check for majority element in the given sorted array.",
    "code": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
    "test_list": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ],
    "test_setup_code": "",
    "challenge_test_list": []
  },
  "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check for majority element in the given sorted array.\n\nTask ID: 223\n\nExpected behavior (test cases):\n1. is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) should return True\n2. is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) should return False\n3. is_majority([1, 1, 1, 2, 2], 5, 1) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
  "model_response": {
    "id": "chatcmpl-25f53762b90a4983b53422d19cc94e52",
    "object": "chat.completion",
    "created": 1750869162,
    "model": "Qwen/Qwen2.5-1.5B-Instruct",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "reasoning_content": null,
          "content": "```python\ndef is_majority(arr, n, k):\n    count = 0\n    max_count = 0\n    \n    for i in range(n):\n        if arr[i] == k:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n            \n        if max_count > (n // 2):\n            return True\n        \n    return False\n```\n\nThis solution iterates through the array and counts occurrences of the target number `k`. It keeps track of the maximum count seen so far. If at any point the maximum count exceeds half the length of the array, it returns `True`, indicating that `k` is a majority element. Otherwise, it returns `False`.",
          "tool_calls": []
        },
        "logprobs": null,
        "finish_reason": "stop",
        "stop_reason": null
      }
    ],
    "usage": {
      "prompt_tokens": 195,
      "total_tokens": 348,
      "completion_tokens": 153,
      "prompt_tokens_details": null
    },
    "prompt_logprobs": null
  },
  "timestamp": 1750869165.5158274
}