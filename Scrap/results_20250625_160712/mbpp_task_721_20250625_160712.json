{
  "mbpp_id": 721,
  "problem": {
    "task_id": 721,
    "text": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
    "code": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)",
    "test_list": [
      "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2",
      "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2",
      "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "
    ],
    "test_setup_code": "",
    "challenge_test_list": []
  },
  "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\nTask ID: 721\n\nExpected behavior (test cases):\n1. maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) should return 5.2\n2. maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) should return 6.2\n3. maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) should return 7.2 \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
  "model_response": {
    "id": "chatcmpl-62dd6801e2e74a91930f157dac15c23d",
    "object": "chat.completion",
    "created": 1750867938,
    "model": "Qwen/Qwen2.5-1.5B-Instruct",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "reasoning_content": null,
          "content": "```python\ndef maxAverageOfPath(matrix, n):\n    total_sum = sum(sum(row) for row in matrix)\n    num_elements = n * n\n    max_avg = float('-inf')\n    \n    for i in range(n):\n        current_sum = 0\n        for j in range(n):\n            current_sum += matrix[i][j]\n            if i == j:\n                avg = current_sum / (n + 1)\n                max_avg = max(max_avg, avg)\n                \n    return round(max_avg, 2)\n\n# Test cases\nprint(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3)) # Expected output: 5.2\nprint(maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3)) # Expected output: 6.2\nprint(maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3)) # Expected output: 7.2\n```",
          "tool_calls": []
        },
        "logprobs": null,
        "finish_reason": "stop",
        "stop_reason": null
      }
    ],
    "usage": {
      "prompt_tokens": 231,
      "total_tokens": 481,
      "completion_tokens": 250,
      "prompt_tokens_details": null
    },
    "prompt_logprobs": null
  },
  "timestamp": 1750867942.6618292
}