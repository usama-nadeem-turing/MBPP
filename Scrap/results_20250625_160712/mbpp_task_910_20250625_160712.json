{
  "mbpp_id": 910,
  "problem": {
    "task_id": 910,
    "text": "Write a function to validate a gregorian date.",
    "code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False",
    "test_list": [
      "assert check_date(11,11,2002)==True",
      "assert check_date(13,11,2002)==False",
      "assert check_date('11','11','2002')==True"
    ],
    "test_setup_code": "",
    "challenge_test_list": []
  },
  "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to validate a gregorian date.\n\nTask ID: 910\n\nExpected behavior (test cases):\n1. check_date(11,11,2002)==True\n2. check_date(13,11,2002)==False\n3. check_date('11','11','2002')==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
  "model_response": {
    "id": "chatcmpl-eff296dafa3a447d856ee96647672f43",
    "object": "chat.completion",
    "created": 1750868439,
    "model": "Qwen/Qwen2.5-1.5B-Instruct",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "reasoning_content": null,
          "content": "```python\ndef check_date(day, month, year):\n    # Check if day is within valid range for given month and year\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 28:\n        return False\n    elif month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    \n    # If all checks pass, it's a valid date\n    return True\n```",
          "tool_calls": []
        },
        "logprobs": null,
        "finish_reason": "stop",
        "stop_reason": null
      }
    ],
    "usage": {
      "prompt_tokens": 140,
      "total_tokens": 269,
      "completion_tokens": 129,
      "prompt_tokens_details": null
    },
    "prompt_logprobs": null
  },
  "timestamp": 1750868441.560483
}