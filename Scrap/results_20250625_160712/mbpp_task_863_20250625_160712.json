{
  "mbpp_id": 863,
  "problem": {
    "task_id": 863,
    "text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.",
    "code": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ",
    "test_list": [
      "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3",
      "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4",
      "assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"
    ],
    "test_setup_code": "",
    "challenge_test_list": []
  },
  "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\nTask ID: 863\n\nExpected behavior (test cases):\n1. find_longest_conseq_subseq([1, 2, 2, 3], 4) should return 3\n2. find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) should return 4\n3. find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) should return 5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
  "model_response": {
    "id": "chatcmpl-c79a0c3e5ffa4424b00066e77d3f8fab",
    "object": "chat.completion",
    "created": 1750868321,
    "model": "Qwen/Qwen2.5-1.5B-Instruct",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "reasoning_content": null,
          "content": "```python\ndef find_longest_conseq_subseq(nums, target):\n    nums.sort()\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(nums)):\n        if i == 0 or nums[i] - nums[i-1] != 1:\n            current_length = 0\n        current_length += 1\n        max_length = max(max_length, current_length)\n    \n    return max_length\n\n# Test cases\nprint(find_longest_conseq_subseq([1, 2, 2, 3], 4))  # Expected output: 3\nprint(find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7))  # Expected output: 4\nprint(find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11))  # Expected output: 5\n```",
          "tool_calls": []
        },
        "logprobs": null,
        "finish_reason": "stop",
        "stop_reason": null
      }
    ],
    "usage": {
      "prompt_tokens": 230,
      "total_tokens": 465,
      "completion_tokens": 235,
      "prompt_tokens_details": null
    },
    "prompt_logprobs": null
  },
  "timestamp": 1750868325.7897367
}