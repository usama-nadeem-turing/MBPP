{
  "mbpp_id": 408,
  "problem": {
    "task_id": 408,
    "text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
    "test_list": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ],
    "test_setup_code": "",
    "challenge_test_list": []
  },
  "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\nTask ID: 408\n\nExpected behavior (test cases):\n1. k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n2. k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\n3. k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
  "model_response": {
    "id": "chatcmpl-5acc166126be4e1688753bb692877a80",
    "object": "chat.completion",
    "created": 1750869628,
    "model": "Qwen/Qwen2.5-1.5B-Instruct",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "reasoning_content": null,
          "content": "```python\nfrom typing import List\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    result = []\n    if not nums1 or not nums2:\n        return result\n    \n    min_heap = [(nums1[0] + nums2[0], 0, 0)]\n    \n    while len(result) < k and min_heap:\n        _, i, j = heapq.heappop(min_heap)\n        \n        result.append([nums1[i], nums2[j]])\n        \n        if i + 1 < len(nums1):\n            heapq.heappush(min_heap, (nums1[i+1] + nums2[j], i+1, j))\n            \n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j+1], i, j+1))\n    \n    return result\n```\n\nThis solution uses a min heap to efficiently find the `k` smallest sums of elements from `nums1` and `nums2`. It starts with the smallest possible sum and continuously adds new sums to the heap until it finds the required number of pairs.",
          "tool_calls": []
        },
        "logprobs": null,
        "finish_reason": "stop",
        "stop_reason": null
      }
    ],
    "usage": {
      "prompt_tokens": 225,
      "total_tokens": 475,
      "completion_tokens": 250,
      "prompt_tokens_details": null
    },
    "prompt_logprobs": null
  },
  "timestamp": 1750869632.8373194
}