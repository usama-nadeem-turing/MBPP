[
  {
    "mbpp_id": 1,
    "problem": {
      "task_id": 1,
      "text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].",
      "code": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]",
      "test_list": [
        "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8",
        "assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12",
        "assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\nTask ID: 1\n\nExpected behavior (test cases):\n1. min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) should return 8\n2. min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) should return 12\n3. min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) should return 16\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "id": "chatcmpl-77a345ccc7f349c8bcf00bf8c34cbc5e",
      "object": "chat.completion",
      "created": 1750867273,
      "model": "Qwen/Qwen2.5-1.5B-Instruct",
      "choices": [
        {
          "index": 0,
          "message": {
            "role": "assistant",
            "reasoning_content": null,
            "content": "```python\ndef min_cost(cost, m, n):\n    # Initialize DP table with infinity values except for starting point which is 0\n    dp = [[float('inf')] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = 0\n    \n    # Fill the first row of DP table\n    for i in range(1, m + 1):\n        dp[i][0] = dp[i - 1][0] + cost[i-1][0]\n    \n    # Fill the first column of DP table\n    for j in range(1, n + 1):\n        dp[0][j] = dp[0][j-1] + cost[0][j-1]\n    \n    # Fill rest of the DP table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[m][n]\n\n# Test cases\nprint(min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2))  # Expected output: 8\nprint(min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2))  # Expected output: 12\nprint(min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2))  # Expected output: 16)\n```",
            "tool_calls": []
          },
          "logprobs": null,
          "finish_reason": "stop",
          "stop_reason": null
        }
      ],
      "usage": {
        "prompt_tokens": 244,
        "total_tokens": 616,
        "completion_tokens": 372,
        "prompt_tokens_details": null
      },
      "prompt_logprobs": null
    },
    "timestamp": 1750867280.1281915
  },
  {
    "mbpp_id": 2,
    "problem": {
      "task_id": 2,
      "text": "Write a function to find the similar elements from the given two tuple lists.",
      "code": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ",
      "test_list": [
        "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)",
        "assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)",
        "assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the similar elements from the given two tuple lists.\n\nTask ID: 2\n\nExpected behavior (test cases):\n1. similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) should return (4, 5)\n2. similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) should return (3, 4)\n3. similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) should return (13, 14)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "id": "chatcmpl-9c1e07143a294b56acd7fd6fdc217314",
      "object": "chat.completion",
      "created": 1750867280,
      "model": "Qwen/Qwen2.5-1.5B-Instruct",
      "choices": [
        {
          "index": 0,
          "message": {
            "role": "assistant",
            "reasoning_content": null,
            "content": "```python\ndef similar_elements(list1, list2):\n    # Find common elements between the two lists using set intersection\n    common = set(list1) & set(list2)\n    # Return the sorted list of common elements\n    return sorted(common)\n\n# Test cases\nprint(similar_elements([3, 4, 5, 6], [5, 7, 4, 10]))  # Expected output: [4, 5]\nprint(similar_elements([1, 2, 3, 4], [5, 4, 3, 7]))  # Expected output: [3, 4]\nprint(similar_elements([11, 12, 14, 13], [17, 15, 14, 13]))  # Expected output: [13, 14]\n```",
            "tool_calls": []
          },
          "logprobs": null,
          "finish_reason": "stop",
          "stop_reason": null
        }
      ],
      "usage": {
        "prompt_tokens": 204,
        "total_tokens": 390,
        "completion_tokens": 186,
        "prompt_tokens_details": null
      },
      "prompt_logprobs": null
    },
    "timestamp": 1750867283.7725883
  },
  {
    "mbpp_id": 3,
    "problem": {
      "task_id": 3,
      "text": "Write a python function to identify non-prime numbers.",
      "code": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
      "test_list": [
        "assert is_not_prime(2) == False",
        "assert is_not_prime(10) == True",
        "assert is_not_prime(35) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to identify non-prime numbers.\n\nTask ID: 3\n\nExpected behavior (test cases):\n1. is_not_prime(2) should return False\n2. is_not_prime(10) should return True\n3. is_not_prime(35) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "id": "chatcmpl-038cc2dc62d7484783861a2e4cb55494",
      "object": "chat.completion",
      "created": 1750867284,
      "model": "Qwen/Qwen2.5-1.5B-Instruct",
      "choices": [
        {
          "index": 0,
          "message": {
            "role": "assistant",
            "reasoning_content": null,
            "content": "```python\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n```",
            "tool_calls": []
          },
          "logprobs": null,
          "finish_reason": "stop",
          "stop_reason": null
        }
      ],
      "usage": {
        "prompt_tokens": 122,
        "total_tokens": 180,
        "completion_tokens": 58,
        "prompt_tokens_details": null
      },
      "prompt_logprobs": null
    },
    "timestamp": 1750867285.2616293
  },
  {
    "mbpp_id": 4,
    "problem": {
      "task_id": 4,
      "text": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
      "code": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
      "test_list": [
        "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ",
        "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ",
        "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\nTask ID: 4\n\nExpected behavior (test cases):\n1. heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n2. heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \n3. heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "id": "chatcmpl-0f8fd924895d47b6b3f6265114d0a2cb",
      "object": "chat.completion",
      "created": 1750867285,
      "model": "Qwen/Qwen2.5-1.5B-Instruct",
      "choices": [
        {
          "index": 0,
          "message": {
            "role": "assistant",
            "reasoning_content": null,
            "content": "```python\nimport heapq\n\ndef heap_queue_largest(nums, k):\n    # Convert all elements in nums into a min-heap\n    heapq.heapify(nums)\n    \n    # Extract the 'k' largest elements from the heap\n    result = sorted(heapq.nlargest(k, nums), reverse=True)\n    \n    return result\n```",
            "tool_calls": []
          },
          "logprobs": null,
          "finish_reason": "stop",
          "stop_reason": null
        }
      ],
      "usage": {
        "prompt_tokens": 269,
        "total_tokens": 340,
        "completion_tokens": 71,
        "prompt_tokens_details": null
      },
      "prompt_logprobs": null
    },
    "timestamp": 1750867286.9941993
  }
]