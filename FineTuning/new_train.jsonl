{"instruction": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "output": "def sort_matrix(matrix):\n    # Sort each row individually based on the sum of elements\n    return [[row[i] for i in range(len(row))] for row in sorted(zip(*matrix))]"}
{"instruction": "Write a function to count the most common words in a dictionary.", "output": "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    # Extract keys with the highest frequency and sort them based on their counts\n    top_words = [word for word, freq in word_counts.most_common()]\n    result = [(word, freq) for word, freq in word_counts.items() if word not in top_words]\n    return sorted(result)\n\n# Example check function to verify the correctness of the solution\ndef check_solution():\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)], \"Test case 1 failed\"\n    assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)], \"Test case 2 failed\"\n    assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)], \"Test case 3 failed\"\n\ncheck_solution()"}
{"instruction":  "Write a function to find sequences of lowercase letters joined with an underscore.", "output": "def text_lowercase_underscore(text):\n    # Split the input string into words based on underscore '_'\n    split_text = text.split('_')\n    \n    # Check if all elements in the list are lowercase letters\n    for word in split_text:\n        if not word.islower():\n            return 'Not matched!'\n    \n    return 'Found a match!'"}
{"instruction": "Write a function to find the perimeter of a square.", "output": "def square_perimeter(side_length):\n    return side_length * 4"}