[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'remove_Occ' is not defined",
      "Test 2: FAIL - name 'remove_Occ' is not defined",
      "Test 3: FAIL - name 'remove_Occ' is not defined"
    ],
    "generated_code": "def remove_occ(text, ch):\n    i = 0\n    j = len(text) - 1\n    while text[i] != ch:\n        i += 1\n    while text[j] == ch:\n        j -= 1\n    result = ''\n    for k in range(i + 1, j):\n        result += text[k]\n    return result\n\n# Test Cases\nprint(remove_occ(\"hello\", \"l\")) # Output: heo\nprint(remove_occ(\"abcda\", \"a\")) # Output: bcd\nprint(remove_occ(\"PHP\", \"P\"))   # Output: H",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_matrix(matrix):\n    # Sort each row individually based on the sum of its elements\n    sorted_matrix = [[row[i] for row in matrix] for i in range(len(matrix))]\n    # Reverse the list so that now rows are sorted first and then columns\n    return sorted(sorted_matrix, key=lambda x: sum(x))\n\n# Example usage:\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\nprint(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\nprint(sort_matrix([[5,8,9],[6,4,3],[2,1,4]]))",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_common(words):\n    # Count the frequency of each word\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    # Find the maximum frequency\n    max_freq = max(word_count.values(), default=0)\n    \n    # Filter and collect words with their frequencies greater than or equal to max_freq\n    result = [(word, freq) for word, freq in word_count.items() if freq >= max_freq]\n    \n    return sorted(result, key=lambda x: (-x[1], x[0]))\n\n# Example usage\nwords_example_1 = ['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']\nprint(count_common(words_example_1))\n\nwords_example_2 = ['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']\nprint(count_common(words_example_2))\n\nwords_example_3 = ['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']\nprint(count_common(words_example_3))",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Volume(base, height, length):\n    return base * height * length",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_lowerstring(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].islower():\n            result.append(s[i])\n            j = i + 1\n            while j < len(s) and s[j].islower():\n                j += 1\n            result.extend(s[i+1:j])\n            i = j\n        else:\n            i += 1\n    return result",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Finds sequences of lowercase letters in a given string.\n    \n    Args:\n    text (str): The input string containing various characters.\n    \n    Returns:\n    str: A message indicating whether a sequence was found or not.\n    \"\"\"\n    pattern = r'\\b[a-z]+\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side_length):\n    return side_length * 4",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_dirty_chars(str1, str2):\n    result = \"\"\n    for char in str1:\n        if char not in str2:\n            result += char\n    return result\n\n# Test cases\nprint(remove_dirty_chars(\"probasscurve\", \"pros\"))  # Expected output: bacuve\nprint(remove_dirty_chars(\"digitalindia\", \"talent\"))  # Expected output: dgiidi\nprint(remove_dirty_chars(\"exoticmiles\", \"toxic\"))  # Expected output: emles",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_duplicate(arr):\n    \"\"\"\n    Checks if there is at least one duplicated element in the input array.\n    \n    Parameters:\n    arr (list): A list of integers\n    \n    Returns:\n    bool: True if there's at least one duplicate, False otherwise.\n    \"\"\"\n    # Create a set from the list and compare its length with the original list size\n    return len(set(arr)) != len(arr)",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_woodall(n):\n    \"\"\"\n    Check if the given number n is a Woodall number.\n    \n    A Woodall number is defined as n = i * 2^i - 1 for some integer i >= 1.\n    This function returns True if n is a Woodall number, otherwise it returns False.\n    \"\"\"\n    # Since we know all Woodall numbers can be represented in form of (i*2^i)-1,\n    # we can directly compute and compare with n for each possible value of i.\n    for i in range(1, int((n+1)/2)+1):  # We don't need to go beyond log2(n)+1 since i must be less than 2^i <= n\n        if i * 2**i == n + 1:\n            return True\n    return False\n\n# Test cases\nprint(is_woodall(383))  # Expected output: True\nprint(is_woodall(254))  # Expected output: False\nprint(is_woodall(200))  # Expected output: False",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiples_of_num(m, n):\n    return [i*n for i in range(1,m+1)]",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_Sum(list_of_lists):\n    # Find all sums in the list of lists and return the maximum value\n    return max(sum(sublist) for sublist in list_of_lists)",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def binary_to_decimal(binary_str):\n    # Convert the binary string to an integer\n    decimal_value = int(binary_str, 2)\n    return decimal_value\n\n# Test cases\nassert binary_to_decimal(\"100\") == 4\nassert binary_to_decimal(\"1011\") == 11\nassert binary_to_decimal(\"1101101\") == 109",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef find_Product(arr: List[int], n: int) -> int:\n    prod = 1\n    for i in arr:\n        if i != n and i not in {n-1, n+1}:\n            prod *= i\n    return prod",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_k_elements(tuples_list, k_element):\n    \"\"\"\n    This function checks if there is at least one occurrence of 'k_element' in each tuple within tuples_list.\n    \n    :param tuples_list: List of tuples where we need to find the presence of 'k_element'.\n    :param k_element: The element whose presence needs to be checked across different tuples.\n    :return: True if for every tuple in the list, there's an instance of 'k_element', otherwise returns False.\n    \"\"\"\n    # Checking each tuple to ensure it contains 'k_element'\n    return all(k_element in t for t in tuples_list)\n\n# Function calls with test data points\nprint(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4))  # Expected output: True\nprint(check_k_elements([(7, 7, 7), (7, 7)], 7))  # Expected output: True\nprint(check_k_elements([(9, 9), (9, 9, 9, 9)], 7))  # Expected output: False",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove(lst):\n    \"\"\"\n    Removes all digit characters from each string in the given list.\n    \n    Parameters:\n    lst (list): A list of strings containing alphanumeric characters.\n    \n    Returns:\n    list: A new list with the same elements as the input list but without any digit characters.\n    \"\"\"\n    return [s for s in lst if not any(c.isdigit() for c in s)]\n\n# Test cases to verify the correctness of the function\nprint(remove(['4words', '3letters', '4digits'])) # Expected output: ['words', 'letters', 'digits']\nprint(remove(['28Jan', '12Jan', '11Jan'])) # Expected output: ['Jan', 'Jan', 'Jan']\nprint(remove(['wonder1', 'wonder2', 'wonder3'])) # Expected output: ['wonder', 'wonder', 'wonder']",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binomial_Coeff(n, k):\n    # Initialize result as 1 since C(n,k) = n! / ((n-k)! * k!)\n    result = 1\n    \n    # Calculate factorial of n and k separately\n    fact_n = calculate_factorial(n)\n    fact_k = calculate_factorial(k)\n    \n    # Calculate factorial of (n - k) if it is not zero\n    if k != 0:\n        fact_n_minus_k = calculate_factorial(n - k)\n        \n    # Multiply all factorials together and divide by the product of (k-1)! for each pair and k itself\n    if fact_n != 0:\n        result = fact_n // (fact_k * fact_n_minus_k)\n    \n    return int(result)\n\n# Helper function to calculate factorial of a number\ndef calculate_factorial(x):\n    if x == 0:\n        return 1\n    else:\n        return x * calculate_factorial(x - 1)",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for i in range(n):\n        result ^= arr[i]\n    return result\n\n# Test Cases\nprint(get_Odd_Occurrence([1,2,3,1,2,3,1],7)) # Expected output: 1\nprint(get_Odd_Occurrence([1,2,3,2,3,1,3],7)) # Expected output: 3\nprint(get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13)) # Expected output: 5",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(s):\n    \"\"\"\n    Counts the number of substrings in 's' that start and end with the same character.\n    \n    :param s: A string\n    :return: Integer representing the count of such substrings\n    \"\"\"\n    total = 0\n    for i in range(len(s)):\n        j = 0\n        while i - j >= 0 and i + j < len(s) and s[i - j] == s[i + j]:\n            j += 1\n        if j > 0:\n            total += j * (j + 1) // 2\n    return total",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - func() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - func() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - func() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from heapq import nlargest\nfrom typing import List\n\ndef func(lst_of_lists: List[List[int]]) -> List[int]:\n    result = []\n    for lst in lst_of_lists:\n        # Count frequency of each number in the list\n        freq_count = {}\n        for num in lst:\n            if num not in freq_count:\n                freq_count[num] = 0\n            freq_count[num] += 1\n        \n        # Get the top k frequencies\n        top_k_freqs = nlargest(5, freq_count, key=freq_count.get)\n        \n        # Append the numbers with their counts to the result list\n        result.extend([(num, count) for num, count in zip(top_k_freqs, freq_count[top_k_freqs])])\n    \n    return result",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef max_Prime_Factors(num):\n    i = 2\n    last_prime_factor = None\n    \n    while i * i <= num:\n        if num % i == 0:\n            last_prime_factor = i\n            num //= i\n        else:\n            i += 1\n            \n    if num > 1:\n        last_prime_factor = num\n        \n    return int(last_prime_factor)\n\n# Test Cases\nprint(max_Prime_Factors(15))  # Expected output: 5\nprint(max_Prime_Factors(6))   # Expected output: 3\nprint(max_Prime_Factors(2))   # Expected output: 2",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'decimal_To_Binary' is not defined",
      "Test 2: FAIL - name 'decimal_To_Binary' is not defined",
      "Test 3: FAIL - name 'decimal_To_Binary' is not defined"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    # Convert decimal number to binary using built-in bin() function and slicing\n    binary = bin(decimal_number)[2:]\n    return binary\n\n# Test cases\nprint(decimal_to_binary(10))   # Expected output: '1010'\nprint(decimal_to_binary(1))    # Expected output: '1'\nprint(decimal_to_binary(20))   # Expected output: '10100'",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_missing(arr, n):\n    # Iterate through the array from 0 to n-1\n    for i in range(n):\n        # Check if the current index is not equal to the value at that index + 1\n        if arr[i] != i + 1:\n            # Return the missing number\n            return i + 1\n    \n    # If no missing number is found, return -1\n    return -1\n\n# Test cases\nprint(find_missing([1,2,3,5],4))  # Output: 4\nprint(find_missing([1,3,4,5],4))  # Output: 2\nprint(find_missing([1,2,3,5,6,7],5))  # Output: 4",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rect_num(n):\n    # Calculate the n-th rectangular number using formula: n*(n+1)\n    return n * (n + 1)\n\n# Test cases to verify the correctness of the solution\nassert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'c' is not defined"
    ],
    "generated_code": "def find_Nth_Digit(a, b, n):\n    \"\"\"\n    This function calculates and returns the nth digit in the decimal representation of the sum \n    of two numbers a/b and c/d.\n    \n    :param a: Numerator of the first number\n    :param b: Denominator of the first number\n    :param c: Numerator of the second number\n    :param d: Denominator of the second number\n    :return: The nth digit as an integer\n    \"\"\"\n    # Calculate the sum of fractions represented by a/b and c/d\n    result = a / b + c / d\n    \n    # Convert the result into string for easier manipulation\n    result_str = str(result)\n    \n    # Extract the nth digit from the right\n    nth_digit = int(result_str[-n])\n    \n    return nth_digit\n\n# Check function with provided data points\nprint(find_Nth_Digit(1,2,1))   # Expected output: 5\nprint(find_Nth_Digit(3,5,1))   # Expected output: 6\nprint(find_Nth_Digit(5,6,5))   # Expected output: 3",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'str' and 'int'"
    ],
    "generated_code": "def sort_mixed_list(lst):\n    return sorted(lst)\n\n# Test cases\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))  # [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))  # [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))  # [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def div_even_odd(lst):\n    # Find the first even number in the list\n    even = next((i for i in lst if i % 2 == 0), None)\n    \n    # If no even number is found, return an error message\n    if even is None:\n        raise ValueError(\"No even number found in the list.\")\n    \n    # The first odd number will be used as the divisor\n    odd = next((i for i in lst if i % 2 != 0), None)\n    \n    # Return the division result of the first even and odd numbers\n    return even / odd\n\n# Test cases\nprint(div_even_odd([1,3,5,7,4,1,6,8])) # Expected output: 4\nprint(div_even_odd([1,2,3,4,5,6,7,8,9,10])) # Expected output: 2\nprint(div_even_odd([1,5,7,9,10])) # Expected output: 10",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rearange_string(s):\n    from collections import Counter\n    \n    # Count occurrences of each character in the string\n    count = Counter(s)\n    \n    result_str = \"\"\n    for char in s:\n        if count[char] > 0:\n            count[char] -= 1\n            result_str += char\n    \n    return result_str\n\n# Check function with provided data points\nprint(rearange_string(\"aab\"))  # Expected output: 'aba'\nprint(rearange_string(\"aabb\"))  # Expected output: 'abab'\nprint(rearange_string(\"abccdd\"))  # Expected output: 'cdabcd'",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef freq_element(lists):\n    result = {}\n    for sublist in lists:\n        for element in sublist:\n            if element in result:\n                result[element] += 1\n            else:\n                result[element] = 1\n    return result",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from collections import Counter\n\ndef find_Sum(arr, k):\n    \"\"\"\n    This function takes an integer array 'arr' and an integer 'k'.\n    It returns the sum of all elements in 'arr' that have appeared more than 'k' times.\n    \n    :param arr: List[int] - The input array of integers.\n    :param k: int - The threshold for counting occurrences of each element.\n    :return: int - Sum of elements appearing more than 'k' times.\n    \"\"\"\n    # Count the frequency of each element in the array\n    freq = Counter(arr)\n    # Calculate the sum of elements with count > k\n    result_sum = sum(num * count for num, count in freq.items() if count > k)\n    return result_sum\n\n# Check function with provided data points\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Create a regular expression pattern to match sequences of lowercase letters followed by an underscore\n    pattern = '[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with provided data points\nprint(text_match(\"aab_cbbbc\"))   # Expected output: Found a match!\nprint(text_match(\"aab_Abbbc\"))  # Expected output: Not matched!\nprint(text_match(\"Aaab_abbbc\")) # Expected output: Not matched!",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_string(text):\n    if text.startswith(\" \"):\n        return 'Not matched!'\n    else:\n        return 'Found a match!'",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef get_gcd(nums: List[int]) -> int:\n    def gcd(a, b):\n        while b != 0:\n            t = b\n            b = a % b\n            a = t\n        return a\n    \n    result = nums[0]\n    for num in nums[1:]:\n        result = gcd(result, num)\n    \n    return result",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_distinct(nums):\n    \"\"\"\n    Determines if all elements in the list 'nums' are unique.\n    \n    Parameters:\n    nums (list): A list of integers\n    \n    Returns:\n    bool: True if all elements are distinct, False otherwise\n    \"\"\"\n    # Check if the length of the set is equal to the length of the list\n    return len(set(nums)) == len(nums)\n\n# Test cases\nprint(test_distinct([1,5,7,9]))   # Expected output: True\nprint(test_distinct([2,4,5,5,7,9])) # Expected output: False\nprint(test_distinct([1,2,3]))     # Expected output: True",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def compute_Last_Digit(a, b):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    # Compute factorials of both numbers\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n    \n    # Find the last digit of the division of the two factorials\n    last_digit = (fact_a // fact_b) % 10\n    \n    return last_digit",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(number):\n    # XORing the number with itself and subtracting 1 will change the bits at odd positions\n    return number ^ (number - 1)",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    result = []\n    for row in matrix:\n        if index >= len(row): \n            break\n        else: \n            result.append(row[index])\n    return result",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length_list(lst):\n    return min(lst, key=len)\n\n# Test cases\nprint(min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: (1, [0])\nprint(min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]))   # Expected output: (1, [1])\nprint(min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]]))        # Expected output: (2, [1, 2])",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a, b, c):\n    # Check if all sides of the triangle are equal\n    return a == b and b == c\n\n# Test cases\nprint(check_equilateral(6, 8, 12))  # Expected output: False\nprint(check_equilateral(6, 6, 12))  # Expected output: False\nprint(check_equilateral(6, 6, 6))   # Expected output: True",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'check_Eequality' is not defined. Did you mean: 'check_Equality'?"
    ],
    "generated_code": "def check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Test Cases\nprint(check_Eequality(\"abcda\")) # Expected output: 'Equal'\nprint(check_Eequality(\"ab\"))    # Expected output: 'Not Equal'\nprint(check_Eequality(\"mad\"))   # Expected output: 'Not Equal'",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array in non-decreasing order using the Counting Sort algorithm.\n    \n    Parameters:\n    arr (list): The list of integers to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    if not arr:\n        return []\n    \n    # Find the maximum value to determine the range of counts\n    max_val = max(arr)\n    count_arr = [0] * (max_val + 1)\n    \n    # Populate the count array with the frequency of each element\n    for num in arr:\n        count_arr[num] += 1\n    \n    # Construct the result from the count array\n    sorted_arr = []\n    for i in range(len(count_arr)):\n        while count_arr[i] > 0:\n            sorted_arr.append(i)\n            count_arr[i] -= 1\n    \n    return sorted_arr\n\n# Test Cases\nprint(counting_sort([1, 23, 4, 5, 6, 7, 8]))  # Output: [1, 4, 5, 6, 7, 8, 23]\nprint(counting_sort([12, 9, 28, 33, 69, 45]))  # Output: [9, 12, 28, 33, 45, 69]\nprint(counting_sort([8, 4, 14, 3, 2, 1]))      # Output: [1, 2, 3, 4, 8, 14]",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_gp(t,n,a):\n    return a * (t ** n)",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(n):\n    # Reverse the number\n    reversed_num = int(str(n)[::-1])\n    \n    # Check if n is one less than twice its reverse\n    return n == 2 * reversed_num - 1\n\n# Test cases\nprint(check(70))   # Expected output: False\nprint(check(23))   # Expected output: False\nprint(check(73))   # Expected output: True",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: object of type 'int' has no len()"
    ],
    "generated_code": "def find_Max_Num(digits, length):\n    # Sort the list in descending order to arrange the largest possible numbers first.\n    sorted_digits = sorted(digits, reverse=True)\n    max_num = int(''.join(map(str, sorted_digits)))\n    if len(max_num) < length:\n        # If the maximum number is shorter than required length,\n        # fill it with zeros from left side until it reaches the desired length.\n        for _ in range(length - len(max_num)):\n            max_num = '0' + max_num\n    else:\n        # Otherwise, no need to pad since the number already matches the required length.\n        pass\n    return max_num\n\n# Test Cases\nprint(find_Max_Num([1, 2, 3], 3))  # Expected output: \"321\"\nprint(find_Max_Num([4, 5, 6, 1], 4))  # Expected output: \"6541\"\nprint(find_Max_Num([1, 2, 3, 9], 4))  # Expected output: \"9321\"",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'opposite_Signs' is not defined",
      "Test 2: FAIL - name 'opposite_Signs' is not defined",
      "Test 3: FAIL - name 'opposite_Signs' is not defined"
    ],
    "generated_code": "def opposite_signs(num1, num2):\n    # Check if both numbers are negative\n    if num1 < 0 and num2 < 0:\n        return True\n    # Check if both numbers are positive\n    elif num1 > 0 and num2 > 0:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_octagonal(nth_number):\n    # The formula for calculating the nth octagonal number is:\n    # nth_octagonal = (3*n**2 - n) / 2\n    result = (3 * nth_number ** 2 - nth_number) // 2\n    return result\n\n# Test cases\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_len_sub(arr, n):\n    dp = [[-float('inf')] * (n + 1) for _ in range(n)]\n    \n    # Iterate over each element in the array\n    for i in range(1, len(dp)):\n        # Find the maximum value among previous elements plus current element\n        prev_max = 0 if i == 0 else dp[i - 1][len(dp[0])]\n        # Update the dp table for the current index and position\n        for j in range(len(dp[0])):\n            dp[i][j] = max(prev_max + arr[j], dp[i - 1][j])\n        \n    # Return the maximum value found in the last row of the dp table\n    return max(max(row[-1] for row in dp) for row in dp)\n\n# Test cases\nprint(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8))  # Expected output: 5\nprint(max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7))  # Expected output: 4\nprint(max_len_sub([9, 11, 13, 15, 18], 5))  # Expected output: 1",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substrings' is not defined",
      "Test 2: FAIL - name 'count_Substrings' is not defined",
      "Test 3: FAIL - name 'count_Substrings' is not defined"
    ],
    "generated_code": "def count_substrings(s, n):\n    dp = [0] * len(s)\n    for i in range(len(s)):\n        if s[i] == '1':\n            dp[i] += (i + 1) ** 2\n        else:\n            dp[i] += (len(s) - i) ** 2\n    \n    result = 0\n    total_sum = 0\n    for i in range(n):\n        total_sum += dp[i]\n        if total_sum % (i + 1) == 0:\n            result += 1\n            \n    return result\n\n# Test cases\nprint(count_substrings('112112',6)) # Output: 6\nprint(count_substrings('111',3)) # Output: 6\nprint(count_substrings('1101112',7)) # Output: 12",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(nums):\n    # Initialize the smallest number with the first element of the list\n    smallest = nums[0]\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    \n    return smallest",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def max_difference(tuples_list):\n    \"\"\"\n    Finds the largest difference between two elements in a list of tuples.\n    \n    Parameters:\n    tuples_list (list): A list of tuples where each tuple contains at least two elements.\n    \n    Returns:\n    int/float: The largest difference found between any two elements in the tuples.\n    \"\"\"\n    # Initialize variables to store the minimum value and maximum difference\n    min_value = float('inf')\n    max_diff = -float('inf')\n\n    for tuple_ in tuples_list:\n        # Update the maximum difference if the current difference is larger\n        if tuple_[1] - tuple_[0] > max_diff:\n            max_diff = tuple_[1] - tuple_[0]\n        \n        # Update the minimum value encountered so far\n        if tuple_[0] < min_value:\n            min_value = tuple_[0]\n\n    # Return the largest difference after checking all possible pairs\n    return max_diff\n\n# Check function with provided data points\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) is list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(nums):\n    # Initialize a counter for positive numbers\n    count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num > 0:\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from math import factorial\n\ndef bell_number(n):\n    \"\"\"\n    This function calculates the nth Bell number.\n    \n    Args:\n    n (int): The index of the Bell number to calculate.\n    \n    Returns:\n    int: The value of the nth Bell number.\n    \"\"\"\n    # Initialize a list with size n+1 and all elements as zero\n    bell = [0] * (n + 1)\n    \n    # Base case\n    bell[0] = 1\n    \n    # Calculate Bell numbers using the formula\n    for i in range(1, n + 1):\n        j = i - 1\n        while j >= 0:\n            bell[i] += bell[j]\n            j -= 1\n    \n    return bell[n]\n\n# Test cases to verify the correctness of the function\nprint(bell_number(2))   # Expected output: 2\nprint(bell_number(10))  # Expected output: 115975\nprint(bell_number(56))  # Expected output: 6775685320645824322581483068371419745979053216268760300",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(arr):\n    \"\"\"\n    Check if the given list of integers arr is monotonic.\n    \n    Args:\n    arr (List[int]): The list of integers to be checked.\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing\n\n# Test cases\nprint(is_Monotonic([6, 5, 4, 4]))  # Expected output: True\nprint(is_Monotonic([1, 2, 2, 3]))  # Expected output: True\nprint(is_Monotonic([1, 3, 2]))     # Expected output: False",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_sublist(lst1, lst2):\n    return all(item in lst1 for item in lst2)",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_equal(list_of_tuples, expected_length):\n    \"\"\"\n    Checks if all tuples in the list have the same number of elements.\n    \n    Parameters:\n        list_of_tuples (list): A list containing tuples to be checked.\n        expected_length (int): The expected number of elements each tuple should have.\n        \n    Returns:\n        str: \"All tuples have same length\" if all tuples have the same number of elements,\n             otherwise returns \"All tuples do not have same length\".\n    \"\"\"\n    # Check if all tuples have the same length as expected_length\n    is_all_same_length = len({len(tup) for tup in list_of_tuples}) == 1\n    \n    if is_all_same_length:\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'\n\n# Test Cases\nprint(get_equal([(11, 22, 33), (44, 55, 66)], 3))  # Expected output: 'All tuples have same length'\nprint(get_equal([(1, 2, 3), (4, 5, 6, 7)], 3))      # Expected output: 'All tuples do not have same length'\nprint(get_equal([(1, 2), (3, 4)], 2))               # Expected output: 'All tuples have same length'",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def comb_sort(lst):\n    gap = len(lst)\n    shrink_factor = 1.3\n    sorted = False\n    \n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink_factor)\n        \n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n# Test the function with provided data points\nprint(comb_sort([5, 15, 37, 25, 79]))  # Expected output: [5, 15, 25, 37, 79]\nprint(comb_sort([41, 32, 15, 19, 22]))  # Expected output: [15, 19, 22, 32, 41]\nprint(comb_sort([99, 15, 13, 47]))  # Expected output: [13, 15, 47, 99]",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dif_Square(n):\n    # A number n can be expressed as the difference of two squares if and only if it is not of the form 4^k*(8m+7)\n    return n % 8 != 7",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef multiple_split(s):\n    # Split the string by multiple delimiters using regex pattern\n    return re.split(r'\\s*\\*\\s*', s)",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_samepatterns(patterns, sequences):\n    return all(sequence.count(p) == len(p) for p, sequence in zip(patterns, sequences))",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_tuples(lst, divisor):\n    result = []\n    for tup in lst:\n        if all(x % divisor == 0 for x in tup):\n            result.append(tup)\n    return str(result)\n\nprint(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6))\n# Expected output: '[(6, 24, 12)]'\n\nprint(find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5))\n# Expected output: '[(5, 25, 30)]'\n\nprint(find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4))\n# Expected output: '[(8, 16, 4)]'",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(length, breadth):\n    \"\"\"\n    Function to calculate the total number of squares within a rectangle.\n    \n    Parameters:\n    length (int): The dimension along one side of the rectangle.\n    breadth (int): The dimension along the other side of the rectangle.\n    \n    Returns:\n    int: Total number of squares that can be found within the rectangle.\n    \"\"\"\n    # Calculate the maximum square size possible within the given dimensions\n    max_square_side = min(length, breadth)\n    \n    # Initialize the counter for total squares\n    total_squares = 0\n    \n    # Iterate through all possible square sizes and count them\n    for square_size in range(max_square_side, 0, -1):\n        total_squares += (length // square_size) * ((breadth // square_size) + 1)\n    \n    return total_squares",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Diff(number):\n    \"\"\"\n    This function takes an integer number as input.\n    It returns True if the sum of even digits minus the sum of odd digits in the number is not equal to zero,\n    otherwise it returns False.\n    \n    Example usage:\n    >>> is_Diff(12345)\n    False\n    >>> is_Diff(1212112)\n    True\n    >>> is_Diff(1212)\n    False\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    \n    for digit in str(number):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    return even_sum != odd_sum",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_With_Odd_SetBits(n):\n    def bitCount(num):\n        \"\"\"Helper function to count the number of 1s in the binary representation of num.\"\"\"\n        count = 0\n        while num:\n            if num % 2 == 1:\n                count += 1\n            num //= 2\n        return count\n    \n    # Calculate total numbers from 1 to n with odd number of set bits.\n    result = sum(bitCount(i) for i in range(1, n + 1))\n    \n    return result",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    # Check if the length of the word is odd\n    return len(word) % 2 != 0",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula n*(n+1)*(n+2)/6\n    result = float(n * (n + 1) * (n + 2)) / 6\n    return result",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def zip_tuples(tuple1, tuple2):\n    # Use zip function to pair elements from both tuples and create a list of tuples\n    result = [tuple(zip(a, b)) for a, b in zip(tuple1, tuple2)]\n    return result\n\n# Test cases\nprint(zip_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6)))  # Output: [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nprint(zip_tuples((8, 9, 5, 6, 10, 11), (2, 6, 7)))  # Output: [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nprint(zip_tuples((9, 10, 6, 7, 11, 12), (3, 7, 8)))  # Output: [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \n    Parameters:\n    radius (float): The radius of the sphere.\n    \n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Char(s):\n    # Initialize result variable\n    res = ''\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Add current character to the result string\n        res += char\n    \n    # Return the resulting string after all iterations\n    return res",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sequence(n):\n    # Initialize lists for storing previous and current values of the sequence\n    prev = [0] * (n + 1)\n    cur = [0] * (n + 1)\n\n    if n > 0:\n        prev[1], cur[1] = 1, 1\n\n    for i in range(2, n + 1):\n        # Calculate the value based on the sum of two consecutive values from the previous row\n        prev[i], cur[i] = cur[i - 1] + prev[i - 1], prev[i]\n\n    return cur[n]",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    # The formula for calculating the surface area of a sphere is 4πr^2,\n    # where r is the radius of the sphere.\n    return 4 * math.pi * radius ** 2",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def centered_hexagonal_number(n):\n    # Calculate the nth centered hexagonal number using the formula\n    return n * (2 * n - 1) + 1",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict_1, dict_2, dict_3):\n    # Merge all three dictionaries into one using the update() method and combining with the + operator\n    merged_dict = {}\n    for dictionary in [dict_1, dict_2, dict_3]:\n        if isinstance(dictionary, dict):\n            merged_dict.update(dictionary)\n    return merged_dict",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_count(lst):\n    return {item: lst.count(item) for item in set(lst)}",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef closest_num(n):\n    \"\"\"\n    Finds the largest integer less than n.\n    \n    Parameters:\n    n (int): The number to find the closest smaller integer for.\n    \n    Returns:\n    int: The closest smaller integer to n.\n    \"\"\"\n    # Calculate the floor of n and subtract it from n+1 to get the smallest integer not greater than n.\n    return int(math.floor(n + 1)) - 1",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words_list):\n    # Find and return the maximum length of words in the list\n    max_length = max(len(word) for word in words_list)\n    return max_length",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_substring(values, target):\n    for value in values:\n        if target in value:\n            return True\n    return False",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_undulating(number_str):\n    \"\"\"\n    Checks if the given string representation of a number is an undulating pattern.\n    \n    An undulating number has a specific digit in each position where all digits are identical.\n    For example:\n    \"1212121\" is an undulating number because '1' appears at every even index and '2' at every odd index,\n    while \"1991\" is not an undulating number since it does not meet the criteria for being undulating.\n    \n    :param number_str: A string representing the number to be checked.\n    :return: True if the number is undulating, otherwise False.\n    \"\"\"\n    len_num = len(number_str)\n    if len_num <= 1:\n        return False\n    \n    first_digit = int(number_str[0])\n    last_digit = int(number_str[-1])\n    mid_digits = number_str[1:-1]\n    \n    # Check if the second character matches with the last digit\n    if mid_digits[::2] == mid_digits[1::2]:\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(is_undulating(\"1212121\"))  # Expected output: True\nprint(is_undulating(\"1991\"))     # Expected output: False\nprint(is_undulating(\"121\"))      # Expected output: True",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_minimum(lst):\n    # Initialize variables to store the minimum value and its corresponding key\n    min_value = float('inf')\n    min_key = ''\n    \n    # Iterate through each tuple in the list\n    for i, (name, score) in enumerate(lst):\n        # Update the minimum value and key if a lower one is found\n        if score < min_value:\n            min_value = score\n            min_key = name\n    \n    # Return the name of the student with the minimum score\n    return min_key",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Min_Length(arrays):\n    # Initialize min_length with the maximum possible integer value\n    min_length = float('inf')\n    \n    # Iterate through each array in the list\n    for array in arrays:\n        # Update min_length if the current array is shorter than the previously recorded shortest\n        if len(array) < min_length:\n            min_length = len(array)\n    \n    return min_length\n\n# Test cases\nprint(Find_Min_Length([[1], [1, 2]]))  # Expected output: 1\nprint(Find_Min_Length([[1, 2], [1, 2, 3], [1, 2, 3, 4]]))  # Expected output: 2\nprint(Find_Min_Length([[3, 3, 3], [4, 4, 4, 4]]))  # Expected output: 3",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_lists(lists):\n    result = {}\n    for sublist in lists:\n        for item in sublist:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(decimal_num):\n    \"\"\"\n    Convert a given decimal number to its binary equivalent.\n    \n    Parameters:\n    - decimal_num (int): The decimal number to be converted.\n    \n    Returns:\n    - str: The binary representation of the input decimal number.\n    \"\"\"\n    if decimal_num == 0:\n        return \"0\"\n    binary_str = \"\"\n    while decimal_num > 0:\n        remainder = decimal_num % 2\n        binary_str = str(remainder) + binary_str\n        decimal_num //= 2\n    return binary_str",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def next_smallest_palindrome(num):\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    \n    # If the original number is less than 100, return 101\n    if num < 100:\n        return int(reversed_num)\n    \n    # Otherwise, add 1 to get the next smallest palindrome\n    result = int(str(num) + str(int(reversed_num[1:]) - 1))\n    \n    # Return the result as an integer\n    return result\n\n# Test cases\nprint(next_smallest_palindrome(99))   # Expected output: 101\nprint(next_smallest_palindrome(1221)) # Expected output: 1331\nprint(next_smallest_palindrome(120))  # Expected output: 121",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def kth_element(arr, n, k):\n    arr.sort()\n    return arr[k-1]",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    # Capitalize each component and join them together.\n    return components[0] + ''.join(x.title() for x in components[1:])",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - integer division or modulo by zero"
    ],
    "generated_code": "def eulerian_num(n, m):\n    if n == 0:\n        return 1\n    else:\n        # Calculate binomial coefficient C(n, k)\n        from math import comb\n        \n        c = comb(n + m - 1, m - 1)\n        \n        result = sum(c // comb(k, m - 1) for k in range(m))\n        \n        return result",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst_of_lists):\n    return [sorted(sublist) for sublist in lst_of_lists]",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(lst):\n    # Count and return the number of True values in the list\n    return lst.count(True)",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate list (not \"tuple\") to list",
      "Test 2: FAIL - can only concatenate list (not \"tuple\") to list",
      "Test 3: FAIL - can only concatenate list (not \"tuple\") to list"
    ],
    "generated_code": "def add_lists(lists, tuples):\n    result = lists + tuple(tuples) \n    return result",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Hexadecimal(start, end):\n    hex_digits = '0123456789abcdef'\n    count = 0\n    \n    for i in range(start, end + 1):\n        if all(digit in hex_digits[:i] for digit in str(i)):\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "import heapq\n\ndef merge_sorted_list(sorted_lists):\n    \"\"\"\n    Merge multiple sorted lists into one sorted list.\n    \n    Args:\n    - sorted_lists: A list of lists, where each sublist is already sorted in non-decreasing order.\n    \n    Returns:\n    - A list containing all elements from the input lists, sorted in non-decreasing order.\n    \"\"\"\n    # Initialize a max-heap with negative values for simplicity and use min-heap as actual implementation.\n    min_heap = []\n    merged_list = []\n\n    for i, lst in enumerate(sorted_lists):\n        if len(lst) > 0:\n            heapq.heappush(min_heap, (-lst[0], i)) # Push the first element with negation to simulate a max-heap\n    \n    while min_heap:\n        value, index = heapq.heappop(min_heap)\n        merged_list.append(-value) # Restore original sign\n        \n        if len(sorted_lists[index]) > 1:\n            next_item_index = index + 1\n            if len(sorted_lists[next_item_index]) > 0:\n                heapq.heappush(min_heap, (-sorted_lists[next_item_index][0], next_item_index))\n                \n    return merged_list\n\n# Test cases\nprint(merge_sorted_list([[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]]))\nprint(merge_sorted_list([[1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]]))\nprint(merge_sorted_list([[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]]))",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Equivalent(binary_string, length):\n    count = 0\n    for i in range(length):\n        if sum(int(x) for x in binary_string[i:]) % 2 == 1:\n            count += 1\n    return count\n\n# Test cases\nprint(odd_Equivalent(\"011001\", 6))  # Expected output: 3\nprint(odd_Equivalent(\"11011\", 5))   # Expected output: 4\nprint(odd_Equivalent(\"1010\", 4))    # Expected output: 2",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_missing(ranges, s, e):\n    result = []\n    for i in range(len(ranges)):\n        l1, r1 = ranges[i]\n        if s <= r1 < e:\n            continue\n        else:\n            result.append((s, min(e, r1)))\n    return result",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_in_nested_lists(nested_lists):\n    # Flatten all sublists into one list and remove duplicates\n    flat_list = set([item for sublist in nested_lists for item in sublist])\n    \n    # Return the sorted list of unique items\n    return sorted(list(flat_list))\n\n# Test cases\nprint(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) # Output: [12, 18, 23]\nprint(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])) # Output: [5, 23]\nprint(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])) # Output: [4, 5, 6, 8]",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perimeter(radius, height):\n    # Calculate the total surface area of the cylinder\n    surface_area = 2 * 3.14159 * radius * (radius + height)\n    \n    # The perimeter is twice the circumference of the base circle plus the height times 2π\n    perimeter_cylinder = 2 * 3.14159 * radius + 2 * 3.14159 * radius * height\n    \n    return int(perimeter_cylinder)\n\n# Test cases\nprint(perimeter(2, 4))  # Expected output: 12\nprint(perimeter(1, 2))  # Expected output: 6\nprint(perimeter(3, 1))  # Expected output: 8",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(s):\n    # Check if the string is empty or starts with '0'\n    if len(s) == 0 or s[0] == '0':\n        return False\n    else:\n        try:\n            int(s)\n            return True\n        except ValueError:\n            return False",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef assign_freq(lst: List[Tuple[int]]) -> List[Tuple[int]]:\n    \"\"\"\n    Assigns a frequency value to each unique element in the input list of tuples.\n    \n    Args:\n    lst (List[Tuple[int]]): A list of tuples where each tuple contains integers.\n    \n    Returns:\n    List[Tuple[int]]: A new list of tuples with an additional 'frequency' key indicating the number of occurrences of each tuple.\n    \"\"\"\n    # Count the occurrences of each tuple\n    counts = {}\n    for tup in lst:\n        if tup in counts:\n            counts[tup] += 1\n        else:\n            counts[tup] = 1\n    \n    # Create a new list of tuples with 'frequency' keys\n    result = []\n    for tup in lst:\n        temp_tup = tuple(tup)\n        result.append((temp_tup, counts[temp_tup]))\n    \n    return result\n\n# Check function with provided data points\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9,), (2, 7)]) == [(6, 5, 8, 3), (2, 7, 2), (9, 1)]\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)]) == [(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)]) == [(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'empty_dit' is not defined",
      "Test 2: FAIL - name 'empty_dit' is not defined",
      "Test 3: FAIL - name 'empty_dit' is not defined"
    ],
    "generated_code": "def is_all_empty(dicts):\n    \"\"\"\n    Check if all dictionaries in the given list are empty.\n    \n    Parameters:\n    dicts (list): A list of dictionaries.\n    \n    Returns:\n    bool: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    return all(not d for d in dicts)\n\n# Test cases\nprint(is_all_empty([{},{},{}]))  # Expected output: True\nprint(is_all_empty([{1,2},{},{}]))  # Expected output: False\nprint(is_all_empty({}))  # Expected output: True",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_to_float(lst):\n    result = []\n    for pair in lst:\n        try:\n            converted_pair = tuple(map(float, pair))\n        except ValueError:\n            converted_pair = None\n        result.append(converted_pair)\n    return result",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_list(s):\n    return s.split()",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def search(nums, n):\n    left, right = 0, len(nums)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == nums[left]:\n            left += 1\n        elif nums[mid] == nums[right]:\n            right -= 1\n        else:\n            return nums[left]\n    return None",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_product_tuple(tuples_list):\n    # Sort the tuples based on their products in descending order\n    sorted_tuples = sorted(tuples_list, key=lambda x: -x[0] * x[1])\n    # Return the last two elements as they will have the highest product due to sorting\n    return sorted_tuples[-2][0] * sorted_tuples[-2][1]\n\n# Test cases\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Expected output: 36\nprint(max_product_tuple([(10, 20), (15, 2), (5, 10)]))       # Expected output: 200\nprint(max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]))  # Expected output: 484",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - check_triplet() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def check_triplet(arr, target_sum, sum_of_elements):\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            if arr[i] + arr[j] + arr[n-1-i-j] == sum_of_elements:\n                return True\n    return False\n\n# Test Cases\nprint(check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6))  # Expected output: True\nprint(check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6))  # Expected output: False\nprint(check_triplet([10, 4, 2, 3, 5], 5, 15))         # Expected output: True",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef countPrimes(limit):\n    count = 0\n    primes = []\n    num = 2\n    while len(primes) < limit:\n        if isPrime(num):\n            primes.append(num)\n            count += 1\n        num += 1\n    return count\n\ndef smartNumber(n):\n    primeCount = 0\n    currentNumber = 1\n    while primeCount < n:\n        currentNumber += 1\n        if isPrime(currentNumber):\n            primeCount += 1\n    return sum(i for i in range(1, currentNumber))\n\n# Test cases\nprint(smartNumber(1))  # Output: 30\nprint(smartNumber(50))  # Output: 273\nprint(smartNumber(1000))  # Output: 2664",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'find_divisors' is not defined",
      "Test 2: FAIL - name 'find_divisors' is not defined",
      "Test 3: FAIL - name 'find_divisors' is not defined"
    ],
    "generated_code": "def is_amicable(x):\n    \"\"\"\n    Check if two numbers are an amicable pair.\n    \n    :param x: The first number of the potential amicable pair.\n    :return: True if x and its companion are amicable, False otherwise.\n    \"\"\"\n    def find_divisors(n):\n        divisors = []\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n        return sorted(divisors)\n\n    d = find_divisors(x)\n    c = find_divisors(y)\n    return len(d) > 1 and y not in d and len(c) > 1 and x not in c and sum(d) == y and sum(c) == x\n\ndef amicable_numbers_sum(num):\n    total = 0\n    for num_to_check in range(2, num):\n        x = num_to_check\n        y = find_divisors(x)[0]\n        while y < num:\n            if y >= num_to_check:\n                break\n            if sum(find_divisors(y)) == x and sum(find_divisors(x)) == y:\n                total += num_to_check\n                break\n            else:\n                y = find_divisors(y)[0]\n    return total",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def angle_complex(real_part, imag_part):\n    import cmath\n    return cmath.phase(complex(real_part, imag_part))",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_length(binary_str, length):\n    \"\"\"\n    Finds the maximum difference between the number of 0s and 1s in any sub-string within the provided binary string.\n    \n    :param binary_str: A string consisting of '0's and '1's.\n    :param length: The total length of the binary string.\n    :return: The maximum difference found between the count of 0s and 1s for all possible substrings of the input string.\n    \"\"\"\n    max_diff = -float('inf')\n    current_diff = 0\n    \n    # Iterate through each character in the binary string\n    for i in range(length):\n        if binary_str[i] == '0':\n            current_diff += 1\n            \n        # Check if there is a valid substring ending at index i with positive current_diff\n        while current_diff > 0:\n            current_diff -= 1\n            if binary_str[i-current_diff] == '1':\n                break\n        \n        # Calculate the potential difference and update max_diff if it's greater than the current max_diff\n        diff = current_diff + (length-i-1) - current_diff\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Example usage:\nprint(find_length(\"11000010001\", 11))  # Output: 6\nprint(find_length(\"10111\", 5))         # Output: 1\nprint(find_length(\"11011101100101\", 14)) # Output: 2",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_of_common_divisors(x, y):\n    def gcd(a, b): \n        while(b): \n            t = b \n            b = a % b \n            a = t \n        return a \n    \n    # Calculate GCD of x and y\n    g = gcd(x, y)\n    \n    # Find the number of divisors less than or equal to x\n    count = 0\n    for i in range(1, int(g ** 0.5) + 1):\n        if g % i == 0:\n            count += 2 if i != g // i else 1\n    \n    return count",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_int(x, y):\n    result = 0\n    for _ in range(y):\n        result += x\n    return result",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, word_list):\n    return [word for word in word_list if len(word) > n]",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'magic_square_test' is not defined",
      "Test 2: FAIL - name 'magic_square_test' is not defined",
      "Test 3: FAIL - name 'magic_square_test' is not defined"
    ],
    "generated_code": "def is_magic_square(square):\n    # Check if all rows have the same sum\n    row_sums = set([sum(row) for row in square])\n    if len(row_sums) != 1:\n        return False\n    \n    # Check if all columns have the same sum\n    col_sums = {sum(col) for col in zip(*square)}\n    if len(col_sums) != 1:\n        return False\n    \n    # Calculate total sum of the first row and check if it's valid\n    total_sum = sum(square[0])\n    if total_sum not in row_sums | col_sums:\n        return False\n    \n    return True",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(lst):\n    from collections import Counter\n    return Counter(lst).most_common(1)[0]",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n            \n    return ''.join(s_list)\n\n# Test Cases\nprint(reverse_vowels(\"Python\")) # Output: \"Python\"\nprint(reverse_vowels(\"USA\")) # Output: \"ASU\"\nprint(reverse_vowels(\"ab\")) # Output: \"ab\"",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_negativenum(numbers):\n    return sum(x for x in numbers if x < 0)",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_last(arr, p, q):\n    count = 0\n    for i in range(p):\n        if arr[-1] % 2 == 0:\n            arr.append(q)\n        else:\n            arr.insert(0, q)\n        if len(arr) > 1 and arr[-1] % 2 != 0:\n            break\n    if arr[-1] % 2 != 0:\n        return \"ODD\"\n    else:\n        return \"EVEN\"\n\n# Test cases\nprint(check_last([5,7,10],3,1)) # Should return \"ODD\"\nprint(check_last([2,3],2,3)) # Should return \"EVEN\"\nprint(check_last([1,2,3],3,1)) # Should return \"ODD\"",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hexagonal_num(n):\n    # The formula for calculating the n-th hexagonal number is 2n^2 - n.\n    result = 2 * n ** 2 - n\n    return result",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_electbill(hours):\n    if hours <= 0:\n        return 0\n    elif hours < 25:\n        rate = 1.8\n    else:\n        rate = 2.45\n    cost_per_hour = rate * hours\n    return round(cost_per_hour + 1.5)",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def zero_count(arr):\n    return sum(1 for num in arr if num == 0) / len(arr)",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is less than 1\n    if n < 1:\n        return False\n    \n    # Calculate the number of trailing zeros in binary representation of n-1\n    count = bin(n - 1).count('1')\n    \n    # If count is odd, then n cannot be expressed as a sum of non-zero powers of two\n    return count % 2 == 1",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_singly(tuples_list):\n    # Initialize an empty list to store unique single elements\n    single_elements = []\n    \n    # Iterate through each tuple in the list\n    for t in tuples_list:\n        # Check if the tuple has more than one element\n        if len(t) > 1:\n            continue  # Skip the iteration as we only need single elements\n        \n        # Convert each element of the tuple to int and append it to the single_elements list\n        single_elements.extend([int(x) for x in t])\n    \n    return single_elements\n\n# Test cases\nprint(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))  # Expected output: [3, 4, 5, 7, 1]\nprint(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]))  # Expected output: [1, 2, 3, 4, 7, 8]\nprint(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]))  # Expected output: [7, 8, 9, 10, 11, 12]",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def flip(arr, index): \n    \"\"\"Reverse elements in the array from 0 to index.\"\"\"\n    start = 0\n    end = index\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n\ndef pancake_sort(arr):\n    \"\"\"\n    Sorts an array 'arr' in ascending order using the pancake sorting algorithm.\n    \n    Parameters:\n    - arr: List[int], the unsorted array\n    \n    Returns:\n    - A list containing flipped indices for each swap operation performed,\n      representing how pancakes were flipped to sort them.\n    \"\"\"\n    flips = []\n    size = len(arr)\n    \n    # Iterate until the entire array is sorted\n    while size > 1:\n        # Find the index of the maximum element in the remaining unsorted portion\n        max_index = arr.index(max(arr[:size]))\n        \n        # Flip the portion of the array after max_index if necessary\n        if max_index != size - 1:\n            if max_index != 0:\n                flips.append(max_index + 1)  # Add reverse operation\n            flips.append(size)  # Add direct insertion\n        \n        # Flip the portion of the array starting at max_index + 1 and then directly at max_index\n        flip(arr, max_index + 1)\n        \n        # Update the size of the current unsorted segment\n        size -= 1\n    \n    return flips[::-1]\n\n# Example usage\nprint(pancake_sort([15, 79, 25, 38, 69]))  # Output: [15, 25, 38, 69, 79]\nprint(pancake_sort([98, 12, 54, 36, 85]))  # Output: [12, 36, 54, 85, 98]\nprint(pancake_sort([41, 42, 32, 12, 23]))  # Output: [12, 23, 32, 41, 42]",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_samepair(list1, list2, list3):\n    return sum(x == y and x == z for x in list1 for y in list2 for z in list3)",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_lists(lst):\n    # Initialize count variable\n    count = 0\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # Check if the current item is another list and increment count accordingly\n        if isinstance(item, list):\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_Pairs(arr, n):\n    # Calculate the prefix sum for each element in the array\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    \n    # Initialize total sum with first two elements' difference squared\n    total_sum = (prefix_sum[n] ** 2 - prefix_sum[1]) // 2\n    \n    # Iterate through the array to calculate sum of all pairs' absolute differences\n    for i in range(n - 1):\n        for j in range(i + 1, n + 1):\n            total_sum += abs(prefix_sum[j] - prefix_sum[i])\n    \n    return total_sum\n\n# Test Cases\nprint(sum_Pairs([1,8,9,15,16],5))  # Expected output: 74\nprint(sum_Pairs([1,2,3,4],4))      # Expected output: 10\nprint(sum_Pairs([1,2,3,4,5,7,9,11,14],9))  # Expected output: 188",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - AttributeError: 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def max_Abs_Diff(arr, k):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize result with the absolute difference of first and last element\n    result = abs(arr[0] - arr[-1])\n    \n    # Iterate through the sorted array to find the maximum difference after removing one element at a time\n    for i in range(len(arr)-1):\n        temp_result = abs(arr[i+1] - arr[i])\n        if temp_result > result:\n            result = temp_result\n            \n    return result\n\n# Test cases\nprint(max_Abs_Diff((2,1,5,3),4))  # Expected output: 4\nprint(max_Abs_Diff((9,3,2,5,1),5))  # Expected output: 8\nprint(max_Abs_Diff((3,2,1),3))  # Expected output: 2",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ascii_value_string(s):\n    return sum([ord(c) for c in s])",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_path_sum(triangle, m, n):\n    \"\"\"\n    Calculate the maximum total path sum from the top to the bottom of the triangle.\n    \n    :param triangle: A list of lists containing non-negative integers representing a triangle.\n    :param m: The starting index of the row where we want to calculate the maximum path sum.\n    :param n: The ending index of the row where we want to calculate the maximum path sum.\n    :return: The maximum total path sum from the specified row indices.\n    \"\"\"\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(max(0, i-n), min(i+1, n)+1):\n            if i == 1:\n                dp[i][j] = triangle[i-1][j]\n            else:\n                dp[i][j] = triangle[i-1][j] + max(dp[i-1][max(j-1, 0)], dp[i-1][min(j, n)])\n    \n    return dp[m][n]\n\n# Test cases\nprint(max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2))  # Expected output: 14\nprint(max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2))  # Expected output: 24\nprint(max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2))  # Expected output: 53",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "from typing import Tuple\n\ndef sum_digits_twoparts(n: int) -> int:\n    \"\"\"\n    Given an integer n, return the maximum possible sum of its non-zero digit pairs.\n    \n    Parameters:\n    n (int): The input integer\n    \n    Returns:\n    int: Maximum possible sum of non-zero digit pairs\n    \"\"\"\n    max_sum = 0\n    while n > 0:\n        last_digit = n % 10\n        if last_digit != 0:\n            max_sum += last_digit\n        while last_digit == 0 and n >= 10:\n            n //= 10\n            last_digit = n % 10\n        n //= 10\n    return max_sum\n\n# Check function with provided data points\nassert sum_digits_twoparts(35) == 17, \"Test case 1 failed\"\nassert sum_digits_twoparts(7) == 7, \"Test case 2 failed\"\nassert sum_digits_twoparts(100) == 19, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: list indices must be integers or slices, not tuple"
    ],
    "generated_code": "def longest_subseq_with_diff_one(nums, k):\n    n = len(nums)\n    dp = [[-1] * (k + 1) for _ in range(n)]\n    \n    def helper(i, prev_diff):\n        if i == n:\n            return 0\n        \n        key = (i, prev_diff)\n        if dp[i][prev_diff] != -1:\n            return dp[key]\n        \n        diff = abs(nums[i] - nums[i - 1])\n        max_length = 1 + helper(i + 1, prev_diff + diff)\n        \n        if prev_diff == 0 and diff == 1:\n            max_length = max(max_length, helper(i + 1, 1))\n        elif prev_diff == diff:\n            max_length = max(max_length, helper(i + 1, prev_diff))\n        \n        dp[key] = max_length\n        return dp[key]\n    \n    result = helper(0, 0)\n    return result\n\n# Test cases\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7))  # Output: 6\nprint(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7))  # Output: 3\nprint(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8))  # Output: 7",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def does_Contain_B(num, start, end):\n    # Check if num lies within the range [start, end] \n    return start <= num <= end",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef is_coprime(a, b):\n    # Compute the greatest common divisor of a and b using math.gcd()\n    gcd_ab = math.gcd(a, b)\n    \n    # If the GCD is 1, then a and b are coprime\n    if gcd_ab == 1:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n    \n    return merge(left_half, right_half)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result\n\n# Test cases\nprint(merge_sort([3, 4, 2, 6, 5, 7, 1, 9]))  # Expected output: [1, 2, 3, 4, 5, 6, 7, 9]\nprint(merge_sort([7, 25, 45, 78, 11, 33, 19]))  # Expected output: [7, 11, 19, 25, 33, 45, 78]\nprint(merge_sort([3, 1, 4, 9, 8]))  # Expected output: [1, 3, 4, 8, 9]",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def parabola_vertex(a, b, c):\n    \"\"\"\n    Calculate the vertex coordinates of a parabola given its equation in the form ax^2 + bx + c = 0.\n    \n    Parameters:\n    a (float): Coefficient of x^2\n    b (float): Coefficient of x\n    c (float): Constant term\n    \n    Returns:\n    tuple: A tuple containing the x and y coordinates of the vertex\n    \"\"\"\n    x_vertex = -b / (2 * a)\n    y_vertex = (-a * pow(x_vertex, 2) - b * x_vertex + c) / a\n    return (x_vertex, y_vertex)\n\n# Test cases to verify the correctness of the function\nassert parabola_vertex(5, 3, 2) == (-0.6, 1.55), \"Test case 1 failed\"\nassert abs(parabola_vertex(9, 8, 4) - 2.2222222222222223) < 1e-10, \"Test case 2 failed\"\nassert parabola_vertex(2, 4, 6) == (-1.0, 4.0), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    return [sublist[index] for sublist in matrix if isinstance(sublist, list)]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(num):\n    \"\"\"\n    This function takes an integer as input and returns a new integer where every other bit is toggled.\n    For example:\n    >>> even_bit_toggle_number(10)\n    0 (binary: 1010 -> 0101 = 5)\n    >>> even_bit_toggle_number(20)\n    30 (binary: 10100 -> 01010 = 30)\n    >>> even_bit_toggle_number(30)\n    20 (binary: 11110 -> 01110 = 20)\n    \"\"\"\n    result = 0\n    while num > 0:\n        if num & 1 == 0:  # Check if the least significant bit is set (even bit)\n            result |= 1  # Toggle the least significant bit\n        num >>= 1  # Right shift num by 1 bit\n    return result\n\n# Test Cases\nprint(even_bit_toggle_number(10))  # Expected output: 5\nprint(even_bit_toggle_number(20))  # Expected output: 30\nprint(even_bit_toggle_number(30))  # Expected output: 20",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def tuple_int_str(tup):\n    return tuple(map(int, tup))\n\n# Test cases\nprint(tuple_int_str((('333', '33'), ('1416', '55'))))  # Output: ((333, 33), (1416, 55))\nprint(tuple_int_str((('999', '99'), ('1000', '500'))))  # Output: ((999, 99), (1000, 500))\nprint(tuple_int_str((('666', '66'), ('1500', '555'))))  # Output: ((666, 66), (1500, 555))",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def encode_list(lst):\n    result = []\n    current_char = ''\n    count = 0\n    for char in lst:\n        if char != current_char:\n            if current_char:\n                result.append([count, current_char])\n            current_char = char\n            count = 1\n        else:\n            count += 1\n    # Add the last character and its count\n    result.append([count, current_char])\n    return result",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef min_Ops(nums: List[int], n: int, m: int) -> int:\n    total = sum(nums)\n    mean = total // n\n    diff_sum = sum(abs(num - mean) for num in nums)\n\n    if diff_sum % m == 0:\n        ops = diff_sum // m\n    else:\n        ops = diff_sum // m + 1\n\n    return ops",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def month_season(month, day):\n    seasons = {\n        'January': {'1-28': 'winter'},\n        'February': {'1-28': 'winter'},\n        'March': {'1-31': 'spring'},\n        'April': {'1-30': 'spring'},\n        'May': {'1-31': 'summer'},\n        'June': {'1-30': 'summer'},\n        'July': {'1-31': 'fall'},\n        'August': {'1-31': 'fall'},\n        'September': {'1-30': 'winter'},\n        'October': {'1-28': 'fall'},\n        'November': {'1-31': 'winter'},\n        'December': {'1-31': 'winter'}\n    }\n    \n    if month not in seasons or int(day) > max(seasons[month].keys()):\n        return None\n    \n    season_label = seasons[month][str(int(day))]\n    if season_label is None:\n        return None\n    else:\n        return season_label.capitalize()",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def gcd(a, b):\n    while b:\n        t = b\n        b = a % b\n        a = t\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solution(a, b, n):\n    if lcm(a, b) < n:\n        return 'No solution'\n    \n    # Finding one of the variables when other is set as zero.\n    if a > b:\n        k = n // a\n        return f\"x = {k}, y = {n - k*a//b}\"\n    else:\n        k = n // b\n        return f\"y = {k}, x = {n - k*b//a}\"\n\n\n# Example usage:\nprint(solution(2, 3, 7))   # Expected output: \"x = 2, y = 1\"\nprint(solution(4, 2, 7))   # Expected output: \"No solution\"\nprint(solution(1, 13, 17)) # Expected output: \"x = 4, y = 1\"",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(nums1, nums2):\n    return [num for num in nums1 if num not in nums2]\n\n# Test cases\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10], [2,4,6,8])) # Expected output: [1, 3, 5, 7, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])) # Expected output: [2, 4, 6, 8, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5,7])) # Expected output: [1, 2, 3, 4, 6, 8, 9, 10]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    total_sum = 0\n    x = n\n    while x >= 0:\n        total_sum += x\n        x -= 2\n    return total_sum",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef area_polygon(sides, length):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \n    Parameters:\n    sides (int): The number of sides of the polygon.\n    length (float): The length of each side of the polygon.\n    \n    Returns:\n    float: The area of the regular polygon.\n    \"\"\"\n    return (sides * length**2) / (4 * math.tan(math.pi / sides))\n\n# Check function with provided data points\nprint(area_polygon(4, 20)) # Expected output: 400.0\nprint(area_polygon(10, 15)) # Expected output: 1731.1969896610804\nprint(area_polygon(9, 7)) # Expected output: 302.90938549487214",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'areEquivalent' is not defined",
      "Test 2: FAIL - name 'areEquivalent' is not defined",
      "Test 3: FAIL - name 'areEquivalent' is not defined"
    ],
    "generated_code": "def is_sum_of_divisors_equal(num_1, num_2):\n    def find_factors(n):\n        factors = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                if i != n // i:\n                    factors.append(n // i)\n        return sorted(factors)\n\n    # Calculate sum of all divisors\n    sum_1 = sum(find_factors(num_1))\n    sum_2 = sum(find_factors(num_2))\n\n    return sum_1 == sum_2",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_char_position(input_string):\n    char_positions = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0,\n                      'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0,\n                      'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0,\n                      'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    \n    for char in input_string:\n        if char.isalpha():\n            lower_case_char = char.lower()\n            if lower_case_char in char_positions:\n                char_positions[lower_case_char] += 1\n                \n    total_count = sum(char_positions.values())\n    \n    return total_count\n\n# Test cases\nprint(count_char_position(\"xbcefg\"))   # Expected output: 2\nprint(count_char_position(\"ABcED\"))    # Expected output: 3\nprint(count_char_position(\"AbgdeF\"))   # Expected output: 5",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef find_even_Pair(arr: List[int], target: int) -> int:\n    counter = {}\n    for num in arr:\n        complement = target - num\n        if complement in counter:\n            counter[complement] += 1\n        else:\n            counter[num] = 1\n    result = sum([counter[i] * counter[j] for i in counter for j in counter])\n    return result",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'next_Power_OF_2' is not defined. Did you mean: 'next_Power_Of_2'?"
    ],
    "generated_code": "def next_Power_Of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \n    Parameters:\n    n (int): A positive integer.\n    \n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    exponent = 0\n    current_power = 1\n    while current_power < n:\n        exponent += 1\n        current_power *= 2\n    return current_power\n\n# Test cases\nassert next_Power_OF_2(0) == 1\nassert next_Power_OF_2(5) == 8\nassert next_Power_OF_2(17) == 32",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr, num):\n    count = arr.count(num)\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_pell(n):\n    # Base case for n=0 and n=1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Pell numbers\n    p = [0, 1]\n    \n    # Calculate Pell numbers iteratively\n    for i in range(2, n + 1):\n        next_p = p[i-1] * 2 + p[i-2]\n        p.append(next_p)\n    \n    return p[n]\n\n# Example usage:\nprint(get_pell(4))  # Output: 12\nprint(get_pell(7))  # Output: 169\nprint(get_pell(8))  # Output: 408",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_range_list(lst, start_index, end_index):\n    return sum(lst[start_index:end_index+1])",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def perimeter_pentagon(sides):\n    return sum(sides) * 4",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_occurance(s):\n    # Initialize a counter for occurrences of 'std'\n    std_count = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # If the character is 'std', increment the counter\n        if char == 'std':\n            std_count += 1\n            \n    # Return the total number of times 'std' appears in the string\n    return std_count",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef remove_splchar(s):\n    # Remove all non-alphanumeric characters using regular expression and replace them with an empty string\n    return re.sub(r'\\W+', '', s)",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_keyvalue(key_value_pairs):\n    # Initialize an empty dictionary to store the grouped values\n    grouped = {}\n    \n    # Iterate over each pair in the input list\n    for key, value in key_value_pairs:\n        if key not in grouped:\n            grouped[key] = []\n        grouped[key].append(value)\n    \n    return grouped\n\n# Test cases\nprint(group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])) \nprint(group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)]))\nprint(group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)]))",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_valid_parenthese(s: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            # Invalid character encountered\n            return False\n            \n    return len(stack) == 0",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'answer' is not defined",
      "Test 2: FAIL - name 'answer' is not defined",
      "Test 3: FAIL - name 'answer' is not defined"
    ],
    "generated_code": "def find_two_numbers(lcm_range):\n    for i in range(1, lcm_range + 1):\n        if i * i >= lcm_range:\n            break\n        elif lcm_range % i == 0 and lcm_range // i <= lcm_range / i:\n            j = lcm_range // i\n            return (i, j)\n\n# Test the function with provided data points\nprint(find_two_numbers(3))  # Expected output: (3, 2)\nprint(find_two_numbers(8))  # Expected output: (4, 2)\nprint(find_two_numbers(15)) # Expected output: (3, 5)",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_literals(strings, main_string):\n    for literal in strings:\n        if literal.lower() in main_string.lower():\n            return f'Matched!'\n    return 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_num_keith(num):\n    def k_function(n, x_sum=0):\n        while n > 0:\n            last_digit = n % 10\n            x_sum += last_digit\n            n //= 10\n            if last_digit == 0 and x_sum > 0:\n                break\n        else:\n            return False\n        if x_sum == num:\n            return True\n        return k_function(x_sum, x_sum)\n    \n    return k_function(num)\n\n# Test cases\nprint(is_num_keith(14)) # Expected output: True\nprint(is_num_keith(12)) # Expected output: False\nprint(is_num_keith(197)) # Expected output: True",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # convert decimal degrees to radians \n    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])\n\n    # haversine formula  \n    dlat = lat2 - lat1 \n    dlon = lon2 - lon1 \n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n\n    km = 6367 * c\n    return km",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_prefix(strs, length):\n    if not strs:\n        return \"\"\n    \n    min_length = min(len(s) for s in strs)\n    if min_length < length:\n        return \"\"\n    \n    prefix = []\n    for i in range(length):\n        char = strs[0][i]\n        for j in strs:\n            if j[i] != char:\n                return \"\".join(prefix)\n        prefix.append(char)\n    return \"\".join(prefix)\n\n# Test cases\nprint(common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4)) # Should print 'ta'\nprint(common_prefix([\"apples\", \"ape\", \"april\"], 3)) # Should print 'ap'\nprint(common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3)) # Should print 'teen'",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_character(input_string):\n    # Regular expression patterns for finding uppercase, lowercase, special characters, and numbers\n    upper_case_pattern = r'[A-Z]'\n    lower_case_pattern = r'[a-z]'\n    special_char_pattern = r'[^A-Za-z0-9]'\n    digit_pattern = r'\\d'\n\n    # Find all matches of each pattern in the input string\n    upper_chars = re.findall(upper_case_pattern, input_string)\n    lower_chars = re.findall(lower_case_pattern, input_string)\n    special_chars = re.findall(special_char_pattern, input_string)\n    digits = re.findall(digit_pattern, input_string)\n\n    return (upper_chars, lower_chars, special_chars, digits)",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_pairs(arr, k, diff):\n    count = 0\n    seen = set()\n    for num in arr:\n        if (num + diff) in seen or (num - diff) in seen:\n            count += 1\n        seen.add(num)\n    return count",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def greater_specificnum(arr, specificnum):\n    return any(x > specificnum for x in arr)",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_focus(a, b, c):\n    # Calculate the x-coordinate of the focus using the formula -b/(2a)\n    x = -b / (2 * a)\n    # Calculate the y-coordinate of the focus using the formula (-c)/(4*a)\n    y = -c / (4 * a)\n    return (x, y)\n\n# Example usage:\nprint(parabola_focus(5, 3, 2))  # Expected output: (-0.6, 1.6)\nprint(parabola_focus(9, 8, 4))  # Expected output: (-0.4444444444444444, 2.25)\nprint(parabola_focus(2, 4, 6))  # Expected output: (-1.0, 4.125)",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_literals(string, pattern_list):\n    for pattern in pattern_list:\n        if re.search(pattern, string):\n            return 'Matched!'\n    return 'Not Matched!'\n\n# Test cases\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['fox'])) # Should return \"Matched!\"\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['horse'])) # Should return \"Not Matched!\"\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['lazy'])) # Should return \"Matched!\"",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_common_subsequence(seq1, seq2, m, n):\n    # Initialize a DP table with dimensions (m+1) x (n+1)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Fill the DP table from bottom-right corner of the grid \n    # To top-left corner of the grid\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if seq1[i - 1] == seq2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                \n    # The value at dp[m][n] contains the length of LCS\n    return dp[m][n]\n\n# Test Cases\nprint(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7))  # Output: 4\nprint(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6))   # Output: 3\nprint(longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4))       # Output: 2",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - integer division or modulo by zero",
      "Test 2: FAIL - integer division or modulo by zero",
      "Test 3: FAIL - integer division or modulo by zero"
    ],
    "generated_code": "def prod_Square(n):\n    import math\n    \n    # Find integer square root of n\n    sqrt_n = int(math.sqrt(n))\n    \n    # Check if there exist integers x and y such that x^2 * y^2 = n\n    for i in range(sqrt_n + 1):\n        j = (n // i**2)**0.5\n        if i * j == n:\n            return True\n    return False",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Missing_Positive(arr, n): \n    i = 0\n    while(i < n):  \n        j = arr[i] - 1\n        if (arr[i] > 0 and arr[i] <= n and arr[i] != arr[j]): \n            arr[i], arr[j] = arr[j], arr[i]  \n        else:  \n            i += 1\n          \n    for i in range(n): \n        if (i + 1 != arr[i]): \n            return i + 1\n              \n    return n + 1\n  \n# Driver code \nif __name__ == \"__main__\": \n    print(first_Missing_Positive([-5, 10, 7, 8, 9, 15, -3, -1], 8))",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Intgral_Points(x_min, y_min, x_max, y_max):\n    # Calculate the number of integer points within the given boundaries\n    count = ((x_max - x_min + 1) * (y_max - y_min + 1)) // 2\n    return count",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumber(month_name):\n    # Months with 30 days\n    thirty_days_months = [\"April\", \"June\", \"September\", \"November\"]\n    \n    return month_name in thirty_days_months",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_String(s):\n    # Check if the string contains at least one alphabet character and one digit\n    return bool(re.search(r'[a-zA-Z]', s)) and bool(re.search(r'\\d', s))",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuple(input_tuple):\n    # Convert the tuple into a list to allow for removal of duplicate elements\n    temp_list = list(input_tuple)\n    \n    # Use set to eliminate duplicates and then convert back to tuple\n    result_tuple = tuple(set(temp_list))\n    \n    return result_tuple",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def octal_To_Decimal(octal_num):\n    # Convert the octal number to decimal\n    decimal_value = int(str(octal_num), 8)\n    return decimal_value\n\n# Test cases\nprint(octal_To_Decimal(25))  # Expected output: 21\nprint(octal_To_Decimal(30))  # Expected output: 24\nprint(octal_To_Decimal(40))  # Expected output: 32",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first(arr, target, start_index):\n    \"\"\"\n    Finds the index of the first occurrence of target in a sorted array arr.\n    \n    Args:\n        arr (list): A list of integers sorted in non-decreasing order.\n        target: The integer value to search for in the array.\n        start_index (int): The starting index from which to search for the target.\n        \n    Returns:\n        int: The index of the first occurrence of the target in the array, or -1 if not found.\n    \"\"\"\n    low = start_index\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        \n        if arr[mid] < target:\n            low = mid + 1\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            # Target is found but it might be on the left side as well\n            if mid == start_index or arr[mid-1] != target:\n                return mid\n            else:\n                high = mid - 1\n                \n    return -1\n\n# Check function with provided data points\nassert first([1,2,2,2,3,2,2,4,2], 2, 0) == 1\nassert first([1,2,2,2,3,2,2,4,2], 3, 0) == 4\nassert first([1,2,3], 1, 0) == 0\n\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_tuples(tuples_list, k):\n    # Filter out tuples with length less than k and return the result\n    return [tup for tup in tuples_list if len(tup) >= k]",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_exponentio(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(pow(tup1[i], tup2[i]))\n    return tuple(result)\n\n# Test Cases\nprint(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))) # Expected output: (100000, 4096, 78125, 7776)\nprint(find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))) # Expected output: (1771561, 78125, 1679616, 117649)\nprint(find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))) # Expected output: (35831808, 1679616, 40353607, 2097152)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef largest_triangle(a, b):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in an ellipse with semi-major axis 'a' and semi-minor axis 'b'.\n    \n    Parameters:\n    a (float): The length of the semi-major axis of the ellipse.\n    b (float): The length of the semi-minor axis of the ellipse.\n    \n    Returns:\n    float: The area of the largest inscribed triangle.\n    \"\"\"\n    # Calculate the maximum width for the inscribed triangle within the ellipse\n    max_width = min(a, b) * math.sqrt(2)\n    # Area of the largest inscribed equilateral triangle is (sqrt(3)/4)*side^2 where side = max_width\n    area = (math.sqrt(3) / 4) * max_width ** 2\n    return area\n\n# Test the function with provided data points\nassert abs(largest_triangle(4, 2) - 10.392304845413264) < 1e-5\nassert abs(largest_triangle(5, 7) - 4.639421805988064) < 1e-5\nassert abs(largest_triangle(9, 1) - 105.2220865598093) < 1e-5\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(num):\n    \"\"\"\n    This function takes an integer 'num' and returns the largest power of 2 which is less than or equal to num.\n    \n    Parameters:\n    - num: An integer\n    \n    Returns:\n    The largest power of 2 not greater than num as an integer.\n    \"\"\"\n    return 2 ** (num.bit_length() - 1)\n\n# Test cases\nprint(highest_Power_of_2(10)) # Expected output: 8\nprint(highest_Power_of_2(19)) # Expected output: 16\nprint(highest_Power_of_2(32)) # Expected output: 32",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_max(lst):\n    max_value = float('-inf')\n    max_positions = []\n    for i, value in enumerate(lst):\n        if value > max_value:\n            max_value = value\n            max_positions = [i]\n        elif value == max_value:\n            max_positions.append(i)\n    return max_positions",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(lst):\n    # Check if all elements in the list are the same\n    first_element = lst[0]\n    for element in lst:\n        if element != first_element:\n            return False\n    return True",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_even(input_string):\n    result = ''\n    for char in input_string:\n        if ord(char) % 2 != 0:\n            result += char\n    return result",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hamming_Distance(x, y):\n    xor_result = x ^ y\n    counter = 0\n    while xor_result:\n        counter += xor_result & 1\n        xor_result >>= 1\n    return counter",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(s, char):\n    # Initialize counter variable\n    counter = 0\n    \n    # Iterate through each character in the string\n    for c in s:\n        if c == char:\n            counter += 1\n            \n    # Return the count of occurrences\n    return counter",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def inversion_elements(lst):\n    def sort_and_count(arr):\n        n = len(arr)\n        count = 0\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if arr[i] > arr[j]:\n                    count += 1\n        return count\n    \n    total_inversions = 0\n    sorted_lst = [None] * len(lst)\n    index = []\n    \n    # Create a copy of lst and sort it\n    for idx, val in enumerate(sorted(lst)):\n        sorted_lst[idx] = val\n    \n    # Reconstruct original list based on its sorted order\n    for i in range(len(sorted_lst) - 1, -1, -1):\n        if sorted_lst[i] != None:\n            index.append(i)\n    \n    # Iterate through the index array to calculate inversions\n    for i in range(len(index)):\n        for j in range(i + 1, len(index)):\n            total_inversions += abs(index[i] - index[j])\n            \n    return total_inversions",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tuples_list):\n    result = []\n    for i in range(len(tuples_list)):\n        if i == len(tuples_list) - 1:\n            break\n        else:\n            first_tuple = ''.join(tuples_list[i])\n            second_tuple = ''.join(tuples_list[i+1])\n            result.append(first_tuple + \" \" + second_tuple)\n    return result\n\n# Test Cases\nprint(concatenate_elements([\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"])) # Expected output: ['DSP IS', 'IS BEST', 'BEST FOR', 'FOR ALL', 'ALL UTS']\nprint(concatenate_elements([\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"])) # Expected output: ['RES IS', 'IS BEST', 'BEST FOR', 'FOR ALL', 'ALL QESR']\nprint(concatenate_elements([\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"])) # Expected output: ['MSAMIS', 'IS BEST', 'BEST FOR', 'FOR ALL', 'ALL SKD']",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    max_len = 0\n    \n    for gap in range(1, n + 1):\n        for i in range(n - gap + 1):\n            j = i + gap - 1\n            \n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                \n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            \n            max_len = max(max_len, dp[i][j])\n    \n    return max_len",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Failed on is_decimal(\"123.11\"): expected True, got False"
    ],
    "generated_code": "import re\n\ndef is_decimal(decimal_str):\n    \"\"\"\n    This function checks if the provided string represents a valid decimal number.\n    \n    Parameters:\n    - decimal_str (str): The string to be checked.\n    \n    Returns:\n    - bool: True if the string is a valid decimal with exactly two digits after the decimal point, False otherwise.\n    \"\"\"\n    pattern = r'^-?\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, decimal_str))\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = {\n        'is_decimal(\"123.11\")': \"True\",\n        'is_decimal(\"0.21\")': \"True\",\n        'is_decimal(\"123.1214\")': \"False\"\n    }\n    \n    for input_, expected in test_cases.items():\n        result = is_decimal(input_)\n        assert result == eval(expected), f\"Failed on {input_}: expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def heap_replace(heap, new_item):\n    # Replace the smallest element with the new item\n    heap[0] = new_item\n    current_node_index = 0\n    while current_node_index < len(heap) and heap[current_node_index] > heap[(current_node_index - 1) // 2]:\n        parent_index = (current_node_index - 1) // 2\n        if heap[parent_index] > heap[current_node_index]:\n            break\n        else:\n            temp = heap[current_node_index]\n            heap[current_node_index] = heap[parent_index]\n            heap[parent_index] = temp\n        current_node_index = parent_index\n    return heap\n\n# Example usage\nheap = [25, 44, 68, 21, 39, 23, 89]\nprint(heap_replace(heap, 21))  # Expected output: [21, 25, 23, 44, 39, 68, 89]\n\nheap = [25, 44, 68, 21, 39, 23, 89]\nprint(heap_replace(heap, 110))  # Expected output: [23, 25, 68, 44, 39, 110, 89]\n\nheap = [25, 44, 68, 21, 39, 23, 89]\nprint(heap_replace(heap, 500))  # Expected output: [23, 25, 68, 44, 39, 500, 89]",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_allowed_specific_char(some_str):\n    # Define the regex pattern for allowed characters\n    allowed_pattern = r'^[a-zA-Z0-9]+$'\n    \n    # Check if the string matches the pattern\n    if re.match(allowed_pattern, some_str):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'bool' object is not iterable"
    ],
    "generated_code": "def count_Num(n, m):\n    \"\"\"\n    Counts how many numbers between 0 and n-1 have their Oth and Nth bit set.\n    \n    Args:\n    n (int): The upper limit of the range to check for numbers.\n    m (int): The position of the second significant bit (Oth in binary).\n    \n    Returns:\n    int: The count of numbers with the specified bit pattern.\n    \"\"\"\n    # Calculate the mask to get the bits we need\n    mask = ((1 << m) - 1)\n    # Count numbers within the given range where both bits are set\n    return sum((n & mask) > 0)\n\n# Test cases\nprint(count_Num(2, 2))  # Expected output: 1\nprint(count_Num(3, 2))  # Expected output: 2\nprint(count_Num(1, 2))  # Expected output: 1",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Loop through all numbers from 1 to n inclusive\n    for i in range(1, n+1):\n        # Add the fourth power of each number to the total sum\n        total_sum += i**4\n    \n    return total_sum",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def concatenate_strings(tuple1, tuple2):\n    # Concatenate the strings from both tuples and create new tuples with elements in order\n    result = [f\"{a}{b}\" for a, b in zip(tuple1, tuple2)]\n    return tuple(result)",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef degree_radian(radian):\n    return radian * (180 / math.pi)",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'list' object cannot be interpreted as an integer"
    ],
    "generated_code": "def decode_list(arr):\n    result = []\n    for i in range(0, len(arr), 2):\n        count = arr[i]\n        item = arr[i+1]\n        if isinstance(item, int):\n            for _ in range(count):\n                result.append(item)\n        else:\n            result.extend([item] * count)\n    return result\n\n# Test cases\nprint(decode_list([[2, 1], 2, 3, [2, 4], 5,1]))  # Output should be [1,1,2,3,4,4,5,1]\nprint(decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']))  # Output should be ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nprint(decode_list(['p', 'y', 't', 'h', 'o', 'n']))  # Output should be ['p', 'y', 't', 'h', 'o', 'n']",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_subset_list(list1, list2):\n    return all(any(item in sublist for item in sublist) for sublist in list2)",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Repeated_Char(input_str):\n    char_set = set()\n    for char in input_str:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Operations(a, b):\n    # Find the maximum of the two numbers\n    max_num = max(a, b)\n    \n    # Subtract the smaller number from the larger one until they become equal\n    while a != b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    \n    # Return the count of operations performed\n    return a\n\n# Test cases\nprint(min_Operations(2, 4))  # Output: 1\nprint(min_Operations(4, 10))  # Output: 4\nprint(min_Operations(1, 4))  # Output: 3",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_min_max(tup, k):\n    # Extracting min and max values from the first k elements of the tuple\n    result = sorted([tup[i] for i in range(k)])[:k]\n    \n    # Extending the result with the remaining elements in descending order\n    result.extend(sorted(tup[k:], reverse=True)[:len(tup)-k])\n    \n    return result",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def replace_max_specialchar(s,n):\n    return s.replace('.',':').replace(',',':').replace(' ',':')",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_type(tup):\n    types = set()\n    for elem in tup:\n        # Checking if it's a string and then converting it to its ASCII value\n        if isinstance(elem, str):\n            ascii_val = ord(elem)\n            types.add(ascii_val)\n        else:\n            types.add(type(elem))\n    return len(types) == 1",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_majority(nums, n, k):\n    count = 0\n    start_index = 0\n    \n    for i in range(n):\n        if nums[i] == k:\n            count += 1\n            start_index = i + 1\n        else:\n            count -= 1\n            \n        if count < 0 or i >= n - k:\n            break\n                \n    return start_index <= n - k and all(nums[start_index+i] == k for i in range(k))",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Min(nums, start, end):\n    if nums[start] < nums[end]:\n        return min(nums)\n    mid = (start + end) // 2\n    left_min = find_Min(nums, start, mid)\n    right_min = find_Min(nums, mid + 1, end)\n    return min(left_min, right_min)\n\n# Test cases\nprint(find_Min([1,2,3,4,5],0,4))  # Output: 1\nprint(find_Min([4,6,8],0,2))      # Output: 4\nprint(find_Min([2,3,5,7,9],0,4))  # Output: 2",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(input_str):\n    result = ''\n    for i in range(len(input_str)):\n        if i % 2 == 0:\n            result += input_str[i]\n    return result\n\n# Test cases\nprint(odd_values_string('abcdef'))  # Expected output: 'ace'\nprint(odd_values_string('python'))  # Expected output: 'pto'\nprint(odd_values_string('data'))    # Expected output: 'dt'",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(num, start_bit, end_bit):\n    mask = ((1 << (end_bit + 1)) - 1) & ~((1 << start_bit) - 1)\n    return num & mask == 0",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_arrange_array(arr, n):\n    i = 0\n    for j in range(n):\n        if arr[j] < 0:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            i += 1\n    return arr\n\n# Example usage and test case checks\nprint(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)) # Expected output: [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nprint(re_arrange_array([12, -14, -26, 13, 15], 5))         # Expected output: [-14, -26, 12, 13, 15]\nprint(re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)) # Expected output: [-42, -39, -78, 10, 24, 36, 85]",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(input_str, replacement_char):\n    return input_str.replace(' ', replacement_char)",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum(triangle, level):\n    # Base case: if we reach the last row, return its value\n    if level == len(triangle) - 1:\n        return triangle[level][0]\n    \n    # Recursive case: move down and take the next element from either side\n    return triangle[level][0] + max(max_sum(triangle, level + 1), max_sum(triangle, level + 1))\n\n# Test cases to verify the correctness of the solution\nprint(max_sum([[1], [2,1], [3,3,2]], 3))  # Expected output: 6\nprint(max_sum([[1], [1, 2], [4, 1, 12]], 3))  # Expected output: 15\nprint(max_sum([[2], [3,2], [13,23,12]], 3))  # Expected output: 28",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def larg_nnum(arr, n):\n    return sorted(arr, reverse=True)[:n]\n\n# Test cases\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) # [100,90]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)) # [100,90,80,70,60]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)) # [100,90,80]",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lateralsuface_cylinder(radius,height):\n    return 2 * 3.14 * radius * height",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(side_length):\n    return side_length ** 3",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_set_number(num):\n    # Create a mask with '1' at every other bit position starting from the least significant bit\n    mask = ((1 << num.bit_length()) - 1) ^ ((1 << num.bit_length() + 1) - 1)\n    # Use XOR operation to set even bits\n    result = num ^ mask\n    return result",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'No_of_Triangle' is not defined",
      "Test 2: FAIL - name 'No_of_Triangle' is not defined",
      "Test 3: FAIL - name 'No_of_Triangle' is not defined"
    ],
    "generated_code": "def no_of_triangle(n, k):\n    if n < 0 or k > n:\n        return -1\n    max_triangles = 0\n    for side_length in range(k + 1, min(3 * n // 2 + 1, 2 * k)):\n        triangles_on_one_side = ((side_length ** 2) - (side_length - 1)) // 2\n        max_triangles += triangles_on_one_side * (k - side_length + 1)\n    return max_triangles\n\n# Test cases\nprint(no_of_triangle(4, 2))  # Output: 7\nprint(no_of_triangle(4, 3))  # Output: 3\nprint(no_of_triangle(1, 3))  # Output: -1",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_occurences(tuples_list):\n    \"\"\"\n    Function to count occurrences of each tuple in the list.\n    \n    Args:\n    tuples_list : List[Tuple[int]] - A list of tuples representing record occurrences\n    \n    Returns:\n    Dict[Tuple[int], int] - A dictionary where keys are tuples and values are counts of their occurrences\n    \"\"\"\n    # Initialize an empty dictionary to store the occurrence counts\n    occurrence_count = {}\n    \n    # Iterate through each tuple in the input list\n    for record in tuples_list:\n        # If the tuple is already in the dictionary, increment its count\n        if record in occurrence_count:\n            occurrence_count[record] += 1\n        else:\n            # Otherwise, add it to the dictionary with a count of 1\n            occurrence_count[record] = 1\n            \n    return occurrence_count",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def number_of_substrings(s):\n    n = len(s)\n    total_substrings = 0\n    \n    for i in range(n):\n        left, right = i, i\n        while right < n and s[right] >= s[i]:\n            right += 1\n        \n        # Count all possible substrings with center 'i'\n        half_length = right - i - 1\n        total_substrings += ((half_length + 1) * (half_length // 2) + 1)\n        \n        # Move the window by one character to find other centers\n        i = right\n        while i < n:\n            if s[i] > s[left]:\n                break\n            left, right = i, i\n            while right < n and s[right] >= s[i]:\n                right += 1\n            \n            half_length = right - i - 1\n            total_substrings += ((half_length + 1) * (half_length // 2) + 1)\n            \n            i += 1\n    \n    return total_substrings",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_total_number_of_sequences(length, max_value):\n    # Initialize the DP array with the base case\n    dp = [1] + [0]*length\n    \n    for i in range(1, length+1):\n        # Iterate through all values from 1 to max_value\n        for j in range(1, min(max_value, 2**i)+1):\n            dp[i] += dp[i-1]\n    \n    return dp[length]\n\n# Test cases\nprint(get_total_number_of_sequences(10, 4))  # Expected output: 4\nprint(get_total_number_of_sequences(5, 2))   # Expected output: 6\nprint(get_total_number_of_sequences(16, 3))  # Expected output: 84",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'replace_list' is not defined",
      "Test 2: FAIL - name 'replace_list' is not defined",
      "Test 3: FAIL - name 'replace_list' is not defined"
    ],
    "generated_code": "def replace_last_element(lst, new_lst):\n    \"\"\"\n    Replace the last element of lst with elements from new_lst.\n    \n    Args:\n        lst (list): The original list.\n        new_lst (list): The list whose elements will replace the last one in lst.\n        \n    Returns:\n        list: A new list where the last element is replaced by elements from new_lst.\n    \"\"\"\n    return [lst[i] for i in range(len(lst)-1)] + new_lst",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def array_3d(n, m, p):\n    return [[[ '*' for _ in range(p)] for _ in range(m)] for _ in range(n)]",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(input_string):\n    return len(input_string)",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef sort_on_occurence(lst):\n    # Count occurrences of each tuple in the list\n    counts = [Counter(tup) for tup in lst]\n    \n    # Sort the tuples by their occurrence count and then by the first element of the tuple\n    sorted_lst = sorted(zip(counts, lst), key=lambda x: (-x[0].most_common(1)[0][1], x[1]))\n    \n    # Extract the tuples with the correct order and return them as a new list\n    return [tup[1] for tup in sorted_lst]\n\n# Test cases\nprint(sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]))  # Should print: [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nprint(sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]))  # Should print: [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nprint(sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]))  # Should print: [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    Find the smallest integer m such that m*m is greater than n.\n    \n    Parameters:\n    - n (int): The starting point for finding the next perfect square\n    \n    Returns:\n    int: The next perfect square greater than n\n    \"\"\"\n    # Calculate the square root of n and round it up to get the next perfect square's value\n    return math.ceil(math.sqrt(n)) ** 2\n\n# Test cases to verify the correctness of the function\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum(arr, n): \n    inc = [0]*n  \n    ex = [0]*n  \n\n    # Initialize all elements in ex as negative infinity and last element is set as zero\n    for i in range(n):  \n        ex[i] = float(\"-inf\")  \n        if(i == 0):  \n            ex[0] = arr[0]\n        else:\n            ex[i] = max(ex[i-1], arr[i])\n    \n    # Iterate through each item starting from second one\n    for i in range(1,n):  \n        # Check every subset till now\n        for j in range(0,i+1):  \n            # If current item can be appended at end then update it with max value between current and previous\n            if((i-j) >= 0):  \n                inc[i] += max(ex[j-1]+arr[i], inc[i]) \n            else: \n                inc[i] += arr[i]\n\n    return inc[n-1]\n\n# Test Cases\nprint(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)) # Output: 194\nprint(max_sum([80, 60, 30, 40, 20, 10], 6)) # Output: 210\nprint(max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8)) # Output: 138",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def babylonian_squareroot(n):\n    \"\"\"\n    This function calculates the square root of n using the Babylonian method.\n    \n    Parameters:\n    - n: The number to calculate the square root of.\n    \n    Returns:\n    - The approximate square root of n as a floating point number.\n    \"\"\"\n    x = n / 2.0\n    while True:\n        y = (x + n/x) / 2.0\n        if abs(y - x) < 1e-10:\n            return y\n        x = y\n\n# Test cases\nprint(babylonian_squareroot(10))  # Expected output: approximately 3.162277660168379\nprint(babylonian_squareroot(2))   # Expected output: approximately 1.414213562373095\nprint(babylonian_squareroot(9))   # Expected output: exactly 3.0",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lps(s):\n    \"\"\"\n    Finds the length of the longest palindromic subsequence in the given string.\n    \n    Parameters:\n    s (str): The input string\n    \n    Returns:\n    int: The length of the longest palindromic subsequence\n    \"\"\"\n    m = len(s)\n    dp = [[0 for x in range(m)] for y in range(m)]\n    \n    # All substrings of length 1 are palindromes themselves\n    for i in range(m):\n        dp[i][i] = 1\n    \n    # Fill the table\n    for cl in range(2, m+1):\n        for i in range(m-cl+1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n                \n    return dp[0][m-1]\n\n# Test cases\nprint(lps(\"TENS FOR TENS\"))  # Output: 5\nprint(lps(\"CARDIO FOR CARDS\"))  # Output: 7\nprint(lps(\"PART OF THE JOURNEY IS PART\"))  # Output: 9",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum up to n.\n    \n    Args:\n    n (int): The number up to which the harmonic sum is calculated.\n    \n    Returns:\n    float: The harmonic sum of numbers from 1 to n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def intersection_array(arr1, arr2):\n    # Using set intersection to find common elements between two lists\n    return list(set(arr1) & set(arr2))",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(tup, x):\n    return tup.count(x)\n\n# Test cases\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4)) # Expected output: 0\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10)) # Expected output: 3\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8)) # Expected output: 4",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def insert_element(lst, elem):\n    return [elem] + lst[:-1]",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def convert(z):\n    \"\"\"\n    Convert a complex number z into its polar representation as a tuple (r, theta),\n    where r is the magnitude and theta is the phase angle in radians.\n    \n    Parameters:\n    - z: A complex number\n    \n    Returns:\n    A tuple representing the polar coordinates of z\n    \"\"\"\n    import cmath\n    return cmath.polar(z)\n\n# Test Cases\nprint(convert(1))  # Expected output: (1.0, 0.0)\nprint(convert(4j))  # Expected output: (4.0, 1.5707963267948966)\nprint(convert(5+3j))  # Expected output: (5.830951894845301, 0.982793723247329)",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(lst):\n    return len(list(filter(lambda x: isinstance(x, int), lst)))",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def words_ae(sentence):\n    # Splitting the sentence into individual words\n    words = sentence.split()\n    \n    # Using list comprehension and filter to get words starting with 'a' or 'e'\n    result = [word for word in words if word.startswith('a') or word.startswith('e')]\n    \n    return result",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def combinations_colors(colors_list, n):\n    import itertools\n    \n    # Generate all possible combinations with repetition for a given list of colors\n    combinations = list(itertools.product(colors_list, repeat=n))\n    \n    return combinations",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Primes_nums(n):\n    \"\"\"\n    Counts and returns the number of prime numbers less than n.\n    \n    Parameters:\n    n (int): A non-negative integer\n    \n    Returns:\n    int: The count of prime numbers less than n\n    \"\"\"\n    if n <= 2:\n        return 0\n    \n    primes = [True] * n\n    primes[0], primes[1] = False, False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n, i):\n                primes[j] = False\n                \n    return sum(primes)\n\n# Check function with provided data points\nassert count_Primes_nums(5) == 2, \"Test case 1 failed\"\nassert count_Primes_nums(10) == 4, \"Test case 2 failed\"\nassert count_Primes_nums(100) == 25, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(x, y):\n    return(y,x)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "count_odd = lambda nums: sum(1 for num in nums if num % 2 != 0)",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximize_elements(tuples1, tuples2):\n    max_tuples = []\n    for i in range(len(tuples1)):\n        new_tuple = ()\n        for j in range(2):  # Iterate over each element of the tuple\n            if j == 0:\n                max_value = max(tuples1[i][j], tuples2[i][j])\n                index = min(tuples1[i][j] + 1, tuples2[i][j])\n            else:\n                max_value = max(tuples1[i][j], tuples2[i][j])\n                index = max(tuples1[i][j] - 1, tuples2[i][j])\n            new_tuple += (index,)\n        max_tuples.append(new_tuple)\n    return tuple(max_tuples)\n\n# Test cases\nprint(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\nprint(maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))))\nprint(maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))))",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_newman_shanks_williams_prime(n):\n    # Implement the logic to check if a number is a Newman-Shanks-Williams prime\n    pass\n\ndef newman_prime(n):\n    # Find and return the n-th Newman-Shanks-Willsom primes\n    return -1  # Placeholder for the actual implementation",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import Tuple\nimport numpy as np\n\ndef division_elements(tup1: Tuple[int], tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n    Perform element-wise integer division of two tuples.\n    \n    Args:\n    tup1 (Tuple[int]): The first tuple for division.\n    tup2 (Tuple[int]): The second tuple for division.\n    \n    Returns:\n    Tuple[int]: A new tuple containing the result of each element-wise division.\n    \"\"\"\n    # Convert tuples into NumPy arrays for easier handling and then divide\n    array1 = np.array(list(tup1))\n    array2 = np.array(list(tup2))\n    \n    # Ensure division is an integer division using `//`\n    divided_array = array1 // array2\n    \n    # Return as a tuple\n    return tuple(divided_array)\n\n# Test cases to verify the correctness of the function\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16), (6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18), (5, 7, 6, 9)) == (4, 2, 6, 2)\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_two_parts(lst, k):\n    return [lst[:k], lst[k:]]",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1, dict2):\n    return {**dict1, **dict2}\n\n# Test cases\nprint(merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200}))  # Should print: {'x': 300, 'y': 200, 'a': 100, 'b': 200}\nprint(merge_dict({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900}))  # Should print: {'a': 900, 'b': 900, 'd': 900, 'a': 900, 'b': 900, 'd': 900}\nprint(merge_dict({'a': 10, 'b': 20}, {'x': 30, 'y': 40}))  # Should print: {'x': 30, 'y': 40, 'a': 10, 'b': 20}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dog_age(dog_years):\n    if dog_years <= 3:\n        human_years = dog_years * 10.5\n    else:\n        human_years = 31 + (dog_years - 3) * 4\n    return int(human_years)",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n    \n    Parameters:\n    side_length (int): The length of each edge of the cube.\n    \n    Returns:\n    int: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    total = 0\n    for i in range(1, 2*n, 2):  # Generate and add odd numbers from 1 to 2n-1\n        total += i**2\n    return total",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_star_num(n):\n    # Calculate n-th star number using the formula: Star number = n^3 + (n-1)^3\n    result = pow(n, 3) + pow((n - 1), 3)\n    return result\n\n# Test cases\nassert find_star_num(3) == 37, \"Test case 1 failed\"\nassert find_star_num(4) == 73, \"Test case 2 failed\"\nassert find_star_num(5) == 121, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char):\n    return ord(char)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_even_and_even_index(lst, index):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n\n# Test Cases\nprint(sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6))  # Output: 30\nprint(sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10))  # Output: 26\nprint(sum_even_and_even_index([5, 6, 12, 1], 4))  # Output: 12",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    \"\"\"\n    This function calculates the sum of the fifth powers of the first n even natural numbers.\n    \n    Parameters:\n    n (int): The number of initial even natural numbers to consider.\n    \n    Returns:\n    int: The sum of the fifth powers of the first n even natural numbers.\n    \"\"\"\n    result = 0\n    for i in range(1, n + 1):\n        # Calculate the ith even number and its fifth power, then add it to the result\n        result += ((2 * i) ** 5)\n    return result",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rear_extract(records):\n    # Extracting the last elements of each tuple in the list and converting them into a new list.\n    return [item[-1] for item in records]\n\n# Test Cases\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19], \"Test case 1 failed\"\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45], \"Test case 2 failed\"\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    return tuple(result)\n\n# Test cases\nprint(substract_elements((10, 4, 5), (2, 5, 18)))  # Expected output: (8, -1, -13)\nprint(substract_elements((11, 2, 3), (24, 45 ,16)))  # Expected output: (-13, -43, -13)\nprint(substract_elements((7, 18, 9), (10, 11, 12)))  # Expected output: (-3, 7, -3)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for i in range(n+1):\n        # Calculate binomial coefficient and add it if its index is even\n        if i % 2 == 0:\n            total_sum += comb(n, i)\n    return total_sum",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: 2 is not in list"
    ],
    "generated_code": "def get_Position(arr, n, x):\n    # Find the index where 'x' is first found in arr\n    index = -1 * arr.index(x)\n    \n    if index != -1:\n        # Check if 'n' is greater than the length of arr and there's no duplicate at the beginning\n        if n > len(arr) or (len(arr) > 0 and arr[0] == n):\n            return n\n        \n        # Iterate backward through the array\n        for i in range(len(arr)-1, index-1, -1):\n            # If the current value equals 'n', return its index\n            if arr[i] == n:\n                return i + 1\n    \n    # If 'n' is not found or does not satisfy the condition, return -1\n    return -1\n\n# Test cases\nprint(get_Position([2,5,4],3,2))  # Expected output: 2\nprint(get_Position([4,3],2,2))    # Expected output: 2\nprint(get_Position([1,2,3,4],4,1))# Expected output: 4",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    return round(math.pi * radius**2 * height, 5)",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_filter(dict_input, value_to_match):\n    \"\"\"\n    Filters the given dictionary for items where the value matches the specified value_to_match.\n    \n    Args:\n        dict_input (dict): The input dictionary containing individuals as keys and their heights as values.\n        value_to_match (int/float): The height value to match against in the dictionary.\n        \n    Returns:\n        dict: A new dictionary containing only those entries from the original dictionary where the value field is equal to value_to_match.\n    \"\"\"\n    return {key: value for key, value in dict_input.items() if value == value_to_match}\n\n# Check function with provided data points\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170))\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180))\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190))",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_first_elements(tup):\n    # Convert tuple to list to iterate elements from left to right\n    lst = list(tup)\n    result = 0\n    for i in range(len(lst)):\n        if not isinstance(lst[i], tuple):\n            break\n        else:\n            result += 1\n    return result\n\n# Test cases\nprint(count_first_elements((1, 5, 7, (4, 6), 10)))  # Expected output: 3\nprint(count_first_elements((2, 9, (5, 7), 11)))      # Expected output: 2\nprint(count_first_elements((11, 15, 5, 8, (2, 3), 8))) # Expected output: 4",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_num_decagonal(n):\n    # Calculate the n-th decagonal number using the formula\n    decagonal_number = 4*n*(n-1) - 3*n + 2\n    return decagonal_number",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True, i\n    return False, -1",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_unique(lst):\n    \"\"\"\n    This function checks whether all elements in the input list 'lst' are unique.\n    \n    Parameters:\n    lst (list): The input list of integers.\n    \n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    # Create a set from the list and compare its length with the original list's length\n    return len(set(lst)) == len(lst)",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sub_list(list1, list2):\n    # Use map and lambda function to subtract elements of list2 from each element of list1\n    result = list(map(lambda x, y: x - y, list1, list2))\n    return result",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def validate(n):\n    digits = [int(i) for i in str(n)]\n    return all(digits[i] <= n // 10**i for i in range(len(str(n))))",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(lst, element):\n    return lst.count(element) == len(lst)",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def text_match_two_three(text):\n    # Check if the string starts with 'a' and ends with 'b'\n    if not text.startswith('a') or len(text) < 4:\n        return 'Not matched!'\n    \n    # Count occurrences of characters in the middle part\n    count_b = text.count('b')\n    \n    # If there are exactly two or three 'b's, return 'Found a match!'\n    if count_b == 2 or count_b == 3:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sub_array_sum_repeated(arr, n, k):\n    arr.extend(arr * (k - 1))  # Repeat the original array 'n' times to form 'arr*'\n    \n    dp = [arr[0]] + [max(a, b) for a, b in zip(arr[:-1], arr[1:]) if a > b]\n    \n    return max(dp)\n\n# Test Cases\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))  # Expected output: 30\nprint(max_sub_array_sum_repeated([-1, 10, 20], 3, 2))      # Expected output: 59\nprint(max_sub_array_sum_repeated([-1, -2, -3], 3, 3))      # Expected output: -1",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'square_Sum' is not defined",
      "Test 2: FAIL - name 'square_Sum' is not defined",
      "Test 3: FAIL - name 'square_Sum' is not defined"
    ],
    "generated_code": "def square_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += (2 * i) ** 2\n    return total",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: modular_inverse() takes 2 positional arguments but 3 were given"
    ],
    "generated_code": "from typing import List\n\ndef modular_inverse(arr: List[int], mod_prime: int) -> int:\n    \"\"\"\n    Returns the count of numbers in the array whose modular inverse modulo 'mod_prime' equals themselves.\n    \n    Parameters:\n    arr (List[int]): The input array containing integers.\n    mod_prime (int): A prime integer used as the modulus for finding modular inverses.\n    \n    Returns:\n    int: The count of numbers with modular inverse equal to themselves.\n    \"\"\"\n    count = sum(1 for x in arr if x != 0 and pow(x, -1 % mod_prime, mod_prime) == x)\n    return count\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    assert modular_inverse([1, 6, 4, 5], 4, 7) == 2\n    assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\n    assert modular_inverse([2, 3, 4, 5], 4, 6) == 1\n    print(\"All test cases passed.\")\n\ncheck_function()",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Days(year):\n    # Calculate the total number of leap years within the range [year - 1, year]\n    leap_years = ((year - 1) // 4) - ((year - 1) // 100) + ((year - 1) // 400)\n    \n    # Number of non-leap years between the first day of the current year and February 29th of the previous year\n    if year % 4 != 0:\n        leap_days = 365 - (leap_years * 366)\n    else:\n        leap_days = 365 + leap_years\n    \n    # Total days in a year\n    total_days = 365 * (year - 1) + leap_days + 1\n    \n    # Calculate odd days\n    odd_days = total_days % 7\n    if odd_days == 0:\n        odd_days += 7\n    \n    return odd_days",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length(lst):\n    if not lst:\n        return 0, []\n    current_max = 1\n    result = [[lst[0]]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            result[-1].append(lst[i])\n        else:\n            result.append([lst[i]])\n            current_max += 1\n    return current_max, result",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from functools import lru_cache\n\ndef count_no_of_ways(n, k):\n    @lru_cache(maxsize=None)\n    def dp(index, last_color):\n        if index == n:\n            return 1\n        total = 0\n        for color in range(k):\n            if color != last_color:\n                total += dp(index + 1, color)\n        return total\n    \n    return dp(0, -1)\n\n# Test cases\nprint(count_no_of_ways(2, 4))  # Expected output: 16\nprint(count_no_of_ways(3, 2))  # Expected output: 6\nprint(count_no_of_ways(4, 4))  # Expected output: 228",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(a, b):\n    return a // b",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef otherside_rightangle(a, c):\n    \"\"\"\n    Given two sides 'a' and 'c' of a right-angled triangle where 'c' is the hypotenuse,\n    calculate the length of the other side 'b'.\n    \n    Parameters:\n    a (float): One of the legs of the right-angled triangle.\n    c (float): The hypotenuse of the right-angled triangle.\n    \n    Returns:\n    float: Length of the other leg.\n    \"\"\"\n    b = math.sqrt(c**2 - a**2)\n    return b\n\n# Check function with provided data points\nprint(otherside_rightangle(7,8))  # Expected output: 10.63014581273465\nprint(otherside_rightangle(3,4))  # Expected output: 5\nprint(otherside_rightangle(7,15)) # Expected output: 16.55294535724685",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def max_val(lst):\n    # Initialize variable to store the maximum value\n    max_value = lst[0]\n    \n    # Iterate through each element in the list\n    for i in range(len(lst)):\n        if isinstance(lst[i], int) and lst[i] > max_value:\n            max_value = lst[i]\n    \n    return max_value",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_div(num):\n    total = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            total += i\n    return total",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Inv_Count(arr, n): \n    # Initialize inversion count\n    inv_count = 0\n  \n    # Traverse all elements\n    for i in range(n - 1): \n        # Check if current element is greater than next element\n        if arr[i] > arr[i + 1]: \n            inv_count += 1\n  \n    return inv_count",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_list(nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def intersection_nested_lists(main_list, sublists):\n    \"\"\"\n    Finds and returns the common nested lists from the main_list with those found in each sublist of sublists.\n    \n    :param main_list: List containing various types of data points.\n    :param sublists: Nested list where each element is a sublist to compare against the main_list.\n    :return: A new list containing the common nested elements between the main_list and each sublist in sublists.\n    \"\"\"\n    # Initialize an empty list to store the results\n    result = []\n    # Iterate through each sublist in sublists\n    for sublist in sublists:\n        # Create a copy of the current sublist as we need it unmodified for comparison\n        temp_sublist = sublist[:]\n        # Compare the elements of the main_list with each sublist, appending matches to result\n        for item in main_list:\n            if item in temp_sublist:\n                result.append(item)\n                temp_sublist.remove(item)  # Remove the matched element from temp_sublist\n    return result",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_aggregate(lst):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n    \n    Parameters:\n    lst (list): A list where each tuple contains at least two elements.\n    \n    Returns:\n    tuple: The element with the highest second value and its corresponding first element as a tuple.\n    \"\"\"\n    return max(lst, key=lambda x: (x[1], x[0]))[0], max(lst, key=lambda x: (x[1], x[0]))[1]",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\nfrom itertools import combinations\n\ndef count_binary_seq(n):\n    \"\"\"\n    Returns the count of binary sequences of length 2n where the sum of the first n bits equals the sum of the last n bits.\n    \n    :param n: Length parameter for generating binary sequences\n    :return: Count of valid binary sequences\n    \"\"\"\n    # Generate all possible combinations of bits at positions from 0 to n-1 and n to 2*n-1\n    bit_combinations = list(combinations(range(2*n), n))\n    \n    # Filter combinations where the number of '1's in each half matches\n    valid_sequences = [seq for seq in bit_combinations if sum(seq[0:n]) == sum(seq[n:])]\n    \n    # The number of unique permutations of these combinations gives us the count\n    sequence_count = len(set(valid_sequences))\n    \n    return float(sequence_count)\n\n# Test the function with provided data points\nassert round(count_binary_seq(1)) == 2\nassert round(count_binary_seq(2)) == 6\nassert round(count_binary_seq(3)) == 20",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object has no attribute 'get'",
      "Test 2: FAIL - 'int' object has no attribute 'get'",
      "Test 3: FAIL - 'int' object has no attribute 'get'"
    ],
    "generated_code": "def dict_depth(d):\n    \"\"\"\n    Find the depth of a nested dictionary.\n    \n    Parameters:\n    d (dict): The dictionary to measure the depth of.\n    \n    Returns:\n    int: The depth of the dictionary.\n    \"\"\"\n    max_depth = -1\n    for value in d.values():\n        if isinstance(value, dict):\n            current_depth = 1 + max(dict_depth(value).get(0, 0), dict_depth(value))\n            max_depth = max(max_depth, current_depth)\n    return max_depth",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'set_Bit_Number' is not defined",
      "Test 2: FAIL - name 'set_Bit_Number' is not defined",
      "Test 3: FAIL - name 'set_Bit_Number' is not defined"
    ],
    "generated_code": "def set_bit_number(n):\n    # Find the position of the rightmost 1-bit and subtract 1 from it.\n    return n & -n",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def solve(A, n):\n    # Initialize counts for each type of inversions\n    cnt_type_1 = 0\n    cnt_type_2 = 0\n    \n    # Iterate through the array to count both types of inversions\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if A[i] > A[j]:\n                cnt_type_1 += 1\n            elif A[i] < A[j]:\n                cnt_type_2 += 1\n                \n    # Compare the counts and return True if they are equal, otherwise return False\n    return cnt_type_1 == cnt_type_2\n\n# Example usage:\nprint(solve([1,0,2], 3))  # Expected output: True\nprint(solve([1,2,0], 3))  # Expected output: False\nprint(solve([1,2,1], 3))  # Expected output: True",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Element(arr, idxs, n, k):\n    if len(idxs) == 1:\n        start, end = idxs[0]\n        # If there is only one rotation and the current index falls within it, return the element.\n        if k % n == 0 or k < end:\n            return arr[k]\n        else:\n            return arr[start + (k - end)]\n    \n    elif len(idxs) > 1:\n        for i in range(len(idxs)):\n            if i == len(idxs) - 1:\n                start, end = idxs[i]\n                # Calculate new index considering the last rotation's effect on indices.\n                new_idx = ((start + (k - end)) % n)\n                if new_idx >= n or new_idx < start:\n                    new_idx += n\n                return arr[new_idx]\n            else:\n                start, end = idxs[i]\n                # Recursively calculate new index considering previous rotations' effects.\n                new_idx = ((start + (k - end)) % n)\n                if new_idx >= n or new_idx < start:\n                    new_idx += n\n                return find_Element(arr, idxs[:i] + idxs[i+1:], n, new_idx)\n\n# Example usage\nprint(find_Element([1,2,3,4,5], [[0,2],[0,3]], 2, 1))\nprint(find_Element([1,2,3,4], [[0,1],[0,2]], 1, 2))\nprint(find_Element([1,2,3,4,5,6], [[0,1],[0,2]], 1, 1))",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(words_list):\n    # Find and return the first pair of strings that start with 'p'\n    for word in words_list:\n        if word.startswith(\"p\"):\n            return word.split()\n            \nstart_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\nstart_withp([\"Python Programming\",\"Java Programming\"])\nstart_withp([\"Pqrst Pqr\",\"qrstuv\"])",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_increasing_subseq(nums: List[int], k: int, start_index: int, end_index: int) -> int:\n    if start_index == end_index:\n        return nums[start_index]\n    \n    mid = start_index + (end_index - start_index) // 2\n    \n    # Calculate sums for left half\n    left_sum = max(max_sum_increasing_subseq(nums, k, start_index, mid), \n                   nums[mid] * (mid + 1 >= end_index))\n    \n    # Calculate sums for right half\n    right_sum = max(max_sum_increasing_subseq(nums, k, mid + 1, end_index), \n                    nums[mid] * (mid + 1 >= end_index))\n    \n    # Return the overall maximum sum\n    return max(left_sum, right_sum)",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def colon_tuplex(t, n, value):\n    # Ensure t is a list for easier manipulation\n    if not isinstance(t, list):\n        t = list(t)\n    \n    # Insert the specified value at the nth position in the list\n    t.insert(n, value)\n    \n    # Return the new tuple with the inserted value\n    return tuple(t)",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport heapq\n\ndef large_product(lis1: List[int], lis2: List[int], n: int) -> List[int]:\n    if len(lis1) < n or len(lis2) < n:\n        return []\n    \n    # Combine both lists and sort it in descending order\n    combined = sorted(zip(lis1, lis2), reverse=True)\n    \n    # Extract the first 'n' elements from the combined list\n    result = [product for _, product in combined[:n]]\n    \n    return result",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(x, y):\n    if x >= y:\n        return x\n    else:\n        return y",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_left_most_unset_bit(num):\n    \"\"\"\n    Set the leftmost unset bit in num and return the new value.\n    \n    Args:\n    num (int): The integer number whose leftmost unset bit is to be found.\n    \n    Returns:\n    int: The new integer with its leftmost unset bit set.\n    \"\"\"\n    while (num & 1) == 1:\n        num = num >> 1\n    return num + 1\n\n# Test cases\nprint(set_left_most_unset_bit(10))  # Expected output: 14\nprint(set_left_most_unset_bit(12))  # Expected output: 14\nprint(set_left_most_unset_bit(15))  # Expected output: 15",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cone(radius, height):\n    return (math.pi * radius ** 2 * height) / 3",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(lst):\n    # Filter out negative numbers and return the remaining ones as a list\n    return [x for x in lst if x >= 0]",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def max_sum_rectangular_grid(grid, n):\n    if not grid or len(grid[0]) != n:\n        raise ValueError(\"Invalid input\")\n\n    # Initialize DP table with zeros\n    dp = [[0] * n for _ in range(n)]\n    \n    # Fill the first row and column of DP table\n    for i in range(n):\n        dp[i][i] = grid[0][i]\n    for j in range(1, n):\n        dp[j][j-1] = grid[j-1][n-1]\n\n    # Fill the rest of the DP table\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + grid[i][j]\n\n    # Return the last cell value which contains the answer\n    return dp[0][n-1]",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_Max_Len_Even(s):\n    # Find all even length words in the given string\n    even_words = [word for word in s.split() if len(word) % 2 == 0]\n    \n    # If there are no even length words, return -1\n    if not even_words:\n        return '-1'\n    \n    # Return the longest even length word\n    return max(even_words, key=len)",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_last_occurrence(arr, num):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        \n        if arr[mid] < num:\n            low = mid + 1\n        elif arr[mid] > num:\n            high = mid - 1\n        else:\n            # Check if it's the last occurrence and it is not at the end.\n            if mid == len(arr) - 1 or arr[mid + 1] != num:\n                return mid\n            else:\n                # Move to the left half to find the last occurrence.\n                high = mid - 1\n                \n    return -1",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def modified_encode(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        value = lst[i]\n        while i + 1 < len(lst) and lst[i] == lst[i + 1]:\n            i += 1\n            count += 1\n        if count > 1:\n            result.append([count, value])\n        else:\n            result.append(value)\n        i += 1\n    return result\n\n# Test cases\nprint(modified_encode([1,1,2,3,4,4,5,1])) # Output should be [[2, 1], 2, 3, [2, 4], 5, 1]\nprint(modified_encode('automatically')) # Output should be ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', '[2, 'l', 'a']']\nprint(modified_encode('python')) # Output should be ['p', 'y', 't', 'h', 'o', 'n']",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_volume(sides_sum):\n    \"\"\"\n    Find the maximum possible volume of a cuboid when its side lengths sum up to 'sides_sum'.\n    \n    :param sides_sum: Integer, the total length of all three sides.\n    :return: Maximum volume as an integer.\n    \"\"\"\n    if sides_sum < 6:\n        return 0\n    \n    max_vol = 0\n    for i in range(int(sides_sum / 6), int((sides_sum + 5) / 6)):\n        remaining_sides = sides_sum - i * 6\n        vol = i ** 3 + remaining_sides ** 3\n        if vol > max_vol:\n            max_vol = vol\n            \n    return max_vol\n\n# Test cases\nprint(max_volume(8))  # Expected output: 18\nprint(max_volume(4))  # Expected output: 2\nprint(max_volume(1))  # Expected output: 0",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_long_word(s):\n    # Define the regular expression pattern to match words longer than 5 characters\n    pattern = r'\\b\\w{6,}\\b'\n    matches = re.findall(pattern, s)\n    return matches\n\n# Test cases\nprint(find_long_word('Please move back to strem'))  # Expected output: ['strem']\nprint(find_long_word('4K Ultra HD streaming player'))  # Expected output: ['Ultra']\nprint(find_long_word('Streaming Media Player'))  # Expected output: ['Media']",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_difference(n):\n    # Calculate the sum of squares of the first n natural numbers\n    sum_of_squares = int((n * (n + 1) * (2 * n + 1)) / 6)\n    \n    # Calculate the square of the sum of the first n natural numbers\n    square_of_sum = int((n * (n + 1) / 2) ** 2)\n    \n    # Return the difference between these two sums\n    return square_of_sum - sum_of_squares",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: string index out of range"
    ],
    "generated_code": "def find_demlo(num):\n    # Initialize an empty string to store the demlo number\n    demlo_num = ''\n    \n    # Iterate through each character in the input number\n    for i in range(len(num)):\n        # Calculate the position based on whether it's even or odd\n        pos = i + 1 if i % 2 == 0 else len(num) - i\n        \n        # Append the corresponding digit from the end of the string\n        demlo_num += num[pos]\n        \n    return demlo_num[::-1]  # Reverse the string to get the correct order\n\n# Test cases\nprint(find_demlo(\"111111\"))  # Expected output: '12345654321'\nprint(find_demlo(\"1111\"))    # Expected output: '1234321'\nprint(find_demlo(\"13333122222\"))  # Expected output: '123456789101110987654321'",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def position_min(arr):\n    min_index = arr.index(min(arr))\n    return [min_index] + [i for i, x in enumerate(arr) if x == min(x for x in arr if x != min(arr))]",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange(arr, n):\n    result = []\n    for i in range(n // 2):\n        result.append(arr[i])\n        if i < n // 2:\n            result.append(arr[n - 1 - i])\n    if n % 2 != 0:\n        result.append(arr[-1])\n    return result",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_alternates(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        if i % 2 == 0:\n            result.append(sum(lst[i:i+2]))\n        i += 1\n    return tuple(result)\n\n# Test cases\nprint(sum_of_alternates((5, 6, 3, 6, 10, 34)))  # Expected output: ((46,), (18,))\nprint(sum_of_alternates((1, 2, 3, 4, 5)))       # Expected output: ((6,), (9,))\nprint(sum_of_alternates((6, 7, 8, 9, 4, 5)))    # Expected output: ((21,), (18,))",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Min_Squares(n):\n    if n == 0:\n        return 0\n    min_squares = float('inf')\n    for i in range(1, int(n**0.5) + 1):\n        remainder = n - i * i\n        if remainder <= 0:\n            break\n        current_min_squares = 1 + get_Min_Squares(remainder)\n        if current_min_squares < min_squares:\n            min_squares = current_min_squares\n    return min_squares",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef most_occurrences(strings_list):\n    \"\"\"\n    Finds the string with the highest occurrence of any character within the provided list.\n    \n    Args:\n        strings_list (list): A list of strings to analyze.\n        \n    Returns:\n        str: The string with the highest total character count.\n    \"\"\"\n    # Calculate the total character count for each string and find the maximum\n    max_count = max(Counter(string).most_common()[-1][1] for string in strings_list)\n    # Return the string(s) that have this highest character count\n    return [string for string in strings_list if Counter(string).most_common()[-1][1] == max_count]\n\n# Test cases\nprint(most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]))  # Output: ['UTS']\nprint(most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"]))  # Output: ['year']\nprint(most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"]))  # Output: ['can']",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if all sides are equal\n    return a == b and b == c",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(lst, n, k):\n    lst[:] = lst[k:] + lst[:k]\n    return lst\n\n# Test cases\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4))  # Output: [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2))  # Output: [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))  # Output: [6, 7, 8, 9, 10, 1, 2]",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(nums):\n    # Initialize a counter for negative numbers\n    count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # If the number is less than zero, increment the counter\n        if num < 0:\n            count += 1\n            \n    # Return the total count of negative numbers\n    return count",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_char(s):\n    # Define regex pattern for matching words of length 3, 4, and 5 characters\n    pattern = r'\\b\\w{3,5}\\b'\n    \n    # Find all matches in the input string\n    result = re.findall(pattern, s)\n    \n    return result",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_unset_bits(n):\n    # Initialize the counter for unset bits\n    count = 0\n    # Loop until n becomes zero\n    while n:\n        # If the least significant bit is 0, increment the counter\n        if n & 1 == 0:\n            count += 1\n        # Right shift n by 1 to check the next bit\n        n >>= 1\n    return count\n\n# Test cases\nassert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(s):\n    return {char: s.count(char) for char in set(s)}\n\n# Test cases\nprint(char_frequency('python'))\nprint(char_frequency('program'))\nprint(char_frequency('language'))",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def custom_sort(sublist_list):\n    # Use sorted with key parameter to specify sorting based on the second element of each sublist\n    return sorted(sublist_list, key=lambda x: x[1])",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Validity(a, b, c):\n    # Check if all three sides satisfy the triangle inequality theorem\n    return a + b > c and a + c > b and b + c > a",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ap_sum(a, d, n):\n    return n * (2*a + (n-1)*d) // 2",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum(month_name):\n    months = [\"April\", \"June\", \"September\", \"November\"]\n    return month_name in months",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_word(text):\n    pattern = r'\\w+\\.\\b'  # Regular expression to match words followed by an optional punctuation mark\n    if re.search(pattern, text):  \n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match_word(\"python.\"))   # Expected output: Found a match!\nprint(text_match_word(\"java.\"))     # Expected output: Not matched!\nprint(text_match_word(\"lang.\"))     # Expected output: Found a match!",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def count_substring_with_equal_ends(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count += 1\n                \n    return count\n\n# Test cases\nprint(count_substring_with_equal_ends('aba'))   # Expected output: 4\nprint(count_substring_with_equal_ends('abcab')) # Expected output: 7\nprint(count_substring_with_equal_ends('abc'))   # Expected output: 3",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Divisor(start, end):\n    divisors = {}\n    \n    # Find all numbers within the range [start, end] and store their divisors\n    for num in range(start, end + 1):\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors[num] = divisors.get(num, 0) + 1\n    \n    # Find the maximum occurring divisor in the given interval\n    max_occuring_divisor = -1\n    max_count = 0\n    \n    for divisor, count in divisors.items():\n        if count > max_count:\n            max_occuring_divisor = divisor\n            max_count = count\n            \n    return max_occuring_divisor",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_three_smallest_nums(nums):\n    # Sort the list in ascending order\n    sorted_nums = sorted(set(nums))\n    # Sum up the first three elements which are the smallest\n    total_sum = sum(sorted_nums[:3])\n    return total_sum\n\n# Test cases\nprint(sum_three_smallest_nums([10,20,30,40,50,60,7]))  # Output: 37\nprint(sum_three_smallest_nums([1,2,3,4,5]))            # Output: 6\nprint(sum_three_smallest_nums([0,1,2,3,4,5]))          # Output: 6",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_to_tuple(s):\n    # Convert the set to a tuple and return it\n    return tuple(sorted(s))\n\n# Test cases\nprint(set_to_tuple({1, 2, 3, 4, 5}))  # Expected output: (1, 2, 3, 4, 5)\nprint(set_to_tuple({6, 7, 8, 9, 10, 11}))  # Expected output: (6, 7, 8, 9, 10, 11)\nprint(set_to_tuple({12, 13, 14, 15, 16}))  # Expected output: (12, 13, 14, 15, 16)",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef find_minimum_range(arrays):\n    import heapq\n    max_heap = []\n    min_heap = []\n\n    # Initialize heap with first elements and their indices from all arrays\n    for i in range(len(arrays)):\n        if len(max_heap) < len(arrays[0]):\n            heapq.heappush(max_heap, (-arrays[i][0], i))\n        else:\n            break\n    \n    # Continue adding more elements into both heaps\n    while len(max_heap) > len(arrays):\n        _, array_index = heapq.heappop(max_heap)\n        next_element = arrays[array_index].pop(0)\n        \n        if not arrays[array_index]:\n            continue\n        \n        heapq.heappush(min_heap, (next_element, array_index))\n        if len(max_heap) == len(arrays[0]) - 1:\n            heapq.heappush(max_heap, (-next_element, array_index))\n\n    start, end = None, None\n    current_min = float('inf')\n    \n    # Maintain a sorted list of minimum elements\n    while min_heap:\n        next_element, array_index = heapq.heappop(min_heap)\n        current_max = -max_heap[0]\n        current_size = len(min_heap)\n        \n        # Check if we have found a new minimum range\n        if current_size >= len(arrays):\n            current_min = next_element\n        \n        # If the current range is smaller than the previous ones, update it\n        if start is None or next_element - current_min < end - start:\n            start, end = current_min, next_element\n            \n    return (start, end)\n\n# Test cases\nprint(find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]))  # Output: (4, 6)\nprint(find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]]))  # Output: (4, 7)\nprint(find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]))",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dig_let(input_string):\n    num_digits = 0\n    num_letters = 0\n    for char in input_string:\n        if char.isdigit():\n            num_digits += 1\n        elif char.isalpha():\n            num_letters += 1\n    return num_digits, num_letters",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Odd_Squares(start, end):\n    def is_odd_factor(num):\n        if num % 2 != 0:\n            return True\n        return False\n    \n    count = 0\n    for i in range(max(2, start), min(end+1, int((end**0.5)+1))):\n        if is_odd_factor(i) and not is_odd_factor(end // i):\n            count += 1\n    return count\n\n# Test cases\nprint(count_Odd_Squares(5,100))  # Output: 8\nprint(count_Odd_Squares(8,65))   # Output: 6\nprint(count_Odd_Squares(2,5))    # Output: 1",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diff_consecutivenums(nums):\n    return [nums[i+1] - nums[i] for i in range(len(nums) - 1)]",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'zigzag' is not defined",
      "Test 2: FAIL - name 'zigzag' is not defined",
      "Test 3: FAIL - name 'zigzag' is not defined"
    ],
    "generated_code": "def find_entringer_number(n, k):\n    if n == 0:\n        return 0\n    else:\n        total = 0\n        for i in range(1, n+1):\n            total += min(i * k + 1 - n, i)\n        return total",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Squares(a, b):\n    # Initialize the total number of squares\n    total_squares = 0\n    \n    # Loop through all possible pairs of vertical and horizontal divisions\n    for i in range(1, min(a, b)+1):\n        total_squares += i * i\n        \n    return total_squares\n\n# Test cases\nprint(count_Squares(4, 3))   # Expected output: 20\nprint(count_Squares(1, 2))   # Expected output: 2\nprint(count_Squares(2, 2))   # Expected output: 5",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from itertools import accumulate\n\ndef find_ways(length, values):\n    \"\"\"\n    Counts the number of unique sequences of the given length where each sequence has a non-negative prefix sum.\n    \n    :param length: int - The desired length of each sequence.\n    :param values: list[int] - A sorted list of positive integers representing possible value additions.\n    :return: int - The total number of such sequences.\n    \"\"\"\n    # Initialize the dp array with zeros and add an extra entry for empty sequence\n    dp = [0] * (length + 1)\n    dp[0] = 1  # Base case: one way to have a prefix sum of 0\n    \n    for val in values:\n        new_dp = [0] * (length + 1)\n        for i in range(1, length + 1):\n            if i >= val:\n                new_dp[i] += dp[i - val]\n        dp = new_dp\n    \n    return dp[length]\n\n# Check function with provided data points\nassert find_ways(4, [2]) == 2\nassert find_ways(6, [5, 10]) == 5\nassert find_ways(8, [2, 5, 10]) == 14\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(binary_str):\n    # Check if the length of the string is odd\n    if len(binary_str) % 2 != 0:\n        return \"No\"\n    else:\n        for i in range(0, len(binary_str), 2):  # Iterate through the string every two characters\n            char = binary_str[i]\n            # Check each character for binary digits\n            if char != '0' and char != '1':\n                return \"No\"\n        return \"Yes\"",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum_Length(s: str) -> int:\n    # Count occurrences of each character in the string\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Identify characters with odd counts and calculate their impact on minimizing length\n    impacts = sum(impact // 2 for impact in char_count.values())\n    \n    # Return total number of characters minus twice their impact\n    return len(s) - 2 * impacts",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef first_Element(arr: List[int], n: int, k: int) -> int:\n    frequency = {}\n    \n    # Counting the occurrences of each element in the array\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Finding the first element that occurs exactly 'k' times\n    for num in arr:\n        if frequency[num] == k and num != 0:  # Assuming elements are positive integers\n            return num\n    \n    return -1  # Return -1 if no such element exists",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'unique_Characters' is not defined",
      "Test 2: FAIL - name 'unique_Characters' is not defined",
      "Test 3: FAIL - name 'unique_Characters' is not defined"
    ],
    "generated_code": "def is_unique_chars(s):\n    # Check if the length of the string is less than or equal to 1,\n    # as at least one character must be present.\n    if len(s) <= 1:\n        return True\n    \n    # Create a set from the string and compare its size with the length of the string.\n    # If they are equal, it means all characters in the string are unique.\n    return len(set(s)) == len(s)",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_column(nested_list, index):\n    return [[sublist[i] for i in range(len(sublist)) if i != index] for sublist in nested_list]",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def tn_ap(n, d, a):\n    # Calculate the nth term of an arithmetic progression using the formula:\n    # tn = a + (n - 1) * d\n    return a + (n - 1) * d\n\n# Test cases to verify the correctness of the solution\nassert tn_ap(1, 5, 2) == 9\nassert tn_ap(2, 6, 4) == 22\nassert tn_ap(1, 4, 5) == 16",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef count_Rectangles(r):\n    # Calculate the maximum number of rectangles that can fit inside a circle with radius r.\n    max_rectangles = int((math.pi * pow(r, 2)) / 4)\n    return max_rectangles",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(angle1, angle2):\n    \"\"\"\n    Calculate the third angle of a triangle given two other angles.\n    \n    Parameters:\n    angle1 (int): The first angle of the triangle.\n    angle2 (int): The second angle of the triangle.\n    \n    Returns:\n    int: The third angle of the triangle in degrees.\n    \"\"\"\n    return 180 - angle1 - angle2\n\n# Check function with provided data points\nassert find_angle(47, 89) == 44, \"Test case 1 failed\"\nassert find_angle(45, 95) == 40, \"Test case 2 failed\"\nassert find_angle(50, 40) == 90, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_max(tuple_list):\n    max_value = float('-inf')\n    for record in tuple_list:\n        if record[1] > max_value:\n            max_value = record[1]\n    return max_value",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport operator\n\ndef moddiv_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    # Calculate the remainder of each pair of elements from the two lists.\n    return list(map(lambda x: x[0] % x[1], zip(lst1, lst2)))",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Check_Solution(a,b,c):\n    # Calculate the roots using the quadratic formula\n    import math\n    \n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    \n    sqrt_d = math.sqrt(d)\n    \n    x1 = (-b + sqrt_d) / (2 * a)\n    x2 = (-b - sqrt_d) / (2 * a)\n    \n    # Check if x2 is exactly half of x1\n    if abs(x2 - x1/2) <= 1e-9:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_carol(n):\n    \"\"\"\n    Calculate the nth Carol number.\n    \n    Parameters:\n    n (int): The position of the Carol number to be found.\n    \n    Returns:\n    int: The nth Carol number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return ((n + 1)**2 - n**2) // (2 * n)",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(list_of_lists):\n    # Use list comprehension and filtering to exclude empty lists\n    return [item for item in list_of_lists if item]",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\ndef max_occurrences(arr):\n    \"\"\"\n    Finds the element(s) with the highest frequency in the array.\n    \n    Args:\n    arr : List[int] - A list of integers\n    \n    Returns:\n    The integer(s) that occur most frequently in the input list. If there's more than one such number, \n    it returns all of them as a list.\n    \"\"\"\n    count = Counter(arr)\n    # Find the maximum occurrence value\n    max_count = max(count.values())\n    # Filter and return all elements with the maximum occurrence\n    return [num for num, freq in count.items() if freq == max_count]\n\n# Check function with provided data points\nprint(max_occurrences([1,2,3,1,2,3,12,4,2]))  # Expected output: [2]\nprint(max_occurrences([1,2,6,7,0,1,0,1,0]))   # Expected output: [1, 0]\nprint(max_occurrences([1,2,3,1,2,4,1]))       # Expected output: [1]",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_K_element(tuple_list, k):\n    result = []\n    for t in tuple_list:\n        new_tuple = tuple(x + k for x in t)\n        result.append(new_tuple)\n    return result",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_flip_to_make_string_alternate(s):\n    \"\"\"\n    Counts the minimum number of flip operations needed to transform the input binary string s into an alternating\n    binary string.\n    \n    Parameters:\n    s (str): The input binary string\n    \n    Returns:\n    int: The minimum number of flips required.\n    \"\"\"\n    # Initialize counters for '0' and '1' after flipping\n    count_0_after_flips = count_1_after_flips = 0\n    for char in s:\n        if char == \"0\":\n            count_0_after_flips += 1\n        else:\n            count_1_after_flips += 1\n            \n    # Calculate the total flips needed\n    flips_needed = min(count_0_after_flips, count_1_after_flips)\n    return flips_needed",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(n):\n    count = 0\n    while n > 0:\n        n //= 10\n        count += 1\n    return count",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def adjacent_num_product(nums):\n    max_product = float('-inf')\n    for i in range(len(nums) - 1):\n        current_product = nums[i] * nums[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    \"\"\"\n    This function checks whether a given binary tree is height-balanced.\n    A binary tree is considered balanced if for each node in the tree,\n    the height of its two subtrees never differ by more than one.\n\n    Args:\n    root (TreeNode): The root of the binary tree.\n\n    Returns:\n    bool: True if the tree is balanced, False otherwise.\n    \"\"\"\n    def check_balance(node):\n        # Base case: if the node is None, it has height -1\n        if node is None:\n            return 0\n        \n        # Recursively find heights of left and right subtrees\n        left_height = check_balance(node.left)\n        if left_height == -1: \n            return -1\n        \n        right_height = check_balance(node.right)\n        if right_height == -1: \n            return -1\n        \n        # If subtree heights differ by more than 1, the tree is unbalanced\n        if abs(left_height - right_height) > 1:\n            return -1\n        \n        # Return the height of the current node as max(height of left, height of right) + 1\n        return max(left_height, right_height) + 1\n    \n    return check_balance(root) != -1\n\n# Example usage\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\n\nprint(is_tree_balanced(root))  # Expected output: False",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def repeat_tuples(tup, n):\n    # Repeat the tuple n times and return the result as a list of tuples\n    return [tup] * n",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lateralsurface_cuboid(length,width,height):\n    return 4 * length * width",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]))",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_missing(nums, start, end):\n    # Implement the logic here to find the smallest missing number\n    for i in range(start, end+1):\n        if nums[i] != i:\n            return i\n    return end + 1",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\n\ndef heap_assending(lst):\n    # Transform the input list into a max-heap in-place and then pop from the heap.\n    heapq._heapify_max(lst)\n    # Reconstruct the sorted array in descending order.\n    return [heapq.heappop(lst) for _ in range(len(lst))]\n\n# Test cases to verify the correctness of the solution.\nprint(heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])) # Expected output: [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nprint(heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])) # Expected output: [14, 22, 25, 25, 35, 58, 65, 75, 85]\nprint(heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])) # Expected output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import permutations\n\ndef permute_string(s):\n    # Generate all permutations of the input string\n    return [''.join(p) for p in permutations(s)]",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def round_num(num, base):\n    return int(base * round(float(num) / base))",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '>' not supported between instances of 'str' and 'int'"
    ],
    "generated_code": "def remove_replica(lst):\n    \"\"\"\n    Removes elements that occur more than once in the list and replaces them with 'MSP'.\n    \n    Args:\n        lst (list): A list of integers.\n        \n    Returns:\n        list: The modified list with duplicates replaced by 'MSP'.\n    \"\"\"\n    counts = {}\n    for item in lst:\n        if item not in counts:\n            counts[item] = 0\n        counts[item] += 1\n    \n    result = []\n    for item in lst:\n        if counts[item] > 1:\n            counts[item] = 'MSP'\n        else:\n            result.append(item)\n    \n    return result\n\n# Test Cases\nprint(remove_replica([1, 1, 4, 4, 4, 5, 5, 6, 7, 7])) # Expected output: [1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP']\nprint(remove_replica([2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9])) # Expected output: [2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP']\nprint(remove_replica([2, 2, 5, 4, 5, 7, 5, 6, 7, 7])) # Expected output: [2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP']",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Char(s, c):\n    # Using str.replace() method with regex '\\*' to replace all occurrences of 'c' with an empty string\n    return s.replace(c, '', s.count(c))",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def move_first(lst):\n    # Move the last element of the list to the first position\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# Test cases\nprint(move_first([1,2,3,4]))  # Expected output: [4,1,2,3]\nprint(move_first([0,1,2,3]))  # Expected output: [3,0,1,2]\nprint(move_first([9,8,7,1]))  # Expected output: [1,9,8,7]",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    return 2 * (length*width + width*height + length*height)",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multi_list(n, m):\n    return [[i * j for i in range(m)] for j in range(n)]",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(lst, idx):\n    return sorted(lst, key=lambda x: x[idx])",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rotation_count(nums):\n    left = 0\n    right = len(nums) - 1\n    \n    while left <= right:\n        if nums[left] <= nums[right]:\n            return left\n        \n        mid = (left + right) // 2\n        next_index = (mid + 1) % len(nums)\n        prev_index = (mid - 1 + len(nums)) % len(nums)\n        \n        if nums[mid] <= nums[next_index] and nums[mid] <= nums[prev_index]:\n            return mid\n        \n        elif nums[mid] <= nums[right]:\n            right = mid - 1\n            \n        else:\n            left = mid + 1\n            \n    return -1",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    # Convert integer to binary string and remove '0b' prefix\n    binary_str = bin(n)[2:]\n    \n    # Toggle the odd bits\n    toggled_binary_str = ''.join('1' if int(binary_str[i]) % 2 else '0' for i in range(len(binary_str)))\n    \n    # Convert back from binary string to integer\n    result = int(toggled_binary_str, 2)\n    return result\n\n# Test cases\nprint(even_bit_toggle_number(10))  # Output: 15\nprint(even_bit_toggle_number(20))  # Output: 1\nprint(even_bit_toggle_number(30))  # Output: 11",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_Of_Smallest(k, arr):\n    min_val = min(arr)\n    count = arr.count(min_val)\n    return count",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def get_perrin(n):\n    # Base case for the first two Perrin numbers\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        # Recursive call to find the next Perrin number\n        return get_perrin(n - 1) + get_perrin(n - 2)\n\n# Test cases to verify the correctness of the function\nassert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_count(s):\n    balance = 0\n    for i in range(len(s)):\n        if s[i] == '[':\n            balance += 1\n        elif s[i] == ']':\n            balance -= 1\n        if balance < 0:\n            # Count extra opening brackets on left side\n            extra_left = balance * -1\n            balance = 0\n            # Count extra closing brackets on right side\n            while True:\n                if i + 1 >= len(s) or s[i+1] != ']' or extra_left <= 0:\n                    break\n                else:\n                    extra_left -= 1\n                    balance += 1\n                    i += 1\n    return abs(balance)\n\n# Test cases\nprint(swap_count(\"[]][][\"))  # Expected output: 2\nprint(swap_count(\"[[][]]\"))   # Expected output: 0\nprint(swap_count(\"[[][]]][\"))  # Expected output: 1",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_or_odd(hex_number):\n    # Convert hex number to integer and then divide it by 2.\n    # If the result is an integer after division, the original number was odd; otherwise, it was even.\n    if int(hex_number, 16) % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n\n# Test cases to verify the correctness of the solution\nassert even_or_odd('AB3454D') == 'Odd'\nassert even_or_odd('ABC') == 'Even'\nassert even_or_odd('AAD') == 'Odd'",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    Finds the largest power of 2 which is less than or equal to n.\n    \n    Parameters:\n    - n (int): The number to compare against powers of two\n    \n    Returns:\n    int: The largest power of two less than or equal to n\n    \"\"\"\n    power = 0\n    current_power_of_two = 1\n    while current_power_of_two <= n:\n        power += 1\n        current_power_of_two *= 2\n    return 2 ** (power - 1)",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev, curr = 2, 1\n        for _ in range(2, n + 1):\n            prev, curr = curr, prev + curr\n        return curr",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_string(lst, s):\n    return [s + str(item) for item in lst]",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def convert_list_dictionary(list_keys, list_values, dict_values):\n    return [{list_keys[i]: {k: v for k, v in zip(list_keys[i:], sublist)}} for i, sublist in enumerate(dict_values)]",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list assignment index out of range"
    ],
    "generated_code": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    \n    # Initialize with values for the first few numbers\n    dp = [0] * (n+1)\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    dp[4] = 7\n    dp[5] = 10\n    \n    # Fill up the DP table based on the given recurrence relation\n    for i in range(6, n+1):\n        temp = float('-inf')\n        for j in range(2, min(i//2+1, 5)):\n            if j == 2:\n                temp = max(temp, dp[i // j])\n            elif j == 3:\n                temp = max(temp, dp[i // j])\n            elif j == 4:\n                temp = max(temp, dp[i // j])\n            elif j == 5:\n                temp = max(temp, dp[i // j])\n        dp[i] = temp + i\n    \n    return dp[n]\n\n# Test cases\nprint(get_max_sum(60))  # Expected output: 106\nprint(get_max_sum(10))  # Expected output: 12\nprint(get_max_sum(2))   # Expected output: 2",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length_list(lst):\n    return len(max(lst, key=len)), [i for i in lst if len(i) == len(max(lst, key=len))]\n\n# Test cases\nprint(max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\nprint(max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]))\nprint(max_length_list([[3,4,5],[6,7,8,9],[10,11,12]]))",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(test_tuple):\n    # Check if all elements in the tuple are unique\n    return len(test_tuple) == len(set(test_tuple))",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(s):\n    # Dictionary to store characters and their counts\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_char(s):\n    # Check if the string starts and ends with the same character\n    pattern = r\"^(.).*\\1$|^.$\"\n    if re.match(pattern, s) is None:\n        return \"Invalid\"\n    else:\n        return \"Valid\"",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_numbers(a, b, c):\n    # Sort the list to easily access the middle element(s)\n    nums = sorted([a, b, c])\n    \n    # Check if there is an odd number of elements\n    if len(nums) % 2 == 1:\n        return float(nums[len(nums)//2])  # Return the middle value\n    else:\n        # If even, return the average of the two middle values\n        mid_index = len(nums) // 2\n        return float((nums[mid_index - 1] + nums[mid_index]) / 2)",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_digits(lst):\n    total_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            total_sum += sum(int(digit) for digit in str(abs(num)))\n        elif isinstance(num, list):\n            total_sum += sum(sum_of_digits(x) for x in num)\n    return total_sum",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def bitwise_xor(tup1, tup2):\n    # Perform bitwise XOR on corresponding elements of two tuples\n    result = tuple(a ^ b for a, b in zip(tup1, tup2))\n    return result",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_freq(lst):\n    from collections import Counter\n    \n    # Count occurrences of each tuple in the list\n    freq = Counter(tuple(t) for t in lst)\n    \n    # Return the count of unique tuples\n    return len(freq)\n\n# Test cases\nprint(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]))  # Expected output: 3\nprint(extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)]))  # Expected output: 4\nprint(extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)]))  # Expected output: 4",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: tuple index out of range"
    ],
    "generated_code": "def add_nested_tuples(tup1, tup2):\n    # Initialize result list with empty lists for each dimension\n    res = [[], [], []]\n    \n    # Loop through the dimensions and add corresponding elements from both tuples\n    for i in range(len(tup1)):\n        res[0].append(tup1[i][0] + tup2[i][0])\n        res[1].append(tup1[i][1] + tup2[i][1])\n        res[2].append(tup1[i][2] + tup2[i][2])\n    \n    return tuple(res)\n\n# Test cases\nprint(add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))  # Should return ((7, 10), (7, 14), (3, 10), (8, 13))\nprint(add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))))  # Should return ((9, 12), (9, 16), (5, 12), (10, 15))\nprint(add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))))  # Should return ((11, 14), (11, 18), (7, 14), (12, 17))",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ncr_modp(n, r, p):\n    def mod_p_factorial(x):\n        result = 1\n        for i in range(2, x + 1):\n            if x % i == 0:\n                result *= i\n                result %= p\n        return result\n    \n    def mod_p_combination(n, k):\n        numerator = mod_p_factorial(n)\n        denominator = mod_p_factorial(k) * mod_p_factorial(n - k)\n        return numerator // denominator % p\n    \n    return mod_p_combination(n, r)\n\n# Test cases\nprint(ncr_modp(10, 2, 13))  # Output should be 6\nprint(ncr_modp(15, 12, 43)) # Output should be 25\nprint(ncr_modp(17, 9, 18))  # Output should be 10",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    # Regular expression for validating URLs\n    pattern = r'^(http|ftp)s?://'  # http:// or https://\n    pattern += r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n    pattern += r'localhost|'  # localhost...\n    pattern += r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n    pattern += r' port(?:[:])(?:\\d+)'  # optional port\n    pattern += r'/?'  # optional trailing slash\n    pattern += r'[^/\\r\\n]+'  # path, query string, user info, credential info and hostname\n    pattern += r'/?$'\n\n    # Test the URL against the regular expression\n    if re.match(pattern, url) != None:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(x, y):\n    if x <= y:\n        return x\n    else:\n        return y",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_tuplex(tup, item):\n    return item in tup",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(num):\n    if num & 1 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Test cases\nprint(find_Parity(12))  # Expected output: Even Parity\nprint(find_Parity(7))   # Expected output: Odd Parity\nprint(find_Parity(10))  # Expected output: Even Parity",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rearrange_bigger(n):\n    nums = [int(d) for d in str(n)]\n    i, j = 0, len(nums)-1\n    \n    # Swap elements from left and right if they are not already in descending order\n    while i < j:\n        if nums[i] > nums[j]:\n            break\n        i += 1\n    else:\n        return False\n        \n    # Find the smallest digit greater than nums[i]\n    min_val = float('inf')\n    k = i + 1\n    for k in range(i+1, j+1):\n        if nums[k] < nums[i] and nums[k] <= min_val:\n            min_val = nums[k]\n    \n    # Swap nums[i] with the found smallest value\n    nums[i], nums[k] = nums[k], nums[i]\n    \n    # Sort the remaining part to get the largest possible number\n    nums[i:j+1] = sorted(nums[i:j+1])\n    \n    # Convert back to integer\n    return int(\"\".join(map(str, nums)))\n\n# Test cases\nprint(rearrange_bigger(12))   # Expected output: 21\nprint(rearrange_bigger(10))   # Expected output: False\nprint(rearrange_bigger(102))  # Expected output: 120",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - maximum recursion depth exceeded in comparison",
      "Test 2: FAIL - maximum recursion depth exceeded in comparison",
      "Test 3: FAIL - maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    # Sort both arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    def backtrack(start1, start2, count):\n        if count == k:\n            return []\n        \n        result = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                result.append([nums1[i], nums2[j]])\n                if len(result) == k:\n                    break\n        \n        # Move to the next pair if current pair is valid\n        while True:\n            if start1 >= len(nums1):\n                break\n            \n            for i in range(len(nums2)):  \n                if nums1[start1] < nums2[i]:\n                    continue\n                else:\n                    break\n            \n            start1 += 1\n    \n        # Recursively call backtracking with the updated pointers\n        return backtrack(start1, start2 + 1, count)\n    \n    return backtrack(0, 0, 0)",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef min_product_tuple(tuples: List[tuple]) -> int:\n    # Sort tuples based on their first element and then second element if they are equal.\n    sorted_tuples = sorted(tuples, key=lambda x: (x[0], x[1]))\n    \n    # Initialize variables for finding the minimum product.\n    min_product = float('inf')\n    current_min_first = float('inf')\n    current_max_second = -float('inf')\n    \n    # Iterate through each tuple to calculate products.\n    for t in sorted_tuples:\n        first, second = t\n        if first < current_min_first:\n            current_min_first = first\n            current_max_second = max(second, current_max_second)\n        elif second > current_max_second:\n            continue\n        else:\n            return min(min_product, current_min_first * current_max_second)\n        \n        min_product = min(min_product, current_min_first * current_max_second)\n    \n    return min_product",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '<' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '<' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def min_val(lst):\n    # Initialize minimum with the first element of the list\n    min_val = lst[0]\n    \n    # Iterate through the list to find the minimum value\n    for i in lst:\n        if type(i) == int and i < min_val:\n            min_val = i\n            \n    return min_val",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    # Split the string on underscores and capitalize each word except the first one.\n    words = snake_str.split('_')\n    # Capitalize all words but keep the first one in lowercase for consistency with the task.\n    camel_case_str = ''.join(word.capitalize() if i != 0 else word.lower() for i, word in enumerate(words))\n    return camel_case_str",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(nums):\n    # Filter out odd numbers and return the new list\n    return [num for num in nums if num % 2 == 0]\n\n# Test cases\nprint(remove_odd([1, 2, 3]))  # Output: [2]\nprint(remove_odd([2, 4, 6]))  # Output: [2, 4, 6]\nprint(remove_odd([10, 20, 3]))  # Output: [10, 20]",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_nth_element(tuples_list, n):\n    return [item[n] for item in tuples_list]\n\n# Test cases to verify the correctness of the solution\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == [99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == [98, 97, 91, 94]",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(sequence1, sequence2):\n    # Check if any element of sequence2 is present in sequence1\n    for item in sequence2:\n        if item in sequence1:\n            return True\n    return False",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - UnboundLocalError: local variable 'max_val' referenced before assignment"
    ],
    "generated_code": "def max_Product(arr):\n    if not arr:\n        return None\n    \n    min_val = float('inf')\n    max_product = float('-inf')\n    \n    for num in arr:\n        if num < 0:\n            # Swap max and min values when both numbers are negative\n            temp = max_val\n            max_val = min_val\n            min_val = temp\n        \n        max_product = max(max_product, num * min_val)\n        min_val = min(min_val, num)\n    \n    return (max_product, max(max_product, min_val))\n\n# Test Cases\nprint(max_Product([1,2,3,4,7,0,8,4]))  # Expected output: (7,8)\nprint(max_Product([0,-1,-2,-4,5,0,-6]))  # Expected output: (-4,-6)\nprint(max_Product([1,2,3]))  # Expected output: (2,3)",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def breakSum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(breakSum(n // 2) + breakSum(n - n // 2), n)\n\n# Example usage:\nprint(breakSum(12))  # Output: 13\nprint(breakSum(24))  # Output: 27\nprint(breakSum(23))  # Output: 23",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def group_tuples(tuples_list):\n    # Sort each tuple and then zip them together to form tuples with repeated elements at the end.\n    return [tuple(sorted(item)) for item in sorted(tuples_list, key=lambda x: x[0])]\n\n# Example usage:\nprint(group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]))  # Should print [('x', 'y', 'z'), ('w', 't')]\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]))   # Should print [('a', 'b', 'c'), ('d', 'e')]\nprint(group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]))    # Should print [('f', 'g', 'g'), ('h', 'i')])",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Max(lst):\n    # Initialize max_length as 0 and max_sublist as an empty list\n    max_length = 0\n    max_sublist = []\n\n    # Iterate through each element in the list of lists\n    for sublst in lst:\n        # Update max_length if current sublist is longer\n        if len(sublst) > max_length:\n            max_length = len(sublst)\n            max_sublist = sublst\n    \n    return max_sublist",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def round_and_sum(numbers):\n    result = sum(round(num) for num in numbers)\n    return int(result * len(numbers))",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cube_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += (i * (i + 1)) ** 2\n    return total",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_tuple(tuple_input, delimiter=' '):\n    # Convert all elements in the tuple into strings and then join them with the specified delimiter.\n    result = delimiter.join(map(str, tuple_input))\n    return result\n\n# Test cases to verify the correctness of the function.\nprint(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")))  # Expected output: 'ID-is-4-UTS'\nprint(concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\")))  # Expected output: 'QWE-is-4-RTY'\nprint(concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\")))   # Expected output: 'ZEN-is-4-OP'",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\n    total_sum = sum(i**3 for i in range(1, n+1))\n    average = total_sum / n\n    return average",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def get_maxgold(grid, R, C):\n    # Initialize variables for dynamic programming\n    dp = [[0]*C for _ in range(R)]\n    \n    # Fill the first row of the DP table with the values from the grid\n    for j in range(C):\n        dp[0][j] = grid[0][j]\n    \n    # Fill the first column of the DP table with the values from the grid\n    for i in range(1, R):\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1]) + grid[i][0]\n    \n    # Fill the rest of the DP table using the recurrence relation\n    for i in range(1, R):\n        for j in range(1, C):\n            if i > 0:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n            else:\n                dp[i][j] = dp[i][j-1]\n            dp[i][j] += grid[i][j]\n    \n    # Return the maximum value in the last row of the DP table\n    return max(max(row) for row in dp)",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_rear(strings_tuple):\n    # Convert the tuple into a list for easier manipulation\n    strings_list = list(strings_tuple)\n    \n    # Initialize an empty list to store the extracted elements\n    result = []\n    \n    # Iterate through the list, and append the last character of each string to the result list\n    for string in strings_list:\n        if len(string) > 0:  # Check if the string is not empty before trying to get its last character\n            result.append(string[-1])\n    \n    # Convert the result list back into a tuple and return it\n    return tuple(result)\n\n# Test cases\nprint(extract_rear(('Mers', 'for', 'Vers')))  # Expected output: ('s', 'r', 's')\nprint(extract_rear(('Avenge', 'for', 'People')))  # Expected output: ('e', 'r', 'e')\nprint(extract_rear(('Gotta', 'get', 'go')))  # Expected output: ('a', 't', 'o')",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_in_list(lists, element):\n    return sum(1 for sublist in lists if element in sublist)",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_oddnumbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    \n    Args:\n        numbers (list): A list of integers.\n        \n    Returns:\n        list: A list of integers containing only the odd numbers from the input list.\n    \"\"\"\n    return list(filter(lambda x: x % 2 != 0, numbers))\n\n# Test cases to verify the correctness of the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9], \"Test case 1 failed\"\nassert filter_oddnumbers([10, 20, 45, 67, 84, 93]) == [45, 67, 93], \"Test case 2 failed\"\nassert filter_oddnumbers([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef change_date_format(date_str):\n    # Regular expression pattern to match and extract year, month, day from the input string\n    pattern = r'(\\d{4})-(\\d{1,2})-(\\d{1,2})'\n    \n    # Replace matched patterns with corresponding values in reverse order to form the new date format\n    result = re.sub(pattern, r'\\3-\\2-\\1', date_str)\n    \n    return result",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            # Sort the sub-array arr[i-gap:n] \n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # Place the element at its correct position\n            arr[j] = temp\n        \n        # Reduce the gap for the next element\n        gap //= 2\n    \n    return arr",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def and_tuples(tup1, tup2):\n    # Element-wise multiplication of tuples\n    elementwise_result = [x * y for x, y in zip(tup1, tup2)]\n    \n    # Convert to tuple for result\n    final_tuple = ()\n    for i in range(len(elementwise_result)):\n        if elementwise_result[i] == 0:\n            final_tuple += (elementwise_result[i],),\n        else:\n            final_tuple += (i, ),\n    \n    return final_tuple\n\n# Test cases\nprint(and_tuples((10, 4, 6, 9), (5, 2, 3, 3)))  # Expected output: (0, 0, 2, 1)\nprint(and_tuples((1, 2, 3, 4), (5, 6, 7, 8)))   # Expected output: (1, 2, 3, 0)\nprint(and_tuples((8, 9, 11, 12), (7, 13, 14, 17)))  # Expected output: (0, 9, 10, 0)",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_directrix(a,b,c):\n    \"\"\"\n    Function to calculate the directrix of a parabola given its parameters.\n    \n    Parameters:\n    - a, b, c: coefficients representing different terms in the standard form ax^2 + bx + c\n    \n    Returns:\n    - The value of the directrix for the given parabola.\n    \"\"\"\n    return -c / (4*a)",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_element(list1, list2):\n    # Convert both lists to sets for comparison\n    return len(set(list1) & set(list2)) > 0",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_trapezium(a, b, c):\n    # Calculate the length of the shorter side using the formula for a trapezium\n    s = (a + b) / 2\n    \n    # The median is half the sum of the lengths of the two parallel sides\n    return s",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_greater(numbers, num_to_check):\n    if num_to_check > max(numbers):\n        result = 'Yes, the entered number is greater than those in the array'\n    else:\n        result = 'No, entered number is less than those in the array'\n    return result",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match_one(text):\n    # Define the pattern to match 'a' followed by one or more 'b's\n    pattern = r'^a(b+)$'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the function\nprint(text_match_one(\"ac\"))   # Should print 'Not matched!'\nprint(text_match_one(\"dc\"))   # Should print 'Not matched!'\nprint(text_match_one(\"abba\")) # Should print 'Found a match!'",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit(n):\n    # Extracting the last digit of the number\n    last_digit = n % 10\n    \n    return last_digit",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_nos(lst):\n    # Iterate through the list and collect all negative numbers\n    negatives = [num for num in lst if num < 0]\n    return negatives",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(input_string):\n    return ''.join([char for char in input_string if not ord(char) % 2])\n\n# Test cases\nprint(remove_odd(\"python\"))  # Expected output: \"yhn\"\nprint(remove_odd(\"program\"))  # Expected output: \"rga\"\nprint(remove_odd(\"language\"))  # Expected output: \"agae\"",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def count_bidirectional(pairs):\n    # Create an empty dictionary to store tuples as keys and their counts as values\n    dic = {}\n    \n    # Iterate through each pair in the input list\n    for i in range(len(pairs)):\n        j = i + 1\n        \n        # Check if reverse of the current pair exists in the dictionary\n        if (pairs[i][0], pairs[j][1]) in dic:\n            dic[(pairs[i][0], pairs[j][1])] += 1\n        elif (pairs[i][1], pairs[j][0]) in dic:\n            dic[(pairs[i][1], pairs[j][0])] += 1\n            \n    # Calculate the total number of bidirectional pairs\n    return len(dic)",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(numbers):\n    # Convert each element in the list to its string representation and join them with no separator.\n    return int(\"\".join(map(str, numbers)))\n\n# Test the function with provided data points\nprint(multiple_to_single([11, 33, 50]))  # Expected output: 113350\nprint(multiple_to_single([-1, 2, 3, 4, 5, 6]))  # Expected output: -123456\nprint(multiple_to_single([10, 15, 20, 25]))  # Expected output: 10152025",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef find_adverb_position(sentence: str) -> Tuple[int, int, str]:\n    \"\"\"\n    Finds all adverbs in the given sentence along with their starting position.\n    \n    Args:\n    sentence (str): The input sentence to search for adverbs.\n    \n    Returns:\n    Tuple[int, int, str]: A tuple containing the start index of an adverb,\n                          its length, and the actual adverb string found.\n                          If no adverbs are found, returns (-1, -1, \"\").\n                          \n    Example usage:\n    >>> find_adverb_position(\"clearly!! we can see the sky\")\n    (0, 7, 'clearly')\n    >>> find_adverb_position(\"seriously!! there are many roses\")\n    (0, 9, 'seriously')\n    >>> find_adverb_position(\"unfortunately!! sita is going to home\")\n    (0, 13, 'unfortunately')\n    \"\"\"\n\n    # Define a list of common English adverbs\n    adverbs = [\"really\", \"sortof\", \"kindof\", \"alittle\", \"even\"]\n\n    words = sentence.split()\n    result = []\n\n    for i in range(len(words)):\n        word = words[i]\n        if len(word) > 3:  # Ensure it's at least three letters long\n            for adj in adverbs:\n                if word.startswith(adj):\n                    result.append((i, len(word), adj))\n\n    return result\n\n\n# Check function with provided data points\nprint(find_adverb_position(\"clearly!! we can see the sky\"))\nprint(find_adverb_position(\"seriously!! there are many roses\"))\nprint(find_adverb_position(\"unfortunately!! sita is going to home\"))",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube given its side length\n    return 6 * (side_length ** 2)",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def positive_count(nums):\n    \"\"\"\n    Calculate the ratio of positive numbers in the given list.\n    \n    Parameters:\n    nums (list): A list of integers.\n    \n    Returns:\n    float: The ratio of positive numbers as a decimal value.\n    \"\"\"\n    count = sum(1 for num in nums if num > 0)\n    total = len(nums)\n    return count / total if total != 0 else 0",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_neg(nums):\n    # Initialize the variable to store the maximum negative value found so far.\n    max_neg = float('-inf')\n    \n    # Iterate through each number in the list.\n    for num in nums:\n        # If the current number is less than zero and greater than the previous max_neg,\n        # update max_neg with the current number if it's larger.\n        if num < 0 and num > max_neg:\n            max_neg = num\n            \n    # Return the final value of max_neg which will be the largest negative number in the list.\n    return max_neg",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def trim_tuple(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        new_tup = ()\n        for i in range(len(tup)):\n            if i < k or i >= len(tup) - k:\n                new_tup += (tup[i],)\n        result.append(new_tup)\n    return result",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def index_multiplication(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tuple(x * y for x, y in zip(tup1[i], tup2[i])))\n    return result\n\n# Test cases\nprint(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))) # Expected output: ((6, 21), (12, 45), (2, 9), (7, 30))\nprint(index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))) # Expected output: ((14, 32), (20, 60), (6, 20), (16, 44))\nprint(index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))) # Expected output: ((24, 45), (30, 77), (12, 33), (27, 60))",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Occurrence(lst, tpl):\n    from collections import Counter\n    counter = Counter()\n    for element in lst:\n        if element in tpl:\n            counter[element] += 1\n    return counter\n\n# Test cases\nprint(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']))  # Expected output: Counter({'a': 3})\nprint(count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]))  # Expected output: Counter({1: 2, 4: 1})\nprint(count_Occurrence((1,2,3,4,5,6), [1,2]))  # Expected output: Counter({1: 1, 2: 1})",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "cube_nums = lambda lst: [lambda x: x ** 3 for i in lst]",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def cal_sum(n):\n    if n <= 2:\n        return n - 1\n    else:\n        # Initialize the first two Pern numbers\n        prev_prev = 3\n        prev = 0\n        current = 2\n        \n        for _ in range(3, n + 1):\n            next_num = prev_prev + prev\n            prev_prev = prev\n            prev = current\n            current = next_num\n        \n        return current\n\n# Test cases to verify the correctness of the function\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Triangle(p1x, p1y, p2x, p2y, p3x, p3y):\n    \"\"\"\n    This function checks if three given points form a valid triangle.\n    \n    :param p1x: x-coordinate of point 1\n    :param p1y: y-coordinate of point 1\n    :param p2x: x-coordinate of point 2\n    :param p2y: y-coordinate of point 2\n    :param p3x: x-coordinate of point 3\n    :param p3y: y-coordinate of point 3\n    :return: Returns 'Yes' if it's a valid triangle, otherwise returns 'No'.\n    \"\"\"\n    # Calculate the squared lengths of the sides of the triangle formed by the points\n    side1 = (p2x - p1x)**2 + (p2y - p1y)**2\n    side2 = (p3x - p2x)**2 + (p3y - p2y)**2\n    side3 = (p3x - p1x)**2 + (p3y - p1y)**2\n    \n    # Check if the sum of the squares of two sides is greater than the square of the third side\n    if abs(side1 + side2 - side3) < 0.0001:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(check_Triangle(1,5,2,5,4,6))  # Expected output: Yes\nprint(check_Triangle(1,1,1,4,1,5))  # Expected output: No\nprint(check_Triangle(1,1,1,1,1,1))  # Expected output: No",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_string(string_list, n):\n    return [s[-n:] for s in string_list]\n\n# Test cases\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)) # ['practice', 'solution']\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6)) # ['Python']\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9)) # ['exercises']",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_whitespaces(s):\n    # Use regular expression to replace one or more whitespace characters (\\s+) with an empty string\n    return re.sub(r'\\s+', '', s)",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def loss_amount(amount1, amount2):\n    # Calculate the difference between the two amounts\n    diff = abs(amount1 - amount2)\n    \n    # If the difference is greater than zero, return the difference as loss amount\n    if diff > 0:\n        return diff\n    else:\n        return None",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sumofFactors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total\n\n# Test cases\nprint(sumofFactors(18))  # Expected output: 26\nprint(sumofFactors(30))  # Expected output: 48\nprint(sumofFactors(6))   # Expected output: 8",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_wordz(text):\n    # Check if the string contains exactly one 'z'\n    return ('Found a match!' if len([char for char in text if char == 'z']) == 1 else 'Not matched!')",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumb_number(month_num):\n    \"\"\"\n    This function takes an integer representing a month and returns True if the month has 31 days,\n    otherwise it returns False.\n    \n    :param month_num: Integer between 1 and 12 representing the month.\n    :return: Boolean value indicating whether the month has 31 days.\n    \"\"\"\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return month_num in months_with_31_days\n\n# Test cases to verify the correctness of the solution\nassert check_monthnumb_number(5) == True, \"Test case 1 failed\"\nassert check_monthnumb_number(2) == False, \"Test case 2 failed\"\nassert check_monthnumb_number(6) == False, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Min(lst):\n    min_length = float('inf')\n    result = []\n    \n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n            result = sub_list\n    \n    return result",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length, width):\n    return length * width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_uppercase(input_string):\n    # Define the pattern to match uppercase letters\n    upper_pattern = '[A-Z]'\n    \n    # Use regular expression to replace all occurrences of uppercase with an empty string\n    result_string = re.sub(upper_pattern, '', input_string)\n    \n    return result_string",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    # Use list comprehension to iterate through each sublist and select the first element\n    result = [sublist[0] for sublist in lst]\n    return result",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(s):\n    # Initialize counter for uppercase characters\n    uppers = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char >= 'A' and char <= 'Z':\n            uppers += 1\n            \n    return uppers",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import *\nfrom itertools import chain, combinations\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    return [list(comb) for i in range(len(lst) + 1) for comb in chain.from_iterable(combinations(lst, r) for r in range(i + 1))]",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n    \n    n = len(nums)\n    left_max = [0] * n\n    right_max = [0] * n\n    left_max[0] = nums[0]\n    right_max[n-1] = nums[n-1]\n    \n    for i in range(1, n):\n        left_max[i] = max(left_max[i-1] * nums[i], nums[i])\n    \n    for j in range(n-2, -1, -1):\n        right_max[j] = min(right_max[j+1] * nums[j], nums[j])\n    \n    result = float('-inf')\n    for k in range(n):\n        result = max(result, left_max[k] * right_max[k])\n        \n    return result",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_value(d, value_to_check):\n    \"\"\"\n    Check if all values in the dictionary d are equal to the specified value_to_check.\n    \n    Args:\n        d (dict): The dictionary to check.\n        value_to_check (int/float): The value to compare against.\n        \n    Returns:\n        bool: True if all values are equal to value_to_check, False otherwise.\n    \"\"\"\n    return len(set(d.values())) == 1 and value_to_check in d.values()",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(dictionary):\n    # Use comprehension to filter out empty string values and return a new dictionary\n    return {k: v for k, v in dictionary.items() if v is not None}",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_peak(arr, n):\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = int((low + high) / 2)\n        \n        # Check if mid is peak\n        if (mid == 0 or arr[mid-1] < arr[mid]) and (mid == n-1 or arr[mid+1] < arr[mid]):\n            return arr[mid]\n        \n        # If the left neighbor is greater, then there must be a peak on the left half\n        elif mid > 0 and arr[mid-1] > arr[mid]:\n            high = mid - 1\n        \n        # Else the peak lies in right half\n        else:\n            low = mid + 1\n            \n    return None",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_to_Octal(decimal_number):\n    # Convert the decimal number to an octal string\n    return oct(decimal_number)[2:]",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_product(nums, n):\n    dp = [float('-inf')] * n\n    dp[0] = nums[0]\n    \n    for i in range(1, n):\n        dp[i] = max(dp[i-1] * nums[i], nums[i])\n        \n    result = float('-inf')\n    for j in range(n-1, -1, -1):\n        if j > 0:\n            result = max(result, dp[j-1] * nums[j])\n        else:\n            result = max(result, dp[n-1] * nums[j])\n            \n    return result",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_profit(stock_prices, k):\n    if not stock_prices:\n        return 0\n    \n    n = len(stock_prices)\n    dp = [[0] * (k + 1) for _ in range(n)]\n    \n    # Initialize base case\n    for i in range(n):\n        dp[i][0] = 0  # Buying at price is always 0\n        dp[i][1] = -stock_prices[i]  # Selling first day means buying\n    \n    for delta in range(1, k + 1):\n        min_price = float('inf')\n        for j in range(delta, n):\n            current_profit = stock_prices[j] - min_price\n            min_price = min(min_price, stock_prices[j] - dp[j-delta+1][delta])\n            dp[j][delta] = max(dp[j-1][delta], current_profit)\n    \n    return dp[n-1][k]\n\n# Example test cases\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3))  # Expected output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2))     # Expected output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2))          # Expected output: 2",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for +: 'int' and 'tuple'"
    ],
    "generated_code": "def add_pairwise(tuples_list):\n    result = []\n    for i in range(len(tuples_list)):\n        # Pairwise addition and append to result list\n        result.append(sum(tuples_list[i:i+2]))\n    return tuple(result)\n\n# Test cases\nprint(add_pairwise([(1, 5, 7, 8, 10)]))\nprint(add_pairwise([(2, 6, 8, 9, 11)]))\nprint(add_pairwise([(3, 7, 9, 10, 12)]))",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_remainder(arr, divisor, n):\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result *= arr[i]\n        while result >= n:\n            result %= n\n    return result",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Consecutive(nums):\n    # Check if the difference between each pair of adjacent elements is constant\n    return all(abs(nums[i] - nums[i-1]) == 1 for i in range(1, len(nums)))",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_intersection(tup1, tup2):\n    # Convert both tuples into sets and perform symmetric difference\n    result = set(tup1) ^ set(tup2)\n    # Convert back to tuple before returning\n    return tuple(result)\n\n# Test Cases\nprint(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])) \n# Expected output: {(4, 5), (3, 4), (5, 6)}\n\nprint(tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]))\n# Expected output: {(4, 7), (1, 4)}\n\nprint(tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]))\n# Expected output: {(1, 3), (2, 3)}",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef sort_counter(counter_dict):\n    \"\"\"\n    Sorts a given dictionary of counters by their values in descending order.\n    \n    Parameters:\n    - counter_dict: A dictionary where each key is associated with another counter object.\n    \n    Returns:\n    - A list of tuples, each containing a key and its corresponding counter sorted by value.\n    \"\"\"\n    return sorted(counter_dict.items(), key=lambda item: item[1], reverse=True)\n\n# Test cases\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250}) == [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250}) == [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\n    # Find the maximum element in the array\n    max_element = max(arr)\n    \n    # Find the minimum element in the array\n    min_element = min(arr)\n    \n    # Calculate the sum of the maximum and minimum elements\n    result = max_element + min_element\n    \n    return result",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_lower(s):\n    # Convert each character in the string to lowercase and check if it's not an alphabet\n    for char in s:\n        if char.isupper():\n            return False\n    return True\n\n# Test cases\nprint(is_lower(\"InValid\"))  # Expected output: True\nprint(is_lower(\"TruE\"))     # Expected output: True\nprint(is_lower(\"SenTenCE\")) # Expected output: True",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(input_string):\n    # Remove all lowercase letters in the input string using regex\n    return re.sub('[a-z]', '', input_string)",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(n):\n    # Handle negative numbers by converting them to positive and then taking the absolute value.\n    if n < 0:\n        n = abs(n)\n    \n    # If the number is less than 10, it's either a single-digit number itself.\n    if n < 10:\n        return n\n    \n    # Use string formatting to extract the first character of the number as a string,\n    # convert it back to an integer, and return it.\n    return int(str(abs(n))[0])\n\n# Test cases\nprint(first_Digit(123))  # Expected output: 1\nprint(first_Digit(456))  # Expected output: 4\nprint(first_Digit(12))   # Expected output: 1",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(input_string):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the character with the highest occurrence\n    max_char = \"\"\n    max_count = 0\n    for char, count in char_count.items():\n        if count > max_count:\n            max_char = char\n            max_count = count\n    \n    return max_char",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_subset_sum(nums, target, total):\n    \"\"\"\n    Determines if there exists a subset in nums whose sum equals to total.\n    \n    :param nums: List[int] - A list of positive integers.\n    :param target: int - The target sum.\n    :param total: int - The target total for the sum of the subset.\n    :return: bool - Returns True if such a subset exists, otherwise returns False.\n    \"\"\"\n    dp = [False] * (total + 1)\n    dp[0] = True\n    \n    for num in nums:\n        for i in range(total, num-1, -1):\n            if dp[i-num]:\n                dp[i] = True\n                \n    return dp[target]\n\n# Test Cases\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9))  # Expected output: True\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30))  # Expected output: False\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15))  # Expected output: True",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef match(input_string):\n    # Regex pattern to find sequences starting with an uppercase letter followed by lowercase letters\n    pattern = '[A-Z][a-z]+'\n    \n    # Search for the pattern in the input string\n    if re.search(pattern, input_string):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(match(\"Geeks\"))   # Should return 'Yes'\nprint(match(\"geeksforGeeks\"))  # Should return 'Yes'\nprint(match(\"geeks\"))     # Should return 'No'",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    num = 1\n    while True:\n        if factor(num) % x == 0:\n            return num\n        num += 1\n    \ndef factor(n):\n    i = 1\n    fact = 1\n    while i <= n:\n        fact *= i\n        i += 1\n    return fact\n\n# Test cases\nprint(first_Factorial_Divisible_Number(10)) # Expected output: 5\nprint(first_Factorial_Divisible_Number(15)) # Expected output: 5\nprint(first_Factorial_Divisible_Number(5))  # Expected output: 4",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_matching_tuple(tuple1, tuple2):\n    # Remove tuples from tuple1 that are present in tuple2\n    for t in tuple2:\n        if t in tuple1:\n            tuple1.remove(t)\n    return tuple1\n\n# Test cases\nprint(remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]))  # Should return [('you', '?')]\nprint(remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]))  # Should return [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nprint(remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]))  # Should return [('Its', 'been'), ('day', 'without')])",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_palindrome(arr, n):\n    def isPalindrome(num): \n        # Convert integer to string and check if it's equal to its reverse\n        str_num = str(num)\n        for i in range(len(str_num)//2):\n            if str_num[i] != str_num[-(i+1)]:\n                return False\n        return True\n  \n    max_palindrome = -float('inf')\n    for num in arr:\n        if num > max_palindrome and isPalindrome(num):\n            max_palindrome = num\n    \n    return max_palindrome",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from math import comb\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Computes the binomial probability of getting exactly k successes in n independent Bernoulli trials,\n    each with success probability p.\n    \n    Args:\n    n (int): Number of trials\n    k (int): Desired number of successes\n    p (float): Probability of success on an individual trial\n    \n    Returns:\n    float: Binomial probability of getting exactly k successes\n    \"\"\"\n    return comb(n, k) * pow(p, k) * pow(1 - p, n - k)",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(lst):\n    # Sort the list using key=lambda to sort based on the last element of each tuple.\n    lst.sort(key=lambda x: x[-1])\n    return lst",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'tan' is not defined"
    ],
    "generated_code": "import math\n\ndef area_pentagon(side_length):\n    \"\"\"\n    Calculate the area of a regular pentagon with side length 'side_length'.\n    \n    Args:\n    - side_length (float): The length of each side of the pentagon.\n    \n    Returns:\n    - float: The area of the pentagon.\n    \"\"\"\n    apothem = side_length / (2 * tan(math.pi / 5))\n    return (side_length ** 2) * (5 / (2 * tan(math.pi / 5))) * (tan(math.pi / 5)) * (tan(math.pi / 5))\n\n# Test the function with provided data points\nassert abs(area_pentagon(5)-43.01193501472417)<1e-5, \"Test case 1 failed\"\nassert abs(area_pentagon(10)-172.0477400588967)<1e-5, \"Test case 2 failed\"\nassert abs(area_pentagon(15)-387.10741513251753)<1e-5, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Largest(arr):\n    max_value = max(arr)\n    count = arr.count(max_value)\n    return count",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\nimport collections\n\ndef extract_symmetric(tuples_list: List[Tuple[int]]) -> List[Tuple[int]]:\n    \"\"\"\n    Extracts and returns all symmetric pairs from the provided list of tuples.\n    \n    :param tuples_list: A list of tuples where each tuple contains two integers.\n    :return: A list of tuples containing symmetric pairs found within the input list.\n    \"\"\"\n    symmetric_pairs = []\n    # Dictionary to store the first elements for comparison with their mirrored counterparts\n    seen_first_elements = collections.defaultdict(list)\n    \n    for tup in tuples_list:\n        if len(tup) != 2:\n            continue\n        first_element = tup[0]\n        second_element = tup[1]\n        \n        # Check if the second element is already in the dictionary\n        if second_element not in seen_first_elements[first_element]:\n            seen_first_elements[first_element].append(second_element)\n        \n        # Ensure we don't double-count when checking mirrors\n        mirror_second_element = tup[0] - tup[1]\n        if mirror_second_element > 0 and mirror_second_element in seen_first_elements:\n            # Avoid adding duplicate entries in symmetric pairs\n            if frozenset({first_element, second_element}) not in symmetric_pairs:\n                symmetric_pairs.append((second_element, first_element))\n                \n    return symmetric_pairs",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_gp(a, r, n):\n    # Calculate the sum of geometric progression using formula for infinite GP\n    return (a * ((r - 1) / (r - 1))) if r != 1 else \"Invalid Input\"",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return False",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef calculate_polygons(x1, y1, x2, y2, step_size=1):\n    polygons = []\n    for i in range(x1, x2 + step_size, step_size):\n        row_points = []\n        for j in range(y1, y2 + step_size, step_size):\n            row_points.append((i, j))\n            if j == y2:\n                break\n        polygons.append(row_points)\n    \n    return polygons\n\n# Test cases\nprint(calculate_polygons(1,1, 4, 4, 3)) \nprint(calculate_polygons(5,4,7,9,8))  \nprint(calculate_polygons(9,6,4,3,2))",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_to_integer(binary_tuple):\n    # Convert the binary tuple to an integer\n    result = int(''.join(map(str, binary_tuple)), 2)\n    return str(result)\n\n# Test cases to verify the correctness of the function\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(input_string):\n    # Remove lowercase letters from the input string using regular expression\n    result = re.sub('[a-z]', '', input_string)\n    return result\n\n# Test cases\nprint(remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf'))  # Expected output: KDALOOOHLAJSI\nprint(remove_lowercase('ProducTnamEstreAmIngMediAplAYer'))  # Expected output: PTEAIMAAY\nprint(remove_lowercase('maNufacTuredbYSheZenTechNolOGIes'))  # Expected output: NTYSZTNOGI",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\nfrom typing import List\n\ndef heap_queue_smallest(nums: List[int], k: int) -> List[int]:\n    # Convert all elements into a max-heap so we can use min operation later\n    max_heap = [-n for n in nums]\n    heapq.heapify(max_heap)\n    \n    result = []\n    for _ in range(k):\n        # Pop the largest element from the heap\n        current_max = -heapq.heappop(max_heap)\n        \n        # Push it back as a negative value to maintain the max-heap property and make it available for next iteration\n        heapq.heappush(max_heap, -current_max)\n        \n        # Add the original number to the result\n        result.append(-current_max)\n\n    return result",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef surfacearea_cone(radius, height):\n    base_area = math.pi * radius ** 2\n    lateral_surface_area = math.pi * radius * math.sqrt(height ** 2 + radius ** 2)\n    total_surface_area = base_area + lateral_surface_area\n    return round(total_surface_area, 6)\n\n# Test cases\nprint(surfacearea_cone(5,12)) # Expected output: 282.743338\nprint(surfacearea_cone(10,15)) # Expected output: 880.517935\nprint(surfacearea_cone(19,17)) # Expected output: 2655.923961",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def gcd(a, b):\n    while(b != 0):\n        t = b\n        b = a % b\n        a = t\n    return a",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef diameter_circle(radius):\n    return 2 * radius * math.sqrt(2)",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(list_of_strings):\n    # Joining all strings in the list with spaces and removing extra space at the beginning and end.\n    return \" \".join(list_of_strings).strip()",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def num_comm_div(a, b):\n    # Ensure a is less than or equal to b for better efficiency\n    if a > b:\n        a, b = b, a\n    \n    # Loop through possible divisors starting from 1 up to the smaller number\n    for i in range(1, a + 1):\n        if b % i == 0 and a % i == 0:\n            return i",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(dividend, divisor):\n    # Calculate the remainder using modulo operator\n    return dividend % divisor",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef add_consecutive_nums(nums: List[int]) -> List[int]:\n    result = []\n    current_sum = nums[0] + nums[1]\n    for i in range(2, len(nums)):\n        current_sum += nums[i]\n        result.append(current_sum)\n    return result",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Series' is not defined",
      "Test 2: FAIL - name 'sum_Of_Series' is not defined",
      "Test 3: FAIL - name 'sum_Of_Series' is not defined"
    ],
    "generated_code": "def sum_of_series(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i**3\n    return total",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_order(arr):\n    \"\"\"\n    Reorders the elements in an array such that all non-zero elements come before zero elements.\n    \n    :param arr: List[int] - The input list containing integers.\n    :return: List[int] - The reordered list with non-zero elements followed by zeros.\n    \"\"\"\n    # Separate non-zero and zero elements into two different lists\n    non_zero = [element for element in arr if element != 0]\n    zero = [0 for _ in range(arr.count(0))]\n    \n    # Concatenate both lists to get the final result\n    return non_zero + zero\n\n# Test cases to verify the correctness of the function\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def factorial(n):\n    \"\"\"Calculate the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of n and k.\n\n    Args:\n    - n: The total number of items.\n    - k: The number of items to choose from n.\n\n    Returns:\n    - The permutation coefficient of choosing k items from n items as an integer.\n    \"\"\"\n    return factorial(n) // factorial(n-k)\n\n# Test cases to verify the correctness of the function\nassert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(word_list, words_to_remove):\n    # Use set comprehension to filter out unwanted words\n    return [word for word in word_list if word not in words_to_remove]",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef same_order(list_1: List[str], list_2: List[str]) -> bool:\n    # Check if the lengths of both lists are different.\n    if len(list_1) != len(list_2):\n        return False\n    \n    # Sort both lists and compare them for equality.\n    sorted_list_1 = sorted(list_1)\n    sorted_list_2 = sorted(list_2)\n    \n    return sorted_list_1 == sorted_list_2",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def average_Odd(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2): # Iterate over odd numbers from 1 to n\n        sum += i\n        count += 1\n    if count == 0:\n        return 0\n    else:\n        return sum / count",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j // arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n                \n    return sum(dp[n])\n\n# Test cases\nprint(no_of_subsequences([1,2,3,4], 10))  # Expected output: 11\nprint(no_of_subsequences([4,8,7,2], 50))  # Expected output: 9\nprint(no_of_subsequences([5,6,7,8], 15))  # Expected output: 4",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef find_Min_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the minimum sum of its factors.\n    \"\"\"\n    if n == 1:\n        return n\n    \n    min_sum = float('inf')\n    \n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factor1 = i\n            factor2 = n // i\n            \n            # Check if both factors are different from each other\n            if factor1 != factor2:\n                current_sum = factor1 + factor2\n                \n                # Update the minimum sum found so far\n                min_sum = min(min_sum, current_sum)\n                \n    return min_sum",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_freq(mixed_tuple):\n    freq_dict = {}\n    for elem in mixed_tuple:\n        if isinstance(elem, tuple):\n            for sub_elem in elem:\n                if sub_elem in freq_dict:\n                    freq_dict[sub_elem] += 1\n                else:\n                    freq_dict[sub_elem] = 1\n        elif elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_str(lst, str_val):\n    \"\"\"\n    This function takes a tuple and a string as input.\n    It returns a new list where each element in the original tuple is replaced with the element itself followed by the provided string.\n    \n    :param lst: Tuple containing elements of various types\n    :param str_val: String value to be added after each element of the tuple\n    :return: A new list with elements from the original tuple followed by the provided string\n    \n    >>> add_str((5, 6, 7, 4, 9), \"FDF\")\n    [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n    >>> add_str((7, 8, 9, 10), \"PF\")\n    [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\n    >>> add_str((11, 14, 12, 1, 4), \"JH\")\n    [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(item)\n        result.append(str_val)\n    return result[:-len(str_val)]  # Remove the trailing string_val length\n\n\n# Check function with provided data points\nprint(add_str((5, 6, 7, 4, 9), \"FDF\"))  # Expected output: [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nprint(add_str((7, 8, 9, 10), \"PF\"))     # Expected output: [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nprint(add_str((11, 14, 12, 1, 4), \"JH\")) # Expected output: [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_elements(tuple_list):\n    # Initialize total sum to 0\n    total_sum = 0\n    \n    # Iterate through each element in the tuple list and add it to the total sum\n    for number in tuple_list:\n        total_sum += number\n        \n    return total_sum\n\n# Test cases\nprint(sum_elements((7, 8, 9, 1, 10, 7)))  # Expected output: 42\nprint(sum_elements((1, 2, 3, 4, 5, 6)))   # Expected output: 21\nprint(sum_elements((11, 12 ,13 ,45, 14))) # Expected output: 95",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def modular_sum(numbers, target_modulus, divisor):\n    # Initialize an array to store possible remainders and their counts\n    remainder_counts = [0] * divisor\n    \n    for number in numbers:\n        # Calculate the current remainder when divided by divisor\n        current_remainder = number % divisor\n        \n        # Update the count of each remainder\n        for i in range(divisor // target_modulus - 1, -1, -1):\n            if ((i + 1) * target_modulus + current_remainder) % divisor == 0:\n                remainder_counts[i] += 1\n                \n    # Check if at least one valid remainder exists\n    for count in remainder_counts:\n        if count > 0:\n            return True\n    return False\n\n# Test cases\nprint(modular_sum([3, 1, 7, 5], 4, 6))  # Expected output: True\nprint(modular_sum([1, 7], 2, 5))       # Expected output: False\nprint(modular_sum([1, 6], 2, 5))       # Expected output: False",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def radix_sort(arr):\n    RADIX = 10\n    max_length = False\n    placement = 1\n    \n    while not max_length:\n        max_length = True\n        buckets = [[] for _ in range(RADIX)]\n        \n        # Place the items in sorted sublists based on their value modulo 10\n        for item in arr:\n            tmp = int(item / placement)\n            buckets[tmp % RADIX].append(item)\n            if max_length and len(buckets[tmp % RADIX]) > 0:\n                max_length = len(buckets[tmp % RADIX])\n                \n        i = 0\n        # Flatten the list back into one\n        for b in range(RADIX):\n            buck = buckets[b]\n            for x in buck:\n                arr[i] = x\n                i += 1\n                \n        # Move to the next digit\n        placement *= RADIX\n    \n    return arr",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(nums):\n    max_num = float('-inf')  # Initialize max_num with negative infinity\n    for num in nums:\n        if num > max_num:\n            max_num = num  # Update max_num if current number is greater\n    return max_num",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sqrt_root(num):\n    if num < 0:\n        return \"No real square root for negative numbers.\"\n    else:\n        import math\n        return int(math.sqrt(num))",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sqrt' is not defined",
      "Test 2: FAIL - name 'sqrt' is not defined",
      "Test 3: FAIL - name 'sqrt' is not defined"
    ],
    "generated_code": "def volume_tetrahedron(side_length):\n    \"\"\"\n    Calculate the volume of a tetrahedron given its side length.\n    \n    Args:\n        side_length (float): The length of each edge of the tetrahedron.\n        \n    Returns:\n        float: The volume of the tetrahedron.\n    \"\"\"\n    return (side_length ** 3) / (6 * sqrt(2))",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef get_lcm(arr: List[int]) -> int:\n    def gcd(a, b):\n        while b != 0:\n            temp = b\n            b = a % b\n            a = temp\n        return a\n    \n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = (result * arr[i]) // gcd(result, arr[i])\n    return result",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if all sides are different\n    return len(set([a, b, c])) == 3",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef lbs(arr: List[int]) -> int:\n    n = len(arr)\n    inc, dec = [1] * n, [1] * n\n    \n    # Compute the maximum length of increasing subsequences ending with arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + 1)\n                \n    # Compute the maximum length of decreasing subsequences starting from arr[i]\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + 1)\n    \n    # The answer is the maximum value in either sequence\n    return max(max(x) for x in (inc, dec))",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_string(s):\n    def has_upper_case():\n        if not s.isupper():\n            return \"String must have 1 upper case character.\"\n        else:\n            return None\n\n    def has_lower_case():\n        if not s.islower():\n            return \"String must have 1 lower case character.\"\n        else:\n            return None\n\n    def has_number():\n        for char in s:\n            if char.isdigit():\n                return None\n        return \"String must have 1 number.\"\n\n    def is_valid_length():\n        if len(s) < 8:\n            return \"String length should be atleast 8.\"\n        else:\n            return None\n\n    return [\n        has_upper_case(),\n        has_lower_case(),\n        has_number(),\n        is_valid_length()\n    ]",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_increasing_subsequence(arr, n):\n    # Initialize variables\n    max_so_far = [0] * n\n    for i in range(n-1, -1, -1):\n        max_so_far[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                max_so_far[i] += max_so_far[j]\n    return max(max_so_far)\n\n# Example usage:\nprint(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7))  # Output: 106\nprint(max_sum_increasing_subsequence([3, 4, 5, 10], 4))              # Output: 22\nprint(max_sum_increasing_subsequence([10, 5, 4, 3], 4))              # Output: 10",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'parallel_lines' is not defined",
      "Test 2: FAIL - name 'parallel_lines' is not defined",
      "Test 3: FAIL - name 'parallel_lines' is not defined"
    ],
    "generated_code": "def is_parallel(line1, line2):\n    # Extracting coefficients from the equations of the lines in ax + by = c format\n    a1, b1, c1 = line1[0], line1[1], line1[2]\n    a2, b2, c2 = line2[0], line2[1], line2[2]\n\n    # Calculating the cross product of the normal vectors of the lines\n    cross_product = a1 * b2 - a2 * b1\n    \n    # If the cross product is zero, the lines are parallel\n    return cross_product == 0",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def capitalize_first_last_letters(s):\n    return ' '.join(word[0].upper() + word[-1] if len(word) > 1 else word for word in s.split())",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef get_pairs_count(arr, k_sum, n_sum):\n    count = defaultdict(int)\n    \n    for num in arr:\n        complement = n_sum - num\n        if complement in count:\n            return complement * 2\n        else:\n            count[num] += 1\n            \n    return 0",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length(lsts):\n    if not lsts:\n        return None, []\n    else:\n        min_len = len(min(lsts, key=len))\n        result = next((lst for lst in lsts if len(lst) == min_len), None)\n        return min_len, [result] if result is not None else []\n\n# Test cases\nprint(min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))  # Expected output: (1, [0])\nprint(min_length([[1], [5, 7], [10, 12, 14, 15]]))               # Expected output: (1, [1])\nprint(min_length([[5], [15, 20, 25]]))                           # Expected output: (1, [5])",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def jacobsthal_lucas(n):\n    # Base case for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two values of Jacobsthal-Lucas sequence\n    a, b = 2, 1\n    \n    # Calculate the nth value iteratively\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b - a\n    \n    return b",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'list' and 'int'"
    ],
    "generated_code": "import numpy as np\n\ndef negative_count(nums):\n    \"\"\"\n    This function takes an array of integers and returns the ratio of negative numbers within it.\n    \n    :param nums: List[int] - An array of integers\n    :return: float - The ratio of negative numbers in the array rounded to 6 decimal places\n    \n    Example:\n    >>> negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.312500\n    >>> negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    0.312500\n    >>> negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    0.444444\n    \"\"\"\n    neg = np.count_nonzero(nums < 0)\n    return round(neg / len(nums), 6)\n\n# Test cases\nprint(negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))  # Expected output: 0.312500\nprint(negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))   # Expected output: 0.312500\nprint(negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17]))           # Expected output: 0.444444",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_coins(coins, total, target):\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    \n    for i in range(1, target + 1):\n        for coin in coins:\n            if i - coin >= 0 and dp[i - coin] != float('inf'):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[target]",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_permutation' is not defined",
      "Test 2: FAIL - name 'check_permutation' is not defined",
      "Test 3: FAIL - name 'check_permutation' is not defined"
    ],
    "generated_code": "def is_permutation(str1, str2):\n    \"\"\"\n    Check if two strings are permutations of each other.\n    \n    Parameters:\n    str1 (str): The first string.\n    str2 (str): The second string.\n    \n    Returns:\n    bool: True if the strings are permutations of each other, False otherwise.\n    \"\"\"\n    # If lengths differ, they cannot be permutations\n    if len(str1) != len(str2):\n        return False\n    \n    # Create dictionaries for both strings and compare them\n    dict1 = {}\n    dict2 = {}\n    for char in str1:\n        dict1[char] = dict1.get(char, 0) + 1\n    for char in str2:\n        dict2[char] = dict2.get(char, 0) + 1\n        \n    return dict1 == dict2\n\n# Test cases\nprint(is_permutation(\"abc\", \"cba\"))  # Expected output: True\nprint(is_permutation(\"test\", \"ttew\"))  # Expected output: False\nprint(is_permutation(\"xxyz\", \"yxzx\"))  # Expected output: True",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_datatype(tup, datatype):\n    new_tup = ()\n    for item in tup:\n        if not isinstance(item, datatype):\n            new_tup += (item,)\n    return new_tup\n\n# Test cases\nprint(remove_datatype((4, 5, 4, 7.7, 1.2), int)) # Should print [7.7, 1.2]\nprint(remove_datatype((7, 8, 9, \"SR\"), str)) # Should print [7, 8, 9]\nprint(remove_datatype((7, 1.1, 2, 2.2), float)) # Should print [7, 2]",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search_literal(text, literal):\n    start = text.find(literal)\n    return (start, start + len(literal))\n\n# Example usage:\nprint(search_literal('python programming language', 'python')) # Output: (0, 6)\nprint(search_literal('programming python language', 'python')) # Output: (7, 18)\nprint(search_literal('language python programming', 'python')) # Output: (19, 27)",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\nfrom typing import Tuple\n\ndef topbottom_surfacearea(radius: float) -> float:\n    \"\"\"\n    Calculates the total surface area of a right circular cylinder given its radius.\n    \n    Parameters:\n        radius (float): The radius of the base of the cylinder in meters.\n        \n    Returns:\n        float: The total surface area of the cylinder in square meters.\n    \"\"\"\n    return 2 * math.pi * radius**2 + 2 * math.pi * radius * 2\n\n# Check function with provided data points\nprint(topbottom_surfacearea(10))  # Expected output: 314.15000000000003\nprint(topbottom_surfacearea(5))   # Expected output: 78.53750000000001\nprint(topbottom_surfacearea(4))   # Expected output: 50.264",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(lst, n):\n    return lst[n::n]\n\n# Test cases\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))  # [1, 3, 5, 7, 9]\nprint(nth_items([10, 15, 19, 17, 16, 18], 3))  # [10, 17]\nprint(nth_items([14, 16, 19, 15, 17], 4))  # [14, 17]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_word(input_string):\n    # Split the input string into words\n    words = input_string.split()\n    \n    # Initialize an empty set for storing unique words\n    seen_words = set()\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # If the word is already in the set, it's a duplicate\n        if word in seen_words:\n            return word\n        \n        # Add the word to the set of seen words\n        seen_words.add(word)\n    \n    # If no duplicates were found, return None\n    return None\n\n# Test cases\nprint(first_repeated_word(\"ab ca bc ab\"))  # Expected output: \"ab\"\nprint(first_repeated_word(\"ab ca bc\"))     # Expected output: None\nprint(first_repeated_word(\"ab ca bc ca ab bc\"))  # Expected output: \"ca\"",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'str' object cannot be interpreted as an integer",
      "Test 2: FAIL - 'str' object cannot be interpreted as an integer",
      "Test 3: FAIL - 'str' object cannot be interpreted as an integer"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\n    # Convert each item in the list into its corresponding ASCII value and join them with a separator\n    result = ''.join([chr(item) for item in string_list])\n    return tuple(result)",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "def basesnum_correspondingnum(bases, nums):\n    return list(map(lambda x, y: int(x) ** y, bases, nums))",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Diff(arr, max_val):\n    frequency = [0] * (max_val + 1)\n    for num in arr:\n        frequency[num] += 1\n    min_freq = min(frequency[1:])\n    diff = max(frequency[i] - i for i in range(1, len(frequency)))\n    return diff\n\n# Test Cases\nprint(find_Diff([1,1,2,2,7,8,4,5,1,4], 10))  # Output should be 2\nprint(find_Diff([1,7,9,2,3,3,1,3,3], 9))     # Output should be 3\nprint(find_Diff([1,2,1,2], 4))               # Output should be 0",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_abundant(number):\n    divisors_sum = sum([i for i in range(1, int(number/2)+1) if number % i == 0])\n    return divisors_sum > number\n\n# Test cases\nprint(check_abundant(12)) # Expected output: True\nprint(check_abundant(15)) # Expected output: False\nprint(check_abundant(18)) # Expected output: True",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef fill_spaces(input_string):\n    \"\"\"\n    Replace all spaces, commas, and dots in the input_string with colons.\n    \n    :param input_string: A string containing alphanumeric characters, spaces, commas, and/or dots.\n    :return: A new string where all spaces, commas, and dots have been replaced with colons.\n    \"\"\"\n    # Use regular expression to find spaces, commas, and dots and replace them with ':'\n    result = re.sub(r'[ ,.]+', ':', input_string)\n    return result",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_digits(x, n=0):\n    # Convert x to string and concatenate with itself\n    str_x = str(x) + str(x)\n    # Count the total length of the concatenated string\n    return len(str_x)\n\n# Example usage:\nprint(count_digits(9875))   # Output should be 4\nprint(count_digits(98759853034))   # Output should be 11\nprint(count_digits(1234567, 500))   # Output should be 7",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def flatten_tuple(tuples_list):\n    \"\"\"\n    Flattens a list of tuples into a single string with all elements concatenated.\n    \n    :param tuples_list: List of tuples containing strings as elements.\n    :return: A string formed by concatenating all elements from each tuple in the list.\n    \"\"\"\n    # Joining all elements of the nested tuples into one continuous string\n    flattened_string = ''.join(map(str, [item for sublist in tuples_list for item in sublist]))\n    return flattened_string\n\n# Test cases to verify the correctness of the solution\nassert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_F_and_L_bits(n):\n    # Toggle first and last bits of n\n    result = (n ^ (n >> 1)) & ((~n + 1) | (1 << 1))\n    return result",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_occurence_char(s, c):\n    try:\n        return s.rindex(c)\n    except ValueError:\n        return None",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Total_Hamming_Distance(n):\n    \"\"\"\n    Calculate the sum of Hamming distances for all consecutive integers from 0 to n.\n    \n    Args:\n        n (int): The upper limit integer up to which the sum is calculated.\n        \n    Returns:\n        int: The total sum of Hamming distances.\n    \"\"\"\n    # Initialize variables\n    result = 0\n    power_of_two = 1\n    \n    # Loop until the highest power of two less than or equal to n\n    while power_of_two <= n:\n        # Add the contribution of each bit position across powers of two\n        result += (n // power_of_two + 1 - 2) * power_of_two\n        \n        # Move to the next higher power of two\n        power_of_two *= 2\n    \n    return result\n\n# Example usage and verification with provided data points\nprint(Total_Hamming_Distance(4))  # Expected output: 7\nprint(Total_Hamming_Distance(2))  # Expected output: 3\nprint(Total_Hamming_Distance(5))  # Expected output: 8",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - bisect_right() missing required argument 'x' (pos 2)",
      "Test 2: FAIL - bisect_right() missing required argument 'x' (pos 2)",
      "Test 3: FAIL - bisect_right() missing required argument 'x' (pos 2)"
    ],
    "generated_code": "from bisect import bisect_right as upper_bound\n\ndef longest_increasing_subsequence(sequence):\n    \"\"\"\n    Finds the length of the longest strictly increasing subsequence in a list.\n    \n    Args:\n        sequence (list): A list of integers\n    \n    Returns:\n        int: Length of the longest strictly increasing subsequence\n    \"\"\"\n    dp = [float('-inf')] * len(sequence)\n    dp[0] = 0\n    ans = float('-inf')\n    for i in range(1, len(sequence)):\n        idx = upper_bound(dp) # Find next greater element than current element\n        if idx < len(sequence):\n            dp[idx] = max(dp[idx], sequence[i])\n        else:\n            dp.append(sequence[i])\n        ans = max(ans, dp[idx])\n\n    return ans + 1",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    result = 0\n    for i in range(1, n+1):\n        num = 1 + 2*i - 2     # Calculate nth odd number\n        result += num**5       # Add its fifth power to the result\n    return result",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max(arr, start, end):\n    # Base case: if there is one element\n    if start == end:\n        return arr[start]\n    \n    # Find the pivot point where the array is rotated\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        else:\n            end = mid\n    \n    # The last checked index after rotation is the max element\n    return arr[start]\n\n# Test cases\nprint(find_Max([2,3,5,6,9], 0, 4))  # Expected output: 9\nprint(find_Max([3,4,5,2,1], 0, 4))  # Expected output: 5\nprint(find_Max([1,2,3], 0, 2))      # Expected output: 3",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_column(nested_list, index):\n    # Extracting the specified column using list comprehension and accessing elements in nested lists\n    return [sublist[index] for sublist in nested_list]",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Seq_Linear(seq):\n    # Check if all adjacent elements have an absolute difference of 2\n    for i in range(len(seq) - 1):\n        if abs(seq[i] - seq[i+1]) != 2:\n            return \"Non Linear Sequence\"\n    return \"Linear Sequence\"\n\n# Test cases\nprint(Seq_Linear([0,2,4,6,8,10]))  # Expected output: Linear Sequence\nprint(Seq_Linear([1,2,3]))         # Expected output: Linear Sequence\nprint(Seq_Linear([1,5,2]))         # Expected output: Non Linear Sequence",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_to_float(tup):\n    float_num = sum(i / (10 ** i) for i in range(len(tup)))\n    return float_num",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(lst):\n    return [x for x in lst if x % 2 != 0]\n\n# Test cases\nprint(split([1,2,3,4,5,6]))  # Expected output: [1, 3, 5]\nprint(split([10,11,12,13]))  # Expected output: [11, 13]\nprint(split([7,8,9,1]))      # Expected output: [7, 9, 1]",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def difference(n):\n    # Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = int((n * (n + 1) / 2)) ** 2\n    \n    # Calculate the sum of first n natural numbers\n    sum_of_natural_numbers = (n * (n + 1)) // 2\n    \n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_natural_numbers",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef find_Odd_Pair(nums: List[int], target: int) -> int:\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] ^ nums[j] == target:\n                count += 1\n    return count * 2",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(s):\n    return s.swapcase()",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def digit_distance_nums(x, y):\n    # Calculate the absolute difference of their digits in each position\n    result = abs(sum(int(digit)**2 for digit in str(abs(x-y))))\n    return result",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef max_sub_array_sum(nums: List[int]) -> int:\n    \"\"\"\n    Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers.\n    \n    :param nums: List[int] -- A list of integers.\n    :return: int -- The maximum sum of any contiguous subarray.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    current_max = global_max = nums[0]\n    for num in nums[1:]:\n        current_max = max(num, current_max + num)\n        global_max = max(global_max, current_max)\n        \n    return global_max\n\n# Check function with provided data points\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3]) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4]) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5]) == 10",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - union_elements() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - union_elements() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - union_elements() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def union_elements(tuples):\n    result = set()\n    for tup in tuples:\n        result.update(set(tup))\n    return tuple(result)\n\n# Test cases\nprint(union_elements([(3, 4, 5, 6), (5, 7, 4, 10)]))  # Output: (3, 4, 5, 6, 7, 10)\nprint(union_elements([(1, 2, 3, 4), (3, 4, 5, 6)]))   # Output: (1, 2, 3, 4, 5, 6)\nprint(union_elements([(11, 12, 13, 14), (13, 15, 16, 17)]))  # Output: (11, 12, 13, 14, 15, 16, 17)",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_elements(pairs):\n    # Initialize an empty dictionary to store the results\n    result = {}\n    \n    # Iterate over each pair in the input list\n    for first, second in pairs:\n        # If the second number of the current pair is already a key in the result,\n        # add the first number as a value for that key\n        if second in result:\n            result[second].append(first)\n        else:\n            # Otherwise, create a new entry in the result dictionary\n            result[second] = [first]\n    \n    # Return the final result\n    return result",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Find_Max_Length(lst):\n    # Initialize max_length to 0 and current_length to 0\n    max_length = 0\n    current_length = 0\n    \n    # Iterate through each sublist in the given list\n    for sublst in lst:\n        # Update current_length if the next element is greater than the previous one\n        if len(sublst) > current_length + 1:\n            current_length += 1\n        else:\n            # Reset current_length when encountering an empty sublist\n            current_length = 0\n        \n        # Update max_length with the maximum value between current_length and max_length\n        max_length = max(max_length, current_length)\n    \n    return max_length\n\n# Test cases\nprint(Find_Max_Length([[1],[1,4],[5,6,7,8]]))  # Expected output: 4\nprint(Find_Max_Length([[0,1],[2,2,],[3,2,1]]))  # Expected output: 3\nprint(Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]))  # Expected output: 5",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_values(s):\n    return s.split('\",\"')\n\n# Test cases\nprint(extract_values('\"Python\", \"PHP\", \"Java\"')) # ['Python', 'PHP', 'Java']\nprint(extract_values('\"python\",\"program\",\"language\"')) # ['python', 'program', 'language']\nprint(extract_values('\"red\",\"blue\",\"green\",\"yellow\"')) # ['red', 'blue', 'green', 'yellow']",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    # Initialize counters for equal and unequal elements\n    eq_count = 0\n    uneq_count = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        if arr[i] == arr[(i+1)%n]:\n            eq_count += 1\n        else:\n            uneq_count += 1\n            \n    # Return the total number of unequal pairs\n    return uneq_count * (uneq_count - 1) // 2",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(s):\n    \"\"\"\n    This function takes a string and splits it into individual characters.\n    \n    Parameters:\n    s (str): The input string to be split.\n    \n    Returns:\n    list: A list of characters from the input string.\n    \"\"\"\n    return list(s)",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(number):\n    return sum(int(digit) for digit in str(number))",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(lst):\n    return all(x <= y for x, y in zip(lst, lst[1:]))\n\n# Test cases\nprint(issort_list([1,2,4,6,8,10,12,14,16,17])) # Expected output: True\nprint(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])) # Expected output: False\nprint(issort_list([1, 2, 4, 6, 8, 10,15,14,20])) # Expected output: False",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def empty_list(n):\n    return [{}] * n",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(list_of_lists):\n    # Sort each sublist individually\n    return [sorted(sublist) for sublist in list_of_lists]",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_words(words_list, unwanted_chars):\n    return [word for word in words_list if not any(char in word for char in unwanted_chars)]",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_pair_diff_lessthan_K(arr, k, n):\n    arr.sort()\n    result = 0\n    i = j = 0\n    \n    while j < len(arr) and i < len(arr) - 1:\n        diff = abs(arr[j] - arr[i])\n        \n        if diff > k:\n            i += 1\n            continue\n        \n        if arr[i + 1] - arr[i] <= k:\n            result += arr[i] + arr[i + 1]\n            i += 2\n        else:\n            i += 1\n            \n    return result\n\n# Test Cases\nprint(max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4)) # Expected output: 62\nprint(max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12)) # Expected output: 25\nprint(max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6)) # Expected output: 21",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate list (not \"int\") to list",
      "Test 2: FAIL - can only concatenate list (not \"int\") to list",
      "Test 3: FAIL - can only concatenate list (not \"int\") to list"
    ],
    "generated_code": "def two_unique_nums(nums):\n    # Convert list of lists into a set to remove duplicates\n    unique_nums = list(set(sum(nums, [])))\n    # Return the first two unique elements as they will be sorted and the smallest two if there's less than three distinct values in each sublist.\n    return unique_nums[:2]\n\n# Test cases\nprint(two_unique_nums([[1, 2, 3], [2, 3, 4], [3, 4, 5]]))  # Output: [1, 2, 3, 4, 5]",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_product(nums):\n    \"\"\"\n    Calculate the product of all unique elements in the list.\n    \n    Args:\n    nums (list): A list of integers.\n    \n    Returns:\n    int: The product of all unique elements in the list.\n    \"\"\"\n    from collections import Counter\n    \n    # Count the occurrences of each number\n    num_counts = Counter(nums)\n    \n    # Multiply all unique numbers\n    product = 1\n    for count in num_counts.values():\n        if count > 1:\n            product *= count\n        else:\n            break\n            \n    return product\n\n# Test cases\nprint(unique_product([10, 20, 30, 40, 20, 50, 60, 40]))  # Expected output: 720000000\nprint(unique_product([1, 2, 3, 1,]))  # Expected output: 6\nprint(unique_product([7, 8, 9, 0, 1, 1]))  # Expected output: 0",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    \"\"\"\n    Calculate the total surface area of a cylinder.\n    \n    Parameters:\n        radius (float): The radius of the base circle of the cylinder.\n        height (float): The height of the cylinder.\n        \n    Returns:\n        float: The total surface area of the cylinder.\n    \"\"\"\n    # Calculating the two circular bases' areas\n    base_area = 2 * math.pi * radius ** 2\n    \n    # Calculating the lateral surface area\n    lateral_surface_area = 2 * math.pi * radius * height\n    \n    # Total surface area is the sum of both areas\n    total_surface_area = base_area + lateral_surface_area\n    \n    return round(total_surface_area, 5)",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - count_no() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def count_no(n, div, target):\n    def helper(current):\n        if current == target:\n            return n\n        elif current % div == 0:\n            return helper(current + 1)\n        else:\n            return current\n    \n    result = helper(1)\n    while True:\n        if result >= target:\n            break\n        result += 1\n    return result",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Sub_Array(arr1, arr2, len1, len2):\n    i = j = 0\n    \n    # Traverse both arrays until one of them is exhausted\n    while i < len1 and j < len2:\n        if arr1[i] != arr2[j]:\n            i += 1\n        else:\n            i += 1\n            j += 1\n            \n    # If all elements in arr2 were found in arr1 in same order, then return true\n    return j == len2\n\n# Test cases\nprint(is_Sub_Array([1,4,3,5],[1,2],4,2))   # Expected output: False\nprint(is_Sub_Array([1,2,1],[1,2,1],3,3))   # Expected output: True\nprint(is_Sub_Array([1,0,2,2],[2,2,0],4,3)) # Expected output: False",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit_Factorial(n):\n    # Initialize result to store last digit of factorial\n    res = 1\n    \n    # Calculate factorial using loop and mod operation to keep only last digit\n    for i in range(2, n + 1):\n        temp = res * i\n        if temp >= 10:\n            temp %= 10\n        res = temp\n        \n    return res\n\n# Test cases\nprint(last_Digit_Factorial(4))   # Expected output: 4\nprint(last_Digit_Factorial(21))  # Expected output: 0\nprint(last_Digit_Factorial(30))  # Expected output: 0",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def interleave_lists(list1, list2, list3):\n    return [a+b+c for a,b,c in zip(list1, list2, list3)]",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_dissimilar(tup1, tup2):\n    # Remove duplicates from both tuples and then compare their sorted versions\n    result = tuple(set(tup1) ^ set(tup2))\n    return result",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_even(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n        elif isinstance(item, tuple):\n            result.extend(extract_even(item))\n    return tuple(result)\n\n# Test cases\nprint(extract_even((4, 5, (7, 6, (2, 4)), 6, 8)))  # Output: (4, (6, (2, 4)), 6, 8)\nprint(extract_even((5, 6, (8, 7, (4, 8)), 7, 9)))  # Output: (6, (8, (4, 8)))\nprint(extract_even((5, 6, (9, 8, (4, 6)), 8, 10)))  # Output: (6, (8, (4, 6)), 8, 10)",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def surface_Area(base_edge, slant_height):\n    # Calculate the base area and add it twice for all four sides of the square pyramid\n    base_area = base_edge ** 2\n    side_areas = [base_edge * slant_height] * 4\n    \n    total_surface_area = base_area + sum(side_areas)\n    return total_surface_area\n\n# Test cases\nprint(surface_Area(3,4))  # Expected output: 33\nprint(surface_Area(4,5))  # Expected output: 56\nprint(surface_Area(1,2))  # Expected output: 5",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def my_dict(d):\n    # Check if the dictionary is empty\n    return len(d) == 0",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= (n - i + 1) // i\n        return result",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test failed for input 'Clearly, he has no excuse for such behavior.'"
    ],
    "generated_code": "import re\n\ndef find_adverbs(sentence):\n    \"\"\"\n    Finds all occurrences of adverbs and returns them along with their starting index.\n    \n    Args:\n        sentence (str): The input sentence containing words and adverbs.\n        \n    Returns:\n        list: A list where each element is a tuple with an adverb string and its start index.\n    \"\"\"\n    # Regular expression pattern to match adverbs, which are typically found between spaces\n    pattern = r'\\b([A-Z][a-z]*[.,!?;])\\s+'\n    matches = re.findall(pattern, sentence)\n    result = [(match[0], i) for i, match in enumerate(matches)]\n    return result\n\n# Test cases to verify the correctness of the solution\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"Clearly, he has no excuse for such behavior.\", [('Clearly', 0)]),\n        (\"Please handle the situation carefully\", [('carefully', 28)]),\n        (\"Complete the task quickly\", [('quickly', 18)])\n    ]\n    \n    for sentence, expected in test_cases:\n        assert find_adverbs(sentence) == expected, f\"Test failed for input '{sentence}'\"\n    print(\"All tests passed!\")",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: object of type 'int' has no len()"
    ],
    "generated_code": "import heapq\n\ndef expensive_items(items, k):\n    # Create a min heap with negative prices for max priority based on their names\n    return heapq.nsmallest(k, items, key=lambda x: (-x['price'], x['name']))\n\n# Example check function to verify the correctness of the generated function.\ndef check_solution():\n    test_cases = [\n        ([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 1),\n        ([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2),\n        ([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}], 1)\n    ]\n    \n    for inputs, expected in test_cases:\n        result = expensive_items(inputs, len(expected))\n        if all(item in expected and abs(item['price'] - item['expected_price']) < 0.001 for item, expected_price in zip(result, expected)):\n            print(f\"PASS: {inputs} -> {result}\")\n        else:\n            print(f\"FAIL: {inputs} -> {result}\")\n\ncheck_solution()",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_Arr(arr, n, k):\n    # Split the array into two parts at index 'k'\n    first_part = arr[:k]\n    second_part = arr[k:]\n    \n    # Append the first part to the end of the original array\n    result = second_part + first_part\n    \n    return result",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(lst):\n    return tuple(lst)\n\n# Test Cases\nprint(list_tuple([5, 10, 7, 4, 15, 3]))  # Expected output: (5, 10, 7, 4, 15, 3)\nprint(list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7]))  # Expected output: (2, 4, 5, 6, 2, 3, 4, 4, 7)\nprint(list_tuple([58, 44, 56]))  # Expected output: (58, 44, 56)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(arr):\n    \"\"\"\n    Find the absolute difference between the maximum and minimum values in an array.\n    \n    Parameters:\n    arr (list): A list of integers\n    \n    Returns:\n    int: The absolute difference between the max and min elements in the array\n    \"\"\"\n    # Find the maximum and minimum values in the array\n    max_value = max(arr)\n    min_value = min(arr)\n\n    # Calculate the difference and return it\n    return abs(max_value - min_value)\n\n# Check function with provided data points\nassert big_diff([1,2,3,4]) == 3, \"Test case 1 failed\"\nassert big_diff([4,5,12]) == 8, \"Test case 2 failed\"\nassert big_diff([9,2,3]) == 7, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perfect_squares(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if int(num**0.5)**2 == num:\n            result.append(num)\n    return result",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return ((x.real, y.real), complex(x.imag, y.imag))\n\n# Test cases\nprint(polar_rect(3, 4))   # Should print: (5.0, 0.927) and (-2+2.449j)\nprint(polar_rect(4, 7))   # Should print: (8.062, 1.052) and (-2+2.449j)\nprint(polar_rect(15, 17)) # Should print: (22.672, 0.848) and (-2+2.449j)",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with the first element\n    and the last element of the original list swapped.\n    \n    :param lst: List of elements\n    :return: A new list with the first and last elements swapped\n    \"\"\"\n    if len(lst) > 1:\n        # Swapping the first and last elements\n        temp = lst[0]\n        lst[0] = lst[-1]\n        lst[-1] = temp\n    return lst\n\n# Check function with provided data points\nprint(swap_List([12, 35, 9, 56, 24]))  # Expected output: [24, 35, 9, 56, 12]\nprint(swap_List([1, 2, 3]))            # Expected output: [3, 2, 1]\nprint(swap_List([4, 5, 6]))            # Expected output: [6, 5, 4]",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_product' is not defined",
      "Test 2: FAIL - name 'sum_Of_product' is not defined",
      "Test 3: FAIL - name 'sum_Of_product' is not defined"
    ],
    "generated_code": "def sum_of_product(n):\n    total = 0\n    for i in range(n+1):\n        for j in range(i+1):\n            if i >= j:\n                total += (i*j)\n    return total",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef removezero_ip(ip):\n    # Use regex to find and replace all occurrences of leading zeros in the IP address\n    return re.sub(r'^0+', '', ip)",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_even_odd(nums):\n    # Initialize variables for the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in nums:\n        if first_even is not None and first_odd is not None:\n            break\n        elif num % 2 == 0:\n            first_even = num\n        else:\n            first_odd = num\n            \n    return abs(first_even - first_odd)",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return \"Not Possible\"\n    \n    diff = sum(c1 != c2 for c1, c2 in zip(s1, s2))\n    swap_count = diff // 2\n    \n    if diff % 2 == 0 and diff >= 2:\n        return swap_count\n    else:\n        return \"Not Possible\"\n\n# Test cases\nprint(min_Swaps(\"1101\", \"1110\"))  # Output: 1\nprint(min_Swaps(\"111\", \"000\"))    # Output: Not Possible\nprint(min_Swaps(\"111\", \"110\"))    # Output: Not Possible",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import sys\n\ndef tuple_size(tup):\n    \"\"\"\n    Returns the size in bytes of the given tuple.\n    \n    Args:\n        tup (tuple): The input tuple whose size is to be calculated.\n        \n    Returns:\n        int: The size of the tuple in bytes.\n    \"\"\"\n    return sys.getsizeof(tup)",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: find_kth() missing 1 required positional argument: 'k'"
    ],
    "generated_code": "def find_kth(arr1, arr2, start1, end1, start2, end2, k):\n    # Base case when both arrays are exhausted\n    if start1 > end1:\n        return -1\n    if start2 > end2:\n        return -1\n    \n    # If k is within bounds of remaining elements in each array\n    if start1 + (end2 - start2) < k <= start1 + (end1 - start1):\n        return arr1[start1 + (k - start1 - 1)]\n    \n    # Calculate mid points for the current sub-arrays\n    mid1 = start1 + (end1 - start1) // 2\n    mid2 = start2 + (end2 - start2) // 2\n    \n    # Compare elements at mid points and adjust k accordingly\n    if arr1[mid1] == arr2[mid2]:\n        return arr1[mid1]\n    elif arr1[mid1] < arr2[mid2]:\n        return find_kth(arr1, arr2, start1, end1, mid2 + 1, end2, k)\n    else:\n        return find_kth(arr1, arr2, mid1 + 1, end1, start2, end2, k)\n\n# Test the function with provided data points\nprint(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5, 4))  # Expected output: 6\nprint(find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7, 7))  # Expected output: 256\nprint(find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6, 6))  # Expected output: 8",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def armstrong_number(num):\n    # Calculate the sum of digits raised to the power of their respective place value\n    return str(num) == str(sum(int(digit)**len(str(num)) for digit in str(num)))",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n):\n    total = n * (n + 1) / 2  # Sum of first n natural numbers\n    avg = total / n  # Average of first n natural numbers\n    return int(total), round(avg, 1)\n\n# Test cases\nprint(sum_average(10))  # Expected output: (55, 5.5)\nprint(sum_average(15))  # Expected output: (120, 8.0)\nprint(sum_average(20))  # Expected output: (210, 10.5)",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Even(n):\n    # Use bitwise AND operation with 1 and check if result is 0\n    return n & 1 == 0",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]