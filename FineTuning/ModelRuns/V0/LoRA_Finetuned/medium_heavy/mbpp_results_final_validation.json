[
  {
    "mbpp_id": 511,
    "problem": {
      "task_id": 511,
      "text": "Write a python function to find minimum sum of factors of a given number.",
      "code": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum",
      "test_list": [
        "assert find_Min_Sum(12) == 7",
        "assert find_Min_Sum(105) == 15",
        "assert find_Min_Sum(2) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find minimum sum of factors of a given number.\n\nTask ID: 511\n\nExpected behavior (test cases):\n1. find_Min_Sum(12) should return 7\n2. find_Min_Sum(105) should return 15\n3. find_Min_Sum(2) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Min_Sum(n):\n    if n == 1:\n        return 1\n    \n    result = [i for i in range(1, int(n**0.5)+1) if not n % i]\n    \n    min_sum = float('inf')\n    for item in result:\n        current_sum = sum(item // divisor for divisor in range(1, int(item**0.5)+1))\n        if current_sum < min_sum:\n            min_sum = current_sum\n    \n    return min_sum + sum(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 237,
        "prompt_tokens": 136,
        "completion_tokens": 108
      }
    },
    "timestamp": 1752168586.9000146
  },
  {
    "mbpp_id": 512,
    "problem": {
      "task_id": 512,
      "text": "Write a function to count the element frequency in the mixed nested tuple.",
      "code": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) ",
      "test_list": [
        "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
        "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
        "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count the element frequency in the mixed nested tuple.\n\nTask ID: 512\n\nExpected behavior (test cases):\n1. count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) should return {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n2. count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) should return {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n3. count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) should return {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_element_freq(mixed_nested_tuple):\n    from collections import defaultdict\n    freq_map = defaultdict(int)\n    \n    for item in mixed_nested_tuple:\n        if isinstance(item, tuple):\n            # Recursively call function for each sub-tuple and update frequencies.\n            for inner_item in item:\n                freq_map[inner_item] += 1\n        else:\n            # Increment frequency of current item.\n            freq_map[item] += 1\n            \n    return dict(freq_map)"
          }
        }
      ],
      "usage": {
        "total_tokens": 373,
        "prompt_tokens": 283,
        "completion_tokens": 97
      }
    },
    "timestamp": 1752168593.1221392
  },
  {
    "mbpp_id": 513,
    "problem": {
      "task_id": 513,
      "text": "Write a function to convert tuple into list by adding the given string after every element.",
      "code": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) ",
      "test_list": [
        "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
        "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
        "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert tuple into list by adding the given string after every element.\n\nTask ID: 513\n\nExpected behavior (test cases):\n1. add_str((5, 6, 7, 4, 9) , \"FDF\") should return [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n2. add_str((7, 8, 9, 10) , \"PF\") should return [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\n3. add_str((11, 14, 12, 1, 4) , \"JH\") should return [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def add_str(a, b):\n    c = []\n    for i in range(len(a)):\n        if i != len(a) - 1:\n            c.append(str(a[i]) + b)\n        else:\n            c.append(str(a[i]))\n    return c"
          }
        }
      ],
      "usage": {
        "total_tokens": 314,
        "prompt_tokens": 268,
        "completion_tokens": 53
      }
    },
    "timestamp": 1752168596.7762911
  },
  {
    "mbpp_id": 514,
    "problem": {
      "task_id": 514,
      "text": "Write a function to find the summation of tuple elements in the given tuple list.",
      "code": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) ",
      "test_list": [
        "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
        "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
        "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the summation of tuple elements in the given tuple list.\n\nTask ID: 514\n\nExpected behavior (test cases):\n1. sum_elements((7, 8, 9, 1, 10, 7)) should return 42\n2. sum_elements((1, 2, 3, 4, 5, 6)) should return 21\n3. sum_elements((11, 12 ,13 ,45, 14)) should return 95\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_elements(test_tuple_list):\n    total_sum = 0\n    for each_element in test_tuple_list:\n        total_sum += each_element\n    return total_sum"
          }
        }
      ],
      "usage": {
        "total_tokens": 204,
        "prompt_tokens": 177,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752168599.3530283
  },
  {
    "mbpp_id": 515,
    "problem": {
      "task_id": 515,
      "text": "Write a function to check if there is a subset with sum divisible by m.",
      "code": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]",
      "test_list": [
        "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
        "assert modular_sum([1, 7], 2, 5) == False",
        "assert modular_sum([1, 6], 2, 5) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if there is a subset with sum divisible by m.\n\nTask ID: 515\n\nExpected behavior (test cases):\n1. modular_sum([3, 1, 7, 5], 4, 6) should return True\n2. modular_sum([1, 7], 2, 5) should return False\n3. modular_sum([1, 6], 2, 5) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def modular_sum(A, mod, target):\n    # Initialize a list to keep track of sums modulo 'mod'\n    s = [0]\n    \n    for a in A:\n        temp_s = []\n        \n        # Update all previous sums modulo 'mod' by adding current element and taking modulo 'mod'\n        for x in s:\n            temp_s.append((x + a) % mod)\n        \n        # Add the new sum calculated above to our final list of sums\n        s.extend(temp_s)\n    \n    # Check if we have found any subarray where the sum is equal to `target`\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] + s[j] == target * mod:\n                return True\n    \n    return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 314,
        "prompt_tokens": 157,
        "completion_tokens": 164
      }
    },
    "timestamp": 1752168609.594868
  },
  {
    "mbpp_id": 516,
    "problem": {
      "task_id": 516,
      "text": "Write a function to sort a list of elements using radix sort.",
      "code": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums",
      "test_list": [
        "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
        "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
        "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a list of elements using radix sort.\n\nTask ID: 516\n\nExpected behavior (test cases):\n1. radix_sort([15, 79, 25, 68, 37]) should return [15, 25, 37, 68, 79]\n2. radix_sort([9, 11, 8, 7, 3, 2]) should return [2, 3, 7, 8, 9, 11]\n3. radix_sort([36, 12, 24, 26, 29]) should return [12, 24, 26, 29, 36]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def radix_sort(lst):\n    from collections import defaultdict\n    \n    # Initialize buckets for each digit place\n    buckets = [[] for _ in range(10)]\n    \n    for num in lst:\n        # Determine the max number's length and use it as the digit index limit\n        digit_index_limit = len(str(max(num, key=int)))\n        \n        # Place numbers into their respective buckets based on current digit\n        for idx in range(digit_index_limit):\n            digit = int(str(num)[idx])\n            buckets[digit].append(num)\n            \n    # Collect results back from buckets in sorted order\n    result = []\n    for bucket in buckets:\n        result.extend(bucket)\n    \n    return result\n\n# Test cases to verify the correctness of the solution\nassert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79], \"Test case 1 failed\"\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11], \"Test case 2 failed\"\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36], \"Test case 3 failed\""
          }
        }
      ],
      "usage": {
        "total_tokens": 521,
        "prompt_tokens": 224,
        "completion_tokens": 304
      }
    },
    "timestamp": 1752168627.8202212
  },
  {
    "mbpp_id": 517,
    "problem": {
      "task_id": 517,
      "text": "Write a python function to find the largest postive number from the given list.",
      "code": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max",
      "test_list": [
        "assert largest_pos([1,2,3,4,-1]) == 4",
        "assert largest_pos([0,1,2,-5,-1,6]) == 6",
        "assert largest_pos([0,0,1,0]) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the largest postive number from the given list.\n\nTask ID: 517\n\nExpected behavior (test cases):\n1. largest_pos([1,2,3,4,-1]) should return 4\n2. largest_pos([0,1,2,-5,-1,6]) should return 6\n3. largest_pos([0,0,1,0]) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def largest_pos(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num"
          }
        }
      ],
      "usage": {
        "total_tokens": 180,
        "prompt_tokens": 151,
        "completion_tokens": 36
      }
    },
    "timestamp": 1752168630.5395107
  },
  {
    "mbpp_id": 518,
    "problem": {
      "task_id": 518,
      "text": "Write a function to find the square root of a perfect number.",
      "code": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root ",
      "test_list": [
        "assert sqrt_root(4)==2",
        "assert sqrt_root(16)==4",
        "assert sqrt_root(400)==20"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the square root of a perfect number.\n\nTask ID: 518\n\nExpected behavior (test cases):\n1. sqrt_root(4)==2\n2. sqrt_root(16)==4\n3. sqrt_root(400)==20\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sqrt_root(number):\n    import math\n    return int(math.sqrt(number))"
          }
        }
      ],
      "usage": {
        "total_tokens": 128,
        "prompt_tokens": 119,
        "completion_tokens": 16
      }
    },
    "timestamp": 1752168632.045857
  },
  {
    "mbpp_id": 519,
    "problem": {
      "task_id": 519,
      "text": "Write a function to calculate volume of a tetrahedron.",
      "code": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)",
      "test_list": [
        "assert volume_tetrahedron(10)==117.85",
        "assert volume_tetrahedron(15)==397.75",
        "assert volume_tetrahedron(20)==942.81"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate volume of a tetrahedron.\n\nTask ID: 519\n\nExpected behavior (test cases):\n1. volume_tetrahedron(10)==117.85\n2. volume_tetrahedron(15)==397.75\n3. volume_tetrahedron(20)==942.81\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def volume_tetrahedron(sidelength):\n    # Calculate and return the volume of the tetrahedron.\n    return round((sidelength**3 * sqrt(2)) / 12, 3)"
          }
        }
      ],
      "usage": {
        "total_tokens": 185,
        "prompt_tokens": 145,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752168635.3583753
  },
  {
    "mbpp_id": 520,
    "problem": {
      "task_id": 520,
      "text": "Write a function to find the lcm of the given array elements.",
      "code": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm ",
      "test_list": [
        "assert get_lcm([2, 7, 3, 9, 4]) == 252",
        "assert get_lcm([1, 2, 8, 3]) == 24",
        "assert get_lcm([3, 8, 4, 10, 5]) == 120"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the lcm of the given array elements.\n\nTask ID: 520\n\nExpected behavior (test cases):\n1. get_lcm([2, 7, 3, 9, 4]) should return 252\n2. get_lcm([1, 2, 8, 3]) should return 24\n3. get_lcm([3, 8, 4, 10, 5]) should return 120\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def gcd(a, b): \n    while(b): \n        t = b \n        b = a % b \n        a = t \n    return a \n\ndef get_lcm(lis): \n    if len(lis) == 0:\n        return None\n    elif len(lis) == 1:\n        return lis[0]\n    \n    def lcm(x, y): \n        # calculate x*y / gcd(x,y)\n        return (x * y) // gcd(x, y)\n\n    result = lis[0] \n    for i in range(1, len(lis)):  \n        result = lcm(result, lis[i])\n        \n    return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 296,
        "prompt_tokens": 166,
        "completion_tokens": 137
      }
    },
    "timestamp": 1752168643.8807478
  },
  {
    "mbpp_id": 521,
    "problem": {
      "task_id": 521,
      "text": "Write a function to print check if the triangle is scalene or not.",
      "code": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False",
      "test_list": [
        "assert check_isosceles(6,8,12)==True",
        "assert check_isosceles(6,6,12)==False",
        "assert check_isosceles(6,15,20)==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to print check if the triangle is scalene or not.\n\nTask ID: 521\n\nExpected behavior (test cases):\n1. check_isosceles(6,8,12)==True\n2. check_isosceles(6,6,12)==False\n3. check_isosceles(6,15,20)==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_isosceles(a, b, c):\n    # Check if all sides of the triangle have different lengths\n    return len({a, b, c}) == 3"
          }
        }
      ],
      "usage": {
        "total_tokens": 173,
        "prompt_tokens": 142,
        "completion_tokens": 38
      }
    },
    "timestamp": 1752168646.6646159
  },
  {
    "mbpp_id": 522,
    "problem": {
      "task_id": 522,
      "text": "Write a function to find the longest bitonic subsequence for the given array.",
      "code": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum",
      "test_list": [
        "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
        "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
        "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the longest bitonic subsequence for the given array.\n\nTask ID: 522\n\nExpected behavior (test cases):\n1. lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) should return 7\n2. lbs([1, 11, 2, 10, 4, 5, 2, 1]) should return 6\n3. lbs([80, 60, 30, 40, 20, 10]) should return 5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def lbs(arr):\n    dp = [1]*len(arr)\n    leftMax = arr[0]\n    \n    # Finding the length of the longest increasing subsequence at each index from right to left\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] > leftMax:\n            leftMax = arr[i]\n        dp[i] += leftMax\n        \n    ans = 0\n    rightMax = arr[-1]\n\n    # Finding the maximum value of sum(i,j) such that there exists some k where arr[k] <= arr[i], arr[j] and dp[i]+dp[j] is maximized.\n    for j in reversed(range(1, len(dp))):\n        if arr[j] > rightMax:\n            rightMax = arr[j]\n        ans = max(ans, dp[j-1]+rightMax)\n\n    return ans"
          }
        }
      ],
      "usage": {
        "total_tokens": 391,
        "prompt_tokens": 219,
        "completion_tokens": 179
      }
    },
    "timestamp": 1752168657.590512
  },
  {
    "mbpp_id": 523,
    "problem": {
      "task_id": 523,
      "text": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
      "code": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  ",
      "test_list": [
        "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
        "assert check_string('123python')==['String must have 1 upper case character.']",
        "assert check_string('123Python')==['Valid string.']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\nTask ID: 523\n\nExpected behavior (test cases):\n1. check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\n2. check_string('123python')==['String must have 1 upper case character.']\n3. check_string('123Python')==['Valid string.']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_string(s):\r\n    # Define the conditions for each type of character required in the string\r\n    str_char_check = {'UPPER': s.isupper(), 'LOWER': s.islower(), 'NUMBER': s.isdigit()}\r\n    char_count_check = {'LENGTH': len(s) >= 8}\r\n\r\n    # Convert the conditions into boolean values and store them as lists\r\n    condition_1 = [False] * 4\r\n    condition_1[0 if not str_char_check.get('UPPER') else 1] = True\r\n\r\n    condition_2 = [False] * 4\r\n    condition_2[0 if not str_char_check.get('LOWER') else 1] = True\r\n\r\n    condition_3 = [False] * 4\r\n    condition_3[0 if not str_char_check.get('NUMBER') else 1] = True\r\n\r\n    condition_4 = [False] * 4\r\n    condition_4[0 if not len(str_char_check.get('LENGTH')) == 8 else 1] = True\r\n\r\n    # Combine all conditions into one list with False at positions corresponding to invalid characters\r\n    result = [False] + sum([[condition[i]] * (not str_char_check.get(f'CHAR{i+1}'))) for i in range(4)], [])\r\n\r\n    return ['\\n'.join([f'String {i+1} must satisfy the above criteria.' if item is False else f'String {i+1} satisfies the above criteria.' for i, item in enumerate(result)])]"
          }
        }
      ],
      "usage": {
        "total_tokens": 486,
        "prompt_tokens": 174,
        "completion_tokens": 319
      }
    },
    "timestamp": 1752168676.7006593
  },
  {
    "mbpp_id": 524,
    "problem": {
      "task_id": 524,
      "text": "Write a function to find the sum of maximum increasing subsequence of the given array.",
      "code": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max",
      "test_list": [
        "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
        "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
        "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the sum of maximum increasing subsequence of the given array.\n\nTask ID: 524\n\nExpected behavior (test cases):\n1. max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) should return 106\n2. max_sum_increasing_subsequence([3, 4, 5, 10], 4) should return 22\n3. max_sum_increasing_subsequence([10, 5, 4, 3], 4) should return 10\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_sum_increasing_subsequence(arr, n):\n    # Your implementation here\n    pass"
          }
        }
      ],
      "usage": {
        "total_tokens": 207,
        "prompt_tokens": 195,
        "completion_tokens": 19
      }
    },
    "timestamp": 1752168678.3734188
  },
  {
    "mbpp_id": 525,
    "problem": {
      "task_id": 525,
      "text": "Write a python function to check whether two given lines are parallel or not.",
      "code": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]",
      "test_list": [
        "assert parallel_lines([2,3,4], [2,3,8]) == True",
        "assert parallel_lines([2,3,4], [4,-3,8]) == False",
        "assert parallel_lines([3,3],[5,5]) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether two given lines are parallel or not.\n\nTask ID: 525\n\nExpected behavior (test cases):\n1. parallel_lines([2,3,4], [2,3,8]) should return True\n2. parallel_lines([2,3,4], [4,-3,8]) should return False\n3. parallel_lines([3,3],[5,5]) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def parallel_lines(l1, l2):\n    if l1[0] * l2[1] - l1[1] * l2[0] == 0:\n        return True\n    else:\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 192,
        "prompt_tokens": 151,
        "completion_tokens": 48
      }
    },
    "timestamp": 1752168681.7379787
  },
  {
    "mbpp_id": 526,
    "problem": {
      "task_id": 526,
      "text": "Write a python function to capitalize first and last letters of each word of a given string.",
      "code": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  ",
      "test_list": [
        "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
        "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
        "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to capitalize first and last letters of each word of a given string.\n\nTask ID: 526\n\nExpected behavior (test cases):\n1. capitalize_first_last_letters(\"python\") should return \"PythoN\"\n2. capitalize_first_last_letters(\"bigdata\") should return \"BigdatA\"\n3. capitalize_first_last_letters(\"Hadoop\") should return \"HadooP\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def capitalize_first_last_letters(s):\n    result = ''\n    for i in s.split():\n        temp = list(i)\n        if len(temp) > 1:\n            temp[0] = chr(ord(temp[0]) ^ ord('a'))\n            temp[-1] = chr(ord(temp[-1]) ^ ord('z'))\n        result += ''.join(temp) + ' '\n    return result.strip()"
          }
        }
      ],
      "usage": {
        "total_tokens": 219,
        "prompt_tokens": 144,
        "completion_tokens": 82
      }
    },
    "timestamp": 1752168687.0822678
  },
  {
    "mbpp_id": 527,
    "problem": {
      "task_id": 527,
      "text": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
      "code": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count",
      "test_list": [
        "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
        "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
        "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find all pairs in an integer array whose sum is equal to a given number.\n\nTask ID: 527\n\nExpected behavior (test cases):\n1. get_pairs_count([1, 5, 7, -1, 5], 5, 6) should return 3\n2. get_pairs_count([1, 5, 7, -1], 4, 6) should return 2\n3. get_pairs_count([1, 1, 1, 1], 4, 2) should return 6\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_pairs_count(arr, target_sum, max_val):\n    result = 0\n    seen = {}\n    \n    for num in arr:\n        complement = target_sum - num\n        \n        if complement not in seen:\n            seen[num] = True\n            \n        elif complement < max_val and num != complement:\n            result += 1\n    \n    return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 246,
        "prompt_tokens": 182,
        "completion_tokens": 71
      }
    },
    "timestamp": 1752168691.7785616
  },
  {
    "mbpp_id": 528,
    "problem": {
      "task_id": 528,
      "text": "Write a function to find the list of lists with minimum length.",
      "code": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     ",
      "test_list": [
        "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
        "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
        "assert min_length([[5], [15,20,25]])==(1, [5])"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the list of lists with minimum length.\n\nTask ID: 528\n\nExpected behavior (test cases):\n1. min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n2. min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\n3. min_length([[5], [15,20,25]])==(1, [5])\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def min_length(lst):\n    # Your solution here\n    \n    return result_list, result_index"
          }
        }
      ],
      "usage": {
        "total_tokens": 200,
        "prompt_tokens": 189,
        "completion_tokens": 18
      }
    },
    "timestamp": 1752168693.409881
  },
  {
    "mbpp_id": 529,
    "problem": {
      "task_id": 529,
      "text": "Write a function to find the nth jacobsthal-lucas number.",
      "code": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]",
      "test_list": [
        "assert jacobsthal_lucas(5) == 31",
        "assert jacobsthal_lucas(2) == 5",
        "assert jacobsthal_lucas(4) == 17"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the nth jacobsthal-lucas number.\n\nTask ID: 529\n\nExpected behavior (test cases):\n1. jacobsthal_lucas(5) should return 31\n2. jacobsthal_lucas(2) should return 5\n3. jacobsthal_lucas(4) should return 17\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        result = [2, 1]\n        for i in range(2, n+1):\n            next_val = result[i-1] + result[i-2]*2\n            result.append(next_val)\n        return result[n]\n\n# Test cases to verify the correctness of the solution.\nprint(jacobsthal_lucas(5))  # Expected output: 31\nprint(jacobsthal_lucas(2))  # Expected output: 5\nprint(jacobsthal_lucas(4))  # Expected output: 17"
          }
        }
      ],
      "usage": {
        "total_tokens": 284,
        "prompt_tokens": 140,
        "completion_tokens": 151
      }
    },
    "timestamp": 1752168702.7308586
  },
  {
    "mbpp_id": 530,
    "problem": {
      "task_id": 530,
      "text": "Write a function to find the ration of negative numbers in an array of integers.",
      "code": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
      "test_list": [
        "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
        "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
        "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the ration of negative numbers in an array of integers.\n\nTask ID: 530\n\nExpected behavior (test cases):\n1. negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\n2. negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\n3. negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def negative_count(arr):\n    return sum(num < 0 for num in arr) / len(arr)"
          }
        }
      ],
      "usage": {
        "total_tokens": 241,
        "prompt_tokens": 227,
        "completion_tokens": 21
      }
    },
    "timestamp": 1752168704.5426261
  },
  {
    "mbpp_id": 531,
    "problem": {
      "task_id": 531,
      "text": "Write a function to find minimum number of coins that make a given value.",
      "code": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res ",
      "test_list": [
        "assert min_coins([9, 6, 5, 1] ,4,11)==2",
        "assert min_coins([4,5,6,7,8,9],6,9)==1",
        "assert min_coins([1, 2, 3],3,4)==2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find minimum number of coins that make a given value.\n\nTask ID: 531\n\nExpected behavior (test cases):\n1. min_coins([9, 6, 5, 1] ,4,11)==2\n2. min_coins([4,5,6,7,8,9],6,9)==1\n3. min_coins([1, 2, 3],3,4)==2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def min_coins(coins, amount, n): \n    dp = [[0 for x in range(amount + 1)] for x in range(n + 1)]\n  \n    # Iterate over each coin and then iterate over possible values from coin's worth till amount\n    for i in range(n + 1): \n        for j in range(amount + 1): \n  \n            # If there is no coin to use or if it exceeds the current value\n            if i == 0 or j == 0: \n                dp[i][j] = float('inf') \n\n            # Case when we don't pick the ith coin\n            elif coins[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n                \n            else:\n                dp[i][j] = min(dp[i-1][j], 1+dp[i][j-coins[i-1]])\n    \n    return -dp[n][amount] if dp[n][amount] != float('inf') else -1"
          }
        }
      ],
      "usage": {
        "total_tokens": 362,
        "prompt_tokens": 159,
        "completion_tokens": 210
      }
    },
    "timestamp": 1752168717.294205
  },
  {
    "mbpp_id": 532,
    "problem": {
      "task_id": 532,
      "text": "Write a function to check if the two given strings are permutations of each other.",
      "code": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True",
      "test_list": [
        "assert check_permutation(\"abc\", \"cba\") == True",
        "assert check_permutation(\"test\", \"ttew\") == False",
        "assert check_permutation(\"xxyz\", \"yxzx\") == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the two given strings are permutations of each other.\n\nTask ID: 532\n\nExpected behavior (test cases):\n1. check_permutation(\"abc\", \"cba\") should return True\n2. check_permutation(\"test\", \"ttew\") should return False\n3. check_permutation(\"xxyz\", \"yxzx\") should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_permutation(str1, str2):\n    # Check if both strings have the same length and characters in order\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 178,
        "prompt_tokens": 139,
        "completion_tokens": 46
      }
    },
    "timestamp": 1752168720.5195518
  },
  {
    "mbpp_id": 533,
    "problem": {
      "task_id": 533,
      "text": "Write a function to remove particular data type elements from the given tuple.",
      "code": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) ",
      "test_list": [
        "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
        "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
        "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove particular data type elements from the given tuple.\n\nTask ID: 533\n\nExpected behavior (test cases):\n1. remove_datatype((4, 5, 4, 7.7, 1.2), int) should return [7.7, 1.2]\n2. remove_datatype((7, 8, 9, \"SR\"), str) should return [7, 8, 9]\n3. remove_datatype((7, 1.1, 2, 2.2), float) should return [7, 2]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_datatype(test_tuple, datatype):\n    # Remove all occurrences of the specified type in the list and return the modified tuple.\n    filtered_list = []\n    for item in test_tuple:\n        if not isinstance(item, datatype):\n            filtered_list.append(item)\n    return tuple(filtered_list)\n\n# Test cases to verify the correctness of the function.\nprint(remove_datatype((4, 5, 4, 7.7, 1.2), int))   # Expected output: (7.7, 1.2)\nprint(remove_datatype((7, 8, 9, 'SR'), str))         # Expected output: (7, 8, 9)\nprint(remove_datatype((7, 1.1, 2, 2.2), float))      # Expected output: (7, 2)"
          }
        }
      ],
      "usage": {
        "total_tokens": 356,
        "prompt_tokens": 188,
        "completion_tokens": 175
      }
    },
    "timestamp": 1752168731.1446326
  },
  {
    "mbpp_id": 534,
    "problem": {
      "task_id": 534,
      "text": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
      "code": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)",
      "test_list": [
        "assert search_literal('python','python programming language')==(0,6)",
        "assert search_literal('programming','python programming language')==(7,18)",
        "assert search_literal('language','python programming language')==(19,27)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\nTask ID: 534\n\nExpected behavior (test cases):\n1. search_literal('python','python programming language')==(0,6)\n2. search_literal('programming','python programming language')==(7,18)\n3. search_literal('language','python programming language')==(19,27)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def search_literal(pattern,sentence):\r\n    position = sentence.find(pattern)\r\n    return(position,position+len(pattern)-1)"
          }
        }
      ],
      "usage": {
        "total_tokens": 168,
        "prompt_tokens": 151,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752168733.091347
  },
  {
    "mbpp_id": 535,
    "problem": {
      "task_id": 535,
      "text": "Write a function to find the top or bottom surface area of a cylinder.",
      "code": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea",
      "test_list": [
        "assert topbottom_surfacearea(10)==314.15000000000003",
        "assert topbottom_surfacearea(5)==78.53750000000001",
        "assert topbottom_surfacearea(4)==50.264"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the top or bottom surface area of a cylinder.\n\nTask ID: 535\n\nExpected behavior (test cases):\n1. topbottom_surfacearea(10)==314.15000000000003\n2. topbottom_surfacearea(5)==78.53750000000001\n3. topbottom_surfacearea(4)==50.264\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def topbottom_surfacearea(radius):\n    PI = 3.14159\n    height = radius * 2\n    return (PI * radius**2 + height * radius) * 2"
          }
        }
      ],
      "usage": {
        "total_tokens": 198,
        "prompt_tokens": 162,
        "completion_tokens": 43
      }
    },
    "timestamp": 1752168736.157918
  },
  {
    "mbpp_id": 536,
    "problem": {
      "task_id": 536,
      "text": "Write a function to select the nth items of a list.",
      "code": "def nth_items(list,n):\r\n return list[::n]",
      "test_list": [
        "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
        "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
        "assert nth_items([14,16,19,15,17],4)==[14,17]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to select the nth items of a list.\n\nTask ID: 536\n\nExpected behavior (test cases):\n1. nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \n2. nth_items([10,15,19,17,16,18],3)==[10,17] \n3. nth_items([14,16,19,15,17],4)==[14,17]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def nth_items(input_list,nth_item_index):\r\n    # Your solution goes here\r\n    return input_list[nth_item_index::n]"
          }
        }
      ],
      "usage": {
        "total_tokens": 219,
        "prompt_tokens": 198,
        "completion_tokens": 28
      }
    },
    "timestamp": 1752168738.3568556
  },
  {
    "mbpp_id": 537,
    "problem": {
      "task_id": 537,
      "text": "Write a python function to find the first repeated word in a given string.",
      "code": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'",
      "test_list": [
        "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
        "assert first_repeated_word(\"ab ca bc\") == 'None'",
        "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the first repeated word in a given string.\n\nTask ID: 537\n\nExpected behavior (test cases):\n1. first_repeated_word(\"ab ca bc ab\") should return \"ab\"\n2. first_repeated_word(\"ab ca bc\") should return 'None'\n3. first_repeated_word(\"ab ca bc ca ab bc\") should return \"ca\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def first_repeated_word(s):\n    words = s.split()\n    for i in range(len(words)):\n        if words[i] == words[(i + 1) % len(words)]:\n            return words[i]\n    return None"
          }
        }
      ],
      "usage": {
        "total_tokens": 182,
        "prompt_tokens": 142,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752168741.6337564
  },
  {
    "mbpp_id": 538,
    "problem": {
      "task_id": 538,
      "text": "Write a python function to convert a given string list to a tuple.",
      "code": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result",
      "test_list": [
        "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
        "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
        "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to convert a given string list to a tuple.\n\nTask ID: 538\n\nExpected behavior (test cases):\n1. string_list_to_tuple((\"python 3.0\")) should return ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n2. string_list_to_tuple((\"bigdata\")) should return ('b', 'i', 'g', 'd', 'a', 't', 'a')\n3. string_list_to_tuple((\"language\")) should return ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def string_list_to_tuple(string_list):\n    return tuple([x for x in string_list])"
          }
        }
      ],
      "usage": {
        "total_tokens": 208,
        "prompt_tokens": 196,
        "completion_tokens": 19
      }
    },
    "timestamp": 1752168743.2859964
  },
  {
    "mbpp_id": 539,
    "problem": {
      "task_id": 539,
      "text": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
      "code": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result",
      "test_list": [
        "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
        "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
        "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\nTask ID: 539\n\nExpected behavior (test cases):\n1. basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n2. basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n3. basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def basesnum_corresponding_num(bases, numbers):\n    return list(map(lambda x, y: int(str(x) + str(y)), bases, numbers))"
          }
        }
      ],
      "usage": {
        "total_tokens": 776,
        "prompt_tokens": 750,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752168745.7486234
  },
  {
    "mbpp_id": 540,
    "problem": {
      "task_id": 540,
      "text": "Write a python function to find the difference between highest and least frequencies in a given array.",
      "code": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count ",
      "test_list": [
        "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
        "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
        "assert find_Diff([1,2,1,2],4) == 0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the difference between highest and least frequencies in a given array.\n\nTask ID: 540\n\nExpected behavior (test cases):\n1. find_Diff([1,1,2,2,7,8,4,5,1,4],10) should return 2\n2. find_Diff([1,7,9,2,3,3,1,3,3],9) should return 3\n3. find_Diff([1,2,1,2],4) should return 0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Diff(arr, maxn):\n    freq = [0] * (maxn + 1)\n    for num in arr:\n        freq[num] += 1\n    \n    minfreq = min(freq)\n    diff = maxfreq - minfreq\n    return diff"
          }
        }
      ],
      "usage": {
        "total_tokens": 228,
        "prompt_tokens": 179,
        "completion_tokens": 56
      }
    },
    "timestamp": 1752168749.5748322
  },
  {
    "mbpp_id": 541,
    "problem": {
      "task_id": 541,
      "text": "Write a function to find if the given number is abundant or not.",
      "code": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False",
      "test_list": [
        "assert check_abundant(12) == True",
        "assert check_abundant(15) == False",
        "assert check_abundant(18) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find if the given number is abundant or not.\n\nTask ID: 541\n\nExpected behavior (test cases):\n1. check_abundant(12) should return True\n2. check_abundant(15) should return False\n3. check_abundant(18) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_abundant(n):\n    total = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            total += i\n    return total > n"
          }
        }
      ],
      "usage": {
        "total_tokens": 172,
        "prompt_tokens": 131,
        "completion_tokens": 48
      }
    },
    "timestamp": 1752168752.9178278
  },
  {
    "mbpp_id": 542,
    "problem": {
      "task_id": 542,
      "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
      "code": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))",
      "test_list": [
        "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
        "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
        "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\nTask ID: 542\n\nExpected behavior (test cases):\n1. fill_spaces('Boult Curve Wireless Neckband') should return 'Boult:Curve:Wireless:Neckband'\n2. fill_spaces('Stereo Sound Sweatproof') should return 'Stereo:Sound:Sweatproof'\n3. fill_spaces('Probass Curve Audio') should return 'Probass:Curve:Audio'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def fill_spaces(s):\n    # Replace spaces, commas, and dots with colons\n    modified_string = s.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n    return modified_string"
          }
        }
      ],
      "usage": {
        "total_tokens": 205,
        "prompt_tokens": 172,
        "completion_tokens": 40
      }
    },
    "timestamp": 1752168755.7842646
  },
  {
    "mbpp_id": 543,
    "problem": {
      "task_id": 543,
      "text": "Write a function to add two numbers and print number of digits of sum.",
      "code": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count",
      "test_list": [
        "assert count_digits(9875,10)==(4)",
        "assert count_digits(98759853034,100)==(11)",
        "assert count_digits(1234567,500)==(7)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to add two numbers and print number of digits of sum.\n\nTask ID: 543\n\nExpected behavior (test cases):\n1. count_digits(9875,10)==(4)\n2. count_digits(98759853034,100)==(11)\n3. count_digits(1234567,500)==(7)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_digits(num_1, num_2):\n    # Convert both integers into strings for easier digit counting.\n    str_num_1 = str(abs(num_1))\n    str_num_2 = str(abs(num_2))\n\n    # Initialize counter for digits in the sum.\n    total_digits = len(str_num_1) + len(str_num_2)\n\n    return total_digits"
          }
        }
      ],
      "usage": {
        "total_tokens": 222,
        "prompt_tokens": 151,
        "completion_tokens": 78
      }
    },
    "timestamp": 1752168760.9064076
  },
  {
    "mbpp_id": 544,
    "problem": {
      "task_id": 544,
      "text": "Write a function to flatten the tuple list to a string.",
      "code": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) ",
      "test_list": [
        "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
        "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
        "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to flatten the tuple list to a string.\n\nTask ID: 544\n\nExpected behavior (test cases):\n1. flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) should return '1 4 6 5 8 2 9 1 10'\n2. flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) should return '2 3 4 6 9 3 2 2 11'\n3. flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) should return '14 21 9 24 19 12 29 23 17'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def flatten_tuple(tup):\n    res = ''\n    for i in tup:\n        for j in i:\n            if len(res) == 0:\n                res += str(j)\n            else:\n                res += ' ' + str(j)\n    return res\n\nprint(flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')])) # '1 4 6 5 8 2 9 1 10'\nprint(flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')])) # '2 3 4 6 9 3 2 2 11'\nprint(flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')])) # '14 21 9 24 19 12 29 23 17'"
          }
        }
      ],
      "usage": {
        "total_tokens": 488,
        "prompt_tokens": 266,
        "completion_tokens": 229
      }
    },
    "timestamp": 1752168774.97186
  },
  {
    "mbpp_id": 545,
    "problem": {
      "task_id": 545,
      "text": "Write a python function to toggle only first and last bits of a given number.",
      "code": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) ",
      "test_list": [
        "assert toggle_F_and_L_bits(10) == 3",
        "assert toggle_F_and_L_bits(15) == 6",
        "assert toggle_F_and_L_bits(20) == 5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to toggle only first and last bits of a given number.\n\nTask ID: 545\n\nExpected behavior (test cases):\n1. toggle_F_and_L_bits(10) should return 3\n2. toggle_F_and_L_bits(15) should return 6\n3. toggle_F_and_L_bits(20) should return 5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def toggle_F_and_L_bits(num):\n    result = num ^ ((num >> 1) | ((~num + 1) & 1))\n    return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 166,
        "prompt_tokens": 139,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752168777.5252948
  },
  {
    "mbpp_id": 546,
    "problem": {
      "task_id": 546,
      "text": "Write a function to find the last occurrence of a character in a string.",
      "code": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1",
      "test_list": [
        "assert last_occurence_char(\"hello world\",'l')==10",
        "assert last_occurence_char(\"language\",'g')==7",
        "assert last_occurence_char(\"little\",'y')==None"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the last occurrence of a character in a string.\n\nTask ID: 546\n\nExpected behavior (test cases):\n1. last_occurence_char(\"hello world\",'l')==10\n2. last_occurence_char(\"language\",'g')==7\n3. last_occurence_char(\"little\",'y')==None\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def last_occurence_char(input_str, char):\n    index = -1\n    for i in range(len(input_str)):\n        if input_str[i] == char:\n            index = i\n    return index"
          }
        }
      ],
      "usage": {
        "total_tokens": 166,
        "prompt_tokens": 131,
        "completion_tokens": 42
      }
    },
    "timestamp": 1752168780.5580368
  },
  {
    "mbpp_id": 547,
    "problem": {
      "task_id": 547,
      "text": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
      "code": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum",
      "test_list": [
        "assert Total_Hamming_Distance(4) == 7",
        "assert Total_Hamming_Distance(2) == 3",
        "assert Total_Hamming_Distance(5) == 8"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\nTask ID: 547\n\nExpected behavior (test cases):\n1. Total_Hamming_Distance(4) should return 7\n2. Total_Hamming_Distance(2) should return 3\n3. Total_Hamming_Distance(5) should return 8\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def total_hamming_distance(n):\n    # Initialize the total Hamming distance and calculate the number of bits needed for representation\n    t = n.bit_length()\n    \n    # Calculate the sum of hamming distances using bitwise operations\n    result = 0\n    \n    for i in range(t - 1, -1, -1):\n        half_bit = 2 ** i\n        \n        ones = count_ones(n >> i)\n        \n        zeros = n & ~half_bit\n        \n        ones_zeros_sum = ones * zeros\n        \n        result += ones * half_bit + ones_zeros_sum\n        \n        if ones >= half_bit:\n            break\n    \n    return result\n\n\ndef count_ones(num):\n    count = 0\n    while num:\n        count += num % 2\n        num >>= 1\n    return count\n\n\n# Test cases to verify the correctness of the generated function\nprint(total_hamming_distance(4))  # Expected output: 7\nprint(total_hamming_distance(2))  # Expected output: 3\nprint(total_hamming_distance(5))  # Expected output: 8"
          }
        }
      ],
      "usage": {
        "total_tokens": 366,
        "prompt_tokens": 144,
        "completion_tokens": 229
      }
    },
    "timestamp": 1752168794.3982313
  },
  {
    "mbpp_id": 548,
    "problem": {
      "task_id": 548,
      "text": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
      "code": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum",
      "test_list": [
        "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
        "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
        "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the length of the longest increasing subsequence of the given sequence.\n\nTask ID: 548\n\nExpected behavior (test cases):\n1. longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) should return 5\n2. longest_increasing_subsequence([3, 10, 2, 1, 20]) should return 3\n3. longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) should return 4 \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def longest_increasing_subsequence(nums):\n    if not nums:\n        return 0\n    \n    dp = [1] * len(nums)\n    \n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return max(dp)"
          }
        }
      ],
      "usage": {
        "total_tokens": 267,
        "prompt_tokens": 199,
        "completion_tokens": 75
      }
    },
    "timestamp": 1752168799.2766836
  },
  {
    "mbpp_id": 549,
    "problem": {
      "task_id": 549,
      "text": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
      "code": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm ",
      "test_list": [
        "assert odd_Num_Sum(1) == 1",
        "assert odd_Num_Sum(2) == 244",
        "assert odd_Num_Sum(3) == 3369"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of fifth power of first n odd natural numbers.\n\nTask ID: 549\n\nExpected behavior (test cases):\n1. odd_Num_Sum(1) should return 1\n2. odd_Num_Sum(2) should return 244\n3. odd_Num_Sum(3) should return 3369\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(1, n+1):\n        total += ((2*i-1)**5)\n    return total"
          }
        }
      ],
      "usage": {
        "total_tokens": 172,
        "prompt_tokens": 140,
        "completion_tokens": 39
      }
    },
    "timestamp": 1752168802.112834
  },
  {
    "mbpp_id": 550,
    "problem": {
      "task_id": 550,
      "text": "Write a python function to find the maximum element in a sorted and rotated array.",
      "code": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) ",
      "test_list": [
        "assert find_Max([2,3,5,6,9],0,4) == 9",
        "assert find_Max([3,4,5,2,1],0,4) == 5",
        "assert find_Max([1,2,3],0,2) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the maximum element in a sorted and rotated array.\n\nTask ID: 550\n\nExpected behavior (test cases):\n1. find_Max([2,3,5,6,9],0,4) should return 9\n2. find_Max([3,4,5,2,1],0,4) should return 5\n3. find_Max([1,2,3],0,2) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Max(Arr, left_index, right_index):\n    # Ensure we handle edge cases correctly.\n    if len(Arr) == 0:\n        return None\n    \n    mid = left_index + int((right_index - left_index)/2)\n    \n    # Base case for recursion: if there's only one element, it must be the max.\n    if right_index < left_index:\n        return Arr[mid]\n    \n    # If the middle element is greater than the last element, then minimum lies between [left_index, mid].\n    elif Arr[mid] > Arr[right_index]:\n        return find_Max(Arr, mid+1, right_index)\n    \n    # Else the rotation starts before mid as elements after mid are smaller and thus not part of min portion.\n    else:\n        return find_Max(Arr, left_index, mid)\n\n# Check function with provided data points\nassert find_Max([2,3,5,6,9], 0, 4) == 9\nassert find_Max([3,4,5,2,1], 0, 4) == 5\nassert find_Max([1,2,3], 0, 2) == 3"
          }
        }
      ],
      "usage": {
        "total_tokens": 398,
        "prompt_tokens": 159,
        "completion_tokens": 246
      }
    },
    "timestamp": 1752168816.8920584
  },
  {
    "mbpp_id": 551,
    "problem": {
      "task_id": 551,
      "text": "Write a function to extract a specified column from a given nested list.",
      "code": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result ",
      "test_list": [
        "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
        "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
        "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract a specified column from a given nested list.\n\nTask ID: 551\n\nExpected behavior (test cases):\n1. extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\n2. extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\n3. extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def extract_column(nested_list, index):\n    return [sublist[index] for sublist in nested_list]"
          }
        }
      ],
      "usage": {
        "total_tokens": 256,
        "prompt_tokens": 241,
        "completion_tokens": 22
      }
    },
    "timestamp": 1752168818.7422948
  },
  {
    "mbpp_id": 552,
    "problem": {
      "task_id": 552,
      "text": "Write a python function to check whether a given sequence is linear or not.",
      "code": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\"",
      "test_list": [
        "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
        "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
        "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether a given sequence is linear or not.\n\nTask ID: 552\n\nExpected behavior (test cases):\n1. Seq_Linear([0,2,4,6,8,10]) should return \"Linear Sequence\"\n2. Seq_Linear([1,2,3]) should return \"Linear Sequence\"\n3. Seq_Linear([1,5,2]) should return \"Non Linear Sequence\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def seq_linear(sequence):\n    # Check if all elements in the list are consecutive integers starting from 0.\n    for i in range(len(sequence) - 1):\n        if sequence[i + 1] - sequence[i] != 1:\n            return \"Non Linear Sequence\"\n    return \"Linear Sequence\""
          }
        }
      ],
      "usage": {
        "total_tokens": 208,
        "prompt_tokens": 152,
        "completion_tokens": 63
      }
    },
    "timestamp": 1752168822.9520402
  },
  {
    "mbpp_id": 553,
    "problem": {
      "task_id": 553,
      "text": "Write a function to convert the given tuple to a floating-point number.",
      "code": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) ",
      "test_list": [
        "assert tuple_to_float((4, 56)) == 4.56",
        "assert tuple_to_float((7, 256)) == 7.256",
        "assert tuple_to_float((8, 123)) == 8.123"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert the given tuple to a floating-point number.\n\nTask ID: 553\n\nExpected behavior (test cases):\n1. tuple_to_float((4, 56)) should return 4.56\n2. tuple_to_float((7, 256)) should return 7.256\n3. tuple_to_float((8, 123)) should return 8.123\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def tuple_to_float(tup):\n    # Convert each integer in the tuple to float and return their sum as a single floating point value.\n    return sum(map(float, tup))"
          }
        }
      ],
      "usage": {
        "total_tokens": 182,
        "prompt_tokens": 153,
        "completion_tokens": 36
      }
    },
    "timestamp": 1752168825.6393154
  },
  {
    "mbpp_id": 554,
    "problem": {
      "task_id": 554,
      "text": "Write a python function to find odd numbers from a mixed list.",
      "code": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li",
      "test_list": [
        "assert Split([1,2,3,4,5,6]) == [1,3,5]",
        "assert Split([10,11,12,13]) == [11,13]",
        "assert Split([7,8,9,1]) == [7,9,1]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find odd numbers from a mixed list.\n\nTask ID: 554\n\nExpected behavior (test cases):\n1. Split([1,2,3,4,5,6]) should return [1,3,5]\n2. Split([10,11,12,13]) should return [11,13]\n3. Split([7,8,9,1]) should return [7,9,1]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def split(lst):\n    even = []\n    odd = []\n    for num in lst:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return odd, even"
          }
        }
      ],
      "usage": {
        "total_tokens": 198,
        "prompt_tokens": 159,
        "completion_tokens": 46
      }
    },
    "timestamp": 1752168828.8690095
  },
  {
    "mbpp_id": 555,
    "problem": {
      "task_id": 555,
      "text": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
      "code": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  ",
      "test_list": [
        "assert difference(3) == 30",
        "assert difference(5) == 210",
        "assert difference(2) == 6"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\nTask ID: 555\n\nExpected behavior (test cases):\n1. difference(3) should return 30\n2. difference(5) should return 210\n3. difference(2) should return 6\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def difference(n):\n    sum_of_natural = (n * (n + 1)) // 2\n    cube_sum = (n * (n + 1) * ((2 * n) + 1)) // 6\n    \n    return cube_sum - sum_of_natural"
          }
        }
      ],
      "usage": {
        "total_tokens": 189,
        "prompt_tokens": 137,
        "completion_tokens": 59
      }
    },
    "timestamp": 1752168832.875315
  },
  {
    "mbpp_id": 556,
    "problem": {
      "task_id": 556,
      "text": "Write a python function to count the pairs with xor as an odd number.",
      "code": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  ",
      "test_list": [
        "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
        "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
        "assert find_Odd_Pair([1,2,3],3) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the pairs with xor as an odd number.\n\nTask ID: 556\n\nExpected behavior (test cases):\n1. find_Odd_Pair([5,4,7,2,1],5) should return 6\n2. find_Odd_Pair([7,2,8,1,0,5,11],7) should return 12\n3. find_Odd_Pair([1,2,3],3) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Odd_Pair(nums, target):\n    res = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if ((nums[i] ^ nums[j]) % 2 != 0 and abs(nums[i] - nums[j]) == target):\n                res += 1\n    return res"
          }
        }
      ],
      "usage": {
        "total_tokens": 233,
        "prompt_tokens": 167,
        "completion_tokens": 73
      }
    },
    "timestamp": 1752168837.652798
  },
  {
    "mbpp_id": 557,
    "problem": {
      "task_id": 557,
      "text": "Write a function to toggle characters case in a string.",
      "code": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1",
      "test_list": [
        "assert toggle_string(\"Python\")==(\"pYTHON\")",
        "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
        "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to toggle characters case in a string.\n\nTask ID: 557\n\nExpected behavior (test cases):\n1. toggle_string(\"Python\")==(\"pYTHON\")\n2. toggle_string(\"Pangram\")==(\"pANGRAM\")\n3. toggle_string(\"LIttLE\")==(\"liTTle\")\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def toggle_string(s):\n    return ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in s])"
          }
        }
      ],
      "usage": {
        "total_tokens": 147,
        "prompt_tokens": 127,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752168839.7776923
  },
  {
    "mbpp_id": 558,
    "problem": {
      "task_id": 558,
      "text": "Write a python function to find the digit distance between two integers.",
      "code": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))",
      "test_list": [
        "assert digit_distance_nums(1,2) == 1",
        "assert digit_distance_nums(23,56) == 6",
        "assert digit_distance_nums(123,256) == 7"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the digit distance between two integers.\n\nTask ID: 558\n\nExpected behavior (test cases):\n1. digit_distance_nums(1,2) should return 1\n2. digit_distance_nums(23,56) should return 6\n3. digit_distance_nums(123,256) should return 7\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def digit_distance_nums(num1,num2):\n    str_n1 = str(abs(num1))\n    str_n2 = str(abs(num2))\n    \n    sum_of_digits = sum([int(i) for i in str_n1]) + sum([int(i) for i in str_n2])\n    \n    return abs(sum_of_digits - num1 * num2)"
          }
        }
      ],
      "usage": {
        "total_tokens": 206,
        "prompt_tokens": 139,
        "completion_tokens": 74
      }
    },
    "timestamp": 1752168844.677453
  },
  {
    "mbpp_id": 559,
    "problem": {
      "task_id": 559,
      "text": "Write a function to find the largest sum of contiguous subarray in the given array.",
      "code": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far",
      "test_list": [
        "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
        "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
        "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the largest sum of contiguous subarray in the given array.\n\nTask ID: 559\n\nExpected behavior (test cases):\n1. max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) should return 7\n2. max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) should return 8\n3. max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) should return 10\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_sub_array_sum(nums):\n    max_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
          }
        }
      ],
      "usage": {
        "total_tokens": 253,
        "prompt_tokens": 207,
        "completion_tokens": 53
      }
    },
    "timestamp": 1752168848.3031516
  },
  {
    "mbpp_id": 560,
    "problem": {
      "task_id": 560,
      "text": "Write a function to find the union of elements of the given tuples.",
      "code": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) ",
      "test_list": [
        "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
        "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
        "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the union of elements of the given tuples.\n\nTask ID: 560\n\nExpected behavior (test cases):\n1. union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) should return (3, 4, 5, 6, 7, 10)\n2. union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) should return (1, 2, 3, 4, 5, 6)\n3. union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) should return (11, 12, 13, 14, 15, 16, 17)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def union_elements(tup1, tup2):\n    # Convert each tuple into a set for unique elements and then combine them\n    result_set = set.union(*map(set, [tup1, tup2]))\n    # Convert the combined set back into a list and return it\n    return sorted(list(result_set))"
          }
        }
      ],
      "usage": {
        "total_tokens": 311,
        "prompt_tokens": 253,
        "completion_tokens": 65
      }
    },
    "timestamp": 1752168852.6577241
  },
  {
    "mbpp_id": 561,
    "problem": {
      "task_id": 561,
      "text": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
      "code": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) ",
      "test_list": [
        "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
        "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
        "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\nTask ID: 561\n\nExpected behavior (test cases):\n1. assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) should return {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\n2. assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) should return {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\n3. assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) should return {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def assign_elements(tuples_list):\n    result = {}\n    for tup in tuples_list:\n        first, second = sorted(tup)\n        if first not in result:\n            result[first] = []\n        result[first].append(second)\n    \n    for key in list(result.keys()):\n        while len(result[key]) > 0 and len(result) < 2 * len(tuples_list):\n            temp_value = result[key].pop()\n            for value_to_check in tuples_list:\n                if temp_value in value_to_check[1:]:\n                    result[value_to_check[0]].append(temp_value)\n                    break\n    \n    return dict(filter(lambda item: len(item[1]) >= 2, result.items()))"
          }
        }
      ],
      "usage": {
        "total_tokens": 453,
        "prompt_tokens": 319,
        "completion_tokens": 141
      }
    },
    "timestamp": 1752168861.425996
  },
  {
    "mbpp_id": 562,
    "problem": {
      "task_id": 562,
      "text": "Write a python function to find the maximum length of sublist.",
      "code": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength ",
      "test_list": [
        "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
        "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
        "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the maximum length of sublist.\n\nTask ID: 562\n\nExpected behavior (test cases):\n1. Find_Max_Length([[1],[1,4],[5,6,7,8]]) should return 4\n2. Find_Max_Length([[0,1],[2,2,],[3,2,1]]) should return 3\n3. Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) should return 5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_max_length(lst):\n    max_len = 0\n    for sub_lst in lst:\n        if len(sub_lst) > max_len:\n            max_len = len(sub_lst)\n    return max_len"
          }
        }
      ],
      "usage": {
        "total_tokens": 216,
        "prompt_tokens": 181,
        "completion_tokens": 42
      }
    },
    "timestamp": 1752168864.4376256
  },
  {
    "mbpp_id": 563,
    "problem": {
      "task_id": 563,
      "text": "Write a function to extract values between quotation marks of a string.",
      "code": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))",
      "test_list": [
        "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
        "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
        "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract values between quotation marks of a string.\n\nTask ID: 563\n\nExpected behavior (test cases):\n1. extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n2. extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\n3. extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def extract_values(strng):\n    return [s.strip() for s in strng.split(\",\")]"
          }
        }
      ],
      "usage": {
        "total_tokens": 166,
        "prompt_tokens": 153,
        "completion_tokens": 20
      }
    },
    "timestamp": 1752168866.174241
  },
  {
    "mbpp_id": 564,
    "problem": {
      "task_id": 564,
      "text": "Write a python function to count unequal element pairs from the given array.",
      "code": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; ",
      "test_list": [
        "assert count_Pairs([1,2,1],3) == 2",
        "assert count_Pairs([1,1,1,1],4) == 0",
        "assert count_Pairs([1,2,3,4,5],5) == 10"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count unequal element pairs from the given array.\n\nTask ID: 564\n\nExpected behavior (test cases):\n1. count_Pairs([1,2,1],3) should return 2\n2. count_Pairs([1,1,1,1],4) should return 0\n3. count_Pairs([1,2,3,4,5],5) should return 10\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_Pairs(arr, n): \n    arr.sort()\n    count = 0\n    i = 0\n    j = len(arr)-1\n    while i < j:\n        if arr[i] != arr[j]:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] == arr[j]:\n            i += 1\n            j -= 1\n    return count"
          }
        }
      ],
      "usage": {
        "total_tokens": 236,
        "prompt_tokens": 153,
        "completion_tokens": 90
      }
    },
    "timestamp": 1752168872.046804
  },
  {
    "mbpp_id": 565,
    "problem": {
      "task_id": 565,
      "text": "Write a python function to split a string into characters.",
      "code": "def split(word): \r\n    return [char for char in word] ",
      "test_list": [
        "assert split('python') == ['p','y','t','h','o','n']",
        "assert split('Name') == ['N','a','m','e']",
        "assert split('program') == ['p','r','o','g','r','a','m']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to split a string into characters.\n\nTask ID: 565\n\nExpected behavior (test cases):\n1. split('python') should return ['p','y','t','h','o','n']\n2. split('Name') should return ['N','a','m','e']\n3. split('program') should return ['p','r','o','g','r','a','m']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def split(s):\n    # Your solution goes here\n    \n    return result.split()"
          }
        }
      ],
      "usage": {
        "total_tokens": 156,
        "prompt_tokens": 147,
        "completion_tokens": 16
      }
    },
    "timestamp": 1752168873.5370798
  },
  {
    "mbpp_id": 566,
    "problem": {
      "task_id": 566,
      "text": "Write a function to get the sum of a non-negative integer.",
      "code": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))",
      "test_list": [
        "assert sum_digits(345)==12",
        "assert sum_digits(12)==3",
        "assert sum_digits(97)==16"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to get the sum of a non-negative integer.\n\nTask ID: 566\n\nExpected behavior (test cases):\n1. sum_digits(345)==12\n2. sum_digits(12)==3\n3. sum_digits(97)==16\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_digits(n):\n    # Initialize total to 0\n    total = 0\n    \n    # Loop through each digit in n\n    for digit in str(n):\n        # Add each digit to the total\n        total += int(digit)\n    \n    return total"
          }
        }
      ],
      "usage": {
        "total_tokens": 169,
        "prompt_tokens": 121,
        "completion_tokens": 55
      }
    },
    "timestamp": 1752168877.249164
  },
  {
    "mbpp_id": 567,
    "problem": {
      "task_id": 567,
      "text": "Write a function to check whether a specified list is sorted or not.",
      "code": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result",
      "test_list": [
        "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
        "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
        "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether a specified list is sorted or not.\n\nTask ID: 567\n\nExpected behavior (test cases):\n1. issort_list([1,2,4,6,8,10,12,14,16,17])==True\n2. issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n3. issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def issort_list(lst):\n    return lst == sorted(lst)"
          }
        }
      ],
      "usage": {
        "total_tokens": 205,
        "prompt_tokens": 199,
        "completion_tokens": 13
      }
    },
    "timestamp": 1752168878.5733094
  },
  {
    "mbpp_id": 568,
    "problem": {
      "task_id": 568,
      "text": "Write a function to create a list of empty dictionaries.",
      "code": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list",
      "test_list": [
        "assert empty_list(5)==[{},{},{},{},{}]",
        "assert empty_list(6)==[{},{},{},{},{},{}]",
        "assert empty_list(7)==[{},{},{},{},{},{},{}]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to create a list of empty dictionaries.\n\nTask ID: 568\n\nExpected behavior (test cases):\n1. empty_list(5)==[{},{},{},{},{}]\n2. empty_list(6)==[{},{},{},{},{},{}]\n3. empty_list(7)==[{},{},{},{},{},{},{}]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def empty_list(n):\n    return [{} for _ in range(n)]"
          }
        }
      ],
      "usage": {
        "total_tokens": 139,
        "prompt_tokens": 131,
        "completion_tokens": 15
      }
    },
    "timestamp": 1752168879.995363
  },
  {
    "mbpp_id": 569,
    "problem": {
      "task_id": 569,
      "text": "Write a function to sort each sublist of strings in a given list of lists.",
      "code": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result",
      "test_list": [
        "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
        "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
        "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort each sublist of strings in a given list of lists.\n\nTask ID: 569\n\nExpected behavior (test cases):\n1. sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n2. sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n3. sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sort_sublists(lst):\n    # Convert all sublists to tuples for comparison and then back to lists after sorting\n    return [sorted(x) for x in lst]"
          }
        }
      ],
      "usage": {
        "total_tokens": 262,
        "prompt_tokens": 234,
        "completion_tokens": 35
      }
    },
    "timestamp": 1752168882.5995953
  },
  {
    "mbpp_id": 570,
    "problem": {
      "task_id": 570,
      "text": "Write a function to remove words from a given list of strings containing a character or string.",
      "code": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list",
      "test_list": [
        "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
        "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
        "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove words from a given list of strings containing a character or string.\n\nTask ID: 570\n\nExpected behavior (test cases):\n1. remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\n2. remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\n3. remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_words(str_list, delimiters):\n    new_str = []\n    for word in str_list:\n        flag = False\n        for char in word:\n            if char in delimiters:\n                flag = True\n                break\n        if not flag:\n            new_str.append(word)\n    return new_str\n\nresult = remove_words([\"Red color\", \"Orange#\", \"Green\", \"Orange @\", \"White\"], ['#', 'color', '@'])\nprint(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 305,
        "prompt_tokens": 218,
        "completion_tokens": 94
      }
    },
    "timestamp": 1752168888.616452
  },
  {
    "mbpp_id": 571,
    "problem": {
      "task_id": 571,
      "text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
      "code": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]",
      "test_list": [
        "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
        "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
        "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\nTask ID: 571\n\nExpected behavior (test cases):\n1. max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) should return 62\n2. max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) should return 25\n3. max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) should return 21\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_sum_pair_diff_lessthan_K(arr, n, K):\n    arr.sort()\n    total = sum(arr[:n])\n    current_max_sum = -float(\"inf\")\n    \n    for i in range(n-1):\n        if arr[i+1] > K:\n            break\n        else:\n            current_min_sum = sum(arr[:(i + 1)])\n            new_sum = total - current_min_sum + (arr[n] - arr[i]) * (K - (arr[i+1] - arr[i]))\n            if new_sum > current_max_sum:\n                current_max_sum = new_sum\n    \n    return current_max_sum"
          }
        }
      ],
      "usage": {
        "total_tokens": 351,
        "prompt_tokens": 226,
        "completion_tokens": 132
      }
    },
    "timestamp": 1752168896.8362355
  },
  {
    "mbpp_id": 572,
    "problem": {
      "task_id": 572,
      "text": "Write a python function to remove two duplicate numbers from a given number of lists.",
      "code": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]",
      "test_list": [
        "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
        "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
        "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to remove two duplicate numbers from a given number of lists.\n\nTask ID: 572\n\nExpected behavior (test cases):\n1. two_unique_nums([1,2,3,2,3,4,5]) should return [1, 4, 5]\n2. two_unique_nums([1,2,3,2,4,5]) should return [1, 3, 4, 5]\n3. two_unique_nums([1,2,3,4,5]) should return [1, 2, 3, 4, 5]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def two_unique_nums(lists):\n    unique_numbers = []\n    for lst in lists:\n        unique_numbers.extend(set(lst))\n    return list(unique_numbers)[:-2] + list(set(range(6)))"
          }
        }
      ],
      "usage": {
        "total_tokens": 221,
        "prompt_tokens": 187,
        "completion_tokens": 41
      }
    },
    "timestamp": 1752168899.7872467
  },
  {
    "mbpp_id": 573,
    "problem": {
      "task_id": 573,
      "text": "Write a python function to calculate the product of the unique numbers of a given list.",
      "code": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p",
      "test_list": [
        "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
        "assert unique_product([1, 2, 3, 1,]) == 6",
        "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to calculate the product of the unique numbers of a given list.\n\nTask ID: 573\n\nExpected behavior (test cases):\n1. unique_product([10, 20, 30, 40, 20, 50, 60, 40]) should return  720000000\n2. unique_product([1, 2, 3, 1,]) should return 6\n3. unique_product([7, 8, 9, 0, 1, 1]) should return 0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def unique_product(numbers_list):\n    # Calculate the product of all unique elements in the input list.\n    product = 1\n    for num in set(numbers_list):\n        product *= num\n    return int(product)"
          }
        }
      ],
      "usage": {
        "total_tokens": 228,
        "prompt_tokens": 191,
        "completion_tokens": 44
      }
    },
    "timestamp": 1752168902.8793578
  },
  {
    "mbpp_id": 574,
    "problem": {
      "task_id": 574,
      "text": "Write a function to find the surface area of a cylinder.",
      "code": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea",
      "test_list": [
        "assert surfacearea_cylinder(10,5)==942.45",
        "assert surfacearea_cylinder(4,5)==226.18800000000002",
        "assert surfacearea_cylinder(4,10)==351.848"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the surface area of a cylinder.\n\nTask ID: 574\n\nExpected behavior (test cases):\n1. surfacearea_cylinder(10,5)==942.45\n2. surfacearea_cylinder(4,5)==226.18800000000002\n3. surfacearea_cylinder(4,10)==351.848\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def surfacearea_cylinder(radius, height):\n    return 2 * 3.141592653589793 * radius * (radius + height)"
          }
        }
      ],
      "usage": {
        "total_tokens": 189,
        "prompt_tokens": 156,
        "completion_tokens": 40
      }
    },
    "timestamp": 1752168905.757595
  },
  {
    "mbpp_id": 575,
    "problem": {
      "task_id": 575,
      "text": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
      "code": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) ",
      "test_list": [
        "assert count_no(2,3,1,10) == 5",
        "assert count_no(3,6,4,20) == 11",
        "assert count_no(5,10,4,20) == 16"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find nth number in a sequence which is not a multiple of a given number.\n\nTask ID: 575\n\nExpected behavior (test cases):\n1. count_no(2,3,1,10) should return 5\n2. count_no(3,6,4,20) should return 11\n3. count_no(5,10,4,20) should return 16\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_no(k, n, m, t):\n    total = ((n - 1) * k) // m + 1\n    return total - int((total * (t / 100)) > total)\n\n# Test Cases\nprint(count_no(2, 3, 1, 10))  # Expected output: 5\nprint(count_no(3, 6, 4, 20))  # Expected output: 11\nprint(count_no(5, 10, 4, 20))  # Expected output: 16"
          }
        }
      ],
      "usage": {
        "total_tokens": 275,
        "prompt_tokens": 156,
        "completion_tokens": 126
      }
    },
    "timestamp": 1752168913.5725102
  },
  {
    "mbpp_id": 576,
    "problem": {
      "task_id": 576,
      "text": "Write a python function to check whether an array is subarray of another or not.",
      "code": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; ",
      "test_list": [
        "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
        "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
        "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether an array is subarray of another or not.\n\nTask ID: 576\n\nExpected behavior (test cases):\n1. is_Sub_Array([1,4,3,5],[1,2],4,2) should return False\n2. is_Sub_Array([1,2,1],[1,2,1],3,3) should return True\n3. is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_Sub_Array(arr1,arr2,N,M):\r\n    # Initialize index and count variables\r\n    i = 0 \r\n    j = 0\r\n    c = 0\r\n    \r\n    # Traverse through both arrays\r\n    while(i<N and j<M):\r\n        if arr1[i] != arr2[j]:\r\n            i += 1\r\n        else:\r\n            i += 1\r\n            j += 1\r\n            c += 1\r\n        \r\n        # Check if all elements from arr2 have been found in arr1\r\n        if c == M:\r\n            break\r\n            \r\n    # Return True if all elements were matched, otherwise return False\r\n    return c == M"
          }
        }
      ],
      "usage": {
        "total_tokens": 298,
        "prompt_tokens": 171,
        "completion_tokens": 134
      }
    },
    "timestamp": 1752168921.8792372
  },
  {
    "mbpp_id": 577,
    "problem": {
      "task_id": 577,
      "text": "Write a python function to find the last digit in factorial of a given number.",
      "code": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0",
      "test_list": [
        "assert last_Digit_Factorial(4) == 4",
        "assert last_Digit_Factorial(21) == 0",
        "assert last_Digit_Factorial(30) == 0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the last digit in factorial of a given number.\n\nTask ID: 577\n\nExpected behavior (test cases):\n1. last_Digit_Factorial(4) should return 4\n2. last_Digit_Factorial(21) should return 0\n3. last_Digit_Factorial(30) should return 0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def last_Digit_Factorial(num):\n    # Calculate the factorial and return the last digit\n    fact = 1\n    for i in range(1, num + 1):\n        fact *= i\n    return str(fact)[-1]"
          }
        }
      ],
      "usage": {
        "total_tokens": 186,
        "prompt_tokens": 141,
        "completion_tokens": 52
      }
    },
    "timestamp": 1752168925.4455173
  },
  {
    "mbpp_id": 578,
    "problem": {
      "task_id": 578,
      "text": "Write a function to interleave lists of the same length.",
      "code": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result",
      "test_list": [
        "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
        "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
        "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to interleave lists of the same length.\n\nTask ID: 578\n\nExpected behavior (test cases):\n1. interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n2. interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\n3. interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 365,
        "prompt_tokens": 322,
        "completion_tokens": 50
      }
    },
    "timestamp": 1752168928.9134371
  },
  {
    "mbpp_id": 579,
    "problem": {
      "task_id": 579,
      "text": "Write a function to find the dissimilar elements in the given two tuples.",
      "code": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) ",
      "test_list": [
        "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
        "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
        "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the dissimilar elements in the given two tuples.\n\nTask ID: 579\n\nExpected behavior (test cases):\n1. find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) should return (3, 6, 7, 10)\n2. find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) should return (1, 4, 7, 9)\n3. find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) should return (34, 36, 11, 25)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_dissimilar(tuple_1, tuple_2):\n    # Convert both tuples into sets and perform difference operation.\n    dissimilar_elements = set(tuple_1) ^ set(tuple_2)\n    # Convert the result back to list format before returning it.\n    return list(dissimilar_elements)\n\n# Test cases to verify the correctness of the solution\nprint(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))  # Expected output: [3, 6, 7, 10]\nprint(find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)))   # Expected output: [1, 4, 7, 9]\nprint(find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)))  # Expected output: [34, 36, 11, 25]"
          }
        }
      ],
      "usage": {
        "total_tokens": 454,
        "prompt_tokens": 236,
        "completion_tokens": 225
      }
    },
    "timestamp": 1752168942.4171433
  },
  {
    "mbpp_id": 580,
    "problem": {
      "task_id": 580,
      "text": "Write a function to extract the even elements in the nested mixed tuple.",
      "code": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) ",
      "test_list": [
        "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
        "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
        "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract the even elements in the nested mixed tuple.\n\nTask ID: 580\n\nExpected behavior (test cases):\n1. extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) should return (4, (6, (2, 4)), 6, 8)\n2. extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) should return (6, (8, (4, 8)))\n3. extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) should return (6, (8, (4, 6)), 8, 10)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def extract_even(tup):\n    # Initialize an empty list to store even numbers found\n    even_nums = []\n    \n    # Iterate through each element in the tuple\n    for item in tup:\n        if type(item) == int and item % 2 == 0:\n            even_nums.append(item)  # Add even number to the list\n            \n    # Convert the list of even numbers back into a tuple\n    result_tuple = tuple(even_nums)\n    \n    return result_tuple"
          }
        }
      ],
      "usage": {
        "total_tokens": 320,
        "prompt_tokens": 229,
        "completion_tokens": 98
      }
    },
    "timestamp": 1752168948.6489534
  },
  {
    "mbpp_id": 581,
    "problem": {
      "task_id": 581,
      "text": "Write a python function to find the surface area of the square pyramid.",
      "code": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) ",
      "test_list": [
        "assert surface_Area(3,4) == 33",
        "assert surface_Area(4,5) == 56",
        "assert surface_Area(1,2) == 5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the surface area of the square pyramid.\n\nTask ID: 581\n\nExpected behavior (test cases):\n1. surface_Area(3,4) should return 33\n2. surface_Area(4,5) should return 56\n3. surface_Area(1,2) should return 5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def surface_Area(side_length, height):\n    base_area = side_length ** 2\n    lateral_surface_area = 0.5 * side_length * ((side_length ** 2) + height ** 2)\n    total_surface_area = base_area + lateral_surface_area\n    return int(total_surface_area)"
          }
        }
      ],
      "usage": {
        "total_tokens": 193,
        "prompt_tokens": 136,
        "completion_tokens": 64
      }
    },
    "timestamp": 1752168952.9185064
  },
  {
    "mbpp_id": 582,
    "problem": {
      "task_id": 582,
      "text": "Write a function to check if a dictionary is empty or not.",
      "code": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True",
      "test_list": [
        "assert my_dict({10})==False",
        "assert my_dict({11})==False",
        "assert my_dict({})==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if a dictionary is empty or not.\n\nTask ID: 582\n\nExpected behavior (test cases):\n1. my_dict({10})==False\n2. my_dict({11})==False\n3. my_dict({})==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def my_dict(input_dict):\n    return len(input_dict) == 0"
          }
        }
      ],
      "usage": {
        "total_tokens": 127,
        "prompt_tokens": 119,
        "completion_tokens": 15
      }
    },
    "timestamp": 1752168954.370479
  },
  {
    "mbpp_id": 583,
    "problem": {
      "task_id": 583,
      "text": "Write a function for nth catalan number.",
      "code": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num",
      "test_list": [
        "assert catalan_number(10)==16796",
        "assert catalan_number(9)==4862",
        "assert catalan_number(7)==429"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function for nth catalan number.\n\nTask ID: 583\n\nExpected behavior (test cases):\n1. catalan_number(10)==16796\n2. catalan_number(9)==4862\n3. catalan_number(7)==429\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def catalan_number(n):\n    from math import factorial\n    c = 0\n    # Calculate C_n(C_0+C_1+...+C_(n-1))\n    for i in range(n + 1):\n        if i <= n - i:\n            c += factorial(i) * factorial(n - i)\n    return int(c / factorial(n))"
          }
        }
      ],
      "usage": {
        "total_tokens": 193,
        "prompt_tokens": 124,
        "completion_tokens": 76
      }
    },
    "timestamp": 1752168959.3215773
  },
  {
    "mbpp_id": 584,
    "problem": {
      "task_id": 584,
      "text": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
      "code": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))",
      "test_list": [
        "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
        "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
        "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find all adverbs and their positions in a given sentence by using regex.\n\nTask ID: 584\n\nExpected behavior (test cases):\n1. find_adverbs(\"Clearly, he has no excuse for such behavior.\") should return '0-7: Clearly'\n2. find_adverbs(\"Please handle the situation carefuly\") should return '28-36: carefuly'\n3. find_adverbs(\"Complete the task quickly\") should return '18-25: quickly'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\n\n\ndef find_adverbs(sentence):\n    # Regular expression pattern to match words ending with \"-ly\"\n    pattern = r\"\\b\\w+ly\\b\"\n    \n    matches = re.findall(pattern, sentence)\n    \n    if not matches:\n        return \"No adverbs found.\"\n    \n    result = []\n    for index, word in enumerate(matches, start=1):\n        result.append(f\"{index}-{len(word)}: {word}\")\n    \n    return \"\\n\".join(result)\n\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\n    assert find_adverbs(\"Please handle the situation carefully.\") == '28-35: carefully'\n    assert find_adverbs(\"Complete the task quickly.\") == '18-25: quickly'\n    print(\"All test cases passed successfully.\")\n\n\ncheck_solution()"
          }
        }
      ],
      "usage": {
        "total_tokens": 353,
        "prompt_tokens": 166,
        "completion_tokens": 194
      }
    },
    "timestamp": 1752168971.0517147
  },
  {
    "mbpp_id": 585,
    "problem": {
      "task_id": 585,
      "text": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
      "code": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items",
      "test_list": [
        "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
        "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\nTask ID: 585\n\nExpected behavior (test cases):\n1. expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n2. expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\n3. expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def expensive_items(lst,n):\n    # Implementing the priority queue with max-heap for finding the nth most expensive item efficiently.\n    pq = [(item['price'], item['name']) for item in lst]\n    heapq.heapify(pq)\n    \n    return [heappop(pq)[1] for _ in range(n)]"
          }
        }
      ],
      "usage": {
        "total_tokens": 421,
        "prompt_tokens": 360,
        "completion_tokens": 68
      }
    },
    "timestamp": 1752168975.5650668
  },
  {
    "mbpp_id": 586,
    "problem": {
      "task_id": 586,
      "text": "Write a python function to split the array and add the first part to the end.",
      "code": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) ",
      "test_list": [
        "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
        "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
        "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to split the array and add the first part to the end.\n\nTask ID: 586\n\nExpected behavior (test cases):\n1. split_Arr([12,10,5,6,52,36],6,2) should return [5,6,52,36,12,10]\n2. split_Arr([1,2,3,4],4,1) should return [2,3,4,1]\n3. split_Arr([0,1,2,3,4,5,6,7],8,3) should return [3,4,5,6,7,0,1,2]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def split_Arr(arr, n, m):\n    result = []\n    for i in range(n-1, -1, -1):\n        if len(result) < m:\n            result.append(arr[i])\n        else:\n            break\n    return result + arr[:n-m]"
          }
        }
      ],
      "usage": {
        "total_tokens": 262,
        "prompt_tokens": 211,
        "completion_tokens": 58
      }
    },
    "timestamp": 1752168979.4473343
  },
  {
    "mbpp_id": 587,
    "problem": {
      "task_id": 587,
      "text": "Write a function to convert a list to a tuple.",
      "code": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex",
      "test_list": [
        "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
        "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
        "assert list_tuple([58,44,56])==(58,44,56)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert a list to a tuple.\n\nTask ID: 587\n\nExpected behavior (test cases):\n1. list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n2. list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\n3. list_tuple([58,44,56])==(58,44,56)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def list_tuple(lst):\n    return tuple(lst)"
          }
        }
      ],
      "usage": {
        "total_tokens": 215,
        "prompt_tokens": 212,
        "completion_tokens": 10
      }
    },
    "timestamp": 1752168980.5923927
  },
  {
    "mbpp_id": 588,
    "problem": {
      "task_id": 588,
      "text": "Write a python function to find the difference between largest and smallest value in a given array.",
      "code": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff",
      "test_list": [
        "assert big_diff([1,2,3,4]) == 3",
        "assert big_diff([4,5,12]) == 8",
        "assert big_diff([9,2,3]) == 7"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the difference between largest and smallest value in a given array.\n\nTask ID: 588\n\nExpected behavior (test cases):\n1. big_diff([1,2,3,4]) should return 3\n2. big_diff([4,5,12]) should return 8\n3. big_diff([9,2,3]) should return 7\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def big_diff(nums):\n    # Calculate the maximum and minimum values from the list of numbers.\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Subtract the minimum value from the maximum value.\n    result = max_val - min_val\n\n    return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 193,
        "prompt_tokens": 144,
        "completion_tokens": 56
      }
    },
    "timestamp": 1752168984.379259
  },
  {
    "mbpp_id": 589,
    "problem": {
      "task_id": 589,
      "text": "Write a function to find perfect squares between two given numbers.",
      "code": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists",
      "test_list": [
        "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
        "assert perfect_squares(50,100)==[64, 81, 100]",
        "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find perfect squares between two given numbers.\n\nTask ID: 589\n\nExpected behavior (test cases):\n1. perfect_squares(1,30)==[1, 4, 9, 16, 25]\n2. perfect_squares(50,100)==[64, 81, 100]\n3. perfect_squares(100,200)==[100, 121, 144, 169, 196]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def perfect_squares(a, b):\n    # Use list comprehension with range to create a list of perfect squares in the specified range.\n    return [x ** 2 for x in range(min(a, b), max(a, b) + 1)] if min(a, b) <= max(a, b) else []"
          }
        }
      ],
      "usage": {
        "total_tokens": 239,
        "prompt_tokens": 180,
        "completion_tokens": 66
      }
    },
    "timestamp": 1752168988.7571616
  },
  {
    "mbpp_id": 590,
    "problem": {
      "task_id": 590,
      "text": "Write a function to convert polar coordinates to rectangular coordinates.",
      "code": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)",
      "test_list": [
        "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
        "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
        "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert polar coordinates to rectangular coordinates.\n\nTask ID: 590\n\nExpected behavior (test cases):\n1. polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n2. polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n3. polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def polar_rect(rho, theta):\n    x = rho * math.cos(math.radians(theta))\n    y = rho * math.sin(math.radians(theta))\n    return ((x, y)), complex(round(x.real - y.imag), round(y.real + x.imag))"
          }
        }
      ],
      "usage": {
        "total_tokens": 343,
        "prompt_tokens": 298,
        "completion_tokens": 52
      }
    },
    "timestamp": 1752168992.2986066
  },
  {
    "mbpp_id": 591,
    "problem": {
      "task_id": 591,
      "text": "Write a python function to interchange the first and last elements in a list.",
      "code": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList ",
      "test_list": [
        "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
        "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "assert swap_List([4, 5, 6]) == [6, 5, 4]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to interchange the first and last elements in a list.\n\nTask ID: 591\n\nExpected behavior (test cases):\n1. swap_List([12, 35, 9, 56, 24]) should return [24, 35, 9, 56, 12]\n2. swap_List([1, 2, 3]) should return [3, 2, 1]\n3. swap_List([4, 5, 6]) should return [6, 5, 4]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def swap_List(l):\n    return l[-1:] + l[1:-1] + l[:1]"
          }
        }
      ],
      "usage": {
        "total_tokens": 198,
        "prompt_tokens": 182,
        "completion_tokens": 23
      }
    },
    "timestamp": 1752168994.2022266
  },
  {
    "mbpp_id": 592,
    "problem": {
      "task_id": 592,
      "text": "Write a python function to find sum of product of binomial co-efficients.",
      "code": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); ",
      "test_list": [
        "assert sum_Of_product(3) == 15",
        "assert sum_Of_product(4) == 56",
        "assert sum_Of_product(1) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find sum of product of binomial co-efficients.\n\nTask ID: 592\n\nExpected behavior (test cases):\n1. sum_Of_product(3) should return 15\n2. sum_Of_product(4) should return 56\n3. sum_Of_product(1) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_of_product(n):\n    if n == 0:\n        return 1\n    else:\n        return ((n + 1) * pow((n - 1), n)) // 2"
          }
        }
      ],
      "usage": {
        "total_tokens": 167,
        "prompt_tokens": 132,
        "completion_tokens": 42
      }
    },
    "timestamp": 1752168997.2054274
  },
  {
    "mbpp_id": 593,
    "problem": {
      "task_id": 593,
      "text": "Write a function to remove leading zeroes from an ip address.",
      "code": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r",
      "test_list": [
        "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
        "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
        "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove leading zeroes from an ip address.\n\nTask ID: 593\n\nExpected behavior (test cases):\n1. removezero_ip(\"216.08.094.196\")==('216.8.94.196') \n2. removezero_ip(\"12.01.024\")==('12.1.24') \n3. removezero_ip(\"216.08.094.0196\")==('216.8.94.196') \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def removezero_ip(ip_address):\n    # Remove '0' in the front of each octet if present\n    for i in range(4):\n        if str(i+1) == ip_address[i]:\n            continue\n        else:\n            return ip_address[:i] + \".\" + ip_address[i:]\n    \n    # If all octets have non-zero values, return unchanged IP address\n    return ip_address"
          }
        }
      ],
      "usage": {
        "total_tokens": 263,
        "prompt_tokens": 186,
        "completion_tokens": 84
      }
    },
    "timestamp": 1752169002.5690856
  },
  {
    "mbpp_id": 594,
    "problem": {
      "task_id": 594,
      "text": "Write a function to find the difference of first even and odd number of a given list.",
      "code": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)",
      "test_list": [
        "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
        "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
        "assert diff_even_odd([1,5,7,9,10])==9"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the difference of first even and odd number of a given list.\n\nTask ID: 594\n\nExpected behavior (test cases):\n1. diff_even_odd([1,3,5,7,4,1,6,8])==3\n2. diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\n3. diff_even_odd([1,5,7,9,10])==9\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def diff_even_odd(lst):\n    evensum = sum(x for x in lst if x % 2 == 0)\n    oddsum = sum(x for x in lst if x % 2 != 0)\n    return abs(evensum - oddsum)"
          }
        }
      ],
      "usage": {
        "total_tokens": 213,
        "prompt_tokens": 165,
        "completion_tokens": 55
      }
    },
    "timestamp": 1752169006.3428829
  },
  {
    "mbpp_id": 595,
    "problem": {
      "task_id": 595,
      "text": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
      "code": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ",
      "test_list": [
        "assert min_Swaps(\"1101\",\"1110\") == 1",
        "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
        "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count minimum number of swaps required to convert one binary string to another.\n\nTask ID: 595\n\nExpected behavior (test cases):\n1. min_Swaps(\"1101\",\"1110\") should return 1\n2. min_Swaps(\"111\",\"000\") should return \"Not Possible\"\n3. min_Swaps(\"111\",\"110\") should return \"Not Possible\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return 'Not Possible'\n    \n    swaps = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            swaps += 1\n    \n    # If all characters match except possibly one extra character at the end,\n    # we can swap it with any other character to make them equal.\n    if swaps == len(s1)-1:\n        return str(swaps)\n    else:\n        return 'Not Possible'"
          }
        }
      ],
      "usage": {
        "total_tokens": 267,
        "prompt_tokens": 158,
        "completion_tokens": 116
      }
    },
    "timestamp": 1752169013.4935102
  },
  {
    "mbpp_id": 596,
    "problem": {
      "task_id": 596,
      "text": "Write a function to find the size of the given tuple.",
      "code": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) ",
      "test_list": [
        "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
        "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
        "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the size of the given tuple.\n\nTask ID: 596\n\nExpected behavior (test cases):\n1. tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) should return sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n2. tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) should return sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\n3. tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) should return sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def tuple_size(tup):\n    import sys\n    return sys.getsizeof(tup)"
          }
        }
      ],
      "usage": {
        "total_tokens": 266,
        "prompt_tokens": 255,
        "completion_tokens": 18
      }
    },
    "timestamp": 1752169015.1192265
  },
  {
    "mbpp_id": 597,
    "problem": {
      "task_id": 597,
      "text": "Write a function to find kth element from the given two sorted arrays.",
      "code": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]",
      "test_list": [
        "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
        "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
        "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find kth element from the given two sorted arrays.\n\nTask ID: 597\n\nExpected behavior (test cases):\n1. find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) should return 6\n2. find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) should return 256\n3. find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) should return 8\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_kth(a, b, x, y, k):\n    if not a and not b:\n        return None\n    \n    if len(a) < x + 1:\n        return find_kth(a[0], b[0], max(x - 1, 0), y, min(k, len(b)))\n    \n    if len(b) < y + 1:\n        return find_kth(a[0], b[len(b) - 1], max(0, x), y - 1, min(k, len(a)))\n    \n    m = min(len(a), len(b))\n    \n    if k > m:\n        return find_kth(a[:m // 2], b[:m // 2], m // 2, m // 2, k)\n    \n    i = j = 0\n    \n    while i <= m // 2 and j <= m // 2:\n        if a[i] == b[j]:\n            break\n        elif a[i] < b[j]:\n            i += 1\n        else:\n            j += 1\n    \n    if i <= m // 2 and k <= m // 2 + i:\n        return a[i]\n    elif j <= m // 2 and k <= m // 2 + j:\n        return b[j]\n    else:\n        if m % 2 != 0:\n            return find_kth(max(a[i], b[j]), b[j] if i > m // 2 else b[max(i, j)], \n                            max(x, y - 1), max(y - 1, x - 1), min(k - (m // 2 + i), m // 2 + j))\n        else:\n            return find_kth(a[max(i, j)], max(a[i], b[j]) if j > m // 2 else b[max(i, j)], \n                            max(x, y - 1), max(y - 1, x - 1), min(k - (m // 2 + i), m // 2 + j))"
          }
        }
      ],
      "usage": {
        "total_tokens": 681,
        "prompt_tokens": 264,
        "completion_tokens": 424
      }
    },
    "timestamp": 1752169039.9750218
  },
  {
    "mbpp_id": 598,
    "problem": {
      "task_id": 598,
      "text": "Write a function to check whether the given number is armstrong or not.",
      "code": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False",
      "test_list": [
        "assert armstrong_number(153)==True",
        "assert armstrong_number(259)==False",
        "assert armstrong_number(4458)==False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given number is armstrong or not.\n\nTask ID: 598\n\nExpected behavior (test cases):\n1. armstrong_number(153)==True\n2. armstrong_number(259)==False\n3. armstrong_number(4458)==False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def armstrong_number(n):\n    return n == sum(int(digit)**len(str(n)) for digit in str(n))"
          }
        }
      ],
      "usage": {
        "total_tokens": 145,
        "prompt_tokens": 127,
        "completion_tokens": 25
      }
    },
    "timestamp": 1752169041.984586
  },
  {
    "mbpp_id": 599,
    "problem": {
      "task_id": 599,
      "text": "Write a function to find sum and average of first n natural numbers.",
      "code": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)",
      "test_list": [
        "assert sum_average(10)==(55, 5.5)",
        "assert sum_average(15)==(120, 8.0)",
        "assert sum_average(20)==(210, 10.5)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find sum and average of first n natural numbers.\n\nTask ID: 599\n\nExpected behavior (test cases):\n1. sum_average(10)==(55, 5.5)\n2. sum_average(15)==(120, 8.0)\n3. sum_average(20)==(210, 10.5)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_average(n):\n    return (n * (n + 1) // 2, n / 2)"
          }
        }
      ],
      "usage": {
        "total_tokens": 161,
        "prompt_tokens": 143,
        "completion_tokens": 25
      }
    },
    "timestamp": 1752169043.9986475
  },
  {
    "mbpp_id": 600,
    "problem": {
      "task_id": 600,
      "text": "Write a python function to check whether the given number is even or not using bitwise operator.",
      "code": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; ",
      "test_list": [
        "assert is_Even(1) == False",
        "assert is_Even(2) == True",
        "assert is_Even(3) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given number is even or not using bitwise operator.\n\nTask ID: 600\n\nExpected behavior (test cases):\n1. is_Even(1) should return False\n2. is_Even(2) should return True\n3. is_Even(3) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_Even(n):\n    # Use the AND operator (&) between n and its negation (~n) to determine if n is even.\n    # If the result is zero, then n is even; otherwise, it's odd.\n    return bool(~n & n)\n\n# Check function with provided data points to verify correctness\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False"
          }
        }
      ],
      "usage": {
        "total_tokens": 219,
        "prompt_tokens": 129,
        "completion_tokens": 97
      }
    },
    "timestamp": 1752169050.146933
  }
]