[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def remove_occ(string, char):\n    # Remove the first occurrence of the character\n    new_str = string.replace(char, \"\", 1)\n    \n    # Check if the modified string has more than one occurrence of the character\n    while string.find(char) != -1:\n        index = string.find(char)\n        new_str = new_str[:index] + new_str[index+1:]\n    \n    return new_str\n\n# Test cases\nprint(remove_occ(\"hello\", \"l\"))  # Expected output: \"heo\"\nprint(remove_occ(\"abcda\", \"a\"))  # Expected output: \"bcd\"\nprint(remove_occ(\"PHP\", \"P\"))   # Expected output: \"H\"",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_matrix(matrix):\n    # Sort each row based on the sum of elements and then combine them back into a single list.\n    return sorted([sorted(row) for row in matrix])",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\nimport re\n\ndef count_common(lst):\n    # Filter out non-alphanumeric characters and convert all words to lowercase for uniformity\n    lst = [re.sub(r'\\W+', '', word).lower() for word in lst]\n    \n    # Count the frequency of each word\n    counter = Counter(lst)\n    \n    # Find the maximum frequency\n    max_freq = max(counter.values())\n    \n    # Return words that have the maximum frequency\n    return [(word, freq) for word, freq in counter.items() if freq == max_freq]\n\n# Example usage:\nprint(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']))",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Volume(a,b,c):\n    # calculate the area of the base triangle using Heron's formula\n    s = (a + b + c) / 2\n    area_base = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    # calculate the volume of the prism\n    volume = area_base * c\n    \n    return int(volume)",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef split_lowerstring(s):\n    # Split the string using regex pattern to match lowercase letters\n    return re.findall('[a-z]', s)\n\n# Test cases to verify the correctness of the function\nprint(split_lowerstring(\"AbCd\"))  # Expected output: ['bC', 'd']\nprint(split_lowerstring(\"Python\"))  # Expected output: ['y', 't', 'h', 'o', 'n']\nprint(split_lowerstring(\"Programming\"))  # Expected output: ['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_lowercase_underscore(text):\n    # Check if all characters in the string are lowercase and separated by underscores\n    return 'Found a match!' if ''.join(filter(str.islower, text)).count('_') == len(text) - len(text.split('_')) else 'Not matched!'",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side_length):\n    return 4 * side_length",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_dirty_chars(source_str, dirty_str):\n    # Convert both strings into sets for efficient lookup and comparison\n    source_set = set(source_str)\n    dirty_set = set(dirty_str)\n    \n    # Find characters in source_str that are not in dirty_str\n    valid_chars = ''.join([char for char in source_str if char not in dirty_set])\n    \n    return valid_chars",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_duplicate(arr):\n    \"\"\"\n    Check if an array has duplicates.\n    \n    Parameters:\n    arr (list): A list of integers\n    \n    Returns:\n    bool: True if there is at least one duplicate, False otherwise\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'log' is not defined"
    ],
    "generated_code": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is defined as n*2^n - 1 for some integer n >= 1.\n    \n    Parameters:\n    num (int): The number to be checked.\n    \n    Returns:\n    bool: True if num is a Woodall number, False otherwise.\n    \"\"\"\n    # Check if the number satisfies the Woodall condition\n    def verify_woodall(n):\n        return n * pow(2, n) == num + 1\n    \n    # Iterate through possible values of n\n    for i in range(1, int(log(num)) + 2):\n        if verify_woodall(i):\n            return True\n    return False\n\n# Test cases\nprint(is_woodall(383))  # Expected output: True\nprint(is_woodall(254))  # Expected output: False\nprint(is_woodall(200))  # Expected output: False",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiples_of_num(m, n):\n    return [i * n for i in range(1, m + 1)]",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_Sum(lists_of_lists):\n    max_sum = float('-inf')\n    for sublist in lists_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def binary_to_decimal(binary_num):\n    # Convert binary string to integer and subtract 1 from it\n    decimal_value = int(binary_num, 2) - 1\n    return decimal_value\n\n# Test cases\nprint(binary_to_decimal('100'))  # Expected output: 4\nprint(binary_to_decimal('1011'))  # Expected output: 11\nprint(binary_to_decimal('1101101'))  # Expected output: 109",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - argument of type 'int' is not iterable",
      "Test 2: FAIL - argument of type 'int' is not iterable",
      "Test 3: FAIL - argument of type 'int' is not iterable"
    ],
    "generated_code": "def find_Product(arr, target_product):\n    # Initialize the result variable and set it to 1 as the product starts with 1\n    result = 1\n    \n    # Iterate through each element in the array\n    for num in arr:\n        # Multiply the current number by the result if it is not already included in the result list\n        if num not in result:\n            result *= num\n            \n    # If the product is found in the result list, return the product; otherwise, return -1\n    if result == target_product:\n        return target_product\n    else:\n        return -1",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if every tuple in the provided list contains at least k elements.\n    \n    :param tuple_list: List of tuples to be checked\n    :param k: Minimum number of elements each tuple must contain\n    :return: Boolean indicating whether all tuples have at least k elements\n    \"\"\"\n    for t in tuple_list:\n        if len(t) < k:\n            return False\n    return True",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove(lst):\n    new_lst = []\n    for item in lst:\n        new_str = ''.join([char for char in item if not char.isdigit()])\n        new_lst.append(new_str)\n    return new_lst\n\n# Test cases\nprint(remove(['4words', '3letters', '4digits']))  # Output: ['words', 'letters', 'digits']\nprint(remove(['28Jan', '12Jan', '11Jan']))       # Output: ['Jan', 'Jan', 'Jan']\nprint(remove(['wonder1', 'wonder2', 'wonder3'])) # Output: ['wonder', 'wonder', 'wonder']",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binomial_Coeff(n, k):\n    if k > n - k:\n        k = n - k\n    total = 1\n    for i in range(k):\n        total *= (n - i)\n        total //= (i + 1)\n    return total\n\n# Test cases\nprint(binomial_Coeff(5,2))  # Expected output: 10\nprint(binomial_Coeff(4,3))  # Expected output: 4\nprint(binomial_Coeff(3,2))  # Expected output: 3",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - get_Odd_Occurrence() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - get_Odd_Occurrence() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - get_Odd_Occurrence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def get_Odd_Occurrence(arr):\n    # Initialize an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate through the array and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Iterate through the array again to find the element with odd occurrences\n    for num in arr:\n        if freq[num] % 2 != 0:\n            return num\n    \n    # If no element has odd occurrences, raise an exception or handle it as per requirement\n    raise ValueError(\"No element occurs odd number of times\")",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def count_substring_with_equal_ends(s):\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n\n# Test cases\nprint(count_substring_with_equal_ends(\"abc\"))  # Expected output: 3\nprint(count_substring_with_equal_ends(\"abcda\"))  # Expected output: 6\nprint(count_substring_with_equal_ends(\"ab\"))  # Expected output: 2",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\n\ndef func(lists, k):\n    result = []\n    for lst in lists:\n        # Use negative values since max-heap works with smallest elements\n        for num in set(lst): \n            if len(result) < k:\n                heapq.heappush(result, -num)\n            elif num > -result[0]:\n                heapq.heappop(result)\n                heapq.heappush(result, -num)\n    return [-i for i in result]\n\n# Test cases\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3))  # Expected output: [5, 7, 1]\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1))  # Expected output: [1]\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5))  # Expected output: [6, 5, 7, 8, 1]",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_To_Binary(decimal_number):\n    # Initialize an empty list to store the binary digits\n    binary_digits = []\n    \n    # Continue dividing the number by 2 and storing the remainders in reverse order\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_digits.append(str(remainder))\n        decimal_number //= 2\n    \n    # Join the list of binary digits into a single string and return it\n    return ''.join(binary_digits[::-1])\n\n# Test the function with provided data points\nprint(decimal_To_Binary(10))  # Expected output: \"1010\"\nprint(decimal_To_Binary(1))   # Expected output: \"1\"\nprint(decimal_To_Binary(20))  # Expected output: \"10100\"",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_missing(nums, n):\n    # Calculate the expected sum of numbers from 1 to n using the formula for the sum of an arithmetic series.\n    expected_sum = n * (n + 1) // 2\n    \n    # Calculate the actual sum of elements in nums using a generator expression and built-in sum().\n    actual_sum = sum(nums)\n    \n    # The difference between the expected sum and the actual sum is the missing number.\n    return expected_sum - actual_sum",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rect_num(n):\n    \"\"\"\n    This function calculates the nth rectangular number.\n    \n    Parameters:\n    n (int): The position of the rectangular number in the sequence.\n    \n    Returns:\n    int: The nth rectangular number.\n    \"\"\"\n    # Formula to calculate the nth rectangular number: n * (n + 1)\n    rect_num = n * (n + 1)\n    return rect_num",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: object of type 'int' has no len()"
    ],
    "generated_code": "def find_Nth_Digit(multiplicand1, multiplier1, multiplicand2, multiplier2, position):\n    \"\"\"\n    This function calculates the nth digit in the decimal representation of the sum \n    of multiplicant1 multiplied by multiplier1 and multiplicand2 multiplied by multiplier2.\n    \n    :param multiplicand1: The first multiplicand.\n    :param multiplier1: The first multiplier.\n    :param multiplicand2: The second multiplicand.\n    :param multiplier2: The second multiplier.\n    :param position: The position of the digit to be returned.\n    :return: The nth digit in the decimal representation.\n    \"\"\"\n\n    def multiply_and_add(a, b, c, d):\n        \"\"\"Helper function for multiplication.\"\"\"\n        result = \"\"\n        carry = 0\n        i = len(b) - 1\n        while i >= 0:\n            product = int(str(c * int(a[i])) + str(d))\n            carry, remainder = divmod(product, 10)\n            result += str(remainder)\n            i -= 1\n        if carry > 0:\n            result += str(carry)\n        result = result[::-1]\n        return ''.join(result)\n\n    # Perform the addition as per the place values defined by the multipliers\n    total_sum = str(int(multiply_and_add(multiplicand1, multiplier1, multiplicand2, multiplier2)))\n    \n    # Extracting the nth digit from the right considering it's zero-based indexing\n    return int(total_sum[-position])\n\n# Test cases\nassert find_Nth_Digit(1,2,1,3,1) == 1, \"Test case 1 failed\"\nassert find_Nth_Digit(3,5,1,2,1) == 4, \"Test case 2 failed\"\nassert find_Nth_Digit(5,6,7,8,1) == 9, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'str' and 'int'"
    ],
    "generated_code": "def sort_mixed_list(lst):\n    return sorted(lst)\n\n# Test cases\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])) # [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])) # [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])) # [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def div_even_odd(arr):\n    # Check if there is at least one even number in the array\n    for i in arr:\n        if i % 2 == 0:\n            return i / sum(filter(lambda x: x % 2 != 0, arr))\n    return \"No even numbers found\" if not any(i % 2 == 0 for i in arr) else None",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rearange_string(s):\n    char_count = [0] * 26  # Initialize array for character count with size of alphabet\n    \n    # Count occurrences of each character in the input string\n    for char in s:\n        index = ord(char) - ord('a') \n        char_count[index] += 1\n    \n    result = []\n    \n    # Place characters from most frequent first to least frequent last\n    for i in range(26):\n        while char_count[i] > 0 and len(result) < len(s):\n            result.append(chr(i + ord('a')))\n            char_count[i] -= 1\n    \n    return ''.join(result)\n\n# Example usage\nprint(rearange_string(\"aab\"))   # Output: 'aba'\nprint(rearange_string(\"aabb\"))  # Output: 'abab'\nprint(rearange_string(\"abccdd\"))# Output: 'cdabcd'",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef freq_element(lists):\n    result = {}\n    for sublist in lists:\n        counter = Counter(sublist)\n        for element, count in counter.items():\n            if element in result:\n                result[element] += count\n            else:\n                result[element] = count\n    return result",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Sum(arr, n):\n    # Create a dictionary to store the count of each element in the array\n    count = {}\n    for num in arr:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    \n    total_sum = 0\n    # Iterate through the counts and calculate the sum based on their occurrences\n    for key, value in count.items():\n        if value > 1:\n            total_sum += (key * ((value * (value - 1)) // 2))\n    \n    return total_sum\n\n# Test cases\nprint(find_Sum([1,2,3,1,1,4,5,6], 8))  # Expected output: 3\nprint(find_Sum([1,2,3,1,1], 5))       # Expected output: 3\nprint(find_Sum([1,1,2], 3))           # Expected output: 2",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    pattern = r'\\w+_\\w+'  # Regex pattern for matching sequences of lowercase letters joined with an underscore.\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match(\"aab_cbbbc\"))  # Expected output: \"Found a match!\"\nprint(text_match(\"aab_Abbbc\"))  # Expected output: \"Not matched!\"\nprint(text_match(\"Aaab_abbbc\")) # Expected output: \"Not matched!\"",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_string(text):\n    if not text.startswith(\"python\"):\n        return 'Not matched!'\n    else:\n        return 'Found a match!'",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_gcd(arr):\n    def compute_gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return abs(x)\n    \n    result = arr[0]\n    for num in arr:\n        result = compute_gcd(result, num)\n    return result",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_distinct(lst):\n    \"\"\"\n    Check if all elements in the list are unique.\n    \n    Args:\n    lst (list): A list of integers\n    \n    Returns:\n    bool: True if all elements are distinct, False otherwise\n    \"\"\"\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def compute_Last_Digit(a, b):\n    import math\n    result = int(math.factorial(b) / math.factorial(a))\n    if result % 10 == 0:\n        return -1  # If the result is not divisible by 10, it indicates an error in logic\n    else:\n        return result % 10",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(n):\n    result = n ^ ((n >> 1) | ((n & 1) << 31))\n    return result",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    return [row[index] for row in matrix]\n\n# Test cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) # Output: [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) # Output: [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)) # Output: [2, 5, 1]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length_list(lst):\n    return min(lst, key=len)",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a, b, c):\n    return a == b and b == c",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Equality(s):\n    # Check if the first character is equal to the last character\n    return s[0] == s[-1]",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array of integers using the counting sort algorithm.\n    \n    Parameters:\n    arr (list): The list of integers to be sorted.\n    \n    Returns:\n    list: A new list containing the sorted elements.\n    \"\"\"\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    count_arr = [0] * (max_val + 1)\n    \n    for num in arr:\n        count_arr[num] += 1\n    \n    sorted_arr = []\n    for index, count in enumerate(count_arr):\n        sorted_arr.extend([index] * count)\n    \n    return sorted_arr\n\n# Check function with provided data points\nassert counting_sort([1, 23, 4, 5, 6, 7, 8]) == [1, 4, 5, 6, 7, 8, 23], \"Test case 1 failed\"\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69], \"Test case 2 failed\"\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tn_gp(t,n,r):\n    return t * r ** (n - 1)",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(number):\n    # Reverse the input number and multiply it by two\n    reversed_number = int(str(number)[::-1]) * 2\n    \n    # Subtract 1 from the result of multiplying by two\n    subtracted_value = reversed_number - 1\n    \n    # Compare the original number with the value after subtraction\n    return number == subtracted_value\n\n# Test cases to verify the correctness of the function\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max_Num(digits_list, n_digits):\n    # Sort the list in descending order to arrange the digits from highest to lowest\n    sorted_list = sorted(digits_list, reverse=True)\n    \n    # Convert each digit back into an integer and join them together to form the largest possible number\n    result_number = int(''.join(map(str, sorted_list)))\n    \n    # Return the result as a string since the task requires a string output\n    return str(result_number)\n\n# Test the function with provided data points\nprint(find_Max_Num([1,2,3], 3))  # Expected output: \"321\"\nprint(find_Max_Num([4,5,6,1], 4))  # Expected output: \"6541\"\nprint(find_Max_Num([1,2,3,9], 4))  # Expected output: \"9321\"",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def opposite_Signs(x, y):\n    \"\"\"\n    Check if the given two integers x and y have opposite signs.\n    \n    Parameters:\n    - x (int): The first integer.\n    - y (int): The second integer.\n    \n    Returns:\n    bool: True if x and y have opposite signs, False otherwise.\n    \"\"\"\n    # Check if both numbers are positive or negative simultaneously\n    return x < 0 != y < 0",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Parameters:\n    n (int): The position of the octagonal number in the sequence.\n    \n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    return n * ((3*n - 2))\n\n# Check function with provided data points\nassert is_octagonal(5) == 65, \"Test case 1 failed\"\nassert is_octagonal(10) == 280, \"Test case 2 failed\"\nassert is_octagonal(15) == 645, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def max_len_sub(arr, k):\n    \"\"\"\n    Finds the maximum length of a subsequence where each pair of consecutive elements has a difference of at most k.\n    \n    :param arr: List[int] -- Array of integers representing the sequence.\n    :param k: int -- Maximum allowed difference between consecutive elements.\n    :return: int -- The maximum length of such a subsequence.\n    \"\"\"\n    dp = [0]\n    ans = 0\n    \n    for i in range(len(arr)):\n        temp_ans = 0\n        for j in range(1, len(dp)+1):\n            if abs(arr[i] - arr[j-1]) <= k:\n                temp_ans = max(temp_ans, dp[j])\n        dp.append(max(temp_ans + 1, dp[-1]))\n        \n        if dp[-1] > ans:\n            ans = dp[-1]\n            \n    return ans",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Substrings(s, n):\n    dp = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        current_sum = 0\n        count = 0\n        \n        for j in range(i - 1, -1, -1):\n            current_sum += int(s[j])\n            if current_sum == i:\n                count += dp[i - j - 1]\n                \n        dp[i] = count\n    \n    return dp[n]\n\n# Test Cases\nprint(count_Substrings('112112', 6)) # Expected output: 6\nprint(count_Substrings('111', 3)) # Expected output: 6\nprint(count_Substrings('1101112', 7)) # Expected output: 12",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(nums):\n    # Initialize min_value with the first element of the list\n    min_value = nums[0]\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num < min_value:\n            min_value = num\n    \n    return min_value",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_difference(tuple_list):\n    # Initialize variables for minimum value and maximum difference found so far\n    min_value = float('inf')\n    max_diff = 0\n    \n    # Iterate through each tuple in the list\n    for num_pair in tuple_list:\n        # Update the minimum value if current element is smaller than min_value\n        min_value = min(min_value, num_pair[0])\n        \n        # Calculate the difference between the minimum value and current number pair's first element\n        diff = abs(num_pair[0] - min_value)\n        \n        # If this difference is greater than previously recorded maximum difference,\n        # update the maximum difference\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff\n\n# Example test cases\nprint(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))  # Expected output: 7\nprint(max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]))  # Expected output: 15\nprint(max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]))  # Expected output: 23",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])\n\n# Test Cases\nprint(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])) # [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nprint(subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])) # [('Social',33),('Telugu',49),('Hindhi',54)]\nprint(subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])) # [('Biology',45),('Physics',96),('Chemistry',97)]",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def recursive_list_sum(lst):\n    if isinstance(lst[0], int):\n        return lst[0] + recursive_list_sum(lst[1:])\n    else:\n        return recursive_list_sum(lst[0]) + recursive_list_sum(lst[1:])",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(nums):\n    # Initialize a counter for positive numbers\n    pos_counter = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # If the number is greater than zero, increment the counter\n        if num > 0:\n            pos_counter += 1\n            \n    # Return the total count of positive numbers\n    return pos_counter",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def bell_number(n):\n    # Base case initialization for the first two values of the Bell sequence\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    \n    # Initialize the list with base case values\n    bell = [0] * (n + 1)\n    bell[0], bell[1] = 1, 1\n    \n    # Fill in the Bell triangle\n    for i in range(2, n + 1):\n        # Calculate next value based on previous ones\n        bell[i] = sum(bell) \n    \n    # Return the last element which is the nth Bell number\n    return bell[n]",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(arr):\n    \"\"\"\n    Check if the given list of integers is monotonic.\n    \n    Parameters:\n    arr (list): A list of integers\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise\n    \"\"\"\n    # Check if the list is strictly increasing or decreasing\n    return all(x <= y for x, y in zip(arr, arr[1:])) or all(x >= y for x, y in zip(arr, arr[1:]))\n\n# Test Cases\nprint(is_Monotonic([6, 5, 4, 4]))  # Expected output: True\nprint(is_Monotonic([1, 2, 2, 3]))  # Expected output: True\nprint(is_Monotonic([1, 3, 2]))     # Expected output: False",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_sublist(main_list, sub_list):\n    # Check if all elements of sub_list exist in main_list maintaining their order\n    return all(item in main_list for item in sub_list)",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_equal(tuples_list, expected_length):\n    # Check if all tuples in the list have the expected length\n    for tuple_ in tuples_list:\n        if len(tuple_) != expected_length:\n            return f\"All tuples do not have {expected_length} elements\"\n    \n    return \"All tuples have same length\"\n\n# Test cases\nprint(get_equal([(11, 22, 33), (44, 55, 66)], 3))  # Expected output: All tuples have same length\nprint(get_equal([(1, 2, 3), (4, 5, 6, 7)], 3))      # Expected output: All tuples do not have same length\nprint(get_equal([(1, 2), (3, 4)], 2))               # Expected output: All tuples have same length",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n    \n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        # A single \"comb\" over the input array\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                # Swap elements\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n    \n    return arr",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dif_Square(n):\n    \"\"\"\n    Check if the given number n can be expressed as the difference of two squares.\n    \n    Args:\n    n (int): The number to check\n    \n    Returns:\n    bool: True if n can be represented as the difference of two squares, otherwise False.\n    \"\"\"\n    # A number can be represented as the difference of two squares if and only if it is either odd or not divisible by 4.\n    return n % 2 != 0 or n % 4 == 3\n\n# Test cases to verify the correctness of the function\nassert dif_Square(5) == True, \"Test case 1 failed\"\nassert dif_Square(10) == False, \"Test case 2 failed\"\nassert dif_Square(15) == True, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef multiple_split(input_string):\n    # Define the pattern for splitting based on newlines, asterisks, spaces, and dots\n    pattern = r'\\s*\\*(?!\\w)|\\n|\\.'\n    # Use regex to split the input_string\n    result = re.split(pattern, input_string)\n    # Return all but the last element as it contains an extra newline character\n    return result[:-1]",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'sequence' is not defined"
    ],
    "generated_code": "def is_samepatterns(patterns, sequences):\n    return all(sequence.count(p) == pattern_count for p, pattern_count in zip(patterns, map(len, patterns)))\n\n# Test cases\nprint(is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])) # True\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])) # False\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])) # False",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_tuples(tuples_list, divisor):\n    filtered_tup = tuple(filter(lambda x: all(x[i] % divisor == 0 for i in range(len(x))), tuples_list))\n    if len(filtered_tup) > 0:\n        return str(list(filtered_tup)[0])\n    else:\n        return \"[]\"",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(length, width):\n    # Calculate the total area of all possible rectangles within the given dimensions.\n    total_area = length * width * 4\n    # Each square has an area equal to its side squared and there are four corners each with area 1\n    # The formula calculates the total number of squares including the inner ones which we don't want\n    num_squares = (length - 1) * (width - 1) + 4\n    # We divide by 4 because each square is counted 4 times\n    # Also add the areas for the sides of the outermost squares as they contribute to the corner squares\n    return int(total_area / 4) + sum([num_squares // 4 for _ in range(min(length, width))])",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Diff(num):\n    sum_even = sum(int(digit)**2 for digit in str(num) if int(digit)%2 == 0)\n    sum_odd = sum(int(digit)**2 for digit in str(num) if int(digit)%2 != 0)\n    return sum_even - sum_odd\n\n# Test cases\nprint(is_Diff(12345)) # Expected output: False\nprint(is_Diff(1212112)) # Expected output: True\nprint(is_Diff(1212)) # Expected output: False",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_With_Odd_SetBits(n):\n    # Initialize count of numbers with odd number of set bits\n    count = 0\n    \n    # Iterate through each bit position from 0 to 31 (for 32-bit integer)\n    for i in range(32):\n        # Calculate the mask for the current bit position\n        mask = 1 << i\n        \n        # Check if the least significant bit is set and increment the count if it is\n        if n & mask:\n            count += 1\n            \n            # If there's at least one more bit set than unset in the remaining portion,\n            # add half the remaining number of bits as they will have an even number of set bits.\n            if i < 31:\n                count += n >> i & 1\n    \n    return count",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    \"\"\"\n    Check if the length of the given word is odd.\n    \n    Parameters:\n    word (str): The word to be checked.\n    \n    Returns:\n    bool: True if the word's length is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula n * (n + 1) * (n + 2) / 6\n    result = round(n * (n + 1) * (n + 2) / 6)\n    return float(result)\n\n# Test cases\nprint(tetrahedral_number(5))  # Expected output: 35.0\nprint(tetrahedral_number(6))  # Expected output: 56.0\nprint(tetrahedral_number(7))  # Expected output: 84.0",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def zip_tuples(tup1, tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple where each element is a pair from \n    the original tuples.\n    \n    Args:\n        tup1 (tuple): The first tuple of elements.\n        tup2 (tuple): The second tuple of elements.\n        \n    Returns:\n        tuple: A new tuple containing pairs of elements from the input tuples.\n    \"\"\"\n    # Create an empty list to store the result\n    zipped_list = []\n    # Iterate through both tuples simultaneously\n    for elem1, elem2 in zip(tup1, tup2):\n        # Append the pair to the list\n        zipped_list.append((elem1, elem2))\n    # Convert the list back to a tuple and return it\n    return tuple(zipped_list)\n\n# Test cases\nprint(zip_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6)))  # Expected output: ((7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6))\nprint(zip_tuples((8, 9, 5, 6, 10, 11), (2, 6, 7)))  # Expected output: ((8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7))\nprint(zip_tuples((9, 10, 6, 7, 11, 12), (3, 7, 8)))  # Expected output: ((9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8))",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \n    Parameters:\n    - radius: The radius of the sphere\n    \n    Returns:\n    - The volume of the sphere as a float.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Char(s):\n    # Initialize result with 'a'\n    res = 'a'\n    \n    # Iterate through each character in the input string and add it to the result\n    for char in s:\n        res += char\n    \n    # Return the final result\n    return res",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev = 1\n        curr = 1\n        for i in range(3, n + 1):\n            temp = curr + prev\n            prev = curr\n            curr = temp\n        return curr\n\n# Test cases\nprint(sequence(10))  # Expected output: 6\nprint(sequence(2))   # Expected output: 1\nprint(sequence(3))   # Expected output: 2",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def centered_hexagonal_number(n):\n    # Calculate the nth centered hexagonal number using formula: n^2 + (n - 1)\n    result = n**2 + (n - 1)\n    return result",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Counter' is not defined",
      "Test 2: FAIL - name 'Counter' is not defined",
      "Test 3: FAIL - name 'Counter' is not defined"
    ],
    "generated_code": "def freq_count(lst):\n    return dict(Counter(lst))",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def closest_num(n):\n    \"\"\"\n    Finds the largest integer less than the given integer 'n'.\n    \n    Parameters:\n    - n (int): The target integer.\n    \n    Returns:\n    int: The largest integer less than 'n'.\n    \"\"\"\n    # Ensure n is always positive for simplicity\n    n = abs(n)\n    # Use math library's floor function to get the largest integer less than n\n    result = math.floor(n)\n    return result\n\n# Check function with provided data points to verify correctness\ndef check_solution():\n    assert closest_num(11) == 10, \"Test case 1 failed\"\n    assert closest_num(7) == 6, \"Test case 2 failed\"\n    assert closest_num(12) == 11, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_substring(string_list, substring):\n    return substring in string_list\n\n# Test cases\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\")) # True\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\")) # False\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\")) # True",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_undulating(s):\n    \"\"\"\n    Checks if the given string s is an undulating sequence.\n    \n    An undulating sequence has digits in strictly increasing order with one digit \n    repeated consecutively. For example, \"121\" and \"5556\" are undulating sequences,\n    while \"1234\" and \"98765\" are not.\n    \n    Parameters:\n    s (str): The input string to check.\n    \n    Returns:\n    bool: True if s is an undulating sequence, False otherwise.\n    \"\"\"\n    for i in range(1, len(s)):\n        if ord(s[i]) - ord(s[i-1]) != 1:\n            return False\n    return True\n\n# Check function with provided data points\nprint(is_undulating(\"1212121\")) # Expected output: True\nprint(is_undulating(\"1991\"))   # Expected output: False\nprint(is_undulating(\"121\"))    # Expected output: True",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_minimum(tuples_list):\n    min_index = 0\n    for i in range(1, len(tuples_list)):\n        if tuples_list[i][1] < tuples_list[min_index][1]:\n            min_index = i\n    return tuples_list[min_index][0]\n\n# Test cases\nprint(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))  # Expected output: 'Varsha'\nprint(index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]))     # Expected output: 'Dawood'\nprint(index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]))       # Expected output: 'Ayesha'",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min_Length' is not defined",
      "Test 2: FAIL - name 'Find_Min_Length' is not defined",
      "Test 3: FAIL - name 'Find_Min_Length' is not defined"
    ],
    "generated_code": "def find_min_length(sublists):\n    min_length = float('inf')\n    for lst in sublists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n\n# Test cases\nprint(find_min_length([[1],[1,2]])) # Output: 1\nprint(find_min_length([[1,2],[1,2,3],[1,2,3,4]])) # Output: 2\nprint(find_min_length([[3,3,3],[4,4,4,4]])) # Output: 3",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - object of type 'int' has no len()",
      "Test 2: FAIL - object of type 'int' has no len()",
      "Test 3: FAIL - object of type 'int' has no len()"
    ],
    "generated_code": "def frequency_lists(lists):\n    # Use Counter from collections module to count frequencies of elements in each sublist and then merge them into a single dictionary\n    return dict((i, sum(map(len, groups))) for i, groups in enumerate(map(set, lists)))",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_num(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product / len(nums)",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert the provided decimal number into its binary representation.\n    \n    Args:\n        decimal_number (int): The decimal number to be converted.\n        \n    Returns:\n        str: The binary representation of the decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return '0'\n    binary = ''\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary = str(remainder) + binary\n        decimal_number //= 2\n    return binary",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def next_smallest_palindrome(n):\n    \"\"\"\n    Find and return the next smallest palindrome greater than the given number.\n    \n    Args:\n    n (int): The input integer to start searching from.\n    \n    Returns:\n    int: The next smallest palindrome greater than n.\n    \"\"\"\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n + 1\n        n += 1\n\n# Check function with provided data points\nprint(next_smallest_palindrome(99))  # Expected output: 101\nprint(next_smallest_palindrome(1221))  # Expected output: 1331\nprint(next_smallest_palindrome(120))   # Expected output: 121",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def kth_element(arr, n, k):\n    # Sort the array\n    arr.sort()\n    \n    # Return the k-th element from the sorted array\n    return arr[k-1]\n\n# Test cases\nprint(kth_element([12,3,5,7,19], 5, 2))  # Output: 3\nprint(kth_element([17,24,8,23], 4, 3))   # Output: 8\nprint(kth_element([16,21,25,36,4], 5, 4)) # Output: 36",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def snake_to_camel(snake_str):\n    # Split the snake_case string into words\n    words = snake_str.split('_')\n    \n    # Capitalize each word except the first one and join them together\n    return ''.join(word.capitalize() for word in words)",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def eulerian_num(n, m):\n    if n == 0:\n        return [m]\n    elif m == 0:\n        return []\n    else:\n        ans = []\n        for i in range(m + 1):\n            sub_ans = eulerian_num(n - 1, max(0, i))\n            for num in sub_ans:\n                ans.append(i * num)\n        return ans\n\n# Test cases\nprint(eulerian_num(3, 1))  # Output: [4, 3, 2, 1]\nprint(eulerian_num(4, 1))  # Output: [11, 8, 6, 4, 2]\nprint(eulerian_num(5, 3))  # Output: [26, 27, 24, 21, 18, 15, 12, 9, 6, 3, 0]",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count' is not defined",
      "Test 2: FAIL - name 'count' is not defined",
      "Test 3: FAIL - name 'count' is not defined"
    ],
    "generated_code": "def count_true_booleans(lst):\n    # Initialize a counter for true values\n    count = lst.count(True)\n    \n    return count",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_lists(lst, tpl):\n    result = list(tpl) + lst\n    return tuple(result)\n\n# Test cases\nprint(add_lists([5, 6, 7], (9, 10)))  # Expected output: (9, 10, 5, 6, 7)\nprint(add_lists([6, 7, 8], (10, 11)))  # Expected output: (10, 11, 6, 7, 8)\nprint(add_lists([7, 8, 9], (11, 12)))  # Expected output: (11, 12, 7, 8, 9)",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        if len(hex(num)[2:]) % 2 == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\nfrom heapq import heappush, heappop\n\ndef merge_sorted_list(arrays):\n    \"\"\"\n    Merge multiple sorted arrays into one sorted list.\n    \n    :param arrays: List[List[int]], each inner list is a sorted array.\n    :return: List[int], the merged sorted array.\n    \"\"\"\n    result = []\n    min_heap = [(array[0], idx) for idx, array in enumerate(arrays)]\n    heappush(min_heap, (arrays[0][0], 0))\n    while min_heap:\n        value, idx = heappop(min_heap)\n        result.append(value)\n        if len(arrays[idx]) > 1:\n            next_value = arrays[idx].pop(0)\n            heappush(min_heap, (next_value, idx))\n    return result\n\n# Check function with provided data points\nprint(merge_sorted_list([[25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]])) # Expected: [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 48, 54, 56, 110, 154, 233]\nprint(merge_sorted_list([[1, 3, 5, 6, 8, 9],[2, 5, 7, 11],[1, 4, 7, 8, 12]])) # Expected: [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nprint(merge_sorted_list([[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 5",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Equivalent(binary_str, n):\n    count = 0\n    for i in range(n//2 + 1):  # Count pairs of equal digits from start and end\n        if binary_str[i] == binary_str[-i-1]:\n            count += 1\n    for i in range(1, n%2+1):  # Count remaining single digit pair from middle\n        if binary_str[0:i] != binary_str[n-i:]:\n            count += 1\n    return count\n\n# Test cases\nprint(odd_Equivalent(\"011001\", 6))  # Output: 3\nprint(odd_Equivalent(\"11011\", 5))   # Output: 4\nprint(odd_Equivalent(\"1010\", 4))    # Output: 2",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'range_list' is not defined"
    ],
    "generated_code": "def extract_missing(list_of_ranges, new_start, new_end):\n    def get_range(start, end):\n        result = []\n        for i in range(max(0, start - 1), min(end + 1, len(range_list)) + 1):\n            if (range_list[i] != start) and (range_list[i] != end):\n                result.append((start, range_list[i]))\n                result.append((range_list[i], end))\n        return result\n    \n    # Sort all range lists based on their starting points\n    sorted_lists = sorted([l for r in list_of_ranges for l in [r]], key=lambda x: x[0])\n    \n    # Combine the ranges of each range list into one range\n    combined_list = []\n    prev = None\n    for l in sorted_lists:\n        current = get_range(l[0], l[1])\n        if prev is not None:\n            for c in reversed(current):\n                combined_list.remove(c)\n        for c in current:\n            combined_list.append(c)\n        prev = l[-1]\n    \n    final_result = []\n    for i in range(len(combined_list)):\n        if i == 0:\n            continue\n        if combined_list[i][0] - combined_list[i-1][-1] > 1:\n            final_result.append(combined_list[i-1])  \n            final_result.append(combined_list[i])\n    if final_result:\n        final_result.append(combined_list[-1])\n    else:\n        final_result.append((new_start, new_end))\n\n    return final_result\n\n# Example usage\nlist_of_ranges = [(6, 9), (15, 34), (48, 70)]\nnew_start, new_end = 2, 100\nprint(extract_missing(list_of_ranges, new_start, new_end))",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_in_nested_lists(nested_lists):\n    # Flatten the nested lists and convert each sublist into a set for faster lookup\n    flattened_set = {item for sublist in nested_lists for item in sublist}\n    \n    # Find common items between all sublists using intersection\n    common_items = set(flattened_set) & set.intersection(*map(set, nested_lists))\n    \n    return list(common_items)",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perimeter(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder given its radius and height.\n    \n    Parameters:\n        r (float): The radius of the cylinder's base.\n        h (float): The height of the cylinder.\n        \n    Returns:\n        float: The total surface area of the cylinder.\n    \"\"\"\n    # Surface Area of a Cylinder formula: 2 * pi * r * (r + h)\n    return 2 * 3.14159 * r * (r + h)\n\n# Test cases\nprint(perimeter(2, 4))  # Expected output: 12\nprint(perimeter(1, 2))  # Expected output: 6\nprint(perimeter(3, 1))  # Expected output: 8",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def assign_freq(tuple_list):\n    # Create an empty dictionary to store tuples and their frequencies\n    freq_dict = {}\n    \n    # Iterate through each tuple in the input list\n    for t in tuple_list:\n        # Calculate the sum of elements in the tuple\n        sum_t = sum(t)\n        \n        # Increment the count of the tuple in the dictionary with its current value as key\n        if sum_t in freq_dict:\n            freq_dict[sum_t] += 1\n        else:\n            freq_dict[sum_t] = 1\n    \n    # Convert the dictionary keys to a list\n    result = [k for k, v in sorted(freq_dict.items())]\n    \n    # Return the sorted list of tuples with their assigned frequencies\n    return ['(' + ','.join(map(str, t)) + ',' + str(v) + ')' for t, v in zip(result[:-1], result[1:])]\n\n# Test the function with provided data points\nprint(assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9,), (2, 7)]))",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'empty_dit' is not defined",
      "Test 2: FAIL - name 'empty_dit' is not defined",
      "Test 3: FAIL - name 'empty_dit' is not defined"
    ],
    "generated_code": "def empty_dictionaries(dicts_list):\n    # Check if every dictionary is empty\n    return all(not d for d in dicts_list)\n\n# Test cases\nprint(empty_dictionaries([{}, {}, {}]))  # Expected output: True\nprint(empty_dictionaries([{1, 2}, {}, {}]))  # Expected output: False\nprint(empty_dictionaries([]))  # Expected output: True",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n\n# Test cases\nprint(tuple_to_int((1,2,3)))  # Expected output: 123\nprint(tuple_to_int((4,5,6)))  # Expected output: 456\nprint(tuple_to_int((5,6,7)))  # Expected output: 567",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_to_float(lst):\n    result = []\n    for i, j in lst:\n        try:\n            num_i, num_j = float(i), float(j)\n            if isinstance(num_i, float) and isinstance(num_j, float):\n                result.append((num_i, num_j))\n            else:\n                raise ValueError()\n        except ValueError:\n            continue\n    return result",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_list(input_string):\n    # Split the input string by space and return the result as a list\n    return input_string.split()",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search(nums, n):\n    i = 0\n    while i < n:\n        if nums[i] == nums[nums[i]]:\n            i += 1\n            continue\n        temp = nums[i]\n        nums[i] = nums[temp]\n        nums[temp] = temp\n    for j in range(n - 1, -1, -1):\n        if nums[j] != j:\n            return j\n    return -1",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef max_product_tuple(tuples_list: List[Tuple[int]]) -> int:\n    \"\"\"\n    Finds the maximum product of two numbers from different tuples in the given list.\n    \n    Args:\n    tuples_list: A list of tuples where each tuple contains at least one integer.\n    \n    Returns:\n    The maximum product of two integers from different tuples.\n    \"\"\"\n    return max(a * b for a, b in tuples_list)\n\n# Check function with provided data points\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\nassert max_product_tuple([(10, 20), (15, 2), (5, 10)]) == 200\nassert max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]) == 484",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - check_triplet() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def check_triplet(arr, target_sum, k): \n    arr.sort() # Sort the array to use two-pointer technique\n    n = len(arr)\n    \n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            \n            if current_sum == target_sum and abs(current_sum - k) <= target_sum:\n                return True\n            \n            elif current_sum < target_sum:\n                left += 1\n                \n            else:\n                right -= 1\n    \n    return False",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'smartNumber' is not defined",
      "Test 2: FAIL - name 'smartNumber' is not defined",
      "Test 3: FAIL - name 'smartNumber' is not defined"
    ],
    "generated_code": "def smart_number(n):\n    result = 0\n    for i in range(1, n + 1):\n        num = 3 * i ** 3 - 3 * i ** 2 + 9 * i - 6\n        if num >= n:\n            break\n        result += num\n    return result",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def is_amicable(num):\n    def get_divisors(n):\n        divisors = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n        return divisors\n\n    d = get_divisors(num)\n    divisor_sum = sum(d)\n    divisors_set = set(d)\n\n    # Check if num and divisor_sum are not perfect squares\n    if math.isqrt(divisor_sum)**2 != divisor_sum:\n        return False\n    \n    s = sum(get_divisors(divisor_sum))\n    \n    return True if divisor_sum != num and divisor_sum != num - 1 else False\n\ndef amicable_numbers_sum(limit):\n    total_sum = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            total_sum += num\n    return total_sum",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import cmath\n\ndef angle_complex(real, imag):\n    \"\"\"\n    Calculate the argument of a complex number.\n    \n    Args:\n    real (float): The real part of the complex number.\n    imag (float): The imaginary part of the complex number.\n    \n    Returns:\n    float: The angle in radians of the complex number.\n    \"\"\"\n    return cmath.phase(complex(real, imag))\n\n# Test cases\nassert abs(angle_complex(0, 1) - cmath.pi/2) < 1e-9\nassert abs(angle_complex(2, 1) - cmath.asin(1/2)) < 1e-9\nassert abs(angle_complex(0, 2) - cmath.pi/2) < 1e-9\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_length(binary_str, length):\n    max_diff = 0\n    current_diff = [binary_str.count('0'), binary_str.count('1')]\n    \n    for i in range(length):\n        if i < len(binary_str) - 1:\n            if binary_str[i] == '0':\n                current_diff[0] += 1\n            else:\n                current_diff[1] -= 1\n            \n            diff = abs(current_diff[0] - current_diff[1])\n            \n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "import math\n\ndef sum_of_common_divisors(num1, num2):\n    # Find all divisors of both numbers and calculate their sum\n    def get_divisors(n):\n        divisors = set()\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n    \n    divisor_set1 = get_divisors(num1)\n    divisor_set2 = get_divisors(num2)\n    \n    result = sum(divisor_set1.intersection(divisor_set2))\n    return result\n\n# Check with provided test cases\nassert sum_of_common_divisors(10, 15) == 6\nassert sum_of_common_divisors(100, 150) == 93\nassert sum_of_common_divisors(4, 6) == 3",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_int(a, b):\n    if b == 0:\n        return 0\n    result = 0\n    for _ in range(b):\n        result += a\n    return result",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, lst):\n    # Filter out words shorter than n and return the remaining ones\n    return [word for word in lst if len(word) > n]",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def is_magic_square(matrix):\n    \"\"\"\n    Check if a given matrix is a magic square.\n    \n    Args:\n    matrix (list of list of int): A 4x4 matrix representing the board for a magic square.\n    \n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    def sum_row(col):\n        return sum(row[col] for row in matrix)\n\n    def sum_col(index):\n        return sum(matrix[row][index] for row in range(4))\n\n    def sum_diagonal():\n        return sum(matrix[i][i] for i in range(4)) + sum(matrix[i][3-i] for i in range(4))\n\n    def sum_reverse_diagonal():\n        return sum(matrix[i][i] for i in range(4)) - sum(matrix[i][3-i] for i in range(4))\n\n    # Check sums and diagonals\n    if len(set(map(sum_row, range(4)))) != 1 or len(set(map(sum_col, range(4)))) != 1 \\\n       or sum_row(1) != sum_col(0) or sum_row(1) != sum_col(3) \\\n       or abs(sum_row(1) - sum_diagonal()) > 1 or abs(sum_row(1) - sum_reverse_diagonal()) > 1:\n        return False\n\n    return True\n\n# Test cases\nprint(is_magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))\nprint(is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))\nprint(is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 7]]))",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(lst):\n    from collections import Counter\n    counter = Counter(lst)\n    return max(counter.items(), key=lambda x: x[1])\n\n# Test cases\nprint(max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])) # Expected output: (2, 5)\nprint(max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])) # Expected output: (8, 2)\nprint(max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])) # Expected output: (20, 3)",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_vowels(s):\n    \"\"\"\n    Reverses the vowels in the given string s.\n    \n    Parameters:\n    s (str): The input string\n    \n    Returns:\n    str: The string with vowels reversed\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    # Convert the string into a list for easier manipulation\n    char_list = list(s)\n    left, right = 0, len(char_list) - 1\n    \n    while left < right:\n        if char_list[left] not in vowels:\n            left += 1\n        elif char_list[right] not in vowels:\n            right -= 1\n        else:\n            char_list[left], char_list[right] = char_list[right], char_list[left]\n            left += 1\n            right -= 1\n            \n    return ''.join(char_list)\n\n# Check function with provided data points\nassert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\nassert reverse_vowels(\"USA\") == \"ASU\", \"Test case 2 failed\"\nassert reverse_vowels(\"ab\") == \"ab\", \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'reduce' is not defined"
    ],
    "generated_code": "def sum_negativenum(numbers):\n    # Use filter to get all negative numbers and map them to their absolute values,\n    # then use reduce to add up these numbers.\n    return reduce(lambda x, y: x + y, map(abs, filter(lambda x: x < 0, numbers)))\n\n# Test cases\nprint(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))  # Output should be -32\nprint(sum_negativenum([10,15,-14,13,-18,12,-20]))            # Output should be -52\nprint(sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190]))  # Output should be -894",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 2: '5'",
      "Test 2: FAIL - invalid literal for int() with base 2: '2'",
      "Test 3: FAIL - invalid literal for int() with base 2: '2'"
    ],
    "generated_code": "def check_last(arr, n, p):\n    # Convert each number in the list to its binary representation.\n    # The length of the binary representation determines if it's even or odd.\n    result = [int(x, 2) % 2 for x in map(str, arr)]\n    \n    # Check the last value which represents the parity of the original number at index n.\n    return 'ODD' if result[-1] == 1 else 'EVEN'",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_hexagonal(num):\n    \"\"\"\n    Helper function to check if a given number is a hexagonal number.\n    \n    :param num: Integer\n    :return: Boolean\n    \"\"\"\n    x = ((2 * num + 1)**0.5 - 1) / 2\n    return x.is_integer()\n\ndef hexagonal_num(n):\n    \"\"\"\n    Finds the nth hexagonal number.\n    \n    :param n: Integer representing the position in the sequence of hexagonal numbers.\n    :return: Integer which is the nth hexagonal number.\n    \"\"\"\n    # The formula for calculating the nth hexagonal number is (2n^2 - n)\n    return int((2 * n**2 - n))\n\n# Test cases\nprint(hexagonal_num(10))  # Expected output: 190\nprint(hexagonal_num(5))   # Expected output: 45\nprint(hexagonal_num(7))   # Expected output: 91",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_electbill(amount):\n    # Calculating electricity bill based on usage\n    return round((amount * 10 + amount // 10) / 2)",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef zero_count(arr: List[int]) -> float:\n    count = arr.count(0)\n    return count / len(arr) if arr else 0",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is equal to 1, which cannot be represented as sum of non-zero powers of 2\n    if n == 1:\n        return False\n    \n    # Iterate through all possible values up to sqrt(n)\n    for i in range(1, int(n**0.5)+1):\n        # If i divides n and n/i also divides itself, then it can be represented as sum of two powers of 2\n        if n % i == 0 and (n // i)**2 == n:\n            return True\n    \n    return False",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculates and returns the circumference of a circle given its radius.\n    \n    Args:\n    radius (float): The radius of the circle.\n    \n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_singly(tuple_list):\n    result = []\n    for tup in tuple_list:\n        # Convert each tuple to a set and find the size of the set which represents unique values.\n        # Then convert back to a list and add it to the result.\n        temp_result = list(set(tup))\n        result.extend(temp_result)\n    return result",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def flip(arr, index):\n    \"\"\"\n    Flip the array from index+1 to the end.\n    \"\"\"\n    for i in range(index + 1):\n        arr[i], arr[index - i] = arr[index - i], arr[i]\n\ndef pancake_sort(arr):\n    \"\"\"\n    Sorts an array 'arr' in ascending order using pancake sort algorithm.\n    \n    Args:\n    arr -- List[int]: The unsorted array to be sorted.\n    \n    Returns:\n    List[int]: The sorted array.\n    \"\"\"\n    while len(arr) > 1:\n        max_index = arr.index(max(arr))\n        \n        # Flip up to the maximum element to move it to its correct position\n        if max_index != 0:\n            flip(arr, max_index)\n        \n        # Flip all the way to the beginning to put the largest number at its correct position\n        flip(arr, len(arr)-1)\n    \n    return arr",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_samepair(lst1, lst2, lst3):\n    # Count the occurrences of each element in all three lists\n    counts = {}\n    for num in lst1 + lst2 + lst3:\n        if num not in counts:\n            counts[num] = 0\n        counts[num] += 1\n    \n    # Calculate the number of same pairs in all three lists\n    return sum(counts.get(num, 0) * (counts.get(num, 0) - 1) // 2 for num in counts)",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_lists(tup):\n    # Initialize count to zero\n    count = 0\n    \n    # Iterate through each item in the tuple\n    for i in tup:\n        # If the item is a list, increment the count\n        if isinstance(i, list):\n            count += 1\n            \n    # Return the final count\n    return count",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - sum_Pairs() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - sum_Pairs() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - sum_Pairs() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef sum_Pairs(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = sum(arr)\n    squared_total = sum(x ** 2 for x in arr)\n\n    # Using the formula derived from summing squares and products of sums of pairs\n    sum_of_pairs_abs_diff = (n * ((total_sum ** 2) - (squared_total))) // 4\n\n    return sum_of_pairs_abs_diff",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def max_Abs_Diff(arr, k):\n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(len(arr)):\n        diff = abs(k - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Test cases\nprint(max_Abs_Diff([2,1,5,3], 4))  # Output: 4\nprint(max_Abs_Diff([9,3,2,5,1], 5))  # Output: 8\nprint(max_Abs_Diff([3,2,1], 3))  # Output: 2",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ascii_value_string(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    return sum(ord(char) for char in s)",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_path_sum(triangle: List[List[int]], i: int, j: int) -> int:\n    if i == len(triangle)-1:\n        return triangle[i][j]\n    \n    left = triangle[i+1][j] + max(max_path_sum(triangle, i+1, j), max_path_sum(triangle, i+1, j+1))\n    right = triangle[i+1][j+1] + max(max_path_sum(triangle, i+1, j+1), max_path_sum(triangle, i+1, j))\n\n    return triangle[i][j] + min(left, right)\n\n# Test cases\ntriangle_1 = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]\nprint(max_path_sum(triangle_1, 0, 0)) # Output: 14\n\ntriangle_2 = [[13, 0, 0], [7, 4, 0], [2, 4, 6]]\nprint(max_path_sum(triangle_2, 0, 0)) # Output: 24\n\ntriangle_3 = [[2, 0, 0], [11, 18, 0], [21, 25, 33]]\nprint(max_path_sum(triangle_3, 0, 0)) # Output: 53",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits_twoparts(n):\n    # Initialize variables to store the maximum split point and result\n    max_split = -1\n    result = 0\n    \n    # Iterate from the highest digit to the lowest to find the optimal split\n    for i in range(len(str(n)), 0, -1):\n        part_1 = int(str(n)[:i])\n        part_2 = n - part_1\n        \n        # Calculate the sum of digits of both parts\n        if sum(int(digit) for digit in str(part_1)) + sum(int(digit) for digit in str(part_2)) > result:\n            max_split = i\n            result = sum(int(digit) for digit in str(part_1)) + sum(int(digit) for digit in str(part_2))\n    \n    return result",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import deque\n\ndef longest_subseq_with_diff_one(arr, diff):\n    if not arr:\n        return 0\n    \n    dp = [0] * len(arr)\n    \n    q = deque()\n    for i in range(len(arr)):\n        while q and abs(q[0][1] - arr[i]) > diff:\n            q.popleft()\n        \n        if q:\n            dp[i] = max(dp[q[0][0]], q[0][0] + 1)\n            \n        if q:\n            dp[i] += 1\n        \n        q.append((i, arr[i]))\n    \n    return max(dp)\n\n# Test cases\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7))  # Output: 6\nprint(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7))  # Output: 3\nprint(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8))  # Output: 7",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'does_Contain_B' is not defined",
      "Test 2: FAIL - name 'does_Contain_B' is not defined",
      "Test 3: FAIL - name 'does_Contain_B' is not defined"
    ],
    "generated_code": "def does_contain_b(n, start, end):\n    \"\"\"\n    This function checks if the given integer n is within the range [start, end].\n    \n    Parameters:\n    n (int): The integer to check.\n    start (int): The starting value of the range.\n    end (int): The ending value of the range.\n    \n    Returns:\n    bool: True if n is within the range, False otherwise.\n    \"\"\"\n    # Check if n is less than start and greater than end\n    return start <= n <= end",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_coprime(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    return gcd(x, y) == 1",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    merge_sort(left_half)\n    merge_sort(right_half)\n    \n    i = j = k = 0\n    \n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] < right_half[j]:\n            arr[k] = left_half[i]\n            i += 1\n        else:\n            arr[k] = right_half[j]\n            j += 1\n        k += 1\n        \n    while i < len(left_half):\n        arr[k] = left_half[i]\n        i += 1\n        k += 1\n        \n    while j < len(right_half):\n        arr[k] = right_half[j]\n        j += 1\n        k += 1\n        \n    return arr\n\n# Test cases\nprint(merge_sort([3, 4, 2, 6, 5, 7, 1, 9]))  # Expected output: [1, 2, 3, 4, 5, 6, 7, 9]\nprint(merge_sort([7, 25, 45, 78, 11, 33, 19]))  # Expected output: [7, 11, 19, 25, 33, 45, 78]\nprint(merge_sort([3, 1, 4, 9, 8]))  # Expected output: [1, 3, 4, 8, 9]",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parabola_vertex(a,b,c):\n    x = -b / (2*a)\n    y = a*x**2 + b*x + c\n    return(x, y)\n\n# Test cases\nprint(parabola_vertex(5,3,2)) # Expected output: (-0.3, 1.55)\nprint(parabola_vertex(9,8,4)) # Expected output: (-0.4444444444444444, 2.2222222222222223)\nprint(parabola_vertex(2,4,6)) # Expected output: (-1.0, 4.0)",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate list (not \"int\") to list",
      "Test 2: FAIL - can only concatenate list (not \"int\") to list",
      "Test 3: FAIL - can only concatenate list (not \"int\") to list"
    ],
    "generated_code": "def specified_element(matrix, index):\n    # Extract elements at the specified index position in each sublist and concatenate them into a single list.\n    return sum([row[index] for row in matrix], [])",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Loop through each bit position from 31 down to 0\n    for i in range(31, -1, -1):\n        # Check if the current bit is even (i.e., divisible by 2)\n        if n & (1 << i):\n            # Toggle the bit and add '1' to the result\n            result += '1'\n        else:\n            # Toggle the bit and add '0' to the result\n            result += '0'\n    \n    # Return the result as an integer\n    return int(result, 2)\n\n# Test cases\nprint(even_bit_toggle_number(10))  # Expected output: 0\nprint(even_bit_toggle_number(20))  # Expected output: 30\nprint(even_bit_toggle_number(30))  # Expected output: 20",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def tuple_int_str(tup_of_strings):\n    return tuple(map(int, tup_of_strings))\n\n# Test cases\nassert tuple_int_str(([('333', '33'), ('1416', '55')])) == ((333, 33), (1416, 55))\nassert tuple_int_str(([('999', '99'), ('1000', '500')])) == ((999, 99), (1000, 500))\nassert tuple_int_str(([('666', '66'), ('1500', '555')])) == ((666, 66), (1500, 555))",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def encode_list(lst):\n    result = []\n    current_char = lst[0]\n    count = 1\n    \n    for i in range(1, len(lst)):\n        if lst[i] == current_char:\n            count += 1\n        else:\n            result.append([count, current_char])\n            current_char = lst[i]\n            count = 1\n            \n    result.append([count, current_char])  # Append the last group of characters and their count\n    return result\n\nassert encode_list([1,1,2,3,4,4.3,5,1]) == [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically') == [[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python') == [[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Ops(arr, n, k):\n    total_sum = sum(arr)\n    if total_sum % k != 0:\n        return -1\n    \n    mean = total_sum // k\n    count_ops = 0\n    \n    for num in arr:\n        diff = abs(num - mean)\n        count_ops += diff * k // len(arr)\n    \n    return count_ops",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def month_season(month, day):\n    seasons = {'January': 'winter', 'February': 'winter', 'March': 'spring',\n               'April': 'spring', 'May': 'summer', 'June': 'summer',\n               'July': 'summer', 'August': 'autumn', 'September': 'autumn',\n               'October': 'autumn', 'November': 'fall', 'December': 'fall'}\n    \n    return seasons[month] if 1 <= int(day) <= 31 else \"Invalid date\"\n\n# Test cases\nprint(month_season('January', 4))   # Expected output: 'winter'\nprint(month_season('October', 28))  # Expected output: 'autumn'\nprint(month_season('June', 6))      # Expected output: 'spring'",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(x, y):\n    return (x * y) // gcd(x, y)\n\ndef solution(a, b, n):\n    # Find the greatest common divisor of a and b\n    g = gcd(a, b)\n    \n    # Calculate the least common multiple of a and b\n    l = lcm(a, b)\n    \n    # Check if there is no solution for the equation\n    if n % g != 0:\n        return 'No solution'\n    \n    # Calculate the values of x and y using the equations derived from the GCD and LCM\n    x = ((n - a // g * b) // b)\n    y = (((a - b * x) * l) // g)\n    \n    return f\"x = {x}, y = {y}\"",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n\n# Test cases\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10], [2,4,6,8])) # Expected output: [1, 3, 5, 7, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])) # Expected output: [2, 4, 6, 8, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5,7])) # Expected output: [1, 2, 3, 4, 6, 8, 9, 10]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    total_sum = 0\n    while n >= 0:\n        total_sum += n\n        n -= 2\n    return total_sum",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef area_polygon(sides, length):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \n    Args:\n    sides (int): The number of sides of the polygon.\n    length (float): The length of each side.\n    \n    Returns:\n    float: The area of the polygon.\n    \"\"\"\n    return 0.25 * sides * length ** 2 / math.tan(math.pi / sides)\n\n# Test cases\nprint(area_polygon(4,20)) # Expected output: 400.00000000000006\nprint(area_polygon(10,15)) # Expected output: 1731.1969896610804\nprint(area_polygon(9,7))   # Expected output: 302.90938549487214",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def areEquivalent(num1, num2):\n    # Calculate sum of divisors for both numbers\n    divisor_sum_1 = sum([i for i in range(1, num1 + 1) if num1 % i == 0])\n    divisor_sum_2 = sum([i for i in range(1, num2 + 1) if num2 % i == 0])\n    \n    # Check if the sums are equal\n    return divisor_sum_1 == divisor_sum_2",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def count_char_position(s):\n    \"\"\"\n    This function takes a string 's' and returns the number of characters in the same position when compared with \n    the corresponding characters in an English alphabet.\n    \n    Parameters:\n    s (str): The input string to compare.\n    \n    Returns:\n    int: The count of characters at the same positions as in an English alphabet.\n    \"\"\"\n    result = 0\n    for i in range(len(s)):\n        if ord('A') <= ord(s[i]) <= ord('Z') or ord('a') <= ord(s[i]) <= ord('z'):\n            result += 1\n    return result\n\n# Check function with provided data points\nassert count_char_position(\"xbcefg\") == 2, \"Test case 1 failed\"\nassert count_char_position(\"ABcED\") == 3, \"Test case 2 failed\"\nassert count_char_position(\"AbgdeF\") == 5, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - KeyError: 0"
    ],
    "generated_code": "def find_even_Pair(arr, target):\n    # Initialize counters for odd and even numbers\n    odd_count = 0\n    even_count = 0\n    \n    # Count how many times each element appears in the array\n    freq_map = {}\n    \n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        # Check if the XOR of all elements up to the current index is even\n        xor_sum = sum(freq_map[num] for num in range(num + 1))\n        \n        if xor_sum % 2 == 0:\n            even_count -= 1\n    \n    return even_count - odd_count\n\n# Test cases\nprint(find_even_Pair([5,4,7,2,1],5))  # Expected output: 4\nprint(find_even_Pair([7,2,8,1,0,5,11],7))  # Expected output: 9\nprint(find_even_Pair([1,2,3],3))  # Expected output: 1",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    while n % 2 == 0 and n != 0:\n        n >>= 1\n    return n << 1",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr, num):\n    count = arr.count(num)\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev, curr = 0, 1\n        for _ in range(2, n + 1):\n            next_term = 2 * prev + curr\n            prev, curr = curr, next_term\n        return curr\n\n# Test cases\nprint(get_pell(4)) # Expected output: 12\nprint(get_pell(7)) # Expected output: 169\nprint(get_pell(8)) # Expected output: 408",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_range_list(arr, start_index, end_index):\n    return sum(arr[start_index:end_index+1])",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def perimeter_pentagon(sides):\n    \"\"\"\n    Calculate the perimeter of a pentagon given the length of each side.\n    \n    Parameters:\n    sides (list): A list containing five positive numbers representing the lengths of the sides of the pentagon.\n    \n    Returns:\n    int: The perimeter of the pentagon.\n    \"\"\"\n    return sum(sides)\n\n# Test cases\nprint(perimeter_pentagon([5]))  # Expected output: 25\nprint(perimeter_pentagon([10])) # Expected output: 50\nprint(perimeter_pentagon([15])) # Expected output: 75",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_occurance(s):\n    # Initialize a counter for occurrences\n    occurrence = 0\n    \n    # Iterate through the string starting from index 0\n    for i in range(len(s)):\n        # Check if the substring \"std\" is at position i\n        if s[i:i+3] == \"std\":\n            occurrence += 1\n            \n    return occurrence",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_splchar(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n\n# Test cases\nprint(remove_splchar('python  @#&^%$*program123')) # Output: 'pythonprogram123'\nprint(remove_splchar('python %^$@!^&*()  programming24%$^^()    language')) # Output: 'pythonprogramming24language'\nprint(remove_splchar('python   ^%&^()(+_)(_^&67)                  program')) # Output: 'python67program'",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_keyvalue(keyvalue_pairs):\n    result = {}\n    for key, value in keyvalue_pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char not in mapping:\n            stack.append(char)\n        elif not stack or mapping[char] != stack.pop():\n            return False\n    \n    return len(stack) == 0",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_triangle(a, b, c):\n    # Calculate and return the perimeter of the triangle\n    return a + b + c",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lcm(x, y):\n    # Compute LCM using GCD\n    return x * y // gcd(x, y)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef answer(start, end):\n    for i in range(max(2, start), end + 1):\n        if gcd(i, max(2, start)) == 1 and lcm(i, max(2, start)) > start and lcm(i, max(2, start)) < end:\n            return (i, lcm(i, max(2, start)))\n    \n    return None",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef string_literals(patterns, input_string):\n    for pattern in patterns:\n        if re.search(pattern, input_string):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_num_keith(num):\n    def reverse_number(n):\n        return int(str(n)[::-1])\n\n    k = num\n    sum_digits = 0\n    while k > 0:\n        digit = k % 10\n        sum_digits += digit ** 2\n        k //= 10\n\n    # Reversing the original number and squaring each digit\n    reversed_squared_sum = reverse_number(sum_digits) ** 2\n    # Checking if the reversed squared sum equals the original number\n    return num == reversed_squared_sum\n\n# Test cases\nprint(is_num_keith(14))  # Output: True\nprint(is_num_keith(12))  # Output: False\nprint(is_num_keith(197))  # Output: True",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # Convert decimal degrees to radians\n    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])\n    \n    # Haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    \n    # Radius of Earth in kilometers is taken as 6371\n    r = 6371\n    return c * r",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_prefix(strs, n):\n    if not strs:\n        return \"\"\n    \n    # Sort the list of strings\n    sorted_strs = sorted(strs)\n    \n    # Compare characters at the first and last strings after sorting\n    first_str = sorted_strs[0][:n]\n    last_str = sorted_strs[-1][:n]\n    \n    # Find the common prefix between the first and last string\n    for i in range(n):\n        if first_str[i] != last_str[i]:\n            return first_str[:i]\n    \n    return first_str\n\n# Test cases\nprint(common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4))  # Expected output: 'ta'\nprint(common_prefix([\"apples\", \"ape\", \"april\"], 3))  # Expected output: 'ap'\nprint(common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3))  # Expected output: 'teen'",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_character(s):\n    # Uppercase characters\n    upper_case = [char for char in s if char.isupper()]\n    \n    # Lowercase characters\n    lower_case = [char for char in s if char.islower()]\n    \n    # Special characters\n    special_characters = [char for char in s if not char.isalnum()]\n    \n    # Numeric characters\n    numeric_characters = [char for char in s if char.isdigit()]\n    \n    return (upper_case, lower_case, special_characters, numeric_characters)",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from collections import defaultdict\n\ndef count_pairs(arr, k, x):\n    \"\"\"\n    Counts the number of unique pairs (a, b) in the given list 'arr' such that:\n    - a and b are distinct elements from arr.\n    - The absolute difference between a and b is exactly 'k'.\n    \n    :param arr: List[int] -- the input list of integers\n    :param k: int -- an integer representing the target difference\n    :param x: int -- an additional parameter for specific use case\n    :return: int -- the count of valid pairs\n    \"\"\"\n    pair_count = 0\n    num_set = set()\n    \n    for num in arr:\n        if num + k not in num_set and num - k not in num_set:\n            pair_count += 1\n        num_set.add(num)\n    \n    return pair_count\n\n# Test cases to verify the correctness of the solution\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def greater_specificnum(nums, num):\n    # Iterate through each item in the list and compare it with the specified number.\n    for i in nums:\n        if i > num:\n            return True\n    # If no items are greater than the specified number, return False.\n    return False",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_focus(a,b,c):\n    return ((-b/(2*a)), (-c/(4*a)))",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef check_literals(text, keywords):\n    # Create a regular expression pattern with each keyword as a separate group\n    pattern = '|'.join(keywords)\n    \n    # Search for each keyword in the text\n    for word in keywords:\n        if re.search(word, text):\n            return f'Matched! ({word})'\n    \n    return 'Not Matched!'\n\n# Test cases\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['fox']))  # Should return \"Matched! (fox)\"\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['horse']))  # Should return \"Not Matched!\"\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['lazy']))  # Should return \"Matched!\"",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def longest_common_subsequence(text1, text2, m, n):\n    # Initialize the DP table with zeros\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Fill the first row and first column of the DP table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                \n    # Reconstruct the LCS from the DP table\n    index = dp[m][n]\n    lcs = [\"\"] * (index + 1)\n    lcs[index] = \"\"\n    \n    i, j = m, n\n    while i > 0 and j > 0:\n        if text1[i - 1] == text2[j - 1]:\n            lcs[index - 1] = text1[i - 1]\n            i -= 1\n            j -= 1\n            index -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n            \n    return \"\".join(lcs)\n\n# Example usage\nprint(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7))  # Output: \"GTAB\"\nprint(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6))   # Output: \"ADH\"\nprint(longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4))       # Output: \"AY\"",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def prod_Square(n):\n    # Check if n is less than 0 and even, then it cannot be represented as a product of two squares.\n    if n < 0 and n % 2 == 0:\n        return False\n    \n    for i in range(int(n**0.5), 0, -1):  # Loop from sqrt(n) down to 1\n        j = int((n / i)**0.5)\n        if i * j == n:\n            return True\n    \n    return False",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Missing_Positive(arr, n):\n    for i in range(n):  \n        while(1 <= arr[i] <= n and arr[arr[i]-1] != arr[i]): \n            swap(arr, i, arr[i] - 1)\n    res = []\n    for i in range(n):  \n        if (arr[i] != i + 1): \n            res.append(i+1)\n    return len(res)\n\n# Function to swap elements at index i and j of array arr[]\ndef swap(arr, i, j): \n\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Intgral_Points(x_min, y_min, x_max, y_max):\n    \"\"\"\n    Count the number of integral points inside a square with side length equal to 'x_max' - 'x_min'\n    and top-left corner at ('x_min', 'y_min').\n\n    :param x_min: Minimum value for the x-coordinate.\n    :param y_min: Minimum value for the y-coordinate.\n    :param x_max: Maximum value for the x-coordinate.\n    :param y_max: Maximum value for the y-coordinate.\n    :return: The count of integral points within the specified bounds.\n    \"\"\"\n\n    # Calculate the total number of integer points in the grid\n    num_points = (x_max - x_min + 1) * (y_max - y_min + 1)\n\n    # Subtract the overlapping regions if necessary (not needed in this case)\n    \n    return int(num_points)",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumber(month_name):\n    # List of months with 30 days\n    thirty_days_months = [\"April\", \"June\", \"September\", \"November\"]\n    \n    # Check if the input month is in the list of months with 30 days\n    return month_name in thirty_days_months",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_String(s):\n    # Check if the string contains at least one letter and one number\n    for char in s:\n        if not char.isalpha() and not char.isdigit():\n            return False\n    return True",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'remove_tuple' is not defined",
      "Test 2: FAIL - name 'remove_tuple' is not defined",
      "Test 3: FAIL - name 'remove_tuple' is not defined"
    ],
    "generated_code": "def remove_duplicates(test_tuple):\n    # Convert the tuple to a list to allow modification\n    test_list = list(test_tuple)\n    # Use set to filter out duplicate elements and then convert back to tuple\n    unique_elements = tuple(set(test_list))\n    return unique_elements\n\n# Test cases to verify the correctness of the solution\nassert remove_duplicates((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_duplicates((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_duplicates((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def octal_To_Decimal(octal_number):\n    # Convert the given octal string to decimal\n    decimal_value = int(str(octal_number), 8)\n    return decimal_value\n\n# Test the function with provided data points\nprint(\"octal_To_Decimal(25) =\", octal_To_Decimal(25))  # Expected output: 21\nprint(\"octal_To_Decimal(30) =\", octal_To_Decimal(30))  # Expected output: 24\nprint(\"octal_To_Decimal(40) =\", octal_To_Decimal(40))  # Expected output: 32",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first(arr, target, n):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target and (mid == 0 or arr[mid-1] < target):\n            return mid\n        elif arr[mid] >= target:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    return -1",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_tuples(lst, k):\n    # Remove all tuples of length less than k from lst\n    for i in range(len(lst)-k+1):\n        if len(lst[i]) < k:\n            del lst[i]\n    return lst",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_exponentio(tuple_a, tuple_b):\n    result = []\n    for num1, num2 in zip(tuple_a, tuple_b):\n        power_result = num1 ** num2\n        result.append(power_result)\n    return tuple(result)\n\n# Test cases\nprint(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)))  # Output: (100000, 4096, 78125, 7776)\nprint(find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)))  # Output: (1771561, 78125, 1679616, 117649)\nprint(find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)))  # Output: (35831808, 1679616, 40353607, 2097152)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef largest_triangle(a, b):\n    # Calculate the semi-major axis 'a' and semi-minor axis 'b'\n    s_a = a / 2\n    s_b = b / 2\n    \n    # Calculate the maximum area of a triangle that can be inscribed in an ellipse\n    max_area = 0.5 * a * b\n    return round(max_area)\n\n# Test cases\nprint(largest_triangle(4, 2))  # Expected output: 10.392304845413264\nprint(largest_triangle(5, 7))  # Expected output: 4.639421805988064\nprint(largest_triangle(9, 1))  # Expected output: 105.2220865598093",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(num):\n    i = 0\n    while True:\n        new_num = num - 2**i\n        if new_num < 0:\n            break\n        i += 1\n    return 2**(i-1)",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_max(lst):\n    max_val = max(lst)  # Find the maximum value in the list\n    return [i for i, x in enumerate(lst) if x == max_val]  # Return indices where the maximum value occurs",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(lst):\n    # Check if all items in the list are identical using all() and equality comparison\n    return len(set(lst)) == 1",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'l'"
    ],
    "generated_code": "def remove_even(s):\n    result = \"\"\n    for char in s:\n        if int(char) % 2 != 0:\n            result += char\n    return result",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'hamming_Distance' is not defined",
      "Test 2: FAIL - name 'hamming_Distance' is not defined",
      "Test 3: FAIL - name 'hamming_Distance' is not defined"
    ],
    "generated_code": "def hamming_distance(a, b):\n    # Calculate the Hamming distance using XOR operation and count set bits\n    xor_result = a ^ b\n    distance = 0\n    while xor_result:\n        distance += xor_result & 1\n        xor_result >>= 1\n    return distance\n\n# Test cases\nprint(hamming_distance(4, 8))  # Expected output: 2\nprint(hamming_distance(2, 4))  # Expected output: 2\nprint(hamming_distance(1, 2))  # Expected output: 2",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(s, char):\n    # Initialize a counter for occurrences\n    count = 0\n    \n    # Iterate through each character in the string\n    for c in s:\n        # If the current character matches the target character, increment the counter\n        if c == char:\n            count += 1\n            \n    # Return the total count of occurrences\n    return count",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - object of type 'int' has no len()",
      "Test 2: FAIL - object of type 'int' has no len()",
      "Test 3: FAIL - object of type 'int' has no len()"
    ],
    "generated_code": "def inversion_elements(tuple_list):\n    inverted_tuples = []\n    for t in tuple_list:\n        for i in range(len(t)):\n            inverted_value = t[i] + len(t) - i - 1\n            inverted_tuples.append(inverted_value)\n    return inverted_tuples",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tuples_list):\n    result = []\n    for i in range(len(tuples_list)):\n        current_tuple = tuples_list[i]\n        next_char_index = len(current_tuple) + 1\n        next_word = \"\"\n        while next_char_index < len(tuples_list) and isinstance(tuples_list[next_char_index], str):\n            next_word += current_tuple[-1] + tuples_list[next_char_index][0]\n            next_char_index += 1\n        result.append(next_word)\n    return result\n\n# Test cases\ntest_cases = [\n    (\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"),\n    (\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"),\n    (\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")\n]\n\nfor case in test_cases:\n    print(concatenate_elements(case))",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n)]\n    \n    max_len = 0\n    \n    for i in range(1, n + 1):\n        for j in range(i - 1, -1, -1):\n            if s[i - 1] == s[j - 1]:\n                dp[i][j] = 1 + dp[j][i - 1]\n                max_len = max(max_len, dp[i][j])\n            else:\n                dp[i][j] = 0\n                \n    return max_len",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(decimal):\n    \"\"\"\n    Check if the provided string is a valid decimal number with exactly two digits after the decimal point.\n    \n    Parameters:\n    decimal (str): The string representing the decimal number to be checked.\n    \n    Returns:\n    bool: True if the string matches the criteria, False otherwise.\n    \"\"\"\n    # Regular expression to match a valid decimal with up to two digits after the decimal point\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, decimal))\n\n# Test cases\nprint(is_decimal('123.11'))  # Expected output: True\nprint(is_decimal('0.21'))    # Expected output: True\nprint(is_decimal('123.1214'))# Expected output: False",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef heap_replace(heap, value_to_insert):\n    \"\"\"\n    This function takes a list representing a min-heap and an integer value.\n    It replaces the smallest element in the heap with the new value, maintaining\n    the heap property after replacement.\n    \n    Parameters:\n        heap (list): A list of integers representing a min-heap.\n        value_to_insert (int): The integer value to replace the smallest element with.\n        \n    Returns:\n        list: The updated heap after replacing the smallest element with the new value.\n    \"\"\"\n    # Replace the smallest element with the new value\n    heap[0] = value_to_insert\n    \n    # Restore the heap property by sifting down the new root\n    sift_down(heap, 0)\n    \n    return heap\n\ndef sift_down(heap, start_index):\n    \"\"\"\n    This helper function restores the heap property for a max-heap.\n    It assumes that the subtrees rooted at left(start_index) and right(start_index)\n    are already valid heaps, but the node at position start_index may not be.\n    \n    Parameters:\n        heap (list): A list of integers representing a max-heap.\n        start_index (int): Index of the current node being sifted down.\n    \"\"\"\n    child_index = 2 * start_index + 1  # Left child index\n    while child_index < len(heap):\n        # Find the larger child\n        if child_index + 1 < len(heap) and heap[child_index + 1] > heap[child_index]:\n            child_index += 1\n        \n        # If the current node is smaller than its largest child, swap them\n        if heap[start_index] >= heap[child_index]:\n            break\n        \n        # Swap and continue sifting down the child now\n        heap[start_index], heap[child_index] = heap[child_index], heap[start_index]\n        start_index = child_index\n        child_index = 2 * start_index + 1\n\n# Example usage\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 21))  # Expected output: [21, 25, 23, 44, 39, 68, 89]\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 110))  # Expected output:",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_allowed_specific_char(string):\n    # Define the regular expression pattern to match only lowercase letters and digits.\n    pattern = r'^[a-zA-Z0-9]+$'\n    \n    # Use the re.match() method to check if the entire string matches the pattern.\n    return bool(re.match(pattern, string))\n\n# Test cases\nprint(is_allowed_specific_char(\"ABCDEFabcdef123450\"))  # Expected output: True\nprint(is_allowed_specific_char(\"*&%@#!}{\"))           # Expected output: False\nprint(is_allowed_specific_char(\"HELLOhowareyou98765\")) # Expected output: True",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - negative shift count"
    ],
    "generated_code": "def count_Num(n):\n    # Initialize count of numbers with both oth and nth bit set\n    count = 0\n    \n    # Iterate through all possible binary numbers up to n bits\n    for i in range(1 << n):\n        # Check if ith number has both oth and nth bit set\n        if ((i & (1 << (n-1))) != 0) and ((i & (1 << (n-2))) == 0):\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the fourth powers of the first n natural numbers.\n    \n    Args:\n    - n: An integer representing the number of terms in the series.\n    \n    Returns:\n    - The sum of the fourth powers of the first n natural numbers as an integer.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += i ** 4\n    return total_sum\n\n# Test Cases\nassert fourth_Power_Sum(2) == 17, \"Test case 1 failed\"\nassert fourth_Power_Sum(4) == 354, \"Test case 2 failed\"\nassert fourth_Power_Sum(6) == 2275, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def concatenate_strings(tup1, tup2):\n    # Use list comprehension to create a new tuple by concatenating corresponding elements from each input tuple\n    result = [f\"{a}{b}\" for a, b in zip(tup1, tup2)]\n    return tuple(result)\n\n# Test cases\nprint(concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\"))) # Expected output: ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nprint(concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\"))) # Expected output: ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nprint(concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\"))) # Expected output: ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def degree_radian(radian_value):\n    return radian_value * 180 / 3.141592653589793",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decode_list(encoded):\n    result = []\n    i = 0\n    while i < len(encoded):\n        count = 0\n        while i + count < len(encoded) and type(encoded[i+count]) == int:\n            count += encoded[i+count]\n        value = encoded[i:i+count]\n        if isinstance(value, list):\n            for j in range(len(value)):\n                result.extend([value[j]] * count)\n        else:\n            result.extend([value] * count)\n        i += count + 1\n    return result",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_subset_list(list1, list2):\n    # Convert both lists into sets for comparison\n    set1 = set(map(tuple, list1))\n    set2 = set(map(tuple, list2))\n    \n    # Check if set1 is a subset of set2\n    return set1.issubset(set2)",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Repeated_Char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n\n# Test cases\nprint(first_Repeated_Char(\"Google\")) # Output: o\nprint(first_Repeated_Char(\"data\"))   # Output: a\nprint(first_Repeated_Char(\"python\")) # Output:",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Operations(num1, num2):\n    # If one number is zero, it can be made equal to the other in exactly that number of steps.\n    if num1 == 0:\n        return abs(num2)\n    elif num2 == 0:\n        return abs(num1)\n\n    # Calculate the difference between the two numbers and adjust for negative values\n    diff = max(abs(num1 - num2), abs(num1 + num2))\n    \n    # Divide the absolute difference by 2 to get the minimum number of steps needed\n    result = diff // 2\n    \n    # If there's a remainder after division, subtract 1 because an additional step is needed\n    if diff % 2 != 0:\n        result -= 1\n        \n    return result",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_min_max(tup, k):\n    # Sort the tuple in descending order of values\n    sorted_tup = sorted(tup, reverse=True)\n    # Extract the first 'k' elements from the sorted tuple\n    extracted_elements = sorted_tup[:k]\n    # Return the list with the first 'k' largest and smallest elements\n    return extracted_elements + [sorted_tup[i] for i in range(k)]\n\n# Example usage:\nprint(extract_min_max((5, 20, 3, 7, 6, 8), 2))  # Output: [3, 5, 8, 20]\nprint(extract_min_max((4, 5, 6, 1, 2, 7), 3))   # Output: [1, 2, 4, 5, 6, 7]\nprint(extract_min_max((2, 3, 4, 8, 9, 11, 7), 4))  # Output: [2, 3, 4, 7, 8, 9, 11]",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def replace_max_specialchar(text,max_occurrences):\n    # Replace multiple spaces, commas, and dots with a single colon\n    special_char_replacement = lambda char: \":\" if text.count(char) > max_occurrences else char\n    return ''.join(special_char_replacement(char) for char in text)",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_type(tup):\n    first_type = type(tup[0])\n    for item in tup:\n        if type(item) != first_type:\n            return False\n    return True",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_majority(nums, n, k):\n    count = 0\n    max_count = 0\n    start = 0\n    \n    for i in range(n):\n        if nums[i] == k:\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i - count + 1\n                \n        elif nums[i] != k and count > 0:\n            count -= 1\n            \n    end = len(nums) - 1\n    while start <= end and count > 0:\n        if nums[end] == k:\n            count -= 1\n            end -= 1\n        else:\n            break\n    \n    if count == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3))  # Output: True\nprint(is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4))  # Output: False\nprint(is_majority([1, 1, 1, 2, 2], 5, 1))  # Output: True",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    # Initialize the count of set bits to zero\n    set_bits_count = 0\n    \n    # Loop through each bit in n\n    while n > 0:\n        # Increment the set bits count if the least significant bit is 1\n        if n & 1 == 1:\n            set_bits_count += 1\n        # Right shift n by one bit to check the next bit\n        n >>= 1\n    \n    return set_bits_count",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Min(arr, start, end):\n    if start > end:\n        raise ValueError(\"Invalid input range\")\n    \n    while start < end:\n        mid = (start + end) // 2\n        # Ensure we check the correct direction based on the rotation point.\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        else:\n            end = mid\n    \n    return arr[start]",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(s):\n    # Initialize an empty result string\n    result = \"\"\n    # Loop through the string, starting from index 0 and going up to one less than the length of the string\n    for i in range(len(s)):\n        # Check if the current index is even\n        if i % 2 == 0:\n            # Append the character at the current index to the result string\n            result += s[i]\n    # Return the resulting string with all characters having odd indices removed\n    return result",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 2 failed"
    ],
    "generated_code": "def all_bits_set_in_given_range(number, start_index, end_index):\n    \"\"\"\n    Check if all bits within the specified range of 'number' are unset.\n    \n    Parameters:\n    number (int): The integer to be checked.\n    start_index (int): The starting index of the range.\n    end_index (int): The ending index of the range (inclusive).\n    \n    Returns:\n    bool: True if all bits in the range are unset, otherwise False.\n    \"\"\"\n    # Convert the binary representation of the number to a string and pad it with zeros to match the length of the full range.\n    num_str = format(number, f'0{end_index - start_index}b')\n    \n    # Iterate through each bit in the range.\n    for i in range(start_index, end_index + 1):\n        # If the current bit is set, return False.\n        if num_str[i] == '1':\n            return False\n    \n    # If no bits were found to be set, return True.\n    return True\n\n# Test cases to verify the correctness of the function.\nassert all_bits_set_in_given_range(4, 1, 2) == True, \"Test case 1 failed\"\nassert all_bits_set_in_given_range(17, 2, 4) == True, \"Test case 2 failed\"\nassert all_bits_set_in_given_range(39, 4, 6) == False, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_arrange_array(arr, n):\n    # Separate and store negative numbers in a list\n    negatives = [x for x in arr if x < 0]\n    \n    # Store non-negative numbers at their original positions\n    positives = [x for x in arr if x >= 0]\n    \n    # Concatenate the lists with negative numbers first\n    result = negatives + positives\n    \n    return result[:n]\n\n# Test cases\nprint(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))  # Expected output: [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nprint(re_arrange_array([12, -14, -26, 13, 15], 5))           # Expected output: [-14, -26, 12, 13, 15]\nprint(re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7))  # Expected output: [-42, -39, -78, 10, 24, 36, 85]",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(s, c):\n    return s.replace(' ', c)",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum(triangle, target_depth):\n    \"\"\"\n    Find the maximum sum in a specified depth of a right triangle formed by nested lists.\n    \n    :param triangle: List[List[int]] - The right triangle represented as a list of lists with non-negative integers.\n    :param target_depth: int - The target depth from which to find the maximum sum.\n    :return: int - The maximum sum found at the target depth.\n    \"\"\"\n    if not triangle:\n        return None\n    \n    for i in range(1, len(triangle)):\n        for j in range(len(triangle[i])):\n            if j == 0 or j == len(triangle[i]) - 1:\n                triangle[i][j] += triangle[i-1][j]\n            else:\n                triangle[i][j] += max(triangle[i-1][j-1], triangle[i-1][j])\n    \n    return max(triangle[target_depth])\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    assert max_sum([[1],[2,1],[3,3,2]], 3) == 6, \"Test case 1 failed\"\n    assert max_sum([[1],[1,2],[4,1,12]], 3) == 15, \"Test case 2 failed\"\n    assert max_sum([[2],[3,2],[13,23,12]], 3) == 28, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def larg_nnum(nums, n):\n    return sorted(nums, reverse=True)[:n]\n\n# Test cases\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) # Expected output: [100, 90]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)) # Expected output: [100, 90, 80, 70, 60]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)) # Expected output: [100, 90, 80]",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsuface_cylinder(radius, height):\n    return 2 * 3.1415 * radius * height",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(side_length):\n    return side_length ** 3",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_set_number(number):\n    # XOR the number with itself after shifting right by one bit (for every odd position bit)\n    return number ^ ((number >> 1) | (number & -number))",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'No_of_Triangle' is not defined",
      "Test 2: FAIL - name 'No_of_Triangle' is not defined",
      "Test 3: FAIL - name 'No_of_Triangle' is not defined"
    ],
    "generated_code": "def no_of_triangle(n, k):\n    if n <= 0:\n        return -1\n    elif k == 1:\n        return int((n * (n + 1)) / 2)\n    else:\n        return (k * (k - 1) // 2) ** 2 + (k * (k - 1) // 2) * ((n - 1) * (n + 1) // 2)\n\n# Test Cases\nprint(no_of_triangle(4, 2))  # Expected output: 7\nprint(no_of_triangle(4, 3))  # Expected output: 3\nprint(no_of_triangle(1, 3))  # Expected output: -1",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_occurences(tuples_list):\n    from collections import Counter\n    \n    # Create an empty dictionary to store the results\n    result = {}\n    \n    # Iterate through each tuple in the list\n    for t in tuples_list:\n        # Sort the tuple and convert it into a string key\n        sorted_tuple_key = ''.join(sorted(str(t)))\n        \n        # If the key already exists in the result, increment its count\n        if sorted_tuple_key in result:\n            result[sorted_tuple_key] += 1\n        else:\n            # Otherwise, add the new tuple to the result with count 1\n            result[sorted_tuple_key] = 1\n    \n    return result",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def number_of_substrings(s):\n    n = len(s)\n    # Calculate the total number of substrings in an array of size n.\n    total_substrings = n * (n + 1) // 2\n    # Subtract the empty substring from the total to get non-empty ones.\n    result = total_substrings - 1 if s else 0\n    return result",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def get_total_number_of_sequences(n, m):\n    \"\"\"\n    Calculate the total number of possible sequences where each subsequent term in the sequence\n    is either twice or half of its predecessor, and all terms in the sequence do not exceed 'm'.\n    \n    :param n: Length of the desired sequence.\n    :param m: Maximum value for any term in the sequence.\n    :return: Total number of valid sequences of length n.\n    \"\"\"\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for i in range(1, n + 1):\n        dp[i] += dp[i - 1]\n        \n        if i < m:\n            dp[i] += dp[i // 2]\n        \n        if i % 2 == 0 and i // 2 <= m:\n            dp[i] += dp[i // 2]\n            \n        if i > 1 and (i - 1) % 2 == 0 and (i - 1) // 2 <= m:\n            dp[i] += dp[(i - 1) // 2]\n        \n        dp[i] %= 10**9 + 7\n    \n    return dp[n]\n\n# Example check function to verify the correctness of the solution with provided data points\ndef check_function():\n    assert get_total_number_of_sequences(10, 4) == 4\n    assert get_total_number_of_sequences(5, 2) == 6\n    assert get_total_number_of_sequences(16, 3) == 84\n    print(\"All test cases passed successfully.\")\n\ncheck_function()",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'replace_list' is not defined",
      "Test 2: FAIL - name 'replace_list' is not defined",
      "Test 3: FAIL - name 'replace_list' is not defined"
    ],
    "generated_code": "def replace_last_element(input_list, replacement_list):\n    if len(replacement_list) > 1:\n        input_list[-1:] = replacement_list\n    return input_list",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\nimport numpy as np\n\ndef array_3d(size_x, size_y, size_z):\n    \"\"\"\n    Generates a 3-dimensional numpy array with dimensions size_x x size_y x size_z and fills it with 'x'.\n    \n    Parameters:\n        size_x (int): The number of elements along the first dimension.\n        size_y (int): The number of elements along the second dimension.\n        size_z (int): The number of elements along the third dimension.\n\n    Returns:\n        A 3-dimensional numpy array filled with '*' characters.\n    \"\"\"\n    return np.full((size_x, size_y, size_z), '*', dtype=str)\n\n# Test cases to verify the correctness of the function\nif __name__ == \"__main__\":\n    # Test case 1\n    print(array_3d(6, 4, 3))\n    # Expected output: [[[*, *, *, *, *, *], \n                        #   [*, *, *, *, *, *], \n                        #   [*, *, *, *, *, *], \n                        #   [*, *, *, *, *, *]], \n                        # [[*, *, *, *, *, *], \n                        #   [*, *, *, *, *, *], \n                        #   [*, *, *, *, *, *], \n                        #   [*, *, *, *, *, *]], \n                        # [[*, *, *, *, *, *], \n                        #   [*, *, *, *, *, *], \n                        #   [*, *, *, *, *, *], \n                        #   [*, *, *, *, *, *]]]\n\n    # Test case 2\n    print(array_3d(5, 3, 4))\n    # Expected output: [[[*, *, *, *, *], \n                        #  [*, *, *, *, *], \n                        #  [*, *, *, *, *]], \n                        # [[*, *, *, *, *], \n                        #  [*, *, *, *, *], \n                        #  [*, *, *, *, *], \n                        #  [*, *, *, *, *]], \n                        # [[*, *, *, *, *], \n                        #  [*, *, *, *, *], \n                        #  [*, *, *, *, *]], \n                        # [[*, *, *, *, *], \n                        #  [*, *, *, *, *], \n                        #  [*, *, *, *, *]]]\n    \n    # Test case 3\n    print(array_3d(1, 2, 3))\n    # Expected output: [[\"*\",",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(input_str):\n    return len(input_str)\n\n# Test cases\nprint(count_charac(\"python programming\")) # Expected output: 18\nprint(count_charac(\"language\"))            # Expected output: 8\nprint(count_charac(\"words\"))               # Expected output: 5",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef sort_on_occurence(lst):\n    \"\"\"\n    This function takes a list of tuples and returns a new list sorted such that \n    elements in each tuple with higher occurrences come before those with lower \n    occurrences.\n    \n    Parameters:\n    lst (list): A list of tuples where each tuple contains at least two elements.\n    \n    Returns:\n    list: A new list of tuples sorted based on the frequency of the first element of each tuple.\n    \"\"\"\n    # Count the occurrence of the first element in each tuple\n    count = Counter(t[0] for t in lst)\n    # Sort the list based on the frequency of the first element\n    sorted_lst = sorted(lst, key=lambda x: (-count[x[0]], x))\n    return sorted_lst",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def next_Perfect_Square(num):\n    i = int(math.sqrt(num)) + 1\n    while True:\n        if math.isqrt(i*i) == i and i*i > num:\n            return i*i\n        i += 1",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum(arr, n): \n    dp = [0] * n  \n    global_max = float(\"-inf\")  \n  \n    # Compute optimal values from left to right and store in 'dp'[] \n    for i in range(n): \n        temp = global_max \n        global_max = max(global_max, dp[i - 1]) + arr[i] if i > 0 else arr[0] \n        dp[i] = max(dp[i - 1], temp) \n\n    # Compute optimal values from right to left and update 'global_max' if required\n    rev_arr = arr[::-1]\n    dp = [0] * n\n    reverse_max = float(\"-inf\")\n    \n    for i in reversed(range(n)): \n        temp = reverse_max \n        reverse_max = max(reverse_max, dp[i - 1]) + rev_arr[i] if i > 0 else rev_arr[0] \n        dp[i] = max(dp[i - 1], temp)\n\n    return max(0, global_max+reverse_max)",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def babylonian_squareroot(number):\n    guess = number / 2.0\n    while True:\n        better_guess = 0.5 * (guess + number/guess)\n        if abs(better_guess - guess) < 0.000001:\n            return better_guess\n        guess = better_guess\n\n# Test cases\nprint(babylonian_squareroot(10)) # Expected output: 3.162277660168379\nprint(babylonian_squareroot(2))   # Expected output: 1.414213562373095\nprint(babylonian_squareroot(9))   # Expected output: 3.0",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lps(input_str):\n    \"\"\"\n    Finds the length of the longest palindromic subsequence within the input string.\n    \n    Args:\n        input_str (str): The input string to search for palindromic subsequences.\n        \n    Returns:\n        int: Length of the longest palindromic subsequence found in the input string.\n    \"\"\"\n    def helper(start, end):\n        if start >= end:\n            return 0\n        elif s[start] == s[end]:\n            return 2 + helper(start+1, end-1)\n        else:\n            return max(helper(start+1, end), helper(start, end-1))\n    \n    s = list(input_str)\n    return helper(0, len(s)-1)\n\n# Test cases\nprint(lps(\"TENS FOR TENS\")) # Expected output: 5\nprint(lps(\"CARDIO FOR CARDS\")) # Expected output: 7\nprint(lps(\"PART OF THE JOURNEY IS PART\")) # Expected output: 9",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum up to n-1.\n    \n    Args:\n    n (int): The upper limit for the harmonic sum calculation.\n    \n    Returns:\n    float: The harmonic sum up to n-1.\n    \"\"\"\n    total = 0.0\n    denominator = 1.0\n    for i in range(1, n):\n        total += 1 / denominator\n        denominator += 1\n    return total",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(tup, x):\n    return tup.count(x)",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def insert_element(lst, element):\n    result = [element] + lst[:-1]\n    return result",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def convert(num):\n    real = abs(num)\n    angle = math.atan2(num.imag, num.real)\n    return (real, angle)\n\n# Test cases\nprint(convert(1))  # Expected output: (1.0, 0.0)\nprint(convert(4))  # Expected output: (4.0, 0.0)\nprint(convert(5))  # Expected output: (5.0, 0.0)",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(lst):\n    return len([x for x in lst if isinstance(x, int)])",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def words_ae(text):\n    # Split the text into individual words and filter those starting with 'a' or 'e'\n    return [word for word in text.split() if word[0] in ['a', 'e']]",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def combinations_colors(colors_list, n):\n    \"\"\"\n    Generate all possible combinations of length n with repetition allowed from a given list of colors.\n    \n    :param colors_list: List[str] - A list of color names as strings.\n    :param n: int - The desired length of each combination.\n    :return: List[Tuple[str]] - A list containing tuples representing each unique combination.\n    \"\"\"\n    import itertools\n    return list(itertools.product(colors_list, repeat=n))\n\n# Test cases to verify the correctness of the function\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)) # Expected output: [('Red',), ('Green',), ('Blue',)]\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)) # Expected output: [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 3)) # Expected output: [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ... , ('Blue', 'Blue', 'Blue')]",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(a, b):\n    return(b, a)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "count_odd = lambda lst: sum(1 for x in lst if x % 2 != 0)",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximize_elements(tuples1, tuples2):\n    result = []\n    for i in range(len(tuples1)):\n        if tuples1[i][1] > tuples2[i][1]:\n            result.append(tuples1[i])\n        else:\n            result.append(tuples2[i])\n    return tuple(result)",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def newman_shanks_williams_prime(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth Newman-Shanks-Williams prime.\n    \n    Args:\n    n : int - The position of the prime number in the sequence of Newman-Shanks-Williams primes.\n    \n    Returns:\n    int - The nth Newman-Shanks-Williams prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    else:\n        primes = [2]\n        p = 3\n        while len(primes) < n:\n            if all(p % d != 0 for d in range(2, int(p**0.5) + 1)):\n                primes.append(p)\n            p += 2\n        return primes[-1]\n\n# Test cases to verify the correctness of the function\nassert newman_shanks_williams_prime(3) == 7\nassert newman_shanks_williams_prime(4) == 17\nassert newman_shanks_williams_prime(5) == 41\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def division_elements(tup1, tup2):\n    result = []\n    for x, y in zip(tup1, tup2):\n        try:\n            result.append(x // y)\n        except ZeroDivisionError:\n            result.append(float('inf'))  # Return infinity if division by zero occurs\n    return tuple(result)\n\n# Test cases\nprint(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))  # Expected output: (2, 2, 2, 3)\nprint(division_elements((12, 6, 8, 16), (6, 3, 4, 4)))  # Expected output: (2, 2, 2, 4)\nprint(division_elements((20, 14, 36, 18), (5, 7, 6, 9)))  # Expected output: (4, 2, 6, 2)",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_two_parts(arr, k):\n    return arr[:k], arr[k:]\n\n# Test cases\nprint(split_two_parts([1,1,2,3,4,4,5,1],3)) # Expected output: ([1, 1, 2], [3, 4, 4, 5, 1])\nprint(split_two_parts(['a', 'b', 'c', 'd'],2)) # Expected output: (['a', 'b'], ['c', 'd'])\nprint(split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)) # Expected output: (['p', 'y', 't', 'h'], ['o', 'n'])",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dog_age(dog_years):\n    # Calculate the dog's age in human years based on the provided formula.\n    return int(10.5 * dog_years + 21)",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_split(lst,n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Parameters:\n    side_length (int): The length of a side of the cube.\n    \n    Returns:\n    int: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    # Initialize sum of squares\n    total_sum = 0\n    \n    # Iterate through odd numbers up to 2n and add their squares to the total sum\n    for i in range(1, 2*n + 1, 2):\n        total_sum += i**2\n        \n    return total_sum",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_star_num(n):\n    \"\"\"\n    Calculate the n-th star number.\n    \n    A star number is defined as an odd integer of the form 4k + 3 where k is an integer.\n    The formula to calculate the nth star number is: \n    Star(n) = (4*n^2 - 4*n + 1)/2\n    \n    Parameters:\n    n (int): The position in the sequence of star numbers.\n    \n    Returns:\n    int: The n-th star number.\n    \"\"\"\n    # Calculate the n-th star number using the given formula\n    star_number = (4 * n ** 2 - 4 * n + 1) // 2\n    return star_number\n\n# Check function with provided data points\nassert find_star_num(3) == 37, \"Test case 1 failed\"\nassert find_star_num(4) == 73, \"Test case 2 failed\"\nassert find_star_num(5) == 121, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char):\n    return ord(char)\n\n# Test cases\nprint(ascii_value('A'))  # Expected output: 65\nprint(ascii_value('R'))  # Expected output: 82\nprint(ascii_value('S'))  # Expected output: 83",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_even_and_even_index(numbers, target_position):\n    total_sum = 0\n    for index in range(0, len(numbers), 2): # Iterate over indices of odd positions\n        if numbers[index] % 2 == 0:\n            total_sum += numbers[index]\n    return total_sum\n\n# Test cases\nprint(sum_even_and_even_index([5, 6, 12, 1, 18, 8],6))  # Output: 30\nprint(sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10))  # Output: 26\nprint(sum_even_and_even_index([5, 6, 12, 1],4))  # Output: 12",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += (2*i)**5\n    return total_sum",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rear_extract(records):\n    # Extracting and reversing the tuple elements in each record to get reverse order\n    reversed_records = [(rec[2], rec[1], rec[0]) for rec in records[::-1]]\n    return reversed_records\n\n# Test cases\nprint(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]))  # Expected output: [21, 20, 19]\nprint(rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]))  # Expected output: [36, 25, 45]\nprint(rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]))  # Expected output: [14, 36, 56]",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(t1, t2):\n    # Create an empty list to store the results\n    result = []\n    \n    # Iterate over tuples using enumerate for better readability\n    for i in range(len(t1)):\n        # Perform subtraction and append the result to the list\n        result.append(t1[i] - t2[i])\n    \n    # Convert the list into a tuple before returning\n    return tuple(result)\n\n# Test cases\nprint(substract_elements((10, 4, 5), (2, 5, 18)))  # Expected output: (8, -1, -13)\nprint(substract_elements((11, 2, 3), (24, 45, 16)))  # Expected output: (-13, -43, -13)\nprint(substract_elements((7, 18, 9), (10, 11, 12)))  # Expected output: (-3, 7, -3)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            total_sum += comb(n, i)\n    return total_sum",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Position(arr, k, n):\n    # Iterate through the list in reverse order\n    for i in range(n-1, -1, -1):\n        if arr[i] == k:\n            # Return the index of the first occurrence of k\n            return i + 1\n    # If k is not found, return -1\n    return -1\n\n# Test cases\nprint(get_Position([2,5,4],3,2))  # Output: 2\nprint(get_Position([4,3],2,2))   # Output: 2\nprint(get_Position([1,2,3,4],4,1))  # Output: 4",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder using the formula V = πr^2h.\n    \n    Parameters:\n        radius (float): The radius of the base of the cylinder.\n        height (float): The height of the cylinder.\n        \n    Returns:\n        float: The calculated volume of the cylinder.\n    \"\"\"\n    return round(math.pi * radius ** 2 * height, 3)",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_filter(input_dict, value_threshold):\n    return {key: input_dict[key] for key in input_dict if input_dict[key] >= value_threshold}\n\n# Test cases\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)) # {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180)) # {'Alden Cantrell': 180, 'Pierre Cox': 190}\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190)) # {'Pierre Cox': 190}",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_first_elements(tup):\n    # Initialize counter for elements occurring first in the tuple\n    first_count = 0\n    # Iterate through each element in the tuple\n    for i in range(len(tup)):\n        if not isinstance(tup[i], tuple):\n            break\n        first_count += 1\n    return first_count\n\n# Test cases\nprint(count_first_elements((1, 5, 7, (4, 6), 10)))  # Expected output: 3\nprint(count_first_elements((2, 9, (5, 7), 11)))      # Expected output: 2\nprint(count_first_elements((11, 15, 5, 8, (2, 3), 8)))  # Expected output: 4",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_num_decagonal' is not defined",
      "Test 2: FAIL - name 'is_num_decagonal' is not defined",
      "Test 3: FAIL - name 'is_num_decagonal' is not defined"
    ],
    "generated_code": "def num_to_decagonal(n):\n    # Decagonal numbers formula: n^2 + (n - 1)^2\n    result = n ** 2 + (n - 1) ** 2\n    return result\n\n# Test cases\nprint(num_to_decagonal(3))  # Expected output: 27\nprint(num_to_decagonal(7))  # Expected output: 175\nprint(num_to_decagonal(10)) # Expected output: 370",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True, i\n    return False, -1",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_unique(lst):\n    # Check if the length of the set is equal to the length of the original list.\n    # If they are equal, it means there were no duplicates in the list,\n    # and the function returns True; otherwise, it returns False.\n    return len(set(lst)) == len(lst)",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def validate(number):\n    # Convert number to string to easily iterate over its digits\n    num_str = str(number)\n    \n    # Initialize an empty list to hold the count of each digit's occurrences\n    digit_count = []\n    \n    # Loop through each character in the number as a string\n    for char in num_str:\n        # Check if the character represents a digit\n        if '0' <= char <= '9':\n            # If it's not already counted, append the digit and increment its count\n            if int(char) not in digit_count:\n                digit_count.append(int(char))\n                digit_count[digit_count.index(int(char))] += 1\n                \n    # Compare each digit's count with the digit itself\n    for i in range(len(digit_count)):\n        if digit_count[i] > int(digit_count[i]):\n            return False\n    \n    # If all checks passed, return True\n    return True",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(lst, target):\n    # Check if all elements in the list match the target value\n    return len(set(lst)) == 1 and lst[0] == target",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"ab{2,3}\"  # Matches strings with 'a' followed by exactly 2-3 occurrences of 'b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match_two_three(\"ac\"))  # Expected output: \"Not matched!\"\nprint(text_match_two_three(\"dc\"))  # Expected output: \"Not matched!\"\nprint(text_match_two_three(\"abbbba\"))  # Expected output: \"Found a match!\"",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for -: 'list' and 'int'",
      "Test 2: FAIL - unsupported operand type(s) for -: 'list' and 'int'",
      "Test 3: FAIL - unsupported operand type(s) for -: 'list' and 'int'"
    ],
    "generated_code": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate total number of subarrays when original and repeated arrays are combined\n    total_length = n * k + n\n    \n    # Create an array where each element from arr is followed by 'n' elements with value 0\n    modified_arr = [arr[0]] * n + [0] * total_length - len(arr)\n    \n    # Initialize variables for prefix sums and maximum sum\n    pref_sum = [0]\n    max_sum = float('-inf')\n    \n    # Calculate prefix sums and keep track of the maximum sum\n    for i in range(1, len(modified_arr)):\n        pref_sum.append(pref_sum[-1] + modified_arr[i])\n        if pref_sum[-1] > max_sum:\n            max_sum = pref_sum[-1]\n    \n    # Return the maximum sum of contiguous subarray found\n    return max_sum",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def square_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            total += (i ** 2)\n    return total",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def modular_inverse(arr, mod_prime, n):\n    # Check if the modulus is less than or equal to zero\n    if mod_prime <= 0:\n        return -1\n    \n    # Sort the input array\n    arr.sort()\n    \n    # Initialize result counter and current product\n    res = 1\n    curr_prod = 1\n    \n    # Iterate through each element in the sorted array\n    for num in arr:\n        # Update current product with multiplication of previous current product and current number\n        curr_prod *= num\n        \n        # If current product is greater than the modulo value 'n'\n        if curr_prod > n:\n            continue\n        \n        # Calculate modular inverse using Fermat's little theorem\n        inv_num = pow(curr_prod, mod_prime - 2, n)\n        \n        # Update result if it matches the target number\n        if inv_num == num:\n            res += 1\n            \n    # Return the final count of numbers having modular inverses equal to themselves\n    return res",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Days(year):\n    # Calculate the number of odd days in the given year.\n    return abs((year % 4) - 2 * (year % 100)) + abs(((year % 100) // 400))",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'Tuple' is not defined. Did you mean: 'tuple'?"
    ],
    "generated_code": "from typing import List\n\ndef max_length(arrays: List[List[int]]) -> Tuple[int, List[int]]:\n    if not arrays:\n        return (0, [])\n    \n    # Initialize variables to store the current longest and its position\n    maxLength = 0\n    resultIndex = 0\n    \n    for i in range(len(arrays)):\n        # Check if the current array is longer than the previously recorded one\n        if len(arrays[i]) > maxLength:\n            maxLength = len(arrays[i])\n            resultIndex = i\n            \n    # Return the index of the longest array and its contents\n    return (maxLength, arrays[resultIndex])",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    else:\n        prev_prev = k * k\n        curr = 2 * k * (k - 1)\n        for _ in range(3, n + 1):\n            prev_prev, curr = curr, 2 * k * (prev_prev - curr)\n        return curr\n\n# Test cases\nprint(count_no_of_ways(2, 4)) # Expected output: 16\nprint(count_no_of_ways(3, 2)) # Expected output: 6\nprint(count_no_of_ways(4, 4)) # Expected output: 228",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(dividend, divisor):\n    # Perform integer division and return the result\n    return dividend // divisor",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Function to calculate the length of the third side of a right-angled triangle.\n    \n    Args:\n        a (float): The first side of the triangle.\n        b (float): The second side of the triangle.\n        \n    Returns:\n        float: The length of the third side of the triangle.\n    \"\"\"\n    # Calculate the square of the hypotenuse using Pythagorean theorem and subtract the sum of squares of sides a and b\n    c = math.sqrt(a**2 + b**2 - 2*a*b*math.cos(math.pi/2))\n    return round(c, 5)\n\n# Test cases\nprint(otherside_rightangle(7, 8))  # Expected output: 10.63015\nprint(otherside_rightangle(3, 4))  # Expected output: 5.0\nprint(otherside_rightangle(7, 15)) # Expected output: 16.553",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'Python'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'Python'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'Python'"
    ],
    "generated_code": "def max_val(lst):\n    return max([int(item) for item in lst])",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_div(num):\n    total = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            total += i\n    return total",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Inv_Count(arr, n): \n    # Initialize inversion count\n    inv_count = 0\n    \n    # Traverse through all elements\n    for i in range(n): \n        \n        # Check for every element which is smaller than current element\n        for j in range(i + 1, n): \n            \n            # If element at j position is smaller than element at i position,\n            if arr[j] < arr[i]: \n                inv_count += 1\n                \n    return inv_count",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate list (not \"int\") to list",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_list(nested_list):\n    return sum(nested_list, [])",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def intersection_nested_lists(list1, list2):\n    result = []\n    for sublist in list2:\n        if isinstance(sublist, list) and all(element in list1 for element in sublist):\n            result.append(sublist)\n    return result",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_aggregate(tuples_list):\n    # Initialize the maximum value and corresponding name as None for both values.\n    max_value = (-float(\"inf\"), \"\")\n    \n    # Iterate through each tuple in the given list.\n    for name, score in tuples_list:\n        # If the current score is higher than the maximum found so far, update it with these values.\n        if score > max_value[0]:\n            max_value = (score, name)\n    \n    return max_value",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import combinations\n\ndef count_binary_seq(n):\n    \"\"\"\n    This function calculates the number of binary sequences of length 2*n where \n    the count of '0's equals the count of '1's in both halves.\n    \n    Parameters:\n    n (int): The length of each half of the binary sequence.\n    \n    Returns:\n    float: The total number of valid binary sequences.\n    \"\"\"\n    # Generate all possible sequences for one half of the binary sequence\n    sequences_half = [seq for seq in combinations('01', n)]\n    \n    total_count = len(sequences_half)\n    if n % 2 == 0:\n        return total_count * total_count\n    else:\n        # Calculate and add the unique sequences when the length of the half is odd\n        odd_sequences = [(0, i) for i in range(n + 1)] + [(1, i) for i in range(n - 1)]\n        return total_count ** 2 * len(odd_sequences)\n\n# Check function with provided data points\nprint(count_binary_seq(1))  # Expected output: 2.0\nprint(count_binary_seq(2))  # Expected output: 6.0\nprint(count_binary_seq(3))  # Expected output: 20.0",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dict_depth(d):\n    return max([dict_depth(v) for v in d.values()] + [0]) if isinstance(d, dict) else 1",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_Bit_Number(number):\n    # Find the first set bit from the right and calculate its position\n    for i in range(len(bin(number)) - 2, -1, -1):\n        if number & (1 << i): \n            return i + 1\n    return None\n\n# Test Cases\nprint(set_Bit_Number(6))  # Output: 4\nprint(set_Bit_Number(10)) # Output: 8\nprint(set_Bit_Number(18)) # Output: 16",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - local variable 'k' referenced before assignment",
      "Test 2: FAIL - local variable 'k' referenced before assignment",
      "Test 3: FAIL - local variable 'k' referenced before assignment"
    ],
    "generated_code": "def solve(arr, n):\n    # Your solution code here\n    \n    def merge_and_count_inversions(left, right):\n        i = j = inversions = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n                inversions += len(left) - i\n                \n            k += 1\n        \n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n            \n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n        \n        return inversions\n    \n    def sort_and_count(arr):\n        if len(arr) <= 1:\n            return 0\n        \n        mid = len(arr) // 2\n        left_inv = sort_and_count(arr[:mid])\n        right_inv = sort_and_count(arr[mid:])\n        \n        merge_inversions = merge_and_count_inversions(left_arr, right_arr)\n        \n        total_inv = left_inv + right_inv + merge_inversions\n        \n        return total_inv\n    \n    left_arr = arr[:n//2]\n    right_arr = arr[n//2:]\n    \n    return sort_and_count(arr)",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for +: 'int' and 'list'"
    ],
    "generated_code": "def find_Element(arr, rot_index, idx, size=0):\n    \"\"\"\n    This function takes an array arr, a rotation index (rot_index), and an index (idx).\n    It returns the element at the index idx in the array after performing 'rot_index' right circular shifts.\n    \n    Parameters:\n    arr (list): The original array of integers.\n    rot_index (int): The number of right circular shifts performed on the array.\n    idx (int): The index to find after the shifts.\n    \n    Returns:\n    int: The element at the specified index after performing the shifts.\n    \"\"\"\n    if not arr:\n        return None\n    \n    # Calculate actual position considering circular nature\n    pos = (idx + rot_index) % len(arr)\n    return arr[pos]\n\n# Check function with provided data points\nprint(find_Element([1,2,3,4,5], [[0,2],[0,3]], 2))  # Expected output: 3\nprint(find_Element([1,2,3,4], [[0,1],[0,2]], 1))     # Expected output: 3\nprint(find_Element([1,2,3,4,5,6], [[0,1],[0,2]], 1)) # Expected output: 1",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(word_list):\n    for word in word_list:\n        if word.startswith(\"p\"):\n            return word.split()[0], word.split()[-1]\n    return None\n\n# Test cases\nprint(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])) # Should return ('Python', 'PHP')\nprint(start_withp([\"Python Programming\",\"Java Programming\"])) # Should return ('Python', 'Programming')\nprint(start_withp([\"Pqrst Pqr\",\"qrstuv\"])) # Should return ('Pqrst', 'Pqr')",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: max_sum_increasing_subseq() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def max_sum_increasing_subseq(nums, i, j):\n    if not nums:\n        return 0\n    dp = [float('-inf')] * len(nums)\n    for num in nums[:i+1]:\n        if dp[j-1] < num + dp[j-1-i]:\n            dp[j-1-i] = num + dp[j-1]\n    return max(dp)\n\n# Test cases\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)) # Output: 11\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5)) # Output: 7\nprint(max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)) # Output: 71",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 2: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 3: FAIL - can only concatenate tuple (not \"list\") to tuple"
    ],
    "generated_code": "def colon_tuplex(tuplex, length, new_value):\n    # Check if the tuple is not empty and has more than one element\n    if len(tuplex) > 1:\n        return tuplex[:length] + [new_value] + tuplex[length+1:]\n    else:\n        raise ValueError(\"Tuple must have more than one element\")",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport heapq\n\ndef large_product(list1: List[int], list2: List[int], num_products: int) -> List[int]:\n    # Combine both lists and sort it based on the product of corresponding elements\n    combined_list = sorted(zip(list1, list2), key=lambda x: x[0] * x[1])\n    \n    # Extract the top 'num_products' elements from the combined list\n    top_elements = heapq.nlargest(num_products, combined_list)\n    \n    return [a * b for a, b in top_elements]",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def set_left_most_unset_bit(num):\n    # Increment num by 1 and then AND it with its complement of 1\n    # This operation sets the rightmost '1' bit to 0 and leaves all other bits unchanged.\n    return (num + 1) & (-(num ^ (num >> 1)))\n\n# Test cases\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\nfrom sympy import pi\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone given its radius and height.\n    \n    Parameters:\n        radius (float): The radius of the base of the cone.\n        height (float): The height from the base to the apex of the cone.\n        \n    Returns:\n        float: The calculated volume of the cone.\n    \"\"\"\n    return (1/3) * pi * radius**2 * height\n\n# Check function with provided data points\nassert round(volume_cone(5, 12), 13) == 314.1593\nassert round(volume_cone(10, 15), 13) == 1570.7963\nassert round(volume_cone(19, 17), 13) == 6426.6514",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(numbers):\n    result = [num for num in numbers if num > 0]\n    return result",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_rectangular_grid(grid, n):\n    # Initialize dp arrays for left and right boundaries with first row elements.\n    l = [grid[0][i-1] if i > 0 else 0 for i in range(1, len(grid[0])+1)]\n    r = [grid[0][-i-1] if i < len(grid) else 0 for i in range(len(grid[0]))]\n    \n    # Fill up the dp array from bottom up.\n    for row in grid:\n        temp_l = []\n        for i in range(len(row)):\n            if i == 0:\n                temp_l.append(row[i]+r[-1])\n            elif i > 0:\n                temp_l.append(max(row[i]+l[i-1], row[i]+r[i]))\n            else:\n                temp_l.append(r[i])\n        l = temp_l\n    \n    # Calculate final result using last value in the dp array as it will give us the largest possible subarray ending at current position.\n    res = max(l)\n    for row in grid:\n        res += row[-1]\n    \n    return res - max(r)\n\nprint(max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3))",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: invalid literal for int() with base 10: 'python'"
    ],
    "generated_code": "def find_Max_Len_Even(s):\n    \"\"\"\n    This function takes a string 's' and returns the length of the longest even word in it.\n    If there is no even word in the string, it returns -1.\n    \n    :param s: A string containing words separated by spaces.\n    :return: The length of the longest even word if found, otherwise -1.\n    \"\"\"\n    max_len = -1\n    for word in s.split():\n        if int(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n    return max_len\n\n\n# Check function with provided data points\nassert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_last_occurrence(arr, x):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1] > x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1\n\n# Test cases\nprint(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)) # Expected output: 3\nprint(find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)) # Expected output: 9\nprint(find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)) # Expected output: 6",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def modified_encode(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        value = lst[i]\n        i += 1\n        while i < len(lst) and lst[i] == value:\n            count += 1\n            i += 1\n        if count > 1:\n            result.append([count, value])\n        else:\n            result.append(value)\n    return result",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_volume(sides_sum):\n    # If all sides are equal, the maximum volume is when each side is 1.\n    if sides_sum == 6:\n        return 1\n    \n    # Otherwise, we need to check different combinations of sides.\n    # The goal is to maximize the product of three sides while keeping their sum constant.\n    \n    max_volume = float('-inf')\n    for i in range(1, sides_sum - 2 + 1):\n        for j in range(i, sides_sum - i + 1):\n            k = sides_sum - i - j\n            if k > j:\n                volume = i * j * k\n                if volume > max_volume:\n                    max_volume = volume\n                    \n    return max_volume",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_long_word(input_string):\n    pattern = r'\\b\\w{5}\\b'\n    result = re.findall(pattern, input_string)\n    return result\n\n# Test cases\nprint(find_long_word('Please move back to strem'))  # Expected output: ['strem']\nprint(find_long_word('4K Ultra HD streaming player'))  # Expected output: ['Ultra']\nprint(find_long_word('Streaming Media Player'))  # Expected output: ['Media']",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_difference(n):\n    # Calculate the sum of squares of first n natural numbers\n    sum_of_squares = int(n * (n + 1) * (2*n + 1)/6)\n    \n    # Calculate the square of the sum of first n natural numbers\n    square_of_sum = (int(n * (n+1)/2))**2\n    \n    return square_of_sum - sum_of_squares",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - string index out of range",
      "Test 2: FAIL - string index out of range",
      "Test 3: FAIL - string index out of range"
    ],
    "generated_code": "def find_demlo(number_str):\n    result = ''\n    # Find the length of the input string and add one more for the last digit\n    num_length = len(number_str) + 1\n    \n    # Loop through each pair of adjacent digits in reverse order\n    for i in range(num_length - 1, 0, -2):\n        result += str(int(number_str[i]) * int(number_str[i-1]))\n    \n    return result[:-1]  # Remove the trailing single-digit number to get the final demlo number",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_min(nums):\n    \"\"\"\n    Finds all indices where the value is the minimum in nums.\n    \n    Parameters:\n    nums (list): A list of integers\n    \n    Returns:\n    list: A list containing the indices of the minimum values in nums.\n    \"\"\"\n    min_val = min(nums)\n    return [index for index, val in enumerate(nums) if val == min_val]\n\n# Test cases\nprint(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54]))  # Expected output: [3, 11]\nprint(position_min([1,2,2,2,4,4,4,5,5,5,5]))                   # Expected output: [0]\nprint(position_min([2,1,5,6,8,3,4,9,10,11,8,12]))             # Expected output: [1]",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef re_arrange(arr: List[int], n: int) -> List[int]:\n    result = []\n    for i in range(n // 2 + n % 2):  # Determine the length of the resulting list based on the size of input list.\n        if i < len(arr) / 2:\n            result.append(arr[i])\n            result.append(-arr[len(arr) - 1 - i])  # Append both positive and negative elements alternatively.\n        else:\n            result.append(arr[i] * -1)\n    return result",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def sum_of_alternates(lst):\n    # Initialize an empty list to store sums of even-indexed elements and odd-indexed elements separately.\n    sums_even = []\n    sums_odd = []\n\n    # Iterate through the input list with index.\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sums_even.append(sum(lst[i:i+2]))\n        else:\n            sums_odd.append(sum(lst[i:i+2]))\n\n    # Return the sum of the two lists as a tuple.\n    return tuple(sums_even), tuple(sums_odd)\n\n# Test cases to verify the correctness of the solution.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == ((46, 18))\nassert sum_of_alternates((1, 2, 3, 4, 5)) == ((6, 9))\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == ((21, 18))",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Min_Squares(n):\n    \"\"\"\n    Finds the minimum number of perfect squares that add up to 'n'.\n    \n    Args:\n    n (int): The target sum.\n    \n    Returns:\n    int: The minimum number of perfect squares that add up to 'n'.\n    \"\"\"\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n            \n    return dp[n]\n\n# Test cases\nprint(get_Min_Squares(6))  # Expected output: 3\nprint(get_Min_Squares(2))  # Expected output: 2\nprint(get_Min_Squares(4))  # Expected output: 1",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'Counter' is not defined"
    ],
    "generated_code": "def most_occurrences(strs):\n    # Split each string into words and use Counter to count occurrences\n    counts = [Counter(s.split()) for s in strs]\n    # Find the maximum occurrence value\n    max_count = max(sum(count.values() > 0) for count in counts)\n    # Filter lists based on max occurrence and find the first one\n    return next((s for s in strs if sum(count.values() > 0) == max_count), None)\n\n# Test cases\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]) == \"UTS\"\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"]) == \"year\"\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved\"]) == \"can\"\n\nprint(\"All test cases passed\")",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    return a == b or b == c or a == c",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(lst, k, n):\n    \"\"\"\n    Rotate the list lst to the left by k steps.\n    \n    :param lst: List[int] - The input list to be rotated.\n    :param k: int - The number of steps to rotate the list to the left.\n    :param n: int - The starting index for rotation.\n    :return: List[int] - The rotated list.\n    \"\"\"\n    return lst[n:] + lst[:n]\n\n# Check function with provided data points\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4))  # Expected output: [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2))  # Expected output: [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))  # Expected output: [6, 7, 8, 9, 10, 1, 2]",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(lst):\n    return sum(1 for num in lst if num < 0)",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_char(input_string):\n    # Use regex pattern to match words of length between 3 and 5\n    pattern = r'\\b\\w{3,5}\\b'\n    result = re.findall(pattern, input_string)\n    return result",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_unset_bits(n):\n    # Initialize result variable to 0\n    result = 0\n    # Loop until n becomes 0\n    while n:\n        # Increment result for each bit set in n\n        result += n & 1\n        # Right shift n by 1 bit to check next bit\n        n >>= 1\n    return result",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(string):\n    return {char: string.count(char) for char in set(string)}",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def custom_sort(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Validity(a, b, c):\n    # Check if all three inputs are positive numbers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Sort the sides of the triangle in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check the sum of any two sides with the third side\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    else:\n        return True",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ap_sum(start_num, end_num, step_size):\n    # Calculate the number of terms in the arithmetic progression\n    num_terms = ((end_num - start_num) // step_size) + 1\n    \n    # Use the formula for the sum of an arithmetic progression: n/2 * (first_term + last_term)\n    total_sum = num_terms / 2 * (start_num + end_num)\n    \n    return int(total_sum)\n\n# Test cases\nprint(ap_sum(1, 5, 2))  # Expected output: 25\nprint(ap_sum(2, 6, 4))  # Expected output: 72\nprint(ap_sum(1, 4, 5))  # Expected output: 34",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum(month_name):\n    # List of months with exactly 28 days\n    valid_months = [\"April\", \"June\", \"September\", \"November\"]\n    \n    # Check if the input month is in the list of valid months\n    return month_name.lower() in [m.lower() for m in valid_months]",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_word(text):\n    # Define the pattern to match words ending with a period followed by an optional whitespace and then another period.\n    pattern = r'\\b\\w+\\.'\n    \n    # Search for the pattern in the given text.\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the function\nprint(text_match_word(\"python.\"))   # Should print: Found a match!\nprint(text_match_word(\"lang.\"))     # Should print: Not matched!\nprint(text_match_word(\"language. \"))# Should print: Not matched!",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Counts the number of substrings where both the start and end characters are the same.\n    \n    :param s: A string for which the count is to be calculated.\n    :return: The count of substrings with equal first and last characters.\n    \"\"\"\n    total_count = 0\n    length = len(s)\n    for i in range(length):\n        if s[i] == s[-1]:\n            total_count += i + 1\n    return total_count",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Divisor(low, high):\n    # Find the greatest common divisor of all numbers within the given range\n    from math import gcd\n    max_divisor = None\n    for i in range(low, high + 1):\n        current_gcd = i\n        for j in range(low, high + 1):\n            if i != j:\n                current_gcd = gcd(current_gcd, j)\n        if max_divisor is None or current_gcd > max_divisor:\n            max_divisor = current_gcd\n    return max_divisor\n\n# Test cases\nprint(find_Divisor(2,2))  # Expected output: 2\nprint(find_Divisor(2,5))  # Expected output: 2\nprint(find_Divisor(5,10)) # Expected output: 2",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_three_smallest_nums(nums):\n    # Sort the list in ascending order\n    sorted_nums = sorted(nums)\n    \n    # Sum the first three elements in the sorted list\n    result = sum(sorted_nums[:3])\n    \n    return result",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_to_tuple(s):\n    return tuple(sorted(s))",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_minimum_range(arrays):\n    import heapq\n    min_heap = []\n    for i in range(len(arrays)):\n        heapq.heappush(min_heap, (arrays[i][0], i))\n    \n    start, end = float('inf'), -float('inf')\n    result_start, result_end = float('inf'), float('-inf')\n\n    while True:\n        value, array_index = heapq.heappop(min_heap)\n        \n        if end == -float('inf'):\n            start = value\n            end = value\n        \n        elif end < value:\n            start = end + 1\n            end = value\n        \n        else:\n            break\n        \n        for next_array_index in range(len(arrays[array_index])):\n            next_value = arrays[array_index][next_array_index]\n            if next_value > end:\n                end = next_value\n            \n            else:\n                heapq.heappush(min_heap, (next_value, next_array_index))\n\n    if len(min_heap) > 0 and end != -float('inf'):\n        result_start = start\n        result_end = end\n    \n    return (result_start, result_end)\n\n# Test cases\nprint(find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])) # Expected output: (4, 6)\nprint(find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]])) # Expected output: (4, 7)\nprint(find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])) # Expected output: (5, 7)",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dig_let(s):\n    num_digits = sum(c.isdigit() for c in s)\n    num_letters = sum(c.isalpha() for c in s)\n    return (num_digits, num_letters)\n\n# Test cases\nprint(dig_let(\"python\"))   # Expected output: (6, 0)\nprint(dig_let(\"program\"))  # Expected output: (7, 0)\nprint(dig_let(\"python3.0\")) # Expected output: (6, 2)",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef count_Odd_Squares(start, end):\n    def is_odd_factor(n):\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                # Check if both factors are odd\n                if i * i != n and n // i % 2 == 1:\n                    return True\n        return False\n    \n    count = 0\n    for num in range(max(2, start), min(end + 1, 100)):\n        if is_odd_factor(num):\n            count += 1\n    return count\n\n# Test cases\nprint(count_Odd_Squares(5,100))  # Expected output: 8\nprint(count_Odd_Squares(8,65))   # Expected output: 6\nprint(count_Odd_Squares(2,5))    # Expected output: 1",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diff_consecutivenums(nums):\n    return [nums[i] - nums[i-1] for i in range(1, len(nums))]",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'zigzag' is not defined",
      "Test 2: FAIL - name 'zigzag' is not defined",
      "Test 3: FAIL - name 'zigzag' is not defined"
    ],
    "generated_code": "def zzzz(n, k):\n    # Base case: when n is less than k\n    if n < k:\n        return k - 1\n    \n    # Recursive call with decremented values of n and k\n    else:\n        return n + zzzz(n-1, k)",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def count_Squares(length, width):\n    \"\"\"\n    Counts the number of squares that can be formed within a rectangle with dimensions length x width.\n    \n    Args:\n    - length (int): The longer side of the rectangle.\n    - width (int): The shorter side of the rectangle.\n    \n    Returns:\n    - int: The total number of squares that fit within the rectangle.\n    \"\"\"\n    # Calculate the sum of all possible square sizes up to min(length, width)\n    num_squares = sum(min(length, width))\n    return num_squares\n\n# Test cases to verify the correctness of the function\nassert count_Squares(4,3) == 20, \"Test case 1 failed\"\nassert count_Squares(1,2) == 2, \"Test case 2 failed\"\nassert count_Squares(2,2) == 5, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_ways(n):\n    \"\"\"\n    Find the number of ways to generate a sequence with a given length n,\n    where each element in the sequence is greater than or equal to zero and\n    all possible prefixes have non-negative sums.\n    \n    :param n: Integer representing the length of the sequence.\n    :return: Integer representing the number of valid sequences.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return sum(find_ways(k) * find_ways(n - k - 1) for k in range(n))\n\n# Test cases\nassert find_ways(4) == 2, \"Test case 1 failed\"\nassert find_ways(6) == 5, \"Test case 2 failed\"\nassert find_ways(8) == 14, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(s):\n    # Check if all characters in the string are either '0' or '1'\n    return s.isdigit()",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum_Length(s):\n    char_counts = {}\n    \n    # Count occurrences of each character in the string\n    for char in s:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    \n    max_char_count = max(char_counts.values())\n    \n    # Remove characters with maximum count - 1 times and keep rest unchanged\n    modified_string = ''\n    for char in s:\n        if char_counts[char] == max_char_count:\n            continue\n        modified_string += char\n        \n    return len(modified_string)\n\nprint(minimum_Length(\"mnm\"))       # Output: 1\nprint(minimum_Length(\"abcda\"))     # Output: 3\nprint(minimum_Length(\"abcb\"))      # Output: 2",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Element(arr, n, k):\n    count = {}\n    \n    # Count occurrences of each element in the array\n    for i in range(n):\n        if arr[i] not in count:\n            count[arr[i]] = 0\n        count[arr[i]] += 1\n    \n    # Find the first element that occurs exactly 'k' times\n    for j in range(n):\n        if count[arr[j]] == k:\n            return arr[j]\n    \n    return -1  # Return -1 if no such element exists\n\n# Test cases\nprint(first_Element([0,1,2,3,4,5],6,1))  # Output: 0\nprint(first_Element([1,2,1,3,4],5,2))   # Output: 1\nprint(first_Element([2,3,4,3,5,7,1,2,3,5],10,2))  # Output: 2",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'unique_Characters' is not defined",
      "Test 2: FAIL - name 'unique_Characters' is not defined",
      "Test 3: FAIL - name 'unique_Characters' is not defined"
    ],
    "generated_code": "def is_unique_chars(s):\n    \"\"\"\n    Check if all characters in the input string s are unique.\n    \n    Args:\n    s (str): The input string\n    \n    Returns:\n    bool: True if all characters are unique, False otherwise\n    \"\"\"\n    return len(set(s)) == len(s)",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_column(nested_list, col_index):\n    return [[item for i, item in enumerate(row) if i != col_index] for row in nested_list]",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def tn_ap(n, d, l):\n    return n * d + ((n - 1) * d // 2)\n\n# Test cases\nassert tn_ap(1,5,2) == 9\nassert tn_ap(2,6,4) == 22\nassert tn_ap(1,4,5) == 16",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef count_Rectangles(r):\n    if r <= 0:\n        return 0\n    \n    # The area of the circle is πr^2.\n    # Each rectangle can be placed at any point within this circle,\n    # and its dimensions can vary between 0 to r on both axes.\n    # Thus, there are (πr^2) * (2*r) possible rectangles inside the circle.\n    \n    result = r**2 * math.pi * 2*r\n    return int(result)",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(angle1, angle2):\n    # Calculate the third angle of the triangle\n    return 180 - angle1 - angle2",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_max(tuple_records):\n    # Convert each tuple into a list and then extract the second element.\n    # Use max() to find the maximum value from these elements.\n    return max([record[1] for record in tuple_records])\n\n# Test the function with provided data points\nprint(find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]))  # Expected output: 10\nprint(find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]))  # Expected output: 11\nprint(find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]))  # Expected output: 12",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport operator\n\ndef moddiv_list(list_a: List[int], list_b: List[int]) -> List[int]:\n    \"\"\"\n    Perform modulo division on two lists.\n    \n    Args:\n    list_a (List[int]): The first input list containing integers.\n    list_b (List[int]): The second input list containing integers where each element in 'list_b' corresponds \n                        with an element in 'list_a'. The operation is performed between each element of 'list_a'\n                        and its corresponding element in 'list_b'.\n                        \n    Returns:\n    List[int]: A new list containing the results of the modulo division for each pair of elements from \n               'list_a' and 'list_b'.\n    \"\"\"\n    return [operator.mod(a, b) for a, b in zip(list_a, list_b)]\n\n# Test cases\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0], \"Test case 1 failed\"\nassert moddiv_list([3,2],[1,4])==[0, 2], \"Test case 2 failed\"\nassert moddiv_list([90,120],[50,70])==[40, 50], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'sqrt' is not defined"
    ],
    "generated_code": "def Check_Solution(a, b, c):\n    # Calculate the discriminant\n    D = (b**2) - (4*a*c)\n    \n    # If the discriminant is zero, there's exactly one real root\n    if D == 0:\n        # Calculate both roots\n        x1 = (-b + sqrt(D)) / (2 * a)\n        x2 = (-b - sqrt(D)) / (2 * a)\n        \n        # Check if x2 is twice of x1\n        if x2 == 2 * x1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    # If the discriminant is positive, calculate both roots\n    elif D > 0:\n        x1 = (-b + sqrt(D)) / (2 * a)\n        x2 = (-b - sqrt(D)) / (2 * a)\n        \n        # Check if x2 is twice of x1\n        if x2 == 2 * x1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    else:\n        return \"Invalid Discriminant\"\n\n# Test Cases\nprint(Check_Solution(1, 3, 2))  # Expected output: \"Yes\"\nprint(Check_Solution(1, 2, 3))  # Expected output: \"No\"\nprint(Check_Solution(1, -5, 6)) # Expected output: \"No\"",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_carol(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    else:\n        total = sum(range(1, n+1))\n        for i in range(1, n-1):\n            total += (i + 1) * pow(i, 2)\n        return int(str(total)[::-1])\n\n# Test cases\nprint(get_carol(2))  # Expected output: 7\nprint(get_carol(4))  # Expected output: 223\nprint(get_carol(5))  # Expected output: 959",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lst):\n    # Remove all empty sublists from the input list\n    return [sublist for sublist in lst if sublist]",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(lst):\n    count = {}\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    \n    max_count = -float('inf')\n    result_item = None\n    for key, value in count.items():\n        if value > max_count:\n            max_count = value\n            result_item = key\n            \n    return result_item",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_K_element(tuples_list, K):\n    \"\"\"\n    Adds K to each element of the given tuples list and returns the new tuples.\n    \n    :param tuples_list: List of tuples\n    :type tuples_list: list\n    :param K: Integer value to be added\n    :type K: int\n    :return: Modified tuples list after adding K to each element\n    :rtype: list\n    \"\"\"\n    modified_tuples = [tuple(x + K for x in t) for t in tuples_list]\n    return modified_tuples\n\n# Check function with provided data points\nprint(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4))",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_flip_to_make_string_alternate(binary_str):\n    flips = 0\n    left_change = right_change = False\n    \n    for i in range(len(binary_str)):\n        if i % 2 == 0:\n            if binary_str[i] != '0':\n                if not left_change:\n                    left_change = True\n                    flips += 1\n                elif binary_str[i] == '1' and right_change:\n                    flips += 1\n        else:\n            if binary_str[i] != '1':\n                if not right_change:\n                    right_change = True\n                    flips += 1\n                elif binary_str[i] == '0' and left_change:\n                    flips += 1\n                \n    return flips\n\n# Test cases\nprint(min_flip_to_make_string_alternate(\"0001010111\"))  # Expected output: 2\nprint(min_flip_to_make_string_alternate(\"001\"))         # Expected output: 1\nprint(min_flip_to_make_string_alternate(\"010111011\"))   # Expected output: 2",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(num):\n    if num == 0:\n        return 1\n    digit_count = 0\n    while num > 0:\n        num //= 10\n        digit_count += 1\n    return digit_count",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def adjacent_num_product(nums):\n    # Calculate the product of each pair and keep track of the maximum\n    max_product = max([nums[i] * nums[i + 1] for i in range(len(nums) - 1)])\n    return max_product\n\n# Test cases\nprint(adjacent_num_product([1,2,3,4,5,6]))  # Expected output: 30\nprint(adjacent_num_product([1,2,3,4,5]))   # Expected output: 20\nprint(adjacent_num_product([2,3]))         # Expected output: 6",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    \"\"\"\n    Check if the binary tree is balanced.\n    \n    Args:\n    root (TreeNode): The root of the binary tree.\n    \n    Returns:\n    bool: True if the tree is balanced, False otherwise.\n    \"\"\"\n    def height(node):\n        if node is None:\n            return 0\n        else:\n            left_height = height(node.left)\n            right_height = height(node.right)\n            if abs(left_height - right_height) > 1:\n                return float('inf')\n            return max(left_height, right_height) + 1\n    \n    balance = height(root)\n    return balance != float('inf')\n\n# Test Cases\nroot1 = TreeNode(1, TreeNode(2), TreeNode(3))\nroot2 = TreeNode(-1, TreeNode(1, TreeNode(-1)), TreeNode(-2))\n\nprint(is_tree_balanced(root1))  # Expected output: False\nprint(is_tree_balanced(root2))  # Expected output: True",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def repeat_tuples(tup, n):\n    result = []\n    for _ in range(n):\n        result.append(tup)\n    return tuple(result)\n\n# Test cases\nprint(repeat_tuples((1, 3), 4))  # Expected output: ((1, 3), (1, 3), (1, 3), (1, 3))\nprint(repeat_tuples((1, 2), 3))  # Expected output: ((1, 2), (1, 2), (1, 2))\nprint(repeat_tuples((3, 4), 5))  # Expected output: ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lateralsurface_cuboid(length, width, height):\n    return 2 * (length * width + length * height + width * height)",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def float_sort(tuples):\n    # Sort the list of tuples based on the second element (float)\n    return sorted(tuples, key=lambda x: float(x[1]))",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def smallest_missing(nums, start, end):\n    \"\"\"\n    Finds the smallest missing element from an ordered list of integers starting at 'start'\n    and ending at 'end'. The input list is assumed to be non-empty and sorted.\n    \n    :param nums: List[int] - A list of unique integers in increasing order.\n    :param start: int - Starting index for the search range.\n    :param end: int - Ending index for the search range.\n    :return: int - The smallest missing integer within the given range.\n    \"\"\"\n    if nums[start] != start:\n        return start\n    while nums[end] == end:\n        end += 1\n    \n    for i in range(start + 1, end):\n        if nums[i] != i:\n            return i\n    return end\n\n# Test cases\nprint(smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6))  # Should return 7\nprint(smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6))  # Should return 3\nprint(smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7))  # Should return 0",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def heap_assending(lst):\n    import heapq\n    return heapq.nsmallest(len(lst), lst)",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'str' object does not support item assignment",
      "Test 2: FAIL - 'str' object does not support item assignment",
      "Test 3: FAIL - 'str' object does not support item assignment"
    ],
    "generated_code": "from typing import List\n\ndef permute_string(s: str) -> List[str]:\n    def backtrack(start=0):\n        if start == len(s):\n            result.append(\"\".join(s))\n        for i in range(start, len(s)):\n            s[start], s[i] = s[i], s[start]\n            backtrack(start + 1)\n            s[start], s[i] = s[i], s[start]  # backtrack step\n            \n    result = []\n    backtrack()\n    return result",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef round_num(number, base):\n    # Round the number to the nearest multiple of the specified base.\n    return int(math.ceil(number / base) * base)",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not subscriptable",
      "Test 2: FAIL - 'int' object is not subscriptable",
      "Test 3: FAIL - 'int' object is not subscriptable"
    ],
    "generated_code": "def remove_replica(data_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns a new list where each unique element is replaced\n    by its first occurrence in the original list, while all other occurrences are changed to a custom placeholder ('MSP').\n    It maintains the order of the unique elements in their original position.\n    \n    :param data_list: List of tuples containing elements to be processed.\n    :return: A modified list where duplicate elements have been removed and replaced with 'MSP'.\n    \"\"\"\n    seen = set()\n    result = []\n    for item in data_list:\n        if item not in seen:\n            seen.add(item)\n            result.append(item[0])\n        else:\n            result.append('MSP')\n    return result",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Char(s, ch):\n    # Remove all occurrences of char 'ch' from string s and return the result.\n    return ''.join(c for c in s if c != ch)",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_first(lst):\n    \"\"\"\n    Move the last item of lst to the front.\n    \n    Args:\n    lst (list): The input list.\n    \n    Returns:\n    list: The modified list with the last item moved to the front.\n    \"\"\"\n    if not lst:\n        return []\n    else:\n        last_item = lst.pop()  # Remove and save the last item\n        lst.insert(0, last_item)  # Insert it at the beginning\n        return lst",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    return 2 * (length*width + length*height + width*height)",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
      "Test 2: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
      "Test 3: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"
    ],
    "generated_code": "import numpy as np\n\ndef multi_list(n_rows, n_cols):\n    return np.array([[i * j for i in range(n_cols)] for j in range(n_rows)])\n\n# Test cases\nprint(multi_list(3, 4))   # Expected output: [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\nprint(multi_list(5, 7))   # Expected output: [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nprint(multi_list(10, 15)) # Expected output: ...",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(lst, idx):\n    return sorted(lst, key=lambda x: x[idx])",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_rotation_count(arr):\n    left = 0\n    right = len(arr) - 1\n    \n    while arr[left] >= arr[right]:\n        if right - left == 1:\n            return right\n        \n        mid = (left + right) // 2\n        next_index = (mid + 1) % len(arr)\n        \n        if arr[mid] <= arr[next_index]:\n            left = mid\n        else:\n            right = mid\n\n# Test cases\nprint(find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])) # Expected output: 3\nprint(find_rotation_count([8, 9, 10, 2, 5, 6])) # Expected output: 3\nprint(find_rotation_count([2, 5, 6, 8, 9, 10])) # Expected output: 0",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    # Initialize result variable to store the toggled binary value\n    result = 0\n    \n    while n > 0:\n        # Toggle the least significant bit and add it to result\n        result += n & 1\n        \n        # Right shift n by 1 to check the next bit in the sequence\n        n >>= 1\n    \n    return result",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Smallest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Smallest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Smallest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Smallest(arr):\n    # Find the minimum element in the array\n    min_element = min(arr)\n    \n    # Count how many times the minimum element appears in the array\n    count = arr.count(min_element)\n    \n    return count",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_perrin(n):\n    # Base case for Perrin sequence\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    # Recursive calls based on previous three values in the sequence\n    def recursive_get():\n        nonlocal prev_3_values\n        if len(prev_3_values) < 3:\n            first_value = get_perrin(n - 1)\n            second_value = get_perrin(n - 2)\n            third_value = get_perrin(n - 3)\n            prev_3_values.append(first_value + second_value + third_value)\n        return prev_3_values[-1]\n    \n    prev_3_values = []\n    return recursive_get()",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def swap_count(s):\n    balance = 0\n    swap_count = 0\n    \n    for char in s:\n        if char == \"[\":\n            balance += 1\n        else:\n            balance -= 1\n        \n        if balance < 0:\n            # Track the last closing bracket's index and its count of opening brackets\n            last_closing_index = len(s) - 1\n            while s[last_closing_index] != \"[\":\n                last_closing_index -= 1\n            \n            opening_bracket_count = balance + (last_closing_index - balance)\n            \n            swap_count += abs(opening_bracket_count - 2)\n            balance = 0  # Reset balance after processing one valid pair\n    \n    return swap_count",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_or_odd(hex_number):\n    # Convert hex number to decimal and check if it's even or odd\n    decimal_value = int(hex_number, 16)\n    return 'Even' if decimal_value % 2 == 0 else 'Odd'",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    # Calculate the highest power of 2 using math library's log and floor functions\n    return 2 ** int(math.log2(n))\n\n# Test cases\nprint(highest_Power_of_2(10))  # Expected output: 8\nprint(highest_Power_of_2(19))  # Expected output: 16\nprint(highest_Power_of_2(32))  # Expected output: 32",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_lucas(n):\n    # Base case for finding the first two Lucas numbers\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    l = [2, 1]\n    \n    # Calculate the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        l.append(l[i-1] + l[i-2])\n        \n    return l[n]\n\n# Test cases to verify the correctness of the function\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_string(lst, s):\n    return [s + str(item) for item in lst]",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def convert_list_dictionary(lst1, lst2, lst3):\n    return [{'lst1[' + str(key) + '][' + 'lst2[' + str(i) + ']': lst3[i]} for i in range(len(lst2)) for key in lst1]\n\n# Test cases\nprint(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\nprint(convert_list_dictionary([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]))\nprint(convert_list_dictionary([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]))",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "import functools\n\ndef get_max_sum(number):\n    \"\"\"\n    This function calculates the maximum sum of values for a given number based on the equation:\n    f(n) = max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n).\n    \n    Args:\n    - number (int): The input number.\n    \n    Returns:\n    - int: The calculated maximum sum.\n    \"\"\"\n    @functools.lru_cache(None)\n    def helper(n):\n        if n == 1:\n            return 1\n        return max(helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5), n)\n\n    return helper(number)\n\n# Check function with provided data points\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length_list(lst):\n    return lst.index(max(lst, key=len)), max(lst, key=len)\n\n# Test cases\nprint(max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: (3, [13, 15, 17])\nprint(max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])) # Expected output: (5, [1,2,3,4,5])\nprint(max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])) # Expected output: (4, [6,7,8,9])",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(test_tuple):\n    \"\"\"\n    Check if all elements in the given tuple are unique.\n    \n    Parameters:\n    test_tuple (tuple): The tuple to be checked for uniqueness.\n    \n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(test_tuple) == len(set(test_tuple))\n\n# Test cases\nprint(check_distinct((1, 4, 5, 6, 1, 4))) # Expected output: False\nprint(check_distinct((1, 4, 5, 6)))        # Expected output: True\nprint(check_distinct((2, 3, 4, 5, 6)))     # Expected output: True",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(input_string):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char in input_string:\n        if char_count[char] == 1:\n            return char\n    return None\n\n# Test cases\nprint(first_non_repeating_character(\"abcabc\"))  # Output: None\nprint(first_non_repeating_character(\"abc\"))     # Output: 'a'\nprint(first_non_repeating_character(\"ababc\"))   # Output: 'c'",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_char(text):\n    \"\"\"\n    This function checks if the input text starts and ends with the same character.\n    \n    Args:\n        text (str): The input string to be checked.\n        \n    Returns:\n        str: 'Valid' if the text starts and ends with the same character, otherwise 'Invalid'.\n    \"\"\"\n    # Check if the first and last characters of the string match\n    pattern = r'^.{1}(\\w).\\1$'\n    match = re.match(pattern, text)\n    if match:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Test cases\nprint(check_char(\"abba\"))  # Expected output: Valid\nprint(check_char(\"a\"))     # Expected output: Valid\nprint(check_char(\"abcd\"))  # Expected output: Invalid",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_numbers(a,b,c):\n    # First, sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    \n    # Since we want the median, return the middle number after sorting\n    return float(sorted_nums[1])\n\n# Test the function with provided data points\nprint(median_numbers(25,55,65))  # Expected output: 55.0\nprint(median_numbers(20,10,30))  # Expected output: 20.0\nprint(median_numbers(15,45,75))  # Expected output: 45.0",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_digits(numbers):\n    total = 0\n    for num in numbers:\n        if isinstance(num, int) and num >= 0:\n            total += sum(int(digit) for digit in str(abs(num)))\n    return total",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def bitwise_xor(tup1, tup2):\n    result = tuple(x ^ y for x, y in zip(tup1, tup2))\n    return result\n\n# Test cases\nprint(bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)))  # Output: (15, 6, 5, 10)\nprint(bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)))  # Output: (13, 6, 3, 14)\nprint(bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)))  # Output: (11, 2, 13, 13)",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Counter' is not defined",
      "Test 2: FAIL - name 'Counter' is not defined",
      "Test 3: FAIL - name 'Counter' is not defined"
    ],
    "generated_code": "def extract_freq(lst):\n    \"\"\"\n    Extracts and returns the frequency of unique tuples from the given list.\n    \n    Args:\n    lst (list): A list of tuples\n    \n    Returns:\n    int: The total count of unique tuples\n    \"\"\"\n    # Using collections.Counter to get the frequency of each tuple and then summing them up\n    freq = Counter(tup for tup in lst)\n    return sum(freq.values())",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_nested_tuples(tuple1, tuple2):\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through each element in both tuples using unpacking\n    for i in range(len(tuple1)):\n        result.append((tuple1[i][0] + tuple2[i][0], tuple1[i][1] + tuple2[i][1]))\n    return tuple(result)",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\ndef ncr_modp(n, k, p):\n    \"\"\"\n    Computes nCr % p for non-negative integers n and k where n >= k.\n    \n    Parameters:\n    - n (int): Total number of items.\n    - k (int): Number of items to choose.\n    - p (int): The modulus value.\n    \n    Returns:\n    int: Result of nCr % p.\n    \"\"\"\n    # Calculate nCr using modular exponentiation\n    return pow(math.comb(n, k), p-2, p)",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    # Define the pattern for a valid URL\n    pattern = r'^https?:\\/\\/(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}(\\/[^\\s]*)?$'\n    \n    # Use regular expression to match the input string against the pattern\n    if re.match(pattern, url):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_tuplex' is not defined",
      "Test 2: FAIL - name 'check_tuplex' is not defined",
      "Test 3: FAIL - name 'check_tuplex' is not defined"
    ],
    "generated_code": "def check_tuple_exists(tup, elem):\n    return elem in tup",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(number):\n    if number % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Test cases\nprint(find_Parity(12)) # Expected output: 'Even Parity'\nprint(find_Parity(7))  # Expected output: 'Odd Parity'\nprint(find_Parity(10)) # Expected output: 'Even Parity'",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rearrange_bigger(n):\n    # Convert the number to a list of its digits\n    digits = [int(d) for d in str(n)]\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Initialize an empty string to build the result\n    result = ''\n    \n    # Place each digit from the sorted list into the result string\n    for digit in sorted_digits:\n        result += str(digit)\n    \n    # Try to find the next bigger number by appending the smallest digit not used yet\n    i = len(result) - 1\n    while i > 0 and result[i-1] >= result[i]:\n        i -= 1\n    \n    if i == 0:\n        return False  # No more digits left to try\n    \n    # Find the position where the next bigger number can be inserted\n    pos = None\n    for j in range(i+1, len(result)):\n        if result[j] < result[i-1]:\n            pos = j\n            break\n    \n    # Swap the found digit with the starting digit of the sequence\n    result = result[:pos] + result[0:i] + result[pos:i] + result[i:]\n    \n    # Convert the result back to integer and check if it's greater than n\n    return int(result) > n",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - k_smallest_pairs.<locals>.is_smaller_pair() missing 2 required positional arguments: 'c' and 'd'",
      "Test 2: FAIL - k_smallest_pairs.<locals>.is_smaller_pair() missing 2 required positional arguments: 'c' and 'd'",
      "Test 3: FAIL - k_smallest_pairs.<locals>.is_smaller_pair() missing 2 required positional arguments: 'c' and 'd'"
    ],
    "generated_code": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    def is_smaller_pair(a, b, c, d):\n        return a + b < c + d\n    \n    nums1.sort()\n    nums2.sort()\n    \n    result = []\n    while k > 0:\n        if not nums1:\n            break\n        for i in range(len(nums2)):\n            if is_smaller_pair(nums1[-1], nums2[i], *result[-1] if result else []):\n                result.append([nums1.pop(), nums2.pop(i)])\n                break\n            elif not nums1 or nums1[-1] < nums2[0]:\n                result.append([*result[-1][::-1], nums1.pop()])\n                break\n    return result[:k]",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_product_tuple(tuples_list):\n    # Calculate the product for each tuple and store in a list\n    products = [x * y for x, y in tuples_list]\n    # Return the smallest product found\n    return min(products)\n\n# Test cases\nprint(min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 8\nprint(min_product_tuple([(10,20), (15,2), (5,10)]))          # Output should be 30\nprint(min_product_tuple([(11,44), (10,15), (20,5), (12, 9)])) # Output should be 100",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '<' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '<' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def min_val(lst):\n    return min(filter(lambda x: isinstance(x, (int, str)), lst))",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    # Split the string at '_' and capitalize each word except the first one\n    words = snake_str.split('_')\n    # Capitalize the first letter of each word except the first one\n    capitalized_words = [words[0]] + [word.capitalize() for word in words[1:]]\n    # Join the capitalized words into a single string\n    camel_case_str = ''.join(capitalized_words)\n    return camel_case_str\n\n# Test cases\nassert snake_to_camel('android_tv') == 'AndroidTv', \"Test case 1 failed\"\nassert snake_to_camel('google_pixel') == 'GooglePixel', \"Test case 2 failed\"\nassert snake_to_camel('apple_watch') == 'AppleWatch', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(nums):\n    # Use list comprehension to filter out odd numbers and return the result\n    return [num for num in nums if num % 2 == 0]\n\n# Test cases\nprint(remove_odd([1,2,3]))  # Expected output: [2]\nprint(remove_odd([2,4,6]))  # Expected output: [2,4,6]\nprint(remove_odd([10,20,3]))  # Expected output: [10,20]",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(seq1, seq2):\n    # Check if any element of seq1 is present in seq2\n    return any(x in seq2 for x in seq1)\n\n# Test cases\nprint(overlapping([1,2,3,4,5], [6,7,8,9]))  # Output: False\nprint(overlapping([1,2,3], [4,5,6]))       # Output: False\nprint(overlapping([1,4,5], [1,4,5]))        # Output: True",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_Product(arr):\n    arr.sort()\n    n = len(arr)\n    if arr[0] == 0 and arr[n-1] != 0:\n        return (-arr[0], -arr[n-1])\n    elif arr[0] * arr[-1] < 0:\n        return (max(arr), min(arr))\n    else:\n        return (arr[0]*arr[1], arr[n-1]*arr[n-2])\n\n# Test cases\nprint(max_Product([1,2,3,4,7,0,8,4]))  # Output should be (7, 8)\nprint(max_Product([0,-1,-2,-4,5,0,-6]))  # Output should be (-4, -6)\nprint(max_Product([1,2,3]))  # Output should be (2, 3)",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def breakSum(n):\n    # Base case: if n is less than 3, there's no way to divide it into more than one part.\n    if n < 3:\n        return n\n    \n    # Recursively call the function on two-thirds of n and add it to the remainder when n is divided by 3.\n    return breakSum(n // 3 * 2 + n % 3)",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def group_tuples(tuples_list):\n    # Initialize an empty dictionary to store tuples grouped by their first elements\n    result = {}\n    \n    for tup in tuples_list:\n        # If the tuple's first element is not already in the dictionary, add it with the tuple as value\n        if tup[0] not in result:\n            result[tup[0]] = [tup]\n        else:\n            # If the tuple's first element is already in the dictionary, append it to the existing list\n            result[tup[0]].append(tup)\n    \n    # Convert lists within the dictionary into tuples and sort them by the first element of each tuple\n    sorted_result = {key: tuple(sorted(value)) for key, value in result.items()}\n    \n    return list(sorted_result.values())\n\n# Test cases\nprint(group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]))  # Should print [('x', 'y', 'z'), ('w', 't')]\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]))  # Should print [('a', 'b', 'c'), ('d', 'e')]\nprint(group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]))  # Should print [('f', 'g', 'g'), ('h', 'i')])",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Find_Max(lst):\n    # Convert each sublist into a tuple of elements for comparison in sorting\n    lst = [[(x,) for x in sub] for sub in lst]\n    \n    # Sort the list based on the number of elements in the tuples\n    lst.sort(key=lambda x: len(x), reverse=True)\n    \n    # The first element will be the one with the maximum length sublist\n    return lst[0][0]\n\n# Test cases\nprint(Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]))  # Output: ['A', 'B', 'C']\nprint(Find_Max([[1], [1, 2], [1, 2, 3]]))              # Output: [1, 2, 3]\nprint(Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]]))     # Output: [1, 5, 6, 1]",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def round_and_sum(numbers):\n    \"\"\"\n    Rounds each element in the input list 'numbers' to one decimal place.\n    Then it sums all rounded elements and multiplies the result by the length of the list.\n    \n    :param numbers: List of float/double numbers.\n    :return: The product of the sum of the rounded numbers and the count of the list.\n    \"\"\"\n    # Round each number in the list to one decimal place and calculate the sum\n    rounded_sum = sum(map(lambda x: round(x, 1), numbers))\n    \n    # Multiply the sum by the length of the list and return the result\n    return rounded_sum * len(numbers)\n\n# Test cases to verify the correctness of the function\nprint(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]))  # Expected output: 243\nprint(round_and_sum([5,2,9,24.3,29]))  # Expected output: 345\nprint(round_and_sum([25.0,56.7,89.2]))  # Expected output: 513",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cube_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            total += (i ** 3)\n    return total",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - concatenate_tuple() missing 1 required positional argument: 'delimiter'",
      "Test 2: FAIL - concatenate_tuple() missing 1 required positional argument: 'delimiter'",
      "Test 3: FAIL - concatenate_tuple() missing 1 required positional argument: 'delimiter'"
    ],
    "generated_code": "def concatenate_tuple(tup, delimiter):\n    result = \"\"\n    for item in tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    return sum_of_cubes / n\n\n# Test cases\nprint(find_Average_Of_Cube(2)) # Expected output: 4.5\nprint(find_Average_Of_Cube(3)) # Expected output: 12\nprint(find_Average_Of_Cube(1)) # Expected output: 1",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_maxgold(grid, m, n):\n    if not grid:\n        return 0\n    \n    max_gold = [[-1] * n for _ in range(m)]\n    \n    def dfs(row, col, current_gold):\n        if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or max_gold[row][col] != -1:\n            return\n        \n        max_gold[row][col] = current_gold + grid[row][col]\n        \n        for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n            new_row, new_col = row + dx, col + dy\n            dfs(new_row, new_col, max_gold[row][col])\n            \n    dfs(0, 0, grid[0][0])\n    \n    return max(max_gold[i][j] for i in range(m) for j in range(n))\n\n# Test cases\nprint(get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4))  # Expected output: 16\nprint(get_maxgold([[10, 20], [30, 40]], 2, 2))  # Expected output: 70\nprint(get_maxgold([[4, 9], [3, 7]], 2, 2))  # Expected output: 13",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_rear(tup):\n    # Extracting elements from the end of each string in the tuple\n    result = [s[-1] for s in tup]\n    return result\n\n# Test cases\nprint(extract_rear(('Mers', 'for', 'Vers')))  # Output: ['s', 'r', 's']\nprint(extract_rear(('Avenge', 'for', 'People')))  # Output: ['e', 'r', 'e']\nprint(extract_rear(('Gotta', 'get', 'go')))  # Output: ['a', 't', 'o']",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef change_date_format(date_str):\n    \"\"\"\n    This function takes a string in the format 'yyyy-mm-dd' and returns it in the format 'dd-mm-yyyy'.\n    \n    Args:\n        date_str (str): The input date string.\n        \n    Returns:\n        str: The date formatted as 'dd-mm-yyyy'.\n    \"\"\"\n    # Regex pattern to match the input format\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    # Replace the matched groups with the required format\n    result = re.sub(pattern, lambda m: f\"{m.group(3)}-{m.group(2)}-{m.group(1)}\", date_str)\n    return result\n\n# Test cases to verify the correctness of the function\nassert change_date_format(\"2026-01-02\") == \"02-01-2026\"\nassert change_date_format(\"2020-11-13\") == \"13-11-2020\"\nassert change_date_format(\"2021-04-26\") == \"26-04-2021\"",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # Put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n# Test cases\nprint(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]))  # Output should be [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nprint(shell_sort([24, 22, 39, 34, 87, 73, 68]))          # Output should be [22, 24, 34, 39, 68, 73, 87]\nprint(shell_sort([32, 30, 16, 96, 82, 83, 74]))         # Output should be [16, 30, 32, 74, 82, 83, 96]",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def and_tuples(tup1, tup2):\n    # Extracting elements based on common index\n    result = tuple(min(i, j) for i, j in zip(tup1, tup2))\n    return result",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_directrix(a,b,c):\n    \"\"\"\n    This function calculates the equation of a parabola in standard form and finds its directrix.\n    \n    Parameters:\n    a (float): Coefficient of x^2 term in the parabola's equation.\n    b (float): Coefficient of x term in the parabola's equation.\n    c (float): Constant term in the parabola's equation.\n    \n    Returns:\n    float: The directrix of the given parabola.\n    \"\"\"\n    return -2 * (b**2 / (-a)) + c",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'common_element' is not defined",
      "Test 2: FAIL - name 'common_element' is not defined",
      "Test 3: FAIL - name 'common_element' is not defined"
    ],
    "generated_code": "def has_common_element(list1, list2):\n    # Convert both lists to sets for quick lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if there is an intersection between the two sets\n    return bool(set1 & set2)\n\n# Test cases to verify the correctness of the function\nprint(has_common_element([1,2,3,4,5], [5,6,7,8,9]))  # Expected output: True\nprint(has_common_element([1,2,3,4,5], [6,7,8,9]))   # Expected output: False\nprint(has_common_element(['a','b','c'], ['d','b','e']))  # Expected output: True",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def median_trapezium(a, b, c):\n    # Calculate the lengths of all sides\n    side_a = min(c-a, a)\n    side_b = max(c-b, b)\n    side_c = c - side_a - side_b\n    \n    # Check if it's an isosceles trapezium\n    if side_a == side_b:\n        return side_b\n    elif side_a + side_b < side_c:\n        raise ValueError(\"Invalid input for an isosceles trapezium\")\n    \n    # Sort the sides in descending order\n    sides = sorted([side_a, side_b, side_c], reverse=True)\n    \n    # Return the average of the two largest sides as the median\n    return sum(sides[:2]) / 2",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(number_list, num_to_check):\n    if num_to_check > max(number_list):\n        result = 'Yes, entered number is greater than those in the array'\n    else:\n        result = 'No, entered number is less than those in the array'\n    return result\n\n# Test cases\nprint(check_greater([1, 2, 3, 4, 5], 4))  # Expected output: No, entered number is less than those in the array\nprint(check_greater([2, 3, 4, 5, 6], 8))  # Expected output: Yes, the entered number is greater than those in the array\nprint(check_greater([9, 7, 4, 8, 6, 1], 11))  # Expected output: Yes, the entered number is greater than those in the array",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 're' is not defined"
    ],
    "generated_code": "def text_match_one(text):\n    # Regular expression pattern to match 'a' followed by one or more 'b's\n    pattern = r'^a(b*)$'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Test cases to verify the correctness of the function\nassert text_match_one(\"ac\") == 'Not matched!'\nassert text_match_one(\"dc\") == 'Not matched!'\nassert text_match_one(\"abba\") == 'Found a match!'",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit(number):\n    \"\"\"\n    This function takes an integer as input and returns the last digit.\n    \n    Args:\n        number (int): The number from which the last digit needs to be found.\n        \n    Returns:\n        int: The last digit of the given number.\n    \"\"\"\n    return abs(number) % 10",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [],
    "generated_code": "def neg_nos(lst):\n    for num in lst:\n        if num < 0:\n            print(num, end=' ')",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(input_string):\n    return ''.join([char for char in input_string if not ord(char) % 2])\n\n# Test cases\nprint(remove_odd(\"python\")) # Expected output: \"yhn\"\nprint(remove_odd(\"program\")) # Expected output: \"rga\"\nprint(remove_odd(\"language\")) # Expected output: \"agae\"",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_bidirectional(tuples_list):\n    # Counting unique elements in each pair and ensuring they're not duplicates\n    count = sum(len(set(pair)) == len(pair) for pair in tuples_list)\n    \n    return str(count)\n\n# Test cases\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]))\nprint(count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]))\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]))",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(numbers):\n    return int(\"\".join(map(str, numbers)))",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef find_adverb_position(sentence: str) -> List[tuple]:\n    \"\"\"\n    Finds all occurrences of adverbs and their starting positions within a sentence.\n    \n    Parameters:\n    sentence (str): The input sentence to search for adverbs.\n    \n    Returns:\n    List[tuple]: A list of tuples where each tuple contains an adverb and its position in the sentence.\n    \"\"\"\n    adverbs = [\"clearly\", \"seriously\", \"unfortunately\"]\n    return [(i, i + len(adverb)) for i, word in enumerate(sentence.split()) if word.lower() in [adverb.lower() for adverb in adverbs]]",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(side_length):\n    return 6 * side_length ** 2",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def positive_count(arr):\n    count = sum(1 for num in arr if num > 0)\n    return count / len(arr)\n\n# Test Cases\nprint(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))  # Expected output: 0.54\nprint(positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))  # Expected output: 0.69\nprint(positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]))        # Expected output: 0.56",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_neg(nums):\n    # Find and return the maximum value in the list of numbers\n    return max(filter(lambda x: x < 0, nums))",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def trim_tuple(test_list, n):\n    trimmed = []\n    for item in test_list:\n        temp = []\n        for i in range(len(item)):\n            if i < n or i >= len(item)-n:\n                temp.append(item[i])\n        trimmed.append(tuple(temp))\n    return trimmed",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: tuple index out of range"
    ],
    "generated_code": "def index_multiplication(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        product = 1\n        for j in range(len(tup1[i])):\n            product *= tup1[i][j] * tup2[j][i]\n        result.append(tuple([product]))\n    return result\n\n# Test Cases\nprint(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)))) # Should return ((6, 21), (12, 45), (2, 9), (7, 30))\nprint(index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)))) # Should return ((14, 32), (20, 60), (6, 20), (16, 44))\nprint(index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)))) # Should return ((24, 45), (30, 77), (12, 33), (27, 60))",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Occurrence(lst, tpl):\n    from collections import Counter\n    c = Counter(tpl)\n    count = sum(c[k] for k in lst if k in c)\n    return count\n\n# Test cases\nprint(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']))  # Output: 3\nprint(count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]))  # Output: 6\nprint(count_Occurrence((1,2,3,4,5,6), [1,2]))  # Output: 2",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "cube_nums = lambda nums: [num ** 3 for num in nums]",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_sum(n):\n    # Initialize an array to store Pern numbers up to n\n    pern = [3, 0, 2]\n    \n    # Generate Perp numbers for each number from 3 to n\n    for i in range(3, n+1):\n        if len(pern) > 2:\n            # Calculate next Pern number using recurrence relation\n            next_pern = 2 * pern[-1] - pern[-2] + pern[-3]\n        else:\n            next_pern = 0\n        \n        # Append calculated Pern number to the list\n        pern.append(next_pern)\n    \n    # Return the sum of all generated Perp numbers\n    return sum(pern)\n\n# Test cases\nprint(cal_sum(9))   # Expected output: 49\nprint(cal_sum(10))  # Expected output: 66\nprint(cal_sum(11))  # Expected output: 88",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the lengths of all sides of the triangle\n    side1 = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    side2 = ((x3 - x2)**2 + (y3 - y2)**2)**0.5\n    side3 = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    \n    # Check the condition for a valid triangle based on the Pythagorean theorem\n    if abs(side1**2 + side2**2 - side3**2) < 1e-6:\n        return 'Yes'\n    else:\n        return 'No'",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_string(string_list, num):\n    return [s[:num] for s in string_list]",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_whitespaces(s):\n    # Using regular expression to replace one or more whitespace characters (\\s+) with an empty string\n    s = re.sub(r'\\s+', '', s)\n    return s",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def loss_amount(given_amount, reference_amount):\n    if given_amount < reference_amount:\n        return given_amount - reference_amount\n    else:\n        return None",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sumofFactors(n):\n    def isEvenFactor(x):\n        if x % 2 == 0:\n            return True\n        else:\n            return False\n    \n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and isEvenFactor(i):\n            total += i\n            \n    return total",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_wordz(text):\n    if '.' in text and text.lower().find('z') != -1:\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Test cases\nprint(text_match_wordz(\"pythonz.\")) # Expected output: Found a match!\nprint(text_match_wordz(\"xyz.\"))     # Expected output: Found a match!\nprint(text_match_wordz(\"  lang  \")) # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumb_number(month_num):\n    # Check if the input is within valid range for months of year\n    if not 1 <= month_num <= 12:\n        return False\n    \n    # List of months with 31 days\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Return True if the month_num corresponds to a month with 31 days\n    return month_num in thirty_one_days_months",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def reverse_string_list(lst):\n    return lst[::-1]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - object of type 'int' has no len()",
      "Test 2: FAIL - object of type 'int' has no len()",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Find_Min(lst):\n    # Initialize variables to store the min element and its index\n    min_element = lst[0][0] if isinstance(lst[0], list) else lst[0]\n    min_index = 0\n    \n    # Iterate through each sublist in the input list\n    for i, sub_list in enumerate(lst):\n        # If the current sublist is shorter than the previously recorded one\n        if len(sub_list) < len(min_element):\n            # Update the minimum element and its index\n            min_element, min_index = sub_list, i\n            \n    # Return the first element of the found minimum sublist\n    return min_element[0] if isinstance(min_element, list) else min_element",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length, width):\n    return length * width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_uppercase(input_string):\n    # Use regular expression to find and replace all uppercase letters with an empty string\n    result = re.sub('[A-Z]', '', input_string)\n    return result",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    # Use list comprehension to select the first element from each sublist in lst\n    return [sublist[0] for sublist in lst]\n\n# Test cases to verify the correctness of the solution\nassert extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert extract([[1,2,3],[4, 5]]) == [1, 4]\nassert extract([[9,8,1],[1,2]]) == [9, 1]",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(s):\n    # Initialize counter for uppercase letters\n    uppercase_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            uppercase_count += 1\n            \n    return uppercase_count",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nfrom itertools import chain, combinations\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    \"\"\"\n    Generate all possible non-empty combinations from the input list.\n    \n    Args:\n    lst (List[str]): The input list of strings.\n    \n    Returns:\n    List[List[str]]: A list containing all possible non-empty combinations of the input list.\n    \"\"\"\n    return [list(comb) for r in range(1, len(lst) + 1) for comb in combinations(lst, r)]\n\n# Check function with provided data points\nprint(combinations_list(['orange', 'red', 'green', 'blue']))\nprint(combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange']))\nprint(combinations_list(['red', 'green', 'black', 'orange']))",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef max_subarray_product(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError(\"Input list is empty\")\n    \n    def _max_prod(arr, low, high):\n        if low == high:\n            return arr[low]\n        \n        mid = (low + high) // 2\n        \n        left_max = _max_prod(arr, low, mid)\n        right_max = _max_prod(arr, mid + 1, high)\n        cross_max = max_crossing_subarray(arr, low, mid, high)\n        \n        return max(left_max, right_max, cross_max)\n    \n    def max_crossing_subarray(arr, low, mid, high):\n        left_sum = float('-inf')\n        total = 0\n        \n        for i in range(mid, low-1, -1):\n            total += arr[i]\n            if total > left_sum:\n                left_sum = total\n        \n        right_sum = float('-inf')\n        total = 0\n        \n        for i in range(mid+1, high+1):\n            total += arr[i]\n            if total > right_sum:\n                right_sum = total\n                \n        return left_sum * right_sum\n    \n    return _max_prod(nums, 0, len(nums)-1)\n\n# Test cases\nprint(max_subarray_product([1, -2, -3, 0, 7, -8, -2]))  # Output: 112\nprint(max_subarray_product([6, -3, -10, 0, 2]))         # Output: 180\nprint(max_subarray_product([-2, -40, 0, -2, -3]))       # Output: 80",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_value(dictionary, value):\n    return len(set(dictionary.values())) == 1",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None}\n\nprint(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})) # Should output {'c1': 'Red', 'c2': 'Green'}\nprint(drop_empty({'c1': 'Red', 'c2': None, 'c3':None}))    # Should output {'c1': 'Red'}\nprint(drop_empty({'c1': None, 'c2': 'Green', 'c3':None}))   # Should output {'c2': 'Green'}",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_peak(arr, n):\n    low = 0\n    high = n - 1\n    \n    while low < high:\n        mid = (low + high) // 2\n        \n        if arr[mid] > arr[mid + 1]:\n            high = mid\n        else:\n            low = mid + 1\n            \n    return arr[high]",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'decimal_to_Octal' is not defined",
      "Test 2: FAIL - name 'decimal_to_Octal' is not defined",
      "Test 3: FAIL - name 'decimal_to_Octal' is not defined"
    ],
    "generated_code": "def decimal_to_octal(decimal_number):\n    \"\"\"\n    Convert the given decimal number to its equivalent octal representation.\n    \n    Parameters:\n    - decimal_number (int): The decimal number to be converted.\n    \n    Returns:\n    - str: The octal representation of the input decimal number.\n    \"\"\"\n    # Initialize an empty string to store the result\n    octal_result = ''\n    \n    # Check for zero case separately as division by zero is not defined\n    if decimal_number == 0:\n        octal_result += '0'\n        \n    # Continue dividing the number by 8 and append remainder at the end of result\n    while decimal_number > 0:\n        remainder = decimal_number % 8\n        octal_result = str(remainder) + octal_result\n        decimal_number //= 8\n    \n    return octal_result\n\n# Test cases\nassert decimal_to_octal(10) == \"12\", \"Test case 1 failed\"\nassert decimal_to_octal(2) == \"2\", \"Test case 2 failed\"\nassert decimal_to_octal(33) == \"41\", \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_product(arr, k):\n    # Your solution goes here\n    pass",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_profit(prices, k):\n    \"\"\"\n    This function calculates the maximum profit that can be achieved from at most 'k' transactions.\n    \n    :param prices: List[int] - A list representing the prices of stocks over time.\n    :param k: int - The maximum number of transactions allowed.\n    :return: int - The maximum profit possible with at most 'k' transactions.\n    \"\"\"\n    if not prices:\n        return 0\n    \n    # Initialize variables\n    dp = [[float('-inf')] * len(prices) for _ in range(k + 1)]\n    n = len(prices)\n    \n    for i in range(1, k + 1):\n        buy = float('-inf')\n        for j in range(i, n):\n            # Update buy and sell values considering the current transaction\n            buy = max(buy, dp[i - 1][j - 1] - prices[j - 1])\n            sell = dp[i][j - 1]\n            dp[i][j] = max(sell, buy + prices[j])\n    \n    return dp[k][n - 1]\n\n# Test cases\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3))  # Expected output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2))     # Expected output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2))          # Expected output: 2",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_pairwise(tup):\n    # Initialize an empty list to store results\n    result = []\n    for i in range(len(tup)):\n        if i % 2 == 0:\n            result.append(sum(tup[i:i+2]))\n    return tuple(result)\n\n# Test cases to verify the correctness of the function\nprint(add_pairwise((1, 5, 7, 8, 10)))  # Expected output: (6, 12, 15, 18)\nprint(add_pairwise((2, 6, 8, 9, 11)))  # Expected output: (8, 14, 17, 20)\nprint(add_pairwise((3, 7, 9, 10, 12)))  # Expected output: (10, 16, 19, 22)",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_remainder(arr, n, m):\n    # Initialize result with the first element of the array\n    res = arr[0] % n\n    \n    # Iterate through the rest of the array elements\n    for i in range(1, len(arr)):\n        # Calculate new result using modular arithmetic property\n        res = (res * arr[i]) % n\n        \n        # Check if current result is zero early to optimize performance\n        if res == 0:\n            return 0\n    \n    return res\n\n# Test cases\nprint(find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11))  # Expected output: 9\nprint(find_remainder([1,1,1],3,1))  # Expected output: 0\nprint(find_remainder([1,2,1],3,2))  # Expected output: 0",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Consecutive(lst):\n    # Check if all elements in the list are consecutive\n    return all(x == y + 1 for x, y in zip(lst, lst[1:]))\n\n# Test cases\nprint(check_Consecutive([1, 2, 3, 4, 5]))  # Expected output: True\nprint(check_Consecutive([1, 2, 3, 5, 6]))  # Expected output: False\nprint(check_Consecutive([1, 2, 1]))        # Expected output: False",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_intersection(list1, list2):\n    # Convert both lists into sets for element uniqueness and unordered tuples comparison\n    set1 = {tuple(sorted(x)) for x in list1}\n    set2 = {tuple(sorted(x)) for x in list2}\n\n    # Return the intersection of two sets containing sorted unique tuples from both lists\n    return set1 & set2",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_counter(counter_dict):\n    sorted_items = sorted(counter_dict.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\n    # Find the maximum value in the array\n    max_value = max(arr)\n    # Find the minimum value in the array\n    min_value = min(arr)\n    # Return the sum of the maximum and minimum values\n    return max_value + min_value",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_lower(s):\n    \"\"\"\n    Converts all characters in the input string 's' to lowercase.\n    \n    Parameters:\n    s (str): The input string which may contain uppercase letters.\n    \n    Returns:\n    str: A new string with all uppercase letters converted to lowercase.\n    \"\"\"\n    # Using the built-in str method to convert each character to lowercase and joining them back into a string\n    return \"\".join([char.lower() for char in s])\n\n# Test Cases\nprint(is_lower(\"InValid\"))  # Expected output: invalid\nprint(is_lower(\"TruE\"))     # Expected output: true\nprint(is_lower(\"SenTenCE\")) # Expected output: sentence",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_lowercase(s):\n    result = ''\n    for char in s:\n        if not char.islower():\n            result += char\n    return result",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(number):\n    \"\"\"\n    Finds and returns the first non-zero digit in a given number.\n    \n    Args:\n        number (int): The number from which to find the first non-zero digit.\n        \n    Returns:\n        int: The first non-zero digit in the given number.\n    \"\"\"\n    # Ensure the input is positive for simplicity\n    num = abs(number)\n    \n    while num >= 10:\n        num //= 10\n    \n    return num\n\n# Check function with provided data points\nassert first_Digit(123) == 1, \"Test case 1 failed\"\nassert first_Digit(456) == 4, \"Test case 2 failed\"\nassert first_Digit(12) == 1, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(input_string):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_char = \"\"\n    max_count = 0\n    \n    # Find the character with the maximum occurrence\n    for char, count in char_count.items():\n        if count > max_count:\n            max_char = char\n            max_count = count\n            \n    return max_char",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef is_subset_sum(nums: List[int], target: int, total_sum: int) -> bool:\n    dp = [False] * (total_sum + 1)\n    dp[0] = True\n    \n    for num in nums:\n        for i in range(total_sum, num - 1, -1):\n            dp[i] |= dp[i - num]\n    \n    return dp[-1]\n\n# Test cases\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9))  # Output: True\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30))  # Output: False\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15))  # Output: True",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef match(input_string):\n    # The regular expression pattern to match sequences of one uppercase letter followed by lowercase letters.\n    pattern = '[A-Z][a-z]+'\n    \n    # Using re.search() to check if the pattern matches anywhere in the input string.\n    # If found, it returns a Match object; otherwise, None is returned.\n    result = re.search(pattern, input_string)\n    \n    # If a match is found, return \"Yes\", else return \"No\".\n    return \"Yes\" if result else \"No\"",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    n = 1\n    while True:\n        if factorial(n) % x == 0:\n            return n\n        n += 1\n    \ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def remove_matching_tuple(tup1, tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple containing all elements from tup1 except those also present in tup2.\n    \n    :param tup1: First input tuple.\n    :param tup2: Second input tuple.\n    :return: A tuple with elements from tup1 excluding those found in tup2.\n    \"\"\"\n    # Convert both tuples into sets for efficient lookup operations\n    set1 = set(tup1)\n    set2 = set(tup2)\n    \n    # Use difference operation between the two sets to find items in set1 but not in set2\n    result_set = set1.difference(set2)\n    \n    # Convert the resulting set back into a tuple and return it\n    return tuple(result_set)\n\n# Check function with provided data points\nassert remove_matching_tuple((), ()) == ()\nassert remove_matching_tuple(('Hello', 'dude'), ('Hello', 'dude')) == ('How', 'are')\nassert remove_matching_tuple(('Part', 'of'), ('the', 'journey', 'is')) == ('Part', 'of', 'the', 'journey')\nassert remove_matching_tuple((), ('part',)) == ()",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_palindrome(arr, n):\n    max_num = 0\n    for num in arr:\n        if str(num) == str(num)[::-1] and num > max_num:\n            max_num = num\n    return max_num\n\n# Example usage:\nresult_1 = largest_palindrome([1, 232, 54545, 999991], 4)\nprint(result_1)  # Expected output: 54545\n\nresult_2 = largest_palindrome([1, 2, 3, 4, 5, 50], 6)\nprint(result_2)  # Expected output: 5\n\nresult_3 = largest_palindrome([1, 3, 7, 9, 45], 5)\nprint(result_3)  # Expected output: 9",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute the binomial probability of getting exactly k successes in n trials with success probability p.\n    \n    Parameters:\n    - n: Number of trials.\n    - k: Desired number of successful outcomes.\n    - p: Probability of success on an individual trial.\n    \n    Returns:\n    The binomial probability P(X = k).\n    \"\"\"\n    factorial = lambda x: math.factorial(x)\n    return (math.comb(n, k) * pow(p, k) * pow(1-p, n-k))\n\n# Test cases to verify the correctness of the solution\nassert abs(binomial_probability(10, 5, 1.0/3) - 0.13656454808718185) < 0.00001\nassert abs(binomial_probability(11, 6, 2.0/4) - 0.2255859375) < 0.00001\nassert abs(binomial_probability(12, 7, 3.0/5) - 0.227030335488) < 0.00001",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuples_list):\n    # Sort the list of tuples based on the last element in each tuple\n    sorted_tuples = sorted(tuples_list, key=lambda x: x[-1])\n    return sorted_tuples\n\n# Test cases to verify the correctness of the function\nassert sort_tuple([(1, 3), (3, 2), (2, 1)]) == [(2, 1), (3, 2), (1, 3)], \"Test case 1 failed\"\nassert sort_tuple([(2, 4), (3, 3), (1, 1)]) == [(1, 1), (3, 3), (2, 4)], \"Test case 2 failed\"\nassert sort_tuple([(3, 9), (6, 7), (4, 3)]) == [(4, 3), (6, 7), (3, 9)], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef area_pentagon(side_length):\n    \"\"\"\n    Calculate the area of a regular pentagon with side length 'side_length'.\n    \n    Args:\n        side_length (float): The length of each side of the pentagon.\n        \n    Returns:\n        float: The area of the pentagon.\n    \"\"\"\n    # Area formula for a regular pentagon: (sqrt(5*(5+2*sqrt(5))) * s^2) / 4\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * side_length ** 2) / 4\n\n# Test the function with provided data points\nprint(area_pentagon(5))  # Expected output: approximately 43.01193501472417\nprint(area_pentagon(10)) # Expected output: approximately 172.0477400588967\nprint(area_pentagon(15)) # Expected output: approximately 387.10741513251753",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Largest(arr):\n    # Find the maximum value in the array\n    max_val = max(arr)\n    \n    # Initialize count for the maximum value\n    count_max_val = arr.count(max_val)\n    \n    return count_max_val",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_symmetric(tuple_list):\n    result = set()\n    for pair in tuple_list:\n        if len(pair) % 2 == 0 and tuple(pair[i] for i in range(len(pair)//2)) not in result:\n            result.add((pair[0], pair[-1]))\n    return result",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_gp(a, r, n):\n    return a * ((r ** n - 1) // (r - 1))",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_search(arr, target):\n    \"\"\"\n    Perform a binary search on the sorted list 'arr' and find if the element 'target' exists in it.\n    \n    Parameters:\n    arr (List[int]): A sorted list of integers where we need to perform the search.\n    target (int): The integer value we are searching for in the list.\n    \n    Returns:\n    bool: True if 'target' is found in the list, otherwise False.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'calculate_polygons' is not defined",
      "Test 2: FAIL - name 'calculate_polygons' is not defined",
      "Test 3: FAIL - name 'calculate_polygons' is not defined"
    ],
    "generated_code": "import math\n\ndef calculate_hexagon_coordinates(nx, ny, px, py, nq):\n    result = []\n    for i in range(nq + 1):\n        if i == 0:\n            new_point = ((nx - px) * math.sqrt(3) / 2, nx - py)\n            result.append(new_point)\n        else:\n            current_point_x = ((i - 1) * 2 * nx - i * (nq - i)) / 2 + px\n            current_point_y = ((i - 1) * 2 * ny - i * (ny - py)) / 2 + py\n            next_point_x = ((i + 1) * 2 * nx - (nq - i + 1) * (nx - px)) / 2 + px\n            next_point_y = ((i + 1) * 2 * ny - (nq - i + 1) * (ny - py)) / 2 + py\n            result.append((next_point_x, next_point_y))\n    return result[:nq]\n\n\n# Test cases\nprint(calculate_hexagon_coordinates(1, 1, 4, 4, 3))\nprint(calculate_hexagon_coordinates(5, 4, 7, 9, 8))\nprint(calculate_hexagon_coordinates(9, 6, 4, 3, 2))",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_to_integer(binary_tuple):\n    # Convert the binary tuple into its string representation and then to an integer.\n    result = int(''.join(str(i) for i in binary_tuple), 2)\n    return str(result)\n\n# Test cases\nprint(binary_to_integer((1, 1, 0, 1, 0, 0, 1)))  # Output: \"105\"\nprint(binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)))  # Output: \"101\"\nprint(binary_to_integer((1, 1, 0, 1, 0, 1)))  # Output: \"53\"",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(input_string):\n    # Define a regular expression pattern to match lowercase letters.\n    pattern = '[a-z]'\n    # Use re.sub() method to replace all occurrences of the pattern with an empty string.\n    result = re.sub(pattern, '', input_string)\n    return result",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef heap_queue_smallest(numbers, k):\n    return heapq.nsmallest(k, numbers)",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'surfacearea_cone' is not defined",
      "Test 2: FAIL - name 'surfacearea_cone' is not defined",
      "Test 3: FAIL - name 'surfacearea_cone' is not defined"
    ],
    "generated_code": "import math\nfrom math import pi\n\ndef surface_area_cone(radius, slant_height):\n    \"\"\"\n    Calculates the total surface area of a cone.\n    \n    Parameters:\n    radius (float): The radius of the base of the cone.\n    slant_height (float): The slant height of the cone.\n    \n    Returns:\n    float: The total surface area of the cone.\n    \"\"\"\n    # Calculate the base area\n    base_area = pi * radius ** 2\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = pi * radius * slant_height\n    \n    # Total surface area is sum of base and lateral areas\n    return round(base_area + lateral_surface_area, 2)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(surface_area_cone(5,12))  # Expected output: 282.74\n    print(surface_area_cone(10,15)) # Expected output: 880.52\n    print(surface_area_cone(19,17)) # Expected output: 2655.92",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'gcd' is not defined",
      "Test 2: FAIL - name 'gcd' is not defined",
      "Test 3: FAIL - name 'gcd' is not defined"
    ],
    "generated_code": "import math\n\ndef calculate_gcd(num1, num2):\n    \"\"\"\n    This function takes in two positive integers and returns their greatest common divisor.\n    \n    Parameters:\n    num1 (int): The first positive integer.\n    num2 (int): The second positive integer.\n    \n    Returns:\n    int: The greatest common divisor of num1 and num2.\n    \"\"\"\n    return math.gcd(num1, num2)\n\n# Test cases to verify the correctness of the solution\nassert calculate_gcd(12, 17) == 1\nassert calculate_gcd(4, 6) == 2\nassert calculate_gcd(2, 9) == 1",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef diameter_circle(radius):\n    \"\"\"\n    Calculate the diameter of a circle given its radius.\n    \n    Parameters:\n    - radius (float): The radius of the circle.\n    \n    Returns:\n    - float: The diameter of the circle.\n    \"\"\"\n    return 2 * radius",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(lst):\n    # Use join method to concatenate all elements in the list with a space\n    result = ' '.join(lst)\n    return result",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def num_comm_div(a, b):\n    # Use math.gcd which returns the greatest common divisor of two integers.\n    from math import gcd\n    # Find the minimum value between 'a' and 'b' as it will be the largest possible common divisor\n    return min(a, b) // gcd(a, b)",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(dividend, divisor):\n    return dividend % divisor",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_consecutive_nums(lst):\n    result = []\n    current_sum = lst[0]\n    for i in range(1, len(lst)):\n        if i % 2 == 0:\n            current_sum += lst[i]\n        else:\n            result.append(current_sum)\n            current_sum = lst[i]\n    result.append(current_sum)  # Append the last sum to the result list\n    return result",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Series' is not defined",
      "Test 2: FAIL - name 'sum_Of_Series' is not defined",
      "Test 3: FAIL - name 'sum_Of_Series' is not defined"
    ],
    "generated_code": "def sum_of_series(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_order(arr):\n    # Separate non-zero elements and zeros into two different lists\n    nonzero = []\n    zero = []\n    \n    for i in arr:\n        if i != 0:\n            nonzero.append(i)\n        else:\n            zero.append(i)\n    \n    # Concatenate non-zero elements with zero elements at the beginning\n    return nonzero + zero\n\n# Test cases\nprint(re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]))  # Output: [6, 8, 2, 3, 4, 1, 0, 0, 0]\nprint(re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]))  # Output: [4, 2, 7, 9, 12, 0, 0, 0, 0]\nprint(re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]))  # Output: [3, 11, 74, 14, 1, 2, 0, 0, 0]",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient P(n, k).\n    \n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n    \n    Returns:\n    int: The permutation coefficient P(n, k).\n    \"\"\"\n    if k > n:\n        return 0\n    return factorial(n) // factorial(n - k)\n\n# Helper function to calculate factorial\ndef factorial(x):\n    if x == 0:\n        return 1\n    result = 1\n    for i in range(2, x + 1):\n        result *= i\n    return result",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(word_list, filter_list):\n    return [word for word in word_list if word not in filter_list]",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def same_order(list1, list2):\n    # Check if both lists have the same length and contain the same elements\n    return len(set(list1)) == len(set(list2)) and sorted(list1) == sorted(list2)\n\n# Test cases\nprint(same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])) # True\nprint(same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])) # False\nprint(same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])) # True",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def average_Odd(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2): # Iterate over all odd numbers up to n\n        sum += i\n        count += 1\n    if count == 0:\n        return 0\n    else:\n        return sum / count",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def no_of_subsequences(arr, k):\n    dp = [1] * len(arr)\n    prev = [-1] * len(arr)\n    \n    for i in range(len(arr)):\n        count = 0\n        for j in range(i + 1):\n            if arr[j] > 0 and arr[i] / float(arr[j]) < k:\n                count += dp[j]\n        dp[i] = count + 1\n        if prev[i] != -1 and prev[i] >= 0:\n            dp[i] *= dp[prev[i]]\n        prev[i] = i\n    \n    return dp[-1]\n\n# Test cases\nprint(no_of_subsequences([1,2,3,4], 10))  # Output: 11\nprint(no_of_subsequences([4,8,7,2], 50))  # Output: 9\nprint(no_of_subsequences([5,6,7,8], 15))  # Output: 4",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef find_Min_Sum(n):\n    # Initialize the smallest factor to n itself\n    min_sum = n\n    \n    # Start with 2 as the smallest factor and increment by 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            # Calculate the new sum if we divide n by its current factor\n            temp_min_sum = n // i + min_sum - i\n            if temp_min_sum < min_sum:\n                min_sum = temp_min_sum\n            \n            # Divide n by i until it's no longer divisible\n            n //= i\n    \n    # If n is greater than 1 at the end of the loop, then add it to the sum\n    if n > 1:\n        min_sum += n\n    \n    return min_sum",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_freq(tup):\n    freq_dict = {}\n    for elem in tup:\n        if isinstance(elem, int):  # Check if the element is an integer\n            freq_dict[elem] = freq_dict.get(elem, 0) + 1\n        elif isinstance(elem, tuple):  # If it's a tuple, iterate through its elements\n            for sub_elem in elem:\n                freq_dict[sub_elem] = freq_dict.get(sub_elem, 0) + 1\n    return freq_dict",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_str(tuple_data, add_str):\n    new_list = []\n    for item in tuple_data:\n        new_list.append(item)\n        new_list.append(add_str)\n    return new_list[:-1]  # Remove the last dummy element added by add_str",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_elements(tuples_list):\n    total_sum = 0\n    for t in tuples_list:\n        for num in t:\n            total_sum += num\n    return total_sum\n\ndef check_function():\n    assert sum_elements([(7, 8, 9, 1, 10, 7)]) == 42, \"Test case 1 failed\"\n    assert sum_elements([(1, 2, 3, 4, 5, 6)]) == 21, \"Test case 2 failed\"\n    assert sum_elements([(11, 12 ,13 ,45, 14)]) == 95, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_function()",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from itertools import combinations_with_replacement\n\ndef modular_sum(numbers, target_modulus, divisor):\n    \"\"\"\n    Check if there exists a subset of numbers whose sum is divisible by the divisor.\n    \n    Parameters:\n        numbers (list): A list of integers.\n        target_modulus (int): The modulus value for checking divisibility.\n        divisor (int): The number we want to divide the sum by.\n        \n    Returns:\n        bool: True if such a subset exists, False otherwise.\n    \"\"\"\n    all_combinations = [comb for comb in combinations_with_replacement(sorted(numbers), len(numbers))]\n    for combination in all_combinations:\n        current_sum = sum(combination)\n        if current_sum % divisor == 0:\n            return True\n    return False\n\n# Example usage and test cases\nprint(modular_sum([3, 1, 7, 5], 4, 6))  # Expected output: True\nprint(modular_sum([1, 7], 2, 5))        # Expected output: False\nprint(modular_sum([1, 6], 2, 5))        # Expected output: False",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def radix_sort(arr):\n    max_num = max(arr)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort_for_radix(arr, exp)\n        exp *= 10\n    return arr\n\ndef counting_sort_for_radix(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = (arr[i] // exp) % 10\n        count[index] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = (arr[i] // exp) % 10\n        output[count[index] - 1] = arr[i]\n        count[index] -= 1\n        i -= 1\n    \n    for i in range(n):\n        arr[i] = output[i]\n\n# Test cases\nprint(radix_sort([15, 79, 25, 68, 37])) # Output: [15, 25, 37, 68, 79]\nprint(radix_sort([9, 11, 8, 7, 3, 2])) # Output: [2, 3, 7, 8, 9, 11]\nprint(radix_sort([36, 12, 24, 26, 29])) # Output: [12, 24, 26, 29, 36]",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(nums):\n    max_num = nums[0]  # Initialize max_num with the first element of the list\n    for num in nums:\n        if num > max_num:\n            max_num = num  # Update max_num if a larger number is found\n    return max_num",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sqrt_root(num):\n    return int(num ** 0.5)",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sqrt' is not defined",
      "Test 2: FAIL - name 'sqrt' is not defined",
      "Test 3: FAIL - name 'sqrt' is not defined"
    ],
    "generated_code": "def volume_tetrahedron(side_length):\n    # Calculate the volume of a regular tetrahedron with side length 'side_length'\n    volume = (side_length ** 3) / (6 * sqrt(2))\n    return round(volume)",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from math import gcd\nfrom functools import reduce\n\ndef get_lcm(numbers):\n    def lcm(a, b):\n        return abs(a*b) // gcd(a, b)\n    \n    return reduce(lcm, numbers)\n\n# Test cases\nprint(get_lcm([2, 7, 3, 9, 4]))  # Expected output: 252\nprint(get_lcm([1, 2, 8, 3]))     # Expected output: 24\nprint(get_lcm([3, 8, 4, 10, 5])) # Expected output: 120",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    \"\"\"\n    This function checks if a given set of three side lengths form an isosceles triangle.\n    An isosceles triangle has at least two sides of equal length and no angles less than 90 degrees.\n    \n    Parameters:\n    a (int): Length of one side of the triangle.\n    b (int): Length of another side of the triangle.\n    c (int): Length of the remaining side of the triangle.\n    \n    Returns:\n    bool: True if the input forms an isosceles triangle, False otherwise.\n    \"\"\"\n    # Check for triangle inequality theorem violation\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Check for two sides being equal\n    if a == b or b == c or c == a:\n        return True\n    \n    return False\n\n# Test cases to verify the correctness of the function\nprint(check_isosceles(6,8,12))   # Expected output: True\nprint(check_isosceles(6,6,12))   # Expected output: False\nprint(check_isosceles(6,15,20))  # Expected output: True",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lbs(arr):\n    n = len(arr)\n    \n    # Initialize the DP table and BITONIC flag\n    dp = [1] * n\n    bitonic = [False] * n\n    \n    # Fill the DP table\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n        # Determine if it's a bitonic sequence\n        if dp[i] >= n - dp[i]:\n            bitonic[i] = True\n    \n    # Find the maximum length of bitonic sequences\n    max_len = 0\n    for i in range(n):\n        if bitonic[i]:\n            max_len = max(max_len, dp[i])\n    \n    return max_len",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - expected string or bytes-like object",
      "Test 2: FAIL - expected string or bytes-like object",
      "Test 3: FAIL - expected string or bytes-like object"
    ],
    "generated_code": "def check_string(s):\n    import re\n    \n    def char_checker(char):\n        return lambda s: f\"String must have {char}.\" if not s.isalpha() else None\n\n    def num_checker(num):\n        return lambda s: f\"String must have {num}. Number is not valid.\" if not re.match(r\"\\d\", s) else None\n\n    def length_checker(length):\n        return lambda s: f\"String length should be atleast {length}.\" if len(s) < length else None\n\n    return [\n        char_checker(\"upper\")(\n            num_checker(\"number\")(lambda x: \n                length_checker(8)(x)\n            )\n        ),\n        char_checker(\"lower\")(),\n        num_checker(\"digit\"),\n        length_checker(8)\n    ]",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_increasing_subsequence(arr, n):\n    dp = [arr[0]] * n\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            dp[i] = arr[i] + dp[i - 1]\n        else:\n            dp[i] = arr[i]\n    return max(dp)\n\n# Test cases\nprint(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7))  # Output: 106\nprint(max_sum_increasing_subsequence([3, 4, 5, 10], 4))  # Output: 22\nprint(max_sum_increasing_subsequence([10, 5, 4, 3], 4))  # Output: 10",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'parallel_lines' is not defined",
      "Test 2: FAIL - name 'parallel_lines' is not defined",
      "Test 3: FAIL - name 'parallel_lines' is not defined"
    ],
    "generated_code": "def is_parallel(line1, line2):\n    \"\"\"\n    Check if two lines defined by their coefficients are parallel.\n    \n    Args:\n        line1: A list of three elements [A, B, C] representing Ax + By = C.\n        line2: A list of three elements [A, B, C] representing Ax + By = C.\n        \n    Returns:\n        True if both lines are parallel, False otherwise.\n    \"\"\"\n    # The condition for parallel lines in ax+by=c and cx+dy=e is ad-bc=0\n    return line1[0]*line2[1] - line1[1]*line2[0]\n\n# Test cases\nprint(is_parallel([2,3,4], [2,3,8]))  # Expected output: True\nprint(is_parallel([2,3,4], [4,-3,8]))  # Expected output: False\nprint(is_parallel([3,3],[5,5]))       # Expected output: True",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def capitalize_first_last_letters(s):\n    \"\"\"\n    Capitalizes the first and last letter of each word in the given string.\n    \n    Parameters:\n    s (str): The input string containing words separated by spaces.\n    \n    Returns:\n    str: A new string with the first and last letters of each word capitalized.\n    \"\"\"\n    return ' '.join([word[0].upper() + word[1:-1] + word[-1].upper() for word in s.split(' ')])",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef get_pairs_count(arr: List[int], target_sum: int, pair_sum: int) -> int:\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    \n    while left < right:\n        current_pair_sum = arr[left] + arr[right]\n        if current_pair_sum == pair_sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif current_pair_sum > pair_sum:\n            right -= 1\n        else:\n            left += 1\n            \n    return count\n\n# Test cases\nprint(get_pairs_count([1, 5, 7, -1, 5], 5, 6))  # Expected output: 3\nprint(get_pairs_count([1, 5, 7, -1], 4, 6))     # Expected output: 2\nprint(get_pairs_count([1, 1, 1, 1], 4, 2))      # Expected output: 6",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length(lst):\n    return min(zip(*lst), key=len)\n\n# Test cases\nprint(min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))  # Expected output: (1, [0])\nprint(min_length([[1], [5, 7], [10, 12, 14, 15]]))              # Expected output: (1, [1])\nprint(min_length([[5], [15, 20, 25]]))                          # Expected output: (1, [5])",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'y' is not defined"
    ],
    "generated_code": "def jacobsthal_lucas(n):\n    # Base case for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Recursive case\n    def helper(x, y):\n        nonlocal result\n        result += x * (y << 1)\n    \n    result = 0\n    helper(2, 1)\n    \n    while n > 1:\n        result <<= 1\n        helper(result + y - x, result + x)\n        n -= 1\n    \n    return result\n\n# Test cases\nassert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'list' and 'int'"
    ],
    "generated_code": "import numpy as np\n\ndef negative_count(arr):\n    \"\"\"\n    Calculate the ratio of negative numbers in the given list.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    float: The ratio of negative numbers in the list rounded to 6 decimal places.\n    \"\"\"\n    negatives = np.sum(arr < 0)\n    total_elements = len(arr)\n    if total_elements == 0:\n        return 0\n    else:\n        return round(negatives / total_elements, 6)\n\n# Test cases to verify the correctness of the function\nassert abs(negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) - 0.31) < 0.01\nassert abs(negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) - 0.31) < 0.01\nassert abs(negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17]) - 0.44) < 0.01\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_coins(coins, amount, target): \n    dp = [[float('inf')] * (target + 1) for _ in range(len(coins) + 1)]\n    dp[0][0] = 0\n    \n    for i in range(1, len(dp)):  \n        for j in range(1, len(dp[0])):  \n            if j >= coins[i-1]:  \n                dp[i][j] = min(dp[i-1][j], dp[i][j-coins[i-1]] + 1)\n            else:\n                dp[i][j] = dp[i-1][j]\n                \n    return dp[-1][-1]\n\n# Test cases\nprint(min_coins([9, 6, 5, 1], 4, 11)) # Expected output: 2\nprint(min_coins([4,5,6,7,8,9], 6, 9)) # Expected output: 1\nprint(min_coins([1, 2, 3], 3, 4)) # Expected output: 2",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_permutation' is not defined",
      "Test 2: FAIL - name 'check_permutation' is not defined",
      "Test 3: FAIL - name 'check_permutation' is not defined"
    ],
    "generated_code": "def is_permutation(str1, str2):\n    \"\"\"\n    Check if two input strings are permutations of each other.\n    \n    Args:\n        str1 (str): The first string to compare.\n        str2 (str): The second string to compare.\n        \n    Returns:\n        bool: True if str1 and str2 are permutations of each other, False otherwise.\n    \"\"\"\n    # Remove spaces and convert both strings to lowercase for comparison\n    cleaned_str1 = ''.join(e for e in str1 if e.isalnum()).lower()\n    cleaned_str2 = ''.join(e for e in str2 if e.isalnum()).lower()\n\n    # Sort the characters of both strings and compare them\n    return sorted(cleaned_str1) == sorted(cleaned_str2)\n\n# Test cases to verify the correctness of the function\nassert is_permutation(\"abc\", \"cba\") == True\nassert is_permutation(\"test\", \"ttew\") == False\nassert is_permutation(\"xxyz\", \"yxzx\") == True\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_datatype(tup, datatype):\n    result = []\n    for item in tup:\n        if not isinstance(item, datatype):\n            result.append(item)\n    return result\n\n# Test cases\nprint(remove_datatype((4, 5, 4, 7.7, 1.2), int))  # Output: [7.7, 1.2]\nprint(remove_datatype((7, 8, 9, \"SR\"), str))       # Output: [7, 8, 9]\nprint(remove_datatype((7, 1.1, 2, 2.2), float))    # Output: [7, 2]",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search_literal(text, literal):\n    index = text.find(literal)\n    return (index, index + len(literal))\n\n# Example usage:\nresult = search_literal('python programming language', 'python')\nprint(result)  # Output should be (0, 6)\n\nresult = search_literal('programming', 'python programming language')\nprint(result)  # Output should be (7, 18)\n\nresult = search_literal('language', 'python programming language')\nprint(result)  # Output should be (19, 27)",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test failed for input 10. Expected 314.15, got 314.1592653589793"
    ],
    "generated_code": "import math\nfrom typing import Tuple\n\ndef topbottom_surfacearea(radius: float) -> float:\n    \"\"\"\n    Calculates the surface area of either the top or the bottom of a cylinder.\n    \n    Parameters:\n    radius (float): The radius of the base of the cylinder.\n    \n    Returns:\n    float: The surface area of the top or bottom face of the cylinder.\n    \"\"\"\n    return math.pi * radius ** 2\n\n# Example check function to verify the correctness of the solution with provided data points\ndef check_function():\n    test_cases = [(10, 314.15), (5, 78.5375), (4, 50.264)]\n    for inputs, expected in test_cases:\n        assert abs(topbottom_surfacearea(inputs) - expected) < 1e-4, f\"Test failed for input {inputs}. Expected {expected}, got {topbottom_surfacearea(inputs)}\"\n    print(\"All tests passed!\")\n\ncheck_function()",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(lst, n):\n    return lst[n::n]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_word(s):\n    words = s.split()\n    seen_words = set()\n\n    for word in words:\n        if word in seen_words:\n            return word\n        else:\n            seen_words.add(word)\n\n    return None",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\n    # Convert each item in the list into a tuple and then join them with spaces\n    result = tuple(item for item in string_list)\n    return result\n\n# Test cases\nprint(string_list_to_tuple([\"python 3.0\"]))  # Expected output: ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nprint(string_list_to_tuple([\"bigdata\"]))      # Expected output: ('b', 'i', 'g', 'd', 'a', 't', 'a')\nprint(string_list_to_tuple([\"language\"]))     # Expected output: ('l', 'a', 'n', 'g', 'u', 'a', 'g', 'e')",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "def basesnum_correspondingnum(basesnum, correspondingnum):\n    # Using map to apply the lambda function for each element in basesnum\n    return list(map(lambda x, y: pow(x, y), basesnum, correspondingnum))",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Diff(arr, n):\n    frequency = {}\n    for i in arr:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    \n    max_freq = -float('inf')\n    min_freq = float('inf')\n    \n    for key, value in frequency.items():\n        if value > max_freq:\n            max_freq = value\n        if value < min_freq:\n            min_freq = value\n    \n    diff = max_freq - min_freq\n    return diff\n\n# Test cases\nprint(find_Diff([1,1,2,2,7,8,4,5,1,4],10))  # Output: 2\nprint(find_Diff([1,7,9,2,3,3,1,3,3],9))     # Output: 3\nprint(find_Diff([1,2,1,2],4))                # Output: 0",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_abundant(n):\n    # Calculate sum of proper divisors\n    sum_divisors = sum([i for i in range(1, n) if n % i == 0])\n    \n    # Determine if it's an abundant number\n    if sum_divisors > n:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef fill_spaces(input_string):\n    # Replace spaces, commas, and dots with colons\n    modified_string = re.sub(r'[\\s,\\.]', ':', input_string)\n    return modified_string\n\n# Test the function with provided data points\nprint(fill_spaces('Boult Curve Wireless Neckband'))  # Expected output: 'Boult:Curve:Wireless:Neckband'\nprint(fill_spaces('Stereo Sound Sweatproof'))      # Expected output: 'Stereo:Sound:Sweatproof'\nprint(fill_spaces('Probass Curve Audio'))           # Expected output: 'Probass:Curve:Audio'",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_digits(num1, num2):\n    # Calculate the sum of two numbers\n    sum_num = num1 + num2\n    \n    # Convert the sum to string to calculate its length\n    str_sum = str(sum_num)\n    \n    # Return the number of characters in the string which represents the sum\n    return len(str_sum)\n\n# Example test cases\nprint(count_digits(9875,10))   # Expected output: 4\nprint(count_digits(98759853034,100))   # Expected output: 11\nprint(count_digits(1234567,500))   # Expected output: 7",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def flatten_tuple(tup_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns a single string containing all elements from the tuples,\n    separated by spaces.\n    \n    Example usage:\n    >>> flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')])\n    '1 4 6 5 8 2 9 1 10'\n    >>> flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')])\n    '2 3 4 6 9 3 2 2 11'\n    >>> flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')])\n    '14 21 9 24 19 12 29 23 17'\n    \"\"\"\n    # Flatten the list of tuples into a single string with items separated by spaces\n    result = ''.join(item for sublist in tup_list for item in sublist)\n    return result\n\n# Check function with provided data points\nprint(flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]))  # Expected output: '1 4 6 5 8 2 9 1 10'\nprint(flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]))  # Expected output: '2 3 4 6 9 3 2 2 11'\nprint(flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]))  # Expected output: '14 21 9 24 19 12 29 23 17'",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_F_and_L_bits(n):\n    # Toggle the first bit\n    n ^= (1 << 0)\n    \n    # Toggle the last bit\n    n ^= (1 << 7)\n    \n    return n\n\n# Test cases\nprint(toggle_F_and_L_bits(10))  # Expected output: 3\nprint(toggle_F_and_L_bits(15))  # Expected output: 6\nprint(toggle_F_and_L_bits(20))  # Expected output: 5",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - string index out of range"
    ],
    "generated_code": "def last_occurence_char(s, char):\n    index = len(s) - 1\n    while s[index] != char:\n        index -= 1\n    return index if index >= 0 else None",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Total_Hamming_Distance' is not defined",
      "Test 2: FAIL - name 'Total_Hamming_Distance' is not defined",
      "Test 3: FAIL - name 'Total_Hamming_Distance' is not defined"
    ],
    "generated_code": "def total_hamming_distance(n):\n    # Calculate the sum of Hamming distances for all consecutive numbers from 0 to n\n    total_sum = 0\n    for i in range(n + 1):\n        total_sum += sum([abs(i - j) for j in range(n + 1)])\n    return total_sum // 2\n\n# Test cases\nprint(total_hamming_distance(4))  # Output should be 7\nprint(total_hamming_distance(2))  # Output should be 3\nprint(total_hamming_distance(5))  # Output should be 8",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    \n    n = len(sequence)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Example usage\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))  # Output: 5\nprint(longest_increasing_subsequence([3, 10, 2, 1, 20]))              # Output: 3\nprint(longest_increasing_subsequence([50, 3, 10, 7, 40, 80]))          # Output: 4",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate over the first n odd natural numbers\n    for i in range(1, 2*n, 2):  # Start from 1 and increment by 2 each time\n        total_sum += i**5  # Add the fifth power of the current number\n        \n    return total_sum",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max(arr, start, end):\n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) // 2\n    \n    # If there is only one element left\n    if mid == start and arr[mid] > arr[end]:\n        return arr[mid]\n    \n    # Check if the middle element is greater than the last element\n    elif arr[mid] > arr[end]:\n        return find_Max(arr, mid + 1, end)\n    \n    else:\n        return find_Max(arr, start, mid)\n\n# Test cases\nprint(find_Max([2,3,5,6,9],0,4))  # Expected output: 9\nprint(find_Max([3,4,5,2,1],0,4))  # Expected output: 5\nprint(find_Max([1,2,3],0,2))      # Expected output: 3",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not subscriptable"
    ],
    "generated_code": "def extract_column(nested_list, col_index):\n    # Extract the specific column as a list of lists and flatten it into a single list\n    return [item[col_index] for sublist in nested_list for item in sublist]\n\n# Test cases\nprint(extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0))  # Output should be [1, 2, 1]\nprint(extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2))  # Output should be [3, -5, 1]\nprint(extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0))  # Output should be [1, 5, 1, 13, 5, 9]",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Seq_Linear(sequence):\n    # Check if all elements in the sequence increase by 1 sequentially\n    for i in range(1, len(sequence)):\n        if sequence[i] - sequence[i-1] != 1:\n            return \"Non Linear Sequence\"\n    return \"Linear Sequence\"\n\n# Test cases\nprint(Seq_Linear([0,2,4,6,8,10]))  # Expected output: \"Linear Sequence\"\nprint(Seq_Linear([1,2,3]))         # Expected output: \"Linear Sequence\"\nprint(Seq_Linear([1,5,2]))         # Expected output: \"Non Linear Sequence\"",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_to_float(tup):\n    # Convert the tuple to a float and return it.\n    return float(tup[0] + tup[1])",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(lst):\n    \"\"\"\n    Returns a new list containing only the odd numbers from the input list.\n    \n    Parameters:\n    lst (list): A mixed list of integers.\n    \n    Returns:\n    list: A list containing only the odd numbers from the input list.\n    \"\"\"\n    return [x for x in lst if x % 2 != 0]\n\n# Test cases\nassert split([1,2,3,4,5,6]) == [1,3,5], \"Test case 1 failed\"\nassert split([10,11,12,13]) == [11,13], \"Test case 2 failed\"\nassert split([7,8,9,1]) == [7,9,1], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def difference(n):\n    # Calculate sum of cubes of first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    \n    # Calculate sum of first n natural numbers\n    sum_natural_numbers = sum(range(1, n+1))\n    \n    # Return the difference\n    return sum_cubes - sum_natural_numbers",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Odd_Pair(nums, target_odd):\n    odd_count = sum(1 for num in nums if num % 2 != 0)\n    even_pairs = sum((num * (target_odd - num)) // 2 for num in nums if num < target_odd)\n    \n    # Calculate total pairs where the XOR of two elements is odd.\n    total_pairs = odd_count * (odd_count - 1) // 2 + even_pairs\n    \n    return total_pairs\n\n# Example usage:\nprint(find_Odd_Pair([5,4,7,2,1], 5))\nprint(find_Odd_Pair([7,2,8,1,0,5,11], 7))\nprint(find_Odd_Pair([1,2,3], 3))",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(s):\n    # Use map and lambda functions to convert uppercase to lowercase and vice versa\n    return ''.join(map(lambda c: c.lower() if c.isupper() else c.upper(), s))",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings for easy digit extraction\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Calculate the absolute difference of each corresponding digit and sum them up\n    distance_sum = sum(abs(int(digit1) - int(digit2)) for digit1 in str_num1 for digit2 in str_num2 if digit1 != '0' and digit2 != '0')\n    \n    return distance_sum\n\n# Test cases\nprint(digit_distance_nums(1,2))   # Expected output: 1\nprint(digit_distance_nums(23,56)) # Expected output: 6\nprint(digit_distance_nums(123,256)) # Expected output: 7",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def max_sub_array_sum(nums):\n    \"\"\"\n    Find the maximum sum of contiguous subarray within an array of integers.\n    \n    Parameters:\n    nums (List[int]): The list of integers containing at least one positive integer.\n    \n    Returns:\n    int: The maximum sum of contiguous subarray.\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Array is empty\")\n    \n    current_max = global_max = nums[0]\n    \n    for num in nums[1:]:\n        current_max = max(num, current_max + num)\n        global_max = max(global_max, current_max)\n    \n    return global_max",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - union_elements() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - union_elements() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - union_elements() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def union_elements(tuples_list):\n    # Convert all elements in tuples into a set to remove duplicates and then convert back to tuple\n    return tuple(set.union(*tuples_list))",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_elements(tuples_list):\n    # Initialize an empty dictionary to store the result\n    result = {}\n    \n    # Iterate through each tuple in the list\n    for tup in tuples_list:\n        # Check if the tuple contains duplicate elements\n        if len(set(tup)) != len(tup):\n            continue\n        \n        # Find all unique pairs of numbers in the current tuple\n        pairs = set()\n        for i in range(len(tup)):\n            for j in range(i + 1, len(tup)):\n                pairs.add((tup[i], tup[j]))\n                \n        # Assign each number to the first occurrence it appears after removing duplicates\n        for num in sorted(pairs, reverse=True):\n            if num[0] not in result:\n                result[num[0]] = []\n            for x in range(1, len(num)):\n                result[num[x-1]].append(num[x])\n            \n    return result",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max_Length' is not defined",
      "Test 2: FAIL - name 'Find_Max_Length' is not defined",
      "Test 3: FAIL - name 'Find_Max_Length' is not defined"
    ],
    "generated_code": "def find_max_length(lst):\n    max_length = 0\n    for sub_lst in lst:\n        if len(sub_lst) > max_length:\n            max_length = len(sub_lst)\n    return max_length",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef extract_values(s):\n    # Split the string into parts using ',' as separator and capture the parts with double quotes.\n    return [item.strip('\"') for item in s.split(',') if item.startswith('\"')]\n\n# Test cases\nprint(extract_values('\"Python\", \"PHP\", \"Java\"'))  # Output: ['Python', 'PHP', 'Java']\nprint(extract_values('\"python\",\"program\",\"language\"'))  # Output: ['python', 'program', 'language']\nprint(extract_values('\"red\",\"blue\",\"green\",\"yellow\"'))  # Output: ['red', 'blue', 'green', 'yellow']",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    # Initialize counter for unequal pairs\n    equal = 0\n    # Iterate through the array to find unequal elements\n    for i in range(n-1):\n        if arr[i] != arr[i+1]:\n            equal += 1\n    # Return the total number of unequal pair counts found\n    return equal",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(s):\n    # Split the input string into individual characters and return the result as a list\n    return list(s)",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(number):\n    return sum(int(digit) for digit in str(number))",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(lst):\n    # Check if the given list is sorted in ascending order\n    return lst == sorted(lst)",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def empty_list(n):\n    return [{}] * n",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_sublists(list_of_lists):\n    return [[item for item in sublist] for sublist in sorted(list_of_lists)]",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def remove_words(words_list, chars_to_remove):\n    \"\"\"\n    Remove specified characters from each word in the given list of strings.\n    \n    Parameters:\n    - words_list: A list of strings from which certain characters will be removed.\n    - chars_to_remove: A list of characters to be removed from the words.\n    \n    Returns:\n    A new list of strings with the specified characters removed.\n    \"\"\"\n    result = []\n    for item in words_list:\n        cleaned_word = ''.join([char for char in item if char not in chars_to_remove])\n        result.append(cleaned_word)\n    return result\n\n# Test Cases\nassert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"], ['#', 'color', '@']) == ['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['&', '+', '@']) == ['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['@']) == ['Red &', 'Orange+', 'Green', 'Orange', 'White']\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_pair_diff_lessthan_K(nums: List[int], k: int, n: int) -> int:\n    nums.sort()\n    i = j = total = current_max = 0\n    \n    while i < len(nums) - 1 and j <= i + 1:\n        if nums[i + 1] - nums[j] >= k:\n            current_max += nums[i + 1]\n            i += 1\n        else:\n            current_max += min(nums[i + 1], nums[j])\n            j += 1\n            \n    return total + current_max",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def two_unique_nums(lst):\n    seen = set()\n    unique_list = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            unique_list.append(item)\n    return unique_list\n\n# Test cases\nprint(two_unique_nums([1,2,3,2,3,4,5]))  # Output: [1, 4, 5]\nprint(two_unique_nums([1,2,3,2,4,5]))   # Output: [1, 3, 4, 5]\nprint(two_unique_nums([1,2,3,4,5]))     # Output: [1, 2, 3, 4, 5]",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_product(lst):\n    import math\n    from collections import Counter\n    \n    # Count the frequency of each number in the list\n    freq = Counter(lst)\n    \n    # Calculate the product of the frequencies where the number appears exactly once\n    result = math.prod(freq[num] for num in freq if freq[num] == 1)\n    \n    return result",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def surfacearea_cylinder(radius, height):\n    # Calculate the top and bottom areas of the cylinder\n    top_bottom_area = 2 * 3.14159 * radius * radius\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * 3.14159 * radius * height\n    # Total surface area is the sum of top and bottom areas plus lateral surface area\n    total_surface_area = top_bottom_area + lateral_surface_area\n    return round(total_surface_area)",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - count_no() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def count_no(nth_num, divisor, seq_length):\n    current = 0\n    for i in range(seq_length):\n        if current % nth_num != 0 and current % divisor != 0:\n            current += 1\n        else:\n            break\n    return current - 1\n\n# Test cases\nprint(count_no(2,3,10)) # Expected output: 5\nprint(count_no(3,6,20)) # Expected output: 11\nprint(count_no(5,10,20)) # Expected output: 16",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Sub_Array' is not defined",
      "Test 2: FAIL - name 'is_Sub_Array' is not defined",
      "Test 3: FAIL - name 'is_Sub_Array' is not defined"
    ],
    "generated_code": "def is_sub_array(arr1, arr2, n1, n2):\n    # Create an empty list to store elements from arr1 that match with arr2\n    matches = []\n    \n    # Iterate through each element in arr2\n    for i in range(n2):\n        if arr2[i] in arr1:\n            matches.append(arr2[i])\n    \n    # Check if all elements in arr2 are present in arr1 as per their order and frequency\n    return len(matches) == n2 and set(matches) == set(arr2)",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit_Factorial(n):\n    # Calculate factorial of n\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    \n    # Return the last digit of the factorial\n    return factorial % 10",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def interleave_lists(*args):\n    return list(zip(*args))",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_dissimilar(tuple1, tuple2):\n    # Convert tuples to sets for element uniqueness and then back to lists\n    unique_elements = list(set(tuple1) ^ set(tuple2))\n    return tuple(unique_elements)\n\n# Test cases\nprint(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))  # Expected output: (3, 6, 7, 10)\nprint(find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)))   # Expected output: (1, 4, 7, 9)\nprint(find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)))  # Expected output: (34, 36, 11, 25)",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_even(tup):\n    result = ()\n    for element in tup:\n        if isinstance(element, tuple) and all(isinstance(x, int) and x % 2 == 0 for x in element):\n            result += element,\n    return result",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def surface_Area(base_side, slant_height):\n    \"\"\"\n    Calculate the total surface area of a square pyramid.\n    \n    Parameters:\n    base_side (int): The length of one side of the square base.\n    slant_height (int): The height from the center of the base to the apex along the face diagonal.\n    \n    Returns:\n    int: The total surface area of the square pyramid.\n    \"\"\"\n    # Area of the base\n    base_area = base_side ** 2\n    \n    # Two triangles on the sides with area each as half of base side times height\n    triangle_area = base_side * slant_height / 2 * 2\n    \n    # Total surface area is sum of the base area and the two triangle areas\n    surface_area = base_area + triangle_area\n    \n    return surface_area",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def my_dict(my_dict):\n    # Check if the dictionary is empty\n    return len(my_dict) == 0",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def catalan_number(n):\n    # Base case\n    if n <= 1:\n        return 1\n    \n    # Initialize result\n    c = 0\n    \n    # Calculate Catalan number using Binomial coefficient formula\n    for i in range(n):\n        c += catalan_number(i) * catalan_number(n - i - 1)\n    \n    return c\n\n# Test cases\nprint(catalan_number(10))  # Output: 16796\nprint(catalan_number(9))   # Output: 4862\nprint(catalan_number(7))   # Output: 429",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import re\n\ndef find_adverbs(sentence):\n    # Find all occurrences of 'ly' words in the sentence.\n    adverbs = re.findall(r'\\b\\w*l\\b', sentence)\n    results = []\n    \n    # Extract start and end indices of each found adverb.\n    for i in range(len(adverbs)):\n        index_start = sentence.find(adverbs[i])\n        index_end = index_start + len(adverbs[i]) - 1\n        if index_start != -1:\n            results.append(f\"{index_start}-{index_end}: {adverbs[i]}\")\n            \n    return '\\n'.join(results)\n\n# Test cases to verify the correctness of the function.\nassert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\"\nassert find_adverbs(\"Please handle the situation carefuly\") == \"28-36: carefuly\"\nassert find_adverbs(\"Complete the task quickly\") == \"18-25: quickly\"",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\n\ndef expensive_items(items, n):\n    # Use negative prices for max heap based on actual prices\n    return heapq.nlargest(n, [(item['price'], item) for item in items], key=lambda x: x[1]['price'])\n\n# Test Cases\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 1)) \nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2))\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}], 1))",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'split_Arr' is not defined",
      "Test 2: FAIL - name 'split_Arr' is not defined",
      "Test 3: FAIL - name 'split_Arr' is not defined"
    ],
    "generated_code": "def split_arr(arr, n, k):\n    # Remove the first k elements from the list\n    new_arr = arr[k:]\n    # Add the remaining elements at the beginning of the list\n    return new_arr + new_arr[:k]\n\n# Example usage:\nprint(split_arr([12,10,5,6,52,36], 6, 2))  # Output: [5, 6, 52, 36, 12, 10]\nprint(split_arr([1,2,3,4], 4, 1))          # Output: [2, 3, 4, 1]\nprint(split_arr([0,1,2,3,4,5,6,7], 8, 3))   # Output: [3, 4, 5, 6, 7, 0, 1, 2]",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(lst):\n    return tuple(lst)\n\n# Test cases\nprint(list_tuple([5, 10, 7, 4, 15, 3]))  # Expected output: (5, 10, 7, 4, 15, 3)\nprint(list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7]))  # Expected output: (2, 4, 5, 6, 2, 3, 4, 4, 7)\nprint(list_tuple([58, 44, 56]))  # Expected output: (58, 44, 56)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(nums):\n    # Find the maximum value in the list\n    max_value = max(nums)\n    # Find the minimum value in the list\n    min_value = min(nums)\n    # Calculate the difference between the maximum and minimum values\n    diff = max_value - min_value\n    return diff\n\n# Test cases to verify the correctness of the function\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perfect_squares(start, end):\n    return [i**2 for i in range(start, end+1) if i**2 >= start and i**2 <= end]\n\n# Test cases\nprint(perfect_squares(1, 30))  # Expected output: [1, 4, 9, 16, 25]\nprint(perfect_squares(50, 100))  # Expected output: [64, 81, 100]\nprint(perfect_squares(100, 200))  # Expected output: [100, 121, 144, 169, 196]",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Args:\n    r (float): The radius in polar coordinates.\n    theta (float): The angle in radians in polar coordinates.\n\n    Returns:\n    tuple: A tuple containing two floats, representing the x and y components of the rectangular coordinates respectively.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real)\n\n# Test cases\nprint(polar_rect(3, 4))   # Expected output: ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nprint(polar_rect(4, 7))   # Expected output: ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nprint(polar_rect(15, 17)) # Expected output: ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    if len(lst) > 0:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# Test cases\nprint(swap_List([12, 35, 9, 56, 24])) # Output: [24, 35, 9, 56, 12]\nprint(swap_List([1, 2, 3]))           # Output: [3, 2, 1]\nprint(swap_List([4, 5, 6]))           # Output: [6, 5, 4]",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_product' is not defined",
      "Test 2: FAIL - name 'sum_Of_product' is not defined",
      "Test 3: FAIL - name 'sum_Of_product' is not defined"
    ],
    "generated_code": "def sum_of_product(n):\n    total_sum = 0\n    for i in range(n + 1):\n        term = binomial_coefficient(i)\n        if i % 2 == 0:\n            total_sum += term\n    return total_sum\n\ndef binomial_coefficient(n):\n    # Implement your own logic for calculating binomial coefficient here.\n    # For simplicity, let's assume it returns the value directly as an example.\n    # In a real scenario, you might need to use a library or algorithm to calculate it.\n    return n * (n - 1) // 2",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: invalid literal for int() with base 10: '216.08.094.196'"
    ],
    "generated_code": "def removezero_ip(ip_address):\n    return str(int(ip_address))\n\n# Test cases\nprint(removezero_ip(\"216.08.094.196\")) # Expected output: '216.8.94.196'\nprint(removezero_ip(\"12.01.024\"))      # Expected output: '12.1.24'\nprint(removezero_ip(\"216.08.094.0196\")) # Expected output: '216.8.94.196'",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_even_odd(lst):\n    # Find the first even number\n    for num in lst:\n        if num % 2 == 0:\n            evens = [num]\n            break\n    \n    # Find the first odd number after the last even number found\n    for num in reversed(lst):\n        if num % 2 != 0:\n            odds = [num]\n            break\n    \n    # Calculate the difference between the largest odd and smallest even numbers\n    return max(odds) - min(evens)",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(bin_str1, bin_str2):\n    len1 = len(bin_str1)\n    len2 = len(bin_str2)\n    \n    if len1 != len2:\n        return \"Not Possible\"\n    \n    mismatch_count = sum(1 for i in range(len1) if bin_str1[i] != bin_str2[i])\n    \n    return max(mismatch_count - 1, 0)",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import sys\n\ndef tuple_size(tup):\n    # Calculate and return the size of the tuple in bytes\n    return sys.getsizeof(tup)",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_kth(arr1, arr2, i, j, k):\n    if len(arr1) + len(arr2) < k:\n        return -1\n    count = len(arr1) + len(arr2)\n    \n    while i < len(arr1) and j < len(arr2) and k > 0:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n            i += 1\n        elif arr2[j] < arr1[i]:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n            i += 1\n            j += 1\n    \n    # Handle edge cases where one array is exhausted before k elements\n    if k > 0 and i < len(arr1):\n        return arr1[i]\n    elif k > 0 and j < len(arr2):\n        return arr2[j]\n    \n    return -1",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def armstrong_number(n):\n    # Calculate the number of digits in n\n    num_digits = len(str(n))\n    \n    # Initialize sum to store the result\n    sum = 0\n    \n    # Find and add each digit to the sum\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** num_digits\n        temp //= 10\n    \n    # Check if the calculated sum matches the original number\n    return sum == n",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n):\n    total = n * (n + 1) // 2  # Sum of first n natural numbers\n    avg = total / n  # Average of first n natural numbers\n    return (total, avg)",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Even(n):\n    # Use bitwise AND operation with 1 to check if the last bit is 0 (which indicates an even number)\n    return n & 1 == 0",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]