[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_Occ(string, char):\n    # Initialize variables to keep track of the starting index for removal\n    start = -1\n    end = len(string) - 1\n    \n    while start + 1 < end:\n        if string[start + 1] != char and string[end - 1] != char:\n            break\n        \n        elif string[start + 1] == char:\n            start += 1\n            \n        elif string[end - 1] == char:\n            end -= 1\n            \n    # Remove the specified characters from the beginning and end of the string\n    result = string[0:start+1]\n    result += string[end:]\n    \n    return result",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    # Sort each row and then convert it back to list before adding to result list\n    return [[row[i] for i in range(len(row))] for row in sorted(matrix)]",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\nimport re\n\ndef count_common(dictionary):\n    # Convert all elements to lowercase and split them into individual words.\n    cleaned_dictionary = [re.findall(r'\\w+', item.lower()) for item in dictionary]\n    \n    # Flatten the list of lists into a single list of words.\n    flat_list = [item for sublist in cleaned_dictionary for item in sublist]\n    \n    # Use Counter to find the most common words and their counts.\n    word_counts = Counter(flat_list)\n    \n    # Extract the top n most common words along with their counts.\n    result = word_counts.most_common(10)  # Change 10 to the desired number of results\n    \n    return result",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Volume(length,width,height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        length (int): The base side length of the triangle in the prism.\n        width (int): The height of the triangle in the prism.\n        height (int): The distance between the two triangular bases in the prism.\n        \n    Returns:\n        int: The volume of the triangular prism.\n    \"\"\"\n    return length * width * height",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def split_lowerstring(s):\n    result = []\n    lower_letters = \"abcdefghijklmnopqrstuvwxyz\"\n    i = 0\n    \n    while i < len(s):\n        if s[i] in lower_letters:\n            # Collect characters from current position until next lowercase letter is found\n            temp_str = s[i:]\n            j = 0\n            \n            while j < len(temp_str) and temp_str[j] not in lower_letters:\n                j += 1\n            \n            # Add collected substring to result list along with remaining part after the last found lowercase\n            result.append(temp_str[:j])\n            i = j + 1\n        else:\n            result.append(s[i:i+1])  # Add non-lowercase character as single element\n            i += 1\n        \n    return result",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_lowercase_underscore(text):\n    # Find all sequences of lowercase letters joined with an underscore in the given string\n    matches = [match for match in re.findall(r'\\b[a-z]+_[a-z]+\\b', text)]\n    \n    # Check if there is at least one match found\n    return 'Found a match!' if matches else 'Not matched!'",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side_length):\n    return side_length * 4",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_dirty_chars(main_str, dirty_str):\n    # Remove characters from main_str that are present in dirty_str\n    result = ''.join([char for char in main_str if char not in dirty_str])\n    return result",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_duplicate(arr):\n    \"\"\"\n    This function takes an integer array and checks if there is any duplicate elements in it.\n    \n    :param arr: List[int] - A list of integers\n    :return: bool - True if there's at least one duplicate element, False otherwise\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is defined as n*2^n - 1 for some integer n >= 1.\n    \n    Args:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if num is a Woodall number, False otherwise.\n    \"\"\"\n    def find_root(x):\n        left = 0\n        right = x.bit_length() + 1\n        while left < right:\n            mid = (left + right) // 2\n            power = 2 ** mid\n            if power > x:\n                right = mid\n            elif power < x:\n                left = mid + 1\n            else:\n                return mid\n        return left - 1\n    \n    root = find_root(num)\n    # Verify if it's of the form n * 2^n - 1\n    n = root\n    return (n << root) == num + 1",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multiples_of_num(n, m):\n    return [i * n for i in range(1, m + 1)]",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_duplicate(arr):\n    # Create a dictionary to keep track of seen numbers\n    seen = {}\n    \n    for num in arr:\n        if num in seen:\n            return num  # Found a duplicate\n        else:\n            seen[num] = 1\n    \n    return -1  # No duplicates found",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_Sum(lists):\n    # Calculate the sum of each sublist and find the maximum sum\n    max_sum = max(sum(sublist) for sublist in lists)\n    return max_sum\n\n# Test cases\nprint(maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]])) # Output: 33\nprint(maximum_Sum([[0,1,1],[1,1,2],[3,2,1]])) # Output: 6\nprint(maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]])) # Output: 19",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def binary_to_decimal(binary_number):\n    # Convert the binary string to an integer using int() with base 2\n    decimal_value = int(binary_number, 2)\n    return decimal_value\n\n# Test cases\nprint(binary_to_decimal(\"100\"))   # Expected output: 4\nprint(binary_to_decimal(\"1011\"))  # Expected output: 11\nprint(binary_to_decimal(\"1101101\"))  # Expected output: 109",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Product(arr, n): \n    # Initialize result as 1 for multiplication\n    prod = 1\n  \n    # Iterate through each number in the list\n    for i in range(n): \n        # If the current number is not zero,\n        if arr[i] != 0: \n            # Multiply it with the current result\n            prod *= arr[i]\n  \n    # Return the final result after all numbers have been processed\n    return prod",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_k_elements(tuples_list, k):\n    # Check if each element in the tuples is equal to 'k'\n    return all(element == k for t in tuples_list for element in t)\n\n# Test cases\nprint(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4))  # Output: True\nprint(check_k_elements([(7, 7, 7), (7, 7)], 7))                            # Output: True\nprint(check_k_elements([(9, 9), (9, 9, 9, 9)], 7))                          # Output: False)",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove(lst):\n    # Convert each element in the list to a string and then filter out numbers.\n    return [str(element) for element in lst if not str(element).isdigit()]",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binomial_Coeff(n, k):\n    result = 1\n    for i in range(1, k + 1):\n        result *= n - (k - i)\n        result //= i\n    return result",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Odd_Occurrence(arr, n):\n    count = [0] * (n + 1)\n    \n    # Counting occurrences of each element in the array\n    for i in range(n):\n        count[arr[i]] += 1\n    \n    # Finding the element with an odd occurrence\n    for j in range(1, n + 1):\n        if count[j] % 2 != 0:\n            return j\n\n# Test cases\nprint(get_Odd_Occurrence([1,2,3,1,2,3,1],7))   # Expected output: 1\nprint(get_Odd_Occurrence([1,2,3,2,3,1,3],7))   # Expected output: 3\nprint(get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13))  # Expected output: 5",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(input_str):\n    \"\"\"\n    Counts the number of substrings in the given string where both ends have the same character.\n    \n    Parameters:\n    input_str (str): The input string to search for equal-ending substrings.\n    \n    Returns:\n    int: The total count of substrings with equal endings.\n    \"\"\"\n    if not input_str:\n        return 0\n    \n    result = 0\n    char_count = {}\n    \n    # Initialize a dictionary to keep track of character counts\n    for char in input_str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # Iterate through each unique character\n    for char, _ in char_count.items():\n        current_char_count = char_count[char]\n        \n        # Check for even occurrence of the character\n        if current_char_count % 2 == 0:\n            result += current_char_count * (current_char_count + 1) // 2\n        \n        # Adjust the result for odd occurrences separately\n        result += current_char_count - 1 if current_char_count > 1 else 0\n    \n    return result\n\n# Test cases\nprint(count_Substring_With_Equal_Ends(\"abc\"))  # Expected output: 3\nprint(count_Substring_With_Equal_Ends(\"abcda\"))  # Expected output: 6\nprint(count_Substring_With_Equal_Ends(\"ab\"))  # Expected output: 2",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: func() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from heapq import heappush, heappop, heapify\nfrom typing import List\n\ndef func(nums: List[List[int]]) -> List[int]:\n    result = []\n    for num_list in nums:\n        # Convert each list of numbers into a heap\n        heapify(num_list)\n        # Pop elements until we have the top k elements\n        while len(result) < 3 and len(num_list) > 0:\n            result.append(heappop(num_list))\n    return result[:3] if len(result) >= 3 else result\n\n# Test cases\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]]))  # Expected output: [5, 7, 1]\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1))  # Expected output: [1]\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5))  # Expected output: [6, 5, 7, 8, 1]",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_Prime_Factors(n):\n    i = 2\n    while n % i != 0:\n        i += 1\n    return i",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_To_Binary(decimal_number):\n    # Convert decimal to binary and return the result as a string\n    return bin(decimal_number)[2:]\n\n# Test the function with provided data points\nassert decimal_To_Binary(10) == \"1010\"\nassert decimal_To_Binary(1) == \"1\"\nassert decimal_To_Binary(20) == \"10100\"\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_missing(nums, n):\n    # Initialize variables\n    low = 0\n    high = len(nums) - 1\n    \n    # Use binary search to find the missing element\n    while low <= high:\n        mid = (low + high) // 2\n        \n        # Check if the middle element is the missing one\n        if nums[mid] == mid + 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    # The missing element is at 'high' index + 1\n    return high + 1",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_rect_num(n):\n    # Calculate the nth rectangular number using the formula: n*(n+1)/2\n    rect_num = n * (n + 1) // 2\n    return rect_num",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'c' is not defined"
    ],
    "generated_code": "def find_Nth_Digit(a, b, n):\n    # Convert fractions a/b and c/d into integers for easier comparison\n    integer_a = int(float(a) / float(b))\n    integer_c = int(float(c) / float(d))\n    \n    # Calculate the range where 'n' falls based on its position within the decimal part\n    if n < integer_a * d + integer_c:\n        start_index = n - integer_a * d\n        end_index = n\n    else:\n        start_index = integer_a * d\n        end_index = integer_a * d + d\n    \n    # Determine which number is larger than the start index and adjust start_index accordingly\n    if start_index > integer_a * d:\n        start_index -= 1\n    \n    # If n exceeds the range of digits in the larger number, add it to the next higher multiple of d\n    if end_index >= len(str(integer_a * d)):\n        return str(integer_a * d + d)[end_index]\n    else:\n        return str(integer_a * d)[start_index:end_index]\n\n# Test cases\nprint(find_Nth_Digit(1,2,1))  # Expected output: 5\nprint(find_Nth_Digit(3,5,1))  # Expected output: 6\nprint(find_Nth_Digit(5,6,5))  # Expected output: 3",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_mixed_list(lst):\n    # Convert all elements in the list to strings for uniformity\n    lst = [str(x) for x in lst]\n    # Sort the list using natural sorting order\n    return sorted(lst)\n\n# Test cases\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))  # Expected output: ['1', '10', '12', '19', 'blue', 'green', 'green', 'red', 'white']",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def div_even_odd(nums):\n    # Find the minimum value in the list to determine the largest possible divisor\n    min_val = min(nums)\n    \n    # Initialize variables for storing the maximum even and odd numbers found\n    max_even = -float('inf')\n    max_odd = -float('inf')\n    \n    # Iterate through the list to find both the largest even and odd numbers\n    for num in nums:\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n        elif num % 2 != 0 and num > max_odd:\n            max_odd = num\n    \n    # Return the result of dividing the largest even by the largest odd number\n    return max_even // max_odd",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from collections import Counter\n\ndef rearange_string(s):\n    \"\"\"\n    Rearranges the input string such that no two adjacent characters are the same.\n    \n    :param s: Input string\n    :return: A new string with no two adjacent characters being the same\n    \n    Example:\n    rearange_string(\"aab\") should return \"aba\"\n    rearange_string(\"aabb\") should return \"abab\"\n    rearange_string(\"abccdd\") should return \"cdabcd\"\n    \"\"\"\n    char_counts = Counter(s)\n    result_str = []\n    for char in sorted(char_counts.keys()):\n        count = char_counts[char]\n        while count > 0:\n            result_str.append(char)\n            count -= 1\n    return ''.join(result_str)\n\n# Check function with provided data points\nassert rearange_string(\"aab\") == 'aba'\nassert rearange_string(\"aabb\") == 'abab'\nassert rearange_string(\"abccdd\") == 'cdabcd'\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef freq_element(lst):\n    \"\"\"\n    Finds and returns the frequency count of each element across all sublists within lst.\n    \n    Args:\n    lst (List[List[int]]): A list containing multiple sublists of integers.\n    \n    Returns:\n    dict: A dictionary with elements as keys and their frequencies as values.\n    \"\"\"\n    return {item: sum(item in sublist for sublist in lst) for item in set([item for sublist in lst for item in sublist])}\n\n# Test Cases\nprint(freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]))  # Output should be a dictionary like {2: 3, ...}\nprint(freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))          # Output should be a dictionary like {1: 1, ...}\nprint(freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])) # Output should be a dictionary like {30: 3, ...}",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Sum(arr, n):\n    # Dictionary to store the frequency of each element\n    freq = {}\n    \n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    total_sum = 0\n    for key in freq:\n        # Calculate the contribution of each element to the total sum based on its frequency and count\n        if freq[key] > 1:\n            total_sum += (freq[key] * (key + 1))\n    \n    return total_sum",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Your code here\n    pattern = r\"\\b[a-z]+_[a-z]+\\b\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n\n# Test cases\nprint(text_match(\"aab_cbbbc\"))  # Expected output: Found a match!\nprint(text_match(\"aab_Abbbc\"))  # Expected output: Not matched!\nprint(text_match(\"Aaab_abbbc\"))  # Expected output: Not matched!",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_string(text):\n    pattern = '^python'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the solution\nassert text_match_string(\" python\") == 'Not matched!', \"Test case 1 failed\"\nassert text_match_string(\"python\") == 'Found a match!', \"Test case 2 failed\"\nassert text_match_string(\"  lang\") == 'Not matched!', \"Test case 3 failed\"\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef get_gcd(arr: List[int]) -> int:\n    \"\"\"\n    Find the greatest common divisor of all elements in the given list.\n    \n    Args:\n    arr : List[int] -- A list of integers\n    \n    Returns:\n    int -- The greatest common divisor of all elements in the list\n    \"\"\"\n    def gcd(x, y): \n        while(y): \n            x, y = y, x % y \n        return x \n  \n    result = arr[0] \n    for num in arr: \n        result = gcd(result, num) \n      \n    return result",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'test_distinct' is not defined",
      "Test 2: FAIL - name 'test_distinct' is not defined",
      "Test 3: FAIL - name 'test_distinct' is not defined"
    ],
    "generated_code": "def is_all_unique(numbers):\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            return False\n        seen.add(number)\n    return True",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def compute_Last_Digit(a, b):\n    # Compute factorials and calculate their division\n    factor_a = 1\n    for i in range(1, a + 1):\n        factor_a *= i\n    \n    factor_b = 1\n    for j in range(1, b + 1):\n        factor_b *= j\n    \n    result = factor_a // factor_b\n    # Return the last digit of the result\n    return result % 10\n\n# Test cases\nprint(compute_Last_Digit(2, 4))  # Expected output: 2\nprint(compute_Last_Digit(6, 8))  # Expected output: 6\nprint(compute_Last_Digit(1, 2))  # Expected output: 2",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(n):\n    # Shift n right by 1 bit and then left by 2 bits, add them together\n    result = (n >> 1) | (n << 2)\n    return result\n\n# Test cases\nprint(odd_bit_set_number(10))  # Expected output: 15\nprint(odd_bit_set_number(20))  # Expected output: 21\nprint(odd_bit_set_number(30))  # Expected output: 31",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(lst, index):\n    # Extract elements at the specified index\n    return [sublist[index] for sublist in lst]\n\n# Test cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0))  # Expected output: [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2))  # Expected output: [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1))  # Expected output: [2, 5, 1]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: unmatched ')'"
    ],
    "generated_code": "def min_length_list(lst):\n    return min(zip(range(len(lst)), lst), key=lambda x: len(x[1]))[0]+1, lst[min(zip(range(len(lst)), lst), key=lambda x: len(x[1]))[0]])\n\n# Test cases\nprint(min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: (1, [0])\nprint(min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]))   # Expected output: (1, [1])\nprint(min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]]))        # Expected output: (2, [1, 2])",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a, b, c):\n    return a == b == c",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Equality(str1):\n    if str1[0] == str1[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Test cases\nprint(check_Equality(\"abcda\"))  # Expected output: \"Equal\"\nprint(check_Equality(\"ab\"))     # Expected output: \"Not Equal\"\nprint(check_Equality(\"mad\"))    # Expected output: \"Not Equal\"",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array of integers in ascending order using Counting Sort algorithm.\n    \n    :param arr: List[int] - The list of integers to be sorted.\n    :return: List[int] - The sorted list of integers.\n    \"\"\"\n    max_val = max(arr)\n    count_arr = [0] * (max_val + 1)\n    output_arr = [0] * len(arr)\n\n    for num in arr:\n        count_arr[num] += 1\n\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i-1]\n\n    for num in reversed(arr):\n        output_arr[count_arr[num]-1] = num\n        count_arr[num] -= 1\n\n    return output_arr\n\n# Check function with provided data points\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23], \"Test case 1 failed\"\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69], \"Test case 2 failed\"\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_gp(t,n,a=1):\n    return a * (t ** n)\n\n# Test cases\nprint(tn_gp(1,5,2)) # Expected output: 16\nprint(tn_gp(1,5,4)) # Expected output: 256\nprint(tn_gp(2,6,3)) # Expected output: 486",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(num):\n    # Reverse the number and add 1\n    reversed_num = int(str(num)[::-1]) + 1\n    # Check if num is equal to twice the reversed number\n    if num == 2 * reversed_num:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check(70))  # Expected output: False\nprint(check(23))  # Expected output: False\nprint(check(73))  # Expected output: True",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max_Num(digits, n):\n    max_num = ''.join(sorted(str(digit) for digit in digits))\n    return int(max_num)",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def opposite_Signs(num1, num2):\n    # Check if the product of the numbers is negative\n    return (num1 * num2 < 0)\n\n# Test cases\nprint(opposite_Signs(1, -2))  # Expected output: True\nprint(opposite_Signs(3, 2))   # Expected output: False\nprint(opposite_Signs(-10, -10))  # Expected output: False",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_octagonal(n):\n    \"\"\"\n    Find the nth octagonal number.\n    \n    Parameters:\n    n (int): The position of the octagonal number in the sequence.\n    \n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 7*n*(n-1)//2 + 1\n\n# Test cases\nprint(is_octagonal(5))  # Expected output: 65\nprint(is_octagonal(10)) # Expected output: 280\nprint(is_octagonal(15)) # Expected output: 645",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_len_sub(arr, k):\n    dp = [0] * len(arr)\n    \n    for i in range(len(arr)):\n        dp[i] = arr[i]\n        for j in range(i):\n            if abs(dp[j] - arr[i]) <= k:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n                \n    return max(dp)\n\n# Test cases\nprint(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8))  # Expected output: 5\nprint(max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7))  # Expected output: 4\nprint(max_len_sub([9, 11, 13, 15, 18], 5))       # Expected output: 1",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Substrings(s, n):\n    \"\"\"\n    This function counts the number of non-empty substrings in 's' whose sum equals its length.\n    \n    :param s: A string consisting of digits ('0'-'9').\n    :param n: An integer representing the target sum for the substrings.\n    :return: The total number of substrings meeting the criteria.\n    \"\"\"\n    result = 0\n    for i in range(len(s)):\n        current_sum = 0\n        for j in range(i, len(s)):\n            current_sum += int(s[j])\n            if current_sum == n:\n                result += 1\n    return result",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(lst):\n    # Return the minimum value from the given list of numbers\n    return min(lst)",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_difference(lst):\n    # Sort the tuples based on their first element\n    lst.sort()\n    \n    # Initialize variables to store the maximum difference and current minimum\n    max_diff = 0\n    cur_min = lst[0][0]\n    \n    # Iterate through the sorted list to find the maximum difference\n    for i in range(len(lst)):\n        if lst[i][0] - cur_min > max_diff:\n            max_diff = lst[i][0] - cur_min\n        \n        # Update current minimum after processing each tuple\n        cur_min = min(cur_min, lst[i][0])\n    \n    return max_diff\n\n# Test cases\nprint(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))  # Expected output: 7\nprint(max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]))  # Expected output: 15\nprint(max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]))  # Expected output: 23",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def subject_marks(subject_tuples):\n    return sorted(subject_tuples, key=lambda x: x[1])",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def recursive_list_sum(lst):\n    if isinstance(lst[0], int):\n        return lst[0] + recursive_list_sum(lst[1:])\n    else:\n        return sum(recursive_list_sum(item) for item in lst)",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(nums):\n    # Initialize a counter for positive numbers\n    count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num > 0:\n            # Increment the counter if the number is positive\n            count += 1\n            \n    # Return the total count of positive numbers found\n    return count",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def bell_number(n):\n    # Initialize an array with n+1 elements filled with zeros.\n    bell = [0] * (n + 1)\n    \n    # Base case: there is one way to partition an empty set.\n    bell[0] = 1\n    \n    # Fill the bell triangle.\n    for i in range(1, n + 1):\n        temp = 0\n        for j in range(i, -1, -1):\n            temp += bell[j]\n            bell[j] = temp\n    \n    return bell[n]\n\n# Test cases\nprint(bell_number(2))   # Expected output: 2\nprint(bell_number(10))  # Expected output: 115975\nprint(bell_number(56))  # Expected output: 6775685320645824322581483068371419745979053216268760300",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            decreasing = False\n        elif arr[i] < arr[i-1]:\n            increasing = False\n            \n    return increasing or decreasing",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_sublist(main_list, sub_list):\n    return sub_list in main_list",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_equal(tuples_list, expected_length):\n    # Check if all tuples in the list have the same length as specified\n    first_tuple = tuples_list[0]\n    actual_length = len(first_tuple)\n    \n    for t in tuples_list:\n        if len(t) != actual_length:\n            return f\"All tuples do not have {actual_length} elements\"\n    \n    return f\"All tuples have same length\"\n\n# Test cases\nprint(get_equal([(11, 22, 33), (44, 55, 66)], 3))   # Output: All tuples have same length\nprint(get_equal([(1, 2, 3), (4, 5, 6, 7)], 3))      # Output: All tuples do not have same length\nprint(get_equal([(1, 2), (3, 4)], 2))                # Output: All tuples have same length",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n    \n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink_factor)\n        \n        if gap <= 1:\n            gap = 1\n            sorted = True\n            \n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n# Test cases\nprint(comb_sort([5, 15, 37, 25, 79]))  # Expected output: [5, 15, 25, 37, 79]\nprint(comb_sort([41, 32, 15, 19, 22]))  # Expected output: [15, 19, 22, 32, 41]\nprint(comb_sort([99, 15, 13, 47]))      # Expected output: [13, 15, 47, 99]",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dif_Square(n):\n    # If n is odd, it cannot be written as the difference of two squares\n    if n % 2 != 0:\n        return False\n    else:\n        # A number can be written as the difference of two squares if and only if it is not of the form 4^k*(8*m+7)\n        return True if n % 8 != 7 else False",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef multiple_split(text):\n    pattern = r'\\s*\\-*\\s*'\n    result = re.split(pattern, text)\n    # Remove empty strings from the list if they exist\n    return [item for item in result if item]\n\n# Test cases\nprint(multiple_split('Forces of the \\ndarkness*are coming into the play.'))  # Expected output: ['Forces of the ', 'darkness', 'are coming into the play.']\nprint(multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.'))  # Expected output: ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nprint(multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.'))  # Expected output: ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_samepatterns(patterns, s):\n    for i in range(len(s)):\n        if len(set(patterns)) == len(set([s[i]] + [i] * len(patterns))):\n            continue\n        else:\n            return False\n    return True",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def find_tuples(tuples_list, divisor):\n    \"\"\"\n    Finds and returns all tuples within the given list where every element is divisible by the specified divisor.\n    \n    :param tuples_list: List of tuples to search through.\n    :param divisor: The number that each tuple's elements must be divisible by.\n    :return: A string containing the formatted output of matching tuples.\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        if all(x % divisor == 0 for x in tup):\n            result.append(str(tup))\n    return '[' + ', '.join(result) + ']'\n\n# Check function with provided data points\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(\"6\", \"24\", \"12\")]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(\"5\", \"25\", \"30\")]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(\"8\", \"16\", \"4\")]'",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Squares(w, h):\n    \"\"\"\n    Given two integers w and h representing the width and height of a rectangle,\n    returns the total number of squares within the rectangle.\n    \n    >>> count_Squares(4,3)\n    20\n    >>> count_Squares(2,2)\n    5\n    >>> count_Squares(1,1)\n    1\n    \"\"\"\n    # Calculate the maximum power of 2 less than or equal to the smaller dimension\n    max_power = int(w.bit_length() - 1 if w < h else h.bit_length() - 1)\n    \n    result = 0\n    for i in range(max_power + 1):\n        # Add the product of all powers of 2 up to but not including the current power\n        result += pow(2, i) * (w // pow(2, i)) * (h // pow(2, i))\n        \n    return result\n\n# Check function with provided data points\nprint(count_Squares(4, 3))  # Expected output: 20\nprint(count_Squares(2, 2))  # Expected output: 5\nprint(count_Squares(1, 1))  # Expected output: 1",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Diff(num):\n    \"\"\"\n    This function takes an integer 'num' as input and returns True if the difference between the sum of even digits and the sum of odd digits in num is not zero.\n    \n    Parameters:\n    num (int): The number whose digits will be evaluated.\n    \n    Returns:\n    bool: True if the difference between the sum of even digits and the sum of odd digits is non-zero, otherwise False.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    return even_sum != odd_sum",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    while n:\n        n &= n - 1  # Remove the lowest set bit\n        count += 1\n    return count\n\n# Test cases\nprint(count_With_Odd_SetBits(5))  # Expected output: 3\nprint(count_With_Odd_SetBits(10)) # Expected output: 5\nprint(count_With_Odd_SetBits(15)) # Expected output: 8",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    \"\"\"\n    This function checks if the length of the given word is odd.\n    \n    Args:\n        word (str): The input string whose length is to be checked.\n        \n    Returns:\n        bool: True if the length of the word is odd, otherwise False.\n    \"\"\"\n    return len(word) % 2 != 0",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tetrahedral_number(n):\n    # Calculate the n-th tetrahedral number using the formula:\n    # T_n = (n * (n + 1) / 2)^2\n    return ((n * (n + 1)) // 2)**2",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def zip_tuples(tup1, tup2):\n    result = []\n    for i in range(max(len(tup1), len(tup2))):\n        try:\n            result.append((tup1[i], tup2[i]))\n        except IndexError:\n            break\n    return result",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\nfrom sympy import pi\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculates the volume of a sphere given its radius.\n    \n    Parameters:\n        radius (float): The radius of the sphere.\n        \n    Returns:\n        float: The calculated volume of the sphere.\n    \"\"\"\n    return (4/3) * pi * (radius ** 3)\n\n# Check function with provided data points\nassert abs(volume_sphere(10)-4188.790204786391) < 1e-6\nassert abs(volume_sphere(25)-65449.84694978735) < 1e-6\nassert abs(volume_sphere(20)-33510.32163829113) < 1e-6",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Char(input_string):\n    # Initialize the result variable\n    result = ''\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Append the ASCII value of the character to the result\n        result += str(ord(char))\n    \n    # Return the concatenated result as a single string\n    return result",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        def helper(a, b):\n            nonlocal c\n            c += 1\n            return a + b, b, c\n        \n        c = 0\n        while True:\n            x, y, _ = helper(sequence(n-1), sequence(n-2))\n            if x + y == n:\n                break\n            \n        return c",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Args:\n    - radius: A float representing the radius of the sphere.\n    \n    Returns:\n    The surface area of the sphere as a float.\n    \"\"\"\n    return 4 * math.pi * radius ** 2",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the n-th centered hexagonal number.\n    \n    Parameters:\n    n (int): The position in the sequence of centered hexagonal numbers\n    \n    Returns:\n    int: The n-th centered hexagonal number\n    \"\"\"\n    return n * ((6*n - 3) / 2)\n\n# Test cases\nassert centered_hexagonal_number(10) == 271, \"Test case 1 failed\"\nassert centered_hexagonal_number(2) == 7, \"Test case 2 failed\"\nassert centered_hexagonal_number(9) == 217, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge all dictionaries and return as a set of tuples for simplicity\n    merged = {}\n    for d in [dict1, dict2, dict3]:\n        merged.update(d)\n    return merged",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_count(arr):\n    # Count the frequency of each element in the array and return as a dictionary\n    from collections import Counter\n    return dict(Counter(arr))",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef closest_num(n):\n    \"\"\"\n    Returns the largest integer less than n.\n    \n    Args:\n    - n: An integer\n    \n    Returns:\n    - The largest integer less than n as an integer\n    \"\"\"\n    return int(math.floor(n))\n\n# Test cases\nprint(closest_num(11))  # Expected output: 10\nprint(closest_num(7))   # Expected output: 6\nprint(closest_num(12))  # Expected output: 11",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words_list):\n    max_length = 0\n    for word in words_list:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_substring(list_values, search_str):\n    for value in list_values:\n        if search_str in value:\n            return True\n    return False\n\n# Test cases\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"))  # Expected output: True\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"))  # Expected output: False\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"))  # Expected output: True",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_undulating(number):\n    \"\"\"\n    Check if the given number is an undulating number.\n    \n    An undulating number is one in which each digit from left to right forms an ascending sequence,\n    starting from 0 up to 9 for all digits of length at least two.\n    \n    Args:\n    - number: A string representing the number to be checked.\n    \n    Returns:\n    - True if the number is undulating, otherwise False.\n    \"\"\"\n    num_str = str(number)\n    if len(num_str) < 2:\n        return False\n    \n    last_digit = int(num_str[0])\n    current_digit = last_digit + 1\n    \n    for i in range(1, len(num_str)):\n        if int(num_str[i]) != current_digit:\n            return False\n        current_digit += 1\n    \n    return True\n\n# Test cases to verify the correctness of the function\nassert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True\n\nprint(\"All test cases passed successfully.\")",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_minimum(tuples_list):\n    # Extracting the name of the tuple and its second element as a list for min operation\n    names_and_values = [tuple[0] + str(tuple[1]) for tuple in tuples_list]\n    # Finding the minimum value in the list which represents the string format of the names and values\n    minimum_value_index = names_and_values.index(min(names_and_values))\n    # Returning the original index of the extracted tuple\n    return tuples_list[minimum_value_index][0]\n\n# Test Cases\nprint(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))  # Expected output: \"Varsha\"\nprint(index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]))   # Expected output: \"Dawood\"\nprint(index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]))     # Expected output: \"Ayesha\"",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Min_Length(lists):\n    min_length = float('inf')\n    for lst in lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n\n# Test cases\nprint(Find_Min_Length([[1],[1,2]])) # Expected output: 1\nprint(Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]])) # Expected output: 2\nprint(Find_Min_Length([[3,3,3],[4,4,4,4]])) # Expected output: 3",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_lists(lst):\n    freq = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def multiply_num(nums):\n    \"\"\"\n    Multiply all elements in the given list 'nums' and then divide it by the length of the list.\n    \n    Args:\n        nums (list): A list of integers\n    \n    Returns:\n        float: The result after multiplying all elements and dividing by the list length.\n    \"\"\"\n    total_product = 1\n    for num in nums:\n        total_product *= num\n    return total_product / len(nums)\n\n# Test cases\nassert abs(multiply_num([8, 2, 3, -1, 7])) == -67.2\nassert abs(multiply_num([-10, -20, -30])) == -2000.0\nassert abs(multiply_num([19, 15, 18])) == 1710.0",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    # Convert the decimal number to binary using bin() and remove the \"0b\" prefix\n    binary = bin(decimal_number)[2:]\n    return binary\n\n# Test cases\nprint(decimal_to_binary(8))  # Expected output: '1000'\nprint(decimal_to_binary(18))  # Expected output: '10010'\nprint(decimal_to_binary(7))   # Expected output: '111'",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def next_smallest_palindrome(n):\n    # Convert the number to a string and reverse it\n    reversed_str = str(n)[::-1]\n    \n    # If the original number is odd, add 1 before reversing\n    if len(str(n)) % 2 == 1:\n        reversed_str += '1'\n    \n    # Convert the reversed string back to an integer\n    result = int(reversed_str)\n    \n    return result\n\n# Test cases\nprint(next_smallest_palindrome(99))   # Expected output: 101\nprint(next_smallest_palindrome(1221)) # Expected output: 1331\nprint(next_smallest_palindrome(120))  # Expected output: 121",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def kth_element(arr, n, k):\n    arr.sort()\n    print(\"Sorted Array:\", arr)\n    return arr[k-1]\n\n# Test cases\nprint(kth_element([12,3,5,7,19], 5, 2)) # Expected output: 3\nprint(kth_element([17,24,8,23], 4, 3)) # Expected output: 8\nprint(kth_element([16,21,25,36,4], 5, 4)) # Expected output: 36",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def snake_to_camel(snake_str):\n    # Split the snake case string into words separated by underscores\n    components = snake_str.split('_')\n    # Capitalize each word except the first one and join them together\n    return components[0] + ''.join(x.title() for x in components[1:])",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def eulerian_num(n, m):\n    # Base case initialization\n    if n == 1:\n        return 1\n    else:\n        # Recursive calculation of Eulerian number using formula provided in the hint\n        result = m * eulerian_num(n - 1, m)\n        for i in range(1, m):\n            result += i * eulerian_num(n - 1, m - i - 1)\n        return result",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst_of_lists):\n    return [sorted(sublist) for sublist in lst_of_lists]\n\n# Test cases\nprint(sort_sublists(([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])))\nprint(sort_sublists(([[\" red \", \"green\" ],[\"blue \", \" black\" ],[ \" orange\", \"brown\" ]])))\nprint(sort_sublists(([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]])))",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(booleans):\n    # Initialize counter variable\n    count = 0\n    \n    # Iterate through each boolean value in the list\n    for boolean in booleans:\n        if boolean:\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate list (not \"tuple\") to list",
      "Test 2: FAIL - can only concatenate list (not \"tuple\") to list",
      "Test 3: FAIL - can only concatenate list (not \"tuple\") to list"
    ],
    "generated_code": "def add_lists(list_input, tuple_input):\n    # Concatenate the lists and tuples into one iterable object\n    combined_iterable = list_input + tuple_input\n    # Convert the resulting iterable back into a tuple\n    final_tuple = tuple(combined_iterable)\n    return final_tuple",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 10 is not in list",
      "Test 2: FAIL - 2 is not in list",
      "Test 3: FAIL - 15 is not in list"
    ],
    "generated_code": "def count_Hexadecimal(start_hex, end_hex):\n    hex_digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n    \n    count = 0\n    start_index = hex_digits.index(start_hex)\n    end_index = hex_digits.index(end_hex)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    while True:\n        num = int(''.join(hex_digits[start_index:end_index+1]), 16)\n        if num >= start_hex and num <= end_hex:\n            count += 1\n        else:\n            break\n        start_index -= 1\n        end_index -= 1\n        \n    return count",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given",
      "Test 2: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given",
      "Test 3: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given"
    ],
    "generated_code": "import heapq\n\ndef merge_sorted_list(sorted_lists):\n    \"\"\"\n    Merges multiple sorted lists into a single sorted list.\n    \n    Parameters:\n    - sorted_lists: A list of lists, each containing integers in sorted order.\n    \n    Returns:\n    - A generator yielding merged and sorted elements from all input lists.\n    \"\"\"\n    # Convert all lists into tuples and add them to a max-heap based on their values.\n    max_heap = [(lst[0], i, 0) for i, lst in enumerate(sorted_lists)]\n    heapq.heapify(max_heap)\n    \n    while max_heap:\n        val, idx, pos = heapq.heappop(max_heap)\n        \n        yield val\n        \n        if pos + 1 < len(sorted_lists[idx]):\n            next_val = sorted_lists[idx][pos + 1]\n            heapq.heappush(max_heap, (next_val, idx, pos + 1))\n            \nif __name__ == \"__main__\":\n    print(list(merge_sorted_list([[25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]])))\n    print(list(merge_sorted_list([[1, 3, 5, 6, 8, 9],[2, 5, 7, 11],[1, 4, 7, 8, 12]])))\n    print(list(merge_sorted_list([[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41]])))",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Equivalent(s, n):\n    # Counting the number of '1's in the first half and the second half of the binary string\n    ones_first_half = s[:n:].count('1')\n    ones_second_half = s[n:].count('1')\n\n    # Total odd equivalent if both halves have an even number of '1's\n    total_odd_equivalent = ones_first_half + ones_second_half\n\n    # If the length is odd, subtract one as it would be counted twice\n    if len(s) % 2 != 0:\n        total_odd_equivalent -= 1\n\n    return total_odd_equivalent",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_missing(ranges, start, end):\n    result = []\n    current_start = start\n    for _, end_range in sorted(ranges):\n        if current_start <= end_range:\n            current_end = max(end_range, current_start)\n            while current_start <= current_end < end:\n                current_start += 1\n            result.append((current_start - 1, current_end))\n        else:\n            result.append((start, end))\n            break\n    return result\n\n# Test cases\nprint(extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)) # Expected output: [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nprint(extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60))   # Expected output: [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nprint(extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52))  # Expected output: [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_in_nested_lists(nested_lists):\n    return set.intersection(*map(set, nested_lists))",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'perimeter' is not defined",
      "Test 2: FAIL - name 'perimeter' is not defined",
      "Test 3: FAIL - name 'perimeter' is not defined"
    ],
    "generated_code": "def cylinder_perimeter(radius, height):\n    # Calculate the circumference of the base circle\n    base_circumference = 2 * 3.14159 * radius\n    # Add twice the height for both ends\n    total_perimeter = base_circumference + 2 * height\n    return total_perimeter\n\n# Test cases\nprint(cylinder_perimeter(2,4))  # Expected output: 12\nprint(cylinder_perimeter(1,2))  # Expected output: 6\nprint(cylinder_perimeter(3,1))  # Expected output: 8",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(s):\n    # Check if the string can be converted to an integer without any errors\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_freq(tuple_list):\n    \"\"\"\n    Assigns frequencies to tuples based on their values.\n    \n    Parameters:\n    - tuple_list: A list of tuples where each tuple contains unique elements.\n    \n    Returns:\n    - A new list of tuples with assigned frequencies.\n    \"\"\"\n    # Counting frequencies using Counter from collections module\n    freq_map = {tuple(i): i.count(i) for i in set([tuple(j) for j in tuple_list])}\n    result = []\n    \n    for item in tuple_list:\n        temp_tuple = [freq_map[tuple(item)] * int(x) if x in freq_map else x for x in item]\n        result.append(temp_tuple)\n        \n    return result",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'empty_dit' is not defined",
      "Test 2: FAIL - name 'empty_dit' is not defined",
      "Test 3: FAIL - name 'empty_dit' is not defined"
    ],
    "generated_code": "def is_all_empty(dicts_list):\n    # Check if every dictionary in the list is empty\n    return len([d for d in dicts_list if bool(d)]) == 0",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))\n\n# Test cases\nprint(tuple_to_int((1,2,3)))  # Expected output: 123\nprint(tuple_to_int((4,5,6)))  # Expected output: 456\nprint(tuple_to_int((5,6,7)))  # Expected output: 567",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_to_float(lst):\n    result = []\n    for item in lst:\n        if isinstance(item[0], str) and isinstance(item[1], str):\n            try:\n                new_item = (float(item[0]), float(item[1]))\n                result.append(new_item)\n            except ValueError:\n                continue\n        else:\n            result.append(item)\n    return result",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_list(input_string):\n    return input_string.split()",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search(nums, n):\n    low = 0\n    high = len(nums) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        # Check if the middle element is the unique one\n        if nums[mid] == nums[(mid + 1) % len(nums)] and nums[mid] != nums[high]:\n            return nums[high]\n        \n        # If elements on both sides of mid are equal, move closer towards the end\n        elif nums[mid] == nums[(mid - 1 + len(nums)) % len(nums)]:\n            high = mid - 1\n        else:\n            low = mid + 1\n            \n    return None",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef max_product_tuple(tuples: List[Tuple[int]]) -> int:\n    \"\"\"\n    Finds the maximum product from each pair of elements in a list of tuples.\n    \n    :param tuples: A list of tuples containing integers.\n    :return: The maximum product among all possible pairs of tuples.\n    \"\"\"\n    return max(x * y for x, y in tuples)\n\n# Check function with provided data points\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\nassert max_product_tuple([(10,20), (15,2), (5,10)]) == 200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)]) == 484",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def check_triplet(arr, target_sum, n):\n    arr.sort()  # Sort the array in ascending order\n    for i in range(n-2):  # Iterate through the array until index i = n-2\n        left = i + 1  # Initialize left pointer\n        right = n - 1  # Initialize right pointer\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum:\n                return True  # Found the triplet\n            elif current_sum < target_sum:\n                left += 1  # Increase left pointer\n            else:\n                right -= 1  # Decrease right pointer\n    return False  # No triplet found\n\n# Example usage:\nprint(check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6))  # Expected output: True\nprint(check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6))  # Expected output: False\nprint(check_triplet([10, 4, 2, 3, 5], 5, 15))         # Expected output: True",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def smartNumber(n):\n    \"\"\"\n    This function finds the nth smart number.\n    \n    Parameters:\n    n (int): The position of the smart number to be found.\n    \n    Returns:\n    int: The nth smart number.\n    \"\"\"\n    count = 0\n    current = 1\n    \n    while True:\n        sum_digits = sum(int(digit) for digit in str(current))\n        \n        if len(str(sum_digits)) == 1 and count < n:\n            count += 1\n        elif len(str(sum_digits)) > 1 and count == n:\n            return current\n        \n        current += 1",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def is_amicable(num1, num2):\n    \"\"\"\n    Helper function to check if two numbers are amicable.\n    \n    Args:\n    num1 (int): The first number.\n    num2 (int): The second number.\n    \n    Returns:\n    bool: True if the numbers are amicable, False otherwise.\n    \"\"\"\n    return sum(divisors(num1)) == num2 and sum(divisors(num2)) == num1\n\ndef divisors(n):\n    \"\"\"\n    Function to calculate the sum of proper divisors of n.\n    \n    Args:\n    n (int): The number to find divisors for.\n    \n    Returns:\n    int: Sum of proper divisors of n.\n    \"\"\"\n    divs = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divs.append(i)\n            if i != n // i:\n                divs.append(n // i)\n    return sum(set(divs))\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Finds and sums all amicable numbers within the given limit.\n    \n    Args:\n    limit (int): The upper bound to search for amicable numbers.\n    \n    Returns:\n    int: Sum of all amicable numbers within the limit.\n    \"\"\"\n    total_sum = 0\n    for num in range(1, limit + 1):\n        if not any(is_amicable(num, x) for x in range(1, num)):\n            continue\n        total_sum += num\n    return total_sum",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef angle_complex(real_part, imag_part):\n    \"\"\"\n    Calculates the phase (angle) of a complex number represented by real_part and imag_part.\n    \n    Parameters:\n        real_part (float): The real part of the complex number.\n        imag_part (complex): The imaginary part of the complex number.\n        \n    Returns:\n        float: The angle in radians of the complex number.\n    \"\"\"\n    return cmath.phase(complex(real_part, imag_part))\n\n# Test cases to verify the correctness of the function\nprint(angle_complex(0,1j))   # Expected output: approximately 1.5707963267948966\nprint(angle_complex(2,1j))   # Expected output: approximately 0.4636476090008061\nprint(angle_complex(0,2j))   # Expected output: approximately 1.5707963267948966",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_length(s, length):\n    count_zeros = s.count('0')\n    count_ones = s.count('1')\n    max_diff = -float('inf')\n    \n    for i in range(length + 1):\n        if i < len(s): \n            substr_count_ones = s[i:].count('1')\n            substr_count_zeros = s[:i].count('0') if i > 0 else 0\n            current_diff = abs(substr_count_zeros - substr_count_ones)\n            max_diff = max(max_diff, current_diff)\n    \n    return max_diff\n\n# Test cases\nprint(find_length(\"11000010001\", 11))  # Output: 6\nprint(find_length(\"10111\", 5))         # Output: 1\nprint(find_length(\"11011101100101\", 14))  # Output: 2",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_of_common_divisors(num1, num2):\n    # Find all divisors of num1 and store them in a set for uniqueness\n    divisors_num1 = {i for i in range(1, num1 + 1) if num1 % i == 0}\n    \n    # Find all divisors of num2 and store them in a set for uniqueness\n    divisors_num2 = {i for i in range(1, num2 + 1) if num2 % i == 0}\n    \n    # Calculate the sum of common divisors between num1 and num2\n    common_sum = sum(divisors_num1 & divisors_num2)\n    \n    return common_sum",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multiply_int(a, b):\n    # Initialize result to 0\n    result = 0\n    \n    # Add 'a' to itself 'b' times\n    while b > 0:\n        # Add 'a' to result if the current bit is set in 'b'\n        result += a\n        # Shift 'b' right by 1 bit to process the next pair of bits\n        b >>= 1\n        \n    return result",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, word_list):\n    # Use list comprehension to filter words longer than n and return the result as a list\n    return [word for word in word_list if len(word) > n]",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: list indices must be integers or slices, not list"
    ],
    "generated_code": "def is_magic_square(matrix):\n    n = len(matrix)\n    \n    # Check row sums\n    for i in range(n):\n        if sum(matrix[i]) != n * (n**2 + 1) // 2:\n            return False\n    \n    # Check column sums\n    for j in range(n):\n        col_sum = sum(matrix[row][j] for row in matrix)\n        if col_sum != n * (n**2 + 1) // 2:\n            return False\n    \n    # Check diagonals\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-1-i] for i in range(n))\n    if diag_sum != n * (n**2 + 1) // 2 or anti_diag_sum != n * (n**2 + 1) // 2:\n        return False\n    \n    return True\n\n# Test cases\nprint(is_magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))  # Expected output: True\nprint(is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))                            # Expected output: True\nprint(is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 7]]))                            # Expected output: False)",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef max_occurrences(nums):\n    # Count the occurrences of each number in the list\n    count = Counter(nums)\n    \n    # Find the number(s) with the highest frequency and their frequencies\n    max_freq_num, max_freq_count = max(count.items(), key=lambda x: x[1])\n    \n    return max_freq_num, max_freq_count",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef reverse_vowels(s):\n    # Convert the input string into a list for easier manipulation\n    s_list = list(s)\n    \n    # Get all vowel indices in the string\n    vowels_indices = [i for i, char in enumerate(s) if char.lower() in 'aeiou']\n    \n    # If there are no vowels, return the original string\n    if not vowels_indices:\n        return ''.join(s_list)\n    \n    # Swap vowels from the end to the beginning while maintaining order for non-vowel characters\n    left, right = 0, len(vowels_indices) - 1\n    while left < right:\n        s_list[vowels_indices[left]], s_list[vowels_indices[right]] = s_list[vowels_indices[right]], s_list[vowels_indices[left]]\n        left += 1\n        right -= 1\n    \n    # Join the list back into a string and convert it to uppercase as per the requirement\n    return ''.join(s_list).upper()\n\n# Test cases\nprint(reverse_vowels(\"Python\"))  # Output: \"Python\"\nprint(reverse_vowels(\"USA\"))     # Output: \"ASU\"\nprint(reverse_vowels(\"ab\"))      # Output: \"ab\"",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "def sum_negativenum(nums):\n    # Use map with a lambda function to filter out negative numbers and then use reduce to sum them up\n    return reduce(lambda x,y: x+y if y >= 0 else x, nums, 0)",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_last(arr, n, p):\n    # Perform XOR operation p times on all elements in the array\n    for _ in range(p):\n        arr[0] ^= arr[-1]\n    \n    # Check if the result is even or odd and return the corresponding string\n    return \"EVEN\" if arr[0] % 2 == 0 else \"ODD\"\n\n# Test cases\nprint(check_last([5,7,10], 3, 1))  # Expected output: ODD\nprint(check_last([2,3], 2, 3))     # Expected output: EVEN\nprint(check_last([1,2,3], 3, 1))  # Expected output: ODD",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the n-th hexagonal number.\n    \n    A hexagonal number is defined as H_n = n(2n - 1).\n    \n    Parameters:\n    n (int): The position in the sequence of hexagonal numbers.\n    \n    Returns:\n    int: The n-th hexagonal number.\n    \"\"\"\n    # Calculate and return the n-th hexagonal number\n    return n * (2 * n - 1)\n\n# Test cases to verify the correctness of the function\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_electbill(bill_amount):\n    return round((bill_amount * 0.85 + bill_amount * 0.1) / 100)",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def zero_count(nums):\n    count = nums.count(0)\n    return count / len(nums) if nums else 0",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if the given number n can be represented as sum of non-zero powers of 2.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    while n > 0:\n        if n % 2 == 1:\n            return False\n        n = n // 2\n    return True",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_singly(tuple_list):\n    result = []\n    for tpl in tuple_list:\n        for element in tpl:\n            if tpl.count(element) == 1 and element not in result:\n                result.append(element)\n    return result",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pancake_sort(arr):\n    def flip(nums, k):\n        \"\"\"Flip the first k elements of nums.\"\"\"\n        for i in range(k // 2):\n            nums[i], nums[k - i - 1] = nums[k - i - 1], nums[i]\n\n    size = len(arr)\n    while size > 0:\n        max_pos = size - 1\n        # Find the index of the maximum element and flip it to its correct position\n        for i in range(size):\n            if arr[i] == max(arr[0:size]):\n                max_pos = i\n        # Flip the entire subarray from 0 to max_pos to move the largest element to the end\n        flip(arr, max_pos + 1)\n        # Reduce the size of the array as we have already sorted the last part\n        size -= 1\n    return arr\n\n# Test cases\nprint(pancake_sort([15, 79, 25, 38, 69]))  # Should print [15, 25, 38, 69, 79]\nprint(pancake_sort([98, 12, 54, 36, 85]))  # Should print [12, 36, 54, 85, 98]\nprint(pancake_sort([41, 42, 32, 12, 23]))  # Should print [12, 23, 32, 41, 42]",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_samepair(lst1, lst2, lst3):\n    return sum(map(lambda x, y, z: x == y and y == z, lst1, lst2, lst3))",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_lists(test_tuple):\n    # Initialize count to zero\n    count = 0\n    \n    # Loop through each element in the tuple\n    for item in test_tuple:\n        # If the item is a list, increment the count\n        if isinstance(item, list):\n            count += 1\n            \n    # Return the final count\n    return count\n\n# Test cases\nprint(find_lists(([1, 2, 3, 4], [5, 6, 7, 8])))  # Expected output: 2\nprint(find_lists(([1, 2], [3, 4], [5, 6])))       # Expected output: 3\nprint(find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])))  # Expected output: 1",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import combinations\n\ndef sum_Pairs(arr, k):\n    total_sum = 0\n    for a, b in combinations(arr, 2):\n        if abs(a - b) == k:\n            total_sum += a + b\n    return total_sum",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def max_Abs_Diff(arr, n):\n    arr.sort()\n    max_diff = abs(arr[0] - arr[n-1])\n    for i in range(n-1):\n        if abs(arr[i+1] - arr[i]) > max_diff:\n            max_diff = abs(arr[i+1] - arr[i])\n    return max_diff",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ascii_value_string(s):\n    return sum(ord(c) for c in s)",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_path_sum(triangle, row, col):\n    # Base case: if we reach the last element of the current row\n    if row == len(triangle):\n        return 0\n    \n    # Recursive call for left and right elements of the current row\n    up = triangle[row][col] + max(max_path_sum(triangle, row + 1, col), max_path_sum(triangle, row + 1, col + 1))\n    \n    down = triangle[row][col] + max(max_path_sum(triangle, row + 1, col), max_path_sum(triangle, row + 1, col + 1))\n    \n    # Return the maximum value obtained from both child nodes\n    return max(up, down)\n\n# Test cases\nprint(max_path_sum([[-1],[2,3],[-1]], 0, 0))  # Output: -1\nprint(max_path_sum([[1,2],[3,4]], 0, 0))      # Output: 5\nprint(max_path_sum([[1],[3,2],[3,1,0]], 0, 0))  # Output: 9",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: ''",
      "Test 2: FAIL - invalid literal for int() with base 10: ''",
      "Test 3: FAIL - invalid literal for int() with base 10: ''"
    ],
    "generated_code": "def sum_digits_twoparts(n):\n    # Convert the number to a string and reverse it for easier manipulation\n    num_str = str(n)[::-1]\n    \n    max_sum = float('-inf')\n    max_parts = []\n    \n    # Iterate over all possible ways to split the number at each digit position\n    for i in range(len(num_str)):\n        part1 = int(num_str[:i+1])\n        part2 = int(num_str[i+1:])\n        \n        current_sum = part1 + part2\n        \n        # Update the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_parts = [part1, part2]\n    \n    return max_sum, max_parts",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - local variable 'end' referenced before assignment",
      "Test 2: FAIL - local variable 'end' referenced before assignment",
      "Test 3: FAIL - local variable 'end' referenced before assignment"
    ],
    "generated_code": "from typing import List\n\ndef longest_subseq_with_diff_one(nums: List[int], k: int) -> int:\n    max_length = 0\n    start = 0\n    \n    while end < len(nums):\n        if nums[end] - nums[start] > k:\n            start += 1\n        else:\n            max_length = max(max_length, end - start + 1)\n            end += 1\n            \n    return max_length",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def does_Contain_B(a, b, c):\n    # Check if the difference between consecutive numbers equals 'c'\n    return abs(a - b) == c and abs(b - c) == a",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef is_coprime(a, b):\n    # Calculate the greatest common divisor using math.gcd\n    gcd = math.gcd(a, b)\n    # If the GCD is 1, then a and b are coprime\n    if gcd == 1:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    # Recursively sort both halves\n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n    \n    # Merge the sorted halves\n    return merge(left_half, right_half)\n\ndef merge(left, right):\n    merged, i, j = [], 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    # Append any remaining elements from both lists\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    return merged\n\n# Test the function with provided data points\nprint(merge_sort([3, 4, 2, 6, 5, 7, 1, 9]))  # Expected output: [1, 2, 3, 4, 5, 6, 7, 9]\nprint(merge_sort([7, 25, 45, 78, 11, 33, 19]))  # Expected output: [7, 11, 19, 25, 33, 45, 78]\nprint(merge_sort([3, 1, 4, 9, 8]))  # Expected output: [1, 3, 4, 8, 9]",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: could not convert string to float: '1.55/5'"
    ],
    "generated_code": "def parabola_vertex(a, b, c):\n    \"\"\"\n    Given coefficients 'a', 'b', and 'c' for a quadratic equation in standard form ax^2 + bx + c = 0,\n    returns the vertex of the parabola as a tuple (x, y).\n    \n    Example:\n    >>> parabola_vertex(1, -8, 12)\n    (-1.0, 4.0)\n    >>> parabola_vertex(2, 4, 6)\n    (-1.0, 4.0)\n    >>> parabola_vertex(5, 3, 2)\n    (-0.3, 1.55)\n    \"\"\"\n    x1 = -(b / (2 * a))\n    y1 = f'{-pow(b, 2) / (4 * a) + c}/{abs(a)}'\n    return round(x1, 3), float(y1)\n\n# Test cases\nprint(parabola_vertex(5, 3, 2)) # Expected output: (-0.3, 1.55)\nprint(parabola_vertex(9, 8, 4)) # Expected output: (-0.444, 2.222)\nprint(parabola_vertex(2, 4, 6)) # Expected output: (-1.0, 4.0)",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(list_of_lists, index):\n    return [sub_list[index] for sub_list in list_of_lists]\n\n# Test Cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) # Output: [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) # Output: [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)) # Output: [2, 2, 5]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(number):\n    \"\"\"\n    This function takes an integer and returns it with its even bits toggled.\n    \n    Args:\n    number (int): The input number whose even bits are to be toggled\n    \n    Returns:\n    int: The number with even bits toggled\n    \"\"\"\n    # Using bitwise operations to toggle even bits\n    return ((number & 0xAAAAAAAA) >> 1) | ((number & 0x55555555) << 1)\n\n# Test cases to verify the correctness of the solution\nprint(even_bit_toggle_number(10))  # Expected output: 0\nprint(even_bit_toggle_number(20))  # Expected output: 30\nprint(even_bit_toggle_number(30))  # Expected output: 20",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def tuple_int_str(tup):\n    return tuple(map(int, tup))\n\n# Test cases\nprint(tuple_int_str(((333, 33), (1416, 55))))  # Expected output: ((333, 33), (1416, 55))\nprint(tuple_int_str(((999, 99), (1000, 500))))  # Expected output: ((999, 99), (1000, 500))\nprint(tuple_int_str(((666, 66), (1500, 555))))  # Expected output: ((666, 66), (1500, 555))",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def encode_list(input_list):\n    output = []\n    count = 0\n    temp = ''\n    \n    for char in input_list:\n        if char != temp:\n            if temp:\n                output.append([count, temp])\n            temp = char\n            count = 1\n        else:\n            count += 1\n    \n    # Append last group\n    output.append([count, temp])\n    \n    return output",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Ops(arr, n, k):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize the sum with the first element of the sorted array\n    total = arr[0]\n    \n    # Calculate the initial difference between the smallest and largest values\n    diff = max(0, arr[-1] - arr[0])\n    \n    # Calculate the minimum operations needed if we can choose one element from each pair of adjacent numbers\n    for i in range(n-1):\n        current_diff = abs(arr[i+1] - arr[i])\n        if current_diff <= k:\n            continue\n        else:\n            diff += min(k, current_diff)\n            k -= current_diff\n    \n    # If there's at least one value left to be added, calculate the additional operations needed\n    if k > 0:\n        diff += (k + 1) // 2 * (arr[-1] - arr[0])\n    \n    return diff",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def month_season(month, day):\n    seasons = {\n        'January': {'min_day': 1, 'max_day': 31},\n        'February': {'min_day': 1, 'max_day': 28},  # Assuming no leap year\n        'March': {'min_day': 1, 'max_day': 31},\n        'April': {'min_day': 1, 'max_day': 30},\n        'May': {'min_day': 1, 'max_day': 31},\n        'June': {'min_day': 1, 'max_day': 30},\n        'July': {'min_day': 1, 'max_day': 31},\n        'August': {'min_day': 1, 'max_day': 31},\n        'September': {'min_day': 1, 'max_day': 30},\n        'October': {'min_day': 1, 'max_day': 31},\n        'November': {'min_day': 1, 'max_day': 30},\n        'December': {'min_day': 1, 'max_day': 31}\n    }\n    \n    min_day, max_day = seasons[month]\n    \n    if day < min_day:\n        return 'winter'\n    elif day <= max_day and day >= min_day + 1:\n        return 'spring'\n    else:\n        return 'summer'\n\n# Test cases\nprint(month_season('January', 4))  # Expected output: 'winter'\nprint(month_season('October', 28)) # Expected output: 'autumn'\nprint(month_season('June', 6))     # Expected output: 'spring'",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def solution(a, b, n):\n    if a == 0:\n        if n % b == 0:\n            return f\"x = {n // b}, y = 0\"\n        else:\n            return \"No solution\"\n    elif b == 0:\n        if n % a == 0:\n            return f\"y = {n // a}, x = 0\"\n        else:\n            return \"No solution\"\n    else:\n        m = (n - a * 0) / b\n        return f\"x = {m}, y = {m - int(m)}\"",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n\n# Test cases\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10], [2,4,6,8]))  # Expected output: [1, 3, 5, 7, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]))  # Expected output: [2, 4, 6, 8, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]))  # Expected output: [1, 2, 3, 4, 6, 8, 9, 10]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    if n <= 0:\n        return 0\n    total_sum = 0\n    while n > 0:\n        total_sum += n\n        n -= 2\n    return total_sum",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'tan' is not defined"
    ],
    "generated_code": "def area_polygon(sides, length):\n    \"\"\"\n    Calculate the area of a regular polygon given the number of sides and side length.\n    \n    Parameters:\n        sides (int): The number of sides in the polygon.\n        length (float): The length of each side.\n        \n    Returns:\n        float: The area of the polygon rounded to 8 decimal places.\n    \"\"\"\n    from math import pi\n    \n    # Formula for calculating the area of a regular polygon\n    area = 0.25 * sides * length ** 2 / tan(pi / sides)\n    \n    return round(area, 8)\n\n# Check function with provided data points\nassert abs(area_polygon(4, 20) - 400.0) < 1e-10\nassert abs(area_polygon(10, 15) - 1731.19698966) < 1e-10\nassert abs(area_polygon(9, 7) - 302.90938549) < 1e-10",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def areEquivalent(numerator, denominator):\n    # Calculate the sum of divisors for numerator and denominator\n    divisor_sum_numerator = sum([i for i in range(1, int(numerator**0.5)+1) if numerator % i == 0])\n    divisor_sum_denominator = sum([j for j in range(1, int(denominator**0.5)+1) if denominator % j == 0])\n\n    # Compare the sums of divisors\n    return divisor_sum_numerator == divisor_sum_denominator",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_char_position(s):\n    # Create a dictionary mapping each character's position in English alphabet to its ASCII value\n    char_dict = {chr(i): i - ord('A') for i in range(ord('a') + 1, ord('z') + 1)}\n    \n    # Initialize counters for lowercase and uppercase characters\n    lower_count = 0\n    upper_count = 0\n    \n    # Iterate through each character in the input string\n    for char in s:\n        if 'a' <= char.lower() <= 'z':\n            lower_count += 1\n        elif 'A' <= char.upper() <= 'Z':\n            upper_count += 1\n    \n    # Calculate total unique positions\n    total_unique_positions = len(char_dict)\n    \n    # Adjust counts based on the number of letters in the input string\n    lower_count -= len([char for char in s if 'a' <= char.lower() <= 'z']) * total_unique_positions // 2\n    upper_count -= len([char for char in s if 'A' <= char.upper() <= 'Z']) * total_unique_positions // 2\n    \n    return max(lower_count, upper_count)\n\n# Test cases\nprint(count_char_position(\"xbcefg\"))  # Output: 2\nprint(count_char_position(\"ABcED\"))   # Output: 3\nprint(count_char_position(\"AbgdeF\"))  # Output: 5",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_even_Pair(nums, n):\n    pair_count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if ((nums[i] ^ nums[j]) % 2 == 0 and nums[i] != nums[j]):\n                pair_count += 1\n    return pair_count",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    elif n & (n - 1) == 0:\n        return n\n    else:\n        return 1 << (n.bit_length())",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr, num):\n    count = arr.count(num)\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pell(n):\n    # Base case for n = 0 and n = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two PELL numbers\n    prev, curr = 0, 1\n    \n    # Calculate the Pell number iteratively\n    for _ in range(2, n + 1):\n        next_num = 2 * prev + curr\n        prev, curr = curr, next_num\n    \n    return curr",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_range_list(numbers, start_index, end_index):\n    return sum(numbers[start_index:end_index+1])",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def perimeter_pentagon(sides):\n    return sum(sides) * 4",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_occurance(string):\n    # Count occurrences of 'std'\n    std_count = string.count('std')\n    \n    return std_count",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 're' is not defined"
    ],
    "generated_code": "def remove_splchar(s):\n    # Remove all non-alphanumeric characters and spaces using regular expressions\n    return ''.join(re.findall('[a-zA-Z0-9]', s))\n\n# Test cases\nprint(remove_splchar('python  @#&^%$*program123'))  # Expected output: 'pythonprogram123'\nprint(remove_splchar('python %^$@!^&*()  programming24%$^^()    language'))  # Expected output: 'pythonprogramming24language'\nprint(remove_splchar('python   ^%&^()(+_)(_^&67)                  program'))  # Expected output: 'python67program'",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_keyvalue(pairs):\n    result = {}\n    for k, v in pairs:\n        if k not in result:\n            result[k] = []\n        result[k].append(v)\n    return result\n\n# Test cases\nprint(group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])) # {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nprint(group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])) # {'python': [1,2,3,4,5]}\nprint(group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])) # {'yellow': [100, 300], 'blue': [200, 400], 'red': [100]})",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop()!=mapping[char]:\n                return False\n        else:\n            return False\n    \n    return not stack",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_triangle(a, b, c):\n    # Calculate and return the perimeter of the triangle\n    return a + b + c",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - answer() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - answer() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - answer() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def lcm(x, y):\n    \"\"\"Calculate the least common multiple of x and y.\"\"\"\n    from math import gcd\n    return abs(x * y) // gcd(x, y)\n\ndef answer(lcm_range):\n    \"\"\"\n    Find two distinct numbers whose least common multiple is within the given range.\n    \n    Args:\n    lcm_range (tuple): A tuple containing two integers representing the start and end values of the desired LCM range.\n    \n    Returns:\n    tuple: A tuple of two integers where one number is less than or equal to the other,\n           and their least common multiple falls within the specified range.\n    \"\"\"\n    for i in range(*lcm_range):\n        if lcm(i + 1, i + 2) >= lcm_range[0] and lcm(i + 1, i + 2) <= lcm_range[1]:\n            return (i, i + 1)\n\n# Test the function with provided data points\nprint(answer((6, 25)))  # Expected output: (2, 3)\nprint(answer((3, 19)))  # Expected output: (2, 4)\nprint(answer((1, 10)))  # Expected output: (1, 2)",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_literals(str_list, target_str):\n    for str_ in str_list:\n        if target_str == str_:\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def is_num_keith(num):\n    \"\"\"\n    Check if the given number num is a Keith number.\n    \n    A Keith number is an integer n ≥ 0 such that every finite sequence of its digits can be obtained from some initial segment of the sequence of its divisors with a cumulative sum equal to n itself.\n    \n    Parameters:\n    - num: An integer number\n    \n    Returns:\n    - bool: True if num is a Keith number, False otherwise.\n    \"\"\"\n    # Find the maximum length of all possible sequences starting from each divisor\n    max_length = max([len(str(divisor)) for divisor in range(1, int(num**0.5) + 1)])\n    \n    # Initialize lists to store digits and sums of sequences\n    seq_digits = [int(digit) for digit in str(num)]\n    seq_sum = sum(seq_digits)\n    sequences = [(seq_digits[0], seq_sum), ]\n    \n    while len(seq_digits) > 1:\n        next_digit = int(input(\"Enter the next digit: \"))\n        seq_digits.append(next_digit)\n        \n        new_sum = sum(seq_digits[-max_length:])\n        \n        if new_sum == num:\n            return True\n        \n        for i in range(max_length):\n            seq_sum -= seq_digits.pop(0)\n            if seq_sum >= 0 and seq_sum <= len(seq_digits) and tuple(seq_digits) not in sequences:\n                sequences.append((seq_digits[i], seq_sum))\n                break\n                \n    return False\n\n# Test cases\nprint(is_num_keith(14))  # Expected output: True\nprint(is_num_keith(12))  # Expected output: False\nprint(is_num_keith(197)) # Expected output: True",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371 # Radius of the Earth in kilometers\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(lon2 - lon1)\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n\n    a = math.sin(dLat/2) * math.sin(dLat/2) + \\\n        math.cos(lat1) * math.cos(lat2) * \\\n        math.sin(dLon/2) * math.sin(dLon/2)\n    \n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    distance = R * c\n    \n    return distance",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_prefix(strs, n): \n    # Start with the first string as the initial prefix\n    prefix = strs[0][:n] \n\n    # Compare the current prefix with each other string\n    for i in range(1, len(strs)): \n        while strs[i].find(prefix) != 0: \n            # If the prefix is not a starting substring of another string,\n            # reduce its length until it does match one of them\n            prefix = prefix[:-1]\n            if not prefix: \n                break\n\n    return prefix",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_character(input_string):\n    uppercase = re.findall('[A-Z]', input_string)\n    lowercase = re.findall('[a-z]', input_string)\n    special_chars = re.findall('[@$!%*#?&]', input_string)\n    numbers = re.findall('\\d', input_string)\n\n    return (uppercase, lowercase, special_chars, numbers)",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 4",
      "Test 2: FAIL - 12",
      "Test 3: FAIL - 4"
    ],
    "generated_code": "def count_pairs(arr, k, diff):\n    # Dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num - diff in freq:\n            freq[num] += 1\n        elif num + diff in freq:\n            freq[num] = 2\n        else:\n            freq[num] = 1\n    \n    count = sum(count // 2 for count in freq.values())\n    return count",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def greater_specificnum(lst, num):\n    return [x for x in lst if x > num]",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_focus(a,b,c):\n    x = -(b/(a*2))\n    y = c - (b**2)/(4*a)\n    return (x, y)\n\n# Test cases\nprint(parabola_focus(5,3,2)) # Expected output: (-0.3, 1.6)\nprint(parabola_focus(9,8,4)) # Expected output: (-0.4444444444444444, 2.25)\nprint(parabola_focus(2,4,6)) # Expected output: (-1.0, 4.125)",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_literals(text, pattern_list):\n    for pattern in pattern_list:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'\n\n# Example usage and test cases\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['fox', 'dog']))\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['horse', 'cat']))\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['lazy', 'brown']))",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_common_subsequence(seq1, seq2, l1, l2):\n    \"\"\"\n    Finds the length of the longest common subsequence between two strings.\n    \n    Parameters:\n        seq1 (str): The first string.\n        seq2 (str): The second string.\n        l1 (int): Length of the first sequence.\n        l2 (int): Length of the second sequence.\n        \n    Returns:\n        int: The length of the longest common subsequence.\n    \"\"\"\n    dp = [[0] * (l2 + 1) for _ in range(l1 + 1)]\n    for i in range(1, l1 + 1):\n        for j in range(1, l2 + 1):\n            if seq1[i - 1] == seq2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[l1][l2]\n\n# Test Cases\nprint(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7))  # Expected output: 4\nprint(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6))   # Expected output: 3\nprint(longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4))       # Expected output: 2",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def prod_Square(num):\n    import math\n    \n    # Calculate the square root of the absolute value of the number\n    sqrt_num = int(math.sqrt(abs(num)))\n    \n    # Check if the square of the integer part equals the original number\n    for i in range(sqrt_num + 1):\n        if i * i == abs(num):\n            return True\n    return False",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def first_Missing_Positive(arr):\n    n = len(arr)\n    \n    # Mark elements at their correct positions using indices as values\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i]-1] != arr[i]:\n            temp = arr[arr[i]-1]\n            arr[arr[i]-1] = arr[i]\n            arr[i] = temp\n    \n    # Find the first index where an element doesn't match its value's position + 1\n    for i in range(1, n+1):\n        if arr[i-1] != i:\n            return i\n    return n+1",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Intgral_Points(x_min, y_min, x_max, y_max):\n    \"\"\"\n    Counts and returns the number of integer coordinate points within a given square.\n    \n    Args:\n        x_min (int): The minimum x-coordinate of the bottom-left corner.\n        y_min (int): The minimum y-coordinate of the bottom-left corner.\n        x_max (int): The maximum x-coordinate of the top-right corner.\n        y_max (int): The maximum y-coordinate of the top-right corner.\n        \n    Returns:\n        int: The number of integral points within the square.\n    \"\"\"\n    return max(min(x_max, x_min), min(y_max, y_min)) - max(max(x_max, x_min), min(y_max, y_min)) + 1\n\n# Test Cases\nprint(count_Intgral_Points(1,1,4,4))  # Expected output: 4\nprint(count_Intgral_Points(1,2,1,2))  # Expected output: 1\nprint(count_Intgral_Points(4,2,6,4))  # Expected output: 1",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumber(month_name):\n    months = {\"January\": 31, \"February\": 28, \"March\": 31, \"April\": 30, \"May\": 31, \"June\": 30,\n              \"July\": 31, \"August\": 31, \"September\": 30, \"October\": 31, \"November\": 30, \"December\": 31}\n    return months[month_name] == 30",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_String(string):\n    \"\"\"\n    This function checks if the given string contains at least one letter and one number.\n    \n    Args:\n        string (str): The input string to be checked.\n        \n    Returns:\n        bool: True if the string contains at least one letter and one number, False otherwise.\n    \"\"\"\n    # Regular expression to match at least one letter and one digit in the string\n    pattern = '^[a-zA-Z][0-9]$|^([a-zA-Z])[0-9]+$'\n    result = re.match(pattern, string)\n    return bool(result)\n\n# Test cases\nprint(check_String('thishasboth29'))  # Expected output: True\nprint(check_String('python'))         # Expected output: False\nprint(check_String('string'))         # Expected output: False",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuple(test_tup):\n    # Convert the tuple into a set to remove duplicates and then back to a tuple\n    result = tuple(set(test_tup))\n    return result",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def octal_To_Decimal(octal_number):\n    # Convert the given octal string to an integer\n    decimal_number = int(octal_number, 8)\n    return decimal_number",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first(arr, target, start_position):\n    end_position = len(arr)\n    while start_position < end_position:\n        mid_point = (start_position + end_position) // 2\n        if arr[mid_point] == target and (mid_point == 0 or arr[mid_point - 1] != target):\n            return mid_point\n        elif arr[mid_point] >= target:\n            end_position = mid_point\n        else:\n            start_position = mid_point + 1\n    return -1",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_tuples(lst, k):\n    # Filter out tuples of length less than k and keep others.\n    return [t for t in lst if len(t) >= k]",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_exponentio(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        product = 1\n        for j in range(len(tup2)):\n            product *= tup1[i] * tup2[j]\n        result.append(product)\n    return tuple(result)\n\n# Test Cases\nprint(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))) # Expected output: (100000, 4096, 78125, 7776)\nprint(find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))) # Expected output: (1771561, 78125, 1679616, 117649)\nprint(find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))) # Expected output: (35831808, 1679616, 40353607, 2097152)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\nfrom functools import reduce\n\ndef largest_triangle(a, b):\n    # Calculate the area of the ellipse using the formula πab\n    ellipse_area = math.pi * a * b\n    \n    # The side length of the largest equilateral triangle inscribed in the ellipse is given by sqrt(3) * a / sqrt(b^2 + 3)\n    largest_triangle_side_length = math.sqrt(3) * a / math.sqrt(math.pow(b, 2) + 3)\n    \n    # The area of the largest inscribed equilateral triangle can be calculated using the formula √3/4 * s^2 where s is the side length\n    largest_triangle_area = (math.sqrt(3)/4) * largest_triangle_side_length**2\n    \n    # Divide the area of the ellipse by twice the area of the largest inscribed equilateral triangle\n    return ellipse_area / (2 * largest_triangle_area)\n\n# Test cases\nprint(largest_triangle(4, 2))  # Expected output: 10.392304845413264\nprint(largest_triangle(5, 7))  # Expected output: 4.639421805988064\nprint(largest_triangle(9, 1))  # Expected output: 105.2220865598093",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    Finds the highest power of 2 which is less than or equal to n.\n    \n    Parameters:\n    n (int): The number for which to find the highest power of 2.\n    \n    Returns:\n    int: The highest power of 2 less than or equal to n.\n    \"\"\"\n    result = 1\n    while result <= n:\n        result *= 2\n    return result // 2",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def position_max(nums):\n    max_index = -1\n    for i in range(len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n    return [max_index]\n\n# Test Cases\nprint(position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])) # Output should be [7]\nprint(position_max([1,2,2,2,4,4,4,5,5,5,5])) # Output should be [7,8,9,10]\nprint(position_max([2,1,5,6,8,3,4,9,10,11,8,12])) # Output should be [11]",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(lst):\n    # Check if all items in the list are the same\n    first_item = lst[0]\n    for item in lst:\n        if item != first_item:\n            return False\n    return True",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'l'"
    ],
    "generated_code": "def remove_even(s):\n    result = \"\"\n    for char in s:\n        if int(char) % 2 != 0:\n            result += char\n    return result",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hamming_Distance(x, y):\n    xor_result = x ^ y  # XOR of two numbers gives bits that are different\n    distance = 0\n    while xor_result:\n        distance += 1\n        xor_result &= (xor_result - 1)  # Remove the lowest set bit from xor_result\n    \n    return distance\n\n# Test cases\nprint(hamming_Distance(4, 8))  # Expected output: 2\nprint(hamming_Distance(2, 4))  # Expected output: 2\nprint(hamming_Distance(1, 2))  # Expected output: 2",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count' is not defined",
      "Test 2: FAIL - name 'count' is not defined",
      "Test 3: FAIL - name 'count' is not defined"
    ],
    "generated_code": "def count_char_in_string(str1, char):\n    count = 0\n    for ch in str1:\n        if ch == char:\n            count += 1\n    return count\n\n# Test cases\nprint(count_char_in_string(\"abcc\", \"c\"))  # Expected output: 2\nprint(count_char_in_string(\"ababca\", \"a\"))  # Expected output: 3\nprint(count_char_in_string(\"mnmm0pm\", \"m\"))  # Expected output: 4",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def inversion_elements(lst):\n    # Convert each element in the list into an inverted version by subtracting it from zero and then adding its index.\n    result = [lst[i] + i for i in range(len(lst))]\n    return result",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tuples_list):\n    result = []\n    for i in range(len(tuples_list) - 1):\n        current_tuple = tuples_list[i]\n        next_tuple = tuples_list[i + 1]\n        concatenated_element = f\"{current_tuple} {next_tuple}\"\n        result.append(concatenated_element)\n    return result",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    max_length = 0\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                if dp[i][j] > max_length:\n                    max_length = dp[i][j]\n            else:\n                dp[i][j] = 0\n                \n    return max_length",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(decimal_str):\n    # Use regular expression to match if the string consists only of digits, '.', and '-' signs.\n    pattern = r'^-?\\d+(\\.\\d+)?$'\n    if re.match(pattern, decimal_str) and len(decimal_str.split('.')[1]) <= 2:\n        return True\n    else:\n        return False\n\n# Test the function with provided data points\nprint(is_decimal('123.11'))   # Expected output: True\nprint(is_decimal('0.21'))     # Expected output: True\nprint(is_decimal('123.1214')) # Expected output: False",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def heap_replace(heap, new_item):\n    \"\"\"\n    Deletes the smallest element from the given heap and inserts a new item.\n    \n    Parameters:\n    - heap: A list representing the heap data structure.\n    - new_item: The item to be inserted into the heap after removing the smallest element.\n    \n    Returns:\n    - Modified heap with the smallest element removed and new_item added at the end.\n    \"\"\"\n    # Remove the smallest element (which is now the last in the list)\n    heap.pop()\n    # Insert the new item at the end of the list\n    heap.append(new_item)\n    return heap",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_allowed_specific_char(s):\n    # Define the pattern for allowed characters\n    pattern = r\"^[a-zA-Z0-9]+$\"\n    \n    # Use regex to match the input string against the pattern\n    if re.match(pattern, s):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_Num() missing 1 required positional argument: 'm'",
      "Test 2: FAIL - count_Num() missing 1 required positional argument: 'm'",
      "Test 3: FAIL - count_Num() missing 1 required positional argument: 'm'"
    ],
    "generated_code": "def count_Num(n, m):\n    \"\"\"\n    Count the number of integers between 1 and n-1 whose nth bit is set.\n    \n    Parameters:\n    - n: An integer representing the upper limit of the range to check.\n    - m: An integer representing the specific bit position to check against (0-based index).\n    \n    Returns:\n    - The count of numbers where nth bit is set in their binary representation.\n    \"\"\"\n    return bin((1 << m) - 1).count('1') * (n // (1 << m))\n\n# Test Cases\nprint(count_Num(2, 2))  # Expected output: 1\nprint(count_Num(3, 1))  # Expected output: 2\nprint(count_Num(1, 0))  # Expected output: 1",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 4\n    return total",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_strings(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        new_tuple = (tuple1[i], tuple2[i])\n        result.append(new_tuple)\n    return result",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def degree_radian(rad):\n    return rad * 180 / 3.141592653589793\n\n# Test cases\nprint(degree_radian(90))  # Expected output: approximately 5156.620156177409\nprint(degree_radian(60))  # Expected output: approximately 3437.746770784939\nprint(degree_radian(120))  # Expected output: approximately 6875.493541569878",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decode_list(encoded):\n    decoded = []\n    i = 0\n    while i < len(encoded) and type(encoded[i]) == int:\n        j = i + encoded[i] * 2\n        for _ in range(encoded[i]):\n            decoded.append(encoded[j])\n        i += encoded[i] + 1\n    return decoded[:-1] if len(decoded) > 1 else decoded",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_subset_list(nested1, nested2):\n    def flatten(nested):\n        for item in nested:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n                \n    flat1 = sorted(flatten(nested1))\n    flat2 = sorted(flatten(nested2))\n    \n    return flat1 <= flat2",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Repeated_Char(input_string):\n    char_set = set()\n    for char in input_string:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return '\\0'",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Operations(num1, num2):\n    # Calculate the absolute difference between the two numbers\n    diff = abs(num1 - num2)\n    \n    # If one number is zero, no operations needed if both are zero\n    if num1 == 0 and num2 != 0:\n        return 0\n    elif num2 == 0 and num1 != 0:\n        return 0\n    \n    # Return half of the absolute difference for even difference\n    # One operation is required to make both numbers non-zero\n    return int(diff / 2)\n\n# Test cases\nprint(min_Operations(2, 4))   # Output: 1\nprint(min_Operations(4, 10))  # Output: 4\nprint(min_Operations(1, 4))   # Output: 3",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_min_max(tup, k):\n    \"\"\"\n    Extracts the smallest k values from the input tuple as well as their positions.\n    \n    :param tup: A tuple of integers.\n    :param k: The number of elements to retrieve (must be less than or equal to the length of the tuple).\n    :return: A list containing tuples, each representing an element with its position.\n             Format is [(value1, index1), (value2, index2), ...].\n    \"\"\"\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n    sorted_indices = sorted(range(len(tup)), key=lambda i: tup[i])\n    result = []\n    for _ in range(min(k, len(sorted_indices))):\n        value = tup[sorted_indices.pop()]\n        result.append((value, sorted_indices[-1] + 1))\n    return result[::-1]\n\n# Test cases\nprint(extract_min_max((5, 20, 3, 7, 6, 8), 2))  # Expected output: [(8, 5), (6, 4)]\nprint(extract_min_max((4, 5, 6, 1, 2, 7), 3))   # Expected output: [(1, 0), (2, 1), (4, 4)]\nprint(extract_min_max((2, 3, 4, 8, 9, 11, 7), 4))  # Expected output: [(2, 0), (3, 1), (4, 2), (7, 6)]",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef replace_max_specialchar(text, max_count=5):\n    # Replace spaces, commas, and dots with colons\n    special_char_replaced_text = re.sub(r'[\\s,.]', ':', text)\n    # Split the string into words based on colons\n    words_list = special_char_replaced_text.split(':')\n    # Filter out empty strings from the list\n    non_empty_words = [word for word in words_list if word]\n    # Join the filtered words back into a single string separated by colons\n    final_string = ':'.join(non_empty_words[:max_count])\n    \n    return final_string\n\n# Test cases to verify the correctness of the solution\nprint(replace_max_specialchar('Python language, Programming language.',2))  \nprint(replace_max_specialchar('a b c,d e f',3))\nprint(replace_max_specialchar('ram reshma,ram rahim',1))",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_type(test_tup):\n    # Check each element's data type against its first element\n    for i in range(1, len(test_tup)):\n        if isinstance(test_tup[i], type(test_tup[0])) is False:\n            return False\n    return True",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_majority(arr, n, k):\n    count = 0\n    max_count = 0\n    start_index = 0\n    \n    # Find the index of the first occurrence of 'k'\n    for i in range(n - 1, -1, -1):\n        if arr[i] == k:\n            start_index = i\n            break\n    \n    # Count occurrences of 'k' from the start_index to the end of the array\n    for i in range(start_index, n):\n        if arr[i] == k:\n            count += 1\n            \n    # Check if 'k' appears more than half of the total elements\n    return count > (n // 2)\n\n# Test cases\nprint(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3))  # Expected output: True\nprint(is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4))  # Expected output: False\nprint(is_majority([1, 1, 1, 2, 2], 5, 1))  # Expected output: True",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    \"\"\"\n    Counts the number of set bits (1s) in the binary representation of a given integer n.\n    \n    Parameters:\n    n (int): The integer whose set bits are to be counted.\n    \n    Returns:\n    int: The number of set bits in the binary representation of n.\n    \"\"\"\n    # Initialize the counter for set bits\n    set_bits_count = 0\n    \n    # Loop through each bit position\n    while n > 0:\n        # Check if the least significant bit is 1 and increment the counter\n        if n & 1 == 1:\n            set_bits_count += 1\n        \n        # Right shift the number to check the next bit position\n        n >>= 1\n    \n    return set_bits_count",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Min(nums, start, end):\n    if start > end:\n        return None  # If the list is empty or all elements are equal\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if nums[mid] < nums[0]:\n            end = mid - 1\n        else:\n            start = mid + 1\n            \n    return nums[start % len(nums)]  # Return the smallest element in the array\n\n# Test cases\nprint(find_Min([1,2,3,4,5], 0, 4))  # Output: 1\nprint(find_Min([4,6,8], 0, 2))      # Output: 4\nprint(find_Min([2,3,5,7,9], 0, 4))  # Output: 2",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(s):\n    # Convert the string into a list for easier manipulation\n    s_list = list(s)\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the indices of the list in steps of 2\n    for i in range(0, len(s_list), 2):\n        # Append elements at even positions to the result list\n        result.append(s_list[i])\n    \n    # Join the result list into a string and return it\n    return ''.join(result)\n\n# Test cases to verify the correctness of the function\nprint(odd_values_string('abcdef'))  # Expected output: 'ace'\nprint(odd_values_string('python'))  # Expected output: 'pto'\nprint(odd_values_string('data'))    # Expected output: 'dt'",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(x, y, z):\n    return min(x, y, z)",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(num, start_bit, end_bit):\n    mask = (1 << end_bit + 1) - 1\n    result = num & mask\n    return bool(result)\n\n# Test cases\nprint(all_Bits_Set_In_The_Given_Range(4, 1, 2))  # Expected output: True\nprint(all_Bits_Set_In_The_Given_Range(17, 2, 4))  # Expected output: True\nprint(all_Bits_Set_In_The_Given_Range(39, 4, 6))  # Expected output: False",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange_array(arr, n):\n    # Initialize two pointers, one at start and another at end of the array\n    i = 0\n    j = n - 1\n    \n    # Move elements less than zero to the front of the array and greater than or equal to zero to the back\n    while i < j:\n        if arr[i] < 0 and arr[j] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] >= 0:\n            i += 1\n        else:\n            j -= 1\n            \n    return arr\n\n# Test the function with provided data points\nprint(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))  # Expected output: [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nprint(re_arrange_array([12, -14, -26, 13, 15], 5))          # Expected output: [-14, -26, 12, 13, 15]\nprint(re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)) # Expected output: [-42, -39, -78, 10, 24, 36, 85]",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(s, char):\n    return s.replace(' ', char)",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum(grid, r):\n    \"\"\"\n    Finds the maximum sum for each subtriangle starting from the top with a specified row number.\n    \n    :param grid: List[List[int]], a list of lists representing the right-angled triangular grid.\n    :param r: int, the index of the row where the maximum sum starts.\n    :return: int, the maximum sum among all valid triangles formed up to and including the specified row.\n    \"\"\"\n    if len(grid) == 0 or not grid[r]:\n        return 0\n    \n    # Initialize the result as the value at position r+1, which is always greater than the sum of its neighbors.\n    res = grid[r][r]\n    left = r - 1\n    while left >= 0:\n        # Update the result with the maximum value obtained by adding the current element's value to the maximum sum found so far,\n        # considering the neighboring elements on the previous level.\n        res = max(res, grid[r][left] + grid[left + 1][r])\n        left -= 1\n        \n    return res\n\n# Example check function calls\nprint(max_sum([[1], [2,1], [3,3,2]], 3))  # Expected output: 6\nprint(max_sum([[1], [1, 2], [4, 1, 12]], 3))  # Expected output: 15\nprint(max_sum([[2], [3,2], [13,23,12]], 3))  # Expected output: 28",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def larg_nnum(nums, n):\n    nums.sort(reverse=True)\n    return nums[:n]\n\n# Test cases\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) # [100, 90]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)) # [100, 90, 80, 70, 60]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)) # [100, 90, 80]",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsuface_cylinder(radius,height):\n    return 2 * 3.1415 * radius * height",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(side_length):\n    return side_length ** 3",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_set_number(num):\n    # Shift right until the least significant bit is checked\n    while num & 1 == 0:\n        num >>= 1\n    \n    # Set the leftmost '1' to its correct position\n    mask = 1 << (num.bit_length() - 1)\n    \n    return num | mask",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'No_of_Triangle' is not defined",
      "Test 2: FAIL - name 'No_of_Triangle' is not defined",
      "Test 3: FAIL - name 'No_of_Triangle' is not defined"
    ],
    "generated_code": "def no_of_triangle(n, k):\n    if n < 3:\n        return -1\n    elif n == 3 and k >= 3:\n        return 0\n    else:\n        return ((k*(k-1)*(k-2)) // 6)",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_occurences(lst):\n    # Create an empty dictionary to store record counts\n    count_dict = {}\n    \n    # Iterate through each tuple in the list\n    for item in lst:\n        # If the tuple is not already in the dictionary, add it with a value of 0\n        if item not in count_dict:\n            count_dict[item] = 0\n        \n        # Increment the count for the current item\n        count_dict[item] += 1\n    \n    # Filter out tuples where the count is greater than 1 and update the dictionary accordingly\n    filtered_items = {key: value for key, value in count_dict.items() if value > 1}\n    \n    return filtered_items",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def number_of_substrings(s):\n    n = len(s)\n    total = n * (n + 1) // 2\n    \n    for i in range(n - 1):\n        if s[i] == 'a' and s[i + 1] != 'b':\n            total -= 2\n        \n        elif s[i] == 'b' and s[i + 1] == 'a':\n            total += 2\n    \n    return total",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_total_number_of_sequences(n, m):\n    def dfs(current, left, total):\n        if current > n:\n            return 0\n        if left == 0 and current <= n:\n            return 1\n        count = 0\n        for i in range(left + 1):\n            count += dfs(current * 2, left - i, total)\n        return count\n\n    return dfs(1, m, n)\n\n\n# Test cases\nprint(get_total_number_of_sequences(10, 4))  # Expected output: 4\nprint(get_total_number_of_sequences(5, 2))   # Expected output: 6\nprint(get_total_number_of_sequences(16, 3))  # Expected output: 84",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'replace_list' is not defined",
      "Test 2: FAIL - name 'replace_list' is not defined",
      "Test 3: FAIL - name 'replace_list' is not defined"
    ],
    "generated_code": "def replace_last_element(lst, new_lst):\n    lst[-1:] = new_lst\n    return lst",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - array_3d() takes 1 positional argument but 3 were given",
      "Test 2: FAIL - array_3d() takes 1 positional argument but 3 were given",
      "Test 3: FAIL - array_3d() takes 1 positional argument but 3 were given"
    ],
    "generated_code": "import numpy as np\n\ndef array_3d(dims):\n    \"\"\"\n    Generate a 3-dimensional numpy array filled with '*' characters.\n\n    Parameters:\n    dims (tuple): A tuple of three integers representing the dimensions of the 3D array.\n\n    Returns:\n    np.ndarray: A 3D numpy array.\n    \"\"\"\n    return np.full(dims, '*', dtype=str).reshape(*dims)\n\n# Test cases to verify the correctness of the generated function\nprint(array_3d((6, 4, 3))) # Expected output: [[[ '*', '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*', '*']],\n#                                  [[ '*', '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*', '*']],\n#                                  [[ '*', '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*', '*']]]\n\nprint(array_3d((5, 3, 4))) # Expected output: [[[ '*', '*', '*', '*', '*'], [ '*', '*', '*', '*','*'], [ '*', '*', '*', '*', '*']],\n#                                      [[ '*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*']],\n#                                      [[ '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*']],\n#                                      [[ '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*'], [ '*', '*', '*', '*', '*']]]\n\nprint(array_3d((1, 2, 3))) # Expected output: [[[ '*', '*'], ['*', '*'], ['*', '*'], ['*', '*'], ['*', '*']]]",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(input_string):\n    # Initialize a counter for the number of characters\n    char_count = 0\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Increment the counter if the character is not a space\n        char_count += 1\n        \n    return char_count",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef sort_on_occurence(lst):\n    # Count occurrences of each tuple's first element\n    counts = [Counter(item[0] for item in lst).most_common() for item in zip(*lst)]\n    \n    def key_func(x):\n        return x[-1]\n    \n    # Sort based on the count and original order if two elements have the same count\n    sorted_lst = sorted(zip(counts, lst), key=key_func)\n    \n    # Reconstruct the final result with tuples\n    final_result = []\n    for i in range(len(sorted_lst)):\n        for j in range(0, len(lst[i]), 2):\n            final_result.append((sorted_lst[i][j], lst[i+1][j:j+2]))\n            \n    return final_result",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def next_Perfect_Square(n):\n    i = int(n**0.5)\n    while i * i <= n:\n        i += 1\n    return i * i\n\n# Test cases\nprint(next_Perfect_Square(35))  # Expected output: 36\nprint(next_Perfect_Square(6))   # Expected output: 9\nprint(next_Perfect_Square(9))   # Expected output: 16",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef max_sum(nums: List[int]) -> int:\n    dp_pos = [float('-inf')] * len(nums)\n    dp_neg = [float('-inf')] * len(nums)\n    \n    def update_dp(i, pos_or_neg, value):\n        if i == -1:\n            dp_pos[i] = value\n            dp_neg[i] = value\n            return\n        \n        if nums[i] >= value:\n            if pos_or_neg == 'pos':\n                update_dp(i-1, 'pos', value + nums[i])\n            else:\n                update_dp(i-1, 'neg', value - nums[i])\n        \n        update_dp(i-1, pos_or_neg, value)\n            \n    for i in range(len(nums)-1, -1, -1):\n        if nums[i] > 0:\n            update_dp(i-1, 'pos', nums[i])\n        elif nums[i] < 0:\n            update_dp(i-1, 'neg', nums[i])\n\n    ans = float('-inf')\n    for i in range(len(dp_pos)):\n        ans = max(ans, dp_pos[i], dp_neg[i])\n    \n    return ans",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def babylonian_squareroot(n):\n    x = n / 2.0  # Initial guess is half of n\n    tolerance = 1e-10  # Tolerance level to check convergence\n    while abs(x * x - n) > tolerance:\n        x = (x + n / x) / 2.0  # Babylonian iteration formula\n    return x",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    start = 0\n    \n    # Build the table. Note that the lower diagonal values of dp table are filled \n    # in rows first before columns\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n                \n    return dp[0][n - 1]\n\nprint(lps(\"TENS FOR TENS\"))\n# Output: 5\nprint(lps(\"CARDIO FOR CARDS\"))\n# Output: 7\nprint(lps(\"PART OF THE JOURNEY IS PART\"))\n# Output: 9",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \n    Args:\n    - n (int): The input number\n    \n    Returns:\n    - float: The result of the harmonic sum calculation up to n-1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 / (n - 1) + harmonic_sum(n - 1)",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef intersection_array(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    Finds and returns the intersection of two integer arrays.\n    \n    Parameters:\n    arr1 (List[int]): The first input array.\n    arr2 (List[int]): The second input array.\n    \n    Returns:\n    List[int]: A list containing the common elements between arr1 and arr2.\n    \"\"\"\n    return list(set(arr1) & set(arr2))\n\n# Test cases to verify the correctness of the function\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])) # Expected output: [1, 2, 8, 9]\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [3,5,7,9])) # Expected output: [3,5,7,9]\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [10,20,30,40])) # Expected output: [10]",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(tup, x):\n    # Initialize counter for occurrences of x\n    occurrence = 0\n    # Loop through each element in the tuple\n    for i in tup:\n        # Increment counter if the element equals x\n        if i == x:\n            occurrence += 1\n    # Return the total number of occurrences\n    return occurrence",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def insert_element(lst, elem):\n    for i in range(len(lst)):\n        lst.insert(i + 1, elem)\n    return lst",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for -: 'tuple' and 'tuple'"
    ],
    "generated_code": "import cmath\n\ndef convert(complex_num):\n    \"\"\"\n    Converts a complex number into its polar representation.\n    \n    Args:\n    complex_num (complex): The complex number to be converted.\n    \n    Returns:\n    tuple: A tuple containing the magnitude and angle of the complex number in radians.\n    \"\"\"\n    return cmath.polar(complex_num)\n\n# Test cases to verify the correctness of the solution\nassert abs(convert(1j) - (1.0, 0.0)) < 1e-9, \"Test case 1 failed\"\nassert abs(convert(4 + 0j) - (4.0, 0.0)) < 1e-9, \"Test case 2 failed\"\nassert abs(convert(5 + 0j) - (5.0, 0.0)) < 1e-9, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(lst):\n    # Initialize a counter for integers\n    integer_count = 0\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # Check if the current item is an instance of int\n        if isinstance(item, int):\n            # Increment the counter if it's an integer\n            integer_count += 1\n            \n    # Return the total count of integers found\n    return integer_count",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def words_ae(s):\n    result = []\n    words = s.split()\n    for word in words:\n        if word.startswith('a') or word.startswith('e'):\n            result.append(word)\n    return result",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def combinations_colors(colors_list, n):\n    result = []\n    for i in range(len(colors_list) + 1):\n        for j in range(i+1):\n            for k in range(j+1):\n                if len({i,j,k}) == n:\n                    combination = tuple(sorted([colors_list[i], colors_list[j], colors_list[k]]))\n                    result.append(combination)\n    return result",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(a, b):\n    return(b, a)\n\n# Test cases\nprint(swap_numbers(10, 20))   # Expected output: (20, 10)\nprint(swap_numbers(15, 17))   # Expected output: (17, 15)\nprint(swap_numbers(100, 200)) # Expected output: (200, 100)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_odd(nums):\n    return len(list(filter(lambda x: x % 2 != 0, nums)))\n\n# Test cases\nprint(count_odd([1, 2, 3, 5, 7, 8, 10])) # Expected output: 4\nprint(count_odd([10,15,14,13,-18,12,-20])) # Expected output: 2\nprint(count_odd([1, 2, 4, 8, 9])) # Expected output: 2",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'tuple' object does not support item assignment"
    ],
    "generated_code": "def maximize_elements(tuple_list_1, tuple_list_2):\n    # Sort each tuple in both lists based on the second element of the tuple\n    for i in range(len(tuple_list_1)):\n        tuple_list_1[i] = sorted(tuple_list_1[i])\n    for j in range(len(tuple_list_2)):\n        tuple_list_2[j] = sorted(tuple_list_2[j])\n\n    # Zip and sort pairs from the original list and sorted sublists\n    zipped_pairs = zip(*tuple_list_1)\n    sorted_pairs = sorted(zip(*tuple_list_2))\n\n    # Unzip and merge elements back into new tuples\n    result_list = [pair[0] + pair[1] for pair in sorted_pairs]\n    result_tup1 = [result_list[x:x+2] for x in range(0, len(result_list), 2)]\n    result_tup2 = [result_list[x:x+2] for x in range(1, len(result_list), 2)]\n\n    return ([result_tup1, result_tup2])[::-1]\n\n# Test cases\nprint(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\nprint(maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))))\nprint(maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))))",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
    ],
    "generated_code": "def is_newman_shanks_williams(n):\n    \"\"\"\n    Check if n is a Newman-Shanks-Willsamss number.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n is a Newman-Shanks-Willsamss number, False otherwise.\n    \"\"\"\n    def factorial(x):\n        \"\"\"Compute x!.\"\"\"\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n    \n    def generate_number(num):\n        \"\"\"Generate a number with num digits.\"\"\"\n        return int(str(num) * num)\n    \n    def shanks_williams_prime_check(num):\n        \"\"\"Check if num is a Shanks-Williams prime.\"\"\"\n        # Placeholder logic - replace with actual Shanks-Williams prime checking algorithm\n        return num % 2 == 1 and not all(digit ** 5 % 10 != digit for digit in str(num))\n    \n    # Start from 10 since we need at least 2 digits\n    start_num = 10\n    while True:\n        newnum = generate_number(start_num)\n        if shanks_williams_prime_check(newnum):\n            return newnum\n        start_num += 1\n\ndef newman_prime(n):\n    \"\"\"Find the nth Newman-Shanks-Willsamss number.\"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    \n    # Start from 8 because it's the first Newman-Shanks-Willsamss number\n    start_num = 8\n    while True:\n        newnum = is_newman_shanks_williams(start_num)\n        if newnum >= 10**(n-1):\n            return newnum\n        start_num += 1\n\n# Test the function\nprint(newman_prime(3))  # Expected output: 7\nprint(newman_prime(4))  # Expected output: 17\nprint(newman_prime(5))  # Expected output: 41",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def division_elements(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        if len(tup2) > i and tup1[i] % tup2[i] == 0:\n            result.append(int(tup1[i] / tup2[i]))\n        else:\n            result.append(\"Invalid Division\")\n    return tuple(result)\n\n# Test cases\nprint(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))  # Expected output: (2, 2, 2, 3)\nprint(division_elements((12, 6, 8, 16), (6, 3, 4, 4)))  # Expected output: (2, 2, 2, 4)\nprint(division_elements((20, 14, 36, 18), (5, 7, 6, 9)))  # Expected output: (4, 2, 6, 2)",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_two_parts(lst, n):\n    return lst[:n], lst[n:]",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dog_age(age_in_years):\n    return int((age_in_years - 2) * 4 + 21)",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    # Initialize the result variable\n    result = 0\n    \n    # Iterate over the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of each odd number to the result\n        result += i**2\n    \n    return result",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def find_star_num(n):\n    \"\"\"\n    This function calculates the nth star number.\n    \n    Parameters:\n    n (int): The position of the star number in the sequence.\n    \n    Returns:\n    int: The nth star number.\n    \"\"\"\n    # Calculate the nth star number using the formula for star numbers\n    result = ((n**3 + 9*n**2 + 18*n + 9)/2)\n    return int(result)\n\n# Test cases to verify the correctness of the function\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char):\n    return ord(char)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_even_and_even_index(numbers, n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and numbers[i] % 2 == 0:\n            total += numbers[i]\n    return total\n\n# Test cases\nprint(sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6))  # Output: 30\nprint(sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10))  # Output: 26\nprint(sum_even_and_even_index([5, 6, 12, 1], 4))  # Output: 12",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the fifth power of the first n even natural numbers.\n    \n    Parameters:\n    n (int): The number of initial even natural numbers to consider.\n    \n    Returns:\n    int: The sum of the fifth powers of these numbers.\n    \"\"\"\n    result = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        result += even_number ** 5\n    return result",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rear_extract(records):\n    # Extracting the last element from each tuple in the list\n    result = [item[-1] for item in records]\n    return result",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        if len(tup2) > i:\n            difference = tup1[i] - tup2[i]\n        else:\n            difference = tup1[i]\n        result.append(difference)\n    return tuple(result)\n\n# Test cases\nprint(substract_elements((10, 4, 5), (2, 5, 18))) # Expected output: (8, -1, -13)\nprint(substract_elements((11, 2, 3), (24, 45 ,16))) # Expected output: (-13, -43, -13)\nprint(substract_elements((7, 18, 9), (10, 11, 12))) # Expected output: (-3, 7, -3)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculate the sum of binomial coefficients for even indices in the given n.\n    \n    Args:\n    n (int): The input integer to calculate the sum of binomial coefficients for even indices from 0 to n-1.\n    \n    Returns:\n    int: Sum of binomial coefficients with even indices up to n.\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Loop through all even indices and add their corresponding binomial coefficient values\n    for i in range(0, n+1, 2):\n        total_sum += comb(n, i)\n        \n    return total_sum",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Position(arr, n, pos):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == n:\n            count += 1\n        if count > pos:\n            return i + 1\n    return len(arr)\n\n# Test cases\nprint(get_Position([2,5,4],3,2))  # Expected output: 2\nprint(get_Position([4,3],2,2))    # Expected output: 2\nprint(get_Position([1,2,3,4],4,1)) # Expected output: 4",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dict_filter(dict_data, value):\n    return {key:value for key, value in dict_data.items() if value == value}\n\n# Test cases\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170))\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180))\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190))",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_first_elements(tup):\n    \"\"\"\n    Counts and returns the number of elements occurring just before the tuple with nested tuples.\n    \n    Parameters:\n    tup (tuple): A nested tuple where some elements may be within other tuples.\n    \n    Returns:\n    int: The count of elements that occur before the first tuple containing nested tuples.\n    \"\"\"\n    result = 0\n    for i in range(len(tup)):\n        if isinstance(tup[i], tuple) and not isinstance(tup[i][0], tuple):\n            break\n        else:\n            result += 1\n    return result",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_num_decagonal(n):\n    # Calculate the nth decagonal number using the formula n^2 + (n - 1)^2\n    return n**2 + (n - 1)**2\n\n# Test cases\nprint(is_num_decagonal(3))  # Expected output: 27\nprint(is_num_decagonal(7))  # Expected output: 175\nprint(is_num_decagonal(10)) # Expected output: 370",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True, i\n    return False, -1",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'all_unique' is not defined",
      "Test 2: FAIL - name 'all_unique' is not defined",
      "Test 3: FAIL - name 'all_unique' is not defined"
    ],
    "generated_code": "def is_all_unique(elements):\n    \"\"\"\n    Check if all elements in the given list are unique.\n    \n    Args:\n        elements (list): The list of elements to be checked.\n        \n    Returns:\n        bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    # Remove duplicates and compare its length with original list's length\n    return len(set(elements)) == len(elements)\n\n# Test cases to verify the correctness of the function\nassert is_all_unique([1,2,3]) == True, \"Test case [1,2,3] failed\"\nassert is_all_unique([1,2,1,2]) == False, \"Test case [1,2,1,2] failed\"\nassert is_all_unique([1,2,3,4,5]) == True, \"Test case [1,2,3,4,5] failed\"",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef sub_list(list1: List[int], list2: List[int]) -> List[int]:\n    return [x - y for x, y in zip(list1, list2)]",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def validate(num):\n    # Convert number to string and then iterate over its characters\n    num_str = str(num)\n    for i in range(len(num_str)):\n        # Check if the current digit is greater than its own ASCII value\n        if int(num_str[i]) > ord(num_str[i]):\n            return False\n    return True",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(lst, target_str):\n    # Check if each element in the list is equal to the target string\n    return all(item == target_str for item in lst)",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match_two_three(\"ac\")) # Expected output: 'Not matched!'\nprint(text_match_two_three(\"dc\")) # Expected output: 'Not matched!'\nprint(text_match_two_three(\"abbbba\")) # Expected output: 'Found a match!'",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "from typing import List\n\ndef max_sub_array_sum_repeated(arr: List[int], n: int, k: int) -> int:\n    # If n = 1, we just need to find the maximum subarray sum using Kadane's algorithm\n    if n == 1:\n        return kadane_algorithm(arr)\n    \n    # Calculate prefix sums and suffix sums for better calculation efficiency later\n    prefix_sums = [0]\n    suffix_sums = []\n    current_sum = 0\n    \n    # Calculate prefix sums\n    for num in arr:\n        current_sum += num\n        prefix_sums.append(current_sum)\n    \n    total_sum = 0\n    # Calculate suffix sums from end to start\n    for i in range(len(arr)-1, -1, -1):\n        total_sum += arr[i]\n        suffix_sums.append(total_sum)\n    \n    reverse_prefix_sums = list(prefix_sums)[::-1] + [prefix_sums[0]]\n    result = float('-inf')\n    \n    # Iterate over all possible substrings lengths\n    for length in range(1, len(arr)+1):\n        for i in range(len(arr)):\n            j = i + length\n            left = i\n            right = j\n            while j < len(arr) and right <= len(arr) - 1:\n                left = min(left, j)\n                right = max(right, j)\n                current_sum = prefix_sums[left] - prefix_sums[left-1]\n                next_sum = suffix_sums[right+1] - suffix_sums[right]\n                \n                if left >= n:\n                    break\n                \n                current_max = max(current_sum, next_sum)\n                if left < n * (k - 1):\n                    current_max += suffix_sums[left]\n                \n                if current_max > result:\n                    result = current_max\n            \n            if left >= n:\n                break\n        \n        if left >= n:\n            break\n    \n    return result",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Loop through first n even natural numbers and add their squares to the sum\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 2\n    \n    return total_sum",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: base is not invertible for the given modulus"
    ],
    "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef modular_inverse(arr, p, q):\n    mod_inv = []\n    for num in arr:\n        if pow(num, -1, q) % p == 1:\n            mod_inv.append(num)\n    return len(mod_inv)\n\n# Test cases\nprint(modular_inverse([ 1, 6, 4, 5 ], 4, 7)) # Output: 2\nprint(modular_inverse([1, 3, 8, 12, 12], 5, 13)) # Output: 3\nprint(modular_inverse([2, 3, 4, 5], 4, 6)) # Output: 1",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Days(year):\n    # Calculate the number of leap years within the given year range\n    num_leap_years = int((year + 4) / 4) - int((year + 100) / 400)\n    \n    # Initialize the total odd day count and current month index\n    total_odd_days = 0\n    current_month = 1\n    \n    # Loop through each month to calculate odd days\n    for month in range(1, 13):\n        if month % 2 != 0:\n            # Days in months divisible by 4 except February (February is treated as having an extra day)\n            days_in_month = 29 + num_leap_years * 1\n        else:\n            days_in_month = 28 + num_leap_years * 1\n        \n        # Add days based on whether it's a new month\n        if current_month % 2 != 0:\n            total_odd_days += days_in_month // 2\n        else:\n            total_odd_days += days_in_month // 2\n        \n        current_month += 1\n    \n    return total_odd_days",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (5,) + inhomogeneous part."
    ],
    "generated_code": "from typing import List, Tuple\nimport numpy as np\n\ndef max_length(lst_of_lsts: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n    Finds the largest list within lst_of_lsts and returns its length along with the list itself.\n    \n    Args:\n    lst_of_lsts (List[List[int]]): A list containing sublists of integers.\n    \n    Returns:\n    Tuple[int, List[int]]: A tuple where the first element is an integer representing the maximum list length,\n                           and the second element is the longest sublist found in lst_of_lsts.\n    \"\"\"\n    # Convert each sublist into a NumPy array for comparison\n    arr = np.array([np.array(sublist) for sublist in lst_of_lsts])\n    # Find the maximum dimension of the arrays\n    dim_max = arr.shape[-1]\n    # Initialize variables to store the index and value of the maximum list\n    idx, val = None, None\n    \n    for i, x in enumerate(arr):\n        if x.size == dim_max and (val is None or x >= val):\n            idx, val = i, x\n    \n    # Return the length of the maximum list and the list itself\n    return dim_max, lst_of_lsts[idx]\n\n# Example check function calls\nprint(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\nprint(max_length([[1], [5, 7], [10, 12, 14, 15]]))\nprint(max_length([[5], [15, 20, 25]]))",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from functools import lru_cache\n\ndef count_no_of_ways(n, k):\n    @lru_cache(maxsize=None)\n    def dp(i, prev_color):\n        if i == n:\n            return 1\n        ways = 0\n        if prev_color is None or prev_color != 0:\n            ways += dp(i + 1, 0)\n        if prev_color is None or prev_color != 1:\n            ways += dp(i + 1, 1)\n        return ways\n    \n    result = dp(0, None)\n    return result",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(dividend, divisor):\n    return dividend // divisor",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def max_val(lst):\n    return max(lst)",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_div(num):\n    total = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            total += i\n    return total",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Inv_Count(arr, n): \n    inv_count = 0  \n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1  \n    return inv_count",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_list(nested_list):\n    result = []\n    for element in nested_list:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def intersection_nested_lists(list1, list2):\n    return [[item for item in sublist if item in list1] for sublist in list2]\n\n# Test cases\nprint(intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n                                 [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]))\nprint(intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]],\n                                 [[4, 5], [6, 8]]))\nprint(intersection_nested_lists(['john', 'amal', 'joel', 'george'],\n                                 [['john'], ['jack', 'john', 'mary'], ['howard', 'john'], ['jude']]))",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_aggregate(lst):\n    # Sort the list based on the second element in each tuple\n    lst.sort(key=lambda x: x[1], reverse=True)\n    # Return the first element of the sorted list\n    return lst[0]",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from math import comb\n\ndef count_binary_seq(n):\n    total = pow(2, n)\n    half = pow(2, int(n / 2))\n    \n    if n % 2 == 0:\n        return half * half * half * half\n    else:\n        return half * half - comb(int(n / 2), int(n / 4))\n\n# Test cases\nprint(count_binary_seq(1))  # Output: 2.0\nprint(count_binary_seq(2))  # Output: 6.0\nprint(count_binary_seq(3))  # Output: 20.0",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def dict_depth(x):\n    return max([1 + dict_depth(v) for v in x.values()] if isinstance(x, dict) else 1)",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_Bit_Number(num):\n    # Find the highest bit position of num and subtract 1 to get the position of the most significant set bit\n    high_bit_position = len(bin(num & -num)) - 3\n    # Return the power of 2 at the calculated position\n    return 2 ** (high_bit_position)",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def solve(arr, n):\n    # Initialize counters for inversions and odd positions\n    inv_count = 0\n    odd_count = 0\n    \n    # Iterate through the array to calculate inversions and check for odd positions\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            inv_count += 1\n        if i % 2 != 0:\n            odd_count += 1\n    \n    # Check if the counts of inversions and odd positions are equal\n    return inv_count == odd_count",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Element(arr, rotation_points, index, target_rotation=0):\n    # Calculate the actual position in the rotated array\n    pos = ((index + target_rotation) % len(rotation_points)) - 1\n    if arr[pos] == target_rotation:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(words):\n    for word in words:\n        if word.startswith(\"p\"):\n            return word.split()[0], word.split()[-1]\n    return None",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_increasing_subseq(nums: List[int], n: int, k: int, m: int) -> int:\n    \"\"\"\n    Finds the maximum sum of an increasing subsequence starting at the beginning up to the ith index,\n    where j >= i+1 represents including the k-th element in the sequence.\n    \n    :param nums: List of integers representing the array.\n    :param n: Integer specifying the end index (inclusive).\n    :param k: Integer specifying the target position (inclusive).\n    :param m: Integer specifying the current length of the subsequences being considered.\n    :return: The maximum sum of the increasing subsequence meeting the criteria.\n    \"\"\"\n    if k > n - m + 1:\n        return max(nums)\n    \n    dp = [[-float('inf')] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][i] = nums[i]\n        \n    for l in range(2, n + 1):\n        for i in range(1, n + 1 - l + 1):\n            j = i + l - 1\n            for k in range(i + 1, j + 1):\n                dp[i][j] = max(dp[i][j], dp[i][k - 1] + nums[j])\n                \n    return dp[1][n]\n\n# Example check function calls\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)) # Expected output: 11\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5)) # Expected output: 7\nprint(max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)) # Expected output: 71",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 2: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 3: FAIL - can only concatenate tuple (not \"list\") to tuple"
    ],
    "generated_code": "def colon_tuplex(tuplex, n, new_value):\n    return tuplex[:n] + ([new_value]*max(0, n - len(tuplex))) + tuplex[n:]",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef large_product(list_one: List[int], list_two: List[int], n: int) -> List[int]:\n    max_products = []\n    for i in range(len(list_one)):\n        for j in range(len(list_two)):\n            product = list_one[i] * list_two[j]\n            if len(max_products) < n:\n                max_products.append(product)\n            else:\n                max_products.sort(reverse=True)\n                if product > max_products[0]:\n                    max_products.pop(0)\n                    max_products.append(product)\n    return max_products[:n]\n\n# Test cases\nprint(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3))  # Output: [60, 54, 50]\nprint(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4))  # Output: [60, 54, 50, 48]\nprint(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5))  # Output: [60, 54, 50, 48, 45]",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(a, b):\n    \"\"\"\n    This function takes in two parameters a and b and returns the larger of the two.\n    \n    Parameters:\n    a (int/float): First number\n    b (int/float): Second number\n    \n    Returns:\n    int/float: The larger of the two input numbers\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_tuple(s):\n    # Convert each character in the string to a tuple and join them into a new tuple\n    return tuple([char for char in s])",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_left_most_unset_bit(n):\n    # Calculate the next power of two greater than n\n    p = -(-n.bit_length())  # Equivalent to math.ceil(math.log2(n))\n    \n    # Create a bitmask with all bits set from 1 to p-1\n    mask = ((1 << p) - 1)\n    \n    # Apply the bitmask to n to set its leftmost unset bit and then shift it right by one\n    result = (n | mask) >> 1\n    \n    return result",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculates and returns the volume of a cone.\n    \n    Parameters:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n    \n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    return (math.pi * radius**2 * height) / 3",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(lst):\n    result = [x for x in lst if x > 0]\n    return result",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_rectangular_grid(grid, m):\n    # Initialize variables\n    row = len(grid)\n    col = len(grid[0])\n    \n    # Iterate over each cell in the grid except the first and last column\n    for i in range(1, col - 1):\n        if grid[0][i-1] > 0:\n            grid[0][i] += grid[0][i-1]\n        \n        if grid[row-1][i] > 0:\n            grid[row-1][i] += grid[row-2][i]\n    \n    # Iterate from second row to second last row\n    for r in range(1, row-1):\n        for c in range(1, col - 1):\n            temp = min(grid[r-1][c-1], grid[r-1][c+1], grid[r+1][c-1], grid[r+1][c+1])\n            if temp > 0:\n                grid[r][c] += temp\n    \n    return max(grid[i][col-1] for i in range(row))",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - UnboundLocalError: local variable 'result' referenced before assignment"
    ],
    "generated_code": "def find_Max_Len_Even(s):\n    \"\"\"\n    Finds and returns the first longest even-length word in the given string.\n    \n    Parameters:\n        s (str): The input string containing words separated by spaces.\n        \n    Returns:\n        str: The first longest even-length word found in the string, otherwise '-1' if no such word exists.\n    \"\"\"\n    max_len = -1\n    for word in s.split():\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            result = word\n    return result\n\n# Test Cases\nassert find_Max_Len_Even(\"python language\") == \"language\", \"Test case 1 failed\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\", \"Test case 2 failed\"\nassert find_Max_Len_Even(\"eve\") == \"-1\", \"Test case 3 failed\"\n\nprint(find_Max_Len_Even(\"python language\"))  # Expected output: \"language\"\nprint(find_Max_Len_Even(\"maximum even length\"))  # Expected output: \"length\"\nprint(find_Max_Len_Even(\"eve\"))  # Expected output: \"-1\"",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_last_occurrence(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result\n\n# Test cases\nprint(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 3\nprint(find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9))  # Output: 9\nprint(find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6))  # Output: 6",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def modified_encode(input_list):\n    result = []\n    i = 0\n    while i < len(input_list):\n        count = 1\n        char = input_list[i]\n        while i + 1 < len(input_list) and input_list[i] == input_list[i+1]:\n            i += 1\n            count += 1\n        if count > 1:\n            result.append([count, char])\n        else:\n            result.append(char)\n        i += 1\n    return result",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_volume(sides_sum):\n    # Calculate the maximum possible length for each dimension\n    # using the condition that the product of three numbers must be equal to sides_sum.\n    side_length = int((sides_sum * 6 ** 0.5) / 9)\n    \n    # Check if it's possible to form a cuboid with the calculated dimensions\n    if side_length * 2 + side_length <= sides_sum:\n        return side_length * side_length * 3\n    else:\n        return -1  # In case no valid cuboid can be formed\n\n# Test cases\nprint(max_volume(8))   # Expected output: 18\nprint(max_volume(4))   # Expected output: 2\nprint(max_volume(1))   # Expected output: 0",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_long_word(text):\n    # Define the regular expression pattern to match words of exactly 5 characters\n    pattern = r'\\b\\w{5}\\b'\n    \n    # Use re.findall() to extract all matches from the input text\n    words_of_five_chars = re.findall(pattern, text)\n    \n    return words_of_five_chars",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_difference(n):\n    # Calculate the square of sum for n natural numbers\n    sq_sum = int((n * (n + 1) / 2) ** 2)\n    \n    # Calculate the sum of squares for n natural numbers\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Return the difference between the two calculated values\n    return sq_sum - sum_of_squares",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_demlo(n):\n    n = list(str(n))\n    result = ''\n    for i in range(len(n)):\n        if i % 2 == 0:\n            result += str(int(n[i]) + 1)\n        else:\n            result += str(int(n[i]) - 1)\n    return int(result[::-1])",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_min(arr):\n    # Find the indices where the elements in arr are equal to their first element.\n    min_indices = [i for i, val in enumerate(arr) if val == min(arr)]\n    return min_indices",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef re_arrange(arr: List[int], n: int) -> List[int]:\n    pos, neg = [], []\n    # Separate positive and negative numbers into two lists\n    for num in arr:\n        if num >= 0:\n            pos.append(num)\n        else:\n            neg.append(num)\n    \n    result = []\n    # Alternate between elements from each list until one is exhausted\n    while pos or neg:\n        if pos:\n            result.append(pos.pop(0))\n        if neg:\n            result.append(neg.pop(0))\n    \n    return result",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_alternates(lst):\n    result = []\n    for i in range(0, len(lst), 2):\n        if i + 1 < len(lst):  # Ensure there's a next element after current one\n            result.append(lst[i] + lst[i + 1])\n    return tuple(result)\n\n# Test cases\nprint(sum_of_alternates((5, 6, 3, 6, 10, 34)))  # Expected output: ((46, 18))\nprint(sum_of_alternates((1, 2, 3, 4, 5)))       # Expected output: ((6, 9))\nprint(sum_of_alternates((6, 7, 8, 9, 4, 5)))    # Expected output: ((21, 18))",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_Min_Squares(number):\n    if number == 0:\n        return 0\n    \n    min_squares = float('inf')\n    for i in range(1, int(number**0.5) + 1):\n        current_squares = number // i**2 + get_Min_Squares(i)\n        min_squares = min(min_squares, current_squares)\n    \n    return min_squares\n\n# Test Cases\nprint(get_Min_Squares(6))  # Output: 3\nprint(get_Min_Squares(2))  # Output: 2\nprint(get_Min_Squares(4))  # Output: 1",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def most_occurrences(strings_list):\n    # Count occurrences of each string in the list\n    count_dict = {}\n    for s in strings_list:\n        if s in count_dict:\n            count_dict[s] += 1\n        else:\n            count_dict[s] = 1\n    \n    max_count = -1\n    result = \"\"\n    \n    # Find the string(s) with the maximum occurrence\n    for key, value in count_dict.items():\n        if value > max_count:\n            max_count = value\n            result = key\n            \n    return result\n\n# Test cases\nprint(most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]))  # Output: 'UTS'\nprint(most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"]))  # Output: 'year'\nprint(most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"]))  # Output: 'can'",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Calculate the semi-perimeter of the triangle\n    s = (a + b + c) / 2\n    \n    # Check if any two sides are equal and calculate its square root\n    return bool((s * (s - a) == 0) or (s * (s - b) == 0) or (s * (s - c) == 0))\n\n# Test cases\nprint(check_isosceles(6, 8, 12))  # Expected output: False\nprint(check_isosceles(6, 6, 12))  # Expected output: True\nprint(check_isosceles(6, 16, 20)) # Expected output: False",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(lst, num_rotations, k=1):\n    return lst[num_rotations:] + lst[:num_rotations]\n\n# Test Cases\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)) # Output: [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2))   # Output: [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))   # Output: [6, 7, 8, 9, 10, 1, 2]",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(lst):\n    # Initialize counter for negative numbers\n    negative_count = 0\n    \n    # Iterate through each number in the list\n    for num in lst:\n        if num < 0:\n            negative_count += 1\n            \n    return negative_count",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_char(text):\n    # Define the pattern to match three, four, and five character words\n    pattern = r'\\b\\w{3,5}\\b'\n    \n    # Use regex to find matches\n    matches = re.findall(pattern, text)\n    \n    return matches",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_unset_bits(num):\n    # Counting the number of unset bits in the binary representation of num\n    count = 0\n    while num:\n        if num & 1 == 0:\n            count += 1\n        num >>= 1\n    return count\n\n# Test cases to verify the correctness of the function\nassert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(input_string):\n    # Create an empty dictionary to store character frequencies\n    char_dict = {}\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # If the character is already in the dictionary, increment its count\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            # Otherwise, add the character to the dictionary with a count of 1\n            char_dict[char] = 1\n    \n    return char_dict",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def sort_by_second_element(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Validity(a, b, c):\n    # Check if all sides are positive numbers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Check for triangle inequality theorem conditions\n    if (a + b > c) and (b + c > a) and (c + a > b):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ap_sum(a, d, n):\n    return int(n/2 * (2*a + (n-1)*d))",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'month_name_count' is not defined",
      "Test 2: FAIL - name 'month_name_count' is not defined",
      "Test 3: FAIL - name 'month_name_count' is not defined"
    ],
    "generated_code": "import calendar\n\ndef check_monthnum(month_name):\n    \"\"\"\n    Checks if the given month name corresponds to a month with exactly 28 days.\n    \n    Args:\n        month_name (str): The name of the month to be checked.\n        \n    Returns:\n        bool: True if the month has 28 days, False otherwise.\n    \"\"\"\n    try:\n        return calendar.monthrange(2023, month_name_count[month_name.lower()])[-1] == 28\n    except KeyError:\n        # Handling months which do not exist in the standard calendar library\n        for i in range(1, 13):\n            if month_name.lower() == calendar.month_abbr[i]:\n                return calendar.monthrange(2023, i)[-1] == 28",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_word(text):\n    \"\"\"\n    This function checks if the given text ends with 'word' followed by an optional period.\n    \n    Args:\n        text (str): The input string to be checked.\n        \n    Returns:\n        str: A message indicating whether there is a match ('Found a match!' )or no match ('Not matched!').\n    \"\"\"\n    pattern = r'\\w+word(\\.\\w*)?'\n    result = re.search(pattern, text)\n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match_word(\"python.\")) # Expected output: Found a match!\nprint(text_match_word(\"python.\")) # Expected output: Found a match!\nprint(text_match_word(\"  lang  \")) # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def count_substring_with_equal_ends(s):\n    result = 0\n    for i in range(len(s)):\n        # Check if starting character is equal to ending character\n        if s[i] == s[-1]:\n            j = i + 1\n            while j < len(s) and s[j] == s[0]:\n                j += 1\n            result += j - i\n    return result",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Divisor(start, end):\n    max_divisor = -1\n    for i in range(2, start + 1):  # Iterate through potential divisors from 2 up to the start of the interval\n        if all(i % j == 0 for j in range(2, end // i + 1)):  # Check if i is a divisor of every number in the range [start+1, end]\n            max_divisor = i\n    return max_divisor",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_three_smallest_nums(nums):\n    # Sort the list in ascending order\n    sorted_nums = sorted(nums)\n    \n    # Sum the first three elements after sorting\n    result = sum(sorted_nums[:3])\n    \n    return result\n\n# Test the function with provided data points\nprint(sum_three_smallest_nums([10,20,30,40,50,60,7]))  # Expected output: 37\nprint(sum_three_smallest_nums([1,2,3,4,5]))            # Expected output: 6\nprint(sum_three_smallest_nums([0,1,2,3,4,5]))          # Expected output: 6",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_to_tuple(input_set):\n    \"\"\"\n    Converts a set of integers into a tuple of those integers.\n    \n    Args:\n    input_set (set): A set containing integer elements\n    \n    Returns:\n    tuple: A tuple where each element is an integer from the original set\n    \"\"\"\n    return tuple(sorted(list(input_set)))\n\n# Test cases to verify the correctness of the function\nprint(set_to_tuple({1, 2, 3, 4, 5}))  # Expected output: (1, 2, 3, 4, 5)\nprint(set_to_tuple({6, 7, 8, 9, 10, 11}))  # Expected output: (6, 7, 8, 9, 10, 11)\nprint(set_to_tuple({12, 13, 14, 15, 16}))  # Expected output: (12, 13, 14, 15, 16)",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from typing import List\nimport bisect\n\ndef find_minimum_range(nums: List[List[int]]) -> tuple:\n    nums.sort(key=lambda x: x[0])\n    minRange = float('inf'), -1\n    left, right = 0, len(nums) - 1\n    \n    while left < right:\n        current_sum, sum_left, sum_right = nums[left][0] + nums[right][0], nums[left][1], nums[right][1]\n        \n        if sum_left >= sum_right:\n            # Move right pointer and adjust sums accordingly\n            right -= 1\n            continue\n        \n        if current_sum > minRange[0]:\n            # Update minimum range with new sum\n            minRange = current_sum, min(minRange[1], sum_left)\n        \n        left += 1\n    \n    return minRange\n\n# Test cases\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dig_let(input_str):\n    digit_count = 0\n    letter_count = 0\n    for char in input_str:\n        if char.isdigit():\n            digit_count += 1\n        elif char.isalpha():\n            letter_count += 1\n    return digit_count, letter_count",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def count_Odd_Squares(start, end):\n    \"\"\"\n    Returns the count of numbers within the inclusive range [start, end] \n    that have exactly one prime factor which is an odd square.\n    \n    Parameters:\n        start (int): The starting integer of the range.\n        end (int): The ending integer of the range.\n        \n    Returns:\n        int: Count of numbers having one odd factor as a perfect square.\n    \"\"\"\n    def has_odd_square_factor(n):\n        while n % 2 == 0:\n            n //= 2\n        return n > 1\n    \n    count = 0\n    for num in range(max(start, 1), min(end+1)):\n        if has_odd_square_factor(num):\n            count += 1\n            \n    return count\n\n# Check function with provided data points\nprint(count_Odd_Squares(5, 100))  # Expected output: 8\nprint(count_Odd_Squares(8, 65))   # Expected output: 6\nprint(count_Odd_Squares(2, 5))    # Expected output: 1",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diff_consecutivenums(nums):\n    # Initialize an empty list to store differences\n    diff = []\n    # Loop through the list starting from the second element\n    for i in range(1, len(nums)):\n        # Calculate and append the difference between current and previous number\n        diff.append(nums[i] - nums[i-1])\n    return diff",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: ''",
      "Test 2: FAIL - invalid literal for int() with base 10: ''",
      "Test 3: FAIL - invalid literal for int() with base 10: ''"
    ],
    "generated_code": "def zigzag(n, k):\n    if n < k:\n        raise ValueError(\"n must be greater than or equal to k\")\n    \n    result = []\n    for i in range(k):\n        temp = [(i + j) % k for j in range(i)]\n        while len(temp) > 0 and temp[0] == -1:\n            temp.pop(0)\n        result.append(''.join(str(j) for j in temp))\n    return int(result[0])",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def count_Squares(m, n):\n    \"\"\"\n    Count the total number of squares within a m x n grid.\n    \n    Args:\n        m (int): The height of the grid.\n        n (int): The width of the grid.\n        \n    Returns:\n        int: The total number of squares in the grid.\n    \"\"\"\n    result = 0\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i * j >= min(m, n):\n                result += 1\n    return result\n\n# Check function with provided data points\nassert count_Squares(4, 3) == 20\nassert count_Squares(1, 2) == 2\nassert count_Squares(2, 2) == 5\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_ways() missing 1 required positional argument: 'value_set'",
      "Test 2: FAIL - find_ways() missing 1 required positional argument: 'value_set'",
      "Test 3: FAIL - find_ways() missing 1 required positional argument: 'value_set'"
    ],
    "generated_code": "def find_ways(length, value_set):\n    dp = [[0 for _ in range(length + 1)] for __ in range(len(value_set) + 1)]\n    \n    # Base case initialization\n    for i in range(len(value_set)):\n        dp[i][0] = 1\n    \n    # Filling the DP table\n    for i in range(len(value_set)):\n        for j in range(1, length + 1):\n            if j >= value_set[i]:\n                dp[i][j] = dp[i][j - value_set[i]] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n                \n    return dp[-1][-1]\n\n# Test cases\nprint(find_ways(4, [1, 2]))  # Expected output: 2\nprint(find_ways(6, [1, 2, 3]))  # Expected output: 5\nprint(find_ways(8, [1, 2, 3, 4]))  # Expected output: 14",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(binary_str):\n    # Check if the length of the string is even\n    if len(binary_str) % 2 != 0:\n        return \"No\"\n    \n    # Convert the string into list for easier manipulation\n    binary_list = list(binary_str)\n    \n    # Iterate over the list and count the number of '1's and '0's\n    ones_count = binary_list.count('1')\n    zeros_count = binary_list.count('0')\n    \n    # If the counts of '1' and '0' are equal, it's a binary string\n    if ones_count == zeros_count:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test Cases\nprint(check(\"01010101010\"))   # Expected output: Yes\nprint(check(\"name0\"))         # Expected output: No\nprint(check(\"101\"))           # Expected output: Yes",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def minimum_Length(s):\n    # Initialize a list to store characters and their counts\n    char_counts = [0] * 26\n    \n    # Count occurrences of each character in the string\n    for char in s:\n        if char.isalpha():\n            char_counts[ord(char) - ord('a')] += 1\n            \n    min_length = len(s)\n    \n    # Try removing each character once\n    for i in range(len(s)):\n        for j in range(26):\n            if char_counts[j]:\n                temp_char = chr(j + ord('a'))\n                \n                # Replace first occurrence of the character with another unique character\n                if i > 0 and s[i-1] == temp_char:\n                    continue\n                \n                replaced_string = s[:i] + s[i+1:]\n                \n                # Recursively call the function on the new string\n                result = minimum_Length(replaced_string.replace(temp_char, 'A'))\n                \n                # Update the minimum length found so far\n                if result < min_length:\n                    min_length = result\n                    \n                # Restore the original string\n                replaced_string = s[:i] + temp_char + s[i+1:]\n                \n    return min_length\n\n# Test cases\nprint(minimum_Length(\"mnm\"))   # Expected output: 1\nprint(minimum_Length(\"abcda\")) # Expected output: 3\nprint(minimum_Length(\"abcb\"))  # Expected output: 2",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Element(arr, k, n):\n    count = {}\n    for i in range(n):\n        if arr[i] not in count:\n            count[arr[i]] = [i]\n        else:\n            count[arr[i]].append(i)\n    res = -1\n    for key in count:\n        if len(count[key]) >= k:\n            res = min(res, key)\n    return res",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'unique_Characters' is not defined",
      "Test 2: FAIL - name 'unique_Characters' is not defined",
      "Test 3: FAIL - name 'unique_Characters' is not defined"
    ],
    "generated_code": "def is_unique_characters(s):\n    # Convert the input string to a set of its characters.\n    # If the length of the set is equal to the length of the original string,\n    # it means all characters in the string are unique.\n    return len(set(s)) == len(s)\n\n# Test cases to verify the correctness of the function.\nassert not is_unique_characters('aba'), \"Test case 'aba' failed\"\nassert is_unique_characters('abc'), \"Test case 'abc' failed\"\nassert not is_unique_characters('abab'), \"Test case 'abab' failed\"\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_column(nested_list, col_index):\n    return [[sublist[i] for i in range(len(sublist)) if i != col_index] for sublist in nested_list]",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def tn_ap(n, d, t):\n    # Calculate the nth term in an arithmetic progression with first term a and common difference d.\n    return n * d + ((n - 1) * (t - 1))\n\n# Test cases to verify the correctness of the solution\nassert tn_ap(1,5,2) == 9\nassert tn_ap(2,6,4) == 22\nassert tn_ap(1,4,5) == 16\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Rectangles(r):\n    # Initialize counters for full and incomplete rectangles\n    full = 0\n    incomplete = 0\n    \n    # Iterate through possible x and y coordinates within the circle's diameter range\n    for i in range(-r, r + 1):\n        for j in range(-r, r + 1):\n            if (i**2 + j**2 <= r**2):  # Check if point is inside the circle\n                if (i == 0 and j > 0) or (j == 0 and i < 0):  # Complete rectangle condition\n                    full += 1\n                else:\n                    incomplete += 1\n    \n    return full + incomplete  # Total number of rectangles",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(angle1, angle2):\n    # Calculate the third angle in degrees\n    third_angle = 180 - angle1 - angle2\n    return third_angle",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_max(tuple_records):\n    # Use max() with key argument to sort tuples based on second item in descending order and then first item in ascending order.\n    # The max() function returns the tuple with the highest value for the specified key.\n    return max(tuple_records, key=lambda x: (-x[1], x[0]))[1]",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef moddiv_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x % y if y != 0 else -1, lst1, lst2))",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Check_Solution(a, b, c):\n    # Calculate the discriminant\n    D = b**2 - 4*a*c\n    \n    # If the discriminant is zero, there is exactly one real root.\n    if D == 0:\n        # Calculate both roots and compare with given condition.\n        x = -b / (2 * a)\n        y = -b / (2 * a)\n        if x != 2*y:\n            return \"No\"\n    \n    # If the discriminant is positive, there are two distinct real roots.\n    elif D > 0:\n        # Calculate both roots and compare with given condition.\n        x = (-b + D**0.5) / (2 * a)\n        y = (-b - D**0.5) / (2 * a)\n        if x != 2*y:\n            return \"No\"\n    \n    else:\n        # If the discriminant is negative, there are no real roots.\n        pass\n    \n    # All conditions satisfied means there exists at least one solution where one root is twice another.\n    return \"Yes\"\n\n# Test cases\nprint(Check_Solution(1,3,2)) # Expected output: Yes\nprint(Check_Solution(1,2,3)) # Expected output: No\nprint(Check_Solution(1,-5,6)) # Expected output: No",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_carol(n):\n    # Initialize variables\n    p = [1]\n    for i in range(n - 1):\n        p.append(p[i] * 4 + 1)\n    return sum([p[j] for j in range(n)])\n\n# Test cases\nprint(get_carol(2))  # Expected output: 7\nprint(get_carol(4))  # Expected output: 223\nprint(get_carol(5))  # Expected output: 959",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lst):\n    return [item for item in lst if item != []]",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef max_occurrences(lst):\n    count = Counter(lst)\n    max_count = max(count.values())\n    for num, freq in count.items():\n        if freq == max_count:\n            return num",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_K_element(tuples_list, K):\n    \"\"\"\n    Adds K to each element of the given list of tuples.\n    \n    :param tuples_list: List of tuples with integer elements.\n    :param K: Integer value to be added to each element of the tuples.\n    :return: A new list containing the modified tuples.\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        temp_tup = ()\n        for item in tup:\n            temp_tup += (item + K,)\n        result.append(temp_tup)\n    return result\n\n# Test cases\nprint(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4))  # Expected output: [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nprint(add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8))  # Expected output: [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nprint(add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9))  # Expected output: [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def min_flip_to_make_string_alternate(binary_str):\n    \"\"\"\n    Calculate the minimum number of character flips needed in a binary string to make it alternate.\n    \n    Args:\n    binary_str (str): A binary string consisting of '0's and '1's.\n    \n    Returns:\n    int: The minimum number of flips required.\n    \"\"\"\n    flip_count = 0\n    for i in range(1, len(binary_str)):\n        if binary_str[i] != binary_str[i-1]:\n            flip_count += 1\n    return flip_count\n\n# Check function with provided data points\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2, \"Test case 1 failed\"\nassert min_flip_to_make_string_alternate(\"001\") == 1, \"Test case 2 failed\"\nassert min_flip_to_make_string_alternate(\"010111011\") == 2, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(number):\n    # Initialize digit counter\n    digit_count = 0\n    \n    # Loop until the number is reduced to zero\n    while number != 0:\n        # Remove the last digit from the number\n        number //= 10\n        # Increment the digit counter\n        digit_count += 1\n    \n    return digit_count\n\n# Test cases\nprint(count_Digit(12345))  # Expected output: 5\nprint(count_Digit(11223305))  # Expected output: 8\nprint(count_Digit(4123459))  # Expected output: 7",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def adjacent_num_product(nums):\n    # Initialize max product as the first two numbers\n    max_product = nums[0] * nums[1]\n    \n    # Iterate through the list starting from the third element\n    for i in range(2, len(nums)):\n        # Calculate the current product\n        curr_product = nums[i-1] * nums[i]\n        \n        # Update max product if the current product is greater\n        if curr_product > max_product:\n            max_product = curr_product\n    \n    return max_product",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'TreeNode' is not defined"
    ],
    "generated_code": "def is_tree_balanced(root):\n    def dfs(node):\n        if node is None:\n            return [True, 0]\n        \n        left_balance, left_height = dfs(node.left)\n        right_balance, right_height = dfs(node.right)\n\n        # A tree is balanced if both subtrees are balanced and the height difference does not exceed 1.\n        balance = left_balance and right_balance and abs(left_height - right_height) <= 1\n        \n        height = max(left_height, right_height) + 1\n        \n        return [balance, height]\n\n    return dfs(root)[0]\n\n# Test cases\nroot1 = TreeNode(1)\nroot1.left = TreeNode(2)\nroot1.right = TreeNode(3)\n\nroot2 = TreeNode(1)\nroot2.left = TreeNode(2)\nroot2.right = TreeNode(3)\nroot2.left.left = TreeNode(4)\n\nroot3 = TreeNode(1)\nroot3.left = TreeNode(2)\nroot3.left.left = TreeNode(3)\nroot3.left.left.left = TreeNode(4)\n\nprint(is_tree_balanced(root1))   # Output: False\nprint(is_tree_balanced(root2))   # Output: False\nprint(is_tree_balanced(root3))   # Output: True",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def repeat_tuples(tup, n):\n    return tup * n",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lateralsurface_cuboid(length, width, height):\n    return 4 * length * width",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def float_sort(tup):\n    return sorted(tup, key=lambda x: float(x[1]))",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def smallest_missing(arr, start, end):\n    \"\"\"\n    Finds the smallest missing element in a sorted array.\n    \n    Parameters:\n    arr (list of int): The sorted input array.\n    start (int): The starting index for the search.\n    end (int): The ending index for the search.\n    \n    Returns:\n    int: The smallest missing element from 'start' to 'end'.\n    \"\"\"\n    while start <= end:\n        mid = (start + end) // 2\n        if mid == arr[mid]:\n            # If we've hit an element equal to its index, it means\n            # there's no missing element before mid, so move forward.\n            start = mid + 1\n        else:\n            # Otherwise, check if there is any gap after mid.\n            if mid < len(arr) - 1 and arr[mid] != mid:\n                end = mid - 1\n            else:\n                break\n    # After the loop, if start hasn't moved, it means the first element\n    # was our answer but since the list starts at 0, increment start.\n    return start + 1 if start < len(arr) else len(arr)\n\n# Test cases\nprint(smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6))  # Output: 7\nprint(smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6))  # Output: 3\nprint(smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7))  # Output: 0",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\n\ndef heap_assending(arr):\n    # Convert list into a min-heap\n    heapq.heapify(arr)\n    \n    # Extract elements from the heap one by one and append them back to original array\n    for i in range(len(arr)):\n        arr.append(heapq.heappop(arr))\n        \n    return arr",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def permute_string(input_str):\n    def backtrack(path, remain):\n        if not remain:\n            result.append(\"\".join(path))\n        for i in range(len(remain)):\n            backtrack(path + [remain[i]], remain[:i] + remain[i+1:])\n    \n    result = []\n    backtrack([], input_str)\n    return result\n\n# Test cases\nprint(permute_string('ab'))  # Expected output: ['ab', 'ba']\nprint(permute_string('abc'))  # Expected output: ['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nprint(permute_string('abcd'))  # Expected output: ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def round_num(number, multiple):\n    return int(multiple * round(float(number) / multiple))",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_replica(input_tuple):\n    unique_elements = []\n    replacements = ['MSP'] * len(input_tuple)\n    \n    for element in input_tuple:\n        if element not in unique_elements:\n            unique_elements.append(element)\n            replacements[input_tuple.index(element)] = element\n    \n    return tuple(replacements)\n\n# Test cases\nprint(remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))) # Output: (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nprint(remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))) # Output: (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nprint(remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))) # Output: (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def remove_Char(input_str, char_to_remove):\n    # Convert the input string into a list to allow modification\n    input_list = list(input_str)\n    \n    # Remove all occurrences of the specified character\n    for i in range(len(input_list)):\n        if input_list[i] == char_to_remove:\n            del input_list[i]\n    \n    # Join the modified list back into a string and return it\n    result_string = ''.join(input_list)\n    return result_string",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_first(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with the last element moved to the front.\n    \n    :param lst: List of elements\n    :return: A new list with the last element moved to the front\n    \n    Example usage:\n    >>> move_first([1,2,3,4])\n    [4, 1, 2, 3]\n    >>> move_first([0,1,2,3])\n    [3, 0, 1, 2]\n    >>> move_first([9,8,7,1])\n    [1, 9, 8, 7]\n    \"\"\"\n    if not lst: \n        raise ValueError(\"List cannot be empty\")\n    else: \n        return [lst[-1]] + lst[:-1]\n\n# Test cases to verify the correctness of the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    # Calculate the total surface area of the cuboid\n    return 2 * (length*width + length*height + width*height)",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multi_list(n, m):\n    result = []\n    for i in range(n):\n        temp = []\n        for j in range(m):\n            if j < i:\n                temp.append(j)\n            else:\n                temp.append(i * j)\n        result.append(temp)\n    return result",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(data, idx):\n    return sorted(data, key=lambda x: x[idx])",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rotation_count(nums):\n    left = 0\n    right = len(nums) - 1\n    \n    while left <= right:\n        if nums[left] <= nums[right]:\n            return left\n        \n        mid = (left + right) // 2\n        next_mid = (mid + 1) % len(nums)\n        \n        if nums[mid] <= nums[next_mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    \"\"\"\n    Toggles all odd bits of the given integer.\n    \n    Args:\n        n (int): The integer whose odd bits will be toggled.\n        \n    Returns:\n        int: An integer with all odd bits toggled from the original number.\n    \"\"\"\n    # Using bitwise operators to toggle odd bits\n    return ((n & 1) ^ 1) << 1 | (n >> 1)\n\n# Test cases\nprint(even_bit_toggle_number(10))  # Expected output: 15\nprint(even_bit_toggle_number(20))  # Expected output: 1\nprint(even_bit_toggle_number(30))  # Expected output: 11",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_Of_Smallest(n,arr):\n    # Find the smallest number in the array\n    min_val = min(arr)\n    \n    # Initialize a counter for the smallest value\n    freq_of_min = arr.count(min_val)\n    \n    # Return the count of occurrences of the smallest value\n    return freq_of_min",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def get_perrin(n):\n    # Base case for first and second Pern numbers\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 2\n    else:\n        # Recursive call to get the previous two Pern numbers\n        prev_n_minus_2 = get_perrin(n - 2)\n        prev_n_minus_1 = get_perrin(n - 1)\n        \n        # Calculate the current Pern number as sum of previous two Pern numbers\n        current_n = prev_n_minus_2 + prev_n_minus_1\n        \n        return current_n\n\n# Function to check the correctness of the solution with provided test cases\ndef check_solution():\n    assert get_perrin(9) == 12, \"Test case 1 failed\"\n    assert get_perrin(4) == 2, \"Test case 2 failed\"\n    assert get_perrin(6) == 5, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def swap_count(s):\n    # Initialize variables to keep track of balance and number of swaps needed\n    bal = 0\n    count = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # If the current character is an opening bracket, increment the balance\n        if s[i] == '[':\n            bal += 1\n        else:\n            # If the balance goes negative, start counting swaps\n            if bal < 0:\n                count += 1\n                bal += 1\n            bal -= 1\n    \n    # Add one more swap if there's at least one closing bracket left unpaired\n    if bal > 0:\n        count += 1\n    \n    return count",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_or_odd(hex_number):\n    # Convert the hex number to an integer and then to its string representation\n    decimal_value = int(hex_number, 16)\n    if decimal_value % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n\n# Test cases\nprint(even_or_odd(\"AB3454D\"))  # Expected output: \"Odd\"\nprint(even_or_odd(\"ABC\"))      # Expected output: \"Even\"\nprint(even_or_odd(\"AAD\"))      # Expected output: \"Odd\"",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the largest power of 2 which is less than or equal to n.\n    \n    Parameters:\n    n (int): A positive integer\n    \n    Returns:\n    int: The largest power of 2 less than or equal to n.\n    \"\"\"\n    # Initialize result with 1 as powers of two start from 2^0 = 1\n    res = 1\n    \n    # Loop until res becomes greater than n\n    while res <= n:\n        res *= 2  # Multiply res by 2 to get next power of 2\n    \n    return res // 2  # Return the previous power of 2\n\n# Test Cases\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_string(lst, str_):\n    return [str_.format(item) for item in lst]",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def convert_list_dictionary(list_keys, list_values, dict_data):\n    # Initialize an empty dictionary to hold the result\n    result = {}\n    \n    # Iterate over each key-value pair and its corresponding data\n    for i in range(len(list_keys)):\n        # Create a new dictionary for the current element if it doesn't exist yet\n        if list_keys[i] not in result:\n            result[list_keys[i]] = {}\n        \n        # Store the value of the current element in the nested dictionary\n        result[list_keys[i]][list_values[i]] = dict_data[i]\n    \n    return result\n\n# Test cases\nprint(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],\n                             [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"],\n                             [85, 98, 89, 92]))",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded"
    ],
    "generated_code": "import math\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef get_max_sum(n):\n    \"\"\"\n    Calculate the maximum sum of values for 'n' such that f(n) = max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n).\n    \n    Parameters:\n    n (int): The number to calculate the maximum sum for.\n    \n    Returns:\n    int: The maximum sum value for the given 'n'.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n < 5:\n        return n\n    else:\n        max_val = -math.inf\n        for i in range(2, n+1):\n            if n % i == 0:\n                temp_val = get_max_sum(i) + get_max_sum(n//i)\n                if temp_val > max_val:\n                    max_val = temp_val\n        return max_val\n\n# Check function with provided data points\nprint(get_max_sum(60))  # Expected output: 106\nprint(get_max_sum(10))  # Expected output: 12\nprint(get_max_sum(2))   # Expected output: 2",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length_list(lst_of_lists):\n    return max((len(sublist), sublist) for sublist in lst_of_lists)[1]\n\n# Test cases\nprint(max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: [13, 15, 17]\nprint(max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]))     # Expected output: [1, 2, 3, 4, 5]\nprint(max_length_list([[3,4,5],[6,7,8,9],[10,11,12]]))                # Expected output: [6, 7, 8, 9]",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(test_tuple):\n    # Convert the tuple into a set and compare its length with the original tuple's length.\n    # If they are different, it means there were duplicates in the original tuple,\n    # so the function returns False; otherwise, it returns True.\n    return len(set(test_tuple)) == len(test_tuple)",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import re\n\ndef check_char(text):\n    \"\"\"\n    Check if the given string starts and ends with the same character.\n    \n    Args:\n        text (str): The input string to check.\n        \n    Returns:\n        str: 'Valid' if the string starts and ends with the same character, otherwise 'Invalid'.\n    \"\"\"\n    # Regular expression pattern to match strings starting and ending with the same character\n    pattern = r\"^(.).*\\1$\"\n    return \"Valid\" if re.match(pattern, text) else \"Invalid\"\n\n# Test cases to verify the correctness of the function\nassert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_numbers(num1, num2, num3):\n    # Arrange the numbers in ascending order\n    nums = sorted([num1, num2, num3])\n    # Calculate the median as the middle number in the ordered list\n    return float(nums[1])",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_of_digits(numbers):\n    total_sum = 0\n    for num in numbers:\n        if isinstance(num, int): \n            total_sum += sum(int(digit) for digit in str(abs(num)))\n        elif isinstance(num, list):\n            for item in num:\n                if isinstance(item, int):\n                    total_sum += sum(int(digit) for digit in str(abs(item)))\n    return total_sum\n\n# Test cases\nprint(sum_of_digits([10,2,56])) # Expected output: 14\nprint(sum_of_digits([[10,20,4,5,'b',70,'a']])) # Expected output: 19\nprint(sum_of_digits([10,20,-4,5,-70])) # Expected output: 19",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def bitwise_xor(tup1, tup2):\n    # Perform bitwise XOR on corresponding elements of two tuples and return as new tuple\n    result = tuple(a ^ b for a, b in zip(tup1, tup2))\n    return result\n\n# Test cases\nprint(bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)))  # Expected output: (15, 6, 5, 10)\nprint(bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)))  # Expected output: (13, 6, 3, 14)\nprint(bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)))  # Expected output: (11, 2, 13, 13)",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def extract_freq(tuples_list):\n    # Convert each tuple into a string for easy comparison and then use a dictionary to count occurrences\n    tuple_strings = [str(tuple) for tuple in tuples_list]\n    \n    # Use collections.Counter to count unique elements and their frequencies\n    from collections import Counter\n    freq_dict = dict(Counter(tuple_strings))\n    \n    # Return the total frequency of unique tuples\n    return len(freq_dict)\n\n# Test cases to verify the correctness of the function\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)]) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)]) == 4",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_nested_tuples(tuple1, tuple2):\n    # Initialize an empty list to store the result\n    result = []\n    for i in range(len(tuple1)):\n        # Add corresponding elements from tuple1 and tuple2\n        result.append((tuple1[i][0] + tuple2[i][0], tuple1[i][1] + tuple2[i][1]))\n    return tuple(result)\n\n# Test cases to verify the correctness of the function\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ncr_modp(n, k, p):\n    def factorial_mod(a, mod):\n        if a <= 1:\n            return 1 % mod\n        res = 1\n        for i in range(2, a + 1):\n            res = (res * i) % mod\n        return res\n    \n    fact_n = factorial_mod(n, p)\n    fact_k = factorial_mod(k, p)\n    fact_nk = factorial_mod(n - k, p)\n    \n    result = (fact_n * pow(fact_k, p - 2, p)) % p\n    return result * pow(fact_nk, p - 2, p) % p",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - re.error: missing ), unterminated subpattern at position 16"
    ],
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    # Regular expression pattern for validating a URL\n    pattern = r'^(http|ftp)s?://((([A-Z0-9]([A-Z0-9-]{0,61}[A-Z0-9])?\\.)+([A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|localhost|\\d{1,3}(\\.\\d{1,3}){3})(:\\d+)?(/?|[/?]\\S+)$'\n    \n    # Using the regular expression to validate the URL\n    if re.match(pattern, url):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_valid_URL(\"https://www.google.com\"))   # Output: True\nprint(is_valid_URL(\"https:/www.gmail.com\"))     # Output: False\nprint(is_valid_URL(\"https:// www.redit.com\"))  # Output: False",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(x, y):\n    if x < y:\n        return x\n    else:\n        return y",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_tuplex' is not defined",
      "Test 2: FAIL - name 'check_tuplex' is not defined",
      "Test 3: FAIL - name 'check_tuplex' is not defined"
    ],
    "generated_code": "def check_tuple(tup, elem):\n    return elem in tup",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(n):\n    \"\"\"\n    This function takes an integer n and returns 'Even Parity' if n is even,\n    and 'Odd Parity' if n is odd.\n    \n    :param n: Integer to check for parity\n    :return: String indicating even or odd parity\n    \"\"\"\n    # Your code goes here\n    \n    # Function logic\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Test Cases\nassert find_Parity(12) == \"Even Parity\", \"Test case 1 failed\"\nassert find_Parity(7) == \"Odd Parity\", \"Test case 2 failed\"\nassert find_Parity(10) == \"Even Parity\", \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rearrange_bigger(num):\n    \"\"\"\n    Rearranges the digits of num into the smallest possible value greater than num.\n    \n    Parameters:\n    num (int): The original number\n    \n    Returns:\n    int: The next biggest number formed by the digits of num if it exists,\n         otherwise returns False indicating no such number can be found.\n    \"\"\"\n    digits = [int(d) for d in str(num)]\n    sorted_digits = sorted(digits)\n    i = len(sorted_digits) - 1\n    \n    while i >= 0 and sorted_digits[i] <= sorted_digits[i-1]:\n        i -= 1\n    \n    if i < 0:\n        return False\n    \n    j = len(sorted_digits) - 1\n    while sorted_digits[j] == sorted_digits[i-1]:\n        j -= 1\n        \n    sorted_digits[i-1], sorted_digits[j] = sorted_digits[j], sorted_digits[i-1]\n    \n    result = int(''.join(str(digit) for digit in sorted_digits))\n    \n    return result\n\n# Check function with provided data points\nprint(rearrange_bigger(12))   # Expected output: 21\nprint(rearrange_bigger(10))   # Expected output: False\nprint(rearrange_bigger(102))  # Expected output: 120",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    res = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(res) == k:\n                break\n            res.append([nums1[i], nums2[j]])\n    return res",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_product_tuple(tuples_list):\n    # Calculate the product for each pair and return the minimum value\n    return min([x * y for x, y in tuples_list])\n\n# Example usage:\nprint(min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 8\nprint(min_product_tuple([(10, 20), (15, 2), (5, 10)]))      # Output: 30\nprint(min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]))  # Output: 100",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def min_val(lst):\n    return min(lst)\n\n# Test cases\nprint(min_val(['Python', 3, 2, 4, 5, 'version'])) # Expected output: 2\nprint(min_val(['Python', 15, 20, 25])) # Expected output: 15\nprint(min_val(['Python', 30, 20, 40, 50, 'version'])) # Expected output: 20",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    # Split the string at underscores and capitalize each word except for the first one.\n    return ''.join(word.capitalize() or '_' for word in snake_str.split('_'))\n\n# Test cases\nprint(snake_to_camel('android_tv'))  # Expected output: AndroidTv\nprint(snake_to_camel('google_pixel'))  # Expected output: GooglePixel\nprint(snake_to_camel('apple_watch'))  # Expected output: AppleWatch",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(nums):\n    # Use list comprehension to filter out odd numbers and create a new list\n    return [num for num in nums if num % 2 == 0]\n\n# Test cases to verify the correctness of the solution\nassert remove_odd([1,2,3]) == [2], \"Test case 1 failed\"\nassert remove_odd([2,4,6]) == [2,4,6], \"Test case 2 failed\"\nassert remove_odd([10,20,3]) == [10,20], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_nth_element(tuples_list, n):\n    return [x[n] for x in tuples_list]",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(sequence1, sequence2):\n    # Convert both sequences to sets for efficient comparison\n    set_sequence1 = set(sequence1)\n    set_sequence2 = set(sequence2)\n\n    # Check if there is any common element between the two sets\n    return bool(set_sequence1 & set_sequence2)",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    max_product = float('-inf')\n    second_max_product = float('-inf')\n    \n    for num in arr:\n        if num > max_product:\n            second_max_product = max_product\n            max_product = num\n        elif num > second_max_product and num != max_product:\n            second_max_product = num\n    \n    return (max_product, second_max_product)\n\n# Test cases\nprint(max_Product([1,2,3,4,7,0,8,4])) # Expected output: (7, 8)\nprint(max_Product([-1,-2,-3,-4,5,6,7])) # Expected output: (-3, -1)\nprint(max_Product([1,2,3])) # Expected output: (2, 3)",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def breakSum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Calculate sums recursively for each part of the number\n        s = max(breakSum(n // 5), breakSum(n // 2)) + n % 5 + n % 2\n        return s",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def group_tuples(tuples_list):\n    # Sort each tuple by its elements and create a dictionary where key is sorted tuple and value is original tuple\n    grouped_tuples = {tuple(sorted(item)): item for item in tuples_list}\n    \n    # Initialize an empty list to store result tuples\n    result = []\n    \n    # Iterate over each tuple in the input list\n    for tup in tuples_list:\n        # If current tuple's sorted elements already exist as keys in our grouped tuples dict,\n        # we need to add another tuple with the same sorted elements from the original list.\n        if all(element in grouped_tuples.keys() for element in sorted(tup)):\n            result.append(tuple(grouped_tuples[sorted(tup)]))\n            \n    return result\n\n# Test cases\nprint(group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]))  # Should print: [('x', 'y', 'z'), ('w', 't')]\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]))  # Should print: [('a', 'b', 'c'), ('d', 'e')]\nprint(group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]))  # Should print: [('f', 'g', 'g'), ('h', 'i')])",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max' is not defined",
      "Test 2: FAIL - name 'Find_Max' is not defined",
      "Test 3: FAIL - name 'Find_Max' is not defined"
    ],
    "generated_code": "def find_max(lst):\n    if not lst:\n        return []\n    \n    max_length = 0\n    result = []\n    for sub_list in lst:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n            result = list(sub_list)\n        elif len(sub_list) == max_length and sub_list < result:\n            continue\n        else:\n            break\n    \n    return result\n\n# Test cases\nprint(find_max([['A'], ['A', 'B'], ['A', 'B', 'C']]))  # Should return ['A', 'B', 'C']\nprint(find_max([[1], [1, 2], [1, 2, 3]]))  # Should return [1, 2, 3]\nprint(find_max([[1, 1], [1, 2, 3], [1, 5, 6, 1]]))  # Should return [1, 5, 6, 1]",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef round_and_sum(numbers: List[float]) -> int:\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)\n\n# Test cases\nprint(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])) # Expected output: 243\nprint(round_and_sum([5,2,9,24.3,29])) # Expected output: 345\nprint(round_and_sum([25.0,56.7,89.2])) # Expected output: 513",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cube_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        number = 2 * i\n        current_cube = number ** 3\n        total_sum += current_cube\n    return total_sum",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def concatenate_tuple(test_list):\n    # Initialize an empty string to hold the concatenated result\n    concat_str = \"\"\n    \n    # Iterate through each item in the input list and append it to the concatenation string with a dash '-' as a delimiter\n    for i in test_list:\n        if type(i) == int:\n            concat_str += str(i)\n        else:\n            concat_str += \"-\" + str(i)\n    \n    # Return the final concatenated string\n    return concat_str\n\n# Test cases to verify the correctness of the function\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\")) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\")) == 'ZEN-is-4-OP'\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\n    # Calculate sum of cubes using arithmetic series formula for the first n natural numbers\n    total_cubes = int((n * (n + 1) / 2)**2)\n    # Calculate average\n    avg_cubes = total_cubes / n\n    return avg_cubes",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_maxgold(minefield, rows, cols):\n    dp = [[-1 for _ in range(cols)] for _ in range(rows)]\n    return max_col_gold(minefield, rows, cols, dp)\n\ndef max_col_gold(minefield, rows, cols, dp):\n    if dp[0][0] != -1:\n        return dp[0][0]\n    \n    dp[0][0] = minefield[0][0]\n    for j in range(1, cols):\n        dp[0][j] = max(dp[0][j-1], dp[0][j]) + minefield[0][j]\n    for i in range(1, rows):\n        dp[i][0] = max(dp[i-1][0], dp[i][0]) + minefield[i][0]\n    \n    for i in range(1, rows):\n        for j in range(1, cols):\n            up, left = dp[i-1][j], dp[i][j-1]\n            curr_cell = minefield[i][j]\n            if up > left:\n                dp[i][j] = up + curr_cell\n            else:\n                dp[i][j] = left + curr_cell\n    \n    return dp[-1][-1]\n\n# Test cases\nprint(get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)) # Expected output: 16\nprint(get_maxgold([[10,20],[30,40]],2,2)) # Expected output: 70\nprint(get_maxgold([[4,9],[3,7]],2,2)) # Expected output: 13",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_rear(tup):\n    # Extracting and reversing tuples elements except first one\n    reversed_tups = [x[1:] for x in tup]\n    # Joining the list with spaces\n    result = \" \".join(reversed_tups)\n    return result.split()\n\n# Test cases\nprint(extract_rear(('Mers', 'for', 'Vers')))  # Should return ['s', 'r', 's']\nprint(extract_rear(('Avenge', 'for', 'People')))  # Should return ['e', 'r', 'e']\nprint(extract_rear(('Gotta', 'get', 'go')))  # Should return ['a', 't', 'o']",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_in_list(lst, element):\n    return sum(1 for sublist in lst if element in sublist)",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef change_date_format(date_string):\n    # Use regular expression to match and replace characters in the input string\n    formatted_date = re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', r'\\3-\\2-\\1', date_string)\n    return formatted_date\n\n# Test cases\nprint(change_date_format(\"2026-01-02\"))  # Expected output: '02-01-2026'\nprint(change_date_format(\"2020-11-13\"))  # Expected output: '13-11-2020'\nprint(change_date_format(\"2021-04-26\"))  # Expected output: '26-04-2021'",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            arr[j] = temp\n        gap //= 2\n    return arr",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def and_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        if i < len(tup2):\n            result.append(tup1[i] & tup2[i])\n        else:\n            result.append(0)\n    return tuple(result)\n\n# Test cases\nprint(and_tuples((10, 4, 6, 9), (5, 2, 3, 3)))  # Expected output: (0, 0, 2, 1)\nprint(and_tuples((1, 2, 3, 4), (5, 6, 7, 8)))   # Expected output: (1, 2, 3, 0)\nprint(and_tuples((8, 9, 11, 12), (7, 13, 14, 17)))  # Expected output: (0, 9, 10, 0)",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_directrix(a,b,c):\n    # Calculate the value of c using the formula derived from the properties of a parabola\n    c_value = -a * b**2 / (4*a + b)\n    \n    # Return the calculated value as the result\n    return int(c_value)\n\n# Test cases\nprint(parabola_directrix(5,3,2))  # Expected output: -198\nprint(parabola_directrix(9,8,4))  # Expected output: -2336\nprint(parabola_directrix(2,4,6))  # Expected output: -130",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_element(list1, list2):\n    # Check for common elements between two lists\n    return bool(set(list1) & set(list2))",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def median_trapezium(a, b, c):\n    return (a + b) / 2 if c == 0 else (a + b + 2 * c) / 3",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(arr, num):\n    if arr[0] > num:\n        return 'Yes, entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n\n# Test cases\nprint(check_greater([1, 2, 3, 4, 5], 4))  # Expected output: \"No, entered number is less than those in the array\"\nprint(check_greater([2, 3, 4, 5, 6], 8))  # Expected output: \"Yes, the entered number is greater than those in the array\"\nprint(check_greater([9, 7, 4, 8, 6, 1], 11))  # Expected output: \"Yes, the entered number is greater than those in the array\"",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_one(text):\n    pattern = r\"ab+?\"\n    if bool(re.match(pattern, text)):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def last_Digit(n):\n    # Return the last digit of n\n    return str(n)[-1]",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_nos(lst):\n    # Use list comprehension to filter out negative numbers and then convert it back into a list\n    result = [i for i in lst if i < 0]\n    \n    # Return the filtered list of negative numbers\n    return result",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(s):\n    # Initialize an empty list to store even-indexed characters\n    result = []\n    \n    # Iterate over the string with index and character pair\n    for i, c in enumerate(s):\n        # If the index is even, append the character to the result list\n        if i % 2 == 0:\n            result.append(c)\n    \n    # Join the list of characters into a string and return it\n    return ''.join(result)\n\n# Test cases\nprint(remove_odd(\"python\"))  # Expected output: \"yhn\"\nprint(remove_odd(\"program\"))  # Expected output: \"rga\"\nprint(remove_odd(\"language\"))  # Expected output: \"agae\"",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_bidirectional(pairs):\n    pair_count = {}\n    \n    for first, second in pairs:\n        # Create reversed pairs\n        reversed_first = second if first == second else first\n        reversed_second = first if first == second else second\n        \n        # Count occurrences of each pair and their reverses\n        pair_count[first] = pair_count.get(first, 0) + 1\n        pair_count[reversed_first] = pair_count.get(reversed_first, 0) + 1\n        pair_count[second] = pair_count.get(second, 0) + 1\n        pair_count[reversed_second] = pair_count.get(reversed_second, 0) + 1\n    \n    total_pairs = sum(count // 2 for count in pair_count.values())\n    return str(total_pairs)\n\n# Test cases\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])) # Output: \"3\"\nprint(count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])) # Output: \"2\"\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])) # Output: \"4\"",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(nums):\n    # Convert each number in the list to string and concatenate them together.\n    return int(''.join(map(str, nums)))",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import re\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    This function takes a sentence as input and returns a list of tuples.\n    Each tuple contains an index of the adverb and its corresponding word.\n    \n    :param sentence: str - The sentence to analyze.\n    :return: List[Tuple[int, str]] - A list of tuples where each tuple consists of an index of the adverb and the word itself.\n    \"\"\"\n    adverbs = ['clearly', 'seriously', 'fortunately']\n    matches = []\n    for i, word in enumerate(sentence.split()):\n        if word.lower() in [adverb.lower() for adverb in adverbs]:\n            matches.append((i, word))\n    return matches\n\n# Test cases to verify the correctness of the function\nassert find_adverb_position(\"clearly!! we can see the sky\") == [(0, \"clearly\"), (7, \"sky\")]\nassert find_adverb_position(\"seriously!! there are many roses\") == [(0, \"seriously\"), (9, \"roses\")]\nassert find_adverb_position(\"unfortunately!! sita is going to home\") == [(0, \"unfortunately\"), (13, \"home\")]\n\nprint(find_adverb_position(\"unfortunately!! sita is going to home\")) # Expected output: [(0, \"unfortunately\"), (13, \"home\")]",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(side_length):\n    \"\"\"\n    Calculate the surface area of a cube.\n    \n    Args:\n        side_length (int): The length of each side of the cube.\n        \n    Returns:\n        int: The total surface area of the cube.\n    \"\"\"\n    return 6 * (side_length ** 2)",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def positive_count(arr):\n    return sum(1 for num in arr if num > 0) / len(arr)",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_neg(nums):\n    # Filter out positive numbers and find the maximum of the remaining numbers\n    return max(filter(lambda x: x < 0, nums))\n\n# Test cases\nprint(largest_neg([1,2,3,-4,-6]))  # Output: -6\nprint(largest_neg([1,2,3,-8,-9]))  # Output: -9\nprint(largest_neg([1,2,3,4,-1]))   # Output: -1",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def trim_tuple(tuple_list, k):\n    # Trim each tuple by k and create a new list with trimmed tuples\n    return [(x[:k], x[k:]) for x in tuple_list]",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def index_multiplication(t1, t2):\n    result = [(a*b for a, b in zip(sublist1, sublist2)) for sublist1, sublist2 in zip(t1, t2)]\n    return tuple(result)\n\n# Test Cases\nprint(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))) # Output: ((6, 21), (12, 45), (2, 9), (7, 30))\nprint(index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))) # Output: ((14, 32), (20, 60), (6, 20), (16, 44))\nprint(index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))) # Output: ((24, 45), (30, 77), (12, 33), (27, 60))",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Occurrence(lst, tple):\n    # Initialize a dictionary to keep track of element counts\n    counter = {}\n    \n    # Count occurrences of each element in the tuple\n    for item in tple:\n        if item in counter:\n            counter[item] += 1\n        else:\n            counter[item] = 1\n    \n    # Check each element in the list against the tuple and update the count accordingly\n    result = {item: lst.count(item) for item in lst if item in counter}\n    \n    return result\n\n# Test cases\nprint(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']))  # Expected output: {'a': 3, 'c': 1, 'b': 1}\nprint(count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]))  # Expected output: {'1': 6, '4': 2, '7': 1}\nprint(count_Occurrence((1,2,3,4,5,6),[1,2]))  # Expected output: {1: 2, 2: 2}",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "cube_nums = lambda nums: [x**3 for x in nums]\n\n# Test cases\nprint(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Should print: [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nprint(cube_nums([10,20,30])) # Should print: [1000, 8000, 27000]\nprint(cube_nums([12,15])) # Should print: [1728, 3375]",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_sum(n):\n    # Initialize the first two Perrin numbers\n    a = b = c = 3\n    \n    # If n is less than or equal to 2, return the sum directly\n    if n <= 2:\n        return a + b + c - n\n    \n    # Calculate the sum of the first n Perrin numbers\n    result = 0\n    for i in range(3, n+1):\n        temp = a + b\n        a = b\n        b = c\n        c = temp\n        result += temp\n        \n    return result",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the lengths of the sides of the triangle using the distance formula\n    side1 = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    side2 = ((x3 - x2)**2 + (y3 - y2)**2)**0.5\n    side3 = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    \n    # Check for collinearity and equality of sides\n    if abs(side1 - side2) < 0.0001 and abs(side2 - side3) < 0.0001:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(check_Triangle(1,5,2,5,4,6))  # Expected output: Yes\nprint(check_Triangle(1,1,1,4,1,5))  # Expected output: No\nprint(check_Triangle(1,1,1,1,1,1))  # Expected output: No",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_string(string_list, size):\n    result = [s[-size:] for s in string_list if len(s) >= size]\n    return result\n\n# Test Cases\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)) # Output: ['practice', 'solution']\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6)) # Output: ['Python']\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9)) # Output: ['exercises']",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_whitespaces(s):\n    \"\"\"\n    Removes all whitespace characters from the input string.\n    \n    Parameters:\n    s (str): The input string containing whitespace characters\n    \n    Returns:\n    str: A new string with all whitespace removed.\n    \"\"\"\n    # Use regular expression to replace one or more whitespace characters (\\s+) with an empty string\n    no_whitespace_string = re.sub(r'\\s+', '', s)\n    return no_whitespace_string",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def loss_amount(amount_given, actual_value):\n    \"\"\"\n    Returns the loss amount if the 'amount_given' is less than 'actual_value', otherwise returns None.\n    \n    Parameters:\n        amount_given (int): The given amount for comparison.\n        actual_value (int): The actual value to compare against the 'amount_given'.\n        \n    Returns:\n        int | None: The loss amount if 'amount_given' < 'actual_value', otherwise None.\n    \"\"\"\n    return amount_given - actual_value if amount_given < actual_value else None",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sumofFactors(num):\n    \"\"\"\n    Find and return the sum of all even factors of a given number.\n    \n    Args:\n    num (int): The input number\n    \n    Returns:\n    int: Sum of all even factors of the input number\n    \"\"\"\n    total = 0\n    for i in range(2, num + 1, 2):  # Start from 2 and increment by 2 to check only even numbers\n        if num % i == 0:\n            total += i\n    return total",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_wordz(text):\n    # Check if the text contains exactly one lowercase letter 'z' surrounded by word boundaries\n    pattern = r'\\b[za-z]z[za-z]\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumb_number(month_num):\n    # Assuming February has 28/29 days and all other months have either 30 or 31 days\n    if month_num == 2:\n        return False  # February typically has 28 days, so it doesn't meet the condition\n    \n    # Checking for months with 31 days\n    month_days = [31] + [j * 28 for j in range(3)]\n    \n    return True if month_num in month_days else False\n\n# Test cases\nprint(check_monthnumb_number(5))  # Should output True\nprint(check_monthnumb_number(2))  # Should output False\nprint(check_monthnumb_number(6))  # Should output False",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min' is not defined",
      "Test 2: FAIL - name 'Find_Min' is not defined",
      "Test 3: FAIL - name 'Find_Min' is not defined"
    ],
    "generated_code": "def find_min(lst):\n    min_len = len(min(lst, key=len))\n    for sub in lst:\n        if len(sub) == min_len:\n            return sub",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length, width):\n    return length * width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_uppercase(input_string):\n    # Use regular expression to find and replace all uppercase letters with an empty string\n    result = re.sub(r'[A-Z]', '', input_string)\n    return result",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lists):\n    result = []\n    for lst in lists:\n        if isinstance(lst, list):  # Check if it's a list (not an array)\n            result.append(lst[0])\n    return result\n\n# Test cases\nprint(extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))  # Output: [1, 3, 6]\nprint(extract([[1,2,3],[4, 5]]))                  # Output: [1, 4]\nprint(extract([[9,8,1],[1,2]]))                   # Output: [9, 1]",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(s):\n    # Initialize counter for uppercase letters\n    uppers = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char >= 'A' and char <= 'Z':\n            uppers += 1\n            \n    # Return the total number of uppercase letters found\n    return uppers",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def combinations_list(lst):\n    if not lst:\n        return [[]]\n    else:\n        first_element = lst[0]\n        rest_combinations = combinations_list(lst[1:])\n        return [[first_element] + combination for combination in rest_combinations] + rest_combinations",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_subarray_product(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    \n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n    \n    for i in range(1, n):\n        if nums[i] > 0:\n            dp[i] = max(dp[i-1] * nums[i], nums[i])\n        else:\n            dp[i] = min(dp[i-1] * nums[i], nums[i])\n    \n    return max(dp)\n\n# Test cases\nprint(max_subarray_product([1, -2, -3, 0, 7, -8, -2]))  # Expected output: 112\nprint(max_subarray_product([6, -3, -10, 0, 2]))  # Expected output: 180\nprint(max_subarray_product([-2, -40, 0, -2, -3]))  # Expected output: 80",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 10",
      "Test 2: FAIL - 12",
      "Test 3: FAIL - 5"
    ],
    "generated_code": "def check_value(dict_data, target_value):\n    # Check if all values in the dictionary are equal to the target value\n    return len(set(dict_data.values())) == 1 and dict_data[target_value] != target_value",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(input_dict):\n    # Remove keys with values of None from the dictionary\n    return {k: v for k, v in input_dict.items() if v is not None}",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_peak(arr, n): \n    low = 0\n    high = n - 1\n  \n    while low < high: \n        mid = int((low + high) / 2) \n          \n        # Check if mid is peak \n        if ((mid == 0 or arr[mid-1] <= arr[mid]) and \n            (mid == n - 1 or arr[mid+1] <= arr[mid])): \n            return arr[mid] \n  \n        # If the left neighbor is greater, then there must be a peak element on the left half \n        elif mid > 0 and arr[mid-1] > arr[mid]: \n            high = mid - 1\n      \n        # If the right neighbor is greater, then there must be a peak element on the right half \n        else: \n            low = mid + 1\n  \n    return arr[high]",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_Octal(decimal_num):\n    # Convert decimal to Octal\n    octal_num = oct(decimal_num)[2:]  # Remove the '0o' prefix\n    return int(octal_num)\n\n# Test cases\nprint(decimal_to_Octal(10))   # Expected output: 12\nprint(decimal_to_Octal(2))    # Expected output: 2\nprint(decimal_to_Octal(33))   # Expected output: 41",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_product(nums, length):\n    dp_max = [nums[0]] * len(nums)\n    dp_min = [nums[0]] * len(nums)\n    \n    for i in range(1, length):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp_max[i] = max(dp_max[i], dp_max[j] * nums[i])\n                dp_min[i] = min(dp_min[i], dp_min[j] * nums[i])\n            else:\n                dp_max[i] = max(dp_max[i], dp_min[j] * nums[i])\n                dp_min[i] = min(dp_min[i], dp_max[j] * nums[i])\n                \n    return max(max(dp_max), max(dp_min))",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef max_profit(prices: List[int], k: int) -> int:\n    if not prices or k <= 0:\n        return 0\n    \n    n = len(prices)\n    if n < k + 1:\n        return sum(max(0, prices[i] - prices[i+1]) for i in range(n-1))\n    \n    dp = [[0] * (k + 1) for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(k, 0, -1):\n            diff = 0 if i == 0 else prices[i] - prices[i-1]\n            dp[i][j] = max(diff + dp[i-1][j-1], dp[i-1][j])\n    \n    return dp[-1][-1]\n\n# Test Cases\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)) # Expected output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2)) # Expected output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2)) # Expected output: 2",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not subscriptable",
      "Test 2: FAIL - 'int' object is not subscriptable",
      "Test 3: FAIL - 'int' object is not subscriptable"
    ],
    "generated_code": "def add_pairwise(tuples_list):\n    result = []\n    for tuple in tuples_list:\n        pair_sum = [x + y for x, y in zip(tuple, tuple[1:])]\n        result.extend(pair_sum)\n    return result",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_remainder(arr, n, m):\n    result = 1\n    for num in arr:\n        result *= num\n        if result % m == 0:\n            break\n    return result % m\n\n# Test cases\nprint(find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11)) # Output: 9\nprint(find_remainder([1,1,1],3,1)) # Output: 0\nprint(find_remainder([1,2,1],3,2)) # Output: 0",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def check_Consecutive(lst):\n    \"\"\"\n    Checks if the given list of integers is strictly consecutive.\n    \n    Args:\n        lst (list): The input list of integers.\n        \n    Returns:\n        bool: True if the list is strictly consecutive, False otherwise.\n    \"\"\"\n    return all(x == y + 1 for x, y in zip(lst, lst[1:]))\n\n# Test cases to verify the correctness of the solution\nassert check_Consecutive([1, 2, 3, 4, 5]) == True, \"Test case 1 failed\"\nassert check_Consecutive([1, 2, 3, 5, 6]) == False, \"Test case 2 failed\"\nassert check_Consecutive([1, 2, 1]) == False, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_intersection(tuple_list_1, tuple_list_2):\n    # Use set comprehension to find unique tuples present in both lists\n    result = {tup for tup in tuple_list_1 if tup in tuple_list_2}\n    return result",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(string, char_to_replace, replacement_char):\n    return string.replace(char_to_replace, replacement_char)",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_counter(counter_dict):\n    return sorted(counter_dict.items(), key=lambda x: x[1], reverse=True)\n\n# Test cases\nprint(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))  # [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nprint(sort_counter({'Math':400, 'Physics':300, 'Chemistry':250}))  # [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nprint(sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250}))  # [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\n    # Find the maximum value in the array\n    max_val = max(arr)\n    # Find the minimum value in the array\n    min_val = min(arr)\n    # Return the sum of the maximum and minimum values\n    return max_val + min_val\n\n# Test cases\nprint(big_sum([1,2,3]))  # Output: 4\nprint(big_sum([-1,2,3,4]))  # Output: 3\nprint(big_sum([2,3,6]))  # Output: 8",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_lower(s):\n    \"\"\"\n    This function takes a string 's' as input and returns the lowercase version of the string.\n    \n    Parameters:\n    s (str): The original string\n    \n    Returns:\n    str: The lowercase version of the input string\n    \"\"\"\n    return s.lower()\n\n# Test cases to verify the correctness of the function\nassert is_lower(\"InValid\") == \"invalid\", \"Test case 1 failed\"\nassert is_lower(\"TruE\") == \"true\", \"Test case 2 failed\"\nassert is_lower(\"SenTenCE\") == \"sentence\", \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_lowercase(s):\n    # Initialize an empty result string\n    result = \"\"\n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is uppercase using ASCII value comparison\n        if ord(char) >= 65 and ord(char) <= 90:\n            # Append the character to the result string if it's not already lowercase\n            result += char\n    return result",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(n):\n    # Remove all non-digit characters from the string representation of n\n    digits = ''.join(filter(str.isdigit, str(abs(int(n)))))\n    \n    # Return the first character if the string is not empty, otherwise raise an error\n    return int(digits[0]) if digits else None\n\n# Test cases\nprint(first_Digit(123))  # Expected output: 1\nprint(first_Digit(456))  # Expected output: 4\nprint(first_Digit(12))   # Expected output: 1",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_char = ''\n    max_count = 0\n    for char in char_count:\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n            \n    return max_char",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef is_subset_sum(nums: List[int], target: int, total: int) -> bool:\n    dp = [False] * (total + 1)\n    dp[0] = True\n    \n    for num in nums:\n        for i in range(total, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n                \n    return dp[target]",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef match(string):\n    \"\"\"\n    Returns 'Yes' if there is a sequence of one uppercase letter followed by lowercase letters in the given string,\n    otherwise returns 'No'.\n    \n    Args:\n    string (str): The input string to search through.\n    \n    Returns:\n    str: 'Yes' if a matching pattern is found, 'No' otherwise.\n    \"\"\"\n    # Regular expression pattern to match one uppercase followed by one lowercase\n    pattern = r'[A-Z][a-z]'\n    # Search for the pattern in the string\n    result = re.search(pattern, string)\n    # If a match is found, return 'Yes', else return 'No'\n    return 'Yes' if result else 'No'\n\n# Test cases\nprint(match(\"Geeks\"))  # Expected output: Yes\nprint(match(\"geeksforGeeks\"))  # Expected output: Yes\nprint(match(\"geeks\"))  # Expected output: No",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        if math.factorial(i) % x == 0:\n            return i\n        i += 1",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def remove_matching_tuple(tup1, tup2):\n    # Remove common elements between the two tuples and return the result\n    return tuple(x for x in tup1 if x not in tup2)\n\n# Test cases to verify the correctness of the solution\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def largest_palindrome(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize maxPalindrome as the first element of the sorted array\n    maxPalindrome = arr[0]\n    \n    # Iterate through the array from right to left\n    for i in range(n-1, -1, -1):\n        currentNum = arr[i]\n        \n        # Check if the current number is greater than the palindrome and even\n        if currentNum > maxPalindrome and len(str(currentNum)) % 2 == 0:\n            maxPalindrome = currentNum\n    \n    return maxPalindrome",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the binomial probability P(X=k) with n trials and success probability p.\n    \n    Parameters:\n    - n: Number of trials in the experiment.\n    - k: Number of successful outcomes we're interested in.\n    - p: Probability of success on an individual trial.\n    \n    Returns:\n    The binomial probability mass function value P(X=k).\n    \"\"\"\n    # Binomial coefficient (combinations)\n    combinations = math.comb(n, k)\n    \n    # Calculating binomial probability formula: P(X=k) = C(n,k) * p^k * (1-p)^(n-k)\n    result = combinations * pow(p, k) * pow(1-p, n-k)\n    \n    return round(result, 10)\n\n# Test cases\nprint(binomial_probability(10, 5, 1.0/3)) # Expected output: 0.136564548087\nprint(binomial_probability(11, 6, 2.0/4)) # Expected output: 0.2255859375\nprint(binomial_probability(12, 7, 3.0/5)) # Expected output: 0.227030335488",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuples_list):\n    # Sort the list of tuples based on the second item in each tuple.\n    return sorted(tuples_list, key=lambda x: x[1])\n\n# Test cases\nprint(sort_tuple([(1, 3), (3, 2), (2, 1)]))  # Expected output: [(2, 1), (3, 2), (1, 3)]\nprint(sort_tuple([(2, 4), (3, 3), (1, 1)]))  # Expected output: [(1, 1), (3, 3), (2, 4)]\nprint(sort_tuple([(3, 9), (6, 7), (4, 3)]))  # Expected output: [(4, 3), (6, 7), (3, 9)]",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef area_pentagon(side_length):\n    \"\"\"\n    Calculate the area of a regular pentagon with given side length.\n    \n    Parameters:\n    - side_length: The length of each side of the pentagon\n    \n    Returns:\n    - float: The calculated area of the pentagon\n    \"\"\"\n    # Area formula for a regular pentagon: (sqrt(5*(5+2*sqrt(5))) * s^2) / 4 where s is the side length\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * pow(side_length, 2)) / 4",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Largest(arr):\n    # Find the maximum element in the array\n    max_val = max(arr)\n    \n    # Count how many times the maximum element appears in the array\n    count = arr.count(max_val)\n    \n    return count",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'Set' is not defined. Did you mean: 'set'?"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef extract_symmetric(pairs: List[Tuple[int]]) -> Set[Tuple[int]]:\n    \"\"\"\n    Extracts and returns all symmetric pairs from a given list of tuples.\n    \n    Args:\n    pairs (List[Tuple[int]]): A list of integer tuples representing symmetric pairs.\n    \n    Returns:\n    Set[Tuple[int]]: A set containing all unique symmetric pairs found in the input list.\n    \"\"\"\n    symmetric_pairs = set()\n    for i in range(len(pairs)):\n        for j in range(i + 1, len(pairs)):\n            if pairs[i] == pairs[j][::-1]:\n                symmetric_pairs.add(pairs[i])\n    return symmetric_pairs",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_gp(a, n, r):\n    \"\"\"\n    Calculate the sum of a geometric progression series.\n    \n    Parameters:\n    a (int): The first term of the geometric progression.\n    n (int): The number of terms in the progression.\n    r (int): The common ratio between successive terms.\n    \n    Returns:\n    int: The sum of the geometric progression series.\n    \"\"\"\n    return a * ((1 - pow(r, n)) / (1 - r))\n\n# Test Cases\nassert abs(sum_gp(1, 5, 2) - 31) < 1e-6\nassert abs(sum_gp(1, 5, 4) - 341) < 1e-6\nassert abs(sum_gp(2, 6, 3) - 728) < 1e-6",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'calculate_polygons' is not defined",
      "Test 2: FAIL - name 'calculate_polygons' is not defined",
      "Test 3: FAIL - name 'calculate_polygons' is not defined"
    ],
    "generated_code": "import math\n\ndef calculate_hexagons(x1, y1, dx1, dy1, n):\n    result = []\n    for i in range(n):\n        # Calculate points for one row of hexagons\n        for j in range(n):\n            x = x1 + j * (dy1 / n)\n            y = y1 - i * (dx1 / n)\n            if i % 2 == 0:\n                x += dx1 / n\n            else:\n                y -= dy1 / n\n            result.append([(x, y)])\n    return result\n\n# Test cases\nprint(calculate_hexagons(1,1,4,4,3))\nprint(calculate_hexagons(5,4,7,9,8))\nprint(calculate_hexagons(9,6,4,3,2))",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_to_integer(binary_tuple):\n    # Convert each element of the tuple to an integer and join them together\n    result = int(''.join(str(x) for x in binary_tuple), 2)\n    return str(result)\n\n# Test cases\nprint(binary_to_integer((1, 1, 0, 1, 0, 0, 1)))  # Output: \"105\"\nprint(binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)))  # Output: \"101\"\nprint(binary_to_integer((1, 1, 0, 1, 0, 1)))  # Output: \"53\"",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(input_string):\n    # Use regex to find and replace lowercase letters with an empty string\n    result = re.sub('[a-z]', '', input_string)\n    return result\n\n# Test cases\nprint(remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf'))  # Expected output: 'KDALOOOHLAJSI'\nprint(remove_lowercase('ProducTnamEstreAmIngMediAplAYer'))  # Expected output: 'PTEAIMAAY'\nprint(remove_lowercase('maNufacTuredbYSheZenTechNolOGIes'))  # Expected output: 'NTYSZTNOGI'",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from heapq import nlargest\n\ndef heap_queue_smallest(nums, k):\n    \"\"\"\n    Finds and returns the k smallest integers in the given list 'nums' using heap queue algorithm.\n    \n    :param nums: List[int] - A list of integers.\n    :param k: int - Number of smallest elements to return.\n    :return: List[int] - The k smallest integers in 'nums'.\n    \"\"\"\n    return nlargest(k, nums)[:k]\n\n# Test cases\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3))  # Output: [14, 22, 25]\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2))   # Output: [14, 22]\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5))  # Output: [14, 22, 22, 25, 35]",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef surfacearea_cone(radius, height):\n    \"\"\"\n    Calculates the surface area of a cone.\n    \n    Parameters:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n    \n    Returns:\n    float: The surface area of the cone rounded to four decimal places.\n    \"\"\"\n    slant_height = math.sqrt(height**2 + radius**2)\n    base_area = math.pi * radius**2\n    lateral_surface_area = math.pi * radius * slant_height\n    total_surface_area = base_area + lateral_surface_area\n    \n    return round(total_surface_area, 4)\n\n# Test Cases\nassert surfacearea_cone(5, 12) == 282.7433\nassert surfacearea_cone(10, 15) == 880.5179\nassert surfacearea_cone(19, 17) == 2655.9240",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def gcd(a, b):\n    while(b != 0):\n        t = b\n        b = a % b\n        a = t\n    return a",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef diameter_circle(radius):\n    # The formula to calculate the diameter from radius is 2 * radius\n    return 2 * radius\n\n# Test Cases\nassert diameter_circle(10) == 20\nassert diameter_circle(40) == 80\nassert diameter_circle(15) == 30",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(elements):\n    # Joining all elements in the list with spaces and adding extra space between each element\n    result = \" \".join(elements)\n    return result",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def num_comm_div(a, b):\n    \"\"\"\n    This function takes two positive integers as input and returns their greatest common divisor.\n    \n    :param a: First integer number\n    :param b: Second integer number\n    :return: The greatest common divisor of a and b\n    \"\"\"\n    # Ensure a is always the smaller number\n    if a > b:\n        a, b = b, a\n    \n    # Use Euclidean algorithm to find GCD\n    while a != 0:\n        temp = a\n        a = b % a\n        b = temp\n    \n    return b\n\n# Check function with provided data points\nassert num_comm_div(2, 4) == 2\nassert num_comm_div(2, 8) == 2\nassert num_comm_div(12, 24) == 6\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(a, b):\n    return a % b",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_consecutive_nums(nums):\n    \"\"\"\n    Returns a new list containing the sum of each pair of consecutive elements from the input list nums.\n    \n    Args:\n    nums (list): A list of integers.\n    \n    Returns:\n    list: A list where each element is the sum of two consecutive elements from the input list.\n    \"\"\"\n    return [nums[i] + nums[i+1] for i in range(len(nums)-1)]\n\n# Check function with provided data points\nprint(add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7]))  # Expected output: [2, 4, 7, 8, 9, 11, 13]\nprint(add_consecutive_nums([4, 5, 8, 9, 6, 10]))       # Expected output: [9, 13, 17, 15, 16]\nprint(add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Expected output: [3, 5, 7, 9, 11, 13, 15, 17, 19]",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Series' is not defined",
      "Test 2: FAIL - name 'sum_Of_Series' is not defined",
      "Test 3: FAIL - name 'sum_Of_Series' is not defined"
    ],
    "generated_code": "def sum_of_series(n):\n    # Initialize the total sum with 0\n    total_sum = 0\n    \n    # Iterate from 1 to n and calculate the sum of cubes\n    for i in range(1, n + 1):\n        total_sum += i ** 3\n    \n    return total_sum",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for -: 'list' and 'int'"
    ],
    "generated_code": "from typing import List\nimport numpy as np\n\ndef re_order(arr: List[int]) -> List[int]:\n    \"\"\"\n    Reorders the elements in the input list such that all zeros are moved to the end.\n    \n    Args:\n    arr (List[int]): The input list containing integers.\n    \n    Returns:\n    List[int]: A new list with all zeros moved to the end of the original list.\n    \"\"\"\n    # Convert the list to an array for efficient manipulation\n    arr_array = np.array(arr)\n    # Find indices where zero is not present and sort these indices\n    non_zero_indices = sorted(np.where(arr_array != 0)[0])\n    # Use these indices to reorder the array efficiently\n    result_arr = arr_array[non_zero_indices].tolist()\n    # Fill remaining positions with zeros\n    result_arr.extend([0] * len(arr) - len(result_arr))\n    return result_arr\n\n# Check function to verify the correctness of the solution\ndef check_reorder():\n    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0], \"Test case 1 failed\"\n    assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0], \"Test case 2 failed\"\n    assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0], \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_reorder()",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient P(n, k).\n    \n    Parameters:\n    n (int): Total number of items.\n    k (int): Number of items to choose.\n    \n    Returns:\n    int: Permutation coefficient P(n, k).\n    \"\"\"\n    # The formula for permutation is n! / (n-k)!\n    numerator = factorial(n)\n    denominator = factorial(n - k)\n    return numerator // denominator\n\n# Helper function to calculate factorial\ndef factorial(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * factorial(num-1)\n\n# Check function with provided data points\nprint(permutation_coefficient(10, 2))   # Expected output: 90\nprint(permutation_coefficient(10, 3))   # Expected output: 720\nprint(permutation_coefficient(10, 1))   # Expected output: 10",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(word_list, delete_list):\n    return [word for word in word_list if word not in delete_list]",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def same_order(list1, list2):\n    # Check if both lists have the same length\n    if len(list1) != len(list2):\n        return False\n    \n    # Compare each element of the two lists\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            continue\n        else:\n            return False\n            \n    return True",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def average_Odd(n):\n    # Initialize sum and count for odds from 1 to n-1\n    total = 0\n    count = 0\n    \n    # Iterate through numbers from 1 to n-1\n    for i in range(1, n):\n        if i % 2 != 0:\n            total += i\n            count += 1\n            \n    # Calculate average of odd numbers\n    if count == 0:\n        return 0\n    else:\n        return total / count",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nfrom collections import defaultdict\n\ndef no_of_subsequences(arr: List[int], k: int) -> int:\n    result = 0\n    arr.sort()\n    \n    # Initialize dictionary to keep track of prefix sums and their counts\n    prefix_sum_count = defaultdict(int)\n    prefix_sum_count[0] = 1\n    \n    current_prefix_sum = 0\n    for num in arr:\n        # Calculate the new prefix sum\n        new_prefix_sum = current_prefix_sum + num\n        \n        # If new_prefix_sum is less than k, it means we can have subsequence products smaller than k\n        if new_prefix_sum < k:\n            result += prefix_sum_count[new_prefix_sum]\n        \n        # Update the count of new_prefix_sum\n        prefix_sum_count[new_prefix_sum] += 1\n        current_prefix_sum = new_prefix_sum - num\n    \n    return result",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Min_Sum(n):\n    if n == 1:\n        return 1\n    min_sum = float('inf')\n    i = 2\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            n //= i\n            count += 1\n        if count > 0 and count < 4:\n            min_sum = min(min_sum, i + (count - 1))\n        i += 1\n    if n > 1:\n        min_sum = min(min_sum, n)\n    return min_sum\n\n# Test cases\nprint(find_Min_Sum(12)) # Expected output: 7\nprint(find_Min_Sum(105)) # Expected output: 15\nprint(find_Min_Sum(2)) # Expected output: 2",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_freq(mixed_tuple):\n    freq_dict = {}\n    for item in mixed_tuple:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                if sub_item not in freq_dict:\n                    freq_dict[sub_item] = 1\n                else:\n                    freq_dict[sub_item] += 1\n        elif item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\n# Test cases\nprint(count_element_freq((5, 6, (5, 6), 7, (8, 9), 9))) # Should return {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nprint(count_element_freq((6, 7, (6, 7), 8, (9, 10), 10))) # Should return {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nprint(count_element_freq((7, 8, (7, 8), 9, (10, 11), 11))) # Should return {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_str(test_tuple, add_str):\n    new_list = []\n    for i in test_tuple:\n        new_list.append(i)\n        new_list.append(add_str)\n    return new_list",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def sum_elements(tuples_list):\n    \"\"\"\n    Calculate the total sum of all elements present in each tuple within a list.\n    \n    Args:\n    tuples_list (list): A list of tuples containing numeric elements\n    \n    Returns:\n    int: The total sum of all individual tuple elements across the list.\n    \"\"\"\n    result = 0\n    for tup in tuples_list:\n        for element in tup:\n            result += element\n    return result\n\n# Check function with provided data points\nassert sum_elements([(7, 8, 9), (1, 2, 3), (4, 5, 6)]) == 42, \"Test case 1 failed\"\nassert sum_elements([(11, 12), (13, 14), (45)]) == 95, \"Test case 2 failed\"\nassert sum_elements([(1, 2), (3, 4), (5, 6, 7)]) == 28, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def modular_sum(nums, m, target_sum):\n    \"\"\"\n    Check if there exists a subset of nums whose sum is divisible by m.\n    \n    :param nums: List[int] - A list of integers.\n    :param m: int - The divisor for checking divisibility.\n    :param target_sum: int - The required remainder for subset's sum to be divisible by m.\n    :return: bool - Returns True if such a subset exists, otherwise returns False.\n    \"\"\"\n    dp = [False] * (target_sum + 1)\n    dp[0] = True  # Base case\n    \n    for num in nums:\n        for i in range(target_sum, num-1, -1):\n            if dp[i-num]:\n                dp[i] = True\n                \n    return dp[target_sum]\n\n# Example usage\nprint(modular_sum([3, 1, 7, 5], 4, 6))  # Expected output: True\nprint(modular_sum([1, 7], 2, 5))         # Expected output: False\nprint(modular_sum([1, 6], 2, 5))         # Expected output: False",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def radix_sort(arr):\n    max_num = max(arr)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort_for_radix(arr, exp)\n        exp *= 10\n    return arr\n\ndef counting_sort_for_radix(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = arr[i] // exp\n        count[(index) % 10] += 1\n        \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n        \n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[(index) % 10] - 1] = arr[i]\n        count[(index) % 10] -= 1\n        i -= 1\n        \n    for i in range(n):\n        arr[i] = output[i]\n\n# Test Cases\nassert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79], \"Test case 1 failed\"\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11], \"Test case 2 failed\"\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(nums):\n    # Initialize max as negative infinity\n    max_num = float('-inf')\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n    \n    return max_num",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sqrt_root(num):\n    return int(math.sqrt(num))",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_tetrahedron(side_length):\n    \"\"\"\n    Calculate the volume of a tetrahedron given its side length.\n    \n    Parameters:\n    - side_length (float): The length of a side of the tetrahedron\n    \n    Returns:\n    float: The volume of the tetrahedron\n    \"\"\"\n    return (math.sqrt(2) / 12) * pow(side_length, 3)\n\n# Test cases to verify the correctness of the function\nassert abs(volume_tetrahedron(10) - 117.85) < 0.01\nassert abs(volume_tetrahedron(15) - 397.75) < 0.01\nassert abs(volume_tetrahedron(20) - 942.81) < 0.01",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def get_lcm(arr):\n    # Initialize result with the first element of the array\n    res = arr[0]\n    \n    # Calculate LCM using the formula lcm(a,b) = abs(a*b) / gcd(a,b)\n    for i in range(1, len(arr)):\n        res = abs(res * arr[i]) // math.gcd(res, arr[i])\n        \n    return res\n\n# Example usage and test cases\nprint(get_lcm([2, 7, 3, 9, 4]))  # Expected output: 252\nprint(get_lcm([1, 2, 8, 3]))     # Expected output: 24\nprint(get_lcm([3, 8, 4, 10, 5])) # Expected output: 120",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    \"\"\"\n    This function checks whether the given three sides of a triangle form an isosceles triangle.\n    An isosceles triangle has at least two sides of equal length.\n    \n    Parameters:\n    a (int): Length of the first side of the triangle.\n    b (int): Length of the second side of the triangle.\n    c (int): Length of the third side of the triangle.\n    \n    Returns:\n    bool: True if the triangle is isosceles, False otherwise.\n    \"\"\"\n    # Check if any two sides are equal and return the result\n    return len({a, b, c}) == 2",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - UnboundLocalError: local variable 'j' referenced before assignment"
    ],
    "generated_code": "def lbs(arr):\n    n = len(arr)\n    \n    # Find maximum of each subsequence ending at i\n    max_values = [0] * n\n    dp = [[0] * 2 for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        max_value = 0\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                max_value = max(max_value, dp[j][0])\n            else:\n                max_value = max(max_value, dp[j][1], dp[j][0]+arr[i])\n                \n        max_values[i] = max_value + arr[i]\n        dp[i][max_value < dp[j][0]] = [dp[j][max_value < dp[j][0]], dp[j][max_value < dp[j][1]] + arr[i]]\n    \n    return max(max_values)\n\n# Test cases\nprint(lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]))  # Expected output: 7\nprint(lbs([1, 11, 2, 10, 4, 5, 2, 1]))  # Expected output: 6\nprint(lbs([80, 60, 30, 40, 20, 10]))  # Expected output: 5",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_string(s):\n    def is_uppercase(c): return c.isupper()\n    def is_lowercase(c): return c.islower()\n    def is_number(c): return c.isdigit()\n    def valid_length(n): \n        if len(s) < n: return False\n        return True\n        \n    uppercase = is_uppercase(s[0])\n    lowercase = is_lowercase(s[-1])\n    num_char = is_number(s)\n    \n    message = []\n    \n    if not uppercase:\n        message.append(\"String must have 1 upper case character.\")\n        \n    if not lowercase:\n        message.append(\"String must have 1 lower case character.\")\n        \n    if not num_char:\n        message.append(\"String must have 1 numeric character.\")\n    \n    if len(message) == 0 and valid_length(8):\n        message.append(\"String length should be atleast 8.\")\n    \n    return message",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: max_sum_increasing_subsequence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_increasing_subsequence(arr: List[int]) -> int:\n    n = len(arr)\n    dp = [arr[0]] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    \n    return max(dp)\n\n# Test cases\nprint(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7)) # Expected output: 106\nprint(max_sum_increasing_subsequence([3, 4, 5, 10], 4)) # Expected output: 22\nprint(max_sum_increasing_subsequence([10, 5, 4, 3], 4)) # Expected output: 10",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: not enough values to unpack (expected 3, got 2)"
    ],
    "generated_code": "def is_parallel(line1, line2):\n    # Extract coefficients from the line equations ax + by = c\n    x1, y1, _ = line1[0]\n    _, _, b1 = line1[1]\n    _, _, b2 = line2[1]\n\n    # Check if both lines have the same slope (b)\n    return b1 == b2\n\n# Test cases\nprint(is_parallel([[2,3,4], [2,3,8]], [[2,3,4], [4,-3,8]]))  # Expected output: True\nprint(is_parallel([[2,3,4], [4,-3,8]], [[2,3,7], [4,-3,8]]))  # Expected output: False\nprint(is_parallel([[3,3], [5,5]], [[3,3], [6,6]]))  # Expected output: True",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def capitalize_first_last_letters(s):\n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store capitalized words\n    capitalized_words = []\n    \n    for word in words:\n        # Capitalize the first and last letter of each word\n        capitalized_word = word[0].upper() + word[1:-1] + word[-1].upper()\n        capitalized_words.append(capitalized_word)\n    \n    # Join the capitalized words back into a single string with spaces between them\n    result = ' '.join(capitalized_words)\n    \n    return result",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def get_pairs_count(arr, target_sum, num_elements):\n    count = 0\n    # Iterate through each pair of elements in the array\n    for i in range(num_elements):\n        for j in range(i + 1, num_elements):  # Ensure no duplicates and maintain order\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count\n\n# Example check function calls\nprint(get_pairs_count([1, 5, 7, -1, 5], 5, 6))  # Expected output: 3\nprint(get_pairs_count([1, 5, 7, -1], 4, 6))     # Expected output: 2\nprint(get_pairs_count([1, 1, 1, 1], 4, 4))      # Expected output: 6",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef min_length(lst: List[List[int]]) -> tuple:\n    return min((len(sublist), sublist) for sublist in lst)[1]",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def jacobsthal_lucas(n):\n    # Base case initialization\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    \n    # Initialize first two terms of Jacobsthal-Lucas sequence\n    jacobsthal = [0, 2]\n    \n    # Calculate the nth term using the recurrence relation J(n) = 2J(n-1) + J(n-2)\n    for i in range(2, n+1):\n        next_term = 2 * jacobsthal[-1] + jacobsthal[-2]\n        jacobsthal.append(next_term)\n    \n    return jacobsthal[n]\n\n# Test cases\nprint(jacobsthal_lucas(5))  # Expected output: 31\nprint(jacobsthal_lucas(2))  # Expected output: 5\nprint(jacobsthal_lucas(4))  # Expected output: 17",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def negative_count(arr):\n    count = sum(1 for x in arr if x < 0)\n    return count / len(arr)",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef min_coins(coins: List[int], amount: int, target_amount: int) -> int:\n    dp = [float('inf')] * (target_amount + 1)\n    dp[0] = 0\n    \n    for coin in coins:\n        for x in range(coin, target_amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n    \n    return dp[target_amount]\n\n# Test cases\nprint(min_coins([9, 6, 5, 1], 4, 11)) # Output should be 2\nprint(min_coins([4, 5, 6, 7, 8, 9], 6, 9)) # Output should be 1\nprint(min_coins([1, 2, 3], 3, 4)) # Output should be 2",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_permutation(str1, str2):\n    # Convert both strings to lowercase and sort them\n    sorted_str1 = ''.join(sorted(str1.lower()))\n    sorted_str2 = ''.join(sorted(str2.lower()))\n\n    # Compare the sorted versions of the strings\n    return sorted_str1 == sorted_str2",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_datatype(tup, datatype):\n    new_tup = []\n    for item in tup:\n        if not isinstance(item, datatype):\n            new_tup.append(item)\n    return new_tup",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import Tuple\n\ndef search_literal(text: str, literal: str) -> Tuple[int, int]:\n    start = text.find(literal)\n    return start, start + len(literal)\n\n# Test cases\nprint(search_literal('python programming language', 'python')) # Expected output: (0, 6)\nprint(search_literal('programming python programming language', 'python programming language')) # Expected output: (7, 18)\nprint(search_literal('language python programming language', 'python programming language')) # Expected output: (19, 27)",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef topbottom_surfacearea(radius, height=10):\n    \"\"\"\n    Calculates the surface area of a cylinder given its radius and optional height.\n    \n    Parameters:\n    - radius: The radius of the base of the cylinder.\n    - height: The height of the cylinder. Default is set to 10.\n    \n    Returns:\n    - The total surface area of the cylinder.\n    \"\"\"\n    # Calculate the lateral surface area\n    lateral_area = 2 * math.pi * radius * height\n    \n    # Calculate the two circular bases' areas\n    base_areas = 2 * math.pi * pow(radius, 2)\n    \n    # Sum up both areas to get the total surface area\n    total_surface_area = lateral_area + base_areas\n    \n    return round(total_surface_area, 5)\n\n# Test cases to verify the correctness of the function\nassert abs(topbottom_surfacearea(10) - 314.15999999999998) < 1e-9\nassert abs(topbottom_surfacearea(5)) - 78.53981633974483 < 1e-9\nassert abs(topbottom_surfacearea(4)) - 50.26548245743669 < 1e-9",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(lst, n):\n    return lst[n::n]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_word(input_string):\n    # Split the input string into words\n    words = input_string.split()\n    \n    # Initialize an empty set to keep track of seen words\n    seen_words = set()\n    \n    for word in words:\n        # If the word is already in the set, it's a repeated word\n        if word in seen_words:\n            return word\n        \n        # Add the current word to the set of seen words\n        seen_words.add(word)\n    \n    # Return None if no repeated word was found\n    return None\n\n# Test cases\nprint(first_repeated_word(\"ab ca bc ab\"))  # Output: \"ab\"\nprint(first_repeated_word(\"ab ca bc\"))     # Output: \"None\"\nprint(first_repeated_word(\"ab ca bc ca ab bc\"))  # Output: \"ca\"",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\n    # Join all characters in the string list into a single string and then split it by space\n    result = ''.join(string_list).split()\n    return tuple(result)",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "def basesnum_correspondingnum(bases, numbers):\n    return [base ** num for base, num in zip(bases, numbers)]",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef find_Diff(arr, N):\n    # Counting occurrences of each number in the array\n    counts = Counter(arr)\n    \n    # Finding maximum and minimum frequencies\n    max_freq = max(counts.values())\n    min_freq = min(counts.values())\n    \n    # Calculating the difference\n    diff = max_freq - min_freq\n    \n    return diff",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_abundant(number):\n    # Initialize sum of proper divisors\n    divisor_sum = 0\n    \n    # Iterate from 1 to square root of number\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            # Add both divisors to the sum\n            divisor_sum += i\n            if i != number // i:\n                divisor_sum += number // i\n    \n    # Check if sum of divisors exceeds the number itself\n    return divisor_sum > number\n\n# Test cases\nprint(check_abundant(12))  # Output: True\nprint(check_abundant(15))  # Output: False\nprint(check_abundant(18))  # Output: True",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef fill_spaces(input_string):\n    # Replace spaces, commas, and dots with colons using regular expression\n    result = re.sub(r'[\\s,.]', ':', input_string)\n    return result\n\n# Test cases to verify the correctness of the solution\nprint(fill_spaces('Boult Curve Wireless Neckband'))  # Expected output: Boult:Curve:Wireless:Neckband\nprint(fill_spaces('Stereo Sound Sweatproof'))       # Expected output: Stereo:Sound:Sweatproof\nprint(fill_spaces('Probass Curve Audio'))           # Expected output: Probass:Curve:Audio",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_digits(n, m):\n    # Calculate the sum of n and m\n    total = n + m\n    \n    # Count the number of digits in the sum\n    digit_count = len(str(total))\n    \n    return digit_count",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def flatten_tuple(tuple_list):\n    # Flatten the nested list into a single list and join with space\n    result = [str(item) for sublist in tuple_list for item in sublist]\n    return ''.join(result)",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_F_and_L_bits(n):\n    # Shift left by 1 bit for first bit and right by 1 bit for last bit\n    n = (n << 1) ^ (n >> 1)\n    return n\n\n# Test cases\nprint(toggle_F_and_L_bits(10))  # Expected output: 3\nprint(toggle_F_and_L_bits(15))  # Expected output: 6\nprint(toggle_F_and_L_bits(20))  # Expected output: 5",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_occurence_char(input_string, char_to_find):\n    try:\n        return input_string.rindex(char_to_find)\n    except ValueError:\n        return None",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Total_Hamming_Distance' is not defined",
      "Test 2: FAIL - name 'Total_Hamming_Distance' is not defined",
      "Test 3: FAIL - name 'Total_Hamming_Distance' is not defined"
    ],
    "generated_code": "def total_hamming_distance(n):\n    distance = 0\n    for i in range(1, n+1):\n        current_sum = i * (i + 1)\n        for j in range(i + 1, n + 1):\n            if i != j:\n                current_sum += abs(current_sum - j * (j + 1))\n        distance += current_sum // (i + 1)\n    return distance\n\n# Example usage\nprint(total_hamming_distance(4))  # Output: 7\nprint(total_hamming_distance(2))  # Output: 3\nprint(total_hamming_distance(5))  # Output: 8",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_increasing_subsequence(sequence):\n    # Initialize variables to keep track of the maximum length and the ending element of the longest subsequence found so far.\n    max_length = 0\n    end_of_longest = -float('inf')\n    \n    for num in sequence:\n        # If the current number is greater than the smallest ending element, update the maximum length and end position.\n        if num > end_of_longest:\n            max_length += 1\n            end_of_longest = num\n        else:\n            # Otherwise, replace the smallest ending element with the current number if it's longer.\n            min_end = min(end_of_longest, num)\n            max_length -= 1\n            max_length += 1\n            end_of_longest = min_end\n    \n    return max_length",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    result = 0\n    for i in range(1, n+1, 2):  # Iterate over odd numbers starting from 1\n        result += i ** 5  # Add the fifth power of each odd number to the result\n    return result",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Max(arr, start, end):\n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) // 2\n    \n    # If the middle element is greater than its next element, then the part of the array from 'mid+1' to 'end'\n    # is sorted. So, the maximum element lies in this part.\n    if mid < end and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    # If the middle element is less than its previous element, then the part of the array from 'start' to 'mid'\n    # is sorted. So, the maximum element lies in this part.\n    elif mid > start and arr[mid - 1] > arr[mid]:\n        return arr[mid - 1]\n    else:\n        # Move the search range to the left half if the first element is greater than the second.\n        if arr[0] > arr[1]:\n            return find_Max(arr, start, mid - 1)\n        # Move the search range to the right half if the last element is smaller than the first.\n        else:\n            return find_Max(arr, mid + 1, end)\n\n# Test cases\nprint(find_Max([2,3,5,6,9],0,4))  # Output: 9\nprint(find_Max([3,4,5,2,1],0,4))  # Output: 5\nprint(find_Max([1,2,3],0,2))      # Output: 3",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_column(matrix, col_index):\n    # Extracts and returns the specified column from the matrix.\n    return [sublist[col_index] for sublist in matrix]\n\n# Test Cases\nprint(extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0))  # Output: [1, 2, 1]\nprint(extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2))  # Output: [3, -5, 1]\nprint(extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0))  # Output: [1, 5, 1, 13, 5, 9]",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Seq_Linear(sequence):\n    \"\"\"\n    Check if a given sequence of numbers is linear.\n    \n    Parameters:\n        sequence (list): A list of integers representing the sequence\n    \n    Returns:\n        str: \"Linear Sequence\" if the sequence is linear, otherwise \"Non Linear Sequence\".\n    \"\"\"\n    for i in range(1, len(sequence)):\n        if sequence[i] != sequence[i-1] + 1:\n            return \"Non Linear Sequence\"\n    return \"Linear Sequence\"\n\n# Test Cases\nprint(Seq_Linear([0,2,4,6,8,10])) # Expected output: \"Linear Sequence\"\nprint(Seq_Linear([1,2,3]))         # Expected output: \"Linear Sequence\"\nprint(Seq_Linear([1,5,2]))         # Expected output: \"Non Linear Sequence\"",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_to_float(tup):\n    # Convert each element in the tuple to float and return their sum as a single float.\n    return float(sum(tup))",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(mixed_list):\n    # Filter out even numbers and convert to list type in case it was returned as tuple\n    result = list(filter(lambda x: x % 2 != 0, mixed_list))\n    return result",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def difference(n):\n    # Calculate sum of cubes of first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    \n    # Calculate sum of first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_numbers",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Odd_Pair(arr, n):\n    even_count = 0\n    result = 0\n    \n    for num in arr:\n        # If number is odd, it contributes +1 to even_count\n        if num % 2 == 1:\n            even_count += 1\n        \n        # XOR of two numbers is odd if one of them is odd and other is even.\n        # So, we can add 'even_count' to result whenever we encounter an odd number.\n        if num % 2 == 1:\n            result += even_count\n            \n    return result",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(s):\n    return s.swapcase()",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def digit_distance_nums(num1, num2):\n    # Calculate the absolute difference of their digits\n    return abs(sum([int(digit1) for digit1 in str(abs(num1))]) - sum([int(digit2) for digit2 in str(abs(num2))]))",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sub_array_sum(nums, size):\n    \"\"\"\n    Find the maximum sum of a contiguous subarray within a one-dimensional array of numbers.\n    \n    Parameters:\n    nums (List[int]): The input list of integers.\n    size (int): The length of the array.\n    \n    Returns:\n    int: The maximum sum of a contiguous subarray.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    current_max = global_max = nums[0]\n    for i in range(1, size):\n        current_max = max(nums[i], current_max + nums[i])\n        if current_max > global_max:\n            global_max = current_max\n            \n    return global_max\n\n# Test cases\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)) # Expected output: 7\nprint(max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8)) # Expected output: 8\nprint(max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8)) # Expected output: 10",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def union_elements(tup1, tup2):\n    # Convert both tuples to sets and use symmetric difference to find unique elements\n    result = set(tup1 + tup2)\n    # Convert back to tuple and sort in ascending order before returning\n    return tuple(sorted(result))\n\n# Test cases\nprint(union_elements((3, 4, 5, 6), (5, 7, 4, 10)))  # Expected output: (3, 4, 5, 6, 7, 10)\nprint(union_elements((1, 2, 3, 4), (3, 4, 5, 6)))   # Expected output: (1, 2, 3, 4, 5, 6)\nprint(union_elements((11, 12, 13, 14), (13, 15, 16, 17)))  # Expected output: (11, 12, 13, 14, 15, 16, 17)",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'element' is not defined"
    ],
    "generated_code": "def assign_elements(pairs):\n    \"\"\"\n    Assigns each element of a list with all unique pairs of another similar pairs.\n    \n    Parameters:\n    pairs (list): A list of tuples representing the pairs of numbers.\n    \n    Returns:\n    dict: A dictionary where each key is an element from 'pairs' and the value is a list of its assigned pairs.\n    \"\"\"\n    # Dictionary comprehension to create the assignment\n    result = {element: [pair for _, pair in sorted(pairs) if element in pair]\n              for element in set(element for _, pair in pairs)}\n    \n    return result\n\n\n# Test Cases\nassert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)]) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)]) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)]) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max_Length' is not defined",
      "Test 2: FAIL - name 'Find_Max_Length' is not defined",
      "Test 3: FAIL - name 'Find_Max_Length' is not defined"
    ],
    "generated_code": "def find_max_length(sublists):\n    \"\"\"\n    Finds the maximum length of sublists within a list of lists.\n    \n    Parameters:\n    - sublists (list of lists): A list where each element is another list\n    \n    Returns:\n    - int: The maximum length among all sublists\n    \"\"\"\n    # Return 0 if input is not a list of lists\n    if not all(isinstance(lst, list) for lst in sublists):\n        return 0\n    \n    # Calculate and return the max length\n    return max(len(lst) for lst in sublists)",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef extract_values(str_list):\n    result = []\n    pattern = r'\"([^\"]*)\"'\n    for str in str_list:\n        match = re.search(pattern, str)\n        if match:\n            result.append(match.group(0))\n    return result",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    # Count of unique elements in the array\n    unique_count = len(set(arr))\n    \n    # Total number of pairs possible\n    total_pairs = int(n * (n - 1) / 2)\n    \n    # Number of pairs where both elements are equal\n    equal_pairs = 0\n    \n    for i in range(0, n):\n        if arr[i] != arr[(i + 1) % n]:\n            equal_pairs += 1\n    \n    # Calculate and return the count of unequal element pairs\n    return total_pairs - equal_pairs\n\n# Test cases\nprint(count_Pairs([1,2,1],3))  # Output: 2\nprint(count_Pairs([1,1,1,1],4))  # Output: 0\nprint(count_Pairs([1,2,3,4,5],5))  # Output: 10",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(input_string):\n    return list(input_string)\n\n# Test cases\nprint(split('python')) # Expected output: ['p', 'y', 't', 'h', 'o', 'n']\nprint(split('Name'))   # Expected output: ['N', 'a', 'm', 'e']\nprint(split('program'))# Expected output: ['p', 'r', 'o', 'g', 'r', 'a', 'm']",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(lst):\n    return all(x <= y for x, y in zip(lst, lst[1:]))\n\n# Test cases\nprint(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]))  # Expected output: True\nprint(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]))  # Expected output: False\nprint(issort_list([1, 2, 4, 6, 8, 10, 15, 14, 20]))     # Expected output: False",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def empty_list(n):\n    return [{}] * n",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst_of_lsts):\n    return [sorted(sublist) for sublist in lst_of_lsts]",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_words(word_list, chars_to_remove):\n    return [word.translate(str.maketrans('', '', ''.join(chars_to_remove))) for word in word_list]\n\nresult_1 = remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"], ['#', 'color', '@'])\nresult_2 = remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['&', '+', '@'])\nresult_3 = remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['@'])\n\nprint(result_1)\nprint(result_2)\nprint(result_3)",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_pair_diff_lessthan_K(nums, K, n):\n    nums.sort()\n    left = 0\n    total_sum = 0\n    \n    for right in range(len(nums)):\n        while nums[right] - nums[left] >= K:\n            left += 1\n        total_sum += nums[left]\n    \n    return total_sum\n\n# Example usage\nnums_example = [3, 5, 10, 15, 17, 12, 9]\nK_example = 4\nn_example = 7\nprint(max_sum_pair_diff_lessthan_K(nums_example, K_example, n_example))  # Expected output: 62",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    # Create a set to track seen elements for O(1) lookup\n    seen = set()\n    result = []\n    \n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    \n    return result",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'reduce' is not defined"
    ],
    "generated_code": "from typing import List\nimport numpy as np\n\ndef unique_product(nums: List[int]) -> int:\n    \"\"\"\n    Calculates the product of all elements in the list that appear exactly once.\n    \n    Parameters:\n    nums (List[int]): A list of integers.\n    \n    Returns:\n    int: The product of unique numbers in the list.\n    \"\"\"\n    num_counts = np.bincount(np.array(nums))\n    unique_numbers = [num for num, count in enumerate(num_counts) if count == 1]\n    return reduce(lambda x, y: x * y, unique_numbers)\n\n# Test cases\nprint(unique_product([10, 20, 30, 40, 20, 50, 60, 40])) # Expected output: 720000000\nprint(unique_product([1, 2, 3, 1,])) # Expected output: 6\nprint(unique_product([7, 8, 9, 0, 1, 1])) # Expected output: 0",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # Calculate and return the surface area of a cylinder\n    top_bottom_area = 2 * math.pi * radius**2\n    side_area = 2 * math.pi * radius * height\n    return top_bottom_area + side_area",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_no(n, x, start, n_items):\n    \"\"\"\n    Returns the count of numbers up to n_items that are not divisible by x and start from n.\n    \n    :param n: The starting point for counting (inclusive).\n    :param x: The divisor used to check divisibility.\n    :param start: The starting value before division.\n    :param n_items: Total number of items to consider.\n    :return: The count of numbers satisfying the conditions.\n    \"\"\"\n    count = 0\n    current = start\n    while current <= n_items:\n        if current % x != 0:\n            count += 1\n        current += 1\n    return count\n\n# Check function with provided data points\nprint(count_no(2, 3, 1, 10))  # Expected output: 5\nprint(count_no(3, 6, 4, 20))  # Expected output: 11\nprint(count_no(5, 10, 4, 20))  # Expected output: 16",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Sub_Array' is not defined",
      "Test 2: FAIL - name 'is_Sub_Array' is not defined",
      "Test 3: FAIL - name 'is_Sub_Array' is not defined"
    ],
    "generated_code": "def is_sub_array(arr1, arr2, n1, n2):\n    # If lengths do not match and second length is zero, then arrays can't be substrings of each other.\n    if n1 != len(arr1) or n2 == 0:\n        return False\n    \n    i = j = 0\n    \n    # Iterate through both arrays using two pointers for comparison\n    while i < n1 and j < n2:\n        if arr1[i] == arr2[j]:\n            i += 1\n        j += 1\n    \n    # Check if all elements in arr2 have been found within arr1 starting from index i\n    return j >= n2",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def last_Digit_Factorial(n):\n    # Calculate factorial and then get the last digit\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return str(fact)[-1]",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_dissimilar(tuple1, tuple2):\n    # Convert both tuples into sets and use set difference operation to get dissimilar elements.\n    return tuple(set(tuple1) ^ set(tuple2))",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_even(nested_tuple):\n    result = []\n    for element in nested_tuple:\n        if isinstance(element, int) and element % 2 == 0:\n            result.append(element)\n        elif isinstance(element, tuple):\n            result.extend(extract_even(element))\n    return tuple(result)\n\n# Test cases\nprint(extract_even((4, 5, (7, 6, (2, 4)), 6, 8)))  # Expected output: (4, (6, (2, 4)), 6, 8)\nprint(extract_even((5, 6, (8, 7, (4, 8)), 7, 9)))  # Expected output: (6, (8, (4, 8)))\nprint(extract_even((5, 6, (9, 8, (4, 6)), 8, 10)))  # Expected output: (6, (8, (4, 6)), 8, 10)",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'surface_Area' is not defined",
      "Test 2: FAIL - name 'surface_Area' is not defined",
      "Test 3: FAIL - name 'surface_Area' is not defined"
    ],
    "generated_code": "def surface_area_square_pyramid(base_edge, slant_height):\n    # Calculate the surface area using the formula for a square pyramid\n    base_area = base_edge ** 2\n    lateral_area = 0.5 * base_edge * slant_height\n    total_surface_area = base_area + lateral_area\n    return total_surface_area",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def my_dict(my_dict):\n    return len(my_dict) == 0",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number.\n    \n    Parameters:\n    n (int): The index of the Catalan number to calculate.\n    \n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        c = 1\n        for i in range(1, n+1):\n            c *= (n - i + 1) / i\n        return int(c)\n\n# Test cases\nprint(catalan_number(10))  # Expected output: 16796\nprint(catalan_number(9))   # Expected output: 4862\nprint(catalan_number(7))   # Expected output: 429",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_adverbs(sentence):\n    # Define the pattern for finding adverbs\n    adverb_pattern = r'\\b([A-Z][a-z]*\\s[A-Z][a-z]*)\\s[^\\.\\?]+[A-Z]\\w+\\.'\n    \n    # Find all matches of the pattern in the sentence\n    matches = re.findall(adverb_pattern, sentence)\n    \n    # Create a list of tuples containing adverbs and their starting position\n    adverbs_positions = [(match[0], match.start()) for match in matches]\n    \n    return adverbs_positions",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from heapq import nlargest\n\ndef expensive_items(dataset, n):\n    # Extracting the top-n items with the highest prices\n    return nlargest(n, dataset, key=lambda x: x['price'])\n\n# Test cases to verify the correctness of the function\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 1) == [{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2) == [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}], 1) == [{'name': 'Item-2', 'price': 555.22}]",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'split_Arr' is not defined",
      "Test 2: FAIL - name 'split_Arr' is not defined",
      "Test 3: FAIL - name 'split_Arr' is not defined"
    ],
    "generated_code": "def split_arr(arr, n, m):\n    return arr[-m:] + arr[:-m]\n\n# Test cases\nprint(split_arr([12,10,5,6,52,36], 6, 2))  # Expected output: [5, 6, 52, 36, 12, 10]\nprint(split_arr([1,2,3,4], 4, 1))          # Expected output: [2, 3, 4, 1]\nprint(split_arr([0,1,2,3,4,5,6,7], 8, 3))  # Expected output: [3, 4, 5, 6, 7, 0, 1, 2]",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(lst):\n    return tuple(lst)\n\n# Test cases\nprint(list_tuple([5, 10, 7, 4, 15, 3])) # Expected output: (5, 10, 7, 4, 15, 3)\nprint(list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])) # Expected output: (2, 4, 5, 6, 2, 3, 4, 4, 7)\nprint(list_tuple([58,44,56])) # Expected output: (58,44,56)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(nums):\n    # Find the maximum value in the list\n    max_val = max(nums)\n    # Find the minimum value in the list\n    min_val = min(nums)\n    # Return the difference between the maximum and minimum values\n    return max_val - min_val",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef perfect_squares(start_num, end_num):\n    result = []\n    for i in range(math.ceil(math.sqrt(start_num)), math.floor(math.sqrt(end_num)) + 1):\n        square = i * i\n        if start_num <= square <= end_num:\n            result.append(square)\n    return result\n\n# Test cases\nprint(perfect_squares(1, 30))  # [1, 4, 9, 16, 25]\nprint(perfect_squares(50, 100))  # [64, 81, 100]\nprint(perfect_squares(100, 200))  # [100, 121, 144, 169, 196]",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef polar_rect(rho, theta):\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x, y)\n\n# Test cases\nprint(polar_rect(3,4))  # Expected output: ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nprint(polar_rect(4,7))  # Expected output: ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nprint(polar_rect(15,17))  # Expected output: ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    # Interchange the first and last elements in the given list\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_product' is not defined",
      "Test 2: FAIL - name 'sum_Of_product' is not defined",
      "Test 3: FAIL - name 'sum_Of_product' is not defined"
    ],
    "generated_code": "from math import comb\n\ndef sum_of_product(n):\n    result = 0\n    for i in range(n + 1):\n        j = n - i\n        result += comb(i, j) * comb(i + j, i)\n    return result",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef removezero_ip(ip_address):\n    # Remove leading zeroes from all octets of the IP address.\n    return re.sub(r'\\b0+(\\d)', r'\\g<1>', ip_address)\n\n# Example usage:\nprint(removezero_ip(\"216.08.094.196\"))  # Expected output: \"216.8.94.196\"\nprint(removezero_ip(\"12.01.024\"))       # Expected output: \"12.1.24\"\nprint(removezero_ip(\"216.08.094.0196\")) # Expected output: \"216.8.94.196\"",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_even_odd(lst):\n    # Find the first even number in the list\n    evens = [num for num in lst if num % 2 == 0]\n    if not evens:\n        return None  # If no even numbers found, return None\n    \n    # Find the first odd number in the list\n    odds = [num for num in lst if num % 2 != 0]\n    \n    # Calculate the difference between the first even and odd numbers\n    return max(odds) - min(evens)",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(binary_string_1, binary_string_2):\n    # Check if the lengths of both strings are equal\n    if len(binary_string_1) != len(binary_string_2):\n        return \"Not Possible\"\n    \n    # Initialize variables for tracking differences and swapping operations\n    diff_count = 0\n    swap_operations = 0\n    \n    # Iterate through each character in the binary strings\n    for char1, char2 in zip(binary_string_1, binary_string_2):\n        # Count differences between characters\n        if char1 != char2:\n            diff_count += 1\n        \n        # If more than two differences occur, it's not possible to make them match\n        if diff_count > 2:\n            return \"Not Possible\"\n        \n        # Track which positions have been changed so far\n        if diff_count % 2 == 1 and char1 != '0':\n            swap_operations += 1\n    \n    # Return the total number of swap operations performed\n    return swap_operations",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import sys\n\ndef tuple_size(test_tuple):\n    \"\"\"\n    Returns the size in bytes of the provided tuple.\n    \n    Args:\n        test_tuple (tuple): The input tuple whose size is to be calculated.\n        \n    Returns:\n        int: The size of the tuple in bytes.\n    \"\"\"\n    return sys.getsizeof(test_tuple)",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def find_kth(arr1, arr2, m, n, k):\n    # Base case: if either array is empty, return the kth smallest number from the other array\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    \n    # Find the smaller middle element of the current segments of both arrays\n    mid1 = min(m, k//2)\n    mid2 = min(n, k//2)\n    \n    # If the elements at these indices in both arrays are equal, we have found our answer\n    if arr1[mid1] == arr2[mid2]:\n        return arr1[mid1]\n    \n    # Move to the next smaller index for the larger array and repeat the process\n    elif arr1[mid1] > arr2[mid2]:\n        return find_kth(arr1[:mid1+1], arr2, m-mid1, n, k-(m-mid1))\n    else:\n        return find_kth(arr1, arr2[:mid2+1], m, n-mid2, k-(n-mid2))\n\n# Example usage:\nprint(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5))  # Output: 6\nprint(find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7))  # Output: 256\nprint(find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6))  # Output: 8",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def armstrong_number(number):\n    # Convert the number to string to iterate over each digit\n    num_str = str(number)\n    length = len(num_str)\n    \n    # Calculate the sum of digits raised to the power of the number's length\n    total_sum = sum(int(digit) ** length for digit in num_str)\n    \n    # Check if the calculated sum equals the original number\n    return total_sum == number",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    avg = total_sum / n\n    return (total_sum, avg)",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Even(n):\n    \"\"\"\n    Check if the given number n is even using bitwise operator.\n    \n    Args:\n    n : int - The number to check\n    \n    Returns:\n    bool - True if n is even, False otherwise.\n    \"\"\"\n    return n & 1 == 0",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]