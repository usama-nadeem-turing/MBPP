[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_Occ(strng, char):\n    new_str = \"\"\n    i = 0\n    while i < len(strng):\n        if strng[i] != char:\n            new_str += strng[i]\n        i += 1\n    return new_str[:-2]\n\n# Test cases\nprint(remove_Occ(\"hello\", \"l\"))  # Expected output: \"heo\"\nprint(remove_Occ(\"abcda\", \"a\"))  # Expected output: \"bcd\"\nprint(remove_Occ(\"PHP\", \"P\"))   # Expected output: \"H\"",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_matrix(matrix):\n    # Sort each row based on the sum of elements and then combine them back into the same matrix\n    sorted_matrix = [[row[i] for row in matrix] for i in range(len(matrix[0]))]\n    return sorted(sorted_matrix)",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\nimport re\n\ndef count_common(dictionary):\n    # Use regex to find all words and convert them to lowercase for comparison\n    words = [word.lower() for word in re.findall(r'\\b\\w+\\b', \" \".join(dictionary))]\n    \n    # Count the frequency of each word using Counter\n    word_count = Counter(words)\n    \n    # Find the maximum frequency\n    max_freq = max(word_count.values())\n    \n    # Filter words with the maximum frequency\n    common_words = [(word, freq) for word, freq in word_count.items() if freq == max_freq]\n    \n    return common_words",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Volume(a,b,c):\n    # Calculate the area of the base triangle using Heron's formula\n    s = (a + b + c) / 2\n    area_triangle = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    # Volume is base area multiplied by height\n    V = area_triangle * c\n    return V",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef split_lowerstring(input_str):\n    # Splitting the input string using regex to match sequences of lowercase characters\n    return re.split(r'[a-z]+', input_str)",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_lowercase_underscore(text):\n    # Check if all characters in the string are lowercase and separated by underscores\n    return 'Found a match!' if '_' in text and text == ''.join(char for char in text.lower() if char.isalpha()) else 'Not matched!'",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side_length):\n    return side_length * 4",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_dirty_chars(source_str, dirty_str):\n    result = \"\"\n    for char in source_str:\n        if char not in dirty_str:\n            result += char\n    return result",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_duplicate(arr):\n    # Create an empty set to store unique elements\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    \n    return False",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_woodall(num):\n    \"\"\"\n    This function checks if a given number is part of the Woodall numbers.\n    A Woodall number is defined as num = 2^n - 1 for some integer n >= 1.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if num is a Woodall number, False otherwise.\n    \"\"\"\n    # Calculate n such that 2^n - 1 equals the input number\n    n = 1\n    while (2**n - 1) < num:\n        n += 1\n    \n    # Check if the calculated n gives us the correct number\n    return num == (2**(n-1)) - 1",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiples_of_num(m, n):\n    return [i*n for i in range(1, m+1)]",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_Sum(list_of_lists):\n    # Calculate the sum for each sublist and store it as an element in a new list\n    sums = [sum(sublist) for sublist in list_of_lists]\n    # Return the maximum value from the calculated sums\n    return max(sums)",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def binary_to_decimal(binary_number):\n    # Convert binary string to decimal integer\n    decimal = int(binary_number, 2)\n    return decimal\n\n# Test cases\nassert binary_to_decimal(\"100\") == 4\nassert binary_to_decimal(\"1011\") == 11\nassert binary_to_decimal(\"1101101\") == 109",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_Product() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_Product() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_Product() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef find_Product(arr: List[int]) -> int:\n    product = 1\n    for num in arr:\n        if arr.count(num) == 1:\n            product *= num\n    return product",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def check_k_elements(tuples_list, target_k):\n    \"\"\"\n    Checks if every tuple in the given list contains exactly target_k unique elements.\n    \n    Parameters:\n    tuples_list (list of tuples): The list of tuples to be checked.\n    target_k (int): The number of unique elements each tuple must contain.\n    \n    Returns:\n    bool: True if every tuple contains exactly target_k unique elements, False otherwise.\n    \"\"\"\n    for item in tuples_list:\n        if len(set(item)) != target_k:\n            return False\n    return True\n\n# Test Cases\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove(lst):\n    \"\"\"\n    Remove all digits from each string in the given list.\n    \n    Parameters:\n    lst (list): A list of strings\n    \n    Returns:\n    list: The modified list with all digits removed from each string\n    \"\"\"\n    return [s.replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '') for s in lst]\n\n# Check function with provided data points\nprint(remove(['4words', '3letters', '4digits']))  # Expected output: ['words', 'letters', 'digits']\nprint(remove(['28Jan', '12Jan', '11Jan']))         # Expected output: ['Jan', 'Jan', 'Jan']\nprint(remove(['wonder1', 'wonder2', 'wonder3']))   # Expected output: ['wonder', 'wonder', 'wonder']",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binomial_Coeff(n, k):\n    if n < k:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - get_Odd_Occurrence() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - get_Odd_Occurrence() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - get_Odd_Occurrence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def get_Odd_Occurrence(arr):\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            result ^= arr[i]\n    return result\n\n# Test cases\nprint(get_Odd_Occurrence([1,2,3,1,2,3,1]))  # Output: 1\nprint(get_Odd_Occurrence([1,2,3,2,3,1,3]))  # Output: 3\nprint(get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2]))  # Output: 5",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def count_substring_with_equal_ends(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        # Check if substring starting at index i has equal ends\n        if s[i] == s[i-1]:\n            count += 1\n    \n    return count\n\n# Test cases\nprint(count_substring_with_equal_ends(\"abc\"))  # Expected output: 3\nprint(count_substring_with_equal_ends(\"abcda\"))  # Expected output: 6\nprint(count_substring_with_equal_ends(\"ab\"))  # Expected output: 2",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - func() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - func() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - func() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "import heapq\nfrom typing import List\n\ndef func(lst_of_lists: List[List[int]]) -> List[int]:\n    # Create a min-heap for each list where we store tuples (value, index)\n    # The priority is based on value so that the smallest number first.\n    min_heap = []\n    result = []\n\n    for i, lst in enumerate(lst_of_lists):\n        for j, num in enumerate(lst):\n            if len(min_heap) < 5:\n                heapq.heappush(min_heap, (num, i, j))\n            else:\n                if num > min_heap[0][0]:\n                    heapq.heapreplace(min_heap, (num, i, j))\n\n    # Extract elements from the heap into the result array,\n    # which contains indices of the original arrays instead of values.\n    while min_heap:\n        num, idx, col_idx = heapq.heappop(min_heap)\n        result.append(idx + col_idx)\n\n    return result",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_Prime_Factors(n):\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            return i\n        i += 1\n    return None",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_To_Binary(decimal_number):\n    # Convert the given decimal number to binary and store it in a variable\n    binary_number = bin(decimal_number)\n    # Remove the '0b' prefix from the binary string before returning it\n    return binary_number[2:]",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_missing(arr, n):\n    # Calculate the expected sum of first 'n' natural numbers\n    expected_sum = n * (n + 1) // 2\n    \n    # Sum up all elements in the given array\n    actual_sum = sum(arr)\n    \n    # The difference between expected sum and actual sum is the missing number\n    return expected_sum - actual_sum",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rect_num(n):\n    # Calculate the n-th rectangular number using formula\n    return n * (n + 1)",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: string index out of range"
    ],
    "generated_code": "def find_Nth_Digit(x1, x2, n):\n    \"\"\"\n    This function takes three arguments:\n    - x1 and x2: Two positive integers representing the numerator and denominator respectively.\n    - n: An integer indicating which digit from the fractional part we want to retrieve.\n    \n    It returns the nth digit in the decimal expansion of the fraction 'x1/x2'.\n    \n    Example usage:\n    >>> find_Nth_Digit(1, 2, 1)\n    5\n    >>> find_Nth_Digit(3, 5, 1)\n    6\n    >>> find_Nth_Digit(5, 6, 5)\n    3\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"Greatest Common Divisor.\"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        \"\"\"Least Common Multiple\"\"\"\n        return a * b // gcd(a, b)\n    \n    # Convert numerator and denominator to string representation for easier manipulation\n    num_str = str(x1 / x2)\n    start_index = len(num_str) - 2  # Subtract 2 because of '.'\n    \n    if n >= start_index + 1:\n        # If n is at least as large as the number of digits after the decimal point\n        # Get the nth character directly\n        return int(num_str[n-1])\n    else:\n        # Otherwise, get the substring starting from position n and convert it back to an integer\n        return int(num_str[start_index+n])\n\n# Test cases\nprint(find_Nth_Digit(1, 2, 1))  # Expected output: 5\nprint(find_Nth_Digit(3, 5, 1))  # Expected output: 6\nprint(find_Nth_Digit(5, 6, 5))  # Expected output: 3",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'str' and 'int'"
    ],
    "generated_code": "def sort_mixed_list(lst):\n    return sorted(lst)\n\n# Test cases\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))  # [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))  # [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))  # [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for /: 'list' and 'list'",
      "Test 2: FAIL - unsupported operand type(s) for /: 'list' and 'list'",
      "Test 3: FAIL - unsupported operand type(s) for /: 'list' and 'list'"
    ],
    "generated_code": "from typing import List\n\ndef div_even_odd(numbers: List[int]) -> int:\n    return numbers[::2] / numbers[1::2]",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef rearange_string(s):\n    # Count occurrences of each character in the string\n    char_count = Counter(s)\n    \n    result_str = ''\n    available_chars = set()\n    \n    for char, count in sorted(char_count.items(), key=lambda x: -x[1]):\n        if count > len(result_str) // 2:\n            return None  # Not enough characters left to satisfy the condition\n    \n        while count > 0 and 'a' <= char <= 'z':\n            result_str += char\n            count -= 1\n        \n        if not 'a' <= char <= 'z':\n            available_chars.add(char)\n        \n        if 'a' <= char <= 'z':\n            count -= min(count // 2 + 1, len(available_chars))\n    \n    return result_str",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    return dict(Counter([item for sublist in list_of_lists for item in sublist]))",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Test cases\nprint(filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Expected output: [2, 4, 6, 8, 10]\nprint(filter_evennumbers([10,20,45,67,84,93]))            # Expected output: [10, 20, 84]\nprint(filter_evennumbers([5,7,9,8,6,4,3]))               # Expected output: [8, 6, 4]",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Sum(arr, n):\n    count = {}\n    \n    # Count the occurrences of each element in the array\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Calculate the sum of all elements with odd counts\n    total_sum = sum(num * count[num] for num in count if count[num] % 2 != 0)\n    \n    return total_sum",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    pattern = r\"\\b[a-z]+_[a-z]+\\b\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n\n# Test Cases\nprint(text_match(\"aab_cbbbc\")) # Expected output: Found a match!\nprint(text_match(\"aab_Abbbc\")) # Expected output: Not matched!\nprint(text_match(\"Aaab_abbbc\")) # Expected output: Not matched!",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_string(text):\n    \"\"\"\n    This function takes a string and checks if it starts with 'python'. \n    If it does, it returns \"Found a match!\" followed by the entire string.\n    Otherwise, it returns \"Not matched!\".\n    \n    Examples:\n    >>> text_match_string(\" python\")\n    'Not matched!'\n    >>> text_match_string(\"python\")\n    'Found a match!'\n    >>> text_match_string(\"  lang\")\n    'Not matched!'\n    \"\"\"\n    pattern = r\"^python\"\n    result = re.match(pattern, text)\n    return f'Found a match!\\n{text}' if result else 'Not matched!'",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from math import gcd\nfrom functools import reduce\n\ndef get_gcd(nums):\n    # Use reduce to apply gcd across all numbers in the list\n    return reduce(gcd, nums)",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'test_distinct' is not defined",
      "Test 2: FAIL - name 'test_distinct' is not defined",
      "Test 3: FAIL - name 'test_distinct' is not defined"
    ],
    "generated_code": "def is_all_unique(nums):\n    \"\"\"\n    Check if all elements in the list 'nums' are unique.\n    \n    Args:\n    nums (list): A list of integers.\n    \n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True\n\n# Test cases\nassert is_all_unique([1,5,7,9]) == True\nassert is_all_unique([2,4,5,5,7,9]) == False\nassert is_all_unique([1,2,3]) == True",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def compute_Last_Digit(a, b):\n    # Calculate factorials modulo 10 since we only need the last digit\n    factorial_a = pow(a, len(str(b)), 10)\n    factorial_b = pow(b, len(str(a)), 10)\n    \n    # Return the last digit of the division of two factorials\n    return (factorial_a // factorial_b) % 10",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(number):\n    # XOR the number with 1 and right shift it by 1\n    result = number ^ 1\n    return result >> 1",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def specified_element(lst, index):\n    return lst[index][:]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length_list(lst):\n    return min(lst, key=lambda x: len(x), default=[])\n\n# Test cases\nprint(min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: (1, [0])\nprint(min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])) # Expected output: (1, [1])\nprint(min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])) # Expected output: (2, [1, 2])",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a, b, c):\n    # Check if all three sides are equal\n    return a == b and b == c",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'check_Eequality' is not defined. Did you mean: 'check_Equality'?"
    ],
    "generated_code": "def check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Test cases\nprint(check_Equality(\"abcda\"))  # Expected output: Equal\nprint(check_Equality(\"ab\"))     # Expected output: Not Equal\nprint(check_Eequality(\"mad\"))   # Expected output: Not Equal",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def counting_sort(arr):\n    # Find the maximum value in the array for the range of counts\n    max_val = max(arr)\n    \n    # Initialize count array with zeros for each possible value from 0 to max_val\n    count = [0] * (max_val + 1)\n    \n    # Count occurrences of each number in the input array\n    for num in arr:\n        count[num] += 1\n    \n    # Modify the count array such that each element at each index \n    # stores the sum of previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Output array that will have sorted arr\n    output = [0] * len(arr)\n    \n    # Build the output array by placing the elements at their correct positions\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    return output\n\n# Test cases\nprint(counting_sort([1,23,4,5,6,7,8]))  # Expected output: [1, 4, 5, 6, 7, 8, 23]\nprint(counting_sort([12, 9, 28, 33, 69, 45]))  # Expected output: [9, 12, 28, 33, 45, 69]\nprint(counting_sort([8, 4, 14, 3, 2, 1]))  # Expected output: [1, 2, 3, 4, 8, 14]",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_gp(t,n,r):\n    return r**(t-1) * n**t",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(num):\n    \"\"\"\n    This function checks if the given number 'num' is equal to one less than twice its reverse.\n    \n    Args:\n    num (int): The input number to check.\n    \n    Returns:\n    bool: True if 'num' satisfies the condition, False otherwise.\n    \"\"\"\n    reversed_num = int(str(num)[::-1])\n    return num == 2 * reversed_num - 1\n\n# Test cases\nprint(check(70))  # Expected output: False\nprint(check(23))  # Expected output: False\nprint(check(73))  # Expected output: True",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Max_Num(digits, length):\n    # Convert list of digits into a single string and sort it in descending order.\n    sorted_digits = ''.join(sorted(map(str, digits), reverse=True))\n    \n    # If the length of the sorted string is less than the required length, append leading zeros.\n    if len(sorted_digits) < length:\n        sorted_digits = '0' * (length - len(sorted_digits)) + sorted_digits\n    \n    # Return the result as an integer.\n    return int(sorted_digits)",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'opposite_Signs' is not defined",
      "Test 2: FAIL - name 'opposite_Signs' is not defined",
      "Test 3: FAIL - name 'opposite_Signs' is not defined"
    ],
    "generated_code": "def opposite_signs(a, b):\n    \"\"\"\n    Check if the product of two numbers is negative.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    bool: True if the product of a and b is negative, False otherwise.\n    \"\"\"\n    # Return True if the product of 'a' and 'b' is less than zero\n    return a * b < 0",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_octagonal(n):\n    \"\"\"\n    Finds the n-th octagonal number.\n    \n    Args:\n    n (int): The position in the sequence of octagonal numbers.\n    \n    Returns:\n    int: The n-th octagonal number.\n    \"\"\"\n    # Calculate the formula for n-th octagonal number\n    return 3*n*(n-1)//2 + 1\n\n# Test cases to verify the correctness of the function\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_len_sub(arr: List[int], k: int) -> int:\n    n = len(arr)\n    dp = [0] * n\n    max_len = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= k and i - j > dp[j]:\n                dp[i] = dp[j] + 1\n                \n        if dp[i] > max_len:\n            max_len = dp[i]\n            \n    return max_len",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substrings' is not defined",
      "Test 2: FAIL - name 'count_Substrings' is not defined",
      "Test 3: FAIL - name 'count_Substrings' is not defined"
    ],
    "generated_code": "def count_substrings(s, n):\n    def is_valid(i, j):\n        return s[i:j+1].count(str(j-i)) == i and int(s[i:j+1]) % len(s[i:j+1]) == 0\n    \n    res = 0\n    for start in range(n-1):\n        for end in range(start + 1, n + 1):\n            if is_valid(start, end):\n                res += 1\n    return res",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(nums):\n    # Return the minimum value from the given list of numbers.\n    return min(nums)",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_difference(pairs):\n    # Initialize variables to store the minimum value found so far and the maximum difference\n    min_value = float('inf')\n    max_diff = 0\n    \n    for pair in pairs:\n        # Update the minimum value if the current element is smaller than it\n        if pair[0] < min_value:\n            min_value = pair[0]\n        \n        # Calculate the difference between the current pair's second element and the minimum value\n        diff = pair[1] - min_value\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if isinstance(i, int):  # Base case: integer found\n            total += i\n        else:  # Recursive case: nested list found\n            total += recursive_list_sum(i)  # Sum all integers in the nested list\n    return total",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a given list.\n    \n    Args:\n    lst (list): A list of integers.\n    \n    Returns:\n    int: The count of positive numbers in the list.\n    \"\"\"\n    return sum(1 for x in lst if x > 0)",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef bell_number(n):\n    # Initialize Bell triangle with row length n+1\n    bell_triangle = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Fill the first column and the first row which is always 1\n    for i in range(n+1):\n        bell_triangle[0][i] = 1\n    \n    # Build the Bell triangle\n    for line in range(1, n+1):\n        for position in range(line, -1, -1):\n            bell_triangle[line][position] = bell_triangle[line][position + 1] + \\\n                                            bell_triangle[line - 1][position]\n    \n    return bell_triangle[n][0]\n\n# Test cases\nprint(bell_number(2))   # Expected output: 2\nprint(bell_number(10))  # Expected output: 115975\nprint(bell_number(56))  # Expected output: 6775685320645824322581483068371419745979053216268760300",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(A):\n    \"\"\"\n    Check if the given list A is monotonic.\n    \n    Parameters:\n    A (list): The input list of integers.\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(A) <= 2:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing\n\n# Test cases\nprint(is_Monotonic([6, 5, 4, 4]))  # Expected output: True\nprint(is_Monotonic([1, 2, 2, 3]))  # Expected output: True\nprint(is_Monotonic([1, 3, 2]))     # Expected output: False",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_sublist(main_list, sub_list):\n    return sub_list in main_list",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_equal(tuple_list, expected_length):\n    \"\"\"\n    Check if all tuples in the list have the same length.\n    \n    Parameters:\n    tuple_list (list): List of tuples.\n    expected_length (int): The expected length of each tuple.\n    \n    Returns:\n    str: \"All tuples have same length\" if they do, otherwise \"All tuples do not have same length\".\n    \"\"\"\n    # Check if the length of each tuple matches the expected length\n    for tup in tuple_list:\n        if len(tup) != expected_length:\n            return f\"All tuples do not have same length\"\n    return \"All tuples have same length\"\n\n# Test cases\nprint(get_equal([(11, 22, 33), (44, 55, 66)], 3))  # Output: \"All tuples have same length\"\nprint(get_equal([(1, 2, 3), (4, 5, 6, 7)], 3))     # Output: \"All tuples do not have same length\"\nprint(get_equal([(1, 2), (3, 4)], 2))              # Output: \"All tuples have same length\"",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def comb_sort(lst):\n    n = len(lst)\n    gap = n\n    shrink_factor = 1.3\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        \n        for i in range(n - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n    \n    return lst",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dif_Square(n):\n    # If n is negative or even, it cannot be represented as a difference of two squares.\n    if n < 0 or n % 2 == 0:\n        return False\n    \n    # A number can be expressed as a difference of two squares if and only if it's not of the form 4^k*(8m+7)\n    return pow(4, int((n-7)/7), 16) != 1",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import re\n\ndef multiple_split(input_string):\n    # Define the pattern for splitting based on newlines followed by optional whitespace, then a colon, and finally another newline\n    pattern = r'(\\s*\\n\\s*:)\\s*'\n    # Use re.split() to split the input string based on the defined pattern\n    result = re.split(pattern, input_string)\n    # Filter out empty strings from the result list\n    return [item for item in result if item != '']  # Ensure not to include None if it appears as part of result\n\n# Test cases to verify the correctness of the function\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.'], \"Test case 1 failed\"\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.'], \"Test case 2 failed\"\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.'], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_samepatterns(patterns, strings):\n    for pattern, string in zip(patterns, strings):\n        if len(set(pattern)) != len(pattern) or len(set(string)) != len(string):\n            return False\n    return True",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_tuples(tuples_list, divisor):\n    result = []\n    for tup in tuples_list:\n        if all(x % divisor == 0 for x in tup):\n            result.append(tup)\n    return str(result)\n\nprint(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6))  # Output: '[(6, 24, 12)]'\nprint(find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5))      # Output: '[(5, 25, 30)]'\nprint(find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4))   # Output: '[(8, 16, 4)]'",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Squares(m, n):\n    # Calculate the total number of squares in a rectangle with m rows and n columns\n    total_squares = (m * (m + 1) * 2 // 3) * ((n * (n + 1) * 2 // 3))\n    return total_squares\n\n# Test cases\nprint(count_Squares(4, 3))  # Expected output: 20\nprint(count_Squares(2, 2))  # Expected output: 5\nprint(count_Squares(1, 1))  # Expected output: 1",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Diff(num):\n    \"\"\"\n    This function takes an integer 'num' as input and returns True if the difference between the sum of its even and odd digits is not zero, otherwise it returns False.\n    Example usage:\n    >>> is_Diff(12345)\n    False\n    >>> is_Diff(1212112)\n    True\n    >>> is_Diff(1212)\n    False\n    \"\"\"\n    # Initialize sums for even and odd digits\n    evensum = 0\n    oddsum = 0\n    \n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            evensum += digit\n        else:\n            oddsum += digit\n        num //= 10\n    \n    # Check if the difference between even and odd sums is not zero\n    return evensum != oddsum\n\n# Test cases\nprint(is_Diff(12345))   # Expected output: False\nprint(is_Diff(1212112)) # Expected output: True\nprint(is_Diff(1212))    # Expected output: False",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_With_Odd_SetBits(n):\n    \"\"\"\n    Counts how many numbers from 1 to n have an odd number of set bits in their binary representation.\n    \n    Parameters:\n    n (int): The upper limit of the range to check\n    \n    Returns:\n    int: Count of numbers with an odd number of set bits in their binary representation\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n\n# Check function with provided data points\nassert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def word_len(word):\n    # Calculate the length of the input string\n    word_length = len(word)\n    \n    # Check if the length is even or odd and return the appropriate result\n    return word_length % 2 == 0",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tetrahedral_number(n):\n    # Formula to calculate the n-th tetrahedral number is n * (n + 1) * (n + 2) / 6\n    result = n * (n + 1) * (n + 2) / 6\n    return float(result)",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def zip_tuples(tup1, tup2):\n    # Create empty lists for storing the zipped pairs\n    result = []\n    \n    # Iterate over the elements of both tuples\n    for x, y in zip(tup1, tup2):\n        # Append each pair as a tuple to the result list\n        result.append((x, y))\n    \n    # Return the resulting list of zipped pairs\n    return result",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Char(s):\n    result = \"\"\n    for char in s:\n        result += str(ord(char))\n    return int(result)\n\n# Test cases\nprint(get_Char(\"abc\"))  # Expected output: 165 (since 'a' -> 97, 'b' -> 98, and 'c' -> 99)\nprint(get_Char(\"gfg\"))  # Expected output: 109 (since 'g' -> 103, 'f' -> 102, and 'g' -> 103)\nprint(get_Char(\"ab\"))   # Expected output: 4 (since 'a' -> 97, and 'b' -> 98)",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequence(n):\n    # Initialize an array to store the first two numbers of the sequence\n    seq = [0, 1]\n    \n    # Generate the sequence up to the nth element\n    for i in range(2, n + 1):\n        seq.append(seq[-1] + seq[-2])\n    \n    # Return the n-th element of the sequence\n    return seq[n]\n\n# Test the function with provided data points\nprint(sequence(10))  # Expected output: 6\nprint(sequence(2))   # Expected output: 1\nprint(sequence(3))   # Expected output: 2",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius**2",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def centered_hexagonal_number(n):\n    # Formula for nth centered hexagonal number is n*(2*n-1)+1\n    return n * (2 * n - 1) + 1",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_count(lst):\n    from collections import Counter\n    return dict(Counter(lst))",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def closest_num(n):\n    # Find the largest integer less than n\n    closest = None\n    for i in range(n-1, 0, -1):\n        if i > 0:\n            closest = i\n            break\n    return closest",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Find the maximum length among all words in the list\n    max_length = max(len(word) for word in words)\n    return max_length",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_substring(list_of_strings, substring):\n    for value in list_of_strings:\n        if substring in value:\n            return True\n    return False",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_undulating(number):\n    str_num = str(number)\n    if len(str_num) < 2:\n        return False\n    last_digit = int(str_num[0])\n    for i in range(1, len(str_num)):\n        current_digit = int(str_num[i])\n        if current_digit != last_digit + 1 and current_digit != last_digit - 1:\n            return False\n        last_digit = current_digit\n    return True",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_minimum(tuples_list):\n    # Extracting tuples and sorting them based on the second element of each tuple\n    sorted_tuples = sorted(tuples_list)\n    \n    # Finding the first tuple after sorting, which has the smallest second element\n    min_tuple = sorted_tuples[0]\n    \n    # Returning the first element of the minimum tuple as the answer\n    return min_tuple[0]\n\n# Example usage:\nprint(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])) \n# Expected output: Varsha\n\nprint(index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]))\n# Expected output: Dawood\n\nprint(index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]))\n# Expected output: Ayesha",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Min_Length(sublists):\n    min_length = float('inf')\n    for sublist in sublists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_lists(lists):\n    from collections import defaultdict\n    \n    # Initialize a dictionary to hold frequency counts for each element\n    freq = defaultdict(int)\n    \n    # Iterate over each sublist in the input list\n    for lst in lists:\n        # Update the frequency count for each element in the current sublist\n        for num in lst:\n            freq[num] += 1\n            \n    return dict(freq)  # Convert defaultdict back to a regular dictionary before returning",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'reduce' is not defined"
    ],
    "generated_code": "def multiply_num(numbers):\n    \"\"\"\n    Multiplies all the numbers in the given list and divides the result by the length of the list.\n    \n    Parameters:\n    numbers (list): A list of integers\n    \n    Returns:\n    float: The multiplication result divided by the list's length.\n    \"\"\"\n    total = reduce(lambda x, y: x * y, numbers) # Multiply all numbers in the list\n    return total / len(numbers) # Divide the product by the length of the list\n\n# Check function with provided data points\nprint(multiply_num([8, 2, 3, -1, 7])) == -67.2\nprint(multiply_num([-10, -20, -30])) == -2000.0\nprint(multiply_num([19, 15, 18])) == 1710.0",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent.\n    \n    Args:\n        decimal_number (int): The decimal number to be converted.\n        \n    Returns:\n        str: The binary representation of the input decimal number.\n    \"\"\"\n    return bin(decimal_number)[2:]  # Using built-in bin() function which returns a string prefixed with '0b'. We slice it to remove the prefix and then use the format method to replace spaces with underscores for cleaner output.",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def next_smallest_palindrome(num):\n    \"\"\"\n    Finds and returns the next smallest palindrome after a given number.\n    \n    Parameters:\n    num (int): The input integer from which to find the next smallest palindrome.\n    \n    Returns:\n    int: The next smallest palindrome after the input number.\n    \"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    # Find the next palindrome greater than the input number\n    while True:\n        if is_palindrome(num + 1):\n            return num + 1\n        num += 1\n\n# Check function with provided data points\nprint(next_smallest_palindrome(99))   # Expected output: 101\nprint(next_smallest_palindrome(1221)) # Expected output: 1331\nprint(next_smallest_palindrome(120))  # Expected output: 121",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def kth_element(arr, n, k):\n    # Sort the array and get the kth smallest element\n    arr.sort()\n    return arr[k-1]\n\n# Test cases\nprint(kth_element([12,3,5,7,19], 5, 2))  # Output: 3\nprint(kth_element([17,24,8,23], 4, 3))   # Output: 8\nprint(kth_element([16,21,25,36,4], 5, 4))# Output: 36",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def snake_to_camel(snake_str):\n    return ''.join(word.capitalize() or '_' for word in snake_str.split('_'))",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def eulerian_num(n, k):\n    dp = [[0 for x in range(k + 1)] for x in range(n + 1)]\n    \n    # Base case initialization\n    for i in range(n + 1):\n        dp[i][0] = 1\n    \n    # Fill dp table using bottom-up approach\n    for i in range(1, n + 1):\n        for j in range(1, min(i, k) + 1):\n            if j == 1:\n                dp[i][j] += dp[i - 1][j]\n            else:\n                dp[i][j] += dp[i - 1][j - 1]\n    \n    return dp[n][k]\n\n# Test cases\nprint(eulerian_num(3, 1))  # Expected output: 4\nprint(eulerian_num(4, 1))  # Expected output: 11\nprint(eulerian_num(5, 3))  # Expected output: 26",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(lst):\n    \"\"\"\n    Count and return the number of True elements in the provided list.\n    \n    Parameters:\n    lst (list): A list containing boolean values\n    \n    Returns:\n    int: The number of True elements in the list\n    \"\"\"\n    return sum(lst)\n\n# Test cases\nprint(count([True, False, True]))  # Expected output: 2\nprint(count([False, False]))       # Expected output: 0\nprint(count([True, True, True]))   # Expected output: 3",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_lists(list1, tuple1):\n    # Convert the tuple into a list and extend it with elements from the list\n    extended_list = list(tuple1) + list1\n    # Return the new combined list\n    return tuple(extended_list)\n\n# Test cases\nprint(add_lists([5, 6, 7], (9, 10)))  # Expected output: (9, 10, 5, 6, 7)\nprint(add_lists([6, 7, 8], (10, 11)))  # Expected output: (10, 11, 6, 7, 8)\nprint(add_lists([7, 8, 9], (11, 12)))  # Expected output: (11, 12, 7, 8, 9)",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Hexadecimal(start, end):\n    # Calculate the number of valid hexadecimal numbers in the specified range\n    count = (end - start + 1) // 10\n    if (start + 9 * (count - 1)) < end:\n        count += 1\n    return count\n\n# Test cases\nprint(count_Hexadecimal(10, 15))  # Expected output: 6\nprint(count_Hexadecimal(2, 4))    # Expected output: 0\nprint(count_Hexadecimal(15, 16))  # Expected output: 1",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given",
      "Test 2: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given",
      "Test 3: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given"
    ],
    "generated_code": "from heapq import heappush, heappop\n\ndef merge_sorted_list(sorted_lists):\n    min_heap = []\n    \n    # Add all elements from each list in the heap along with their original index\n    for i, lst in enumerate(sorted_lists):\n        for j, val in enumerate(lst):\n            heappush(min_heap, (val, i, j))\n            \n    result = []\n    while min_heap:\n        val, lst_idx, idx_in_lst = heappop(min_heap)\n        result.append(val)\n        \n        # If there's a next element in the same list, add it back to the heap\n        if idx_in_lst + 1 < len(sorted_lists[lst_idx]):\n            next_val = sorted_lists[lst_idx][idx_in_lst+1]\n            heappush(min_heap, (next_val, lst_idx, idx_in_lst+1))\n    \n    return result",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Equivalent(binary_string, length):\n    # Convert the input binary string to an integer for easy manipulation\n    num = int(binary_string, 2)\n    \n    # Check if the number is odd using the modulus operator\n    if num % 2 == 1:\n        return length\n    \n    # Iterate through each rotation and check if it's odd\n    for i in range(length // 2 + 1):\n        rotated_num = int(binary_string[i:length] + binary_string[0:i], 2)\n        \n        # If the rotated number is odd, break out of the loop\n        if rotated_num % 2 == 1:\n            return length - i\n            \n    # Return 0 if no odd equivalent rotation is found\n    return 0",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_missing(list_of_ranges, start_range, end_range):\n    result = []\n    for current_start, current_end in sorted(list_of_ranges):\n        if start_range <= current_start < end_range:\n            continue\n        elif start_range > current_end + 1:\n            result.append((current_start, min(end_range, current_end + 1)))\n        else:\n            if start_range == current_start:\n                result.append((min(start_range, current_end + 1), max(current_start - 1, end_range)))\n            else:\n                result.append((start_range, min(current_start - 1, end_range)))\n            break\n    while start_range < end_range:\n        result.append((start_range, end_range))\n        start_range += 1\n    return result",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_in_nested_lists(lists):\n    # Flatten all sublists into one list and remove duplicates\n    unique_elements = set()\n    \n    for sublist in lists:\n        unique_elements.update(sublist)\n    \n    return unique_elements",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'perimeter' is not defined",
      "Test 2: FAIL - name 'perimeter' is not defined",
      "Test 3: FAIL - name 'perimeter' is not defined"
    ],
    "generated_code": "def calculate_perimeter(r, h):\n    # Calculate the circumference of the base circle using π * r\n    circum_circle = 3.14159 * r\n    \n    # The total perimeter is twice the circumference plus the two times the height\n    perimeter_cylinder = 2 * circum_circle + 2 * h\n    return perimeter_cylinder\n\n# Test cases\nprint(calculate_perimeter(2, 4))   # Expected output: 12\nprint(calculate_perimeter(1, 2))   # Expected output: 6\nprint(calculate_perimeter(3, 1))   # Expected output: 8",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'itertools' is not defined",
      "Test 2: FAIL - name 'itertools' is not defined",
      "Test 3: FAIL - name 'itertools' is not defined"
    ],
    "generated_code": "def assign_freq(tuples_list):\n    # Find unique tuples and their counts using Counter from collections module\n    freqs = ((t, len(list(group))) for t, group in itertools.groupby(sorted(set(tuples_list)), lambda x: x))\n    \n    # Convert tuples back into lists of frequencies\n    result = [list(freq) for freq in freqs]\n    \n    return result",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'empty_dit' is not defined",
      "Test 2: FAIL - name 'empty_dit' is not defined",
      "Test 3: FAIL - name 'empty_dit' is not defined"
    ],
    "generated_code": "def is_all_dicts_empty(dicts_list):\n    \"\"\"\n    Check if every dictionary within a given list of dictionaries is empty.\n    \n    Args:\n    dicts_list (list): A list containing dictionaries.\n    \n    Returns:\n    bool: True if every dictionary is empty, False otherwise.\n    \"\"\"\n    return all(not d for d in dicts_list)\n\n# Test cases\nprint(is_all_dicts_empty([{}, {}, {}]))  # Expected output: True\nprint(is_all_dicts_empty([{1, 2}, {}, {}]))  # Expected output: False\nprint(is_all_dicts_empty([]))  # Expected output: True",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))\n\n# Test cases\nprint(tuple_to_int((1,2,3)))  # Expected output: 123\nprint(tuple_to_int((4,5,6)))  # Expected output: 456\nprint(tuple_to_int((5,6,7)))  # Expected output: 567",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_to_float(lst):\n    result = []\n    for item in lst:\n        if isinstance(item[0], str) and isinstance(item[1], str):\n            try:\n                converted_value_1 = float(item[0])\n                converted_value_2 = float(item[1])\n                result.append((converted_value_1, converted_value_2))\n            except ValueError:\n                continue\n    return result",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_list(input_string):\n    # Split the input string by spaces and return the result as a list\n    return input_string.split()",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search(arr, n): \n    # Your implementation here\n    for i in range(1, n): \n        if arr[i] != arr[i - 1]: \n            return arr[i]\n    return arr[n - 1]",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_product_tuple(tuples_list):\n    # Calculate the product for each tuple and return the maximum value\n    return max(tuple[0] * tuple[1] for tuple in tuples_list)\n\n# Test cases\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Expected output: 36\nprint(max_product_tuple([(10, 20), (15, 2), (5, 10)]))        # Expected output: 200\nprint(max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]))  # Expected output: 484",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_triplet(arr, target_sum, x, y):\n    n = len(arr)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            if arr[i] == x and arr[j] == y:\n                return True\n            for k in range(j + 1, n):\n                if arr[k] == arr[i] or arr[k] == arr[j]:\n                    continue\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False\n\n# Example usage:\nprint(check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0))  # Output: True\nprint(check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0))  # Output: False\nprint(check_triplet([10, 4, 2, 3, 5], 5, 15, 0))         # Output: True",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def smartNumber(n):\n    # Initialize variables\n    count = 0\n    current_num = 1\n    \n    # Loop until we reach the nth smart number\n    while True:\n        if is_smart_number(current_num):\n            count += 1\n            if count == n:\n                return current_num\n        current_num += 1\n\n# Function to check if a number is smart\ndef is_smart_number(num):\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0 and num // i != i:\n            return False\n    return True",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_divisors' is not defined",
      "Test 2: FAIL - name 'sum_divisors' is not defined",
      "Test 3: FAIL - name 'sum_divisors' is not defined"
    ],
    "generated_code": "def is_amicable_number(a, b):\n    def sum_divisors(n):\n        divisors = set()\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return sum(divisors)\n\n    return sum_divisors(a) != sum_divisors(b) and sum_divisors(b) != sum_divisors(a) and a != b\n\ndef amicable_numbers_sum(number):\n    result = 0\n    for i in range(1, number):\n        j = sum_divisors(i)\n        if j <= number and sum_divisors(j) == i and i != j:\n            result += i\n    return result",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef angle_complex(real_part, imaginary_part):\n    \"\"\"\n    Calculates the phase angle in radians of a complex number.\n    \n    Parameters:\n    real_part (float): The real part of the complex number.\n    imaginary_part (float): The imaginary part of the complex number.\n    \n    Returns:\n    float: The phase angle in radians.\n    \"\"\"\n    return cmath.phase(complex(real_part, imaginary_part))\n\n# Test cases\nassert abs(angle_complex(0, 1) - 1.5707963267948966) < 1e-9\nassert abs(angle_complex(2, 1) - 0.4636476090008061) < 1e-9\nassert abs(angle_complex(0, 2) - 1.5707963267948966) < 1e-9\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_length(binary_str, n):\n    zero_count = 0\n    one_count = 0\n    result = 0\n    \n    for i in range(n):\n        if binary_str[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        current_diff = zero_count - one_count\n        result = max(result, current_diff)\n    \n    return result\n\n# Test cases\nprint(find_length(\"11000010001\", 11))  # Expected output: 6\nprint(find_length(\"10111\", 5))         # Expected output: 1\nprint(find_length(\"11011101100101\", 14))  # Expected output: 2",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_common_divisors(a, b):\n    # Find all divisors of both numbers\n    def get_divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n    \n    # Get divisors of both numbers and find their intersection\n    divs_a = get_divisors(a)\n    divs_b = get_divisors(b)\n    common_divs = divs_a.intersection(divs_b)\n    \n    # Sum up the common divisors\n    total_sum = sum(common_divs)\n    return total_sum\n\n# Test cases\nprint(sum_common_divisors(10, 15))  # Expected output: 6\nprint(sum_common_divisors(100, 150))  # Expected output: 93\nprint(sum_common_divisors(4, 6))  # Expected output: 3",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_int(a, b):\n    result = 0\n    while b > 0:\n        if b % 2 == 1:\n            result += a\n        a += a\n        b //= 2\n    return result",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, lst):\n    return [word for word in lst if len(word) > n]",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def magic_square_test(matrix):\n    n = len(matrix)\n    if not all(len(row) == n for row in matrix): return False\n    \n    sum_of_row = sum(matrix[i][i] for i in range(n))\n    sum_of_column = sum(matrix[i][n-i-1] for i in range(n))\n    \n    if sum_of_row != sum_of_column:\n        return False\n    \n    flat_list = [element for sublist in matrix for element in sublist]\n    total_sum = sum(flat_list)\n    average_sum = total_sum // n**2\n    \n    diff_from_average = abs(sum_of_row - average_sum)\n    \n    # A 3x3 magic square should have sums differing from average by at most 2\n    if diff_from_average > 2: \n        return False\n    \n    return True",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\nimport operator\n\ndef max_occurrences(nums):\n    \"\"\"\n    Finds the item with the highest frequency in the provided list.\n    \n    :param nums: List of integers.\n    :return: Tuple containing the element with the maximum frequency and its count.\n    \"\"\"\n    return max(Counter(nums).items(), key=operator.itemgetter(1))[0], max(Counter(nums).values())\n\n# Test cases\nprint(max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])) # Expected output: (2, 5)\nprint(max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])) # Expected output: (8, 2)\nprint(max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])) # Expected output: (20, 3)",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def reverse_vowels(s):\n    # Convert the input string into a list for easier manipulation\n    s = list(s)\n    \n    # List to hold all vowel indices in descending order\n    vowel_indices = sorted([i for i, c in enumerate(s) if c.lower() in 'aeiou'], reverse=True)\n    \n    # Loop through the string from the end and swap vowels as we find them\n    for i, index in enumerate(vowel_indices):\n        if index >= len(s):\n            break\n        s[index], s[-(i+1)] = s[-(i+1)], s[index]\n        \n    # Join the list back into a string and return it\n    return ''.join(s)\n\n# Test cases\nprint(reverse_vowels(\"Python\"))  # Expected output: \"Python\"\nprint(reverse_vowels(\"USA\"))     # Expected output: \"ASU\"\nprint(reverse_vowels(\"ab\"))      # Expected output: \"ab\"",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\n    # Convert tuple elements to string and join them with an empty string as separator\n    return ''.join(map(str, tup))",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "def sum_negativenum(numbers):\n    return reduce(lambda x,y: x + y if y < 0 else x, numbers, 0)",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_last(arr, n, k):\n    count = 0\n    for i in range(n-1, -1, -1):\n        if arr[i] % 2 == 0:\n            count += 1\n        else:\n            break\n    return 'EVEN' if count <= k else 'ODD'",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hexagonal_num(n):\n    \"\"\"\n    Returns the n-th hexagonal number.\n    \n    Parameters:\n    n (int): The position of the hexagonal number to be found.\n    \n    Returns:\n    int: The n-th hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_electbill(bill):\n    # Calculate monthly electricity bill based on usage.\n    if bill <= 0:\n        return \"Invalid input\"\n    elif bill <= 75:\n        return round((bill * 1 + 8), 2)\n    else:\n        total = 8 + ((bill - 75) * 2)\n        return round(total + (total / 100 * 12), 2)\n\n# Test cases\nprint(cal_electbill(75))   # Expected output: 246.25\nprint(cal_electbill(265))  # Expected output: 1442.75\nprint(cal_electbill(100))  # Expected output: 327.5",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef zero_count(arr: List[int]) -> float:\n    return sum(x == 0 for x in arr) / len(arr)",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    # Initialize the variable to keep track of remaining power needed to reach n.\n    remainder = n\n    \n    # Iterate while there's still work left to do.\n    while remainder > 0:\n        # Check if the current power is already used up.\n        if remainder % 2 == 0 and remainder // 2 <= 2**29:\n            remainder //= 2\n        else:\n            # If not enough for next iteration, we're done.\n            break\n    \n    # The loop completes when either all powers have been checked, or we've run out of numbers to try.\n    return remainder == 0",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculates and returns the circumference of a circle given its radius.\n    \n    Parameters:\n        radius (float): The radius of the circle.\n        \n    Returns:\n        float: The calculated circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_singly(tuples_list):\n    result = []\n    for t in tuples_list:\n        # Convert each element of the tuple into an integer and check if it is not already in the result set\n        for i in t:\n            if i not in result:\n                result.append(i)\n    return result",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def flip(arr, i):\n    \"\"\"Flip the first i+1 elements of the given array.\"\"\"\n    for j in range(i + 1):\n        arr[j], arr[i - j] = arr[i - j], arr[j]\n\ndef pancake_sort(arr):\n    \"\"\"\n    Sorts an array using pancake sort algorithm.\n    \n    Args:\n    arr -- list of integers\n    \n    Returns:\n    sorted_arr -- the sorted list of integers\n    \"\"\"\n    def find_kth_largest_index(arr, k):\n        # Helper function to find the k-th largest index\n        max_val = max(arr)\n        index_of_max_val = arr.index(max_val)\n        if index_of_max_val == len(arr) - k:\n            return len(arr) - k\n        else:\n            while arr[index_of_max_val] != max_val and index_of_max_val < len(arr) - k:\n                index_of_max_val += 1\n            return index_of_max_val\n    \n    n = len(arr)\n    sorted_arr = []\n    for i in range(n):\n        max_index = find_kth_largest_index(arr, n - i - 1)\n        if max_index != i:\n            flip(arr, max_index + 1)\n            sorted_arr.append(max_index + 1)\n        flip(arr, n)\n        sorted_arr.append(n)\n        n -= 1\n    return sorted_arr[::-1]\n\n# Test cases\nprint(pancake_sort([15, 79, 25, 38, 69]))  # Output: [15, 25, 38, 69, 79]\nprint(pancake_sort([98, 12, 54, 36, 85]))  # Output: [12, 36, 54, 85, 98]\nprint(pancake_sort([41, 42, 32, 12, 23]))  # Output: [12, 23, 32, 41, 42]",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_samepair(list1, list2, list3):\n    return len(set(zip(list1, list2, list3)))",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_lists(tup):\n    # Count how many elements in the tuple are lists\n    count = sum(isinstance(i, list) for i in tup)\n    return count",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef sum_Pairs(arr: List[int], n: int) -> int:\n    total_sum = 0\n    for i in range(len(arr)):\n        # Calculate the contribution of each number to the overall sum\n        total_sum += arr[i] * ((i + 1) * (len(arr) - i))\n    # Adjust for over-counting due to double counting pairs where both elements are equal\n    total_sum -= (n // 2) * (n // 2)\n    # Subtract twice the sum of all elements as they have been counted three times\n    total_sum -= 2 * sum(arr)\n    return total_sum",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def max_Abs_Diff(arr, k):\n    # Sort the array to easily find the minimum and maximum values within bounds.\n    arr.sort()\n    min_val = arr[0] - k\n    max_val = arr[-1] + k\n    \n    # Calculate the absolute difference between the largest possible value and smallest possible value.\n    return abs(max_val - min_val)",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ascii_value_string(s):\n    # Initialize result variable\n    res = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Add ASCII value of current character to result\n        res += ord(char)\n    \n    return res",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def max_path_sum(triangle, row_index, col_index):\n    if row_index == len(triangle) - 1:\n        return sum([num for num in triangle[-1][col_index]])\n    \n    down = triangle[row_index + 1][col_index] + max_path_sum(triangle, row_index + 1, col_index)\n    diagonal = triangle[row_index + 1][col_index + 1] + max_path_sum(triangle, row_index + 1, col_index + 1)\n    \n    return max(down, diagonal)\n\n# Test cases\nprint(max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2))  # Output: 14\nprint(max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2))  # Output: 24\nprint(max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2))  # Output: 53",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def sum_digits_twoparts(number):\n    \"\"\"\n    Divide the given integer 'number' into two non-empty parts.\n    The goal is to maximize their combined digit sum.\n    \n    Parameters:\n    - number: An integer to be divided into two parts\n    \n    Returns:\n    A tuple containing two integers that have the maximum combined digit sum when split.\n    \"\"\"\n    max_sum = float('-inf')\n    result = []\n    \n    # Iterate over all possible splits of the number\n    for i in range(1, len(str(number))):\n        part1 = int(str(number)[:i])\n        part2 = int(str(number)[i:])\n        \n        current_sum = sum(int(digit) for digit in str(part1)) + sum(int(digit) for digit in str(part2))\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = [part1, part2]\n    \n    return result\n\n# Check function with provided data points\nassert sum_digits_twoparts(35) == 17\nassert sum_digits_twoparts(7) == 7\nassert sum_digits_twoparts(100) == 19\n\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def longest_subseq_with_diff_one(arr, diff):\n    dp = [[0] * len(arr)] * (diff + 1)\n    \n    for i in range(len(arr)):\n        for j in range(diff, -1, -1):\n            if arr[i] == arr[i-1]:\n                dp[j][i] = dp[j][i-1]\n            else:\n                dp[j][i] = max(dp[j][i-1], dp[j-1][i-1])\n    \n    max_len = 0\n    for i in range(1, diff+1):\n        max_len = max(max_len, dp[i][-1])\n    \n    return max_len\n\n# Test cases\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7)) # Expected output: 6\nprint(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7)) # Expected output: 3\nprint(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8)) # Expected output: 7",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'does_Contain_B' is not defined",
      "Test 2: FAIL - name 'does_Contain_B' is not defined",
      "Test 3: FAIL - name 'does_Contain_B' is not defined"
    ],
    "generated_code": "def does_contain_b(number, start, end):\n    \"\"\"\n    Check if the given number is within the range [start, end] of an infinite sequence.\n    \n    Args:\n    number (int): The target number to check for presence.\n    start (int): The starting point of the range.\n    end (int): The ending point of the range.\n    \n    Returns:\n    bool: True if the number is present, False otherwise.\n    \"\"\"\n    # Calculate the length of the range\n    range_length = end - start + 1\n    \n    # Calculate the offset based on where the number lies relative to the start and end points\n    offset = abs(start - number)\n    \n    # If the number is less than 'start' plus half the range length, it's positive\n    # If the number is more than 'end' minus half the range length, it's negative\n    sign = (-offset > range_length // 2) * ((-offset >= range_length))\n\n    # Adjusting for signed numbers\n    adjusted_offset = sign * offset\n    \n    # Determine if the number is within the range considering its position relative to 'start'\n    return 0 <= adjusted_offset < range_length\n\n# Test cases\nprint(does_contain_b(1, 7, 3))  # Expected output: True\nprint(does_contain_b(1, -3, 5))  # Expected output: False\nprint(does_contain_b(3, 2, 5))   # Expected output: False",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_coprime(x, y):\n    def gcd(a, b): \n        while(b): \n            t = b \n            b = a % b \n            a = t \n        return a \n  \n    if(gcd(x, y) == 1):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    # Recursively sort both halves\n    left_sorted = merge_sort(left_half)\n    right_sorted = merge_sort(right_half)\n    \n    # Merge the sorted halves\n    return merge(left_sorted, right_sorted)\n\ndef merge(left, right):\n    merged_arr = []\n    left_index = 0\n    right_index = 0\n    \n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            merged_arr.append(left[left_index])\n            left_index += 1\n        else:\n            merged_arr.append(right[right_index])\n            right_index += 1\n            \n    # Append remaining elements from either list\n    merged_arr.extend(left[left_index:])\n    merged_arr.extend(right[right_index:])\n    \n    return merged_arr\n\n# Test cases\nprint(merge_sort([3, 4, 2, 6, 5, 7, 1, 9]))  # Expected output: [1, 2, 3, 4, 5, 6, 7, 9]\nprint(merge_sort([7, 25, 45, 78, 11, 33, 19]))  # Expected output: [7, 11, 19, 25, 33, 45, 78]\nprint(merge_sort([3, 1, 4, 9, 8]))  # Expected output: [1, 3, 4, 8, 9]",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'f' is not defined"
    ],
    "generated_code": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = f(x)  # Assuming f is the quadratic equation for simplicity; adjust if needed.\n    return (x, y)\n\n# Example usage:\nprint(parabola_vertex(5,3,2))  # Should output approximately (-0.3, 1.55)",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    return [sublist[index] for sublist in matrix]\n\n# Test cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0))  # Output: [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2))  # Output: [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3))  # Output: [2, 2, 5]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    \"\"\"\n    Toggle all even bits in the binary representation of n.\n    \n    Parameters:\n    - n (int): The integer whose even bits will be toggled\n    \n    Returns:\n    int: The resulting integer after toggling all even bits\n    \"\"\"\n    result = 0\n    for i in range(32):\n        if n & (1 << i):\n            # If bit is set (even index), flip it to unset\n            result |= (1 << (i + 1))\n    return result\n\n# Test cases\nprint(even_bit_toggle_number(10))  # Expected output: 0\nprint(even_bit_toggle_number(20))  # Expected output: 30\nprint(even_bit_toggle_number(30))  # Expected output: 20",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def tuple_int_str(tup):\n    return tuple(map(int, tup))\n\n# Test Cases\nassert tuple_int_str((('333', '33'), ('1416', '55'))) == ((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500'))) == ((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555'))) == ((666, 66), (1500, 555))",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def encode_list(lst):\n    if not lst:\n        return []\n    \n    result = [[1, lst[0]]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            result[-1][0] += 1\n        else:\n            result.append([1, lst[i]])\n    return result",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Ops(arr, n, k):\n    arr.sort()\n    \n    total_sum = sum(arr)\n    target = total_sum / n\n    \n    for i in range(len(arr)):\n        if arr[i] > target:\n            return i * k + (arr[i] - target) * (n - i - 1)\n\n    return 0\n\n# Example usage\nprint(min_Ops([2,2,2,2], 4, 3))  # Output: 0\nprint(min_Ops([4,2,6,8], 4, 3))  # Output: -1\nprint(min_Ops([21,33,9,45,63], 5, 6))  # Output: 24",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def month_season(month, day):\n    seasons = {'January': 'winter', 'February': 'winter', 'March': 'spring',\n               'April': 'spring', 'May': 'spring', 'June': 'summer',\n               'July': 'summer', 'August': 'summer', 'September': 'fall',\n               'October': 'fall', 'November': 'fall', 'December': 'winter'}\n    return seasons[month]",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def gcd(a, b):\n    \"\"\"Calculate the greatest common divisor of a and b.\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"Calculate the least common multiple of a and b using their greatest common divisor.\"\"\"\n    return a * b // gcd(a, b)\n\ndef solution(a, b, n):\n    \"\"\"\n    Find x and y such that ax + by = n.\n    \n    Parameters:\n    a (int): Coefficient of x in the equation.\n    b (int): Coefficient of y in the equation.\n    n (int): The target value on the right-hand side of the equation.\n    \n    Returns:\n    str: A string indicating whether there is a solution, what x equals if it exists, \n         and what y equals if it exists.\n    \"\"\"\n    # Check for trivial case where either coefficient is zero\n    if not a:\n        return \"x = \", 0, \", y = \", int(n / b)\n    elif not b:\n        return \"No solution\"\n    \n    # Calculate x using Extended Euclidean Algorithm\n    x = ((n - b * ((-a) // gcd(a, b))) // b) % (b + 1)\n    if (n - b * x) % a != 0:\n        return \"No solution\"\n    \n    return \"x = \", x, \", y = \", (n - a * x) // b\n\n# Test cases\nprint(solution(2, 3, 7))  # Expected output: (\"x = \", 2, \", y = \", 1)\nprint(solution(4, 2, 7))  # Expected output: No solution\nprint(solution(1, 13, 17))  # Expected output: (\"x = \", 4, \", y = \", 1)",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]\n\n# Test Cases\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])) # Expected output: [1, 3, 5, 7, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])) # Expected output: [2, 4, 6, 8, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])) # Expected output: [1, 2, 3, 4, 6, 8, 9, 10]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_series(n):\n    total_sum = 0\n    for i in range(1, n+1):\n        if n >= i * 2:\n            total_sum += i\n            n -= i\n    return total_sum",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'tan' is not defined"
    ],
    "generated_code": "def area_polygon(sides, length):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \n    Args:\n    sides (int): The number of sides of the polygon.\n    length (float): The length of each side of the polygon.\n    \n    Returns:\n    float: The area of the regular polygon.\n    \"\"\"\n    return 0.25 * sides * length**2 / tan(pi/sides)\n\n# Check function with provided data points\nassert abs(area_polygon(4, 20) - 400.00000000000006) < 1e-10, \"Test case 1 failed\"\nassert abs(area_polygon(10, 15) - 1731.1969896610804) < 1e-10, \"Test case 2 failed\"\nassert abs(area_polygon(9, 7) - 302.90938549487214) < 1e-10, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def areEquivalent(numerator, denominator):\n    # Calculate the sum of divisors for both numerator and denominator\n    sum_divisors_numerator = sum([i for i in range(1, int(numerator**0.5) + 1) if numerator % i == 0])\n    sum_divisors_denominator = sum([i for i in range(1, int(denominator**0.5) + 1) if denominator % i == 0])\n\n    # Compare the sums of divisors\n    return sum_divisors_numerator == sum_divisors_denominator",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_char_position(str_input):\n    # Convert the input string into a list of its ASCII values\n    ascii_list = [ord(char.lower()) for char in str_input]\n    \n    # Initialize counters for lowercase and uppercase letters\n    lower_count = upper_count = 0\n    \n    # Iterate through each character's ASCII value\n    for i in range(len(ascii_list)):\n        if 'a' <= chr(ascii_list[i]) <= 'z':\n            lower_count += 1\n        elif 'A' <= chr(ascii_list[i]) <= 'Z':\n            upper_count += 1\n    \n    # Return the total number of matching characters\n    return min(lower_count, upper_count)\n\n# Test cases\nprint(count_char_position(\"xbcefg\"))   # Expected output: 2\nprint(count_char_position(\"ABcED\"))    # Expected output: 3\nprint(count_char_position(\"AbgdeF\"))   # Expected output: 5",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_even_Pair(arr, x):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if ((arr[i] ^ arr[j]) % 2 == 0):\n                count += 1\n    return count",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'next_Power_OF_2' is not defined. Did you mean: 'next_Power_Of_2'?"
    ],
    "generated_code": "def next_Power_Of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n    \n    Parameters:\n    n (int): A positive integer\n    \n    Returns:\n    int: The smallest power of 2 greater than or equal to n\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 ** ((n - 1).bit_length())\n\n# Check function with provided data points\nprint(next_Power_Of_2(0))  # Expected output: 1\nprint(next_Power_OF_2(5))   # Expected output: 8\nprint(next_Power_OF_2(17))  # Expected output: 32",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr, num):\n    count = arr.count(num)\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev, curr = 0, 1\n        for _ in range(2, n + 1):\n            prev, curr = curr, prev + curr\n        return curr\n\n# Test cases\nprint(get_pell(4))  # Expected output: 12\nprint(get_pell(7))  # Expected output: 169\nprint(get_pell(8))  # Expected output: 408",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_range_list(numbers, start_index, end_index):\n    return sum(numbers[start_index:end_index+1])",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def perimeter_pentagon(lengths):\n    # Calculate the perimeter of a pentagon by summing up all side lengths\n    return sum(lengths)\n\n# Test cases\nassert perimeter_pentagon([5]) == 25\nassert perimeter_pentagon([10]) == 50\nassert perimeter_pentagon([15]) == 75",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_occurance(string):\n    # Initialize counter for occurrences of 'std'\n    std_count = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        if char == 's':\n            # Increment count when 's' is found\n            std_count += 1\n            \n            # Check for consecutive 'st', reset count if true\n            if std_count == 3:\n                break\n                \n    return std_count\n\n# Test cases\nprint(count_occurance(\"letstdlenstdporstd\"))  # Expected output: 3\nprint(count_occurance(\"truststdsolensporsd\"))  # Expected output: 1\nprint(count_occurance(\"makestdsostdworthit\"))  # Expected output: 2",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_splchar(s):\n    return re.sub(r'[^0-9a-zA-Z]+', '', s)",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_keyvalue(kv_pairs):\n    result = {}\n    for key, value in kv_pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_valid_parenthese(parentheses_string):\n    \"\"\"\n    Function to check if the given string of parentheses is valid.\n    \n    A string of parentheses is considered valid if every opening parenthesis '(' has a corresponding closing parenthesis ')'\n    and they are correctly nested within each other.\n    \n    Parameters:\n        - parentheses_string (str): The string containing parentheses to be checked.\n        \n    Returns:\n        - bool: True if the string is valid, False otherwise.\n    \"\"\"\n    # Dictionary to map opening brackets to their corresponding closing brackets\n    bracket_map = {'(': ')', '{': '}', '[': ']'}\n    stack = []\n    \n    for char in parentheses_string:\n        if char in bracket_map:\n            # If it's an opening bracket, push it onto the stack\n            stack.append(char)\n        else:\n            # If it's a closing bracket but the stack is empty or doesn't match the last opening bracket, return False\n            if not stack or char != bracket_map[stack.pop()]:\n                return False\n    \n    # If the stack is empty, all brackets were matched; otherwise, return False\n    return len(stack) == 0",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'lcm' is not defined"
    ],
    "generated_code": "def gcd(a, b):\n    # Helper function to calculate GCD using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return a\n\ndef answer(lcm_min, lcm_max):\n    \"\"\"\n    Finds two distinct numbers whose least common multiple is within the specified range [lcm_min, lcm_max].\n\n    Parameters:\n    lcm_min (int): The minimum value of the least common multiple.\n    lcm_max (int): The maximum value of the least common multiple.\n\n    Returns:\n    tuple: A pair of integers with LCM in the specified range.\n    \"\"\"\n    for i in range(1, 101):\n        if lcm_min <= lcm(i, i + 1) <= lcm_max:\n            return (i, i + 1)\n\n# Test cases\nassert answer(3, 8) == (3, 6), \"Test case 1 failed\"\nassert answer(2, 6) == (2, 4), \"Test case 2 failed\"\nassert answer(1, 3) == (1, 2), \"Test case 3 failed\"\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef string_literals(lst, text):\n    # Iterate over each literal string in the list and check for match\n    for item in lst:\n        if re.search(item, text): \n            return 'Matched!'\n    else: \n        return 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'set' object is not subscriptable"
    ],
    "generated_code": "def is_num_keith(num):\n    # Initialize variables\n    s = set()\n    \n    # Calculate sum of digits in reverse order\n    while num > 0:\n        rem = num % 10\n        num //= 10\n        s.add(rem)\n        \n    # Check if sum of squared differences from each digit equals the original number\n    for i in range(len(s)):\n        diff_sum = 0\n        j = len(s) - 1 - i\n        \n        for k in range(i + 1, len(s)):\n            diff_sum += abs(s[i] - s[k])\n            \n        if diff_sum == 0 and sum((x ** 2 for x in s)) == num:\n            return True\n    \n    return False\n\n# Test cases\nprint(is_num_keith(14))   # Expected output: True\nprint(is_num_keith(12))   # Expected output: False\nprint(is_num_keith(197))  # Expected output: True",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371  # Radius of the Earth in kilometers\n    \n    dlat = math.radians(lat2-lat1)\n    dlon = math.radians(lon2-lon1)\n    a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dlon/2) * math.sin(dlon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    \n    return d",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_prefix(strings, length): \n    # Find the minimum length among all strings in the list\n    min_length = min(len(s) for s in strings)\n    \n    # Check if the minimum length is greater than the desired length\n    if min_length > length:\n        return ''\n    \n    # Initialize an empty string to store the common prefix\n    prefix = \"\"\n    \n    # Iterate over each character position up to the minimum length\n    for i in range(min_length):\n        char = strings[0][i]\n        \n        # Compare characters from all strings at the current position\n        for j in range(1, len(strings)):\n            if strings[j][i] != char:\n                # If a mismatch is found, stop the comparison early and break out of the loop\n                return prefix\n        \n        # Append the matched character to the prefix string\n        prefix += char\n    \n    # Return the constructed common prefix\n    return prefix",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_character(text):\n    upper = []\n    lower = []\n    spec = []\n    num = []\n\n    for char in text:\n        if char.isupper():\n            upper.append(char)\n        elif char.islower():\n            lower.append(char)\n        elif not char.isalnum():\n            spec.append(char)\n        else:\n            num.append(char)\n\n    return (upper, lower, spec, num)\n\n# Test Cases\nprint(find_character(\"ThisIsGeeksforGeeks\"))\nprint(find_character(\"Hithere2\"))\nprint(find_character(\"HeyFolks32\"))",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_pairs(arr, k, target_diff):\n    # Create two dictionaries to store occurrences of elements and their differences from target_diff\n    element_dict = {}\n    diff_dict = {}\n\n    for i in arr:\n        if i - target_diff not in element_dict:\n            element_dict[i] = True\n        if i + target_diff not in diff_dict:\n            diff_dict[i] = True\n    \n    pair_count = sum(diff_dict.values())\n    \n    # Calculate and add common elements' counts to the total count\n    for elem in element_dict.keys():\n        pair_count += min(element_dict[elem], diff_dict.get(elem, 0))\n    \n    return pair_count",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def greater_specificnum(lst, specificnum):\n    return [value for value in lst if value > specificnum]",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef parabola_focus(a,b,c):\n    \"\"\"\n    This function calculates and returns the coordinates of the focus for a given parabola represented by ax^2 + bx + c = 0.\n    \n    Parameters:\n    a (float): The coefficient of x^2 in the equation.\n    b (float): The coefficient of x in the equation.\n    c (float): The constant term in the equation.\n    \n    Returns:\n    tuple: A tuple containing the x-coordinate and y-coordinate of the focus as floating-point numbers.\n    \"\"\"\n    # Calculating the discriminant for the quadratic equation\n    delta = b**2 - 4*a*c\n    \n    # If the discriminant is negative, there's no real solution for x\n    if delta < 0:\n        return \"No real solutions\"\n    \n    # Calculate the two possible x-values using the quadratic formula\n    x_values = [-b/(2*a), (-delta)/(4*a)]\n    \n    # Choosing the appropriate x-value based on the nature of the parabola\n    x_value = min(x_values) if x_values[0] <= x_values[1] else max(x_values)\n    \n    # Using the chosen x-value to calculate the corresponding y-coordinate\n    y_value = 0.5 * ((x_value - b)**2 / a) + c\n    \n    return round(x_value, 6), round(y_value, 6)\n\n# Test cases to verify the correctness of the function\nassert parabola_focus(5,3,2) == (-0.3, 1.6)\nassert parabola_focus(9,8,4) == (-0.444444, 2.25)\nassert parabola_focus(2,4,6) == (-1.0, 4.125)\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_literals(text, patterns):\n    \"\"\"\n    Searches for given patterns within a provided text using regular expressions.\n    \n    Parameters:\n        - text (str): The main text to search through.\n        - patterns (list of str): A list of literal strings to find in the text.\n        \n    Returns:\n        - str: \"Matched!\" if all patterns are found, otherwise \"Not Matched!\". \n    \"\"\"\n    for pattern in patterns:\n        if not re.search(pattern, text):\n            return f\"Not Matched!\"\n    return \"Matched!\"\n\n# Test cases\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['fox', 'dog']))\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['horse', 'dog']))\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['lazy', 'quick']))",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: sequence item 4: expected str instance, int found"
    ],
    "generated_code": "def longest_common_subsequence(str1, str2, n, m):\n    # Initialize the DP table with zeros\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Fill the DP table\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                \n    # The length of LCS is stored in dp[n][m]\n    lcs_length = dp[n][m]\n    \n    # Reconstruct the LCS from the DP table\n    index = [lcs_length]\n    x, y = n, m\n    \n    while x > 0 and y > 0:\n        if str1[x - 1] == str2[y - 1]:\n            index.append(str1[x - 1])\n            x -= 1\n            y -= 1\n        elif dp[x-1][y] >= dp[x][y-1]:\n            x -= 1\n        else:\n            y -= 1\n            \n    # Reverse the list to get the correct order\n    index.reverse()\n    \n    # Join the characters into a string\n    result = ''.join(index)\n    \n    return len(result)\n\n# Test cases\nprint(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7)) # Expected output: 4\nprint(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6)) # Expected output: 3\nprint(longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4)) # Expected output: 2",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef prod_Square(num):\n    \"\"\"\n    Check if num is representable as the product of two squares.\n    \n    Args:\n        num (int): The number to check.\n        \n    Returns:\n        bool: True if num can be expressed as the product of two squares, False otherwise.\n    \"\"\"\n    # Calculate the square root of the absolute value of num\n    sqrt_num = abs(int(math.sqrt(abs(num))))\n    # Return True if sqrt_num * sqrt_num equals the original num, indicating it's a perfect square\n    return sqrt_num * sqrt_num == num\n\n# Test cases\nprint(prod_Square(25))  # Expected output: False\nprint(prod_Square(30))  # Expected output: False\nprint(prod_Square(16))  # Expected output: True",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def first_Missing_Positive(nums):\n    nums.sort()\n    i = 1\n    for num in nums:\n        if num == i:\n            i += 1\n        elif num > i:\n            break\n    return i",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Intgral_Points(x_min, y_min, x_max, y_max):\n    # Initialize counter for integral points within the square\n    integral_points = 0\n    \n    # Iterate through all possible x-coordinates within the given range\n    for x in range(x_min, x_max + 1):\n        # Iterate through all possible y-coordinates within the given range\n        for y in range(y_min, y_max + 1):\n            # Increment the counter if both coordinates are integers\n            if x % 1 == 0 and y % 1 == 0:\n                integral_points += 1\n                \n    return integral_points",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_monthnumber(month_name):\n    # Check if the month has 30 days\n    if len(month_name) == 7 and month_name[5] in ['a', 'o']:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_String(s):\n    for char in s:\n        if char.isalpha():\n            return True\n        elif char.isdigit():\n            return True\n    return False",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuple(test_tup):\n    \"\"\"\n    Removes duplicate elements from the input tuple and returns a new tuple with unique elements.\n    \n    :param test_tup: A tuple containing integer elements.\n    :return: A tuple with all duplicates removed.\n    \"\"\"\n    # Convert the tuple to a list to allow removal of duplicates\n    temp_list = list(test_tup)\n    # Use a set to filter out duplicate elements\n    result_set = set(temp_list)\n    # Convert the set back to a tuple and return it\n    return tuple(result_set)\n\n# Test cases\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5), \"Test case 1 failed\"\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8), \"Test case 2 failed\"\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14), \"Test case 3 failed\"\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def octal_To_Decimal(octal_number):\n    # Convert Octal Number to Decimal Number\n    decimal_value = int(str(octal_number), 8)\n    return decimal_value",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first(arr, key, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = int((low + high) / 2)\n        if arr[mid] == key and (mid == 0 or arr[mid-1] != key):\n            return mid\n        elif arr[mid] < key:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuples(lst, k):\n    return [t for t in lst if len(t) != k]",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_exponentio(tuple_a, tuple_b):\n    \"\"\"\n    This function takes two tuples and returns their exponents.\n    \n    :param tuple_a: A tuple of integers\n    :param tuple_b: A tuple of integers\n    :return: A new tuple containing the results of raising each element of tuple_a to the power of corresponding elements in tuple_b\n    \"\"\"\n    result = []\n    for a, b in zip(tuple_a, tuple_b):\n        if isinstance(a, int) and isinstance(b, int):\n            result.append(pow(a, b))\n        else:\n            raise ValueError(\"Both elements must be integers\")\n    return tuple(result)\n\n# Test cases\nprint(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)))  # Should output: (100000, 4096, 78125, 7776)\nprint(find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)))  # Should output: (1771561, 78125, 1679616, 117649)\nprint(find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)))  # Should output: (35831808, 1679616, 40353607, 2097152)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef largest_triangle(a, b):\n    return round(math.sqrt((a**2 + b**2) / 2), 4)",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n and returns the largest power of 2 which is less than or equal to n.\n    \n    Parameters:\n    n (int): The input number from which we need to find the highest power of 2.\n    \n    Returns:\n    int: The highest power of 2 less than or equal to n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    result = 1\n    while result * 2 <= n:\n        result *= 2\n    \n    return result\n\n# Test cases\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 2 failed"
    ],
    "generated_code": "def position_max(lst):\n    \"\"\"\n    Finds and returns the indices of the maximum value in the list.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    Returns:\n    list: A list containing the indices of the maximum value.\n    \"\"\"\n    max_index = -1\n    result_indices = []\n    for i in range(len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return [max_index]\n\n# Test cases to verify the correctness of the function\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54]) == [7], \"Test case 1 failed\"\nassert position_max([1,2,2,2,4,4,4,5,5,5,5]) == [7,8,9,10], \"Test case 2 failed\"\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12]) == [11], \"Test case 3 failed\"\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(lst):\n    if len(set(lst)) == 1:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'l'"
    ],
    "generated_code": "def remove_even(s):\n    result = \"\"\n    for char in s:\n        if int(char) % 2 != 0:\n            result += char\n    return result",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hamming_Distance(x, y):\n    xor_result = x ^ y\n    distance = 0\n    while xor_result:\n        distance += 1\n        xor_result &= (xor_result - 1)\n    return distance",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(s, char):\n    # Initialize a counter for occurrences\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # If the current character matches the target character, increment the counter\n        if s[i] == char:\n            count += 1\n            \n    # Return the total number of occurrences\n    return count",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def inversion_elements(tup):\n    \"\"\"\n    Returns a new tuple containing pairs of consecutive elements from the input tuple,\n    where each pair consists of an element and its negative value.\n    \n    :param tup: A tuple of integers.\n    :return: A tuple of tuples, each containing an element from the input tuple and its negated version.\n    \"\"\"\n    inverted_tup = []\n    for i in range(len(tup)):\n        inverted_tup.append((tup[i], -tup[i]))\n    return inverted_tup",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tuples_list):\n    result = []\n    for tup in tuples_list:\n        new_tup = ()\n        for i in range(len(tup) - 1):\n            if isinstance(tup[i], str) and isinstance(tup[i + 1], str):\n                new_tup += (tup[i] + ' ' + tup[i + 1],)\n        result.append(new_tup)\n    return tuple(result)\n\n# Test cases\nprint(concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")))\nprint(concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")))\nprint(concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")))",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    \n    # Initialize memoization table\n    dp = [[-1 for _ in range(n)] for _ in range(n)]\n    \n    def lrs(x, y):\n        if x == -1 or y == -1:\n            return 0\n        \n        if dp[x][y] != -1:\n            return dp[x][y]\n        \n        if s[x] == s[y]:\n            dp[x][y] = 1 + lrs(x - 1, y - 1)\n        else:\n            dp[x][y] = max(lrs(x - 1, y), lrs(x, y - 1))\n        \n        return dp[x][y]\n    \n    return lrs(n - 1, n - 2)\n\n# Test cases\nprint(find_longest_repeating_subseq(\"AABEBCDD\"))  # Expected output: 3\nprint(find_longest_repeating_subseq(\"aabb\"))      # Expected output: 2\nprint(find_longest_repeating_subseq(\"aab\"))       # Expected output: 1",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(decimal_str):\n    # Regular expression to match a decimal number with exactly two digits after the decimal point\n    pattern = r'^[+-]?(\\d+(\\.\\d{1,2})?|\\.\\d+)$'\n    if re.match(pattern, decimal_str):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_decimal('123.11'))   # Expected output: True\nprint(is_decimal('0.21'))     # Expected output: True\nprint(is_decimal('123.1214')) # Expected output: False",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def heap_replace(heap, value):\n    \"\"\"\n    Deletes the smallest element in the given heap and inserts a new item.\n    \n    Parameters:\n    heap (list): The heap represented as a list where heap[i] = -heap[i-1].\n    value (int): The new item to be inserted into the heap.\n    \n    Returns:\n    list: The updated heap after deleting the smallest element.\n    \"\"\"\n    # Delete the smallest element (root of max heap)\n    heap[1] = -heap.pop() if heap else None\n    \n    # Insert the new item at the end of the heap\n    heapify_into_max_heap(heap, 1)  # Heapify up using siftup\n    \n    return heap\n\n# Helper function to create a max heap for further operations\ndef heapify_into_max_heap(heap, index):\n    n = len(heap)\n    while True:\n        left_child_index = 2 * index\n        right_child_index = left_child_index + 1\n        \n        # Find the larger child\n        largest = left_child_index if right_child_index >= n or heap[left_child_index] > heap[right_child_index] else right_child_index\n        \n        # If current node is smaller than its largest child, swap with it\n        if heap[index] < heap[largest]:\n            heap[index], heap[largest] = heap[largest], heap[index]\n            \n            # Move down the tree\n            index = largest\n        else:\n            break",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_allowed_specific_char(s):\n    # Define the pattern to match strings containing only lowercase letters, uppercase letters, digits, and whitespace.\n    pattern = r'^[a-zA-Z0-9\\s]*$'\n    # Search for the pattern in the input string.\n    if re.search(pattern, s):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_Num() missing 1 required positional argument: 'others_bit'",
      "Test 2: FAIL - count_Num() missing 1 required positional argument: 'others_bit'",
      "Test 3: FAIL - count_Num() missing 1 required positional argument: 'others_bit'"
    ],
    "generated_code": "def count_Num(others, others_bit):\n    \"\"\"\n    Counts how many numbers less than 2**others have exactly 'others_bit' as their nth bit set.\n    \n    Parameters:\n    others (int): The number of other bits considered in each candidate number.\n    others_bit (int): The specific bit position to check for in the candidate numbers.\n    \n    Returns:\n    int: The count of candidate numbers meeting the criteria.\n    \"\"\"\n    count = 0\n    # Iterate over all numbers from 1 up to but not including 2^others\n    for i in range(1, 2**others):\n        # Check if the ith bit is set at the specified position\n        if (i & (1 << others_bit)) != 0:\n            count += 1\n    return count\n\n# Example usage:\nprint(count_Num(2, 2))  # Expected output: 1\nprint(count_Num(3, 1))  # Expected output: 2\nprint(count_Num(1, 2))  # Expected output: 1",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\n    \"\"\"\n    Returns the sum of the fourth powers of all natural numbers up to n.\n    \n    :param n: The upper limit of the range of natural numbers to consider for calculating the sum.\n    :return: The sum of the fourth powers of the numbers from 1 to n.\n    \"\"\"\n    total_sum = sum([i**4 for i in range(1, n+1)])\n    return total_sum",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def concatenate_strings(tup1, tup2):\n    # Concatenate the strings in each tuple separately and join them with comma\n    result = [str(x) + str(y) for x, y in zip(tup1, tup2)]\n    return tuple(result)\n\n# Test cases\nprint(concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\"))) \n# Output: ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\nprint(concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")))\n# Output: ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n\nprint(concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")))\n# Output: ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def degree_radian(radian):\n    return radian * 180 / 3.141592653589793\n\n# Test cases\nprint(degree_radian(90))  # Expected output: 5156.620156177409\nprint(degree_radian(60))  # Expected output: 3437.746770784939\nprint(degree_radian(120))  # Expected output: 6875.493541569878",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'list' object cannot be interpreted as an integer"
    ],
    "generated_code": "def decode_list(encoded):\n    output = []\n    for i in range(0, len(encoded), 2):\n        count = encoded[i]\n        value = encoded[i + 1]\n        for j in range(count):\n            output.append(value)\n    return output\n\n# Test cases\nprint(decode_list([[2, 1], 2, 3, [2, 4], 5,1]))  # Expected: [1,1,2,3,4,4,5,1]\nprint(decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']))  # Expected: ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nprint(decode_list(['p', 'y', 't', 'h', 'o', 'n']))  # Expected: ['p', 'y', 't', 'h', 'o', 'n']",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unhashable type: 'list'"
    ],
    "generated_code": "def check_subset_list(list1, list2):\n    \"\"\"\n    This function checks if all elements in the first nested list (list1) are present in the second nested list (list2).\n    \n    Parameters:\n    - list1: The first nested list.\n    - list2: The second nested list.\n    \n    Returns:\n    - True if list1 is a subset of list2, False otherwise.\n    \"\"\"\n    return set(list1).issubset(set(list2))\n\n# Test cases to verify the correctness of the solution\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]) == False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]]) == True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']]) == False",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Repeated_Char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return '\\0'",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_Operations(x, y):\n    # Find the smaller and larger number\n    small = min(x, y)\n    large = max(x, y)\n\n    # Calculate how many times the smaller number goes into the larger number minus one\n    result = large - 1\n    while result % small != 0:\n        result -= 1\n    \n    return result\n\n# Test cases\nprint(min_Operations(2, 4))  # Expected output: 1\nprint(min_Operations(4, 10))  # Expected output: 4\nprint(min_Operations(1, 4))   # Expected output: 3",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - AttributeError: 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def extract_min_max(arr, k):\n    arr.sort()\n    result = []\n    for i in range(k-1, -1, -1):\n        result.append(arr[i])\n    for i in range(k):\n        result.append(arr[-i-1])\n    return tuple(result)\n\n# Test cases\nprint(extract_min_max((5, 20, 3, 7, 6, 8), 2)) # Expected output: (3, 5, 8, 20)\nprint(extract_min_max((4, 5, 6, 1, 2, 7), 3)) # Expected output: (1, 2, 4, 5, 6, 7)\nprint(extract_min_max((2, 3, 4, 8, 9, 11, 7), 4)) # Expected output: (2, 3, 4, 7, 8, 9, 11)",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef replace_max_specialchar(s, n):\n    # Replace multiple special characters with one colon and limit to n replacements.\n    pattern = r'[,\\.]{{{}}}'.format(n)\n    return re.sub(pattern, ':', s)\n\n# Test cases to verify the correctness of the function.\nprint(replace_max_specialchar('Python language, Programming language.', 2)) # Expected output: 'Python:language: Programming language.'\nprint(replace_max_specialchar('a b c,d e f', 3)) # Expected output: 'a:b:c:d e f'\nprint(replace_max_specialchar('ram reshma,ram rahim', 1)) # Expected output: 'ram:reshma,ram rahim'",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_type(test_tuple):\n    # Check if the length of the tuple is less than 2, returning True immediately.\n    if len(test_tuple) < 2:\n        return True\n    \n    # Get the first element's type and use it as a reference for comparison.\n    ref_type = type(test_tuple[0])\n    \n    # Iterate through each element in the tuple starting from the second one.\n    for element in test_tuple[1:]:\n        # If any element does not match the reference type, return False.\n        if type(element) != ref_type:\n            return False\n            \n    # If all elements match the reference type, return True.\n    return True",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_majority(arr, n, m):\n    count = 0\n    for i in range(n):\n        if arr[i] == m:\n            count += 1\n    return count > (n // 2)\n\n# Test cases\nprint(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3))  # Expected output: True\nprint(is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4))  # Expected output: False\nprint(is_majority([1, 1, 1, 2, 2], 5, 1))  # Expected output: True",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(num):\n    \"\"\"\n    Counts the number of set bits in the binary representation of a given integer.\n    \n    Args:\n    num (int): The integer whose set bits are to be counted.\n    \n    Returns:\n    int: The count of set bits.\n    \"\"\"\n    return bin(num).count('1')\n\n# Test cases to verify the correctness of the function\nassert count_Set_Bits(2) == 1, \"Test case 1 failed\"\nassert count_Set_Bits(4) == 1, \"Test case 2 failed\"\nassert count_Set_Bits(6) == 2, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Min(arr, low, high):\n    if high < low:\n        raise ValueError(\"Invalid range\")\n    \n    if arr[high] > arr[low]:\n        return arr[low]\n    \n    mid = low + (high - low) // 2\n    \n    if mid > 0 and arr[mid] < arr[mid-1]:\n        return arr[mid]\n    elif mid < len(arr)-1 and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n    else:\n        if mid > 0 and arr[0] > arr[mid]:\n            return min(find_Min(arr, 0, mid-1), find_Min(arr, mid+1, high))\n        else:\n            return min(find_Min(arr, low, mid-1), find_Min(arr, mid+1, high))\n\n# Test cases\nprint(find_Min([1,2,3,4,5], 0, 4))  # Should return 1\nprint(find_Min([4,6,8], 0, 2))       # Should return 4\nprint(find_Min([2,3,5,7,9], 0, 4))   # Should return 2",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(s):\n    # Initialize an empty list to store characters with even indices\n    result = []\n    # Iterate through the string starting from index 0 and going up to len(s)-1\n    for i in range(len(s)):\n        if i % 2 == 0:\n            # If the index is even, add the character at that position to the result list\n            result.append(s[i])\n    # Join all characters in the result list into a single string and return it\n    return ''.join(result)",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'all_Bits_Set_In_The_Given_Range' is not defined",
      "Test 2: FAIL - name 'all_Bits_Set_In_The_Given_Range' is not defined",
      "Test 3: FAIL - name 'all_Bits_Set_In_The_Given_Range' is not defined"
    ],
    "generated_code": "def all_bits_set_in_given_range(n, start_bit, end_bit):\n    # Check if there is at least one bit set within the specified range\n    for i in range(start_bit - 1, end_bit):\n        if n & (1 << i): \n            return False\n    return True",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange_array(arr, n):\n    # Initialize two pointers\n    left = 0\n    right = n - 1\n    \n    while left < right:\n        if arr[left] < 0 and arr[right] >= 0:\n            # Swap the elements at left and right pointers\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] >= 0:\n            # Move the right pointer leftwards if it's still negative\n            right -= 1\n        else:\n            # Move the left pointer rightwards if it's already positive\n            left += 1\n    \n    return arr",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(input_string, replacement_char):\n    # Use the str.replace method to replace all occurrences of ' ' with replacement_char\n    return input_string.replace(' ', replacement_char)",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum(triangle, target):\n    # Initialize DP table with zeros\n    dp = [[0] * (len(row) + 1) for row in triangle]\n    \n    # Fill up the DP table\n    for i in range(len(dp)):\n        for j in range(len(dp[i])):\n            if i == j:\n                dp[i][j] = triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n    \n    # Return the maximum value from the bottom of the triangle\n    return max(max(row) for row in dp)\n\n# Example usage and test cases\nprint(max_sum([[1], [2,1], [3,3,2]], 3))  # Output: 6\nprint(max_sum([[1], [1, 2], [4, 1, 12]], 3))  # Output: 15\nprint(max_sum([[2], [3,2], [13,23,12]], 3))  # Output: 28",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def larg_nnum(dataset, n):\n    # Sort the dataset in descending order and return the first n elements\n    return sorted(dataset, reverse=True)[:n]\n\n# Test cases\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2))  # Expected output: [100, 90]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5))  # Expected output: [100, 90, 80, 70, 60]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3))  # Expected output: [100, 90, 80]",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(side_length):\n    return side_length ** 3",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits in the binary representation of n.\n    \n    Args:\n    n (int): The integer whose even bits are to be set.\n    \n    Returns:\n    int: The integer with all its even bits set.\n    \"\"\"\n    # Calculate the shift amount for setting all even bits\n    shift_amount = ((n.bit_length()) // 2)\n    # Shift '1' left by the calculated shift amount and then AND it with the original number\n    result = (1 << shift_amount) & n\n    \n    return result",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def No_of_Triangle(n, m):\n    # Base case: if n is less than m, no equilateral triangles can be formed\n    if n < m:\n        return -1\n    \n    # Initialize the total number of equilateral triangles\n    total = 0\n    \n    # Calculate the maximum number of equilateral triangles in the current layer\n    for k in range(m + 1):\n        # The formula for calculating the number of equilateral triangles in each layer\n        total += ((m - k)**2 + m * (k - 1)) // 2\n    \n    # Return the result\n    return total",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef check_occurences(tuples_list):\n    occurrence_count = defaultdict(int)\n    \n    for tuple_ in tuples_list:\n        # Update the count for each combination and individual elements\n        for i in range(len(tuple_) - 1):\n            key = tuple_[i], tuple_[i + 1]\n            occurrence_count[key] += 1\n    \n    # Convert defaultdict to dict before returning as defaultdict is not directly serializable.\n    return dict(occurrence_count)\n\n# Test cases\nprint(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]))  # Should return {('1', '3'): 2, ('2', '5'): 2, ('3', '6'): 1}\nprint(check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]))  # Should return {('2', '4'): 2, ('3', '6'): 2, ('4', '7'): 1}\nprint(check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]))  # Should return {('2', '13'): 1, ('11', '23'): 1, ('12', '25'): 2, ('16', '23'): 1})",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def number_of_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring:\n                count += 1\n    return count",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_total_number_of_sequences(n, m):\n    # Initialize an array to store the total count of sequences ending at each value.\n    dp = [0] * (m + 1)\n    dp[0] = 1  # Base case: there's one way to start with 0.\n    \n    for i in range(1, n + 1):\n        new_dp = [0] * (m + 1)\n        for j in range(m, -1, -1):\n            if j <= 0:\n                break\n            new_dp[j] += dp[j]\n            k = 2 * j\n            while k <= m and k < i * 2:\n                new_dp[k] += dp[j]\n                k *= 2\n        \n        dp = new_dp\n    \n    return sum(dp)\n\n# Test cases\nprint(get_total_number_of_sequences(10, 4))  # Expected output: 4\nprint(get_total_number_of_sequences(5, 2))   # Expected output: 6\nprint(get_total_number_of_sequences(16, 3))  # Expected output: 84",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'replace_list' is not defined",
      "Test 2: FAIL - name 'replace_list' is not defined",
      "Test 3: FAIL - name 'replace_list' is not defined"
    ],
    "generated_code": "def replace_last_element(lst, new_lst):\n    return lst[:-1] + new_lst\n\n# Test cases\nprint(replace_last_element([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]))  # Expected output: [1, 3, 5, 7, 9, 2, 4, 6, 8]\nprint(replace_last_element([1,2,3,4,5], [5,6,7,8]))            # Expected output: [1,2,3,4,5,6,7,8]\nprint(replace_last_element([\"red\",\"blue\",\"green\"], [\"yellow\"]))# Expected output: [\"red\", \"blue\", \"yellow\"]",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def array_3d(rows, cols, depth):\n    return [[[('*' for _ in range(cols)) for _ in range(depth)] for _ in range(rows)]]",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(string):\n    return len(string)\n\n# Test cases\nprint(count_charac(\"python programming\")) # Output should be 18\nprint(count_charac(\"language\")) # Output should be 8\nprint(count_charac(\"words\")) # Output should be 5",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not subscriptable",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - 'int' object is not subscriptable"
    ],
    "generated_code": "def sort_on_occurence(lst):\n    # Count occurrences of each first element in the tuples\n    counts = {}\n    for tup in lst:\n        key = tup[0]\n        if key not in counts:\n            counts[key] = [tup, 1]\n        else:\n            counts[key][1] += 1\n    \n    # Sort items based on their occurrence count and tuple values\n    sorted_lst = []\n    for key, val in counts.items():\n        sorted_lst.append(val)\n    \n    # Add original order after sorting based on occurrence count\n    for item in lst:\n        index = next((i for i, x in enumerate(sorted_lst) if x[0][0] == item[0]), None)\n        sorted_lst.insert(index, item)\n        \n    return sorted_lst",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef next_Perfect_Square(x):\n    # Find the largest integer n such that n^2 <= x\n    n = int(math.sqrt(x))\n    \n    # Return (n + 1)^2 as it is the smallest perfect square greater than x\n    return (n + 1) ** 2\n\n# Test the function with provided data points\nassert next_Perfect_Square(35) == 36, \"Test case 1 failed\"\nassert next_Perfect_Square(6) == 9, \"Test case 2 failed\"\nassert next_Perfect_Square(9) == 16, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum(arr, n): \n    inc = [0] * n  \n    exc = [0] * n  \n  \n    # Initialize first element as it is itself\n    inc[0] = arr[0]  \n    exc[0] = arr[0]  \n  \n    # Fill remaining positions using recursive calls \n    for i in range(1, n): \n  \n        if arr[i] > arr[i - 1]: \n            inc[i] = arr[i] + exc[i - 1]  \n        else: \n            inc[i] = arr[i]  \n\n        if arr[i] + arr[i - 1] > exc[i - 1]: \n            exc[i] = arr[i] + arr[i - 1]  \n        else: \n            exc[i] = arr[i]  \n  \n    # Return max value from either inc or exc arrays \n    return max(inc[n - 1], exc[n - 1])",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def babylonian_squareroot(n):\n    \"\"\"\n    Compute the square root of n using the Babylonian method.\n    \n    Args:\n    - n: A positive number representing the target value to find its square root.\n    \n    Returns:\n    - The square root of n as a float.\n    \"\"\"\n    if n == 0:\n        return 0\n    x = n / 2.0  # Initial guess for the square root\n    while True:\n        y = (x + n / x) / 2.0\n        if abs(y - x) < 1e-10:  # Check for convergence\n            return y\n        x = y\n\n# Test cases\nprint(babylonian_squareroot(10))  # Expected output: 3.162277660168379\nprint(babylonian_squareroot(2))   # Expected output: 1.414213562373095\nprint(babylonian_squareroot(9))   # Expected output: 3.0",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence.\n    \n    Args:\n        s (str): The input string.\n        \n    Returns:\n        int: Length of the longest palindromic subsequence.\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Fill the diagonal with 1s as every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    max_length = 1\n    start = 0\n    \n    # Build the table in bottom-up manner\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            \n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            \n            if dp[i][j] > max_length:\n                max_length = dp[i][j]\n                start = i\n    \n    return max_length, s[start:start+max_length]\n\n# Test cases\nprint(lps(\"TENS FOR TENS\"))  # Expected output: (5, 'S')\nprint(lps(\"CARDIO FOR CARDS\"))  # Expected output: (7, 'ORF')\nprint(lps(\"PART OF THE JOURNEY IS PART\"))  # Expected output: (9, 'PJOISI P')",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef harmonic_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += 1 / i\n    return total",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef intersection_array(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    Finds the common elements between two integer arrays.\n    \n    Parameters:\n    arr1 (List[int]): The first array of integers.\n    arr2 (List[int]): The second array of integers.\n    \n    Returns:\n    List[int]: A list containing the common elements found in both input arrays.\n    \"\"\"\n    return list(set(arr1) & set(arr2))",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(tup, x):\n    # Initialize counter\n    count = 0\n    # Iterate through the tuple and increment count for each occurrence of x\n    for elem in tup:\n        if elem == x:\n            count += 1\n    # Return the total count\n    return count",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def insert_element(lst, element):\n    return [element] + lst\n\n# Test cases\nprint(insert_element(['Red', 'Green', 'Black'], 'c'))  # ['c', 'Red', 'c', 'Green', 'c', 'Black']\nprint(insert_element(['python', 'java'], 'program'))  # ['program', 'python', 'program', 'java']\nprint(insert_element(['happy', 'sad'], 'laugh'))      # ['laugh', 'happy', 'laugh', 'sad']",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 2 failed"
    ],
    "generated_code": "import cmath\n\ndef convert(complex_num):\n    \"\"\"\n    Convert a given complex number to its polar representation.\n    \n    Parameters:\n    complex_num (complex): The complex number to be converted.\n    \n    Returns:\n    tuple: A tuple containing two elements - magnitude and phase angle in radians.\n    \"\"\"\n    magnitude = abs(complex_num)\n    phase_angle = cmath.phase(complex_num)\n    return (magnitude, phase_angle)\n\n# Test cases to verify the correctness of the solution\nassert convert(1) == (1.0, 0.0), \"Test case 1 failed\"\nassert convert(4j) == (4.0, 0.0), \"Test case 2 failed\"\nassert convert(5 + 5j) == (7.86429536585872, 0.982793723247329), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(lst):\n    # Initialize counter variable to 0\n    integer_count = 0\n    \n    # Iterate through each item in the list\n    for item in lst:\n        # Check if the item is an instance of int\n        if isinstance(item, int):\n            # Increment counter if it's an integer\n            integer_count += 1\n            \n    # Return the total count of integers found\n    return integer_count",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def words_ae(input_string):\n    # Split the input string into individual words and filter those starting with 'a' or 'e'\n    result = [word for word in input_string.split() if word[0] in ['a', 'e']]\n    return result",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def combinations_colors(colours, n):\n    import itertools\n    return list(itertools.product(colours, repeat=n))",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Primes_nums(n):\n    \"\"\"\n    Count the number of prime numbers less than n.\n    \n    :param n: A non-negative integer\n    :return: The count of prime numbers less than n\n    \n    >>> count_Primes_nums(5)\n    2\n    >>> count_Primes_nums(10)\n    4\n    >>> count_Primes_nums(100)\n    25\n    \"\"\"\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    p = 2\n    while(p*p < n):\n        if(primes[p]):\n            for i in range(p*p,n,p):\n                primes[i] = False\n        p += 1\n    return sum(primes[2:])",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(x, y):\n    return (y, x)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import *\nimport operator\n\ndef count_odd(lst: List[int]) -> int:\n    # Using filter with a lambda function and the modulo operator (%)\n    return len(list(filter(lambda x: x % 2 != 0, lst)))\n\n# Test cases\nprint(count_odd([1, 2, 3, 5, 7, 8, 10]))  # Expected output: 4\nprint(count_odd([10, 15, 14, 13, -18, 12, -20]))  # Expected output: 2\nprint(count_odd([1, 2, 4, 8, 9]))  # Expected output: 2",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'zip' object is not subscriptable",
      "Test 2: FAIL - 'zip' object is not subscriptable",
      "Test 3: FAIL - 'zip' object is not subscriptable"
    ],
    "generated_code": "def maximize_elements(tup1, tup2):\n    # Sort each tuple based on the second element in descending order\n    sorted_tup1 = tuple(sorted(x, reverse=True) for x in tup1)\n    sorted_tup2 = tuple(sorted(x, reverse=True) for x in tup2)\n    \n    # Combine and sort the tuples based on the first element of the second tuple in ascending order\n    combined_sorted_tup = tuple(sorted(zip(*sorted([tup1, tup2]))[0], key=lambda x: (x[1], x[0])))\n    \n    return combined_sorted_tup",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_newman_shanks_williams(n):\n    if n == 1:\n        return True\n    elif n < 1:\n        return False\n    else:\n        return not sum(map(int, str(n))) % 3 != 0 and len(str(n)) == 1 + int(sum(map(int, str(n)))) ** .5 // 2\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while True:\n        if is_newman_shanks_williams(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def division_elements(tup1, tup2):\n    result = []\n    for x, y in zip(tup1, tup2):\n        if y != 0:\n            result.append(x / y)\n        else:\n            result.append(\"Division by zero encountered\")\n    return tuple(result)\n\n# Test cases\nprint(division_elements((10, 4, 6, 9), (5, 2, 3, 3))) # Expected output: (2, 2, 2, 3)\nprint(division_elements((12, 6, 8, 16), (6, 3, 4, 4))) # Expected output: (2, 2, 2, 4)\nprint(division_elements((20, 14, 36, 18), (5, 7, 6, 9))) # Expected output: (4, 2, 6, 2)",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_two_parts(lst, k):\n    return lst[:k], lst[k:]",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1, dict2):\n    # Merge both dictionaries into one\n    return {**dict1, **dict2}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dog_age(years_human):\n    return 10 * years_human + 21",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Loop through the first n odd numbers and add their squares to total_sum\n    for i in range(1, 2*n, 2):\n        total_sum += i**2\n        \n    return total_sum",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_star_num(n):\n    \"\"\"\n    Calculate the nth star number.\n    \n    Parameters:\n    n (int): The position of the star number in the sequence.\n    \n    Returns:\n    int: The nth star number.\n    \"\"\"\n    result = sum([i * (i + 1) for i in range(1, n+1)])\n    return result\n\n# Check function with provided data points\nassert find_star_num(3) == 37, \"Test case 1 failed\"\nassert find_star_num(4) == 73, \"Test case 2 failed\"\nassert find_star_num(5) == 121, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char):\n    return ord(char)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_even_and_even_index(arr, n):\n    # Initialize sum variable\n    total_sum = 0\n    \n    # Iterate through the array considering indices and elements together\n    for i in range(n // 2):\n        # Check if index is even and element is also even\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total_sum += arr[i]\n    \n    return total_sum\n\n# Example usage:\nprint(sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6))  # Output: 30\nprint(sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10))  # Output: 26\nprint(sum_even_and_even_index([5, 6, 12, 1], 4))  # Output: 12",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    \"\"\"\n    This function calculates the sum of the fifth powers of the first n even natural numbers.\n    \n    Args:\n    - n: An integer representing the number of terms in the sequence.\n    \n    Returns:\n    - The sum of the fifth powers of the first n even natural numbers as an integer.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n+1):\n        even_number = 2 * i\n        fifth_power = even_number ** 5\n        total_sum += fifth_power\n    return total_sum\n\n# Check function with provided data points\nprint(even_Power_Sum(2)) # Expected output: 1056\nprint(even_Power_Sum(3)) # Expected output: 8832\nprint(even_Power_Sum(1)) # Expected output: 32",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rear_extract(tuples_list):\n    # Extracts and returns the last elements from each tuple in the list.\n    return [item[-1] for item in tuples_list]\n\n# Test Cases\nprint(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])) \nprint(rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]))\nprint(rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]))",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    return tuple(result)\n\n# Test cases\nprint(substract_elements((10, 4, 5), (2, 5, 18)))  # Expected output: (8, -1, -13)\nprint(substract_elements((11, 2, 3), (24, 45 ,16)))  # Expected output: (-13, -43, -13)\nprint(substract_elements((7, 18, 9), (10, 11, 12)))  # Expected output: (-3, 7, -3)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    # Calculate the sum of binomial coefficients at even indices for n\n    total_sum = sum(comb(n, i) for i in range(0, n+1, 2))\n    return total_sum",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Position(arr, n, k):\n    # Convert the list into a set for O(1) average-time complexity lookups\n    unique_arr = set(arr)\n    \n    # Iterate through the original list to find all occurrences of 'k'\n    for i in range(len(arr)):\n        if arr[i] == k:\n            # Check if the current index is greater than the length of the unique elements\n            if i > len(unique_arr):\n                return i\n    \n    return -1  # Return -1 if no occurrence is found",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def dict_filter(dict_data, value):\n    \"\"\"\n    Filters a dictionary and returns a new dictionary containing only key-value pairs where the value matches the specified value.\n    \n    Parameters:\n    dict_data (dict): The input dictionary to be filtered.\n    value (int/float): The value to match in the dictionary.\n    \n    Returns:\n    dict: A dictionary containing only the key-value pairs with the matching value.\n    \"\"\"\n    return {key: val for key, val in dict_data.items() if val == value}\n\n# Test cases to verify the correctness of the solution\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180) == {'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190) == {'Pierre Cox': 190}",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - KeyError: 5"
    ],
    "generated_code": "def count_first_elements(record):\n    # Initialize a counter for elements occurring first in records of each level\n    counter = {level: 0 for level in range(len(record))}\n    \n    def traverse(current_record):\n        nonlocal counter\n        \n        # Check if it's not a nested list and increment the current level's counter\n        if type(current_record) != list:\n            counter[len(record)] += 1\n            return\n    \n        # Traverse each item in the current record\n        for item in current_record:\n            if isinstance(item, list):  # If an item is also a list, recursively call with depth+1\n                traverse(item)\n            else:\n                # Increment the counter for items encountered at this depth\n                counter[len(record)] += 1\n                \n    traverse(record)\n    \n    # Return the number of elements that occur before all other elements in the input tuple\n    return counter[1]\n\n# Test cases\nprint(count_first_elements((1, 5, 7, (4, 6), 10)))  # Output: 3\nprint(count_first_elements((2, 9, (5, 7), 11)))      # Output: 2\nprint(count_first_elements((11, 15, 5, 8, (2, 3), 8)))  # Output: 4",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_num_decagonal(n):\n    \"\"\"\n    This function calculates the nth decagonal number.\n    \n    Args:\n        n (int): The position in the sequence of decagonal numbers.\n        \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # Formula for nth decagonal number\n        return n**2 - n + 4\n\n# Test cases\nprint(is_num_decagonal(3))  # Expected output: 27\nprint(is_num_decagonal(7))  # Expected output: 175\nprint(is_num_decagonal(10)) # Expected output: 370",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequential_search(arr, target):\n    \"\"\"\n    Searches for the 'target' value within the provided array 'arr'. Returns a tuple where the first item is True if 'target'\n    was found and the second item is the index of the first occurrence of 'target' in 'arr', otherwise -1.\n    \n    Parameters:\n    arr (list): The list of elements to search through.\n    target (any): The element to find within the list.\n    \n    Returns:\n    Tuple[bool, int]: A tuple containing a boolean indicating whether the target was found and the index of its first occurrence,\n                      or -1 if not found.\n    \"\"\"\n    for i, value in enumerate(arr):\n        if value == target:\n            return (True, i)\n    return (False, -1)\n\n# Test cases\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3), \"Test case 1 failed\"\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7), \"Test case 2 failed\"\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'all_unique' is not defined",
      "Test 2: FAIL - name 'all_unique' is not defined",
      "Test 3: FAIL - name 'all_unique' is not defined"
    ],
    "generated_code": "def is_all_unique(lst):\n    \"\"\"\n    Check if all elements in the list 'lst' are unique.\n    \n    Args:\n    lst : List[int] - A list of integers\n    \n    Returns:\n    bool - True if all elements are unique, False otherwise\n    \"\"\"\n    # Remove duplicates and compare lengths to determine uniqueness\n    return len(set(lst)) == len(lst)\n\n# Test cases\nprint(is_all_unique([1,2,3]))  # Expected output: True\nprint(is_all_unique([1,2,1,2]))  # Expected output: False\nprint(is_all_unique([1,2,3,4,5]))  # Expected output: True",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sub_list(list1, list2):\n    return [x - y for x, y in zip(list1, list2)]",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def validate(number):\n    num_str = str(number)\n    for digit in num_str:\n        if int(digit) > ord(digit) - ord('0'):\n            return False\n    return True",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(lst, element):\n    return lst == [element] * len(lst)",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match_two_three(text):\n    # Define the regex pattern for \"a\" followed by two to three 'b's.\n    pattern = r'^a(b{2,3})$'\n    \n    # Use regular expression search to find if the pattern matches the given text.\n    result = re.search(pattern, text)\n    \n    # If a match is found, return True and print 'Found a match!', otherwise return False and print 'Not matched!'\n    if result:\n        print('Found a match!')\n        return True\n    else:\n        print('Not matched!')\n        return False",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - UnboundLocalError: local variable 'remaining_repeats_sum' referenced before assignment"
    ],
    "generated_code": "from typing import List\n\ndef max_sub_array_sum_repeated(arr: List[int], n: int, k: int) -> int:\n    def kadane_algorithm(array):\n        max_so_far = max_ending_here = array[0]\n        \n        for i in range(1, len(array)):\n            max_ending_here = max(array[i], max_ending_here + array[i])\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n        \n        return max_so_far\n    \n    # Calculate the total sum and maximum subarray sum for the original array\n    total_sum = sum(arr)\n    max_sub_arr_sum = kadane_algorithm(arr)\n    \n    repeated_n_times = n * k\n    \n    # Find the sum when the array is repeated k times\n    # This involves calculating the number of full repetitions and partial repeats\n    full_k_repeats_sum = ((k * n) * total_sum) // 2  # Sum of first k full repetitions\n    remainder = repeated_n_times % k\n    \n    # Handle case with remainder\n    if remainder:\n        remaining_repeats_sum = 0\n        for j in range(remainder):\n            remaining_repeats_sum += arr[j] * (n + j)\n            \n        remaining_repeats_sum -= (repeated_n_times - remainder) * max_sub_arr_sum\n    \n    return max(full_k_repeats_sum, remaining_repeats_sum)\n\n# Test Cases\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))  # Expected output: 30\nprint(max_sub_array_sum_repeated([-1, 10, 20], 3, 2))      # Expected output: 59\nprint(max_sub_array_sum_repeated([-1, -2, -3], 3, 3))      # Expected output: -1",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n    \n    Args:\n        n (int): The number of even natural numbers to consider.\n        \n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total += (2 * i) ** 2\n    return total\n\n# Test Cases\nassert square_Sum(2) == 20, \"Test case 1 failed\"\nassert square_Sum(3) == 56, \"Test case 2 failed\"\nassert square_Sum(4) == 120, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def modular_inverse(arr, p, q):\n    \"\"\"\n    Counts how many elements in the input array 'arr' have an integer modular inverse modulo 'p'\n    where 'q' is the same as 'p'.\n    \n    Parameters:\n    arr (list of int): The list of integers.\n    p (int): The modulus value which may be equal to 'q'.\n    q (int): The modulus value, guaranteed to not be equal to 'p'.\n    \n    Returns:\n    int: The count of elements with modular inverses modulo 'p'.\n    \"\"\"\n    # Initialize result\n    res = 0\n    \n    for num in arr:\n        if gcd(num, p) == 1 and num != 0:\n            # If modular inverse exists and it's not zero, increment result\n            res += pow(num, -1 % q, q)\n        \n    # Since each pair contributes twice, divide by 2 to get actual count\n    return res // 2\n\n# Helper function to calculate greatest common divisor (GCD)\nfrom math import gcd\n\n# Test the function with provided data points\nprint(modular_inverse([1, 6, 4, 5], 4, 7))  # Expected output: 2\nprint(modular_inverse([1, 3, 8, 12, 12], 5, 13))  # Expected output: 3\nprint(modular_inverse([2, 3, 4, 5], 4, 6))  # Expected output: 1",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def odd_Days(year):\n    \"\"\"\n    This function calculates the number of odd days in a given year.\n    \n    Parameters:\n    year (int): The year for which the number of odd days needs to be calculated.\n    \n    Returns:\n    int: The number of odd days in the given year.\n    \"\"\"\n    # Calculating the number of odd days\n    odd_days = year % 4 * 3 + year % 400 // 4 - year % 100\n    return abs(odd_days)\n\n# Test cases to verify the correctness of the function\nassert odd_Days(100) == 5\nassert odd_Days(50) == 6\nassert odd_Days(75) == 2\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length(lst):\n    if not lst:\n        return (0, [])\n    \n    max_len = -1\n    result_list = []\n    \n    for i in range(len(lst)):\n        sublist = lst[i]\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            result_list = [sublist]\n        elif len(sublist) == max_len:\n            result_list.append(sublist)\n            \n    return (max_len, result_list)\n\n# Test cases\nprint(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: (3, [13, 15, 17])\nprint(max_length([[1], [5, 7], [10, 12, 14,15]]))              # Expected output: (4, [10, 12, 14,15])\nprint(max_length([[5], [15,20,25]]))                          # Expected output: (3, [15,20,25])",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = k\n    \n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] * k + dp[i - 2]\n    \n    return dp[n]\n\n# Test cases\nprint(count_no_of_ways(2, 4)) # Output: 16\nprint(count_no_of_ways(3, 2)) # Output: 6\nprint(count_no_of_ways(4, 4)) # Output: 228",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(x, y):\n    # Calculate and return the integer division of x divided by y.\n    return x // y",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef otherside_rightangle(a, b):\n    return round(math.sqrt(a**2 + b**2), 3)",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def max_val(lst):\n    return max(lst)",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_div(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Inv_Count(arr, n): \n    # Initialize inversion count to 0\n    Inv_Count = 0\n    # Iterate through the array elements\n    for i in range(n): \n        for j in range(i+1,n): \n            # If current element is greater than next element, increment inversion count\n            if arr[i] > arr[j]: \n                Inv_Count += 1\n  \n    return Inv_Count",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_list(nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def intersection_nested_lists(list_1, list_2):\n    result = []\n    for sublist in list_2:\n        if all(elem in list_1 for elem in sublist):\n            result.append(sublist)\n    return result",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_aggregate(lst):\n    # Initialize variables for the max value and corresponding name\n    max_value = -float(\"inf\")\n    max_name = \"\"\n    \n    # Iterate through each tuple in the list\n    for name, score in lst:\n        # Update max_value if current score is higher\n        if score > max_value:\n            max_value = score\n            max_name = name\n            \n    return (max_name, max_value)\n\n# Test cases\nprint(max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])) # ('Juan Whelan', 212)\nprint(max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])) # ('Juan Whelan', 72)\nprint(max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])) # ('Sabah Colley', 70)",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from math import factorial\n\ndef count_binary_seq(n):\n    \"\"\"\n    Calculate the number of binary sequences of length 2n where the sum of the first n bits equals the sum of the last n bits.\n    \n    Args:\n    n : int - The length of each sequence and half of its size\n    \n    Returns:\n    float - The count of valid binary sequences.\n    \"\"\"\n    # Using combinatorial formula for choosing positions of '1's in first n digits\n    num_ways = factorial(2 * n) / (factorial(n) ** 2)\n    return num_ways\n\n# Test cases to verify the correctness of the function\nassert abs(count_binary_seq(1) - 2.0) < 1e-9\nassert abs(count_binary_seq(2) - 6.0) < 1e-9\nassert abs(count_binary_seq(3) - 20.0) < 1e-9\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max() arg is an empty sequence",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_depth(d):\n    \"\"\"\n    Calculate the maximum depth of a nested dictionary.\n    \n    Parameters:\n    d (dict): The dictionary for which the depth is to be calculated.\n    \n    Returns:\n    int: The depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    max_depth = max(dict_depth(v) + 1 for v in d.values())\n    return max_depth",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def set_bit_number(n):\n    \"\"\"\n    Finds the highest set bit number in a given integer n.\n    \n    Parameters:\n    n (int): The integer whose highest set bit needs to be found.\n    \n    Returns:\n    int: The value of the highest set bit number in n.\n    \"\"\"\n    # Check if n is negative, as bitwise operations might not work properly with negative numbers.\n    if n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n    \n    # If n is zero, its highest set bit would be 0.\n    if n == 0:\n        return 0\n    \n    # Find the highest set bit.\n    highest_set_bit = n & -n\n    \n    return highest_set_bit\n\n# Test the function with provided data points.\nassert set_bit_number(6) == 4\nassert set_bit_number(10) == 8\nassert set_bit_number(18) == 16",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def solve(arr, n):\n    # Function to calculate inversion between two types\n    def calc_inversion(sub_arr):\n        inversions = 0\n        for i in range(n-1):\n            if sub_arr[i] > sub_arr[i+1]:\n                inversions += 1\n        return inversions\n    \n    # Calculating inversions for all possible pairs and comparing them\n    total_inversions = sum(calc_inversion(arr[i:i+n//2]) + calc_inversion(arr[i+n//2:]) for i in range(0, len(arr), n//2))\n    \n    return total_inversions % 2 == 0",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Element(arr, k_rotations, start_index, target_rotation):\n    \"\"\"\n    This function finds the element in the array 'arr' which is located \n    'target_rotation' positions from the 'start_index'. The rotation happens\n    as described by the list of rotations provided.\n    \n    :param arr: List[int] - The original array before any rotations have been applied.\n    :param k_rotations: List[List[int]] - A list where each sublist contains two integers [i, j] indicating\n                                            how many times the array has rotated between elements i and j (inclusive).\n    :param start_index: int - The starting position in the original array.\n    :param target_rotation: int - The number of positions we want to move from the start_index.\n    :return: int - The element found based on the conditions specified.\n    \"\"\"\n\n    # Implementing the logic here...\n    pass\n\n# Example check with the provided test cases\nprint(find_Element([1,2,3,4,5], [[0,2],[0,3]], 2, 1))  # Expected output: 3\nprint(find_Element([1,2,3,4], [[0,1],[0,2]], 1, 2))     # Expected output: 3\nprint(find_Element([1,2,3,4,5,6], [[0,1],[0,2]], 1, 1)) # Expected output: 1",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(words_list):\n    \"\"\"\n    Find and return the first pair of words from the given list that both start with the letter 'p'.\n    \n    Parameters:\n        words_list (list): A list containing multiple strings.\n        \n    Returns:\n        tuple: The first matching word pair as a tuple ('pword1', 'pword2').\n    \"\"\"\n    for i in range(len(words_list) - 1):\n        if words_list[i].startswith(\"p\") and words_list[i+1].startswith(\"p\"):\n            return (words_list[i], words_list[i + 1])\n    return (\"No matching pairs found.\",)\n\n# Test cases\nprint(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])) # Expected output: ('Python', 'PHP')\nprint(start_withp([\"Python Programming\",\"Java Programming\"])) # Expected output: ('Python','Programming')\nprint(start_withp([\"Pqrst Pqr\",\"qrstuv\"])) # Expected output: ('Pqrst','Pqr')",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_increasing_subseq(arr, n, k, m):\n    # Initialize the dp array where dp[i] represents the maximum sum of increasing subsequence up to i with k-th element at position m\n    dp = [float('-inf')] * (n + 1)\n    dp[n] = arr[-1] if len(arr) <= m else 0\n    \n    for i in range(n - 1, -1, -1):\n        current_max = float('-inf')\n        for j in range(i, min(m + 1, n)):\n            if dp[j] != float('-inf'):\n                current_max = max(current_max, dp[j])\n                \n        if current_max != float('-inf'):\n            if i < m:\n                dp[i] = arr[i] + current_max\n            else:\n                dp[i] = current_max\n                \n    # Find the maximum value in the dp array excluding the last element as it might be out of bounds\n    return max(dp[:k]) if k < len(dp) else dp[0]\n\n# Test cases\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6))  # Expected output: 11\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5))  # Expected output: 7\nprint(max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4))  # Expected output: 71",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 2: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 3: FAIL - can only concatenate tuple (not \"list\") to tuple"
    ],
    "generated_code": "def colon_tuplex(t, n, value):\n    return t[:n] + [value] * (len(t) - n)",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef large_product(list_a, list_b, num):\n    \"\"\"\n    Find and return 'num' largest products where each product is formed by multiplying one element from list_a with one element from list_b.\n    \n    :param list_a: List containing elements from which to form the first part of the product.\n    :param list_b: List containing elements from which to form the second part of the product.\n    :param num: The number of largest products to return.\n    :return: A list containing the 'num' largest products.\n    \"\"\"\n    # Initialize variables to store the result\n    result = []\n    max_products = [(-float('inf'), -float('inf'))] * num\n    \n    for i in range(len(list_a)):\n        for j in range(len(list_b)):\n            current_product = list_a[i] * list_b[j]\n            \n            if len(result) < num:\n                # Update the max_products list to keep track of the largest products found so far\n                for k in range(num):\n                    if max_products[k][0] < current_product / list_a[i]:\n                        max_products[num-1-k] = (-current_product, list_a[i])\n                        break\n                \n                result.append(current_product)\n                \n            else:\n                # Compare the new product with the smallest product stored in max_products list\n                min_index = result.index(min(max_products))\n                if max_products[min_index][0] < current_product / list_a[i]:\n                    result.remove(max_products[min_index][1])  # Remove the smallest product\n                    result.append(list_a[i])                 # Add the new element\n                    max_products.remove((-current_product, list_a[i]))  # Remove the old product\n                    \n    return result[:num]\n\n# Test cases\nprint(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3))  # Expected output: [60, 54, 50]\nprint(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4))  # Expected output: [60, 54, 50, 48]\nprint(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8,",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def string_to_tuple(s):\n    # Convert the input string into a list of characters,\n    # then zip with range(len(s)) to get pairs.\n    return tuple(zip(s, range(len(s))))\n\n# Test cases\nprint(string_to_tuple(\"python 3.0\"))  # Expected output: ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nprint(string_to_tuple(\"item1\"))       # Expected output: ('i', 't', 'e', 'm', '1')\nprint(string_to_tuple(\"15.10\"))       # Expected output: ('1', '5', '.', '1', '0')",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def set_left_most_unset_bit(num):\n    # Flip all bits of num and then subtract 1 from it to get rightmost set bit position\n    # Subtracting 1 will flip all bits after the first set bit including the set bit itself\n    return ((num ^ (-num)) - 1)\n\n# Test Cases\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cone(radius, height):\n    # Calculate the volume using the formula V = (π * r^2) / 3 * h\n    return (math.pi * radius**2 / 3) * height",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(lst):\n    return [x for x in lst if x > 0]",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_rectangular_grid(grid, k):\n    m = len(grid)\n    n = len(grid[0])\n    \n    # Initialize DP table with zeros\n    dp = [[0]*n for _ in range(m)]\n    \n    # First row can have all elements as they are\n    dp[0][0] = grid[0][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    \n    # Fill rest of the DP table\n    for i in range(1, m):\n        for j in range(n):\n            if j > 0:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + grid[i][j]\n    \n    # Find the largest subarray sum in the last row\n    max_sum = float('-inf')\n    for j in range(n):\n        current_sum = dp[-1][j]\n        if j > 0 and dp[-1][j-1] >= 0:\n            current_sum += dp[-1][j-1]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Test cases\nprint(max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3))  # Output: 7\nprint(max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5))  # Output: 24\nprint(max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5))  # Output: 81",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - max() arg is an empty sequence"
    ],
    "generated_code": "def find_Max_Len_Even(word):\n    # Splitting the string into words and filtering out even-length words\n    even_words = [word for word in word.split() if len(word) % 2 == 0]\n    \n    # Finding the longest even-length word\n    max_len_even_word = max(even_words, key=len)\n    \n    # If no even-length words found, returning -1\n    if not max_len_even_word:\n        return \"-1\"\n    else:\n        return max_len_even_word",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_last_occurrence(arr, x):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1] != x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def modified_encode(lst):\n    result = []\n    count = 1\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            count += 1\n        else:\n            result.append(count)\n            result.append(lst[i - 1])\n            count = 1\n            \n    result.append(count)\n    result.append(lst[-1])\n    \n    return result\n\n# Test cases\nprint(modified_encode([1,1,2,3,4,4,5,1]))  # Output: [[2, 1], 2, 3, [2, 4], 5, 1]\nprint(modified_encode('automatically'))     # Output: ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nprint(modified_encode('python'))           # Output: ['p', 'y', 't', 'h', 'o', 'n']",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_volume(sides_sum):\n    # If there is only one side length, its volume is zero.\n    if sides_sum == 1:\n        return 0\n    \n    # Calculate the maximum possible value for each dimension assuming all dimensions are equal and they add up to 'sides_sum'.\n    # This ensures the resulting cube has the largest volume from the given constraints.\n    dim = int(sides_sum / 3)\n    \n    # Return the calculated volume which will be the maximum volume of a cuboid satisfying the conditions.\n    return dim * dim * dim",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import re\n\ndef find_long_word(s):\n    # Define the regex pattern to match words with exactly 5 characters\n    pattern = r'\\b\\w{5}\\b'\n    \n    # Find all matches of the pattern in the input string\n    matches = re.findall(pattern, s)\n    \n    # Return the list of matched words\n    return matches\n\n# Test cases to verify the correctness of the function\nassert find_long_word('Please move back to stream') == ['stream'], \"Test case 1 failed\"\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra'], \"Test case 2 failed\"\nassert find_long_word('Streaming Media Player') == ['Media'], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_difference(n):\n    def square_sum(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n    \n    def square_sum_of_squares(n):\n        return (n * (n + 1) // 2) ** 2\n    \n    return square_sum_of_squares(n) - square_sum(n)",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def find_demlo(num):\n    result = []\n    num_list = list(str(num))\n    length = len(num)\n    temp_sum = sum(map(int, num_list))\n\n    if length % 2 == 0:\n        while temp_sum > 0:\n            carry = temp_sum // 10\n            temp_sum = temp_sum % 10 + (length - temp_sum) * 9\n            result.append(temp_sum)\n        result.reverse()\n    else:\n        result.extend([int(x) for x in str(temp_sum)])\n        result.append(int(length / 2))\n        while temp_sum != 0:\n            carry = temp_sum // 10\n            temp_sum = temp_sum % 10 + (length - temp_sum) * 9\n            result.append(temp_sum)\n\n    return ''.join(map(str, reversed(result)))\n\n# Test cases\nprint(find_demlo(\"111111\"))  # Should return '12345654321'\nprint(find_demlo(\"1111\"))     # Should return '1234321'\nprint(find_demlo(\"13333122222\"))  # Should return '123456789101110987654321'",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_min(lst):\n    # Find the indices of all occurrences of the minimum value in the list.\n    min_value = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_value]\n\n# Test the function with provided data points\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54]) == [3, 11], \"Test case 1 failed\"\nassert position_min([1,2,2,2,4,4,4,5,5,5,5]) == [0], \"Test case 2 failed\"\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12]) == [1], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [num for num in arr if num >= 0]\n    neg = [num for num in arr if num < 0]\n\n    # Alternate between positive and negative elements\n    result = []\n    i = j = 0\n    while i < len(pos) or j < len(neg):\n        if i < len(pos):\n            result.append(pos[i])\n            i += 1\n        if j < len(neg):\n            result.append(neg[j])\n            j += 1\n\n    return result[:n]  # Return first 'n' elements of the rearranged list",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: tuple index out of range"
    ],
    "generated_code": "def sum_of_alternates(input_list):\n    # Extracting first and third elements for odd index positions and second and fourth for even index positions from input list.\n    result = [input_list[i] + input_list[i+2] if i % 2 != 0 else input_list[i-1] + input_list[i+1] for i in range(len(input_list))]\n    return tuple(result)\n\n# Example usage:\nprint(sum_of_alternates((5, 6, 3, 6, 10, 34)))  # Expected output: (46, 18)\nprint(sum_of_alternates((1, 2, 3, 4, 5)))        # Expected output: (6, 9)\nprint(sum_of_alternates((6, 7, 8, 9, 4, 5)))     # Expected output: (21, 18)",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Min_Squares(target):\n    # Initialize variables\n    max_side = int((target * 4 / 9)**0.5)\n    min_squares = 0\n    \n    # Iterate from largest possible side length down to smallest\n    while target > 0 and max_side >= 0:\n        if target % ((max_side + 1) ** 2) == 0:\n            # If target is exactly divisible by the square of max_side + 1\n            min_squares += 1\n            break\n        else:\n            # Otherwise, decrease the max_side and adjust for remaining target\n            max_side -= 1\n            continue\n    return min_squares",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def most_occurrences(str_list):\n    count_dict = {}\n    max_count = 0\n    result_word = \"\"\n    \n    # Counting occurrence of each word\n    for str in str_list:\n        words = str.split()\n        for word in words:\n            if word in count_dict:\n                count_dict[word] += 1\n            else:\n                count_dict[word] = 1\n    \n    # Finding the word with maximum occurrence\n    for word, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            result_word = word\n            \n    return result_word\n\n# Test cases\nprint(most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]))  # Should return 'UTS'\nprint(most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"]))  # Should return 'year'\nprint(most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"]))  # Should return 'can'",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if all sides of the triangle are equal\n    return a == b and b == c",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(lst, num_items, steps):\n    lst = lst[-steps:] + lst[:-steps]\n    return lst\n\n# Test Cases\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)) # Expected output: [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)) # Expected output: [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)) # Expected output: [6, 7, 8, 9, 10, 1, 2]",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(nums):\n    # Initialize counter for negative numbers\n    negative_count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num < 0:\n            negative_count += 1\n            \n    return negative_count",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_char(input_string):\n    # Use regular expression to match strings of length 3, 4, and 5 characters\n    pattern = r'\\b\\w{3,5}\\b'\n    matches = re.findall(pattern, input_string)\n    return matches",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_unset_bits(number):\n    # Initialize counter for unset bits\n    unset_count = 0\n    \n    # Iterate through each bit position from 0 to 31\n    for i in range(32):\n        # Check if the ith bit is unset (not set)\n        if not (number & (1 << i)):\n            # Increment counter for unset bits\n            unset_count += 1\n            \n    return unset_count",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(input_string):\n    freq = {}\n    for char in input_string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def sort_by_second_element(list_of_tuples):\n    # Sorting based on the second element of each tuple\n    sorted_list = sorted(list_of_tuples, key=lambda x: x[1])\n    return sorted_list",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Validity(a, b, c):\n    # Check if the sum of any two sides is greater than the third side\n    return a + b > c and b + c > a and a + c > b",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ap_sum(a, d, n):\n    return n * (2*a + (n-1)*d) // 2",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum(month_name):\n    months_with_28_days = [\"April\", \"June\", \"September\", \"November\"]\n    return month_name in months_with_28_days",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_word(text):\n    pattern = r\".\\w$\"\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match_word(\"python.\"))   # Expected output: Found a match!\nprint(text_match_word(\"python\"))    # Expected output: Not matched!\nprint(text_match_word(\"lang.\"))     # Expected output: Found a match!",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(s):\n    n = len(s)\n    result = 0\n    \n    for i in range(n):\n        count = 1\n        # Check if there's a character before 'i' which is equal to s[i]\n        while i - count >= 0 and s[i] == s[i - count]:\n            count += 1\n        \n        for j in range(i + 1, n):\n            if s[j] != s[i]: \n                break\n            count += 1\n            \n        result += count * (count + 1) // 2\n    \n    return result\n\n# Test cases\nprint(count_Substring_With_Equal_Ends('aba'))  # Expected output: 4\nprint(count_Substring_With_Equal_Ends('abcab'))  # Expected output: 7\nprint(count_Substring_With_Equal_Ends('abc'))  # Expected output: 3",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Divisor(low, high):\n    divisors = {}\n    \n    for num in range(low, high + 1):\n        if num == 1:\n            continue\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                if i not in divisors:\n                    divisors[i] = 1\n                else:\n                    divisors[i] += 1\n                if num // i != i and num // i not in divisors:\n                    divisors[num // i] = 1\n                else:\n                    divisors[num // i] += 1\n    \n    max_divisor = -1\n    max_count = 0\n    for key, value in divisors.items():\n        if value > max_count:\n            max_count = value\n            max_divisor = key\n    \n    return max_divisor",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_three_smallest_nums(nums):\n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Return the sum of the first three elements\n    return sum(nums[:3])",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def set_to_tuple(input_set):\n    # Convert the input set to a tuple and return it\n    return tuple(input_set)\n\n# Test cases to verify the correctness of the function\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'list' and 'float'"
    ],
    "generated_code": "def find_minimum_range(nums):\n    min_val = float('inf')\n    max_val = -float('inf')\n    result_start = 0\n    result_end = 0\n    \n    for i in range(len(nums)):\n        nums[i] = [nums[i]]\n    \n    while True:\n        # Update max value found so far\n        for arr in nums:\n            if len(arr) > result_end + 1:\n                max_val = max(max_val, arr[result_end + 1])\n        \n        # Find the minimum and maximum values in the current window\n        min_val = min(min_val, *[min(a) for a in nums])\n        max_val = max(max_val, *[max(a) for a in nums])\n        \n        # Check if we have found a valid window\n        if min_val == max_val:\n            break\n        \n        # Move the start pointer for the next iteration\n        while result_start < len(nums) and min_val >= max_val:\n            result_start += 1\n            min_val = min([min(a) for a in nums])\n            max_val = max([max(a) for a in nums])\n            \n    return (result_start, result_end)\n\n# Test cases\nprint(find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]))  # Expected output: (4, 6)\nprint(find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]]))  # Expected output: (4, 7)\nprint(find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]))  # Expected output: (5, 7)",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dig_let(input_str):\n    digit_count = 0\n    letter_count = 0\n    \n    for char in input_str:\n        if char.isdigit():\n            digit_count += 1\n        elif char.isalpha():\n            letter_count += 1\n            \n    return digit_count, letter_count",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Odd_Squares(a, b):\n    \"\"\"\n    Counts and returns the number of integers within the range [a, b] \n    that have an odd number of distinct prime factors.\n    \n    Parameters:\n    - a: The starting integer of the range.\n    - b: The ending integer of the range.\n    \n    Returns:\n    int: The count of numbers within the range [a, b] having odd number of distinct prime factors.\n    \"\"\"\n    def is_odd_factor_count(num):\n        \"\"\"Helper function to check if a number has an odd number of distinct prime factors.\"\"\"\n        primes = set()\n        for i in range(2, num + 1):\n            while not all(i % j != 0 for j in primes):\n                primes.add(i)\n            if len(primes) % 2 == 1:\n                break\n        return len(primes) % 2 == 1\n    \n    count = 0\n    for i in range(a, b + 1):\n        if is_odd_factor_count(i):\n            count += 1\n    return count",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diff_consecutivenums(nums):\n    result = []\n    for i in range(1, len(nums)):\n        result.append(nums[i] - nums[i-1])\n    return result",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def get_zigzag_number(n, k):\n    \"\"\"\n    This function calculates and returns the 'zigzag' number for a given integer n and k.\n    \n    Parameters:\n    - n: The total number of digits in the result.\n    - k: A digit within the range of [0,9].\n    \n    Returns:\n    - The 'zigzag' number as an integer.\n    \"\"\"\n    def helper(i, last_digit):\n        if i == n:\n            return int(last_digit)\n        else:\n            count = sum(range(k)) + sum(range(k-1))\n            return sum(helper(i+1, str(digit)[-len(str(last_digit)):]) * factorials[-1] \n                       for factorials in ((i,) + tuple([sum(factorials[1:]) // len(str(fact)) for fact in reversed(count)]) \n                                           for i, digit in enumerate(str(last_digit), start=1)))\n\n    import itertools\n    from functools import reduce\n    import operator as op\n    \n    # Generate factorial sequence\n    factorials = list(reduce(op.mul, range(1, n+1)))\n    # Reverse the factorials list so we can use it as a stack\n    factorials.reverse()\n    # Convert 'k' to its reverse for calculation purposes\n    rev_k = str(k)[::-1]\n    # Joining digits to form strings with leading zeros\n    rev_digits = ''.join(map(str, itertools.cycle((str(k) for _ in range(len(rev_k)))))).ljust(n, '0')\n    # Initialize the base case for recursion\n    res = helper(1, str('0' if not rev_digits else rev_digits[:n]))\n    # Adjusting the starting index based on 'k'\n    idx_adjustment = (factorials[n-1:] + [-1])[::-1].index(-1)\n    res *= pow(10, idx_adjustment)\n    return res\n\n# Test Cases\nassert get_zigzag_number(4, 3) == 5\nassert get_zigzag_number(4, 2) == 4\nassert get_zigzag_number(3, 1) == 1",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(length, breadth):\n    # Initialize result counter\n    total_squares = 0\n    \n    # Calculate the possible rows and columns for square formation\n    for i in range(length + 1):\n        for j in range(breadth + 1):\n            if i * j >= length * breadth:\n                continue\n            elif i * j < length * breadth:\n                break\n            else:\n                # Increment the count of squares based on row and column values\n                total_squares += 4\n                \n    return total_squares",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_ways(length):\n    # Initialize DP table with zeros\n    dp = [0] * (length + 1)\n    \n    # Base case initialization for single value\n    dp[1] = 1\n    \n    # Fill the DP table based on previous values\n    for i in range(2, length + 1):\n        dp[i] = sum(dp[:i])\n    \n    return dp[-1]",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(binary_string):\n    # Check if all characters in the string are either '0' or '1'\n    return binary_string.isdigit()\n\n# Test cases\nprint(check(\"01010101010\"))  # Expected output: Yes\nprint(check(\"name0\"))        # Expected output: No\nprint(check(\"101\"))          # Expected output: Yes",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def minimum_Length(s):\n    min_length = float('inf')\n    \n    for i in range(len(s)):\n        count = 1\n        while i + 1 < len(s) and s[i] == s[i+1]:\n            count += 1\n            i += 1\n        \n        if count % 2 != 0:\n            if i + 1 < len(s):\n                min_length = min(min_length, count)\n                \n    return len(s) - min_length\n\n# Test cases\nprint(minimum_Length(\"mnm\"))  # Output: 1\nprint(minimum_Length(\"abcda\"))  # Output: 3\nprint(minimum_Length(\"abcb\"))   # Output: 2",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Element(arr, n, k):\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n        if count[arr[i]] == k:\n            return arr[i]\n    return -1",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'unique_Characters' is not defined",
      "Test 2: FAIL - name 'unique_Characters' is not defined",
      "Test 3: FAIL - name 'unique_Characters' is not defined"
    ],
    "generated_code": "def is_unique_chars(s):\n    # Check if the length of the string is greater than number of unique characters possible \n    return len(set(s)) == len(s)\n\n# Test cases\nprint(is_unique_chars('aba'))  # Expected output: False\nprint(is_unique_chars('abc'))  # Expected output: True\nprint(is_unique_chars('abab')) # Expected output: False",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_column(matrix, index):\n    return [[row[i] for i in range(len(row)) if i != index] for row in matrix]\n\n# Test cases\nprint(remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0))\nprint(remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2))\nprint(remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0))",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def tn_ap(t,n,diff):\n    return t + n * diff\n\n# Test cases\nassert tn_ap(1,5,2) == 9\nassert tn_ap(2,6,4) == 22\nassert tn_ap(1,4,5) == 16",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef count_Rectangles(radius):\n    \"\"\"\n    Count the number of rectangles within a circle of given radius.\n    \n    Parameters:\n    - radius (float): The radius of the circle\n    \n    Returns:\n    int: The number of rectangles inside the circle\n    \"\"\"\n    num_rectangles = 0\n    for x in range(-radius + 1, radius):\n        for y in range(-radius + 1, radius):\n            if abs(x) <= radius and abs(y) <= radius:\n                # Check for each point if it forms part of a rectangle\n                dx = min(abs(x), radius + abs(x))\n                dy = min(abs(y), radius + abs(y))\n                \n                # If one side is less than the diameter, there can't be a full rectangle\n                if dx < 2 * radius or dy < 2 * radius:\n                    continue\n                \n                # Calculate the other two sides forming a right-angled triangle\n                s1 = math.sqrt(dx**2 - (dx / 2)**2)\n                s2 = math.sqrt(dy**2 - (dy / 2)**2)\n                \n                # Only consider positive distances as negative would form an identical rectangle but rotated\n                if s1 > 0 and s2 > 0:\n                    num_rectangles += 1\n                    \n    return num_rectangles",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_max(tuple_records):\n    # Initialize max_element with the first record's first element\n    max_element = tuple_records[0][0]\n    \n    # Iterate through each record and update max_element if found a larger value\n    for record in tuple_records:\n        if record[0] > max_element:\n            max_element = record[0]\n            \n    return max_element",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef moddiv_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x % y if y != 0 else 0, lst1, lst2))",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def Check_Solution(a, b, c):\n    # Calculate the discriminant\n    discr = b**2 - 4*a*c\n    \n    # Calculate two roots using the quadratic formula\n    x1 = (-b + math.sqrt(discr)) / (2*a)\n    x2 = (-b - math.sqrt(discr)) / (2*a)\n    \n    # Compare if one root is twice the other\n    if abs(x1/x2 - 2) < 0.001:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test cases\nprint(Check_Solution(1, 3, 2))  # Output: Yes\nprint(Check_Solution(1, 2, 3))  # Output: No\nprint(Check_Solution(1, -5, 6)) # Output: No",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_carol(n):\n    if n == 1:\n        return 1\n    else:\n        # Calculate Carol numbers recursively\n        def carol_helper(num):\n            if num <= 1:\n                return 1\n            return num * 10 + 2 * sum(carol_helper(i - 1) for i in range(1, num))\n        \n        return carol_helper(n)\n\n# Example usage\nprint(get_carol(2))  # Output: 7\nprint(get_carol(4))  # Output: 223\nprint(get_carol(5))  # Output: 959",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lst):\n    return [item for item in lst if item]\n\ndef check_solution():\n    assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]) == ['Red', 'Green', [1, 2], 'Blue'], \"Test case 1 failed\"\n    assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []]) == ['Green', [1, 2], 'Blue'], \"Test case 2 failed\"\n    assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []]) == ['Python', 'programming', 'language'], \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef max_occurrences(lst):\n    # Count the frequency of each element in the list\n    freq = Counter(lst)\n    \n    # Find the maximum frequency\n    max_freq = max(freq.values())\n    \n    # Return the first element with the maximum frequency\n    for item, count in freq.items():\n        if count == max_freq:\n            return item\n\n# Test cases\nprint(max_occurrences([1,2,3,1,2,3,12,4,2]))   # Expected output: 2\nprint(max_occurrences([1,2,6,7,0,1,0,1,0]))    # Expected output: 1\nprint(max_occurrences([1,2,3,1,2,4,1]))         # Expected output: 1",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_K_element(tuple_list, k):\n    \"\"\"\n    Add 'k' elements to each tuple in the list of tuples.\n    \n    :param tuple_list: List of tuples\n    :param k: Integer value to be added to each element of the tuple\n    :return: A new list of tuples with 'k' added to each element\n    \n    Example:\n    >>> add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)\n    [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n    \"\"\"\n    result = []\n    for tup in tuple_list:\n        temp_tup = ()\n        for item in tup:\n            temp_tup += (item + k,)\n        result.append(temp_tup)\n    return result\n\n# Test cases\nprint(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)) # Expected output: [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nprint(add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)) # Expected output: [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nprint(add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)) # Expected output: [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_flip_to_make_string_alternate(s):\n    count = 0\n    flip_count = 0\n    \n    for i in range(1, len(s)):\n        if s[i] == '0':\n            if s[i-1] != '0':\n                flip_count += 1\n        else:\n            if s[i-1] != '1':\n                flip_count += 1\n                \n    return flip_count // 2\n\n# Test cases\nprint(min_flip_to_make_string_alternate(\"0001010111\"))  # Output: 2\nprint(min_flip_to_make_string_alternate(\"001\"))         # Output: 1\nprint(min_flip_to_make_string_alternate(\"010111011\"))   # Output: 2",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(num):\n    # Convert the number to string and remove leading zeros\n    num_str = str(abs(num))\n    \n    # Count the number of characters in the string\n    digit_count = len(num_str)\n    \n    return digit_count",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        raise ValueError(\"The input list must contain at least two elements.\")\n    \n    max_product = float('-inf')\n    for i in range(len(nums) - 1):\n        current_product = nums[i] * nums[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    \n    return max_product",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    \"\"\"\n    This function checks if a given binary tree is balanced.\n    \n    Parameters:\n    root (TreeNode): The root of the binary tree\n    \n    Returns:\n    bool: True if the tree is balanced, False otherwise\n    \"\"\"\n\n    # Base case: an empty tree is considered balanced\n    if not root:\n        return True\n\n    # Helper function to calculate height and balance status recursively\n    def get_height_and_balance(node):\n        if not node:\n            return 0, True\n        \n        # Recursively find heights in the left and right subtrees\n        lheight, lbalance = get_height_and_balance(node.left)\n        rheight, rbalance = get_height_and_balance(node.right)\n\n        # Calculate current height based on max left and right subtree heights + 1 for the parent\n        curheight = max(lheight, rheight) + 1\n        \n        # Check if the current subtree is balanced\n        isbalanced = abs(lheight - rheight) <= 1 and lbalance and rbalance\n        \n        # Return current height, balance status\n        return curheight, isbalanced\n\n    # Call helper function with initial call to root\n    _, isbalanced = get_height_and_balance(root)\n    return isbalanced",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def repeat_tuples(tup, n):\n    return tup * n",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cuboid(length, width, height):\n    # Calculate the lateral surface area of the cuboid\n    return 2 * length * height + 2 * width * height",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]))",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_missing(nums, start, end):\n    if nums[0] != start:\n        return start\n    \n    for i in range(1, len(nums)):\n        expected = start + i\n        if nums[i] != expected:\n            return expected\n    return end + 1",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def heap_assending(lst):\n    import heapq\n    return heapq.nsmallest(len(lst), lst)",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import permutations\n\ndef permute_string(s):\n    return [''.join(p) for p in set(permutations(s))]\n\n# Test cases\nprint(permute_string('ab')) # Expected output: ['ab', 'ba']\nprint(permute_string('abc')) # Expected output: ['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nprint(permute_string('abcd')) # Expected output: ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def round_num(n, m):\n    return int(m * round(float(n) / m))",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_replica(sequence):\n    counter = {}\n    for item in sequence:\n        if item in counter:\n            item = 'MSP'  # Replace duplicate items with 'MSP'\n        else:\n            counter[item] = True\n    result = []\n    for item in sequence:\n        if item != 'MSP':\n            result.append(item)\n        elif not result or result[-1] != 'MSP':\n            result.append('MSP')  # Ensure no consecutive duplicates after replacement\n    return tuple(result)\n\n# Test cases\nprint(remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)))  # Expected output: (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nprint(remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)))  # Expected output: (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nprint(remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)))  # Expected output: (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Char(s, c):\n    new_str = \"\"\n    for char in s:\n        if char != c:\n            new_str += char\n    return new_str",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_first(lst):\n    if lst:\n        last_element = lst.pop()  # Remove and save the last element\n        lst.insert(0, last_element)  # Insert it at the beginning of the list\n    return lst",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    # Calculate the surface area of a cuboid\n    return 2 * ((length*width + width*height + length*height))",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multi_list(m, n):\n    return [[i+j*m for i in range(n)] for j in range(m)]\n\n# Test cases\nprint(multi_list(3, 4))   # Output: [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\nprint(multi_list(5, 7))   # Output: [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nprint(multi_list(10, 15)) # Output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], ..., [8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128]]",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rotation_count(arr):\n    low = 0\n    high = len(arr) - 1\n    \n    while arr[low] > arr[high]:\n        if low == high:\n            break\n        mid = (low + high) // 2\n        \n        # Check if mid is at rotation point\n        if mid > 0 and arr[mid-1] > arr[mid]:\n            return mid\n        \n        # Move left half closer to center\n        if arr[mid] <= arr[high]:\n            high = mid\n        else:\n            low = mid + 1\n            \n    return 0\n\n# Test cases\nprint(find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]))  # Expected output: 3\nprint(find_rotation_count([8, 9, 10, 2, 5, 6]))  # Expected output: 3\nprint(find_rotation_count([2, 5, 6, 8, 9, 10]))  # Expected output: 0",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test failed for input 10. Expected 15, got 1"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    \"\"\"\n    Toggles all odd bits of a given integer.\n    \n    Parameters:\n    n (int): The integer whose odd bits will be toggled.\n    \n    Returns:\n    int: The integer with all its odd bits toggled.\n    \"\"\"\n    result = 0\n    while n != 0:\n        bit = n & 1  # Get the last bit of n\n        if bit == 1:\n            result |= 1  # Toggle the bit in result using OR operation\n        n >>= 1  # Right shift n by one bit\n    return result\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [(10, 15), (20, 1), (30, 11)]\n    for input_val, expected_output in test_cases:\n        assert even_bit_toggle_number(input_val) == expected_output, f\"Test failed for input {input_val}. Expected {expected_output}, got {even_bit_toggle_number(input_val)}\"\n    print(\"All tests passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_Of_Smallest(n, arr):\n    min_val = min(arr)\n    count_min = sum(1 for x in arr if x == min_val)\n    \n    return count_min\n\n# Test cases\nprint(frequency_Of_Smallest(5, [1, 2, 3, 4, 3]))  # Expected output: 1\nprint(frequency_Of_Smallest(7, [3, 1, 2, 5, 6, 2, 3]))  # Expected output: 1\nprint(frequency_Of_Smallest(7, [3, 3, 6, 3, 7, 4, 9]))  # Expected output: 3",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)\n\n# Test cases\nprint(get_perrin(9))  # Expected output: 12\nprint(get_perrin(4))  # Expected output: 2\nprint(get_perrin(6))  # Expected output: 5",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def swap_count(expression):\n    balance = 0\n    total_swaps = 0\n    \n    for char in expression:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n        \n        # If balance is negative, we need to make it positive and then calculate swaps\n        if balance < 0:\n            total_swaps += abs(balance)\n            balance = 0  # Reset balance after calculating swaps for this group\n    \n    # Add remaining swaps if balance is still negative at end\n    total_swaps += abs(balance)\n    \n    return total_swaps",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_or_odd(hex_num):\n    # Remove the '0x' prefix if it exists in the input string\n    hex_num = hex_num.replace('0x', '')\n    \n    # Convert the hexadecimal number to decimal and then determine if it's even or odd\n    decimal_value = int(hex_num, 16)\n    if decimal_value % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test cases to verify the correctness of the solution\nprint(even_or_odd(\"AB3454D\"))  # Expected output: Odd\nprint(even_or_odd(\"ABC\"))      # Expected output: Even\nprint(even_or_odd(\"AAD\"))      # Expected output: Odd",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    # Initialize result variable with 1 as it's the smallest power of 2 greater than 0\n    result = 1\n    while result <= n:\n        # Double the result and continue looping until result exceeds n\n        result *= 2\n    return result // 2  # Return the last valid power of 2",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_lucas(n):\n    # Base cases for Lucas numbers\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Recursive case to calculate Lucas numbers\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_string(lst, format_str):\n    return [format_str.format(item) for item in lst]",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def convert_list_dictionary(keys, values, data):\n    result = {}\n    for key in keys:\n        result[key] = {value: data[i] for i, value in enumerate(values)}\n    return result\n\nassert(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92]) == [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}])\nassert(convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400]) == [{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}])\nassert(convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40]) == [{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}])",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef get_max_sum(num):\n    def recursive_sum(x):\n        if x <= 1:\n            return 0\n        else:\n            # Calculate max of three recursive calls for halves, thirds, fourths, and fifths.\n            return max((recursive_sum(math.floor(x / 2)) + recursive_sum(math.floor(x / 3)) +\n                        recursive_sum(math.floor(x / 4)) + recursive_sum(math.floor(x / 5)),\n                        x))\n    \n    return recursive_sum(num)",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length_list(lst):\n    return max([(len(sublist), sublist) for sublist in lst])[1]\n\n# Test cases\nprint(max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: [13, 15, 17]\nprint(max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])) # Expected output: [1, 2, 3, 4, 5]\nprint(max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])) # Expected output: [6, 7, 8, 9]",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(test_tuple):\n    # Remove duplicate elements from the tuple and compare its length with original length.\n    return len(test_tuple) == len(set(test_tuple))",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    # Count occurrence of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_char(string):\n    # Check if the first and last characters of the string match\n    if len(string) < 2:\n        return \"Invalid\"\n    \n    pattern = f\"^(.{string[0]}.*)\\\\.{string[0]}$\"\n    result = bool(re.match(pattern, string))\n    \n    return \"Valid\" if result else \"Invalid\"\n\n# Test cases\nprint(check_char(\"abba\"))  # Should return 'Valid'\nprint(check_char(\"a\"))     # Should return 'Valid'\nprint(check_char(\"abcd\"))  # Should return 'Invalid'",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_numbers(a, b, c):\n    # Sort the input values\n    arr = sorted([a, b, c])\n    \n    # Calculate the median\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) % 2 == 0:\n        return (arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 2.0\n    else:\n        return arr[len(arr)//2]",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_of_digits(lst):\n    total = 0\n    for i in lst:\n        if isinstance(i, int) or isinstance(i, float):  # Check if element is an integer or floating point number\n            total += sum(int(digit) for digit in str(abs(i)))\n        else:\n            try:\n                total += sum(int(digit) for digit in str(i))\n            except Exception as e:\n                print(f\"Error processing {i}: {e}\")\n    return total\n\n# Test cases\nprint(sum_of_digits([10,2,56]))  # Expected output: 14\nprint(sum_of_digits([[10,20,4,5,'b',70,'a']]))  # Expected output: 19\nprint(sum_of_digits([10,20,-4,5,-70]))  # Expected output: 19",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def bitwise_xor(tup1, tup2):\n    result = tuple(x ^ y for x, y in zip(tup1, tup2))\n    return result",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from collections import Counter\n\ndef extract_freq(lst):\n    \"\"\"\n    Given a list of tuples, returns the count of unique tuples.\n    \n    Args:\n    lst: List of tuples\n    \n    Returns:\n    int: The number of unique tuples in the list\n    \"\"\"\n    # Convert the list of tuples into a set to remove duplicates and then use Counter to get frequencies\n    freq_dict = dict(Counter(tuple(sorted(tup)) for tup in lst))\n    # Return the total frequency count\n    return sum(freq_dict.values())\n\n# Test cases\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)]) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)]) == 4",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_nested_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append((tup1[i][0] + tup2[i][0], tup1[i][1] + tup2[i][1]))\n    return tuple(result)",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - integer division or modulo by zero"
    ],
    "generated_code": "def ncr_modp(n, k, p):\n    def factorial(x):\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result % p\n    \n    numerator = [factorial(i) for i in range(k+1)]\n    denominator = [factorial(j) * factorial(k-j) for j in range(k+1)]\n    \n    product = 1\n    for i in range(len(numerator)):\n        if i != k:\n            product *= numerator[i] // denominator[i]\n    \n    return product % p",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    pattern = r'^(http|ftp)s?://([a-zA-Z0-9.-]+)\\.([a-z]{2,})(/[\\w\\-_.]*)*(\\?[^\\s]*)?$'\n    match = re.match(pattern, url)\n    return bool(match)\n\n# Test cases\nprint(is_valid_URL(\"https://www.google.com\"))  # Expected output: True\nprint(is_valid_URL(\"https:/www.gmail.com\"))   # Expected output: False\nprint(is_valid_URL(\"https:// www.redit.com\")) # Expected output: False",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the smaller one.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The smaller of the two integers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_tuplex(tup, elem):\n    return elem in tup",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(number):\n    # Check if the number is even\n    if number % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Test Cases\nprint(find_Parity(12))  # Output: Even Parity\nprint(find_Parity(7))   # Output: Odd Parity\nprint(find_Parity(10))  # Output: Even Parity",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef rearrange_bigger(n):\n    \"\"\"\n    Rearrange the digits of the given number n to form the smallest possible number that is greater than n.\n    \n    Parameters:\n    - n: An integer\n    \n    Returns:\n    A string representing the new number formed, or 'False' if no such arrangement exists.\n    \"\"\"\n    # Convert the number to a list of its digits\n    digits = [int(d) for d in str(n)]\n    length = len(digits)\n    \n    # Sort the digits in descending order and keep track of visited numbers\n    sorted_digits = sorted(digits, reverse=True)\n    used_digits = set()\n    \n    # Find two elements where the first element is smaller than the second one and both have not been used before\n    while True:\n        min_diff = float('inf')\n        candidates = []\n        \n        # Find all pairs of consecutive digits that satisfy the condition\n        for i in range(length-1):\n            if digits[i] < digits[i+1]:\n                diff = digits[i+1] - digits[i]\n                \n                # Check if there's another digit which has already been used and satisfies the condition\n                for j in range(i + 2, length):\n                    if (digits[j] >= digits[i]) and (diff == digits[j] - digits[i]):\n                        candidates.append((i, j))\n                        \n                if len(candidates) > 0 and diff < min_diff:\n                    min_diff = diff\n                    chosen_pairs = candidates\n        \n        # If we found valid candidates, break out of the loop as we can construct our answer now\n        if len(chosen_pairs) > 0:\n            break\n                \n        # If no valid pair was found, return False as it means no rearrangement can result in a larger number\n        if min_diff == float('inf'):\n            return \"False\"\n            \n        # Assign the smallest available digit from each pair to fill gaps between them\n        gap = int(str(sorted_digits[chosen_pairs[0][1]])[-1])\n        used_digits.add(gap)\n        \n        for idx, _ in chosen_pairs:\n            digits[idx], digits[(idx + 1)%length] = digits[(idx + 1)%length], digits[idx]\n\n    # Construct the final number using the sorted digits excluding those that were used to form the current number\n    num_str = ''.join(map(str, sorted_digits[:min_used]))\n    remaining_digits = list(set(sorted_digits) - used_digits)\n\n    # Place the unused digits",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for |: 'itertools.combinations_with_replacement' and 'itertools.combinations_with_replacement'"
    ],
    "generated_code": "from itertools import combinations_with_replacement\n\ndef k_smallest_pairs(A, B, K):\n    # Generate all possible pairs from A and B\n    pairs = list(combinations_with_replacement(A, 2) | combinations_with_replacement(B, 2))\n    \n    # Sort pairs based on their sum in ascending order\n    pairs.sort(key=lambda x: sum(x))\n    \n    return pairs[:K]\n\n# Test cases\nprint(k_smallest_pairs([1,3,7],[2,4,6],2))  # Expected output: [[1, 2], [1, 4]]\nprint(k_smallest_pairs([1,3,7],[2,4,6],1))  # Expected output: [[1, 2]]\nprint(k_smallest_pairs([1,3,7],[2,4,6],7))  # Expected output: [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_product_tuple(tuples_list):\n    # Initialize the maximum value with negative infinity.\n    max_value = float('-inf')\n    \n    # Iterate through each tuple in the list.\n    for tup in tuples_list:\n        # Calculate the product of the first two elements and compare it with the current max value.\n        if tup[0] * tup[1] > max_value:\n            max_value = tup[0] * tup[1]\n    \n    return max_value",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'Python'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'Python'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'Python'"
    ],
    "generated_code": "def min_val(lst):\n    return min(map(lambda x: int(x) if isinstance(x, str) else x, lst))",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    # Split the string into words based on underscores and capitalize each word except the first one.\n    words = snake_str.split('_')\n    # Capitalize the first letter of each word except the first one and join them back together.\n    camel_case_str = ''.join(word.capitalize() for word in words)\n    return camel_case_str\n\n# Example usage:\nprint(snake_to_camel('android_tv'))  # Output: AndroidTv\nprint(snake_to_camel('google_pixel'))  # Output: GooglePixel\nprint(snake_to_camel('apple_watch'))  # Output: AppleWatch",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(nums):\n    \"\"\"\n    Remove all odd numbers from the given list.\n    \n    Args:\n    nums: List[int] - A list of integers.\n    \n    Returns:\n    List[int] - A new list with all odd numbers removed.\n    \"\"\"\n    return [num for num in nums if not num % 2]\n\n# Test Cases\nprint(remove_odd([1, 2, 3]))  # Expected output: [2]\nprint(remove_odd([2, 4, 6]))  # Expected output: [2, 4, 6]\nprint(remove_odd([10, 20, 3]))  # Expected output: [10, 20]",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_nth_element(lst, n):\n    return [x[n] for x in lst]",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(sequence1, sequence2):\n    # Check if any element of sequence2 is present in sequence1\n    for item in sequence2:\n        if item in sequence1:\n            return True\n    return False",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_Product(nums):\n    \"\"\"\n    Finds and returns the pair of numbers in the list 'nums' which has the maximum product.\n    \n    Parameters:\n    nums (list): A list of integers.\n    \n    Returns:\n    tuple: A tuple containing the two integers from the list whose product is the largest.\n    \"\"\"\n    # Find all unique pairs and their products\n    pairs = [(a, b) for i, a in enumerate(nums) for j, b in enumerate(nums[i+1:]) if a != b]\n    # Sort the list of tuples based on the product of each pair in descending order\n    sorted_pairs = sorted(pairs, key=lambda x: x[0] * x[1], reverse=True)\n    # Return the first pair (as there's only one pair that meets the criteria in this context)\n    return sorted_pairs[0]\n\n# Test cases\nassert max_Product([1,2,3,4,7,0,8,4]) == (7, 8), \"Test case 1 failed\"\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4, -6), \"Test case 2 failed\"\nassert max_Product([1,2,3]) == (2, 3), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def breakSum(n):\n    if n == 0:\n        return 0\n    elif n % 3 == 0:\n        return n + breakSum(int(n/3))\n    else:\n        return max(breakSum(int(n / 3)) + int(n % 3), breakSum(int((n - 1) / 3)) + (int(n % 3) + 1))\n\n# Test cases\nprint(breakSum(12))  # Output: 13\nprint(breakSum(24))  # Output: 27\nprint(breakSum(23))  # Output: 23",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def group_tuples(tuples_list):\n    \"\"\"\n    This function takes a list of tuples and returns a new list where each tuple is replaced with an iterable \n    containing all elements from the original tuples.\n    \n    :param tuples_list: List of tuples to be grouped\n    :return: A new list of iterables containing all elements from the input tuples\n    \n    Example usage:\n    >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n    [('', '', ''), ('x', 'y', 'z'), ('w', 't')]\n    >>> group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')])\n    [('', '', ''), ('a', 'b', 'c'), ('d', 'e')]\n    >>> group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')])\n    [('', '', ''), ('f', 'g', 'g'), ('h', 'i')]\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        temp_tuple = ()\n        for item in tup:\n            if not isinstance(item, str):  # Check if it's not already an iterable\n                item = (item,)\n            temp_tuple += item,\n        result.append(temp_tuple)\n    return result\n\n# Test cases\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max' is not defined",
      "Test 2: FAIL - name 'Find_Max' is not defined",
      "Test 3: FAIL - name 'Find_Max' is not defined"
    ],
    "generated_code": "def find_max(lst):\n    # Initialize variables to store the sublist with maximum length and its length\n    max_sublist = []\n    max_length = 0\n    \n    for sublst in lst:\n        if len(sublst) > max_length:\n            max_length = len(sublst)\n            max_sublist = list(sublst)\n    \n    return max_sublist",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(rounded_numbers)\n\n# Test cases\nprint(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])) # Output: 243\nprint(round_and_sum([5,2,9,24.3,29])) # Output: 345\nprint(round_and_sum([25.0,56.7,89.2])) # Output: 513",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cube_Sum(n):\n    # Initialize sum variable\n    total_sum = 0\n    \n    # Iterate over the first n even natural numbers\n    for i in range(1, n + 1):\n        # Calculate even number and add its cube to total sum\n        even_number = 2 * i\n        total_sum += even_number ** 3\n    \n    return total_sum",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_tuple(test_tuple):\n    # Join all elements in the tuple with an empty string as delimiter\n    result = ''.join(str(x) for x in test_tuple)\n    return result\n\n# Test cases\nprint(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")))  # Expected output: 'ID-is-4-UTS'\nprint(concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\")))  # Expected output: 'QWE-is-4-RTY'\nprint(concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\")))  # Expected output: 'ZEN-is-4-OP'",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes for the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the average of cubes\n    average_of_cube = sum_of_cubes / n\n    \n    return average_of_cube",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_maxgold(matrix, rows, cols):\n    if not matrix or rows < 1 or cols < 1:\n        return 0\n    \n    max_gold = [[0 for _ in range(cols)] for _ in range(rows)]\n    \n    # Base case: The first cell is always its own value.\n    max_gold[0][0] = matrix[0][0]\n    \n    # Fill up the first row and column with maximum values possible.\n    for i in range(1, rows):\n        max_gold[i][0] += max_gold[i-1][0] + matrix[i][0]\n    for j in range(1, cols):\n        max_gold[0][j] += max_gold[0][j-1] + matrix[0][j]\n        \n    # Iterate through each cell starting from the second row and second column.\n    for i in range(1, rows):\n        for j in range(1, cols):\n            # Update the current cell's value as the sum of the current cell and the maximum of the cells above it, left of it, or diagonally left above it.\n            max_gold[i][j] = matrix[i][j] + max(max_gold[i-1][j], max_gold[i][j-1], max_gold[i-1][j-1])\n            \n    # Return the maximum value found in the last cell which contains the final answer.\n    return max_gold[-1][-1]\n\n# Test cases\nprint(get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]], 4, 4))  # Output should be 16\nprint(get_maxgold([[10,20],[30,40]], 2, 2))  # Output should be 70\nprint(get_maxgold([[4,9],[3,7]], 2, 2))  # Output should be 13",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_rear(tup):\n    result = []\n    for s in tup:\n        if len(s) > 0:\n            result.append(s[-1])\n    return result\n\nprint(extract_rear(('Mers', 'for', 'Vers')))  # Expected output: ['s', 'r', 's']\nprint(extract_rear(('Avenge', 'for', 'People')))  # Expected output: ['e', 'r', 'e']\nprint(extract_rear(('Gotta', 'get', 'go')))  # Expected output: ['a', 't', 'o']",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_in_list(list_of_lists, target):\n    count = 0\n    for sublist in list_of_lists:\n        if target in sublist:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))\n\n# Test Cases\nprint(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Should print [1, 3, 5, 7, 9]\nprint(filter_oddnumbers([10,20,45,67,84,93])) # Should print [45, 67, 93]\nprint(filter_oddnumbers([5,7,9,8,6,4,3])) # Should print [5, 7, 9, 3]",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef change_date_format(date_string):\n    # Extract year and month from the string\n    year = int(re.search(r'\\d{4}', date_string).group())\n    month = int(re.search(r'(\\d{1,2})', date_string).group(1))\n    \n    # Create new formatted string in the desired order\n    new_date = f\"{month}-{year}\"\n    \n    return new_date\n\n# Test cases\nprint(change_date_format(\"2026-01-02\"))  # Expected output: \"02-01-2026\"\nprint(change_date_format(\"2020-11-13\"))  # Expected output: \"13-11-2020\"\nprint(change_date_format(\"2021-04-26\"))  # Expected output: \"26-04-2021\"",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            # Rearrange the elements in increasing order\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # Place the element at its correct position\n            arr[j] = temp\n        gap //= 2\n\n# Test the function with provided data points\nprint(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]))  # Expected output: [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nprint(shell_sort([24, 22, 39, 34, 87, 73, 68]))  # Expected output: [22, 24, 34, 39, 68, 73, 87]\nprint(shell_sort([32, 30, 16, 96, 82, 83, 74]))  # Expected output: [16, 30, 32, 74, 82, 83, 96]",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def and_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i] & tup2[i])\n    return tuple(result)\n\n# Test cases\nprint(and_tuples((10, 4, 6, 9), (5, 2, 3, 3))) # Output: (0, 0, 2, 1)\nprint(and_tuples((1, 2, 3, 4), (5, 6, 7, 8)))   # Output: (1, 2, 3, 0)\nprint(and_tuples((8, 9, 11, 12), (7, 13, 14, 17))) # Output: (0, 9, 10, 0)",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_directrix(a,b,c):\n    return -1 / (4 * a) - b / (4 * a)",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_element(list1, list2):\n    # Convert both lists to sets for easy comparison of elements.\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if there is any intersection between the two sets.\n    return bool(set1 & set2)",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def median_trapezium(a, b, c):\n    # Calculate the length of the shorter base\n    x = min(b, c)\n    \n    # Calculate the length of the longer base using the formula for the area of a trapezium\n    y = ((a + b) * c) / x\n    \n    return y",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(numbers, target):\n    for num in numbers:\n        if num > target:\n            return 'Yes, the entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'\n\n# Test cases\nprint(check_greater([1, 2, 3, 4, 5], 4))  # Expected output: No, entered number is less than those in the array\nprint(check_greater([2, 3, 4, 5, 6], 8))  # Expected output: Yes, the entered number is greater than those in the array\nprint(check_greater([9, 7, 4, 8, 6, 1], 11))  # Expected output: Yes, the entered number is greater than those in the array",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def text_match_one(text):\n    # Check if the input string starts with 'a' and ends with 'b'\n    return 'Found a match!' if text.startswith('a') and text.endswith('b') else 'Not matched!'",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def last_Digit(n):\n    # Return the last digit of n\n    return str(n)[-1]",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_nos(lst):\n    # Filter and convert each element of the list to its absolute value,\n    # then filter out non-negative integers.\n    return [num for num in lst if num < 0]\n\n# Test cases\nprint(neg_nos([-1,4,5,-6]))  # Expected output: [-1, -6]\nprint(neg_nos([-1,-2,3,4]))  # Expected output: [-1, -2]\nprint(neg_nos([-7,-6,8,9]))  # Expected output: [-7, -6]",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(s):\n    return ''.join([char for char in s if not ord(char) % 2])",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_bidirectional(pairs):\n    pair_count = {}\n    for p in pairs:\n        if p[0] < p[1]:\n            key = f\"{p[0]}-{p[1]}\"\n        else:\n            key = f\"{p[1]}-{p[0]}\"\n        pair_count[key] = pair_count.get(key, 0) + 1\n    return sum(count // 2 for count in pair_count.values())\n\n# Example usage\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]))  # Output: 3\nprint(count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]))   # Output: 2\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]))   # Output: 4",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(lst):\n    # Convert each element in the list to a string and concatenate them together\n    return int(\"\".join(map(str, lst)))",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_adverb_position(sentence):\n    import re\n    # Define regular expression pattern for finding adverbs followed by punctuation or end of string\n    regex = r\"(\\b[a-zA-Z]+\\b)(?:!\\?!)?\\s*$\"\n    # Find all matches of the pattern in the sentence\n    matches = list(re.finditer(regex, sentence))\n    # If no adverbs found, return None; otherwise, extract adverb and its position\n    if len(matches) == 0:\n        return None\n    else:\n        adverb = matches[0].group(1)\n        pos = [match.start() for match in matches]\n        return pos[0], pos[0] + len(adverb), adverb",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube given its side length\n    return 6 * (side_length ** 2)",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def positive_count(arr):\n    return len(list(filter(lambda x: x > 0, arr))) / len(arr)",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_neg(numbers):\n    # Filter out non-negative numbers and get the maximum value\n    max_negative = max(num for num in numbers if num < 0)\n    return max_negative",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def trim_tuple(tuple_list, k):\n    trimmed_tuples = []\n    for t in tuple_list:\n        temp_t = []\n        for i in range(len(t)):\n            if i < len(t)-k:\n                temp_t.append(t[i])\n        trimmed_tuples.append(tuple(temp_t))\n    return trimmed_tuples\n\nprint(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2))  # Expected output: [(2,), (9,), (2,), (2,)]\nprint(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1))  # Expected output: [(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\nprint(trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)], 1))         # Expected output: [(8, 4), (8, 12), (1, 7), (6, 9)]",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can't multiply sequence by non-int of type 'tuple'",
      "Test 2: FAIL - can't multiply sequence by non-int of type 'tuple'",
      "Test 3: FAIL - can't multiply sequence by non-int of type 'tuple'"
    ],
    "generated_code": "def index_multiplication(tup1, tup2):\n    # Initialize an empty list to store results\n    result = []\n    \n    # Iterate over the indices and corresponding values from both tuples\n    for i in range(len(tup1)):\n        # Multiply the elements at the current index and append as a tuple\n        result.append(tuple([tup1[i] * tup2[i]]))\n    \n    # Return the final list of tuples\n    return result",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Occurrence(tup, lst):\n    # Count occurrences of each element in the list within the tuple\n    occurrence = sum(1 for item in tup if item in lst)\n    return occurrence",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "cube_nums = lambda nums: [num ** 3 for num in nums]",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: cal_sum.<locals>.next_perrin() takes 0 positional arguments but 1 was given"
    ],
    "generated_code": "def cal_sum(n):\n    def next_perrin():\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        else:\n            return next_perrin(n-1) + next_perrin(n-2)\n\n    prev_n = 0\n    current_n = 3  # P0\n    next_num = 0   # P1\n\n    for _ in range(n - 1):  # Calculate first 10 Perrin numbers and store them in an array\n        prev_n = current_n\n        current_n = next_num\n        next_num = next_perrin(prev_n)\n\n    return sum(current_n for i in range(n))\n\nprint(cal_sum(9))  # Expected output: 49\nprint(cal_sum(10)) # Expected output: 66\nprint(cal_sum(11)) # Expected output: 88",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - check_Triangle() takes 3 positional arguments but 6 were given",
      "Test 2: FAIL - check_Triangle() takes 3 positional arguments but 6 were given",
      "Test 3: FAIL - check_Triangle() takes 3 positional arguments but 6 were given"
    ],
    "generated_code": "def check_Triangle(p1, p2, p3):\n    # Calculate the lengths of all sides of the triangle\n    side1 = ((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)**0.5\n    side2 = ((p3[0] - p2[0])**2 + (p3[1] - p2[1])**2)**0.5\n    side3 = ((p1[0] - p3[0])**2 + (p1[1] - p3[1])**2)**0.5\n    \n    # Check if the sum of any two sides is greater than the third side\n    return side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_string(string_list, length):\n    return [s[-length:] for s in string_list]\n\n# Test cases\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)) # ['practice', 'solution']\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6)) # ['Python']\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9)) # ['exercises']",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_whitespaces(input_string):\n    # Remove all whitespace characters in the input string\n    result = re.sub(r'\\s+', '', input_string)\n    return result",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def loss_amount(amount1, amount2):\n    # Calculate the difference between two amounts\n    difference = abs(amount1 - amount2)\n    \n    # Check if there is a loss and calculate the loss amount accordingly\n    if amount1 < amount2:\n        return difference\n    else:\n        return None",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sumofFactors(num):\n    # Initialize result\n    res = 1\n    # Iterate over possible factors from 2 up to the square root of num\n    for i in range(2, int(num**0.5) + 1):\n        count = 0\n        while num % i == 0:\n            num //= i\n            count += 1\n        if count > 0:\n            res *= (i ** count)\n    # If there's a remaining factor which is an odd prime number\n    if num > 1:\n        res *= (num + 1)\n    return res",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_wordz(text):\n    # The regex pattern to find words containing 'z'\n    pattern = r'\\b\\w*z\\b'\n    \n    # Check if the text matches the pattern\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the solution\nprint(text_match_wordz(\"pythonz.\"))   # Expected output: Found a match!\nprint(text_match_wordz(\"xyz.\"))       # Expected output: Found a match!\nprint(text_match_wordz(\"  lang  \"))   # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_monthnumb_number(month_num):\n    # Check if the input is a positive integer less than 13\n    if type(month_num) == int and 0 < month_num <= 12:\n        # If it's February, which has 28 or 29 days based on leap year conditions,\n        # return False as February doesn't always have exactly 31 days.\n        if month_num in [2]:\n            return False\n        else:\n            # For all other months, return True as they generally have exactly 31 days.\n            return True\n    else:\n        # Return False for invalid inputs.\n        return False",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min' is not defined",
      "Test 2: FAIL - name 'Find_Min' is not defined",
      "Test 3: FAIL - name 'Find_Min' is not defined"
    ],
    "generated_code": "def find_min(lst):\n    # Initialize variables to store the sublist with minimum length and its length\n    min_sublist = []\n    min_length = float('inf')\n    \n    for sub in lst:\n        # Check if the current sublist is shorter than the previously found one\n        if len(sub) < min_length:\n            min_length = len(sub)\n            min_sublist = sub\n            \n    return min_sublist",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length, width):\n    return length * width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_uppercase(s):\n    # Use regular expression to replace all uppercase letters with an empty string\n    return re.sub(r'[A-Z]', '', s)",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each sublist in the given list\n    for sub_list in lst:\n        # Append the first element of each sublist to the result list\n        if len(sub_list) > 0:\n            result.append(sub_list[0])\n            \n    return result",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(s):\n    # Initialize counter for uppercase letters\n    upper_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter and increment the counter\n        if char.isupper():\n            upper_count += 1\n            \n    return upper_count",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def combinations_list(lst):\n    if not lst:\n        return [[]]\n    \n    first_element = lst[0]\n    rest_combinations = combinations_list(lst[1:])\n    combinations_with_first = [[first_element] + combination for combination in rest_combinations]\n\n    return rest_combinations + combinations_with_first",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n    Finds the maximum product of a contiguous subarray within an integer array.\n    \n    :param arr: List[int] - The input array of integers.\n    :return: int - The maximum product of a contiguous subarray.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    min_product = float('inf')\n    max_product = float('-inf')\n    for num in arr:\n        # If current number is negative, swap the minimum and maximum products\n        if num < 0:\n            min_product, max_product = min_product * num, max_product * num\n        \n        # Update the minimum and maximum products\n        min_product = min(min_product, num)\n        max_product = max(max_product, num)\n    \n    # Return the maximum product found\n    return max_product",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_value(dictionary, target_value):\n    # Check if every value in the dictionary is equal to the target value\n    return len(set(dictionary.values())) == 1",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(input_dict):\n    # Initialize an empty dictionary to store non-empty keys and values\n    result = {}\n    for key, value in input_dict.items():\n        if value is not None:\n            result[key] = value\n    return result",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_peak(arr, n):\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    return arr[left]\n\n# Test cases\nprint(find_peak([1, 3, 20, 4, 1, 0], 6))  # Expected output: 2\nprint(find_peak([2, 3, 4, 5, 6], 5))      # Expected output: 4\nprint(find_peak([8, 9, 11, 12, 14, 15], 6))  # Expected output: 5",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_to_Octal(decimal_num):\n    if decimal_num == 0:\n        return \"0\"\n    octal_num = \"\"\n    while decimal_num > 0:\n        remainder = decimal_num % 8\n        octal_num = str(remainder) + octal_num\n        decimal_num //= 8\n    return octal_num\n\n# Test cases\nprint(decimal_to_Octal(10))  # Output should be '12'\nprint(decimal_to_Octal(2))   # Output should be '2'\nprint(decimal_to_Octal(33))  # Output should be '41'",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_product(nums, n):\n    # Initialize variables to store the maximum value and second largest value found so far\n    mx = 1\n    sec_mx = 1\n    \n    for i in range(n):\n        if nums[i] > mx:\n            # Update both maximum and second maximum values\n            sec_mx, mx = mx, nums[i]\n        elif nums[i] > sec_mx:\n            # Update the second maximum value\n            sec_mx = nums[i]\n    \n    # Calculate the result as the product of the first two values after sorting the list\n    res = int(mx * sec_mx)\n    return res",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_profit(prices, k):\n    \"\"\"\n    Find the maximum profit you can achieve with at most k transactions.\n    \n    :param prices: List[int] - A list of integers representing the price of a stock on each day.\n    :param k: int - The number of times you can buy and sell stocks in total.\n    :return: int - The maximum profit possible.\n    \"\"\"\n    if not prices or k < 1:\n        return 0\n    \n    n = len(prices)\n    dp = [[[0 for _ in range(k+1)] for _ in range(2)] for __ in range(n)]\n    \n    # Initialize base case for buying\n    for i in range(1, n):\n        for j in range(k + 1):\n            if i == 0:\n                break\n            if j > 0:\n                diff = prices[i] - prices[i-1]\n                if diff >= 0:\n                    dp[i][j%2][0] = max(dp[i-1][j%2][0], dp[i-1][j%2][1] + diff)\n                    dp[i][j%2][1] = dp[i-1][j%2][0]\n                else:\n                    dp[i][j%2][0] = dp[i-1][j%2][0]\n                    dp[i][j%2][1] = dp[i-1][j%2][1]\n    \n    return dp[n-1][(k+1)//2][0]\n\n# Example usage\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3))  # Output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2))     # Output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2))          # Output: 2",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef add_pairwise(tuple_list: List[int]) -> List[int]:\n    result = []\n    for i in range(0, len(tuple_list) - 1, 2):\n        result.append(sum(tuple_list[i:i+2]))\n    return result",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_remainder(arr, n, m):\n    result = 1\n    for num in arr:\n        result *= num\n        # To prevent overflow and manage large numbers efficiently\n        if result >= m:\n            result %= m\n    return result % m",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Consecutive(nums):\n    # Check if all elements in the list are consecutive\n    for i in range(len(nums) - 1):\n        if nums[i] + 1 != nums[i + 1]:\n            return False\n    return True",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_intersection(tuple_list1, tuple_list2):\n    # Convert each tuple list into sets for element uniqueness and then convert them back to tuples.\n    set1 = {tuple(sorted(sub)) for sub in tuple_list1}\n    set2 = {tuple(sorted(sub)) for sub in tuple_list2}\n    \n    # Find common elements between both sets.\n    result_set = set1 & set2\n    \n    # Convert the result set back to a list of tuples before returning it.\n    return [list(result) for result in result_set]",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(string, old_char, new_char):\n    # Replace occurrences of 'old_char' with 'new_char'\n    return string.replace(old_char, new_char)",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef sort_counter(counter_dict):\n    sorted_items = sorted(counter_dict.items(), key=lambda x: x[1], reverse=True)\n    return [(key, value) for key, value in sorted_items]\n\n# Test cases\nprint(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))\nprint(sort_counter({'Math':400, 'Physics':300, 'Chemistry':250}))\nprint(sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250}))",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\n    # Find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Return the sum of the minimum and maximum values\n    return min_val + max_val\n\n# Test cases\nprint(big_sum([1,2,3]))   # Output: 4\nprint(big_sum([-1,2,3,4]))  # Output: 3\nprint(big_sum([2,3,6]))  # Output: 8",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_lower(s):\n    \"\"\"\n    This function takes a string as input and returns the lowercase version of the string.\n    \n    Args:\n    s (str): The input string to be converted to lowercase.\n    \n    Returns:\n    str: The lowercase version of the input string.\n    \"\"\"\n    # Convert all uppercase letters in the string to lowercase\n    result = s.lower()\n    return result\n\n# Test cases to verify the correctness of the function\nassert is_lower(\"InValid\") == \"invalid\", \"Test case 1 failed\"\nassert is_lower(\"TruE\") == \"true\", \"Test case 2 failed\"\nassert is_lower(\"SenTenCE\") == \"sentence\", \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_lowercase(s):\n    return ''.join([char.upper() if char.islower() else char for char in s])",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(number):\n    # Convert the number to string and slice it from the start until the first non-zero character.\n    result = str(abs(number))[0]\n    if result == '-':\n        result = '0'\n    elif int(result) > 9:\n        result = ''\n    return int(result)\n\n# Test cases\nprint(first_Digit(123))  # Output: 1\nprint(first_Digit(456))  # Output: 4\nprint(first_Digit(-123)) # Output: 0",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(s):\n    # Create an empty dictionary to store the frequency of each character\n    char_freq = {}\n    \n    # Iterate through each character in the input string\n    for char in s:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    \n    # Find the character with the highest frequency\n    max_char = ''\n    max_count = 0\n    for char in char_freq:\n        if char_freq[char] > max_count:\n            max_count = char_freq[char]\n            max_char = char\n            \n    return max_char",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'itertools' is not defined"
    ],
    "generated_code": "from typing import List\n\ndef is_subset_sum(nums: List[int], target_sum: int, total_sum: int) -> bool:\n    # Base case: if the sum of elements in nums equals the target_sum, we found a subset\n    if sum(nums) == target_sum and len(set(nums)) <= 1:\n        return True\n    else:\n        # If no such subset exists, check every possible number from 1 to n-1 for each number i,\n        # but do not include numbers already included in the current candidate subset.\n        if all(sum(i) != total_sum - x for i in itertools.combinations_with_replacement(nums, len(nums)-1)):\n            return True\n    return False\n\n# Test cases to verify the correctness of the solution\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef match(text):\n    pattern = '[A-Z][a-z]*'\n    result = re.search(pattern, text)\n    if result:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(match(\"Geeks\"))  # Expected output: Yes\nprint(match(\"geeksforGeeks\"))  # Expected output: Yes\nprint(match(\"geeks\"))  # Expected output: No",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    num = 1\n    while True:\n        if factorial(num) % x == 0:\n            return num\n        num += 1\n        \ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_matching_tuple(tup1, tup2):\n    # Find common elements in both tuples and convert them into a set for quick lookup\n    common_elements = {element for element in tup1 if element in tup2}\n    \n    # Remove all common elements from tuple1 and tuple2\n    new_tup1 = [item for item in tup1 if item not in common_elements]\n    new_tup2 = [item for item in tup2 if item not in common_elements]\n    \n    return new_tup1, new_tup2\n\n# Test cases\nprint(remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]))  # Output: [('you', '?')]\nprint(remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]))  # Output: [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nprint(remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]))  # Output: [('Its', 'been'), ('day', 'without')])",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_palindrome(arr, n):\n    def is_palindrome(num):\n        # Check if a number is equal to its reverse\n        return str(num) == str(num)[::-1]\n    \n    max_num = arr[0]  # Assume the first element of the list is the maximum palindrome\n    \n    for i in range(n):\n        for j in range(i+1, n):  \n            product = arr[i] * arr[j]\n            if is_palindrome(product) and product > max_num:\n                max_num = product\n                \n    return max_num",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the binomial probability of getting exactly k successes in n independent Bernoulli trials with success probability p.\n    \n    Parameters:\n    n (int): Number of trials.\n    k (int): Number of successful outcomes.\n    p (float): Probability of success on an individual trial.\n    \n    Returns:\n    float: Binomial probability of observing exactly k successes.\n    \"\"\"\n    q = 1 - p\n    result = math.comb(n, k) * (p ** k) * (q ** (n - k))\n    return result",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuples_list):\n    # Sort the list of tuples based on the second item in each tuple.\n    sorted_tuples = sorted(tuples_list, key=lambda x: x[1])\n    return sorted_tuples",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'tan' is not defined"
    ],
    "generated_code": "def area_pentagon(side_length):\n    \"\"\"\n    Calculate the area of a regular pentagon with side length 'side_length'.\n\n    Args:\n        side_length (float): The length of each side of the pentagon.\n\n    Returns:\n        float: The area of the pentagon.\n    \"\"\"\n    apothem = side_length / (2 * tan(pi/5))\n    return (5*(sqrt(5 - sqrt(5)) + 1)/4) * side_length**2 * apothem\n\n# Test cases to verify the correctness of the function\nassert abs(area_pentagon(5) - 43.01193501472417) < 1e-6\nassert abs(area_pentagon(10) - 172.0477400588967) < 1e-6\nassert abs(area_pentagon(15) - 387.10741513251753) < 1e-6",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Largest(arr):\n    # Find the maximum value in the array\n    max_value = max(arr)\n    \n    # Count how many times the maximum value appears in the array\n    count = arr.count(max_value)\n    \n    return count",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\nimport collections\n\ndef extract_symmetric(lst: List[Tuple[int]]) -> List[Tuple[int]]:\n    \"\"\"\n    Extracts and returns a list of symmetric tuples from the given list.\n    \n    Args:\n    lst (List[Tuple[int]]): A list of tuples containing integers.\n    \n    Returns:\n    List[Tuple[int]]: A list of tuples where each tuple is symmetric with another tuple in the original list.\n    \"\"\"\n    symmetric_pairs = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if sorted(lst[i]) == sorted(lst[j]):\n                symmetric_pairs.append((lst[i], lst[j]))\n    return symmetric_pairs",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_gp(a, r, n):\n    # Calculate the sum of the first n terms of a geometric progression\n    return round((a * ((r ** n) - 1) / (r - 1)), 0)",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return False\n\n# Test cases\nprint(binary_search([1,2,3,5,8], 6)) # Expected output: False\nprint(binary_search([7, 8, 9, 10, 13], 10)) # Expected output: True\nprint(binary_search([11, 13, 14, 19, 22, 36], 23)) # Expected output: False",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'calculate_polygons' is not defined",
      "Test 2: FAIL - name 'calculate_polygons' is not defined",
      "Test 3: FAIL - name 'calculate_polygons' is not defined"
    ],
    "generated_code": "import math\n\ndef calculate_hexagons(x_step, y_step, n_x, n_y, depth=2):\n    result = []\n    \n    def find_nearest_coords(x, y):\n        closest_distance = float('inf')\n        nearest_coords = None\n        \n        for i in range(n_x):\n            for j in range(n_y):\n                dx = abs(i - x)\n                dy = abs(j - y)\n                \n                distance = math.sqrt(dx ** 2 + dy ** 2)\n                if distance < closest_distance:\n                    closest_distance = distance\n                    nearest_coords = ((i * x_step) - (y_step / 2), -(j * y_step))\n        \n        return nearest_coords\n    \n    current_depth = depth\n    while current_depth >= 0:\n        new_results = []\n        for x in range(n_x):\n            for y in range(n_y):\n                coords = find_nearest_coords(x, y)\n                new_results.append(coords)\n        \n        result.extend(new_results)\n        n_x //= 2\n        n_y //= 2\n        current_depth -= 1\n    \n    # Convert the results into the required format and remove duplicate entries\n    unique_results = set()\n    for polygon in result:\n        tuple_p = (polygon[0], polygon[1])\n        if tuple_p not in unique_results:\n            unique_results.add(tuple_p)\n    \n    final_result = [[coords for coords in hexagon] for hexagon in zip(*unique_results)]\n    \n    return final_result\n\n\n# Test cases\nprint(calculate_hexagons(1, 1, 4, 4))  # Expected output is provided as strings\nprint(calculate_hexagons(5, 4, 7, 9))\nprint(calculate_hexagons(9, 6, 4, 3))",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_to_integer(binary_tuple):\n    # Convert each element in the tuple from binary string to integer and concatenate them\n    result = int(''.join(map(str, binary_tuple)), 2)\n    return str(result)\n\n# Test cases\nprint(binary_to_integer((1, 1, 0, 1, 0, 0, 1)))  # Output: '105'\nprint(binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)))  # Output: '101'\nprint(binary_to_integer((1, 1, 0, 1, 0, 1)))  # Output: '53'",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(input_string):\n    # Use regular expression to replace lowercase letters with an empty string\n    result = re.sub('[a-z]', '', input_string)\n    return result\n\n# Test cases\nprint(remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf'))  # Expected output: 'KDALOOOHLAJSI'\nprint(remove_lowercase('ProducTnamEstreAmIngMediAplAYer'))  # Expected output: 'PTEAIMAAY'\nprint(remove_lowercase('maNufacTuredbYSheZenTechNolOGIes'))  # Expected output: 'NTYSZTNOGI'",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\n\ndef heap_queue_smallest(numbers, k):\n    \"\"\"\n    Finds the k smallest integers in a list using the heap queue algorithm.\n    \n    Parameters:\n    numbers (List[int]): The list of numbers to search through.\n    k (int): The number of smallest elements to return.\n    \n    Returns:\n    List[int]: A list containing the k smallest integers from the input list.\n    \"\"\"\n    # Convert all elements to negative because min-heap in python uses tuples and -num is more efficient than sorting for finding minimums\n    neg_numbers = [-num for num in numbers]\n    # Use heapq.nsmallest to get the k smallest elements efficiently\n    result = heapq.nsmallest(k, neg_numbers)\n    # Reverse the result back to their original sign before returning\n    return [-num for num in result]\n\n# Check function with provided data points\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3))  # Expected output: [14, 22, 25]\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2))   # Expected output: [14, 22]\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5))  # Expected output: [14, 22, 22, 25, 35]",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef surfacearea_cone(radius, height):\n    # Calculate the base area of the cone\n    base_area = math.pi * radius ** 2\n    \n    # Calculate the lateral surface area of the cone\n    slant_height = math.sqrt(height**2 + radius**2)\n    lateral_surface_area = math.pi * radius * slant_height\n    \n    # Surface area of the cone is the sum of the base area and the lateral surface area\n    total_surface_area = base_area + lateral_surface_area\n    \n    return round(total_surface_area, 6)\n\n# Test cases to verify the correctness of the function\nassert surfacearea_cone(5,12) == 282.7433388230814\nassert surfacearea_cone(10,15) == 880.5179353159282\nassert surfacearea_cone(19,17) == 2655.923961165254\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef gcd(a, b):\n    \"\"\"\n    Function to calculate the greatest common divisor of two positive integers.\n    \n    Args:\n    a : int - First positive integer.\n    b : int - Second positive integer.\n    \n    Returns:\n    int - The greatest common divisor of a and b.\n    \"\"\"\n    # Your solution goes here\n    return math.gcd(a, b)",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef diameter_circle(radius):\n    \"\"\"\n    This function calculates and returns the diameter of a circle given its radius.\n    \n    Args:\n        radius (float): The radius of the circle.\n        \n    Returns:\n        float: The diameter of the circle.\n    \"\"\"\n    return 2 * radius",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(lst):\n    # Join all elements in the list with spaces and convert each element to lowercase\n    result = ' '.join(lst).lower()\n    return result",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def num_comm_div(num1, num2):\n    # Initialize the greatest common divisor as the smaller of the two numbers\n    gcd = min(num1, num2)\n    \n    # Continue until both numbers become zero\n    while num1 != 0 and num2 != 0:\n        if num1 > num2:\n            num1 %= num2\n        else:\n            num2 %= num1\n    \n    # The final value will be the GCD\n    return gcd",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(a, b):\n    # Use modulo operator to get the remainder of a divided by b\n    return a % b",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_consecutive_nums(nums):\n    return [nums[i] + nums[i+1] for i in range(len(nums) - 1)]",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Of_Series(n):\n    # Calculate the sum of cubes using the formula n^2 * (n+1)^2 / 4\n    result = n**2 * (n + 1)**2 // 4\n    return result",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef re_order(arr: List[int]) -> List[int]:\n    # Separate non-zero elements from zero elements and append zero elements at the end\n    return [i for i in arr if i != 0] + [0] * arr.count(0)",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'factorial' is not defined"
    ],
    "generated_code": "def permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient p(n, k).\n    \n    Args:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n        \n    Returns:\n        int: The permutation coefficient p(n, k).\n    \"\"\"\n    if not (1 <= k <= n):\n        raise ValueError(\"k must be in range [1, n]\")\n    return factorial(n) // factorial(n - k)\n\n# Check function with provided data points\nassert permutation_coefficient(10, 2) == 90, \"Test case 1 failed\"\nassert permutation_coefficient(10, 3) == 720, \"Test case 2 failed\"\nassert permutation_coefficient(10, 1) == 10, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(word_list, unwanted_words):\n    return [word for word in word_list if word not in unwanted_words]",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef same_order(list1: List[str], list2: List[str]) -> bool:\n    # Check if both lists have the same length\n    if len(list1) != len(list2):\n        return False\n    \n    # Compare elements of both lists element-wise and keep track of matching positions\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            continue\n        else:\n            return False\n            \n    return True",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def average_Odd(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2): # Loop from 1 to n with step 2\n        sum += i\n        count += 1\n    if count == 0:\n        return 0 # Avoid division by zero error\n    else:\n        return sum / count",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "from typing import List\n\ndef no_of_subsequences(arr: List[int], k: int) -> int:\n    def is_valid(x): \n        prod = 1\n        count = 0\n        for num in arr: \n            if x * prod <= k: \n                prod *= num \n                count += 1 \n            else: \n                break\n        return count \n\n    max_val = max(arr)\n    min_divisor = max_val + 1\n    \n    dp = [[0] * (min_divisor + 1) for _ in range(max_val + 1)]\n    \n    for i in range(1, len(dp)): \n        for j in range(1, len(dp[0])): \n            if arr[i-1] % j == 0: \n                dp[i][j] = dp[i-1][j//arr[i-1]] + is_valid(j)\n            else: \n                dp[i][j] = dp[i-1][j]\n                \n    return sum(dp[-1])",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min_Sum(n):\n    # Initialize variables to store the minimum sum and the smallest factor found so far\n    min_sum = float('inf')\n    smallest_factor = None\n    \n    # Iterate from 2 to sqrt(n)\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            # Calculate the sum of all factors including the square root\n            sum_of_factors = (i + n // i) * ((n // i) != i)\n            \n            # Update min_sum if current sum is smaller than previous minimum sum\n            if sum_of_factors < min_sum:\n                min_sum = sum_of_factors\n                smallest_factor = i\n                \n    # If no valid factors were found, start checking from 2 again\n    if not smallest_factor:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                sum_of_factors = i + n // i\n                if sum_of_factors < min_sum:\n                    min_sum = sum_of_factors\n                    smallest_factor = i\n            \n    return min_sum, smallest_factor\n\n# Test cases\nprint(find_Min_Sum(12))   # Expected output: (7, 2)\nprint(find_Min_Sum(105))  # Expected output: (15, 3)\nprint(find_Min_Sum(2))    # Expected output: (2, 2)",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_freq(tup):\n    freq_dict = {}\n    for item in tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        elif item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_str(tup, strng):\n    new_list = []\n    for item in tup:\n        new_list.append(item)\n        new_list.append(strng)\n    return new_list",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_elements(tuple_list):\n    # Calculate the sum of all elements in the input list\n    total_sum = sum(element for element in tuple_list)\n    return total_sum\n\n# Test cases\nprint(sum_elements((7, 8, 9, 1, 10, 7)))  # Expected output: 42\nprint(sum_elements((1, 2, 3, 4, 5, 6)))   # Expected output: 21\nprint(sum_elements((11, 12, 13, 45, 14))) # Expected output: 95",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from itertools import combinations\n\ndef modular_sum(arr, m, n):\n    # Iterate through all possible lengths of subsets from 0 to len(arr)\n    for i in range(len(arr)):\n        # Check each combination of length i starting from the first element\n        for comb in combinations(arr, i+1):\n            # Calculate the sum of the current combination and modulo it by m\n            total = sum(comb)\n            if total % m == n:\n                return True\n    return False\n\n# Example usage:\nprint(modular_sum([3, 1, 7, 5], 4, 6))  # Expected output: True\nprint(modular_sum([1, 7], 2, 5))        # Expected output: False\nprint(modular_sum([1, 6], 2, 5))        # Expected output: False",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def radix_sort(arr):\n    max_num = max(arr)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort_by_digit(arr, exp)\n        exp *= 10\n    return arr\n\ndef counting_sort_by_digit(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    \n    for i in range(n):\n        arr[i] = output[i]\n\n# Test cases\nprint(radix_sort([15, 79, 25, 68, 37])) # Output: [15, 25, 37, 68, 79]\nprint(radix_sort([9, 11, 8, 7, 3, 2])) # Output: [2, 3, 7, 8, 9, 11]\nprint(radix_sort([36, 12, 24, 26, 29])) # Output: [12, 24, 26, 29, 36]",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(nums):\n    max_num = float('-inf')  # Initialize max_num with negative infinity\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sqrt_root(n):\n    \"\"\"\n    This function calculates the integer part of the square root of a given perfect number n.\n    \n    Parameters:\n    n (int): The perfect number for which the square root needs to be calculated.\n    \n    Returns:\n    int: The integer part of the square root of n.\n    \"\"\"\n    return int(math.sqrt(n))",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_tetrahedron(side_length):\n    \"\"\"\n    Calculate the volume of a regular tetrahedron given its side length.\n    \n    Parameters:\n    side_length (float): The length of each edge of the tetrahedron.\n    \n    Returns:\n    float: The volume of the tetrahedron.\n    \"\"\"\n    return (math.sqrt(2) / 12) * pow(side_length, 3)\n\n# Test cases\nprint(volume_tetrahedron(10)) # Expected output: approximately 117.85\nprint(volume_tetrahedron(15)) # Expected output: approximately 397.75\nprint(volume_tetrahedron(20)) # Expected output: approximately 942.81",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_lcm(arr):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    lcm_result = arr[0]\n    \n    for i in range(1, len(arr)):\n        lcm_result *= arr[i] // gcd(lcm_result, arr[i])\n        \n    return lcm_result\n\n# Test cases\nprint(get_lcm([2, 7, 3, 9, 4])) # Expected output: 252\nprint(get_lcm([1, 2, 8, 3])) # Expected output: 24\nprint(get_lcm([3, 8, 4, 10, 5])) # Expected output: 120",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    \"\"\"\n    Check whether the given sides of a triangle can form an isosceles triangle.\n    \n    An isosceles triangle has at least two equal sides.\n    \n    Parameters:\n    a (int): Length of the first side.\n    b (int): Length of the second side.\n    c (int): Length of the third side.\n    \n    Returns:\n    bool: True if the triangle is isosceles, False otherwise.\n    \"\"\"\n    return len(set([a, b, c])) == 2",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: object of type 'int' has no len()"
    ],
    "generated_code": "from bisect import bisect_left, insort\n\ndef lbs(arr):\n    \"\"\"\n    Finds the length of the longest bitonic subsequence in the given array.\n    \n    A bitonic sequence is either strictly increasing or decreasing from some starting point.\n    The function returns the length of the longest bitonic subsequence possible in the array.\n    \"\"\"\n    n = len(arr)\n    inc, dec = [[], []]  # Arrays to store indices for LIS and LDS\n    \n    # Calculate the Longest Increasing Subsequence (LIS) ending at each index\n    for i in range(n):\n        idx = bisect_left(inc, arr[i])\n        if idx == len(inc): \n            insort(inc, arr[i])\n        else:\n            inc[idx] = arr[i]\n        \n    # Calculate the Longest Decreasing Subsequence (LDS) starting at each index\n    for i in range(n-1, -1, -1):\n        idx = bisect_left(dec, arr[i])\n        if idx == len(dec): \n            insort(dec, arr[i])\n        else:\n            dec[idx] = arr[i]\n            \n    max_len = 0\n    # Sum the lengths of both LIS and LDS arrays to get the maximum length of a bitonic subsequence\n    for x in inc + dec:\n        max_len = max(max_len, len(x))\n    \n    return max_len\n\n# Check function with provided data points\nassert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_string(s):\n    def contains_upper():\n        return len([ch for ch in s if ch.isupper()]) < 1\n\n    def contains_lower():\n        return len([ch for ch in s if ch.islower()]) < 1\n\n    def contains_digit():\n        return len([ch for ch in s if ch.isdigit()]) < 1\n\n    def length_check():\n        return len(s) >= 8\n\n    results = [\n        \"String must have 1 upper case character.\" if contains_upper() else \"\",\n        \"String must have 1 number.\" if contains_digit() else \"\",\n        f\"String length should be atleast {len(s)}.\"\n    ]\n\n    return [result for result in results if result != \"\"]",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_increasing_subsequence(arr, n):\n    # Initialize variables for the solution\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    # Compute maximum sum in an increasing subsequence ending at each index i\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n                \n    # Return the maximum value from the dynamic programming table\n    return max(dp)",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'parallel_lines' is not defined",
      "Test 2: FAIL - name 'parallel_lines' is not defined",
      "Test 3: FAIL - name 'parallel_lines' is not defined"
    ],
    "generated_code": "def is_parallel(line1, line2):\n    \"\"\"\n    Checks if two lines represented as lists of three integers are parallel.\n    \n    Parameters:\n        line1 (list): A list containing three integers representing the first line in the form [a, b, c].\n        line2 (list): A list containing three integers representing the second line in the form [a, b, c].\n        \n    Returns:\n        bool: True if the lines are parallel, False otherwise.\n    \"\"\"\n    # If one line's direction vector is zero, it is considered parallel to every other non-zero line\n    if line1[0] == 0 and line1[1] != 0:\n        return True\n    elif line2[0] == 0 and line2[1] != 0:\n        return True\n    \n    # Calculate cross product for both lines\n    x_product = (line1[1]*line2[2]) - (line1[2]*line2[1])\n    y_product = (line1[0]*line2[2]) - (line1[2]*line2[0])\n    \n    # Lines are parallel if their cross products are equal\n    return x_product == y_product",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def capitalize_first_last_letters(text):\n    \"\"\"\n    Capitalizes the first and last letter of each word in the input text.\n    \n    Parameters:\n        text (str): The input text to be processed.\n        \n    Returns:\n        str: The modified text with the first and last letter of each word capitalized.\n    \"\"\"\n    # Split the text into words, capitalize the first and last letter of each word,\n    # then join them back together.\n    result = ' '.join(word[0].upper() + word[:-1][::-1] + word[-1].upper() for word in text.split())\n    return result\n\n# Test cases to verify the correctness of the function.\nassert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pairs_count(arr, target_sum, max_val):\n    count = 0\n    seen = set()\n    \n    for num in arr:\n        diff = target_sum - num\n        if diff in seen:\n            count += 1\n        else:\n            seen.add(num)\n    \n    return count\n\n# Test Cases\nprint(get_pairs_count([1, 5, 7, -1, 5], 5, 6))  # Expected output: 3\nprint(get_pairs_count([1, 5, 7, -1], 4, 6))     # Expected output: 2\nprint(get_pairs_count([1, 1, 1, 1], 4, 2))      # Expected output: 6",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length(lst):\n    return min(lst, key=len)\n\nprint(min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) == (1, [0])\nprint(min_length([[1], [5, 7], [10, 12, 14,15]])) == (1, [1])\nprint(min_length([[5], [15,20,25]])) == (1, [5])",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def jacobsthal_lucas(n):\n    # Base case initialization for the first two Jacobsthal-Lucas numbers\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize variables for memoization\n    j = [2] + [None]*n\n    l = [1] + [None]*(n-1)\n    \n    # Fill in the array with values of Jacobsthal-Lucas numbers using recursion and memoization\n    def recursive_jacobsthal_lucas(i):\n        if i >= len(j): \n            return -1\n        if j[i] is None:  \n            j[i] = recursive_jacobsthal_lucas(i-1) + recursive_jacobsthal_lucas(i-2)\n        return j[i]\n    \n    # Since we need to calculate up to the nth term, we iterate from n to 1\n    for i in range(n, 0, -1):\n        result = recursive_jacobsthal_lucas(i)\n        \n        # If there was an error during calculation, return None; otherwise, store it as the value at index i\n        if result == -1:\n            return None\n        else:\n            l[i-1] = result\n    \n    # Return the nth Jacobsthal-Lucas number, which corresponds to the last element of the list l\n    return l[0]\n\n# Test cases to verify the correctness of the function\nprint(jacobsthal_lucas(5))  # Expected output: 31\nprint(jacobsthal_lucas(2))  # Expected output: 5\nprint(jacobsthal_lucas(4))  # Expected output: 17",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def negative_count(arr):\n    # Count the number of negative numbers in the array\n    count = sum(1 for x in arr if x < 0)\n    # Calculate and return the ratio of negative numbers\n    return count / len(arr)\n\n# Test cases to verify the correctness of the function\nassert round(negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 2) == 0.31\nassert round(negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 2) == 0.31\nassert round(negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 2) == 0.44",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_coins(coins, amount, n):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    \n    for coin in range(1, n + 1):\n        for i in range(coin, amount + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1\n\n# Test cases\nprint(min_coins([9, 6, 5, 1], 4, 11))  # Output should be 2\nprint(min_coins([4, 5, 6, 7, 8, 9], 6, 9))  # Output should be 1\nprint(min_coins([1, 2, 3], 3, 4))  # Output should be 2",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_permutation(str1, str2):\n    # Convert both strings to lists and sort them\n    sorted_str1 = sorted(list(str1))\n    sorted_str2 = sorted(list(str2))\n\n    # Compare sorted characters from both lists\n    for char1, char2 in zip(sorted_str1, sorted_str2):\n        if char1 != char2:\n            return False\n    return True",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_datatype(tup, datatype):\n    new_tup = ()\n    for item in tup:\n        if not isinstance(item, datatype):\n            new_tup += (item,)\n    return new_tup\n\n# Test cases\nprint(remove_datatype((4, 5, 4, 7.7, 1.2), int))  # Output: [7.7, 1.2]\nprint(remove_datatype((7, 8, 9, \"SR\"), str))       # Output: [7, 8, 9]\nprint(remove_datatype((7, 1.1, 2, 2.2), float))    # Output: [7, 2]",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from bisect import bisect_left\n\ndef search_literal(string, literal):\n    \"\"\"\n    Search for the position of the first occurrence of 'literal' in 'string'.\n    \n    Parameters:\n    string (str): The main string in which to search.\n    literal (str): The substring to search for within the main string.\n    \n    Returns:\n    tuple: A tuple containing the start index and end index of the found literal in the main string.\n    \"\"\"\n    if not string or not literal:\n        return (-1, -1)\n\n    # Reverse both strings for binary search from the back\n    reversed_string = string[::-1]\n    reversed_literal = literal[::-1]\n\n    i = bisect_left(reversed_string, reversed_literal[0])\n\n    if len(literal) == 1:\n        return (i * -1, i * -1 + 1)\n\n    while i < len(reversed_string):\n        if reversed_string[i] == reversed_literal[-(len(literal)-1-i)]:\n            j = bisect_left(reversed_literal, reversed_string[i])\n            if len(literal) <= j:\n                break\n            i += j\n        else:\n            break\n\n    result_start_index = -(i+1)\n    result_end_index = result_start_index + len(literal)\n\n    return ((result_start_index), (result_end_index))\n\n# Check function with provided data points\nassert search_literal('python', 'python programming language') == (0, 6)\nassert search_literal('programming', 'python programming language') == (7, 18)\nassert search_literal('language', 'python programming language') == (19, 27)\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef topbottom_surfacearea(radius):\n    height = radius * 2\n    base_area = math.pi * (radius ** 2)\n    lateral_area = 2 * math.pi * radius * height\n    total_surface_area = 2 * base_area + lateral_area\n    return round(total_surface_area, 4)\n\n# Test cases\nprint(topbottom_surfacearea(10)) # Expected output: 314.1500\nprint(topbottom_surfacearea(5))  # Expected output: 78.5375\nprint(topbottom_surfacearea(4))  # Expected output: 50.2640",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(lst, n):\n    return lst[n::n]\n\n# Test cases\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))  # Output: [1, 3, 5, 7, 9]\nprint(nth_items([10, 15, 19, 17, 16, 18], 3))   # Output: [10, 17]\nprint(nth_items([14, 16, 19, 15, 17], 4))       # Output: [14, 17]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_word(s):\n    words = s.split()\n    seen_words = set()\n    \n    for word in words:\n        if word in seen_words:\n            return word\n        else:\n            seen_words.add(word)\n    \n    return None",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\n    \"\"\"\n    Converts a list of characters into a tuple.\n    \n    Args:\n    string_list (list): A list containing strings as elements.\n    \n    Returns:\n    tuple: A tuple where each element is an individual character from the input list.\n    \"\"\"\n    return tuple(char for word in string_list for char in word)\n\n# Test cases\nprint(string_list_to_tuple([\"python 3.0\"])) # Expected output: ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nprint(string_list_to_tuple([\"bigdata\"]))   # Expected output: ('b', 'i', 'g', 'd', 'a', 't', 'a')\nprint(string_list_to_tuple([\"language\"]))  # Expected output: ('l', 'a', 'n', 'g', 'u', 'a', 'g', 'e')",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "def basesnum_correspondingnum(bases, nums):\n    return [base**index for base, index in zip(bases, range(len(nums)))]\n\n# Test Cases\nprint(basesnum_correspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(basesnum_correspondingnum([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70]))\nprint(basesnum_correspondingnum([4, 8, 12, 16, 20, 24, 28], [3, 6, 9, 12, 15, 18, 21]))",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\ndef find_Diff(arr, n):\n    # Count frequency of each element\n    count = Counter(arr)\n    \n    # Find maximum and minimum frequency\n    max_count = max(count.values())\n    min_count = min(count.values())\n    \n    # Calculate and return the difference\n    return max_count - min_count\n\n# Test cases\nprint(find_Diff([1,1,2,2,7,8,4,5,1,4],10))  # Expected output: 2\nprint(find_Diff([1,7,9,2,3,3,1,3,3],9))      # Expected output: 3\nprint(find_Diff([1,2,1,2],4))                 # Expected output: 0",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_abundant(n):\n    divisors_sum = sum(i for i in range(1, n) if n % i == 0)\n    return divisors_sum > n",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef fill_spaces(input_string):\n    # Replace spaces, commas, and dots with a colon using regex\n    result = re.sub(r'[ ,\\.]', ':', input_string)\n    return result",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_digits(num1, num2):\n    \"\"\"\n    This function takes two integers as input, adds them together,\n    calculates the number of digits in their sum, and returns this digit count.\n    \n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n        \n    Returns:\n        int: The number of digits in the sum of num1 and num2.\n    \"\"\"\n    # Calculate the sum of num1 and num2\n    total = num1 + num2\n    \n    # Convert the sum into a string to iterate over each character\n    str_total = str(total)\n    \n    # Count the number of characters in the string (which represent digits)\n    digit_count = len(str_total)\n    \n    return digit_count",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: can only concatenate list (not \"tuple\") to list"
    ],
    "generated_code": "def flatten_tuple(tuples_list):\n    # Flatten the list of tuples into a single string with spaces in between elements\n    flattened_string = ' '.join(map(str, sum(tuples_list, [])))\n    return flattened_string\n\n# Test cases\nprint(flatten_tuple([(['1', '4', '6'], ['5', '8'], ['2', '9'], ['1', '10'])])) # Expected output: '1 4 6 5 8 2 9 1 10'\nprint(flatten_tuple([(['2', '3', '4'], ['6', '9'], ['3', '2'], ['2', '11'])])) # Expected output: '2 3 4 6 9 3 2 2 11'\nprint(flatten_tuple([(['14', '21', '9'], ['24', '19'], ['12', '29'], ['23', '17'])])) # Expected output: '14 21 9 24 19 12 29 23 17'",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_F_and_L_bits(n):\n    # Shift right twice and then shift left by one position to toggle the first and last bits.\n    result = ((n >> 1) << 1) ^ n\n    return result",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_occurence_char(s, char):\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == char:\n            return i\n    return None",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Total_Hamming_Distance(n):\n    total_sum = 0\n    for i in range(n+1):\n        total_sum += ((i << i) - i)\n    return total_sum",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport bisect\n\ndef longest_increasing_subsequence(sequence: List[int]) -> int:\n    if not sequence:\n        return 0\n    \n    # Initialize variables\n    dp = [1] * len(sequence)\n    \n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return max(dp)\n\n# Test cases\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))  # Expected output: 5\nprint(longest_increasing_subsequence([3, 10, 2, 1, 20]))  # Expected output: 3\nprint(longest_increasing_subsequence([50, 3, 10, 7, 40, 80]))  # Expected output: 4",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    # Initialize the sum with the fifth power of the first odd number\n    total_sum = 1 ** 5\n    \n    # Loop through the next n-1 odd numbers and add their fifth powers to the sum\n    for i in range(2, n + 1):\n        total_sum += (2 * i - 1) ** 5\n    \n    return total_sum",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def find_Max(arr, start, end):\n    # Base case: if there is one element left, return it as the max\n    if start == end:\n        return arr[start]\n    \n    # Find the pivot point where the array is rotated\n    mid = (start + end) // 2\n    \n    # Check if the middle element is greater than its right neighbor,\n    # then the array is rotated between [start, mid] and [mid+1, end]\n    if mid < end and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    # Check if the middle element is less than its left neighbor,\n    # then the array is rotated between [start, mid-1] and [mid, end]\n    elif mid > start and arr[mid - 1] > arr[mid]:\n        return arr[mid - 1]\n    # If none of the above conditions are met, we need to check the left half for rotation\n    else:\n        return find_Max(arr, start, mid - 1)\n\n# Example usage:\nprint(find_Max([2,3,5,6,9], 0, 4))  # Expected output: 9\nprint(find_Max([3,4,5,2,1], 0, 4))  # Expected output: 5\nprint(find_Max([1,2,3], 0, 2))      # Expected output: 3",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_column(nested_list, col_index):\n    return [inner_list[col_index] for inner_list in nested_list]\n\n# Test cases\nprint(extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)) # Expected output: [1, 2, 1]\nprint(extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)) # Expected output: [3, -5, 1]\nprint(extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)) # Expected output: [1, 5, 1, 13, 5, 9]",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Seq_Linear(sequence):\n    \"\"\"\n    Checks if the given sequence is a linear sequence.\n    \n    Parameters:\n    - sequence: A list of integers\n    \n    Returns:\n    A string indicating whether the sequence is 'Linear Sequence' or 'Non Linear Sequence'.\n    \"\"\"\n    # Assuming the sequence has at least two elements and is strictly increasing\n    return \"Linear Sequence\" if all(j-i > 0 for i, j in zip(sequence[:-1], sequence[1:])) else \"Non Linear Sequence\"\n\n# Test cases\nprint(Seq_Linear([0,2,4,6,8,10]))  # Expected output: Linear Sequence\nprint(Seq_Linear([1,2,3]))         # Expected output: Linear Sequence\nprint(Seq_Linear([1,5,2]))         # Expected output: Non Linear Sequence",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_to_float(tup):\n    # Convert each element in the tuple to float and sum them up\n    result = sum(float(i) for i in tup)\n    return result",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(mixed_list):\n    # Use filter and lambda to keep only odd numbers in the list\n    result = list(filter(lambda x: x % 2 != 0, mixed_list))\n    return result",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def difference(n):\n    # Calculate sum of cubes for first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate sum of first n natural numbers\n    sum_natural_numbers = sum(range(1, n+1))\n    \n    # Return the difference\n    return sum_cubes - sum_natural_numbers",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Odd_Pair(arr, target_odd_pair):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if ((arr[i] ^ arr[j]) % 2 == 1): # Check if XOR is odd\n                count += 1\n    return count",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(s):\n    # Initialize an empty list to store the toggled characters\n    toggled_chars = []\n    \n    for char in s:\n        if char.islower():\n            toggled_chars.append(char.upper())\n        else:\n            toggled_chars.append(char.lower())\n    \n    return ''.join(toggled_chars)",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def digit_distance_nums(x, y):\n    # Calculate the absolute difference of their digits and sum them up\n    return sum(abs(int(digit)-int((str(max(x,y)))[0])) for digit in str(abs(x-y)))",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sub_array_sum(nums, size): \n    # Initialize variables for maximum and minimum sums up to index i and previous minimum\n    max_ending_here = float('-inf') \n    max_so_far = float('-inf')\n    min_till_here = 0\n    \n    # Iterate through each element in the array\n    for i in range(size): \n        if nums[i] < 0:  \n            # If current number is negative, reset both max_ending_here and max_so_far\n            max_ending_here = 0\n            continue\n            \n        # Calculate the maximum sum ending at the current position by considering either adding the current number to existing sum or starting anew with the current number as the new end\n        max_ending_here += nums[i]\n        \n        # Update max_so_far if max_ending_here becomes greater than its value so far\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        \n        # Update min_till_here to be equal to the current number minus the previous min, ensuring we keep track of the minimum sum until now\n        min_till_here += nums[i]\n    \n    # Return the maximum sum found\n    return max_so_far",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - descriptor 'union' for 'frozenset' objects doesn't apply to a 'set' object",
      "Test 2: FAIL - descriptor 'union' for 'frozenset' objects doesn't apply to a 'set' object",
      "Test 3: FAIL - descriptor 'union' for 'frozenset' objects doesn't apply to a 'set' object"
    ],
    "generated_code": "def union_elements(tup1, tup2):\n    # Use set() to convert both tuples to sets and then combine them using frozenset for uniqueness.\n    # Convert the result back to tuple before returning.\n    return tuple(frozenset.union(set(tup1), set(tup2)))",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_elements(pairs):\n    result = {}\n    for i in range(len(pairs)):\n        if pairs[i][0] not in result:\n            result[pairs[i][0]] = []\n        for j in range(i+1, len(pairs)):\n            if pairs[j][0] == pairs[i][0]:\n                result[pairs[i][0]].append(pairs[j][1])\n                break\n    return result",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Max_Length(lst):\n    # Initialize max_length with 0\n    max_length = 0\n    \n    # Iterate through each sublist in the list\n    for sub_list in lst:\n        # Update max_length if current sublist is longer\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    \n    return max_length\n\n# Test cases\nprint(Find_Max_Length([[1],[1,4],[5,6,7,8]]))  # Output: 4\nprint(Find_Max_Length([[0,1],[2,2,],[3,2,1]]))  # Output: 3\nprint(Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]))  # Output: 5",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef extract_values(s):\n    return [match.group(0)[1:-1] for match in re.finditer(r'\"([^\"]*)\"', s)]",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    # Count of unique elements in the array\n    unique_count = len(set(arr))\n    \n    # Total number of possible pairs\n    total_pairs = n * (n - 1) // 2\n    \n    # Calculate the number of equal pairs and subtract them from total pairs\n    equal_pairs = n * (unique_count - 1)\n    \n    return total_pairs - equal_pairs",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(s):\n    return list(s)",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(lst):\n    return all(x <= y for x, y in zip(lst, lst[1:]))\n\n# Test cases\nprint(issort_list([1,2,4,6,8,10,12,14,16,17])) # Expected output: True\nprint(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])) # Expected output: False\nprint(issort_list([1, 2, 4, 6, 8, 10,15,14,20])) # Expected output: False",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_sublists(lists):\n    return [[item for item in sublist] for sublist in sorted(zip(*lists), key=lambda x: len(x[0]))]",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_words(string_list, chars_to_remove):\n    return [''.join([char for char in word if char not in chars_to_remove]) for word in string_list]",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_pair_diff_lessthan_K(nums: List[int], k: int, n: int) -> int:\n    nums.sort()\n    max_sum = -float(\"inf\")\n    \n    left, right = 0, len(nums) - 1\n    \n    while left < right:\n        if abs(nums[left] - nums[right]) < k:\n            max_sum = max(max_sum, sum(sorted(nums)[left:right+1]))\n            left += 1\n        else:\n            right -= 1\n            \n    return max_sum\n\n# Test cases\nprint(max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4))  # Output: 62\nprint(max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12))         # Output: 25\nprint(max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6))       # Output: 21",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def two_unique_nums(lists):\n    unique_set = set()\n    result_list = []\n    \n    for lst in lists:\n        seen_numbers = set()\n        for num in lst:\n            if num not in seen_numbers:\n                unique_set.add(num)\n                seen_numbers.add(num)\n                \n        result_list.extend(unique_set)\n        \n    return list(result_list)\n\n# Test cases\nprint(two_unique_nums([1,2,3,2,3,4,5])) # Should return [1, 4, 5]\nprint(two_unique_nums([1,2,3,2,4,5]))   # Should return [1, 3, 4, 5]\nprint(two_unique_nums([1,2,3,4,5]))     # Should return [1, 2, 3, 4, 5]",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef unique_product(nums: List[int]) -> int:\n    unique_nums = set(nums)  # Remove duplicates and store them in a set\n    result = 1\n    for num in unique_nums:\n        result *= num\n    return result\n\n# Test cases\nprint(unique_product([10, 20, 30, 40, 20, 50, 60, 40]))  # Output: 720000000\nprint(unique_product([1, 2, 3, 1,]))  # Output: 6\nprint(unique_product([7, 8, 9, 0, 1, 1]))  # Output: 0",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # Calculate the surface area of a cylinder using the formula:\n    # A = 2πr(r + h)\n    return 2 * math.pi * radius * (radius + height)\n\n# Test cases to verify the correctness of the function\nassert abs(surfacearea_cylinder(10, 5) - 942.45) < 0.01\nassert abs(surfacearea_cylinder(4, 5) - 226.188) < 0.001\nassert abs(surfacearea_cylinder(4, 10) - 351.848) < 0.001",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def count_no(nth_number, divisor, limit):\n    \"\"\"\n    Returns the count of numbers from 1 to 'limit' inclusive which are not divisible by 'divisor'\n    and also equal to or greater than 'nth_number'.\n    \n    :param nth_number: The minimum value for the target numbers.\n    :param divisor: The number by which the target numbers must not be divisible.\n    :param limit: The upper bound of the range to check.\n    :return: The count of numbers meeting the criteria.\n    \"\"\"\n    current = nth_number - 1\n    while True:\n        if current % divisor != 0 and current >= nth_number:\n            yield current\n        current += 1\n\n# Test Cases\nprint(list(count_no(2, 3, 10))) # Should print [1, 4, 5, 7, 8]\nprint(list(count_no(3, 6, 20))) # Should print [9, 10, 11, ..., 22, 23]\nprint(list(count_no(5, 10, 20))) # Should print [15, 16, 17, ..., 25, 26]",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Sub_Array' is not defined",
      "Test 2: FAIL - name 'is_Sub_Array' is not defined",
      "Test 3: FAIL - name 'is_Sub_Array' is not defined"
    ],
    "generated_code": "def is_sub_array(nums1, nums2, n, m):\n    # Initialize pointers for both arrays\n    i = j = 0\n    \n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            # Increment pointers when elements match\n            i += 1\n            j += 1\n        else:\n            # Move pointer in nums1 if it doesn't match with the current element in nums2\n            i += 1\n    \n    # If we have reached the end of nums1 and all elements matched, return True\n    return i == len(nums1)\n\n# Test cases\nprint(is_sub_array([1,4,3,5],[1,2],4,2))  # Expected output: False\nprint(is_sub_array([1,2,1],[1,2,1],3,3))  # Expected output: True\nprint(is_sub_array([1,0,2,2],[2,2,0],4,3))  # Expected output: False",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def last_Digit_Factorial(n):\n    # Calculate n!\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    \n    # Return the last digit of the factorial\n    return str(factorial)[-1]\n\ndef check_solution():\n    assert last_Digit_Factorial(4) == 4, \"Test case 1 failed\"\n    assert last_Digit_Factorial(21) == 0, \"Test case 2 failed\"\n    assert last_Digit_Factorial(30) == 0, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def interleave_lists(list1, list2, list3):\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n\n# Test cases\nprint(interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])) # Expected output: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nprint(interleave_lists([10,20],[15,2],[5,10])) # Expected output: [10,15,5,20,2,10]\nprint(interleave_lists([11,44], [10,15], [20,5])) # Expected output: [11,10,20,44,15,5]",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_dissimilar(tuple_a, tuple_b):\n    # Find the set difference between two tuples and convert it back into a list of tuples\n    result = tuple(set(tuple_a) ^ set(tuple_b))\n    return result",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_even(tup):\n    return tuple(x for x in tup if isinstance(x, int) and x % 2 == 0)\n\n# Test cases\nprint(extract_even((4, 5, (7, 6, (2, 4)), 6, 8)))  # Output: (4, (6, (2, 4)), 6, 8)\nprint(extract_even((5, 6, (8, 7, (4, 8)), 7, 9)))  # Output: (6, (8, (4, 8)))\nprint(extract_even((5, 6, (9, 8, (4, 6)), 8, 10)))  # Output: (6, (8, (4, 6)), 8, 10)",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def surface_Area(base_edge, slant_height):\n    # Calculate base area\n    base_area = base_edge ** 2\n    \n    # Calculate lateral area using Pythagorean theorem\n    lateral_area = base_edge * slant_height\n    \n    # Add base and two triangular faces' areas together\n    total_surface_area = base_area + 2 * (lateral_area / 2)\n    \n    return round(total_surface_area, 1)\n\n# Test cases\nprint(surface_Area(3,4))  # Expected output: 33.0\nprint(surface_Area(4,5))  # Expected output: 56.0\nprint(surface_Area(1,2))  # Expected output: 5.0",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def my_dict(d):\n    return len(d) == 0",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef catalan_number(n):\n    \"\"\"\n    Calculate the n-th Catalan number using mathematical formula.\n    \n    Args:\n        n (int): The index of the Catalan number to compute.\n        \n    Returns:\n        int: The n-th Catalan number.\n    \"\"\"\n    # Formula for calculating the n-th Catalan number\n    return math.comb(2 * n, n) // (n + 1)\n\n# Test cases to verify the correctness of the function\nassert(catalan_number(10) == 16796)\nassert(catalan_number(9) == 4862)\nassert(catalan_number(7) == 429)",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_adverbs(sentence):\n    pattern = r'\\b([A-Z][a-z]*\\son\\s[A-Z][a-z]*)\\b'\n    matches = re.findall(pattern, sentence)\n    \n    result = []\n    for match in matches:\n        start = sentence.find(match[0]) + len(match[0])\n        end = start + len(match[0])\n        result.append(f\"{start}-{end}: {match[0]}\")\n    \n    return '\\n'.join(result)\n\n# Test cases\nprint(find_adverbs(\"Clearly, he has no excuse for such behavior.\"))\nprint(find_adverbs(\"Please handle the situation carefuly\"))\nprint(find_adverbs(\"Complete the task quickly\"))",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef expensive_items(data, k):\n    # Convert all prices into negative because max heap works on smallest element first in Python's heapq module\n    negative_prices = [-item['price'] for item in data]\n    \n    # Using heapq.nlargest method which finds the largest k elements\n    return [item for _, item in sorted(zip(negative_prices, data))][:k]\n\n# Test cases\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 1))\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2))\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}], 1))",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'split_Arr' is not defined",
      "Test 2: FAIL - name 'split_Arr' is not defined",
      "Test 3: FAIL - name 'split_Arr' is not defined"
    ],
    "generated_code": "def split_arr(arr, n, k):\n    # Splitting the array into two parts of size n each\n    first_part = arr[:n]\n    second_part = arr[n:]\n    \n    # Merging the second part with the first part\n    result = second_part + first_part\n    \n    return result\n\n# Test cases\nprint(split_arr([12,10,5,6,52,36], 6, 2))  # Output: [5,6,52,36,12,10]\nprint(split_arr([1,2,3,4], 4, 1))         # Output: [2,3,4,1]\nprint(split_arr([0,1,2,3,4,5,6,7], 8, 3))  # Output: [3,4,5,6,7,0,1,2]",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(arr):\n    return max(arr) - min(arr)",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perfect_squares(a, b):\n    return [i**2 for i in range(min(int((b**0.5)), int((a-1)**0.5))+1, max(int(b**0.5), int(a**0.5))+1)]",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates (rho, theta) into rectangular coordinates.\n    \n    Parameters:\n        rho (float): The radial distance in polar coordinates.\n        theta (float): The angle in radians in polar coordinates.\n        \n    Returns:\n        tuple: A tuple containing two floats - the x and y components of the \n               rectangular coordinates.\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x.real, y.imag)\n\n# Test cases\nprint(polar_rect(3,4)) # Expected output: (5.0, 0.9272952180016122)\nprint(polar_rect(4,7)) # Expected output: (8.06225774829855, 1.0516502125483738)\nprint(polar_rect(15,17)) # Expected output: (22.67156809750927, 0.8478169733934057)",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sum_Of_product(n):\n    # Calculate the sum of products of all combinations using combinatorial formula\n    total_sum = sum(math.comb(i, n-1) * math.comb(i+1, n) for i in range(n))\n    return total_sum",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: '216.08.094.196'",
      "Test 2: FAIL - invalid literal for int() with base 10: '12.01.024'",
      "Test 3: FAIL - invalid literal for int() with base 10: '216.08.094.0196'"
    ],
    "generated_code": "def removezero_ip(ip):\n    return str(int(ip)) if '.' in ip else ip",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef diff_even_odd(nums: List[int]) -> int:\n    even_sum = sum(num for num in nums if num % 2 == 0)\n    odd_sum = sum(num for num in nums if num % 2 != 0)\n    \n    return abs(even_sum - odd_sum)",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(bin_str1, bin_str2):\n    if len(bin_str1) != len(bin_str2):\n        return 'Not Possible'\n    \n    diff = sum(a != b for a, b in zip(bin_str1, bin_str2))\n    \n    # If all characters match except possibly one position,\n    # check if it's possible to swap with at most 1 character\n    return 'Possible' if diff <= 1 else 'Not Possible'",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def find_kth(arr1, arr2, n1, n2, k):\n    # Base case: if array1 is empty, return k-th element of array2\n    if not n1:\n        return arr2[k-1]\n    \n    # Base case: if array2 is empty, return k-th element of array1\n    if not n2:\n        return arr1[k-1]\n    \n    # Calculate mid points for current elements in each array\n    mid1 = min(n1, k // 2)\n    mid2 = min(n2, k // 2)\n    \n    # Compare the current elements and reduce the search space accordingly\n    if arr1[mid1] < arr2[mid2]:\n        return find_kth(arr1[mid1:], arr2, n1 - mid1, k - mid1, k)\n    else:\n        return find_kth(arr1, arr2[mid2:], n1, n2 - mid2, k - mid2)\n\n# Test cases\nprint(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5))  # Output: 6\nprint(find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7))  # Output: 256\nprint(find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6))  # Output: 8",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def armstrong_number(num):\n    # Calculate the length of the number\n    len_num = len(str(num))\n    \n    # Initialize sum\n    total = 0\n    \n    # Sum each digit raised to the power of the length of the number\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** len_num\n        temp //= 10\n    \n    return total == num",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n):\n    total = n * (n + 1) / 2  # Sum of first n natural numbers\n    average = total / n  # Average of first n natural numbers\n    return int(total), round(average, 2)\n\n# Test cases\nprint(sum_average(10))  # Expected output: (55, 5.5)\nprint(sum_average(15))  # Expected output: (120, 8.0)\nprint(sum_average(20))  # Expected output: (210, 10.5)",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Even' is not defined",
      "Test 2: FAIL - name 'is_Even' is not defined",
      "Test 3: FAIL - name 'is_Even' is not defined"
    ],
    "generated_code": "def is_even(n):\n    \"\"\"\n    This function checks if the given integer n is even.\n    \n    Args:\n        n (int): The integer to check.\n        \n    Returns:\n        bool: True if n is even, False otherwise.\n    \"\"\"\n    return n & 1 == 0",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]