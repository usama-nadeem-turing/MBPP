[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: 'l' is not in list"
    ],
    "generated_code": "def remove_Occ(s, ch):\n    # Convert string to list for easier manipulation\n    s_list = list(s)\n    \n    # Find the index of the first occurrence of 'ch'\n    i = s_list.index(ch)\n    \n    # Remove the first occurrence of 'ch'\n    del s_list[i]\n    \n    # Find the index of the second occurrence of 'ch' (if it exists)\n    j = s_list.index(ch, i+1) if ch in s_list else -1\n    \n    # If there's no second occurrence, do nothing\n    if j == -1:\n        return ''.join(s_list)\n    \n    # Remove the second occurrence of 'ch'\n    del s_list[j]\n    \n    # Join the modified list back into a string and return\n    return ''.join(s_list)\n\n# Example test cases\nprint(remove_Occ(\"hello\", \"l\"))  # Expected output: \"heo\"\nprint(remove_Occ(\"abcda\", \"a\"))  # Expected output: \"bcd\"\nprint(remove_Occ(\"PHP\", \"P\"))    # Expected output: \"H\"",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_common(words):\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    \n    max_count = max(word_counts.values())\n    return list(filter(lambda x: x[1] == max_count, word_counts.items()))\n\n# Example usage\nprint(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']))",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Volume(base_length, height, depth):\n    \"\"\"\n    Calculate and return the volume of a triangular prism given its base length,\n    height, and depth.\n    \n    Parameters:\n        base_length (float): The length of the base triangle's side.\n        height (float): The height of the prism perpendicular to the base.\n        depth (float): The depth of the prism along the direction parallel to the base.\n        \n    Returns:\n        float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the base triangle using the formula (base_length * depth) / 2\n    base_area = (base_length * depth) / 2\n    \n    # Calculate the total volume as base_area multiplied by height\n    volume = base_area * height\n    \n    return volume",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_lowerstring(s):\n    # Use a generator expression with str.split method and lambda to split on lowercase characters\n    return [x for x in s.split() if not x.islower()]",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Finds and returns all sequences of lowercase letters in the given string 'text',\n    separated by underscores ('_'). If no such sequences exist, it returns 'Not matched!'.\n    \n    Parameters:\n    - text (str): The input string to search through.\n    \n    Returns:\n    str: A message indicating whether a sequence was found or not.\n    \"\"\"\n    # Using regular expression to find all occurrences of lowercase letters followed by an underscore\n    matches = re.findall(r'[a-z]+_[a-z]+', text)\n    if len(matches) > 0:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example check function calls\nprint(text_lowercase_underscore(\"aab_cbbbc\"))  # Expected output: Found a match!\nprint(text_lowercase_underscore(\"aab_Abbbc\"))  # Expected output: Not matched!\nprint(text_lowercase_underscore(\"Aaab_abbbc\"))  # Expected output: Not matched!",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side_length):\n    return 4 * side_length",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_dirty_chars(source_str, dirty_str):\n    return ''.join([char for char in source_str if char not in dirty_str])",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_duplicate(arr):\n    # Create an empty set and add each element from the array\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return True  # Duplicate found\n    \n        seen.add(num)  # Add number to the set\n    \n    return False  # No duplicates found",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_woodall(number):\n    # Find the first two divisors of the number\n    divisor = 2\n    while number % divisor != 0:\n        divisor += 1\n    \n    # If there's no other divisor between divisor and number, it's a Woodall number\n    if divisor * divisor > number:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiples_of_num(m, n):\n    result = []\n    for i in range(1, m + 1):\n        result.append(i * n)\n    return result",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\n# Test cases\nprint(find_first_duplicate([1, 2, 3, 4, 4, 5])) # Expected output: 4\nprint(find_first_duplicate([1, 2, 3, 4])) # Expected output: -1\nprint(find_first_duplicate([1, 1, 2, 3, 3, 2, 2])) # Expected output: 1",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_Sum(lst):\n    max_sum = float('-inf')\n    for sublist in lst:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not reversible",
      "Test 2: FAIL - 'int' object is not reversible",
      "Test 3: FAIL - 'int' object is not reversible"
    ],
    "generated_code": "def binary_to_decimal(binary_num):\n    \"\"\"\n    Convert the given binary number to its decimal equivalent.\n    \n    Parameters:\n    binary_num (str): A string representing the binary number\n    \n    Returns:\n    int: The decimal equivalent of the binary number\n    \"\"\"\n    # Initialize result as zero\n    result = 0\n    # Iterate over each character in the binary number\n    for digit in reversed(binary_num):\n        # Multiply current bit value with 2 raised to power of its position index and add it to result\n        result += int(digit) * pow(2, len(binary_num) - binary_num.index(digit) - 1)\n    return result\n\n# Test cases\nprint(binary_to_decimal(\"100\"))  # Expected output: 4\nprint(binary_to_decimal(\"1011\")) # Expected output: 11\nprint(binary_to_decimal(\"1101101\")) # Expected output: 109",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_Product() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_Product() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_Product() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef find_Product(arr: List[int]) -> int:\n    # Initialize result as 1 since multiplication by 0 is undefined\n    result = 1\n    \n    # Use set to store unique elements and multiply them together\n    for num in set(arr):\n        if arr.count(num) > 1:\n            continue  # Skip repeated elements\n        else:\n            result *= num\n    \n    return result",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_k_elements(tuple_list, k):\n    # Check if each element in the list is equal to k and count the number of such tuples\n    count = sum(1 for t in tuple_list if len(t) == k)\n    # Return True if there are at least 'k' tuples with length 'k'\n    return count >= k\n\n# Test cases\nprint(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4))  # Expected output: True\nprint(check_k_elements([(7, 7, 7), (7, 7)], 7))  # Expected output: True\nprint(check_k_elements([(9, 9), (9, 9, 9, 9)], 7))  # Expected output: False",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: invalid literal for int() with base 10: 'words'"
    ],
    "generated_code": "def remove_digits(lst):\n    # Remove all digits from each string in the list and convert back to integers\n    new_lst = [str(int(''.join([c for c in x if not c.isdigit()]))).replace('.', '', 1) for x in lst]\n    return new_lst\n\n# Test cases\nprint(remove_digits(['4words', '3letters', '4digits']))  # Output: ['words', 'letters', 'digits']\nprint(remove_digits(['28Jan', '12Jan', '11Jan']))        # Output: ['Jan', 'Jan', 'Jan']\nprint(remove_digits(['wonder1', 'wonder2', 'wonder3']))   # Output: ['wonder', 'wonder', 'wonder']",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef binomial_Coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient for n choose k.\n    \n    Parameters:\n    n (int): Total number of items.\n    k (int): Number of items to choose.\n    \n    Returns:\n    int: The binomial coefficient representing the number of ways to choose k items from n items.\n    \"\"\"\n    return math.comb(n, k)\n\n# Test cases\nassert binomial_Coeff(5,2) == 10, \"Test case 1 failed\"\nassert binomial_Coeff(4,3) == 4, \"Test case 2 failed\"\nassert binomial_Coeff(3,2) == 3, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - get_Odd_Occurrence() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - get_Odd_Occurrence() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - get_Odd_Occurrence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def get_Odd_Occurrence(arr):\n    from collections import Counter\n    # Use Counter to count occurrences of each element in the array\n    counts = Counter(arr)\n    # Find and return the element with an odd occurrence count\n    for elem, count in counts.items():\n        if count % 2 != 0:\n            return elem",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(s):\n    \"\"\"\n    Counts all substrings in string s that start and end with the same character.\n    \n    :param s: Input string\n    :return: Number of substrings starting and ending with the same character\n    \"\"\"\n    result = 0\n    for i in range(len(s)):\n        # Check if the substring starting at index i ends with the same character as its first character\n        if i == 0:\n            result += len(s) - i\n        elif i != len(s) - 1:\n            result += min(i + 1, len(s) - i)\n        else:\n            result += i\n    return result\n\n# Test cases\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - func() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - func() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - func() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "import heapq\nfrom typing import List\n\ndef func(lists: List[List[int]]) -> List[int]:\n    min_heap = []\n    count_dict = {}\n    \n    for lst in lists:\n        for num in lst:\n            if num not in count_dict:\n                count_dict[num] = 0\n            count_dict[num] += 1\n            if len(min_heap) < 5:\n                heapq.heappush(min_heap, num)\n            else:\n                heapq.heappushpop(min_heap, num)\n    \n    return list(count_dict.keys())[:len(min_heap)]",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'max_Prime_Factors' is not defined",
      "Test 2: FAIL - name 'max_Prime_Factors' is not defined",
      "Test 3: FAIL - name 'max_Prime_Factors' is not defined"
    ],
    "generated_code": "def max_prime_factors(n):\n    i = 2\n    factors = []\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return max(factors)\n\n# Test cases\nprint(max_prime_factors(15))  # Expected output: 5\nprint(max_prime_factors(6))   # Expected output: 3\nprint(max_prime_factors(2))   # Expected output: 2",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'decimal_To_Binary' is not defined",
      "Test 2: FAIL - name 'decimal_To_Binary' is not defined",
      "Test 3: FAIL - name 'decimal_To_Binary' is not defined"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    return bin(decimal_number)[2:]\n\n# Test Cases\nprint(decimal_to_binary(10)) # Expected output: \"1010\"\nprint(decimal_to_binary(1))  # Expected output: \"1\"\nprint(decimal_to_binary(20)) # Expected output: \"10100\"",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_missing(arr, n):\n    start = 0\n    end = n - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        # Check if element at mid is actually present in the array\n        if arr[mid] == mid + 1:\n            start = mid + 1\n        else:\n            end = mid - 1\n            \n    return start\n\n# Test cases\nprint(find_missing([1,2,3,5],4))   # Output: 4\nprint(find_missing([1,3,4,5],4))   # Output: 2\nprint(find_missing([1,2,3,5,6,7],5)) # Output: 4",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_rect_num(n):\n    # Calculate the n-th rectangular number using the formula for sum of squares and product\n    rect_num = n * (n + 1) * (2*n + 1) // 6\n    return rect_num",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: invalid literal for int() with base 10: ''"
    ],
    "generated_code": "def find_Nth_Digit(n, m, k):\n    # Convert n and m into strings\n    n_str = str(n)\n    m_str = str(m)\n\n    # Initialize variables for tracking position and result\n    pos = len(m_str)\n    res = 0\n\n    # Determine the position based on the length of m\n    while True:\n        # Calculate the count of digits before the current position\n        count = int(pos / (k + 1))\n        \n        # Calculate the number at the current position\n        num = int((pos - count) * int(m_str[:count]) + (pos % (k + 1)) * int(m_str[count]))\n        \n        # Add the corresponding digit from n to the result\n        if pos <= len(n_str):\n            res += int(n_str[pos-1])\n        else:\n            res += int(num)\n        \n        # Move to the next position\n        pos += 1\n        \n        # If we've reached the end of both strings, break out of the loop\n        if pos > len(n_str) and pos > len(m_str):\n            break\n    \n    return res\n\n# Test cases\nprint(find_Nth_Digit(1,2,1))  # Output: 5\nprint(find_Nth_Digit(3,5,1))  # Output: 6\nprint(find_Nth_Digit(5,6,5))  # Output: 3",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 2: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 3: FAIL - '<' not supported between instances of 'str' and 'int'"
    ],
    "generated_code": "def sort_mixed_list(lst):\n    return sorted(lst)",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def div_even_odd(lst):\n    if lst.count(2) > 0:\n        return min((lst[i] for i in range(len(lst)) if i % 2 == 0), default=0)\n    else:\n        return max((lst[i] for i in range(len(lst)) if i % 2 != 0), default=0)\n\n# Test cases\nprint(div_even_odd([1,3,5,7,4,1,6,8])) # Expected output: 4\nprint(div_even_odd([1,2,3,4,5,6,7,8,9,10])) # Expected output: 2\nprint(div_even_odd([1,5,7,9,10])) # Expected output: 10",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef rearange_string(s):\n    \"\"\"\n    Rearranges the characters in the input string such that no two adjacent characters are the same.\n    \n    Args:\n    s (str): The input string containing only lowercase English letters.\n    \n    Returns:\n    str: A new string with the specified property.\n    \"\"\"\n    char_count = Counter(s)\n    result = []\n    for char, count in sorted(char_count.items(), key=lambda x: -x[1]):\n        result.extend([char] * min(count // 2, count))\n        if count % 2 != 0:\n            result.append(char)\n    return ''.join(result)\n\n# Check function with provided data points\nprint(rearange_string(\"aab\")) # Expected output: 'aba'\nprint(rearange_string(\"aabb\")) # Expected output: 'abab'\nprint(rearange_string(\"abccdd\")) # Expected output: 'cdabcd'",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef freq_element(lst_of_lists):\n    return dict(Counter(element for sublist in lst_of_lists for element in sublist))",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_evennumbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the even numbers from the original list.\n    \n    Args:\n        numbers (list): A list of integers.\n        \n    Returns:\n        list: A list containing only the even numbers from the input list.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n# Check function with provided data points\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10], \"Test case 1 failed\"\nassert filter_evennumbers([10, 20, 45, 67, 84, 93]) == [10, 20, 84], \"Test case 2 failed\"\nassert filter_evennumbers([5, 7, 9, 8, 6, 4, 3]) == [8, 6, 4], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Sum(arr, target):\n    # Dictionary to store element counts\n    count = {}\n    for num in arr:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    \n    total_sum = 0\n    for key, value in count.items():\n        if value > 1 and (target % value == 0 or value * 2 <= target):\n            total_sum += value * ((target // value) - 1)\n    \n    return total_sum",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define a regular expression pattern to match lowercase letters followed by an underscore and then more lowercase letters.\n    pattern = '[a-z]+_[a-z]+'\n    \n    # Use the re.search method to search for the pattern in the given text.\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_match(\"aab_cbbbc\"))   # Expected output: \"Found a match!\"\nprint(text_match(\"aab_Abbbc\"))  # Expected output: \"Not matched!\"\nprint(text_match(\"Aaab_abbbc\")) # Expected output: \"Not matched!\"",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_string(text):\n    if text.startswith(\"python\"):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_gcd(numbers):\n    # Initialize gcd with the first element of the list\n    gcd = numbers[0]\n    \n    # Iterate through each number in the list starting from the second element\n    for num in numbers[1:]:\n        # Update gcd by computing gcd(num, current_gcd)\n        gcd = compute_gcd(gcd, num)\n    \n    return gcd\n\n\n# Helper function to calculate GCD using Euclidean algorithm\ndef compute_gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'test_distinct' is not defined",
      "Test 2: FAIL - name 'test_distinct' is not defined",
      "Test 3: FAIL - name 'test_distinct' is not defined"
    ],
    "generated_code": "def is_unique_elements(lst):\n    \"\"\"\n    Check if all elements in the list are unique.\n    \n    Args:\n    lst (list): A list of integers\n    \n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    # Use set() which automatically removes duplicates and then compare its length with the original list's length\n    return len(set(lst)) == len(lst)",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def compute_Last_Digit(a, b):\n    # Calculate the last digit of factorials for both numbers\n    la = str(a * b)[-1]\n    lb = str(fact(a))[-1] if fact(a) < b else str(fact(b-1))[0:-1]\n    \n    # Compare and return the last digits\n    return int(la) if int(lb) > int(la) else int(lb)\n\n# Helper function to calculate factorial\ndef fact(n):\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n - 1)",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(num):\n    # Shift left twice and then XOR with original number, which will set all odd bits\n    return num << 1 | num >> 1\n\n# Test cases\nprint(odd_bit_set_number(10))  # Expected output: 15\nprint(odd_bit_set_number(20))  # Expected output: 21\nprint(odd_bit_set_number(30))  # Expected output: 31",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def specified_element(matrix, index):\n    # Extracting rows based on the specified element count and returning them as a list of lists.\n    return [[row[index] for row in matrix[:index+1]] if index < len(matrix) else []]\n\n# Test cases to verify the correctness of the function\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0))  # Expected output: [[1], [4], [7]]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2))  # Expected output: [[3, 6, 9], [], []]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1))  # Expected output: [[2], [5], [1]]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length_list(lst_of_lsts):\n    return min(lst_of_lsts, key=lambda x: len(x), default=None)",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a, b, c):\n    return a == b and b == c",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'check_Eequality' is not defined. Did you mean: 'check_Equality'?"
    ],
    "generated_code": "def check_Equality(s):\n    # Check if the first character is same as the last character\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Test Cases\nprint(check_Eequality(\"abcda\")) # Expected output: 'Equal'\nprint(check_Eequality(\"ab\"))    # Expected output: 'Not Equal'\nprint(check_Eequality(\"mad\"))   # Expected output: 'Not Equal'",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array 'arr' in ascending order using Counting Sort.\n    \n    Parameters:\n    arr (list): The list of non-negative integers to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    if not arr:\n        return []\n    \n    # Find maximum value to know size of count array\n    max_val = max(arr)\n    count_arr = [0] * (max_val + 1)\n    \n    # Store the count of each element\n    for num in arr:\n        count_arr[num] += 1\n    \n    # Modify count_arr so that it contains actual position of this element starting from 0\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n    \n    # Build the output array\n    output_arr = [0] * len(arr)\n    for num in reversed(arr):\n        output_arr[count_arr[num] - 1] = num\n        count_arr[num] -= 1\n    \n    return output_arr\n\n# Test cases\nprint(counting_sort([1,23,4,5,6,7,8]))  # Expected output: [1, 4, 5, 6, 7, 8, 23]\nprint(counting_sort([12, 9, 28, 33, 69, 45]))  # Expected output: [9, 12, 28, 33, 45, 69]\nprint(counting_sort([8, 4, 14, 3, 2, 1]))  # Expected output: [1, 2, 3, 4, 8, 14]",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tn_gp(t, n, r):\n    \"\"\"\n    Calculate the nth term of a geometric sequence given the first term,\n    common ratio and the position in the sequence.\n    \n    Args:\n    t (int): The first term of the sequence.\n    n (int): The position in the sequence.\n    r (int): The common ratio of the sequence.\n    \n    Returns:\n    int: The nth term of the sequence.\n    \"\"\"\n    return t * (r ** (n - 1))\n\n# Test cases to verify the correctness of the solution\nassert tn_gp(1,5,2) == 16\nassert tn_gp(1,5,4) == 256\nassert tn_gp(2,6,3) == 486\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def check(number):\n    \"\"\"\n    This function checks if a given number is one less than twice its reverse.\n    \n    Args:\n        number (int): The number to be checked.\n        \n    Returns:\n        bool: True if the number is one less than twice its reverse, otherwise False.\n    \"\"\"\n    # Reverse the number and add 1\n    reversed_number = int(str(number)[::-1]) + 1\n    \n    # Check if the original number is one less than twice the reversed number\n    return number == 2 * reversed_number - 1\n\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_Max_Num() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_Max_Num() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_Max_Num() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def find_Max_Num(digit_list):\n    # Sort the list in descending order\n    sorted_digits = sorted(digit_list, reverse=True)\n    # Convert the sorted digits back into an integer\n    max_number = int(\"\".join(map(str, sorted_digits)))\n    return max_number",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'opposite_Signs' is not defined",
      "Test 2: FAIL - name 'opposite_Signs' is not defined",
      "Test 3: FAIL - name 'opposite_Signs' is not defined"
    ],
    "generated_code": "def opposite_signs(x, y):\n    \"\"\"\n    Checks if the signs of two integers x and y are different.\n    \n    Parameters:\n    - x (int): First integer\n    - y (int): Second integer\n    \n    Returns:\n    bool: True if the signs of x and y are opposite, otherwise False.\n    \"\"\"\n    return x * y < 0\n\n# Test cases to verify the correctness of the function\nassert opposite_signs(1, -2) == True\nassert opposite_signs(3, 2) == False\nassert opposite_signs(-10, -10) == False\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_octagonal(n):\n    \"\"\"\n    This function calculates the nth octagonal number.\n    \n    Parameters:\n    n (int): The position in the sequence of octagonal numbers.\n    \n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    # Formula to calculate the nth octagonal number: n*3n-2\n    result = n * (3 * n - 2)\n    return result\n\n# Check function with provided data points to verify correctness\nassert is_octagonal(5) == 65, \"Test case 1 failed\"\nassert is_octagonal(10) == 280, \"Test case 2 failed\"\nassert is_octagonal(15) == 645, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_len_sub(arr: List[int], k: int) -> int:\n    current_max = prev_sum = 0\n    for num in arr:\n        if num == prev_sum + k:\n            current_max += 1\n        else:\n            current_max = 1\n        prev_sum = num\n    return max(current_max, len(arr))",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_Substrings() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - count_Substrings() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - count_Substrings() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    total_count = defaultdict(int)\n    current_sum = 0\n    for i in range(n):\n        if s[i] == '0':\n            current_sum = 0\n        else:\n            current_sum += int(s[i])\n        \n        # Using prefix sum technique\n        total_count[current_sum - n + 1] += 1\n    \n    result = 0\n    for value in total_count.values():\n        result += (value * (value + 1)) // 2\n    \n    return result",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(lst):\n    return min(lst)",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_difference(lst):\n    # Initialize variables to store the minimum element seen so far and the result of the maximum difference found.\n    min_element = lst[0][0]\n    max_diff = lst[0][0] - lst[0][1]\n\n    for i in range(1, len(lst)):\n        current_min = min_element if lst[i][0] > min_element else lst[i][0]\n        diff = lst[i][0] - lst[i][1]\n        max_diff = max(max_diff, diff)\n\n        # Update min_element after checking both conditions.\n        min_element = min(min_element, current_min)\n\n    return max_diff\n\n# Example usage:\nprint(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))  # Output: 7\nprint(max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]))  # Output: 15\nprint(max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]))  # Output: 23",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def subject_marks(marks_list):\n    # Sort the list based on marks in descending order and names in ascending order.\n    return sorted(marks_list, key=lambda x: (-x[1], x[0]))",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recursive_list_sum(lst):\n    if isinstance(lst, int):  # Base case: if lst is an integer, return it directly\n        return lst\n    else:\n        total = 0\n        for item in lst:\n            total += recursive_list_sum(item)  # Recursive call on each element\n        return total\n\n# Test cases\nprint(recursive_list_sum([1, 2, [3, 4], [5, 6]]))  # Expected output: 21\nprint(recursive_list_sum([7, 10, [15, 14], [19, 41]]))  # Expected output: 106\nprint(recursive_list_sum([10, 20, [30, 40], [50, 60]]))  # Expected output: 210",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(nums):\n    # Initialize counter for positive numbers\n    positive_count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n            \n    return positive_count",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number.\n    \n    Parameters:\n    n (int): The index of the Bell number to calculate.\n    \n    Returns:\n    int: The value of the Bell number at index n.\n    \"\"\"\n    # Initialize an array with zeros for each element from 0 to n\n    bell = [0] * (n + 1)\n    # Base case\n    bell[0] = 1\n    \n    # Fill the bell array using the recurrence relation\n    for i in range(1, n + 1):\n        j = 0\n        while True:\n            bell[i] += bell[j]\n            if j == i - 1:\n                break\n            j += 1\n    \n    return bell[n]\n\n# Test cases to verify the correctness of the function\nprint(bell_number(2))  # Expected output: 2\nprint(bell_number(10))  # Expected output: 115975\nprint(bell_number(56))  # Expected output: 6775685320645824322581483068371419745979053216268760300",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(A):\n    if len(A) <= 2:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            decreasing = False\n        elif A[i] < A[i-1]:\n            increasing = False\n            \n    return increasing or decreasing",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_sublist(lst1, lst2):\n    # Check if the length of lst1 is greater than lst2, return False immediately as it's impossible for lst1 to be a sub-list of lst2.\n    if len(lst1) > len(lst2): \n        return False\n    \n    # Loop through lst1 checking if every element in lst2 matches an element in lst1 at the same index.\n    for i in range(len(lst1)):\n        if lst1[i] == lst2[0]:\n            found = True\n            for j in range(1, len(lst2)): \n                if i + j < len(lst1) and lst1[i+j] != lst2[j]: \n                    found = False\n                    break\n            if found: \n                return True\n                \n    return False",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_equal(tuple_list, expected_length):\n    \"\"\"\n    Checks if all tuples in the provided list have the specified length.\n    \n    Args:\n        tuple_list (list of tuple): The list containing tuples to be checked.\n        expected_length (int): The expected length of each tuple.\n        \n    Returns:\n        str: A message indicating whether all tuples have the same length as expected.\n    \"\"\"\n    for tup in tuple_list:\n        if len(tup) != expected_length:\n            return f\"All tuples do not have same length\"\n    return \"All tuples have same length\"\n\n# Check function with provided data points\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length', \"Test case 1 failed\"\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length', \"Test case 2 failed\"\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def comb_sort(lst):\n    n = len(lst)\n    gap = n\n    shrink_factor = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        swapped = False\n\n        for i in range(0, n - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n\n# Test Cases\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79], \"Test case 1 failed\"\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41], \"Test case 2 failed\"\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dif_Square(n):\n    \"\"\"\n    Check if the given number n can be represented as the difference of two squares.\n    \n    Args:\n    - n (int): The number to check.\n    \n    Returns:\n    - bool: True if n is the difference of two squares, False otherwise.\n    \"\"\"\n    # A number can be expressed as the difference of two squares if and only if it's not of the form 4^k*(8m+7)\n    # where k and m are non-negative integers.\n    return n % 8 != 7",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef multiple_split(input_string):\n    # Splitting the input_string by all non-word characters (including spaces)\n    return re.split(r'\\W+', input_string)\n\n# Test cases to verify the correctness of the solution\nprint(multiple_split('Forces of the \\ndarkness*are coming into the play.')) # Should return ['Forces of the ', 'darkness', 'are coming into the play.']\nprint(multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.')) # Should return ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nprint(multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.')) # Should return ['Certain services', 'are subjected to change', 'over the seperate subscriptions.'])",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_samepatterns(patterns, sequences):\n    # Iterate through each pattern and sequence pair\n    for p, s in zip(patterns, sequences):\n        # Check if any character in sequence appears more times than in pattern\n        for c in set(s):\n            if s.count(c) > p.count(c):\n                return False\n    return True\n\n# Test cases\nprint(is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"]))  # Output: True\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"]))   # Output: False\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"]))       # Output: False",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_tuples(tuples_list, divisor):\n    result = []\n    for tpl in tuples_list:\n        ok = True\n        for val in tpl:\n            if val % divisor != 0:\n                ok = False\n                break\n        if ok:\n            result.append(str(tpl))\n    return \"[\" + \", \".join(result) + \"]\"\n\n# Test cases\nprint(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6))  # Expected output: [(6, 24, 12)]\nprint(find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5))      # Expected output: [(5, 25, 30)]\nprint(find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4))   # Expected output: [(8, 16, 4)]",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Squares(n_rows, n_cols):\n    \"\"\"\n    Calculate the total number of squares within a given grid.\n    \n    Parameters:\n    - n_rows: The number of rows in the grid.\n    - n_cols: The number of columns in the grid.\n    \n    Returns:\n    An integer representing the total number of squares possible from 1x1 up to n_rows x n_cols dimensions.\n    \"\"\"\n    # Initialize a counter for squares\n    square_count = 0\n    \n    # Iterate through all possible square sizes starting from 1x1 up to min(rows, cols)\n    for size in range(1, min(n_rows, n_cols) + 1):\n        # For each size, calculate how many squares fit along both rows and columns\n        square_count += ((n_rows - size + 1) * (n_cols - size + 1))\n        \n    return square_count",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Diff(num):\n    # Initialize variables to store sum of even and odd digits\n    even_sum = 0\n    odd_sum = 0\n    \n    # Loop through each digit in the number\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    # Calculate the difference between the sums of even and odd digits\n    diff = abs(even_sum - odd_sum)\n    \n    # Check if the difference is not zero\n    return diff != 0",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_With_Odd_SetBits(n):\n    # Convert n to binary string and remove '0b' prefix\n    binary_str = bin(n)[2:]\n    \n    # Count the length of the binary string\n    len_binary = len(binary_str)\n    \n    # Calculate the result based on the length of the binary string\n    result = pow(2, len_binary - 1) if len_binary % 2 == 0 else 2 * pow(2, len_binary - 1) - 1\n    \n    return result",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    # Check if the length of the word is even\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    Parameters:\n    n (int): The position in the sequence of tetrahedral numbers.\n    \n    Returns:\n    float: The nth tetrahedral number.\n    \"\"\"\n    # Formula for the nth tetrahedral number is n*(n+1)*(n+2)/6\n    return (n * (n + 1) * (n + 2)) / 6.0\n\n# Test cases to verify the correctness of the solution\nassert abs(tetrahedral_number(5) - 35.0) < 0.001\nassert abs(tetrahedral_number(6) - 56.0) < 0.001\nassert abs(tetrahedral_number(7) - 84.0) < 0.001\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: tuple index out of range"
    ],
    "generated_code": "def zip_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append((tup1[i], tup2[i]))\n    return result\n\n# Test cases\nprint(zip_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6))) # Should print [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nprint(zip_tuples((8, 9, 5, 6, 10, 11), (2, 6, 7))) # Should print [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nprint(zip_tuples((9, 10, 6, 7, 11, 12), (3, 7, 8))) # Should print [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Char(input_string):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Add the current character to the result\n        result += char\n    \n    # Return the concatenated string as the output\n    return result",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sequence(n):\n    # Initialize an array with size 'n' + 1 and set all elements to -1\n    seq = [-1] * (n+1)\n    \n    # Base case\n    if n == 1:\n        seq[1] = 1\n    \n    # Fill the array for values from 2 to n\n    for i in range(2, n+1):\n        # Find the previous term's value\n        prev_val = i-1\n        \n        # If the previous term is even, move back one step\n        if prev_val % 2 == 0:\n            seq[i] = seq[(prev_val // 2)]\n        \n        # If the previous term is odd, move forward two steps\n        else:\n            seq[i] = seq[(((i-1) // 2) + 1)]\n    \n    # Return the nth term as per indexing\n    return seq[n]",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function calculates the nth centered hexagonal number.\n    \n    Parameters:\n    n (int): The position of the centered hexagonal number in the sequence.\n    \n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    # Using formula for centered hexagonal numbers: Hn = 3*n*(n-1) + 1\n    return 3 * n * (n - 1) + 1\n\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'list' object has no attribute 'items'",
      "Test 2: FAIL - 'list' object has no attribute 'items'",
      "Test 3: FAIL - 'list' object has no attribute 'items'"
    ],
    "generated_code": "def freq_count(lst):\n    return dict(sorted((lst.count(i), i) for i in set(lst)).items())",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef closest_num(n):\n    # Find the floor of n divided by 2 and then multiply it back by 2\n    result = math.floor(n / 2) * 2\n    if result == n:\n        result -= 1\n    return result",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Initialize the maximum length variable\n    max_length = 0\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Update the maximum length if the current word's length is greater\n        max_length = max(max_length, len(word))\n    \n    # Return the maximum length found\n    return max_length",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_substring(lst, target):\n    for s in lst:\n        if s.find(target) != -1:\n            return True\n    return False",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_undulating(num_str):\n    \"\"\"\n    Checks if the input string 'num_str' represents an undulating number.\n    \n    An undulating number has a repeating pattern of two digits where one digit\n    can be shifted over from the previous occurrence of the same pair of digits.\n    \n    Parameters:\n    - num_str (str): The string representation of the number to check.\n    \n    Returns:\n    - bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    for i in range(1, len(num_str) // 2 + 1):\n        if num_str[:i] * 2 != num_str:\n            return False\n    return True\n\n# Check function with provided data points\nprint(is_undulating(\"1212121\")) # Expected output: True\nprint(is_undulating(\"1991\"))   # Expected output: False\nprint(is_undulating(\"121\"))    # Expected output: True",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_minimum(tuples_list):\n    min_index = 0\n    for i in range(1, len(tuples_list)):\n        if tuples_list[i][1] < tuples_list[min_index][1]:\n            min_index = i\n    return tuples_list[min_index][0]\n\n# Test cases\nprint(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])) # \"Varsha\"\nprint(index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]))   # \"Dawood\"\nprint(index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]))     # \"Ayesha\"",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Min_Length(lists):\n    # Initialize min_length with the maximum possible integer value\n    min_length = float('inf')\n    \n    # Iterate through each list in the given lists\n    for lst in lists:\n        # Calculate the length of the current list and update min_length if it's smaller\n        min_length = min(min_length, len(lst))\n    \n    # Return the final calculated minimum length\n    return min_length",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_lists(lists):\n    return {item: len([sublist for sublist in lists if item in sublist]) for item in set().union(*lists)}",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_num(nums):\n    total = 1\n    for num in nums:\n        total *= num\n    return total / len(nums)",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    # Convert the decimal number to binary and remove the '0b' prefix\n    binary_representation = bin(decimal_number)[2:]\n    \n    return binary_representation",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_palindrome(n):\n    \"\"\"\n    Helper function to check if a given number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome with respect to the given integer n.\n    If n is not palindromic, it becomes palindromic after incrementing by one.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The next smallest palindrome\n    \"\"\"\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n\n\n# Test cases\nprint(next_smallest_palindrome(99))  # Expected output: 101\nprint(next_smallest_palindrome(1221))  # Expected output: 1331\nprint(next_smallest_palindrome(120))  # Expected output: 121",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def kth_element(arr, k, index=0):\n    if len(arr) <= k:\n        return None\n    else:\n        # If the next element is smaller than arr[k-1] then swap it with arr[k]\n        if arr[index + 1] < arr[k - 1]:\n            temp = arr[index + 1]\n            arr[index + 1] = arr[k - 1]\n            arr[k - 1] = temp\n        if index == k - 1:\n            return arr[k]\n        else:\n            return kth_element(arr, k, index + 1)\n            \n# Test the function with provided data points\nprint(kth_element([12,3,5,7,19], 5))  # Expected output: 3\nprint(kth_element([17,24,8,23], 4))   # Expected output: 8\nprint(kth_element([16,21,25,36,4], 5))# Expected output: 36",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def snake_to_camel(snake_str):\n    # Split the snake case string into words based on underscores\n    words = snake_str.split('_')\n    # Capitalize each word except the first one and join them together\n    return ''.join(word.capitalize() for word in words)",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: factorial() not defined for negative values"
    ],
    "generated_code": "import math\n\ndef eulerian_num(n, k):\n    # Calculate the Eulerian number using Binomial Coefficient and Stirling numbers of the second kind\n    binom = math.comb(n-1+k-1, n-1)\n    stirling_k_2k_minus_n = math.factorial(k - n + 1)\n    stirling_k_2n_plus_1 = math.factorial(k - n)\n    \n    # Use the formula for Eulerian number\n    eulerian_number = binom * stirling_k_2k_minus_n / stirling_k_2n_plus_1\n    \n    return round(eulerian_number)\n\n# Test cases\nprint(eulerian_num(3, 1))  # Expected output: 4\nprint(eulerian_num(4, 1))  # Expected output: 11\nprint(eulerian_num(5, 3))  # Expected output: 26",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(true_booleans):\n    \"\"\"\n    Count the number of True boolean values in the provided list.\n    \n    Parameters:\n    true_booleans (list): A list containing boolean values.\n    \n    Returns:\n    int: The count of True boolean values in the list.\n    \"\"\"\n    return true_booleans.count(True)\n\n# Check function with provided data points to verify correctness\nassert count([True, False, True]) == 2, \"Test case 1 failed\"\nassert count([False, False]) == 0, \"Test case 2 failed\"\nassert count([True, True, True]) == 3, \"Test case 3 failed\"\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_lists(list_input, tuple_input):\n    # Convert the input list to a tuple if it's not already one\n    tuple_input = tuple(tuple_input) if isinstance(tuple_input, list) else tuple_input\n    \n    # Append the elements of the list to the tuple\n    return (*tuple_input, *list_input)\n\n# Test cases\nprint(add_lists([5, 6, 7], (9, 10)))  # Expected output: (9, 10, 5, 6, 7)\nprint(add_lists([6, 7, 8], (10, 11)))  # Expected output: (10, 11, 6, 7, 8)\nprint(add_lists([7, 8, 9], (11, 12)))  # Expected output: (11, 12, 7, 8, 9)",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Hexadecimal(start, end):\n    # Initialize the count of valid hexadecimal numbers\n    count = 0\n    \n    # Loop through each number in the specified range\n    for i in range(start, end + 1):\n        # Convert the current number to hexadecimal and check if it starts with 'A' or 'a'\n        if str(i)[0] == \"A\" or str(i)[0] == \"a\":\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'merge_sorted_list' is not defined",
      "Test 2: FAIL - name 'merge_sorted_list' is not defined",
      "Test 3: FAIL - name 'merge_sorted_list' is not defined"
    ],
    "generated_code": "from heapq import heappush, heappop\nfrom typing import List\n\ndef merge_sorted_lists(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Merges k sorted lists into one sorted list.\n    \n    Args:\n    lists: A list of n sorted lists where each sublist is sorted in ascending order.\n    \n    Returns:\n    A list containing all elements from the input lists, merged and sorted.\n    \"\"\"\n    pq = []\n    for i, l in enumerate(lists):\n        if l:\n            heappush(pq, (l.pop(0), i))\n    result = []\n    while pq:\n        value, idx = heappop(pq)\n        result.append(value)\n        if lists[idx]:\n            heappush(pq, (lists[idx].pop(0), idx))\n    return result",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Equivalent(binary_string, n):\n    # Convert the binary string into an integer\n    num = int(binary_string, 2)\n    \n    # Perform bitwise left shift operation 'n' times and then take modulo 1024\n    result = ((num << n) % 1024) >> (2 * n)\n    \n    # Count how many bits in the resulting number have odd parity\n    return bin(result).count('1')",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_missing(ranges, start, end):\n    result = []\n    for i in range(len(ranges)):\n        current_range = ranges[i]\n        if current_range[0] < end:\n            low, high = max(current_range[0], start), min(end, current_range[1])\n            result.append((low, high))\n        elif current_range[1] > start:\n            low, high = max(start, current_range[0]), min(end, current_range[1])\n            result.append((low, high))\n    return result",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_in_nested_lists(nested_lists):\n    return list(set.intersection(*map(set, nested_lists)))",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perimeter(radius, height):\n    # Calculate the perimeter of a cylinder using the formula: 2 * π * radius + 2 * π * height\n    return 2 * 3.14159 * radius + 2 * 3.14159 * height",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "from collections import Counter\n\ndef assign_freq(tuple_list):\n    \"\"\"\n    Assigns a frequency count to each unique element within tuples found in the input list.\n    \n    :param tuple_list: List of tuples\n    :return: A new list of tuples with an extra integer indicating the frequency of the first occurrence of each tuple's elements.\n    \"\"\"\n    # Flatten the list into individual elements and use Counter to get counts\n    flat_list = [item for tupl in tuple_list for item in tupl]\n    freq_counter = Counter(flat_list)\n    \n    # Reconstruct the result list with added frequency information\n    result = []\n    for tupl in tuple_list:\n        freq_count = freq_counter[tupl[0]]\n        for item in tupl:\n            freq_counter[item] -= 1\n            if freq_counter[item] == 0:\n                del freq_counter[item]\n        result.append((tupl[0], *tuple(freq_count) + (freq_count,) if len(tupl) > 1 else freq_count))\n    return result\n\n# Check function with provided data points\nassert assign_freq([[(6, 5, 8), (2, 7)], [(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, ), (2, 7)]]).sort() == sorted([[(6, 5, 8, 3), (2, 7, 2), (9, 1)], [(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]])",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'empty_dit' is not defined",
      "Test 2: FAIL - name 'empty_dit' is not defined",
      "Test 3: FAIL - name 'empty_dit' is not defined"
    ],
    "generated_code": "def is_all_empty(dicts):\n    # Check if every dictionary in the list is empty\n    return len([d for d in dicts if bool(d) != True]) == 0",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_to_float(lst):\n    result = []\n    for i in lst:\n        if len(i) == 2 and isinstance(i[0], str) and isinstance(i[1], str):\n            try:\n                fnum = float(i[0])\n                snum = float(i[1])\n                result.append((fnum, snum))\n            except ValueError:\n                continue\n    return result",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_list(input_string):\n    # Split the input string into a list using whitespace as the delimiter\n    return input_string.split()",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search(arr, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = int((low + high) / 2)\n        \n        # Check if the current number is the unique one\n        if arr[mid] == arr[mid-1]:\n            if mid > 0 and arr[mid] != arr[mid+1]:\n                return arr[mid]\n            else:\n                low = mid + 1\n        elif arr[mid] == arr[mid+1]:\n            if mid < n - 1 and arr[mid] != arr[mid-1]:\n                return arr[mid]\n            else:\n                high = mid - 1\n        else:\n            return arr[mid]\n\n# Test cases\nprint(search([1,1,2,2,3],5))   # Output: 3\nprint(search([1,1,3,3,4,4,5,5,7,7,8],11))   # Output: 8\nprint(search([1,2,2,3,3,4,4],7))   # Output: 1",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: can't multiply sequence by non-int of type 'tuple'"
    ],
    "generated_code": "from itertools import permutations\n\ndef max_product_tuple(tuple_list):\n    # Find all possible products for each pair of tuples in the list and return the maximum value\n    return max(map(lambda x: x[0] * x[1], permutations(tuple_list)))\n\n# Test cases\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36) # True\nprint(max_product_tuple([(10,20), (15,2), (5,10)]) == 200) # True\nprint(max_product_tuple([(11,44), (10,15), (20,5), (12, 9)]) == 484) # True",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - check_triplet() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def check_triplet(arr, target_sum, sum_val):\n    n = len(arr)\n    arr.sort()\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == sum_val:\n                return True\n            elif current_sum < sum_val:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n# Example usage\nprint(check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6))  # Output: True\nprint(check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6))  # Output: False\nprint(check_triplet([10, 4, 2, 3, 5], 5, 15))         # Output: True",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef smartNumber(n):\n    primes_count = 0\n    num = 2 * n\n    while not is_prime(num) and primes_count < n - 1:\n        num += 1\n        if count_divisors(num) >= n:\n            primes_count += 1\n    return num",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def amicable_numbers_sum(n):\n    def find_amicable(x):\n        sum_divisors = 0\n        for i in range(1, int(x**0.5) + 1):\n            if x % i == 0:\n                sum_divisors += i\n                if i != x // i:\n                    sum_divisors += x // i\n        return sum_divisors - x\n    \n    total_sum = 0\n    for num in range(1, n+1):\n        ami_num = find_amicable(num)\n        if num < ami_num and find_amicable(ami_num) == num:\n            total_sum += num\n    return total_sum",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef angle_complex(x,y):\n    \"\"\"\n    This function calculates the phase angle of a complex number.\n    \n    Parameters:\n    x (float): The real part of the complex number.\n    y (complex): The imaginary part of the complex number.\n    \n    Returns:\n    float: The phase angle in radians.\n    \"\"\"\n    return cmath.phase(complex(x, y))\n\n# Test Cases\nprint(angle_complex(0,1j)) # Expected output: approximately 1.5708\nprint(angle_complex(2,1j)) # Expected output: approximately 0.4636\nprint(angle_complex(0,2j)) # Expected output: approximately 1.5708",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_length(binary_str, n):\n    zero_count = binary_str.count('0')\n    one_count = len(binary_str) - zero_count\n    max_diff = abs(zero_count - one_count)\n    for i in range(n):\n        # Remove first character from substring if it is '0'\n        if binary_str[i] == '0':\n            zero_count -= 1\n        else:\n            one_count += 1\n        current_diff = abs(zero_count - one_count)\n        max_diff = max(max_diff, current_diff)\n    return max_diff",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_of_common_divisors(x, y):\n    # Find all divisors of x\n    divisors_x = [i for i in range(1, x + 1) if x % i == 0]\n    \n    # Find all divisors of y\n    divisors_y = [j for j in range(1, y + 1) if y % j == 0]\n    \n    # Calculate the sum of common divisors\n    total_sum = sum(i for i in divisors_x if i in divisors_y)\n    \n    return total_sum\n\n# Test cases\nprint(sum_of_common_divisors(10, 15))  # Expected output: 6\nprint(sum_of_common_divisors(100, 150))  # Expected output: 93\nprint(sum_of_common_divisors(4, 6))  # Expected output: 3",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_int(a, b):\n    result = 0\n    sign = -1 if ((a < 0) ^ (b < 0)) else 1\n    a = abs(a)\n    b = abs(b)\n\n    while b > 0:\n        if b & 1:\n            result += a\n        a <<= 1\n        b >>= 1\n\n    return sign * result",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, words):\n    return [word for word in words if len(word) > n]",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'magic_square_test' is not defined",
      "Test 2: FAIL - name 'magic_square_test' is not defined",
      "Test 3: FAIL - name 'magic_square_test' is not defined"
    ],
    "generated_code": "def is_magic_square(matrix):\n    n = len(matrix)\n    \n    # Check if the sum of each row and column is equal\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        col_sum = sum(row[matrix[i].index(j)] for j in range(n))\n        \n        if row_sum != col_sum:\n            return False\n    \n    # Calculate the magic constant\n    magic_constant = sum(matrix[0])\n    \n    # Check if all cells contain unique numbers from 1 to n^2\n    cell_values = set()\n    for row in matrix:\n        for value in row:\n            cell_values.add(value)\n    \n    if len(cell_values) != n**2 or max(cell_values) > n**2:\n        return False\n    \n    # Check diagonals\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(matrix[i][n-1-i] for i in range(n))\n    \n    return magic_constant * n == sum(matrix[i]) * n == main_diagonal_sum == anti_diagonal_sum",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(arr):\n    import collections\n    counter = collections.Counter(arr)\n    return max(counter.items(), key=lambda x: x[1])\n\n# Test cases\nprint(max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])) # Expected output: (2, 5)\nprint(max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])) # Expected output: (8, 2)\nprint(max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])) # Expected output: (20, 3)",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - KeyError: 'u'"
    ],
    "generated_code": "def reverse_vowels(s):\n    # Convert the input string into a list for easier manipulation\n    s = list(s)\n    \n    # List to keep track of vowel indices in the original string\n    index_map = {char:i for i, char in enumerate(s) if char.lower() in 'aeiou'}\n    \n    # Iterate through the string from left to right\n    for i, char in enumerate(s):\n        # If the character is a vowel and its position in the map matches an even index\n        if char.lower() in 'aeiou' and i % 2 == 0:\n            # Swap it with the corresponding vowel from the end of the list\n            s[index_map[char.lower()]] = char\n    \n    # Join the list back into a string and return it\n    return ''.join(s)\n\n# Test cases\nprint(reverse_vowels(\"Python\"))   # Expected output: \"Python\"\nprint(reverse_vowels(\"USA\"))      # Expected output: \"ASU\"\nprint(reverse_vowels(\"ab\"))       # Expected output: \"ab\"",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_negativenum(lst):\n    return sum(filter(lambda x: x < 0, lst))",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: not all arguments converted during string formatting"
    ],
    "generated_code": "def check_last(arr, n, k):\n    if arr[-1] % 2 == 0:\n        result = \"EVEN\"\n    else:\n        result = \"ODD\"\n    \n    for _ in range(k - 1):\n        if len(result) > 1 and result[-1] % 2 != 0:\n            result = \"EVEN\" if int(result[-1]) % 2 == 0 else \"ODD\"\n        elif len(result) > 1:\n            result = \"EVEN\" if int(result[-1]) % 2 == 0 else \"ODD\"\n        else:\n            break\n    \n    return result\n\n# Test cases\nprint(check_last([5, 7, 10], 3, 1))  # Output: ODD\nprint(check_last([2, 3], 2, 3))      # Output: EVEN\nprint(check_last([1, 2, 3], 3, 1))   # Output: ODD",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    \n    Parameters:\n    n (int): The position of the hexagonal number in the sequence.\n    \n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_electbill(hours_used):\n    if hours_used <= 100:\n        return round((hours_used * 0.5) + 8)\n    else:\n        base_bill = 100 * 0.5 + 8\n        extra_hours = hours_used - 100\n        extra_cost = extra_hours * 0.5 + 0.5\n        return round(base_bill + extra_cost)\n\n# Test cases\nprint(cal_electbill(75)) # Expected output: 246.25\nprint(cal_electbill(265)) # Expected output: 1442.75\nprint(cal_electbill(100)) # Expected output: 327.5",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef zero_count(arr: List[int]) -> float:\n    return arr.count(0) / len(arr)",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    # Initialize power and index for binary search\n    pow = 1\n    index = 0\n    \n    # Convert n to its binary representation string\n    bin_rep = bin(n)[2:]\n    \n    # Iterate through each bit in reverse order\n    while len(bin_rep) > index:\n        # Check if current bit is '1' and corresponding power of two is less than remaining value\n        if bin_rep[index] == '1' and pow < (n - (pow << index)):\n            return True\n        index += 1\n        \n        # Update the next power of two\n        pow <<= 1\n    \n    return False",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Parameters:\n    radius (float): The radius of the circle.\n    \n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_singly(tuple_list):\n    # Extracting all unique elements from each tuple and flattening into a single list\n    result = [item for sublist in tuple_list for item in sublist if len(set(sublist)) == 1]\n    return result",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def flip(arr, start):\n    \"\"\"Reverse elements from index 'start' to the end.\"\"\"\n    left = start\n    right = len(arr) - 1\n    while left < right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n\ndef pancake_sort(arr):\n    \"\"\"\n    Sorts an array using pancake sort algorithm.\n    \n    :param arr: List of integers to be sorted.\n    :return: Sorted list of integers.\n    \"\"\"\n    n = len(arr)\n    for i in range(n)[::-1]:\n        if arr[i:] == sorted(arr[i:]):\n            continue\n        # Move max element to its correct position\n        j = arr.index(max(arr[:i+1]))\n        flip(arr, i + 1)\n        flip(arr, j + 1)\n    return arr\n\n# Check function with provided data points\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_samepair(list1, list2, list3):\n    return len(set(list1) & set(list2) & set(list3))",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_lists(test_tuple):\n    # Count the number of sublists in the given tuple\n    count = len([sublist for sublist in test_tuple if isinstance(sublist, list)])\n    return count\n\n# Test cases\nprint(find_lists(([1, 2, 3, 4], [5, 6, 7, 8])))  # Expected output: 2\nprint(find_lists(([1, 2], [3, 4], [5, 6])))       # Expected output: 3\nprint(find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])))  # Expected output: 1",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Pairs' is not defined",
      "Test 2: FAIL - name 'sum_Pairs' is not defined",
      "Test 3: FAIL - name 'sum_Pairs' is not defined"
    ],
    "generated_code": "from itertools import combinations\n\ndef sum_pairs(arr):\n    total_sum = 0\n    for comb in combinations(arr, 2):\n        total_sum += abs(sum(comb) - (sum(arr) / len(arr)))\n    return int(total_sum)\n\n# Test cases\nprint(sum_pairs([1,8,9,15,16])) # Expected output: 74\nprint(sum_pairs([1,2,3,4])) # Expected output: 10\nprint(sum_pairs([1,2,3,4,5,7,9,11,14])) # Expected output: 188",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_Abs_Diff(nums,k):\n    # Initialize variables to store the maximum and minimum values of nums after applying k.\n    min_val = float('inf')\n    max_val = -float('inf')\n\n    for num in nums:\n        # Update the minimum value if the current number is less than the current minimum.\n        if num < min_val:\n            min_val = num\n        \n        # Update the maximum value if the current number is greater than the current maximum.\n        if num > max_val:\n            max_val = num\n\n    # Calculate the maximum absolute difference possible with the updated minimum and maximum values.\n    max_diff = abs(max_val - min_val)\n    \n    # If the result of subtracting k from the maximum value is negative,\n    # it means we can't make any change, so return 0 as the answer.\n    return max_diff if k <= max_val else 0",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for +: 'int' and 'str'",
      "Test 2: FAIL - unsupported operand type(s) for +: 'int' and 'str'",
      "Test 3: FAIL - unsupported operand type(s) for +: 'int' and 'str'"
    ],
    "generated_code": "def ascii_value_string(s):\n    return sum(c for c in s)",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_path_sum(triangle: List[List[int]], i: int, j: int) -> int:\n    if len(triangle) == i + 1:\n        return 0\n    if i == len(triangle) - 1 and j == len(triangle[-1]) - 1:\n        return triangle[i][j]\n    \n    up = triangle[i+1][j] + max(max_path_sum(triangle, i+1, k), max_path_sum(triangle, i+1, k+1))\n    down = triangle[i+1][j+1] + max(max_path_sum(triangle, i+1, k), max_path_sum(triangle, i+1, k+1))\n\n    return max(up, down)",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_digits_twoparts(n):\n    \"\"\"\n    Divide n into two non-negative integers such that their sum of digits is maximized.\n    \n    Parameters:\n    n (int): The number to be divided\n    \n    Returns:\n    int: The sum of the digits of the two numbers formed from the division of n\n    \"\"\"\n    def helper(num, i):\n        if num == 0:\n            return 0\n        last_digit = num % 10\n        return helper(int(num / 10), i + 1) * 10 + max(last_digit, num - last_digit)\n    \n    result = 0\n    for i in range(1, 6):\n        part1 = helper(n, 0)\n        part2 = n - part1\n        digit_sum = helper(part1, 0) + helper(part2, 0)\n        result = max(result, digit_sum)\n    return result\n\n# Check function with provided data points\nprint(sum_digits_twoparts(35))  # Expected output: 17\nprint(sum_digits_twoparts(7))   # Expected output: 7\nprint(sum_digits_twoparts(100)) # Expected output: 19",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef longest_subseq_with_diff_one(nums: List[int], diff: int) -> int:\n    dp = [1] * len(nums)\n    max_length = 0\n    \n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] == diff:\n            dp[i] = dp[i-1] + 1\n            max_length = max(max_length, dp[i])\n    \n    return max_length\n\n# Example usage:\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7))  # Output: 6\nprint(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7))  # Output: 3\nprint(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8))  # Output: 7",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def does_Contain_B(x, b, y):\n    # Check if x, -x, and |b| are divisible by y\n    return x % y == 0 or -x % y == 0 or abs(b) % y == 0",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef is_coprime(a, b):\n    # Calculate the greatest common divisor of a and b using math.gcd()\n    gcd = math.gcd(a, b)\n    # Check if gcd equals 1, which means a and b are coprime\n    return gcd == 1",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    # Recursively sort both halves\n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n    \n    # Merge the sorted halves\n    return merge(left_half, right_half)\n\ndef merge(left, right):\n    merged = []\n    left_index = 0\n    right_index = 0\n    \n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            merged.append(left[left_index])\n            left_index += 1\n        else:\n            merged.append(right[right_index])\n            right_index += 1\n    \n    # Append remaining elements of the non-empty list\n    merged.extend(left[left_index:])\n    merged.extend(right[right_index:])\n    \n    return merged\n\n# Test cases\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9], \"Test case 1 failed\"\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78], \"Test case 2 failed\"\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def parabola_vertex(a,b,c):\n    # Calculate the x-coordinate of the vertex using the formula -b / (2a)\n    x = -b / (2*a)\n    \n    # Calculate the y-coordinate of the vertex using the point-slope form of a line equation\n    y = (-b**2 + math.sqrt(b**2-4*a*c)) / (2*a)\n    \n    return(x, y)\n\n# Test cases to verify the correctness of the function\nprint(parabola_vertex(5,3,2))   # Expected output: (-0.3, 1.55)\nprint(parabola_vertex(9,8,4))   # Expected output: (-0.4444444444444444, 2.2222222222222223)\nprint(parabola_vertex(2,4,6))   # Expected output: (-1.0, 4.0)",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def specified_element(lst, n):\n    return [ele for sublist in lst for ele in sublist if sublist.index(ele) == n]\n\n# Test cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) # Output: [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) # Output: [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)) # Output: [2, 2, 5]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(number):\n    # Convert the number to binary and remove '0b' prefix\n    binary_representation = bin(number)[2:]\n    \n    # Toggle all even bits\n    toggled_bits = ''.join('1' if int(bit) % 2 == 0 else '0' for bit in binary_representation)\n    \n    # Convert back to decimal\n    result = int(toggled_bits, 2)\n    return result\n\n# Test cases\nprint(even_bit_toggle_number(10))  # Output: 0\nprint(even_bit_toggle_number(20))  # Output: 30\nprint(even_bit_toggle_number(30))  # Output: 20",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def tuple_int_str(tup_of_strings):\n    return tuple(map(int, tup_of_strings))\n\n# Test Cases\nprint(tuple_int_str( (('333', '33'), ('1416', '55')))) # Output: ((333, 33), (1416, 55))\nprint(tuple_int_str( (('999', '99'), ('1000', '500')))) # Output: ((999, 99), (1000, 500))\nprint(tuple_int_str( (('666', '66'), ('1500', '555')))) # Output: ((666, 66), (1500, 555))",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def encode_list(input_list):\n    encoded = []\n    i = 0\n    while i < len(input_list):\n        count = 1\n        j = i + 1\n        while j < len(input_list) and input_list[j] == input_list[i]:\n            count += 1\n            j += 1\n        if count > 1:\n            encoded.append([count, input_list[i]])\n        else:\n            encoded.append([1, input_list[i]])\n        i = j\n    return encoded",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Ops(arr, n, k):\n    if sum(arr) % k != 0:\n        return -1\n    \n    arr.sort()\n    result = 0\n    for i in range(k-1):\n        result += arr[i]\n    \n    return len(arr) * n - result",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def month_season(month, day):\n    seasons = {'January': 'winter', 'February': 'winter', 'March': 'spring',\n               'April': 'spring', 'May': 'spring', 'June': 'summer',\n               'July': 'summer', 'August': 'summer', 'September': 'fall',\n               'October': 'fall', 'November': 'fall', 'December': 'winter'}\n    return seasons[month]",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def solution(a, b, n):\n    if n % a != 0:\n        return \"No solution\"\n    \n    # Calculate the integer division of n by a\n    m = n // a\n    \n    # Calculate y\n    y = (n - m * a) / b\n    \n    # Return the result in the required format\n    return f\"x = {m}, y = {int(y)}\"",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(list_one, list_two):\n    return [x for x in list_one if x not in list_two]\n\n# Test cases\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10], [2,4,6,8]))  # Output should be [1, 3, 5, 7, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]))  # Output should be [2, 4, 6, 8, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]))  # Output should be [1, 2, 3, 4, 6, 8, 9, 10]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4) + ... until n-x <= 0.\n    \n    Args:\n    n (int): The starting integer of the series.\n    \n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    total_sum = 0\n    while n >= 0:\n        total_sum += n\n        n -= 2\n    return total_sum",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef area_polygon(sides, length):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \n    Parameters:\n    sides (int): The number of sides of the polygon.\n    length (float): The length of each side of the polygon.\n    \n    Returns:\n    float: The area of the polygon rounded to 10 decimal places.\n    \"\"\"\n    return round((sides * length**2) / (4 * math.tan(math.pi / sides)), 10)\n\n# Test cases to verify the correctness of the function\nprint(area_polygon(4, 20)) # Expected output: 400.0\nprint(area_polygon(10, 15)) # Expected output: 1731.2\nprint(area_polygon(9, 7)) # Expected output: 302.9",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: isSumOfDivisorsEqual() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "import math\n\ndef isSumOfDivisorsEqual(n):\n    \"\"\"\n    This function checks if the sum of all positive divisors of n equals twice the number itself.\n    \n    Args:\n    - n: An integer\n    \n    Returns:\n    - A boolean value indicating whether the sum of divisors equals twice the original number\n    \"\"\"\n    # Calculate the sum of divisors using prime factorization\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_sum += i\n            if i != n // i and n // i <= n ** 0.5:\n                divisor_sum += n // i\n    return divisor_sum == 2 * n\n\n# Test cases\nprint(isSumOfDivisorsEqual(36, 57))  # Expected output: False\nprint(isSumOfDivisorsEqual(2, 4))    # Expected output: False\nprint(isSumOfDivisorsEqual(23, 47))  # Expected output: True",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_char_position(s):\n    # Count lowercase and uppercase characters separately\n    lower_count = sum(1 for char in s if char.islower())\n    upper_count = sum(1 for char in s if char.isupper())\n\n    # Calculate total character positions\n    total_chars = len(s)\n    total_lower_positions = lower_count * 26 + lower_count // 2\n    total_upper_positions = upper_count * 26 + upper_count // 2\n\n    return max(total_lower_positions, total_upper_positions)\n\n# Test cases\nprint(count_char_position(\"xbcefg\"))  # Output: 2\nprint(count_char_position(\"ABcED\"))   # Output: 3\nprint(count_char_position(\"AbgdeF\"))  # Output: 5",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_even_Pair(arr, n):\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                ans += 1\n    return ans",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def next_Power_Of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \n    Parameters:\n    n (int): A positive integer\n    \n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2 ** ((n-1).bit_length())",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr, num):\n    count = arr.count(num)\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev, curr = 0, 1\n        for _ in range(2, n + 1):\n            next_value = prev + curr\n            prev, curr = curr, next_value\n        return curr",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_range_list(nums, left, right):\n    return sum(nums[left:right+1])",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_pentagon(sides):\n    \"\"\"\n    Calculate the perimeter of a pentagon given its side lengths.\n    \n    Parameters:\n    sides (int): The length of each side of the pentagon.\n    \n    Returns:\n    int: The perimeter of the pentagon.\n    \"\"\"\n    return sides * 5\n\n# Test cases\nprint(perimeter_pentagon(5))   # Expected output: 25\nprint(perimeter_pentagon(10))  # Expected output: 50\nprint(perimeter_pentagon(15))  # Expected output: 75",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_occurance' is not defined",
      "Test 2: FAIL - name 'count_occurance' is not defined",
      "Test 3: FAIL - name 'count_occurance' is not defined"
    ],
    "generated_code": "def count_occurrences(s):\n    \"\"\"\n    Counts the number of occurrences of the substring \"std\" in the input string s.\n    \n    Args:\n    s (str): The input string to search within.\n\n    Returns:\n    int: The count of occurrences of \"std\".\n    \"\"\"\n    return s.count('std')\n\n# Test cases\nassert count_occurrences(\"letstdlenstdporstd\") == 3\nassert count_occurrences(\"truststdsolensporsd\") == 1\nassert count_occurrences(\"makestdsostdworthit\") == 2\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_splchar(s):\n    return ''.join(ch for ch in s if ch.isalnum())",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def group_keyvalue(kv_pairs):\n    return {k: list(map(lambda x: x[1], v)) for k, v in kv_pairs}",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_valid_parenthese(expression):\n    \"\"\"\n    This function checks if the given expression has valid sequences of parentheses.\n    \n    Parameters:\n    expression (str): The input expression containing '(', ')', '{', '}', '[' and ']'.\n    \n    Returns:\n    bool: True if the expression has valid sequences of parentheses, False otherwise.\n    \"\"\"\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            # Ignore non-parentheses characters\n            continue\n    \n    return len(stack) == 0\n\n# Test cases to verify the correctness of the solution\nassert is_valid_parenthese(\"(){}[]\") == True\nassert is_valid_parenthese(\"()[{)}\") == False\nassert is_valid_parenthese(\"()\") == True",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def gcd(a, b):\n    # Calculate the greatest common divisor of a and b.\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(x, y):\n    # Return the least common multiple of x and y.\n    return (x * y) // gcd(x, y)\n\ndef answer(n1, n2):\n    # Find two numbers such that their LCM is within the specified range.\n    result_lcm = lcm(n1, n2)\n    for i in range(min(n1, n2), max(n1, n2)):\n        if i <= result_lcm and (result_lcm / i).is_integer():\n            return (i, int(result_lcm / i))\n    return (-1, -1)  # In case no suitable pair is found\n\n# Test cases\nprint(answer(3, 8))  # Expected output: (3, 6)\nprint(answer(2, 6))  # Expected output: (2, 4)\nprint(answer(1, 3))  # Expected output: (1, 2)",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef string_literals(input_list, search_string):\n    \"\"\"\n    This function searches for literal strings from a given list within a provided string.\n    \n    Parameters:\n        input_list (list): A list of literal strings to find.\n        search_string (str): The string to be searched.\n        \n    Returns:\n        str: 'Matched!' if all strings match, otherwise 'Not Matched!'\n    \"\"\"\n    # Joining the list elements into a single regular expression pattern\n    pattern = '|'.join(map(re.escape, input_list))\n    # Searching for the patterns in the search_string\n    matches = [match.group() for match in re.finditer(pattern, search_string)]\n    # Checking if no matches were found and returning appropriate message\n    return 'Matched!' if not matches else 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_num_keith(num):\n    def sum_of_divisors(n):\n        divisors_sum = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors_sum += i\n                if i != n // i:\n                    divisors_sum += n // i\n        return divisors_sum\n    \n    # Check if num can be expressed as the sum of its proper divisors\n    return sum_of_divisors(num) - num == num\n\n# Test cases\nprint(is_num_keith(14))  # Expected output: True\nprint(is_num_keith(12))  # Expected output: False\nprint(is_num_keith(197)) # Expected output: True",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from math import sin, cos, sqrt, atan2, radians\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # convert decimal degrees to radians \n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n\n    # approximate radius of earth in km\n    R = 6373.0\n\n    dlat = radians(lat2-lat1)\n    dlon = radians(lon2-lon1)\n    a = sin(dlat/2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    distance = R * c\n\n    return round(distance, 4)",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport re\n\ndef common_prefix(strings: List[str], length: int) -> str:\n    # Use regular expression to find the shortest string among the provided ones.\n    # This is an optimization step to reduce unnecessary comparisons.\n    regex_pattern = '^' + re.escape(''.join(sorted(strings, key=len)[0][:length])) + '$'\n    \n    # Filter and compare substrings of each string with the regex pattern from left to right,\n    # stopping when no match is found.\n    for i in range(len(strings)):\n        substring = strings[i]\n        for j in range(1, len(substring)):\n            if not re.match(regex_pattern, substring[:j]):\n                return substring[:j-1]  # Return the part before the mismatch.\n    return \"\"  # If all checks pass, it means there was no mismatch.",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_character(text):\n    # Find all uppercase characters in the text\n    uppercase = re.findall('[A-Z]', text)\n    \n    # Find all lowercase characters in the text\n    lowercase = re.findall('[a-z]', text)\n    \n    # Find all special characters in the text\n    special = re.findall('[^A-Za-z0-9]', text)\n    \n    # Find all digits in the text\n    digit = re.findall('\\d', text)\n    \n    return uppercase, lowercase, special, digit\n\n# Test Cases\nprint(find_character(\"ThisIsGeeksforGeeks\"))\nprint(find_character(\"Hithere2\"))\nprint(find_character(\"HeyFolks32\"))",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_pairs(arr, target, diff):\n    count = 0\n    # Create two sets for O(1) lookups\n    seen = set()\n    for num in arr:\n        complement = num + diff\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n\n# Example usage and test case check\nprint(count_pairs([1, 5, 3, 4, 2], 5, 3))  # Expected output: 2\nprint(count_pairs([8, 12, 16, 4, 0, 20], 6, 4))  # Expected output: 5\nprint(count_pairs([2, 4, 1, 3, 4], 5, 2))  # Expected output: 3",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def greater_specificnum(nums, num):\n    for i in nums:\n        if i > num:\n            return True\n    return False",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_focus(a, b, c):\n    return (-b / (2 * a), -c / (a * b))",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'\n\n# Test cases\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['fox']))  # Should return 'Matched!'\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['horse']))  # Should return 'Not Matched!'\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['lazy']))  # Should return 'Matched!'",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_common_subsequence(s1, s2, m, n):\n    # Create a table to store lengths of longest common suffixes of substrings.\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Fill dp table in bottom-up fashion\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The value at dp[m][n] contains length of LCS.\n    return dp[m][n]\n\n# Example usage\nprint(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7))  # Output: 4\nprint(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6))   # Output: 3\nprint(longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4))       # Output: 2",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def prod_Square(n):\n    import math\n    # Check if n is less than or equal to zero\n    if n <= 0:\n        return False\n    \n    # Calculate the square root of n and round it down\n    sqrt_n = int(math.sqrt(n))\n    \n    # If the rounded down square root squared equals n, then it's possible\n    # for n to be the product of two squares\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def first_Missing_Positive(nums):\n    nums_set = set(nums)\n    for i in range(1, len(nums) + 2):\n        if i not in nums_set:\n            return i\n    return len(nums) + 1",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    # Calculate the total number of integer points in both directions for x and y coordinates.\n    total_points = (x2 - x1 + 1) * (y2 - y1 + 1)\n    # The number of integer points inside the square is one less than the total possible points,\n    # since we exclude the boundary points which form the perimeter of the square.\n    return total_points - 1",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumber(month_name):\n    \"\"\"\n    Check if the given month has 30 days.\n    \n    Args:\n        month_name (str): The name of the month to check.\n        \n    Returns:\n        bool: True if the month has 30 days, False otherwise.\n    \"\"\"\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    return month_name in months_with_30_days",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_String(input_str):\n    # Use regular expression to search for at least one alphabet character and one digit in the input string\n    if re.search(\"[a-zA-Z]\", input_str) and re.search(\"\\d\", input_str):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuple(input_tuple):\n    # Convert the tuple to a list to allow for modification of elements.\n    input_list = list(input_tuple)\n    \n    # Sort the list to group duplicates together and then filter out them one at a time.\n    unique_elements = []\n    seen = set()\n    for element in sorted(input_list):\n        if element not in seen:\n            unique_elements.append(element)\n            seen.add(element)\n    \n    # Convert the list back to a tuple and return it.\n    return tuple(unique_elements)\n\n# Test cases\nprint(remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)))  # Expected output: (1, 2, 3, 5)\nprint(remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)))  # Expected output: (2, 3, 4, 5, 6, 7, 8)\nprint(remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)))  # Expected output: (11, 12, 13, 14)",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def octal_To_Decimal(octal_num):\n    # Convert octal string to decimal integer using int() function with base 8\n    decimal_num = int(str(octal_num), 8)\n    return decimal_num\n\n# Test cases to verify the correctness of the function\nassert octal_To_Decimal('25') == 21\nassert octal_To_Decimal('30') == 24\nassert octal_To_Decimal('40') == 32",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first(arr, key, n):\n    low = 0\n    high = n - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == key:\n            result = mid\n            high = mid - 1  # Search in left half\n        elif arr[mid] < key:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result\n\n# Test cases\nprint(first([1,2,3,4,5,6,6],6,6))   # Output: 5\nprint(first([1,2,2,2,3,2,2,4,2],2,9))   # Output: 1\nprint(first([1,2,3],1,3))   # Output: 0",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuples(lst, k):\n    # Use list comprehension and filter to remove tuples of length k\n    filtered_list = [tup for tup in lst if len(tup) != k]\n    return filtered_list",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_exponentio(a, b):\n    result = []\n    for i in range(len(b)):\n        result.append(pow(a[i], b[i]))\n    return tuple(result)\n\n# Test Cases\nprint(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))) # Expected output: (100000, 4096, 78125, 7776)\nprint(find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))) # Expected output: (1771561, 78125, 1679616, 117649)\nprint(find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))) # Expected output: (35831808, 1679616, 40353607, 2097152)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef largest_triangle(a, b):\n    \"\"\"\n    Calculate the area of the largest possible triangle that can be inscribed in an ellipse with semi-major axis 'a' and semi-minor axis 'b'.\n    \n    Parameters:\n    a (float): Semi-major axis of the ellipse.\n    b (float): Semi-minor axis of the ellipse.\n    \n    Returns:\n    float: Area of the largest triangle inscribed in the ellipse.\n    \"\"\"\n    # Formula for the maximum area of a triangle inscribed in an ellipse\n    area = ((math.pi * a ** 2) / 2) * ((math.sqrt(b ** 2 + (a ** 2)) - b) / a)\n    return area\n\n# Test cases to verify the correctness of the function\nassert abs(largest_triangle(4,2)-10.392304845413264)<0.001\nassert abs(largest_triangle(5,7)-4.639421805988064)<0.001\nassert abs(largest_triangle(9,1)-105.2220865598093)<0.001\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    Finds the highest power of 2 which is less than or equal to n.\n    \n    Parameters:\n    n (int): The number for which we need to find the highest power of 2.\n    \n    Returns:\n    int: The highest power of 2 less than or equal to n.\n    \"\"\"\n    p = 0\n    while (1 << (p + 1)) <= n:\n        p += 1\n    return 1 << p",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_max(lst):\n    max_value = max(lst)\n    return [index for index, value in enumerate(lst) if value == max_value]",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(lst):\n    # Your implementation goes here\n    return all(x == lst[0] for x in lst)",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_even(s):\n    return ''.join([char for char in s if char not in '02468'])  # Remove even digits and spaces from input string",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'hamming_Distance' is not defined",
      "Test 2: FAIL - name 'hamming_Distance' is not defined",
      "Test 3: FAIL - name 'hamming_Distance' is not defined"
    ],
    "generated_code": "def hamming_distance(x, y):\n    # Convert both numbers to binary strings and compare character by character.\n    return bin(x ^ y).count('1')",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(input_string, target_char):\n    # Initialize a counter variable\n    count = 0\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # If the current character matches the target character, increment the counter\n        if char == target_char:\n            count += 1\n            \n    # Return the final count\n    return count",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def inversion_elements(tuple_list):\n    # Initialize an empty list to store the result of inversions\n    inversions = []\n    \n    # Iterate through each pair of consecutive elements in the tuple list\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            # Check if the first element is greater than the second element\n            if tuple_list[i] > tuple_list[j]:\n                # Append the difference between the two elements as an inverted value\n                inversions.append(abs(tuple_list[i] - tuple_list[j]))\n                \n    return tuple(inversions)\n\n# Test cases to verify the correctness of the solution\nprint(inversion_elements((7, 8, 9, 1, 10, 7)))  # Expected output: (-8, -9, -10, -2, -11, -8)\nprint(inversion_elements((2, 4, 5, 6, 1, 7)))   # Expected output: (-3, -5, -6, -7, -2, -8)\nprint(inversion_elements((8, 9, 11, 14, 12, 13)))# Expected output: (-9, -10, -12, -15, -13, -14)",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tuples_list):\n    concatenated_elements = []\n    for i in range(len(tuples_list) - 1):\n        # Concatenate two elements and add them to the result list\n        concatenated_element = f\"{tuples_list[i]} {tuples_list[i+1]}\"\n        concatenated_elements.append(concatenated_element)\n    return concatenated_elements\n\n# Test cases\nprint(concatenate_elements([\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"]))  # Expected output: ['DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS']\nprint(concatenate_elements([\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"]))  # Expected output: ['RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR']\nprint(concatenate_elements([\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"]))  # Expected output: ['MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD']",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_longest_repeating_subseq(s):\n    \"\"\"\n    Finds the length of the longest subsequence in s where no character is repeated at the same position as another.\n    \n    Parameters:\n    s (str): The input string to search for the longest non-repeating subsequence.\n    \n    Returns:\n    int: The length of the longest non-repeating subsequence found in s.\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    maxLength = 0\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] != s[j]:\n                dp[i][j] = max(dp[i][j], dp[i+1][j])\n            else:\n                dp[i][j] = dp[i+1][j]\n            \n            if dp[i][j] + 1 > maxLength:\n                maxLength = dp[i][j] + 1\n                \n    return maxLength",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(decimal_str):\n    \"\"\"\n    Check if the provided string represents a valid decimal number.\n    \n    Args:\n        decimal_str (str): The string to be checked for being a decimal number.\n        \n    Returns:\n        bool: True if decimal_str is a valid decimal number with up to two digits after the decimal point, otherwise False.\n    \"\"\"\n    pattern = r'^-?\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, decimal_str))\n\n# Test cases\nprint(is_decimal('123.11')) # Expected output: True\nprint(is_decimal('0.21'))   # Expected output: True\nprint(is_decimal('123.1214')) # Expected output: False",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def heap_replace(heap, new_item):\n    # Inserting the new item at the end of the list\n    heap.append(new_item)\n    return _sift_up(heap)\n\ndef _sift_up(heap):\n    \"\"\"\n    Helper function for _heapify_max.\n    Sifts up an item in the heap if it's larger than its parent.\n    \"\"\"\n    current = len(heap) - 1\n    while current > 0:\n        parent_idx = (current - 1) // 2\n        if heap[current] >= heap[parent_idx]:\n            break\n        heap[current], heap[parent_idx] = heap[parent_idx], heap[current]\n        current = parent_idx\n    return heap",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_allowed_specific_char(s):\n    # Define the pattern for allowed characters: lowercase letters and digits\n    allowed_pattern = '[a-z0-9]'\n    \n    # Use regular expression search to check if all characters in the string match the pattern\n    if bool(re.search(allowed_pattern, s)):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_allowed_specific_char(\"ABCDEFabcdef123450\"))  # Expected output: True\nprint(is_allowed_specific_char(\"*&%@#!}{\"))           # Expected output: False\nprint(is_allowed_specific_char(\"HELLOhowareyou98765\")) # Expected output: True",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_Num() missing 1 required positional argument: 'm'",
      "Test 2: FAIL - count_Num() missing 1 required positional argument: 'm'",
      "Test 3: FAIL - count_Num() missing 1 required positional argument: 'm'"
    ],
    "generated_code": "def count_Num(n, m):\n    # Count numbers whose n-th bit is set.\n    ones = bin(m)[2:].count('1')\n    \n    # Count numbers whose both n-th and m-th bits are set.\n    total = bin((m | n)-n)[2:].count('1') - ones\n    \n    return total",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Calculate the sum of fourth powers of natural numbers from 1 to n\n    for i in range(1, n + 1):\n        total_sum += i ** 4\n    \n    return total_sum",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def concatenate_strings(t1, t2):\n    # Concatenate the elements of the first tuple with those of the second tuple and create a new tuple\n    result_tuple = tuple(x + y for x, y in zip(t1, t2))\n    return result_tuple",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def degree_radian(rad):\n    return rad * 180 / 3.141592653589793",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'list' object cannot be interpreted as an integer",
      "Test 2: FAIL - 'list' object cannot be interpreted as an integer",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decode_list(encoded):\n    result = []\n    index = 0\n    while index < len(encoded):\n        if isinstance(encoded[index], list):\n            count = encoded.pop(index)\n            for _ in range(count):\n                result.append(encoded.pop(0))\n        else:\n            result.append(encoded.pop(0))\n    return result",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_subset_list(subset, superset):\n    return all(item in superset for item in subset)",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Repeated_Char(input_str):\n    seen = set()\n    for char in input_str:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def min_Operations(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return abs(a)\n    \n    if x > y:\n        x, y = y, x\n    \n    return int((y - x) * math.log2(gcd(y // 2 ** ((y.bit_length() + 1) // 2), x))) / 2",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_min_max(input_tuple, k):\n    # Sort the input tuple based on its values\n    sorted_tuple = sorted(input_tuple)\n    \n    # Return the first k smallest and largest elements from the sorted tuple\n    return (sorted_tuple[:k], sorted_tuple[-k:])\n\n\n# Test cases\nprint(extract_min_max((5, 20, 3, 7, 6, 8), 2))  # Output: ([3, 5, 8, 20], [20, 7])\nprint(extract_min_max((4, 5, 6, 1, 2, 7), 3))   # Output: ([1, 2, 4, 5, 6, 7], [4, 5, 6, 7])\nprint(extract_min_max((2, 3, 4, 8, 9, 11, 7), 4)) # Output: ([2, 3, 4, 7], [8, 9, 11, 11])",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def replace_max_specialchar(s,n=1):\n    return ':'.join([x if x not in [' ', ',', '.'] else ':' for x in s.split()])",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(numbers):\n    # Iterate through the list and check if each number is even\n    for num in numbers:\n        if num % 2 == 0:\n            return num  # Return the first even number found\n    \n    return None  # Return None if no even number is found",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_type(tup):\n    types = [type(x) for x in tup]\n    return len(set(types)) == 1",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_majority(arr, n, k):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == k:\n            left = mid + 1\n        elif arr[left] == k:\n            right = mid - 1\n        else:\n            break\n            \n    count = sum(1 for i in range(left, min(n, right + 1)) if arr[i] == k)\n    \n    return count > n / 2",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    # Initialize the count of set bits to zero\n    set_bits_count = 0\n    \n    # Loop through each bit in the binary representation of n\n    while n:\n        # Increment the count if the least significant bit is set (i.e., n & 1)\n        set_bits_count += n & 1\n        \n        # Right shift n by one position to process the next bit\n        n >>= 1\n    \n    return set_bits_count\n\n# Example check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [\n        (2, 1),\n        (4, 1),\n        (6, 2),\n    ]\n    \n    for input_value, expected_output in test_cases:\n        assert count_Set_Bits(input_value) == expected_output, f\"Failed for input: {input_value}\"\n    \n    print(\"All test cases passed successfully.\")\n\ncheck_solution()",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min(arr, low, high):\n    # Base case: if there is one element left\n    if high < low:\n        raise ValueError(\"High index is less than low index\")\n    if high == low:\n        return arr[low]\n    \n    mid = (high + low) // 2\n    \n    # Check if the middle element is greater than its next element\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    # Check if the first element is greater than the middle element\n    elif low < mid and arr[low] > arr[mid]:\n        return arr[low]\n    else:\n        # Recursive call for the right half of the array\n        return find_Min(arr, mid + 1, high)\n\n# Test cases\nprint(find_Min([1,2,3,4,5], 0, 4))  # Expected output: 1\nprint(find_Min([4,6,8], 0, 2))      # Expected output: 4\nprint(find_Min([2,3,5,7,9], 0, 4))  # Expected output: 2",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(s):\n    # Initialize an empty string to store characters with even indices\n    result = ''\n    \n    # Loop through the string starting from index 0 and incrementing by 2 each time\n    for i in range(0, len(s), 2):\n        # Append the character at the current index to the result string\n        result += s[i]\n    \n    return result\n\n# Test cases\nprint(odd_values_string('abcdef'))  # Output: 'ace'\nprint(odd_values_string('python'))  # Output: 'pto'\nprint(odd_values_string('data'))    # Output: 'dt'",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(num, start_bit, end_bit):\n    mask = (1 << end_bit) - 1  # Calculate bitmask for the range [start_bit, end_bit)\n    return num & mask == 0",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange_array(arr, n):\n    # Initialize two pointers for negative and non-negative numbers\n    i = 0  # Pointer for iterating through the entire array\n    j = n - 1  # Pointer for placing the last element in its correct position\n    \n    while i <= j:\n        if arr[i] < 0 and arr[j] > 0:\n            # Swap negative with positive number from end\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] >= 0:\n            # Move forward for positive numbers\n            i += 1\n        else:\n            # Move backward for negative numbers\n            j -= 1\n            \n    return arr\n\n# Example usage:\nprint(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))  # Output: [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(input_string, replacement_char):\n    return input_string.replace(' ', replacement_char)",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum(triangle, level):\n    # Base case: if we reach the last row, return its value\n    if len(triangle) - 1 == level:\n        return triangle[-1][level]\n    \n    # Recursive call for the next level down\n    return triangle[level][-1] + max(max_sum(triangle, level+1), max_sum(triangle, level+1))\n\n# Test cases\nprint(max_sum([[1], [2,1], [3,3,2]], 3))  # Expected output: 6\nprint(max_sum([[1], [1, 2], [4, 1, 12]], 3))  # Expected output: 15\nprint(max_sum([[2], [3,2], [13,23,12]], 3))  # Expected output: 28",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\n\ndef larg_nnum(data, n):\n    # Convert data into a min heap using a max-heap implementation where elements are negative.\n    return [neg_num for neg_num in (-x for x in data) if n > 0][n:]",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(side_length):\n    return side_length ** 3",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n    \n    Args:\n    n (int): The number whose even bits will be set.\n    \n    Returns:\n    int: The number with all its even bits set.\n    \"\"\"\n    # Shift right by 2 positions and add the result back left twice to toggle all even bits\n    return (n >> 2) + ((n << 2) & n)",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def No_of_Triangle(sides, k):\n    if sides < k:\n        return -1\n    else:\n        return int((sides * (sides - 1)) // 2)\n\n# Example usage and test cases\nprint(No_of_Triangle(4, 2))  # Expected output: 7\nprint(No_of_Triangle(4, 3))  # Expected output: 3\nprint(No_of_Triangle(1, 3))  # Expected output: -1",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\nfrom collections import defaultdict\n\ndef check_occurences(tuples_list):\n    \"\"\"\n    This function takes a list of tuples and returns a dictionary where each key is a tuple with the same number of elements as the input tuples,\n    representing a time period, and the value is another dictionary mapping the occurrence count of each record within that time period.\n    \n    Parameters:\n    - tuples_list (list of tuples): The input list of tuples for checking the occurrences.\n    \n    Returns:\n    - dict: A dictionary where keys are tuples indicating the time periods, and values are dictionaries showing the occurrence counts.\n    \"\"\"\n    result = defaultdict(lambda: defaultdict(int))\n    # Iterate over all possible combinations of indices from the tuples\n    for i, j in zip(range(len(tuples_list)), range(1, len(tuples_list))):\n        # Check if the current index matches the previous one to identify a new time period\n        if i == j - 1:\n            # Update the count for the new period based on the old period's data\n            result[tuple(result.keys())].update(tuples_list[i])\n        else:\n            # If not in a new period, just update the count for this period\n            result[tuple(i)] += tuples_list[j]\n    # Return the final result dictionary\n    return {k: v for k, v in result.items()}\n\n# Test cases\nprint(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]))  # Expected output: {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nprint(check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]))  # Expected output: {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nprint(check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]))  # Expected output: {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23):",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def number_of_substrings(s):\n    n = len(s)\n    result = 0\n    \n    for i in range(n):\n        # Counting all single characters as valid substrings\n        result += n - i\n        \n        # If there's at least one character left after removing ith character\n        if i < n-1:\n            for j in range(i+1, n):\n                # Counting substrings with repeated characters using combinatorial formula\n                result += int((n-j) * (j + 1)) // 2\n                \n    return result",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def get_total_number_of_sequences(n, m):\n    # Initialize the first two terms of the sequence\n    total_sequences = [0, 0]\n    if n > 0:\n        total_sequences[0] = 1\n    \n    for i in range(1, n):\n        new_sequence_count = 0\n        # Check all possible values of the current term in relation to the previous term\n        for prev_term in range(max(1, (total_sequences[i-1] * 2) - 1), min(m, total_sequences[i-1]*2)):\n            new_sequence_count += 1\n        \n        # Update the total count with the new value and reset the first entry for the next iteration\n        total_sequences[i%2] = new_sequence_count + total_sequences[(i+1)%2]\n    \n    return total_sequences[n % 2]\n\n# Example test cases\nprint(get_total_number_of_sequences(10, 4))  # Expected output: 4\nprint(get_total_number_of_sequences(5, 2))   # Expected output: 6\nprint(get_total_number_of_sequences(16, 3))  # Expected output: 84",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_list(original_list, replacement_list):\n    original_list[-1:] = replacement_list\n    return original_list",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: closing parenthesis ')' does not match opening parenthesis '['"
    ],
    "generated_code": "import numpy as np\n\ndef array_3d(size_x, size_y, size_z):\n    \"\"\"\n    Generates an N-dimensional array of shape (size_x, size_y, size_z) where every element is '*'.\n    \n    Args:\n    - size_x: The number of elements in the first dimension.\n    - size_y: The number of elements in the second dimension.\n    - size_z: The number of elements in the third dimension.\n\n    Returns:\n    A NumPy array with dimensions (size_x, size_y, size_z), filled with '*'.\n    \"\"\"\n    return np.full((size_x, size_y, size_z), \"*\", dtype=str)\n\n# Test Cases\nassert all(array_3d(6,4,3).shape == (6,4,3) and np.array_equal(array_3d(6,4,3), [[[('*', '*', '*', '*', '*', '*'), ..., '*/']])),\n assert all(array_3d(5,3,4).shape == (5,3,4) and np.array_equal(array_3d(5,3,4), [[[('*', '*', '*', '*', '*'), ..., '*/']])),\n assert all(array_3d(1,2,3).shape == (1,2,3) and np.array_equal(array_3d(1,2,3), [[['*', '*'], ['*', '*'], ['*', '*'], ['*', '*'], ['*', '*']]]))",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(s):\n    return len(s)",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - object of type 'int' has no len()",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - object of type 'int' has no len()"
    ],
    "generated_code": "def sort_on_occurence(lst):\n    # Count the occurrences of each tuple's first element in the list\n    counts = {}\n    for tup in lst:\n        if tup[0] not in counts:\n            counts[tup[0]] = [tup]\n        else:\n            counts[tup[0]].append(tup)\n    \n    # Sort the keys by their count and then lexicographically\n    sorted_keys = sorted(counts.keys(), key=lambda x: (-len(x), x))\n    \n    # Reconstruct the final result as per the requirement\n    result = []\n    for key in sorted_keys:\n        new_list = [key]\n        for tup in counts[key]:\n            new_list.append(tup[0])\n        result.append(tuple(new_list))\n    \n    return result",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def next_Perfect_Square(n):\n    import math\n    # Calculate the integer part of the square root of n\n    root = int(math.sqrt(n))\n    # Find the next integer whose square is just larger than n\n    while (root + 1)**2 <= n:\n        root += 1\n    return root**2",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum(arr, n):\n    \"\"\"\n    Finds the maximum sum of bi-tonic sub-sequence in the given array.\n    \n    Parameters:\n    arr (list): The input array containing integers.\n    n (int): The size of the array.\n    \n    Returns:\n    int: The maximum sum of the bi-tonic sub-sequence.\n    \"\"\"\n    dp1 = [arr[0]] * n\n    dp2 = [arr[-1]] * n\n    \n    for i in range(1, n):\n        dp1[i] = max(dp1[i-1] + arr[i], arr[i])\n        \n    for i in range(n-2, -1, -1):\n        dp2[i] = max(dp2[i+1] + arr[i], arr[i])\n        \n    res = float('-inf')\n    for i in range(n):\n        res = max(res, dp1[i] + dp2[i] - arr[i])\n        \n    return res",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef babylonian_squareroot(n):\n    x = n / 2\n    while True:\n        y = (x + n / x) / 2\n        if abs(y - x) < 0.000001:\n            return y\n        x = y",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lps(s):\n    \"\"\"\n    Finds the length of the longest palindromic subsequence in the given string.\n    \n    Parameters:\n    s (str): The input string.\n    \n    Returns:\n    int: The length of the longest palindromic subsequence.\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # All substrings of length 1 are palindromes themselves\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Fill the table\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                \n    return dp[0][n-1]\n\n# Example check function calls\nprint(lps(\"TENS FOR TENS\"))  # Should print 5\nprint(lps(\"CARDIO FOR CARDS\"))  # Should print 7\nprint(lps(\"PART OF THE JOURNEY IS PART\"))  # Should print 9",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef harmonic_sum(n):\n    # Initialize the total sum\n    total = 0\n    \n    # Calculate the harmonic sum iteratively from 1 to n\n    for i in range(1, n + 1):\n        total += 1 / i\n    \n    # Return the calculated harmonic sum\n    return total",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(tup, x):\n    # Initialize counter to zero\n    count = 0\n    \n    # Loop through each item in the tuple\n    for i in tup:\n        # If the current item matches 'x', increment the counter\n        if i == x:\n            count += 1\n            \n    # Return the final count\n    return count",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def insert_element(lst, element):\n    return [element] + lst",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import cmath\n\ndef convert(complex_number):\n    \"\"\"\n    Convert a complex number to its polar coordinate representation.\n    \n    Args:\n    complex_number (complex): The complex number to be converted.\n    \n    Returns:\n    tuple: A tuple containing two elements: magnitude and phase angle in radians.\n    \"\"\"\n    magnitude = abs(complex_number)\n    phase_angle_radians = cmath.phase(complex_number)\n    return (magnitude, phase_angle_radians)\n\n# Test cases\nprint(convert(1))   # Expected output: (1.0, 0.0)\nprint(convert(4))   # Expected output: (4.0, 0.0)\nprint(convert(5))   # Expected output: (5.0, 0.0)",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of elements in the list.\n    \n    Parameters:\n        lst (list): The list whose elements need to be counted\n    \n    Returns:\n        int: The total count of integer elements in the list\n    \"\"\"\n    counter = 0\n    for element in lst:\n        if type(element) == int:\n            counter += 1\n    return counter",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef words_ae(input_string):\n    pattern = r'\\b[a|e]\\w*'\n    return re.findall(pattern, input_string)\n\n# Test Cases\nprint(words_ae(\"python programe\")) # Expected output: ['ame']\nprint(words_ae(\"python programe language\")) # Expected output: ['ame', 'anguage']\nprint(words_ae(\"statement\")) # Expected output: ['assert', 'atement']",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from itertools import product\n\ndef combinations_colors(colours, n):\n    \"\"\"\n    Generates all possible combinations with repetition for selecting n colors \n    from the given list of colours.\n    \n    Parameters:\n    - colours: A list of strings representing available colours.\n    - n: The number of colours to select in each combination.\n    \n    Returns:\n    - A list of tuples, where each tuple represents a unique combination of colours.\n    \"\"\"\n    return list(product(colours, repeat=n))\n\n# Test cases\nassert set(combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)) == {(\"Red\",), (\"Green\",), (\"Blue\",)}\nassert set(combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)) == {(\"Red\", \"Red\"), (\"Red\", \"Green\"), (\"Red\", \"Blue\"), (\"Green\", \"Green\"), (\"Green\", \"Blue\"), (\"Blue\", \"Blue\")}\nassert set(combinations_colors([\"Red\", \"Green\", \"Blue\"], 3)) == {(\"Red\", \"Red\", \"Red\"), (\"Red\", \"Red\", \"Green\"), (\"Red\", \"Red\", \"Blue\"), (\"Red\", \"Green\", \"Green\"), (\"Red\", \"Green\", \"Blue\"), (\"Red\", \"Blue\", \"Blue\"), (\"Green\", \"Green\", \"Green\"), (\"Green\", \"Green\", \"Blue\"), (\"Green\", \"Blue\", \"Blue\"), (\"Blue\", \"Blue\", \"Blue\")}",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_prime(n):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Count the number of prime numbers less than a given non-negative number.\n    \n    :param n: Non-negative integer\n    :return: Integer - number of prime numbers less than n\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(a, b):\n    return(b, a)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "count_odd = lambda lst: sum(1 for x in lst if x % 2 != 0)",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximize_elements(tuples1, tuples2):\n    # Sort each tuple in descending order based on the first element\n    sorted_tuples1 = [tup for tup in tuples1 if tup[0] >= max(tup[0] for tup in tuples1)][::-1]\n    sorted_tuples2 = [tup for tup in tuples2 if tup[0] >= max(tup[0] for tup in tuples2)][::-1]\n\n    result = []\n    while len(sorted_tuples1) > 0 and len(sorted_tuples2) > 0:\n        if sorted_tuples1[0][0] >= sorted_tuples2[0][0]:\n            result.append(sorted_tuples1.pop(0))\n        else:\n            result.append(sorted_tuples2.pop(0))\n\n    # Append remaining elements from either list\n    result.extend(sorted_tuples1)\n    result.extend(sorted_tuples2)\n\n    return tuple(result)\n\n# Test cases\nprint(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))  # Expected output: ((6, 7), (4, 9), (2, 9), (7, 10))\nprint(maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))))  # Expected output: ((7, 8), (5, 10), (3, 10), (8, 11))\nprint(maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))))  # Expected output: ((8, 9), (6, 11), (4, 11), (9, 12))",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - Invalid input",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def newman_prime(n):\n    if n == 1:\n        return 2\n    elif n % 2 != 0 and n > 1:\n        primes = [2]\n        for i in range(3, n+1, 2):\n            is_prime = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n        return primes[n-1]\n    else:\n        raise ValueError(\"Invalid input\")",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def division_elements(a, b):\n    # Calculate element-wise division of two tuples\n    result = tuple([i/j for i,j in zip(a,b)])\n    return result",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_two_parts(lst, k):\n    return lst[:k], lst[k:]",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1, dict2):\n    return {**dict1, **dict2}\n\n# Test cases\nprint(merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200})) # {'x': 300, 'y': 200, 'a': 100, 'b': 200}\nprint(merge_dict({'a':900,'b':900,'d':900}, {'a':900,'b':900,'d':900})) # {'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nprint(merge_dict({'a':10,'b':20}, {'x':30,'y':40})) # {'x':30,'y':40,'a':10,'b':20}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dog_age(age_human_years):\n    return int((age_human_years - 2) * 4 + 21)",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_split(input_list,n):\n    return [input_list[i:i+n] for i in range(0, len(input_list), n)]",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side_length):\n    # Calculate and return the lateral surface area of a cube\n    return 4 * side_length**2",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    # Initialize sum of squares\n    total_sum = 0\n    \n    for i in range(n):\n        # Calculate square and add it to the total sum\n        total_sum += (2 * i + 1) ** 2\n    \n    return total_sum",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_star_num(n):\n    \"\"\"\n    Calculate the nth star number.\n    \n    A star number is defined as a number where each digit is either '0' or '1'.\n    The formula for calculating the nth star number is:\n    S_n = ((2^n + 2^(n-1)) * (2^(n+1) - 1)) / 2\n    \n    Parameters:\n    n (int): The position in the sequence of star numbers.\n    \n    Returns:\n    int: The nth star number.\n    \"\"\"\n    return int(((2**n + 2**(n-1)) * (2**(n+1) - 1)) / 2)\n\n# Test the function with provided data points\nassert find_star_num(3) == 37, \"Test case 1 failed\"\nassert find_star_num(4) == 73, \"Test case 2 failed\"\nassert find_star_num(5) == 121, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char):\n    return ord(char)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(0, len(arr), 2): # Iterate through every second element starting from index 0\n        if arr[i] % 2 == 0:       # Check if the current element is even\n            total += arr[i]\n    return total",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    # Initialize sum with 0\n    total_sum = 0\n    \n    # Iterate through the first n even numbers\n    for i in range(1, n + 1):\n        # Add the fifth power of each even number to the sum\n        total_sum += (2 * i)**5\n    \n    return total_sum",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rear_extract(lst):\n    # Extracting and returning the last elements from each tuple in the list\n    return [x[-1] for x in lst]\n\n# Test cases to verify the correctness of the function\nprint(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]))  # Should return [21, 20, 19]\nprint(rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]))  # Should return [36, 25, 45]\nprint(rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]))  # Should return [14, 36, 56]",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i] - tup2[i])\n    return tuple(result)\n\n# Test cases\nprint(substract_elements((10, 4, 5), (2, 5, 18))) # Expected output: (8, -1, -13)\nprint(substract_elements((11, 2, 3), (24, 45 ,16))) # Expected output: (-13, -43, -13)\nprint(substract_elements((7, 18, 9), (10, 11, 12))) # Expected output: (-3, 7, -3)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculate the sum of binomial coefficients for even indices up to n.\n    \n    Parameters:\n    n (int): The upper limit number\n    \n    Returns:\n    int: Sum of binomial coefficients for even indices up to n\n    \"\"\"\n    total_sum = 0\n    # Loop through all even numbers up to n\n    for i in range(2, n + 1, 2):\n        total_sum += binom(i)\n    return total_sum\n\n# Helper function to calculate binomial coefficient\nfrom math import comb\n\ndef binom(x):\n    \"\"\"\n    Calculate binomial coefficient C(n, k)\n    \n    Parameters:\n    x (int): Number where 'n' is x and 'k' is 1\n    \"\"\"\n    return comb(x, 1)\n\n# Test cases\nprint(even_binomial_Coeff_Sum(4))   # Expected output: 8\nprint(even_binomial_Coeff_Sum(6))   # Expected output: 32\nprint(even_binomial_Coeff_Sum(2))   # Expected output: 2",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Position(arr, target, position):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            position += 1\n            if position >= len(arr):\n                break\n    return position - 1\n\n# Test Cases\nprint(get_Position([2,5,4],3,2))  # Output: 2\nprint(get_Position([4,3],2,2))   # Output: 2\nprint(get_Position([1,2,3,4],4,1))  # Output: 4",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder.\n    \n    Args:\n        radius (float): The radius of the base of the cylinder.\n        height (float): The height of the cylinder.\n        \n    Returns:\n        float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius ** 2 * height",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_filter(dict_input, value):\n    return {key: val for key, val in dict_input.items() if val >= value}",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def count_first_elements(tup):\n    # Extract elements from the tuple except for the nested tuples\n    first_elements = [element for sublist in tup for element in sublist if isinstance(element, int)]\n    \n    # Count occurrences of each element and return the one occurring most frequently as the result\n    count_dict = {}\n    for num in first_elements:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    max_count = max(count_dict.values())\n    for key, value in count_dict.items():\n        if value == max_count:\n            return key\n\n# Test cases\nprint(count_first_elements((1, 5, 7, (4, 6), 10)))  # Output: 3\nprint(count_first_elements((2, 9, (5, 7), 11)))      # Output: 2\nprint(count_first_elements((11, 15, 5, 8, (2, 3), 8)))  # Output: 4",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_num_decagonal(n):\n    \"\"\"\n    Returns the nth decagonal number.\n    \n    Args:\n        n (int): The position in the sequence of decagonal numbers.\n        \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    return n * ((7*n - 5) / 2)\n\n# Test cases\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True, i\n    return False, None\n\n# Test cases\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],31)) # Expected output: (True, 3)\nprint(sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61)) # Expected output: (True, 7)\nprint(sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48)) # Expected output: (True, 6)",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_unique(lst):\n    # Check if the length of the set is equal to the length of the list\n    # If they are equal, all elements in the list are unique\n    return len(set(lst)) == len(lst)",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def validate(n):\n    num_str = str(n)\n    for i in range(len(num_str)):\n        if int(num_str[i]) > int(num_str.count(str(i))):\n            return False\n    return True",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(list_of_strings, target_string):\n    return all(s == target_string for s in list_of_strings)",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_two_three(text):\n    # Check if the text contains exactly one character 'a' followed by either zero or two 'b's\n    pattern = r'^.*a(b{0,2})$'\n    result = re.search(pattern, text)\n    \n    return 'Found a match!' if result else 'Not matched!'",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sub_array_sum_repeated(arr, n, m):\n    def kadane_algorithm(A):\n        current_sum = A[0]\n        max_sum = A[0]\n\n        for i in range(1, len(A)):\n            current_sum = max(A[i], current_sum + A[i])\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n        return max_sum\n\n    total_length = n * m\n    arr.extend(arr)\n    \n    # Calculate the maximum subarray sum for the entire repeated array\n    max_sub_sum = kadane_algorithm(arr)\n\n    return max_sub_sum\n\n# Example usage and test case checks\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))  # Expected output: 30\nprint(max_sub_array_sum_repeated([-1, 10, 20], 3, 2))      # Expected output: 59\nprint(max_sub_array_sum_repeated([-1, -2, -3], 3, 3))      # Expected output: -1",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'square_Sum' is not defined",
      "Test 2: FAIL - name 'square_Sum' is not defined",
      "Test 3: FAIL - name 'square_Sum' is not defined"
    ],
    "generated_code": "def square_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 2\n    return total",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: modular_inverse() takes 2 positional arguments but 3 were given"
    ],
    "generated_code": "from math import gcd\n\ndef is_inverse_possible(a, p):\n    \"\"\"\n    Check if 'a' has an inverse modulo 'p'.\n    \n    :param a: An integer representing the value for which we want to find the inverse.\n    :param p: A prime number.\n    :return: True if 'a' has an inverse modulo 'p', False otherwise.\n    \"\"\"\n    return gcd(a, p) == 1\n\ndef modular_inverse(nums, mod):\n    \"\"\"\n    Returns the number of integers in 'nums' whose modular inverse with respect to 'mod' is equal to themselves.\n    \n    :param nums: List[int] - A list of integers where each element represents 'a'.\n    :param mod: int - The modulus 'p'. \n    :return: int - Number of integers in 'nums' whose modular inverse is equal to themselves.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if is_inverse_possible(num, mod):\n            count += 1\n    return count\n\n# Test cases\nprint(modular_inverse([ 1, 6, 4, 5 ], 4, 7)) # Expected output: 2\nprint(modular_inverse([1, 3, 8, 12, 12], 5, 13)) # Expected output: 3\nprint(modular_inverse([2, 3, 4, 5], 4, 6)) # Expected output: 1",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Days(year):\n    \"\"\"\n    Calculate the number of odd days in a given year.\n    \n    Parameters:\n    year (int): The year for which to calculate odd days.\n    \n    Returns:\n    int: The number of odd days in the given year.\n    \"\"\"\n    # Days in each month\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    total_days = sum(days_in_month[:year % 400])\n    if year % 400 != 0 and (year % 4 == 0 and year % 100 != 0):\n        total_days += 1\n    \n    odd_days = len([day for day in range(total_days + 1, 366) if day % 2 != 0])\n    \n    return odd_days",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length(lst):\n    return max(len(sublist) for sublist in lst), [sublist for sublist in lst if len(sublist) == max(len(sublist) for sublist in lst)]",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, k\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] * k - dp[i - 2]\n    return dp[n]\n\n# Test cases\nprint(count_no_of_ways(2, 4))  # Output: 16\nprint(count_no_of_ways(3, 2))  # Output: 6\nprint(count_no_of_ways(4, 4))  # Output: 228",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(a, b):\n    # Division operation to calculate the quotient\n    quotient = a // b\n    return quotient",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def max_val(lst):\n    return max(lst)",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_div(n):\n    # Initialize sum of divisors\n    sum_div = 0\n    \n    # Loop through numbers from 1 to n-1 to find divisors\n    for i in range(1, n):\n        if n % i == 0:\n            sum_div += i\n    \n    return sum_div",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_list(nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            # Recursively call flatten_list on sublists\n            result.extend(flatten_list(item))\n        else:\n            # Add non-list items directly\n            result.append(item)\n    return result\n\n# Test cases\nprint(flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])) \nprint(flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]))\nprint(flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]))",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - unhashable type: 'list'",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def intersection_nested_lists(list1, list2):\n    return [sublist for sublist in list2 if set(sublist).issubset(set(list1))]",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_aggregate(lst):\n    # Initialize variables to keep track of the highest aggregate and corresponding name\n    highest_aggregate = -float(\"inf\")\n    highest_name = \"\"\n    \n    for name, aggregate in lst:\n        # If the current aggregate is higher than the highest recorded so far,\n        if aggregate > highest_aggregate:\n            highest_aggregate = aggregate\n            highest_name = name\n    \n    return (highest_name, highest_aggregate)\n\n# Test cases\nprint(max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])) # ('Juan Whelan', 212)\nprint(max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])) # ('Juan Whelan', 72)\nprint(max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])) # ('Sabah Colley', 70)",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import combinations\n\ndef count_binary_seq(n):\n    \"\"\"\n    This function calculates the number of binary sequences of length 2n where the sum of the first n bits equals the sum of the last n bits.\n    \n    Args:\n    - n: An integer representing half the length of the binary sequence.\n    \n    Returns:\n    - A float representing the count of valid binary sequences.\n    \"\"\"\n    total_sequences = 2 ** n * 2 ** n  # Total possible binary sequences of length 2n\n    valid_sequences = 0\n    \n    for i in range(0, 2**n + 1): \n        if bin(i)[2:].count('1') == n and bin(i)[2:].count('1') == n:  # Check if the first half has n ones and the second half has n ones\n            valid_sequences += 1\n            \n    return total_sequences / valid_sequences\n\n# Test cases\nprint(count_binary_seq(1))  # Expected output: 2.0\nprint(count_binary_seq(2))  # Expected output: 6.0\nprint(count_binary_seq(3))  # Expected output: 20.0",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max() arg is an empty sequence",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_depth(d):\n    return max([dict_depth(v) if isinstance(v, dict) else 0 for v in d.values()]) + 1",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'set_Bit_Number' is not defined",
      "Test 2: FAIL - name 'set_Bit_Number' is not defined",
      "Test 3: FAIL - name 'set_Bit_Number' is not defined"
    ],
    "generated_code": "def set_bit_number(number):\n    # Use log2 and floor division to find the position of the highest bit\n    # Then shift left with that power of 2 to get the corresponding number\n    return (number - (number & -number))\n\n# Test the function with provided data points\nassert set_bit_number(6) == 4, \"Test case 1 failed\"\nassert set_bit_number(10) == 8, \"Test case 2 failed\"\nassert set_bit_number(18) == 16, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def solve(arr, n):\n    \"\"\"\n    Check if the number of inversions where both elements in each pair are even,\n    and also the number of inversions where exactly one element is odd.\n    \n    Parameters:\n    arr (list): The input array of integers.\n    n (int): The length of the array.\n    \n    Returns:\n    bool: True if the counts of these inversions are equal, False otherwise.\n    \"\"\"\n    # Count total inversions where both elements are even\n    even_even_inv = sum(1 for i in range(n-1) for j in range(i+1, n) if arr[i] % 2 == 0 and arr[j] % 2 == 0)\n    \n    # Count total inversions where exactly one element is odd\n    odd_odd_inv = sum(1 for i in range(n-1) if arr[i] % 2 != 0)\n    \n    # Compare the counts and return the result\n    return even_even_inv == odd_odd_inv",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Element(arr, rotations, idx, size=0):\n    if size == 0:\n        size = len(arr)\n    for i in range(size):\n        temp_idx = (idx + i * size) % size\n        if temp_idx == rotations:\n            return arr[temp_idx]\n    return None",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(words):\n    # Filter the list to include only words that start with the letter 'p'\n    filtered_words = [word for word in words if word.startswith('p')]\n    \n    # Return the first two elements as they meet the condition and could be considered a potential match\n    return filtered_words[:2]\n\n# Test cases\nprint(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))  # Should print ('Python', 'PHP')\nprint(start_withp([\"Python Programming\",\"Java Programming\"]))  # Should print ('Python','Programming')\nprint(start_withp([\"Pqrst Pqr\",\"qrstuv\"]))  # Should print ('Pqrst','Pqr')",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_increasing_subseq(arr, i, k, j):\n    # Base case: if we've reached the end of the array, return 0\n    if i >= len(arr): \n        return 0\n    \n    # Calculate the sum of increasing subsequences ending at arr[i] up to the k-th element\n    current = arr[i]\n    \n    for x in range(i + 1, min(j, len(arr))):\n        if arr[x] > current:\n            current += max_sum_increasing_subseq(arr, x, k, j)\n            \n    # If k is less than or equal to i, add the value at arr[k] to the result\n    if k <= i:\n        current += arr[k]\n        \n    return current\n\n# Example usage\narr = [1, 101, 2, 3, 100, 4, 5 ]\ni = 7\nk = 4\nj = 6\nprint(max_sum_increasing_subseq(arr, i, k, j))",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 2: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 3: FAIL - can only concatenate tuple (not \"list\") to tuple"
    ],
    "generated_code": "def colon_tuplex(tup, i, j):\n    return tup[:i] + ([j]*max(0,j-i)) + tup[i+1:]",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: too many values to unpack (expected 2)"
    ],
    "generated_code": "from itertools import combinations_with_replacement as cwr\nimport operator\nimport functools\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    Find the top n largest products from elements at each index in two lists.\n    \n    Parameters:\n    - list1: The first input list.\n    - list2: The second input list.\n    - n: Number of top products to return.\n    \n    Returns:\n    A list containing the top n largest products.\n    \"\"\"\n    # Calculate all possible multiplications between indices and sort them\n    product_tuples = [(i, j) for i, j in cwr(list1, len(list2))]\n    sorted_products = sorted(product_tuples, key=functools.cmp_to_key(lambda x, y: -operator.gt(x[0] * x[1], y[0] * y[1])))\n\n    # Extract and filter out the required numbers based on their size\n    top_n_products = [product for product in sorted_products[:n]]\n\n    return [int(str(num) + str(2**len(top_n_products))) for num, _ in top_n_products]\n\n# Test cases to verify the correctness of the solution\nprint(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)) # Expected output: [60, 54, 50]\nprint(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)) # Expected output: [60, 54, 50, 48]\nprint(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)) # Expected output: [60, 54, 50, 48, 45]",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(x, y):\n    if x >= y:\n        return x\n    else:\n        return y",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def string_to_tuple(s):\n    # Convert the input string into a list of characters and then join them with a comma\n    result = ','.join(list(s))\n    return tuple(result)",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_left_most_unset_bit(num):\n    while num & (num - 1) > 0:\n        num ^= (num - 1)\n    return num + 1",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\ndef volume_cone(radius,height):\n    return 1/3 * math.pi * radius**2 * height",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(lst):\n    # Use list comprehension to filter and return only positive numbers from the list\n    return [num for num in lst if num > 0]",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum_rectangular_grid(grid, n):\n    if not grid:\n        return 0\n    \n    m = len(grid)\n    \n    # Create dp arrays for each row\n    dp1 = [grid[0][i] for i in range(n + 1)]\n    dp2 = [0] * (n + 1)\n    \n    for i in range(1, m):\n        temp = []\n        \n        # Calculate the max sums for non-adjacent elements\n        for j in range(n + 1):\n            if j == 0:\n                temp.append(dp1[j])\n            elif j > 0 and j < n:\n                temp.append(max(dp1[j - 1], dp2[j]))\n            else:\n                temp.append(max(dp1[j - 1], dp2[j]) + grid[i][j - 1])\n                \n        dp2 = temp[:]\n        dp1 = [0] * (n + 1)\n        \n    # Find the maximum sum among all possible subgrids\n    return max(temp)\n\n# Test cases\nprint(max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3))  # Output: 7\nprint(max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5))  # Output: 24\nprint(max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5))  # Output: 81",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max_Len_Even(s):\n    max_len = -1\n    for i in range(len(s)):\n        if s[i] == 'e' and len(s) - i <= 6:\n            current_len = 0\n            while i < len(s) and s[i] == 'e':\n                current_len += 1\n                i += 1\n            max_len = max(max_len, current_len)\n    return \"\" if max_len == -1 else s[max_len::]",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target and (mid == len(arr) - 1 or arr[mid+1] != target):\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1\n\n# Test cases\nprint(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)) # Output: 3\nprint(find_last_occurrence([2, 3, 5, 8, 6, 6, 6, 9, 9, 9], 9)) # Output: 9\nprint(find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)) # Output: 6",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def modified_encode(arr):\n    i = 0\n    result = []\n    while i < len(arr):\n        count = 1\n        current_char = arr[i]\n        i += 1\n        while i < len(arr) and arr[i] == current_char:\n            count += 1\n            i += 1\n        result.append(count)\n        result.append(current_char)\n    return result",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "from typing import List\n\ndef max_volume(sides: List[int]) -> int:\n    \"\"\"\n    Finds the maximum volume of a cuboid whose total length is equal to the given list 'sides'.\n    \n    Parameters:\n    sides (List[int]): A list of integers representing the lengths of each side of the cuboid.\n    \n    Returns:\n    int: The maximum possible volume of the cuboid.\n    \"\"\"\n    from itertools import permutations\n    \n    # Generate all possible permutations of the input list\n    for perm in permutations(sides):\n        # Calculate the volume using the product of the three dimensions\n        if perm[0] + perm[1] + perm[2] == min(perm): \n            return perm[0] * perm[1] * perm[2]\n        \n    # If no valid combination is found, return 0 as per default expectation\n    return 0",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_long_word(s):\n    # Use regular expression to match words of exactly length 5\n    pattern = r'\\b\\w{5}\\b'\n    matches = re.findall(pattern, s)\n    return matches",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_difference(n):\n    return ((n * (n + 1) // 2) ** 2 - (sum(range(1, n + 1)) ** 2))\n\n# Test cases\nprint(sum_difference(12))  # Expected output: 5434\nprint(sum_difference(20))  # Expected output: 41230\nprint(sum_difference(54))  # Expected output: 2151270",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'i' is not defined. Did you mean: 'id'?"
    ],
    "generated_code": "def find_demlo(number_str):\n    # Calculate the length of the input string\n    len_num = len(number_str)\n    \n    # Create a string with numbers from 1 to 9 and repeat as necessary\n    result_str = ''.join(str(i) * min(3, i + 1) for i in range(1, len_num // 2 + 1))\n    \n    # Add remaining digits if they exist\n    result_str += ''.join(str(i) * (len_num - 2 * m - 2) for m in range(len_num // 2, -1, -1)) if len_num % 2 != 0 else ''\n    \n    return result_str\n\n# Test cases\nprint(find_demlo(\"111111\"))  # Expected output: \"12345654321\"\nprint(find_demlo(\"1111\"))    # Expected output: \"1234321\"\nprint(find_demlo(\"13333122222\"))  # Expected output: \"123456789101110987654321\"",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def position_min(lst):\n    min_index = lst.index(min(lst))\n    min_positions = [min_index + i for i in range(len(lst)) if lst[i] == min(lst)]\n    return min_positions\n\n# Test cases\nprint(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54]))  # Output: [3, 11]\nprint(position_min([1,2,2,2,4,4,4,5,5,5,5]))  # Output: [0]\nprint(position_min([2,1,5,6,8,3,4,9,10,11,8,12]))  # Output: [1]",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange(arr, n):\n    result = []\n    pos_idx = 0\n    neg_idx = 0\n    \n    while pos_idx < len(arr) or neg_idx < len(arr):\n        if pos_idx < len(arr) and arr[pos_idx] >= 0:\n            result.append(arr[pos_idx])\n            pos_idx += 2\n        elif neg_idx < len(arr) and arr[neg_idx] < 0:\n            result.append(arr[neg_idx])\n            neg_idx += 2\n        else:\n            break\n    \n    return result[:n]\n\n# Test cases\nprint(re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)) # Output: [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nprint(re_arrange([1, 2, 3, -4, -1, 4], 6))               # Output: [-4, 1, -1, 2, 3, 4]\nprint(re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8))       # Output: [-4, 4, -3, 7, -9, 9, 77, 5]",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_alternates(lst):\n    result = []\n    for i in range(0, len(lst), 2):\n        result.append(sum(lst[i:i+2]))\n    return tuple(result)\n\n# Test Cases\nprint(sum_of_alternates((5, 6, 3, 6, 10, 34))) # Expected output: (46, 18)\nprint(sum_of_alternates((1, 2, 3, 4, 5)))       # Expected output: (6, 9)\nprint(sum_of_alternates((6, 7, 8, 9, 4, 5)))    # Expected output: (21, 18)",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Min_Squares(n):\n    # Initialize an array where dp[i] represents the minimum number of squares that add up to i\n    dp = [float('inf')] * (n + 1)\n    \n    # Base case initialization\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        # Try every possible square value from 1 to i\n        for j in range(1, int(i**0.5) + 1):\n            if i >= j ** 2:\n                dp[i] = min(dp[i], dp[j ** 2] + dp[i - j ** 2])\n    \n    return dp[n]\n\n# Test cases\nprint(get_Min_Squares(6))  # Expected output: 3\nprint(get_Min_Squares(2))  # Expected output: 2\nprint(get_Min_Squares(4))  # Expected output: 1",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef most_occurrences(words_list):\n    # Count the occurrences of each word and find the one with the highest count\n    return max(words_list, key=lambda x: Counter(x.split()).most_common(1)[0][1])",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if any two sides are equal\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(lst, n, k):\n    \"\"\"\n    Rotates the elements in lst to the left by k steps.\n    \n    Parameters:\n    lst (list): The list to be rotated.\n    n (int): Number of positions each element is shifted.\n    k (int): Size of rotation from the beginning and end of the list.\n    \n    Returns:\n    list: A new list with elements rotated by k places to the left.\n    \"\"\"\n    return lst[k:] + lst[:k]\n\n# Test Cases\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4))  # Expected output: [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2))  # Expected output: [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))  # Expected output: [6, 7, 8, 9, 10, 1, 2]",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(nums):\n    # Initialize a counter for negative numbers\n    negative_count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # If the number is less than zero, increment the counter\n        if num < 0:\n            negative_count += 1\n            \n    # Return the total count of negative numbers\n    return negative_count",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_char(text):\n    pattern = r'\\b\\w{3,5}\\b'\n    matches = re.findall(pattern, text)\n    return matches",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def count_unset_bits(number):\n    # Counting the number of unset bits in the binary representation of 'number'\n    return bin(number).count('0')\n\n# Test cases to verify the correctness of the solution\nassert count_unset_bits(2) == 1, \"Test case 1 failed\"\nassert count_unset_bits(4) == 2, \"Test case 2 failed\"\nassert count_unset_bits(6) == 1, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(input_str):\n    frequency = {}\n    for char in input_str:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def sort_list_by_second_element(lst):\n    return sorted(lst, key=lambda x: x[1])",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Validity(a, b, c):\n    # Check if the sum of any two sides is greater than the third side\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ap_sum(a, d, n):\n    return int(n * (2*a + (n-1)*d) / 2)",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<=' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '<=' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '<=' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "import calendar\n\ndef check_monthnum(month_name):\n    # Get the number of days in the given month\n    num_days = calendar.monthrange(2023, month_name.lower())[1]\n    # Check if the month has 28 days\n    return num_days == 28",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_word(text):\n    pattern = r'(\\w+)$'\n    result = re.search(pattern, text)\n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(s):\n    result = 0\n    for i in range(len(s)):\n        # Check if there's at least one character before 'i'\n        if i > 0:\n            char_i = s[i]\n            j = i - 1\n            while j >= 0 and s[j] == char_i:\n                result += 1\n                j -= 1\n        else:\n            # For the first character, we need to consider all possibilities.\n            for ch in set(s):\n                result += len([ch]) * (len(s) - 1)\n    \n    return result",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Divisor(start, end):\n    # Initialize the max count and divisor\n    max_count = 0\n    divisor = 0\n    \n    for i in range(start, end + 1):\n        for j in range(2, int(i**0.5) + 1):  # Check divisors up to square root of i\n            if i % j == 0:\n                current_count = 1\n                while i % j == 0:\n                    i //= j\n                    current_count += 1\n                max_count = max(max_count, current_count)\n                divisor = j\n                \n    # If no proper divisor is found, return start as the divisor\n    if max_count == 0:\n        return start\n        \n    return divisor",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_three_smallest_nums(nums):\n    # Sort the list in ascending order\n    nums.sort()\n    # Sum up the first three elements which will be the smallest\n    return sum(nums[:3])",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_to_tuple(some_set):\n    return tuple(sorted(some_set))",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'float' object cannot be interpreted as an integer"
    ],
    "generated_code": "def find_minimum_range(arrays):\n    # Initialize the minimum and maximum values for each array\n    min_values = []\n    max_values = []\n\n    # Find the starting index of the minimum value in each array\n    start_indices = [-float('inf')] * len(arrays)\n\n    # Sort the first elements of each array with their corresponding original indices\n    sorted_arrays = sorted([(array[0], i) for i, array in enumerate(arrays)])\n\n    # Update the minimum and maximum values and start indices for the next iteration\n    while True:\n        current_min = float('inf')\n        current_max = -float('inf')\n\n        for idx, (_, arr_index) in enumerate(sorted_arrays):\n            current_min = min(current_min, arrays[arr_index][idx])\n            current_max = max(current_max, arrays[arr_index][idx])\n\n            if idx == len(arrays) - 1:\n                break\n\n            start_indices[idx] += 1\n            if start_indices[idx] < len(arrays) - 1:\n                arrays[arr_index].insert(start_indices[idx], float('inf'))\n                sorted_arrays.append((arrays[arr_index][-1], idx))\n            else:\n                arrays[arr_index].pop(-1)\n\n        # If there's no new update in all arrays, stop the loop\n        if all([min_value == current_min for min_value in min_values]):\n            break\n\n        # Add the updated minimum and maximum values and their original indices to the results list\n        min_values.append(min(current_min, current_max))\n        max_values.append(max(current_min, current_max))\n\n    # The range is determined by the difference between the last two added values\n    return (max_values[-1] - min_values[-1], min_values[-1])\n\n# Example usage:\nprint(find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]))  # Output: (4, 6)",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dig_let(s):\n    digit_count = 0\n    letter_count = 0\n    for char in s:\n        if char.isdigit():\n            digit_count += 1\n        elif char.isalpha():\n            letter_count += 1\n    return (digit_count, letter_count)\n\n# Test cases\nprint(dig_let(\"python\"))   # Expected output: (6, 0)\nprint(dig_let(\"program\"))  # Expected output: (7, 0)\nprint(dig_let(\"python3.0\"))  # Expected output: (6, 2)",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def count_Odd_Squares(start, end):\n    \"\"\"\n    Counts the number of elements within the specified range [start, end] inclusive,\n    which have an odd number of divisors.\n    \n    Parameters:\n        start (int): The starting integer of the range.\n        end (int): The ending integer of the range (inclusive).\n        \n    Returns:\n        int: The count of numbers within the range [start, end] having an odd number of divisors.\n    \"\"\"\n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through each number in the range from 'start' to 'end'\n    for num in range(start, end + 1):\n        # Check if the current number is not divisible by 2 (i.e., it's an odd number)\n        if num % 2 != 0:\n            # Count all numbers as they are considered to be square-free\n            count += 1\n            \n    return count\n\n# Example check function calls to verify the correctness of the solution\nassert count_Odd_Squares(5, 100) == 8\nassert count_Odd_Squares(8, 65) == 6\nassert count_Odd_Squares(2, 5) == 1\n\nprint(\"All checks passed.\")",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_consecutivenums(nums):\n    # Initialize an empty list to store differences\n    diffs = []\n    # Iterate through the list of numbers with step size 2\n    for i in range(0, len(nums), 2):\n        if i + 1 < len(nums):\n            # Calculate and append the difference between consecutive numbers\n            diffs.append(abs(nums[i+1] - nums[i]))\n    return diffs\n\n# Test the function with provided data points\nprint(diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7]))  # Expected output: [0, 2, 1, 0, 1, 1, 1]\nprint(diff_consecutivenums([4, 5, 8, 9, 6, 10]))       # Expected output: [1, 3, 1, -3, 4]\nprint(diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7]))  # Expected output: [1, 1, 1, 1, 0, 0, 0, 1, 2]",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def zigzag(n, k):\n    \"\"\"\n    This function calculates the nth term of the \"z-shaped\" sequence for n and k.\n    \n    Parameters:\n    n (int): The index in the sequence.\n    k (int): The parameter used in the calculation.\n    \n    Returns:\n    int: The value at position n for given k.\n    \"\"\"\n    result = 0\n    denominator = factorial(k)\n    numerator = factorial(k - n)\n    for i in range(n + 1, n + k + 1):\n        if i % (n + 1) == 0:\n            result += ((i - n) * denominator // numerator) % 1000000007\n    \n    return result % 1000000007\n\ndef factorial(num):\n    \"\"\"Calculates the factorial of num.\"\"\"\n    fact = 1\n    for i in range(1, num + 1):\n        fact *= i\n    return fact\n\n# Test Cases\nprint(zigzag(4, 3)) # Expected output: 5\nprint(zigzag(4, 2)) # Expected output: 4\nprint(zigzag(3, 1)) # Expected output: 1",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(length, width):\n    \"\"\"\n    Counts the number of square units in an n x m rectangular grid.\n    \n    Parameters:\n    length (int): The length of the longer side of the rectangle.\n    width (int): The length of the shorter side of the rectangle.\n    \n    Returns:\n    int: The total number of square units in the rectangle.\n    \"\"\"\n    # Calculate the area of the largest possible square that can fit in the rectangle\n    max_square_side = min(length, width)\n    # Multiply the max square's area with its side and add the result for each size from 1 to max square side\n    total_squares = sum(i**2 * i for i in range(1, max_square_side + 1))\n    return total_squares",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "from itertools import accumulate\nfrom math import factorial\n\ndef find_ways(length):\n    \"\"\"\n    This function calculates the number of ways to arrange numbers from 0 to N-1 such that their sum is divisible by M,\n    where N and M are both positive integers.\n    \n    Parameters:\n    length (int): The desired length of the sequence.\n    \n    Returns:\n    int: The total number of valid sequences modulo 10^9 + 7.\n    \"\"\"\n    MOD = 10**9 + 7\n    \n    # Calculate C(N+M-1, M)\n    combination = factorial(length + length - 1) // (factorial(length - 1) * factorial(length))\n    \n    # Check if the result is already within bounds, if not calculate it using Fermat's Little Theorem\n    if combination > MOD:\n        return (combination % MOD)\n    else:\n        return combination\n\n# Test cases\nassert find_ways(4) == 2, \"Test case 1 failed\"\nassert find_ways(6) == 5, \"Test case 2 failed\"\nassert find_ways(8) == 14, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(binary_string):\n    # Check if the length of the binary_string is odd\n    if len(binary_string) % 2 != 0:\n        return \"No\"\n    else:\n        for char in binary_string:\n            # If character is not '0' and '1', it's not a binary string\n            if char != '0' and char != '1':\n                return \"No\"\n        return \"Yes\"\n\n# Test cases\nprint(check(\"01010101010\"))  # Expected output: Yes\nprint(check(\"name0\"))       # Expected output: No\nprint(check(\"101\"))         # Expected output: Yes",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def minimum_Length(s):\n    \"\"\"\n    Removes occurrences of only one character in a given string 's' and returns its minimized length.\n    \n    :param s: A string consisting of lowercase English letters.\n    :return: The minimized length of the string after removing specified characters.\n    \"\"\"\n    unique_chars = set()\n    for char in s:\n        if s.count(char) > 1:\n            unique_chars.add(char)\n    return len(s) - len(unique_chars)\n\n# Test cases\nassert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef first_Element(arr, n, k):\n    count = defaultdict(int)\n    for i in range(n):\n        count[arr[i]] += 1\n    for j in range(n-1, -1, -1):\n        if count[arr[j]] == k:\n            return arr[j]\n    return -1\n\n# Test cases\nprint(first_Element([0,1,2,3,4,5],6,1)) # Expected output: 0\nprint(first_Element([1,2,1,3,4],5,2)) # Expected output: 1\nprint(first_Element([2,3,4,3,5,7,1,2,3,5],10,2)) # Expected output: 2",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'unique_Characters' is not defined",
      "Test 2: FAIL - name 'unique_Characters' is not defined",
      "Test 3: FAIL - name 'unique_Characters' is not defined"
    ],
    "generated_code": "def is_unique_characters(s):\n    \"\"\"\n    Check if all characters in the string 's' are unique.\n    \n    Args:\n    s (str): The input string to check for uniqueness of characters.\n    \n    Returns:\n    bool: True if all characters are unique, False otherwise.\n    \"\"\"\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return False\n        char_set.add(char)\n    return True",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_column(nested_list, col_index):\n    # Extract columns except the one at 'col_index'\n    result = [inner_list[:col_index] + inner_list[col_index+1:] for inner_list in nested_list]\n    return result",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_ap(n, a, d):\n    # Calculate nth term in arithmetic progression using formula an = a + (n-1)d\n    return a + (n - 1) * d",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef count_Rectangles(r):\n    if r == 0:\n        return 0\n    total_rectangles = int(math.pi * r**2)\n    # The formula for counting rectangles is based on considering each point inside the circle as potential corners.\n    return total_rectangles // 4",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(angle1, angle2):\n    # Calculate and return the third angle\n    return 180 - angle1 - angle2",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_max(tuple_records):\n    # Initialize max_value with the first element's max value in the first tuple\n    max_value = max([max(record) for record in tuple_records])\n    return max_value",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport operator\n\ndef moddiv_list(a: List[int], b: List[int]) -> List[int]:\n    return list(map(lambda x, y: x % y if y else None, a, b))",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "def check_solution(a, b, c):\n    # Calculate the discriminant\n    delta = b**2 - 4*a*c\n    \n    # Calculate the two roots using the quadratic formula\n    root1 = (-b + delta**0.5) / (2 * a)\n    root2 = (-b - delta**0.5) / (2 * a)\n    \n    # Check if one root is exactly twice the other\n    if abs(root1 - 2*root2) < 1e-6:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test cases\nprint(check_solution(1,3,2))  # Expected output: Yes\nprint(check_solution(1,2,3))  # Expected output: No\nprint(check_solution(1,-5,6)) # Expected output: No",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_carol(n):\n    if n == 1:\n        return 1\n    else:\n        return pow(4, n - 1) * ((n + 1)**2 - 3) // 6\n\n# Test cases\nprint(get_carol(2))  # Expected output: 7\nprint(get_carol(4))  # Expected output: 223\nprint(get_carol(5))  # Expected output: 959",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lst):\n    # Use list comprehension to filter out empty lists\n    return [item for item in lst if item]",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(nums):\n    from collections import Counter\n    count = Counter(nums)\n    return count.most_common(1)[0][0]\n\n# Test cases\nprint(max_occurrences([1,2,3,1,2,3,12,4,2]))  # Output: 2\nprint(max_occurrences([1,2,6,7,0,1,0,1,0]))   # Output: 1,0\nprint(max_occurrences([1,2,3,1,2,4,1]))       # Output: 1",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_K_element(tuples_list, k):\n    # Add k to each element in each tuple and create new tuples\n    result = [tuple(x + k for x in tup) for tup in tuples_list]\n    return result\n\n# Test Cases\nprint(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)) # Expected output: [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nprint(add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)) # Expected output: [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nprint(add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)) # Expected output: [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_flip_to_make_string_alternate(binary_str):\n    # Initialize variables for tracking the flips and current flip status\n    total_flips = 0\n    flip_status = False\n    \n    # Iterate through each character in the binary string\n    for char in binary_str:\n        if char == '0':\n            if flip_status:\n                total_flips += 1\n            flip_status = not flip_status\n        else:\n            if not flip_status:\n                total_flips += 1\n            flip_status = not flip_status\n            \n    return total_flips\n\n# Test cases\nprint(min_flip_to_make_string_alternate(\"0001010111\"))  # Expected output: 2\nprint(min_flip_to_make_string_alternate(\"001\"))         # Expected output: 1\nprint(min_flip_to_make_string_alternate(\"010111011\"))   # Expected output: 2",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(n):\n    \"\"\"\n    Count the number of digits in a given non-negative integer.\n    \n    Parameters:\n    n (int): A non-negative integer whose digits are to be counted.\n    \n    Returns:\n    int: The number of digits in the given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return len(str(n))\n\n# Test Cases\nassert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef adjacent_num_product(numbers: List[int]) -> int:\n    \"\"\"\n    Finds the maximum product of two adjacent numbers in the list.\n    \n    Parameters:\n    numbers (List[int]): A list of integers.\n    \n    Returns:\n    int: The maximum product of two adjacent numbers.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(numbers) - 1):\n        current_product = numbers[i] * numbers[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    \"\"\"\n    This function checks whether a given binary tree is balanced.\n    A tree is considered balanced if for each node in the tree,\n    the difference between the heights of its left and right subtrees is no more than 1.\n    \n    Parameters:\n    root (TreeNode): The root node of the binary tree.\n    \n    Returns:\n    bool: True if the tree is balanced, False otherwise.\n    \"\"\"\n    if root is None:\n        return True\n    \n    # Recursively determine if the left and right subtrees are balanced\n    left_balanced = is_tree_balanced(root.left)\n    right_balanced = is_tree_balanced(root.right)\n    \n    # If both subtrees are balanced, check if the current subtree can be balanced\n    return abs(height(root.left) - height(root.right)) <= 1 and left_balanced and right_balanced\n\ndef height(node):\n    \"\"\"Helper function to compute the height of the tree.\"\"\"\n    if node is None:\n        return 0\n    else:\n        return max(height(node.left), height(node.right)) + 1",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def repeat_tuples(tup, n):\n    # Repeat the tuple 'n' number of times and convert it into a list\n    result = [tup] * n\n    # Convert the list back into a tuple\n    return tuple(result)\n\n# Test cases to verify the correctness of the function\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3)), \"Test case 1 failed\"\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2)), \"Test case 2 failed\"\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4)), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cuboid(length, width, height):\n    return 2 * (length + width) * height",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def float_sort(tup_list):\n    return sorted(tup_list, key=lambda x: float(x[1]))",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from typing import List\n\ndef smallest_missing(nums: List[int], lower_bound: int, upper_bound: int) -> int:\n    \"\"\"\n    Finds the smallest missing positive integer from an array of integers.\n    \n    :param nums: A list of integers sorted in ascending order with all elements being distinct.\n    :param lower_bound: The lower bound for the range of possible missing numbers.\n    :param upper_bound: The upper bound for the range of possible missing numbers.\n    :return: The smallest missing positive integer within the specified bounds.\n    \"\"\"\n    for i in range(lower_bound, upper_bound + 1):\n        if i not in nums:\n            return i\n\n# Check function to verify the correctness of the solution\ndef check():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\n    assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0\n    print(\"All test cases passed.\")\n\ncheck()",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef heap_assending(arr):\n    return heapq.nsmallest(len(arr), arr)",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - maximum recursion depth exceeded while calling a Python object",
      "Test 2: FAIL - maximum recursion depth exceeded while calling a Python object",
      "Test 3: FAIL - maximum recursion depth exceeded while calling a Python object"
    ],
    "generated_code": "def permute_string(s):\n    result = []\n    def backtrack(path):\n        if not s:\n            result.append(path)\n        for i in range(len(s)):\n            backtrack(path + s[i:i+1])\n    backtrack('')\n    return result",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef round_num(num, base):\n    return int(base * round(float(num) / base))",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_replica(tupl):\n    count_dict = {}\n    result_list = []\n    \n    for item in tupl:\n        if item not in count_dict:\n            count_dict[item] = 0\n        count_dict[item] += 1\n        \n    for key, value in count_dict.items():\n        if value > 1:\n            continue\n        else:\n            result_list.append(key)\n            \n    return tuple(result_list)\n\n\n# Test Cases\nprint(remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))) # Expected output: (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nprint(remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))) # Expected output: (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nprint(remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))) # Expected output: (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Char(str1, char):\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] != char:\n            new_str += str1[i]\n    return new_str\n\n# Test cases\nprint(remove_Char(\"aba\", 'a'))  # Expected output: \"b\"\nprint(remove_Char(\"toggle\", 'g'))  # Expected output: \"tole\"\nprint(remove_Char(\"aabbc\", 'b'))  # Expected output: \"aac\"",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def move_first(lst):\n    # Move the last element to the front of the list.\n    lst.append(lst.pop())\n    return lst",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    # Calculate the total surface area of a cuboid\n    return 2 * (length*width + width*height + length*height)",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multi_list(m, n):\n    return [[i * j for i in range(n)] for j in range(m)]",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])\n\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == [('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == [('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == [('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rotation_count(arr):\n    low = 0\n    high = len(arr) - 1\n    \n    while arr[low] >= arr[high]:\n        if high == low:\n            break\n        \n        mid = (low + high) // 2\n        \n        if arr[mid] <= arr[-1]:\n            high = mid\n        else:\n            low = mid + 1\n    \n    return low\n\n# Test cases\nprint(find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])) # Expected output: 3\nprint(find_rotation_count([8, 9, 10, 2, 5, 6])) # Expected output: 3\nprint(find_rotation_count([2, 5, 6, 8, 9, 10])) # Expected output: 0",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    \"\"\"\n    Toggle all odd bits of a given number.\n    \n    Parameters:\n    n (int): The integer whose odd bits are to be toggled.\n    \n    Returns:\n    int: The result after toggling all odd bits of 'n'.\n    \"\"\"\n    # Create an empty list to store the toggled bits\n    toggled_bits = []\n    # Loop through each bit in the binary representation of n\n    for i, digit in enumerate(bin(n)[2:]):\n        # Check if the bit is set (odd position)\n        if (i + 1) % 2 != 0:\n            toggled_bits.append('1' if digit == '0' else '0')\n        else:\n            toggled_bits.append(digit)\n    \n    # Convert the list back to an integer and return it\n    return int(''.join(toggled_bits), 2)\n\n# Test cases to verify the correctness of the function\nassert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_Of_Smallest(n,arr):\n    min_value = arr[0]\n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] == min_value:\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - maximum recursion depth exceeded in comparison",
      "Test 2: FAIL - maximum recursion depth exceeded in comparison",
      "Test 3: FAIL - maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_count(bracket_string):\n    balance = 0\n    total_swaps = 0\n    \n    # Iterate through each character in the string\n    for char in bracket_string:\n        if char == '[':\n            balance += 1  # Open bracket incrementing balance\n        elif char == ']':\n            balance -= 1  # Close bracket decrementing balance\n        \n        # If balance becomes negative, it means we need to add a swap\n        if balance < 0:\n            total_swaps += abs(balance)\n            balance = 0  # Reset balance as we have made one swap\n    \n    # Add remaining swaps if balance is positive\n    total_swaps += balance // 2\n    \n    return total_swaps",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_or_odd(hex_num):\n    # Convert the hex number to decimal and then check if it's divisible by 2.\n    dec_value = int(hex_num, 16)\n    return \"Odd\" if dec_value % 2 != 0 else \"Even\"\n\n# Test cases\nprint(even_or_odd(\"AB3454D\"))  # Expected output: Odd\nprint(even_or_odd(\"ABC\"))      # Expected output: Even\nprint(even_or_odd(\"AAD\"))      # Expected output: Odd",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n and returns the highest power of 2 that is less than or equal to n.\n    \n    Parameters:\n    n (int): The input number.\n    \n    Returns:\n    int: The highest power of 2 less than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return 2 ** ((n - 1).bit_length())\n\n# Check function with provided data points\nassert highest_Power_of_2(10) == 8, \"Test case 1 failed\"\nassert highest_Power_of_2(19) == 16, \"Test case 2 failed\"\nassert highest_Power_of_2(32) == 32, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_lucas(n):\n    # Base case for Lucas numbers: L0 = 2 and L1 = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize variables to store the first two Lucas numbers\n    prev, curr = 2, 1\n    \n    # Compute Lucas numbers iteratively\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    \n    return curr",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_string(lst, s):\n    return [s + str(item) for item in lst]",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def convert_list_dictionary(list1, list2, dict_values):\n    # Use zip to pair elements from both lists and combine into a single dictionary\n    combined_dict = {}\n    for item1, item2 in zip(list1, list2):\n        combined_dict[item1] = {item2: dict_values[list2.index(item2)]}\n    return combined_dict\n\n\n# Test the function with provided data points\nprint(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\nprint(convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"], [\"python\",\"program\",\"language\",\"programs\"], [100,200,300,400]))\nprint(convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"], [\"java\",\"C\",\"C++\",\"DBMS\"], [10,20,30,40]))",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import math\n\ndef isPrime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef get_max_sum(n):\n    \"\"\"\n    Calculate the maximum sum of values generated by repeatedly applying the function f(n).\n    \n    Parameters:\n    n (int): The input integer.\n    \n    Returns:\n    int: The maximum sum possible.\n    \"\"\"\n    # Implementing memoization for optimization\n    memo = {}\n    def helper(x):\n        if x < 2: \n            return 0\n        elif x not in memo:\n            ans = max(helper(x // 2), helper(x // 3), helper(x // 4), helper(x // 5))\n            memo[x] = ans + x\n        return memo[x]\n    \n    return helper(n)\n\n# Check function with provided data points\nassert get_max_sum(60) == 106, \"Test case 1 failed\"\nassert get_max_sum(10) == 12, \"Test case 2 failed\"\nassert get_max_sum(2) == 2, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - object of type 'int' has no len()",
      "Test 2: FAIL - object of type 'int' has no len()",
      "Test 3: FAIL - object of type 'int' has no len()"
    ],
    "generated_code": "def max_length_list(lst):\n    return lst.index(max(lst, key=len)), [max(i, key=len) for i in lst if len(i) == max(len(j) for j in lst)]",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(test_tup):\n    \"\"\"\n    This function checks if all elements in the input tuple 'test_tup' are unique.\n    \n    Args:\n        test_tup (tuple): The tuple to be checked for uniqueness.\n        \n    Returns:\n        bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True\n\n# Check function with provided data points\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_char(s):\n    \"\"\"\n    This function checks if the input string 's' starts and ends with the same character.\n    \n    Args:\n        s (str): The string to be checked.\n        \n    Returns:\n        str: \"Valid\" if the string starts and ends with the same character, otherwise \"Invalid\".\n    \"\"\"\n    # Check if the first character is equal to the last character of the string\n    start_end_match = bool(re.match('^(.).*\\\\1$', s))\n    # Return \"Valid\" if match is found, else return \"Invalid\"\n    return \"Valid\" if start_end_match else \"Invalid\"\n\n# Test the function with provided data points\nprint(check_char(\"abba\"))  # Expected output: \"Valid\"\nprint(check_char(\"a\"))     # Expected output: \"Valid\"\nprint(check_char(\"abcd\"))  # Expected output: \"Invalid\"",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_numbers(a, b, c):\n    # Sort the input numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    \n    # Return the middle number which is the median\n    return float(sorted_nums[1])\n\n# Test cases to verify the correctness of the function\nprint(median_numbers(25,55,65))   # Expected output: 55.0\nprint(median_numbers(20,10,30))   # Expected output: 20.0\nprint(median_numbers(15,45,75))   # Expected output: 45.0",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: invalid literal for int() with base 10: '['"
    ],
    "generated_code": "def sum_of_digits(numbers):\n    return sum(sum(map(int, str(num))) for num in numbers)\n\n# Test cases\nprint(sum_of_digits([10,2,56])) # Expected output: 14\nprint(sum_of_digits([[10,20,4,5,'b',70,'a']])) # Expected output: 19\nprint(sum_of_digits([10,20,-4,5,-70])) # Expected output: 19",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def bitwise_xor(tuple1, tuple2):\n    # Perform XOR on corresponding elements of the two tuples and return the result as a new tuple.\n    return tuple([a ^ b for a, b in zip(tuple1, tuple2)])\n\n# Test the function with provided data points\nprint(bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)))  # Expected output: (15, 6, 5, 10)\nprint(bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)))  # Expected output: (13, 6, 3, 14)\nprint(bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)))  # Expected output: (11, 2, 13, 13)",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_freq(lst):\n    from collections import Counter\n    # Convert each tuple to a set and then use Counter to count occurrences.\n    result = [len(set(tup)) for tup in lst]\n    return sum(result)",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_nested_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tuple(x + y for x, y in zip(tup1[i], tup2[i])))\n    return tuple(result)\n\n# Test Cases\nprint(add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\nprint(add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))))\nprint(add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))))",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ncr_modp(n, r, p):\n    def mod_factorial(num, p):\n        result = 1\n        for i in range(2, num + 1):\n            while num % i == 0 and gcd(i, p) > 1:\n                result *= i\n                num //= i\n        return result\n\n    from math import comb\n    return comb(n, r) % p\n\nfrom functools import reduce\n\n# Helper function to calculate greatest common divisor\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    pattern = r'^http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$'\n    match = re.match(pattern, url)\n    return bool(match)\n\n# Test cases\nprint(is_valid_URL(\"https://www.google.com\"))  # Expected output: True\nprint(is_valid_URL(\"https:/www.gmail.com\"))   # Expected output: False\nprint(is_valid_URL(\"https:// www.redit.com\")) # Expected output: False",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_tuplex' is not defined",
      "Test 2: FAIL - name 'check_tuplex' is not defined",
      "Test 3: FAIL - name 'check_tuplex' is not defined"
    ],
    "generated_code": "def check_tuple_exists(tup, x):\n    return x in tup",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(number):\n    # Convert the number to binary string and count '1's\n    ones_count = bin(number).count('1')\n    \n    if ones_count % 2 == 0:\n        result = \"Even Parity\"\n    else:\n        result = \"Odd Parity\"\n    \n    return result",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'rearrange_bigger' is not defined",
      "Test 2: FAIL - name 'rearrange_bigger' is not defined",
      "Test 3: FAIL - name 'rearrange_bigger' is not defined"
    ],
    "generated_code": "from math import factorial as f\nfrom itertools import permutations\n\ndef find_permutations(num):\n    # Generate all unique permutations of the input number's digits\n    return set(int(\"\".join(p)) for p in permutations(str(num)))\n\ndef is_bigger(number1, number2):\n    \"\"\"\n    Compares two numbers and returns True if number2 is a greater permutation than number1.\n    \n    :param number1: int - The first number.\n    :param number2: int - The second number to compare with.\n    :return: bool - Returns True if number2 is a greater permutation than number1, False otherwise.\n    \"\"\"\n    perm_set = find_permutations(number1)\n    return number2 in perm_set\n\n# Check function with provided data points\nassert is_bigger(12, 21) == True, \"Test case 1 failed\"\nassert is_bigger(10, 2) == False, \"Test case 2 failed\"\nassert is_bigger(102, 210) == True, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - index out of range",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - index out of range"
    ],
    "generated_code": "from typing import List\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    min_heap = []\n    result = []\n\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            sum_val = nums1[i] + nums2[j]\n            if not min_heap or -min_heap[0][0] > sum_val:\n                heapq.heappush(min_heap, (-sum_val, i, j))\n            else:\n                break\n\n    while k > 0:\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        k -= 1\n\n    return result",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_product_tuple(tuples_list):\n    # Calculate the product for each tuple pair and return the smallest one\n    return min(tuple[0] * tuple[1] for tuple in tuples_list)",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_val(lst):\n    # Convert all elements to strings for consistent comparison\n    lst = [str(i) for i in lst]\n    return min(lst)",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    # Split the input string into words based on underscore delimiter.\n    words = snake_str.split('_')\n    # Capitalize each word except the first one and join them together.\n    camel_case_str = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_case_str\n\n# Test cases\nprint(snake_to_camel('android_tv'))  # Should print 'AndroidTv'\nprint(snake_to_camel('google_pixel'))  # Should print 'GooglePixel'\nprint(snake_to_camel('apple_watch'))  # Should print 'AppleWatch'",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(numbers):\n    # Remove all odd numbers from the list\n    return [num for num in numbers if num % 2 == 0]\n\n# Test cases\nprint(remove_odd([1,2,3]))  # Expected output: [2]\nprint(remove_odd([2,4,6]))  # Expected output: [2,4,6]\nprint(remove_odd([10,20,3]))  # Expected output: [10,20]",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_nth_element(lst, n):\n    return [tup[n] for tup in lst]",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(seq1, seq2):\n    # Check if any element of the first sequence is present in the second sequence\n    return any(x in seq2 for x in seq1)",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_Product(nums: List[int]) -> tuple:\n    if not nums or len(nums) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n\n    min_num = float('inf')\n    max_num = float('-inf')\n    second_max_num = float('-inf')\n\n    for num in nums:\n        if num <= 0:\n            # If current number is negative and it's larger than max_num,\n            # we can multiply it with either min_num or max_num\n            if num > max_num:\n                second_max_num = max_num\n                max_num = num\n            elif num > second_max_num:\n                second_max_num = num\n        else:\n            # For positive numbers, compare them directly\n            if num >= max_num:\n                max_num, second_max_num = num, max_num\n            elif num > second_max_num:\n                second_max_num = num\n\n    return (max_num, second_max_num)\n\n# Test cases\nprint(max_Product([1,2,3,4,7,0,8,4]))  # Expected output: (7, 8)\nprint(max_Product([0,-1,-2,-4,5,0,-6]))  # Expected output: (-4, -6)\nprint(max_Product([1,2,3]))  # Expected output: (2, 3)",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def breakSum(n):\n    if n <= 3:\n        return n\n    \n    # Recursive calls with reduced values\n    left = breakSum(n - 3)\n    right = breakSum(n - 2)\n    mid = breakSum(n - 1)\n    \n    # Calculate the final result by adding up the results of different ways of division\n    total_sum = left + right + mid + min(left, right, mid)\n    \n    return total_sum\n\n# Test cases\nprint(breakSum(12))  # Expected output: 13\nprint(breakSum(24))  # Expected output: 27\nprint(breakSum(23))  # Expected output: 23",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def group_tuples(tuples_list):\n    # Initialize an empty dictionary to store tuples as keys and their unique elements as values\n    result = {}\n    \n    for t in tuples_list:\n        # If the tuple is not already in the dictionary, initialize it with the first element\n        if t not in result:\n            result[t] = [t[0]]\n        else:\n            # Append the current tuple's second element to the value of its key\n            result[t].append(t[1])\n    \n    # Convert the dictionary values back into tuples\n    final_result = {k: tuple(v) for k, v in result.items()}\n    \n    return final_result.values()",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Max(Lists):\n    max_length = -1\n    result = []\n    \n    for lst in Lists:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            result = lst\n    \n    return result",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def round_and_sum(numbers):\n    # Round each number in the list to the nearest integer\n    rounded_numbers = [round(num) for num in numbers]\n    # Sum all the rounded numbers\n    total_sum = sum(rounded_numbers)\n    # Multiply the sum by the length of the original list\n    result = total_sum * len(numbers)\n    return result",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'cube_Sum' is not defined",
      "Test 2: FAIL - name 'cube_Sum' is not defined",
      "Test 3: FAIL - name 'cube_Sum' is not defined"
    ],
    "generated_code": "def cube_sum(n):\n    # Calculate the cube sum of first n even natural numbers\n    return sum([i**3 for i in range(2, 2*n+1, 2)])",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def concatenate_tuple(tup):\n    result = \"\"\n    for i in range(len(tup)):\n        if i > 0:\n            result += \"-\"\n        result += str(tup[i])\n    return result",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\n    total = sum([i**3 for i in range(1, n+1)])\n    average = total / n\n    return average",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef get_maxgold(matrix: List[List[int]], rows: int, cols: int) -> int:\n    dp = [[0] * (cols + 1) for _ in range(rows + 1)]\n    max_gold = 0\n    \n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            # Initialize value if cell is empty (i.e., not on the edge)\n            current_value = matrix[i-1][j-1]\n            \n            # If it's the first row or column, take the current cell's value\n            if i == 1 or j == 1:\n                dp[i][j] = current_value\n            \n            else:\n                # Calculate the maximum gold obtainable from each direction and choose the highest\n                up = dp[i - 1][j]\n                left = dp[i][j - 1]\n                if i != 1 or j != 1:\n                    top_left = dp[i - 1][j - 1]\n                \n                dp[i][j] = current_value + max(up, left, top_left)\n            \n            # Update global max_gold whenever a new maximum is found\n            max_gold = max(max_gold, dp[i][j])\n    \n    return max_gold",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_rear(strings_tuple):\n    # Extracting elements from the last position of each string in the tuple\n    result = [string[-1] for string in strings_tuple]\n    return result\n\n# Test cases\nprint(extract_rear(('Mers', 'for', 'Vers')))  # Expected output: ['s', 'r', 's']\nprint(extract_rear(('Avenge', 'for', 'People')))  # Expected output: ['e', 'r', 'e']\nprint(extract_rear(('Gotta', 'get', 'go')))  # Expected output: ['a', 't', 'o']",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_in_list(lst, element):\n    return sum(1 for sublist in lst if element in sublist)\n\n# Test cases\nprint(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)) # Output should be 3\nprint(count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A')) # Output should be 3\nprint(count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E')) # Output should be 1",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import re\n\ndef change_date_format(date_str):\n    \"\"\"\n    Converts a date from \"yyyy-mm-dd\" format to \"dd-mm-yyyy\".\n    \n    Parameters:\n    - date_str (str): The date string in \"yyyy-mm-dd\" format.\n    \n    Returns:\n    - str: The converted date string in \"dd-mm-yyyy\" format.\n    \"\"\"\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'  # Regex for matching year-month-day format\n    match = re.search(pattern, date_str)\n    if match:\n        year, month, day = map(int, [match.group(1), match.group(2), match.group(3)])\n        return f'{day}-{month}-{year}'\n    else:\n        raise ValueError('Invalid date format')\n\n# Test Cases\nassert change_date_format(\"2026-01-02\") == '02-01-2026', \"Test case 1 failed\"\nassert change_date_format(\"2020-11-13\") == '13-11-2020', \"Test case 2 failed\"\nassert change_date_format(\"2021-04-26\") == '26-04-2021', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # Put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        gap //= 2\n    \n    return arr\n\n# Test cases\nprint(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]))  # Should print [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nprint(shell_sort([24, 22, 39, 34, 87, 73, 68]))          # Should print [22, 24, 34, 39, 68, 73, 87]\nprint(shell_sort([32, 30, 16, 96, 82, 83, 74]))          # Should print [16, 30, 32, 74, 82, 83, 96]",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def and_tuples(tup1, tup2):\n    # Extracting elements at the same index from both tuples\n    result = tuple(a & b for a, b in zip(tup1, tup2))\n    return result",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola given its coefficients a, b, and c.\n    \n    Parameters:\n    a (int): Coefficient for x^2 term.\n    b (int): Coefficient for x term.\n    c (int): Constant term.\n    \n    Returns:\n    float: The directrix value of the parabola.\n    \"\"\"\n    return -a * b ** 2 / (-4 * a + 3) if -4 * a + 3 != 0 else None",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_element(list1, list2):\n    return bool(set(list1) & set(list2))",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def median_trapezium(a, b, c):\n    # Calculate the lengths of all three sides\n    x = (a + b) / 2\n    y = a - x\n    z = c - x\n    \n    # Check if it's an isosceles trapezium\n    if x == y:\n        return y\n    elif x == z:\n        return z\n    else:\n        # If not, calculate and return the middle side length\n        return ((x * z) + y) / (x + z)",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(numbers_list, target_number):\n    for number in numbers_list:\n        if target_number < number:\n            return 'Yes, the entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_one(text):\n    if len(text) < 2:\n        return 'Not matched!'\n    \n    index = 0\n    while index < len(text)-1 and text[index] != 'a':\n        index += 1\n    \n    if index == len(text) - 1:\n        return 'Not matched!'\n    \n    found_b_count = 0\n    for i in range(index+1, len(text)):\n        if text[i] == 'b':\n            found_b_count += 1\n        \n        if found_b_count >= 1 and text[i] == 'a':\n            return 'Found a match!'\n        \n    return 'Not matched!'",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit(n):\n    # The last digit is obtained by taking n modulo 10\n    return n % 10\n\n# Test cases\nprint(last_Digit(123))   # Expected output: 3\nprint(last_Digit(25))    # Expected output: 5\nprint(last_Digit(30))    # Expected output: 0",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_nos(lst):\n    # Use list comprehension to filter out negative numbers from the input list\n    return [num for num in lst if num < 0]\n\n# Test cases\nprint(neg_nos([-1,4,5,-6]))  # Expected output: [-1, -6]\nprint(neg_nos([-1,-2,3,4]))  # Expected output: [-1, -2]\nprint(neg_nos([-7,-6,8,9]))  # Expected output: [-7, -6]",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(s):\n    return ''.join([c for c in s if not ord(c) % 2])",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef count_bidirectional(tuples_list):\n    # Create two dictionaries to store counts of each element in both directions\n    forward_count = defaultdict(int)\n    backward_count = defaultdict(int)\n\n    # Count the occurrences of each number in the list and its reverse in another dictionary\n    for pair in tuples_list:\n        forward_count[pair[0]] += 1\n        backward_count[pair[1]] += 1\n\n    total_pairs = 0\n\n    # Calculate the total number of bidirectional pairs\n    for count in forward_count.values():\n        if count > 1:\n            total_pairs += count * (count - 1) // 2\n\n    for count in backward_count.values():\n        if count > 1:\n            total_pairs += count * (count - 1) // 2\n\n    return total_pairs",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(numbers):\n    # Convert all elements in the list to strings and concatenate them together.\n    result = ''.join(str(num) for num in numbers)\n    return int(result)\n\n# Test cases\nprint(multiple_to_single([11, 33, 50]))  # Expected output: 113350\nprint(multiple_to_single([-1, 2, 3, 4, 5, 6]))  # Expected output: -123456\nprint(multiple_to_single([10, 15, 20, 25]))  # Expected output: 10152025",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_adverb_position(sentence):\n    \"\"\"\n    This function finds all occurrences of an adverb followed by a period '.' in the provided sentence.\n    It returns a tuple containing the starting position of each occurrence and the adverb itself.\n    \n    Parameters:\n    sentence (str): The input sentence to search for adverbs.\n    \n    Returns:\n    list of tuples: Each tuple contains the start index and the found adverb.\n    \"\"\"\n    import re\n    \n    # Regular expression pattern to match adverbs ending with '.', e.g., \"very\", \"good\".\n    pattern = r'(\\b\\w+\\.\\s+)(\\w+)'\n    \n    # Find all matches according to the pattern in the sentence.\n    matches = re.findall(pattern, sentence)\n    \n    return [(match[0], match[1]) for match in matches]\n\n# Example check function calls\nprint(find_adverb_position(\"clearly!! we can see the sky\"))  # Expected output: [(0, 7), ('clearly',)]\nprint(find_adverb_position(\"seriously!! there are many roses\"))  # Expected output: [(0, 9), ('seriously',)]\nprint(find_adverb_position(\"unfortunately!! sita is going to home\"))  # Expected output: [(0, 13), ('unfortunately',)]\n\n# Test the solution correctness using provided test cases\ndef check_solution():\n    assert find_adverb_position(\"clearly!! we can see the sky\") == [('clearly', 7)], \"Test case 1 failed\"\n    assert find_adverb_position(\"seriously!! there are many roses\") == [('seriously', 9)], \"Test case 2 failed\"\n    assert find_adverb_position(\"unfortunately!! sita is going to home\") == [('unfortunately', 13)], \"Test case 3 failed\"\n\ncheck_solution()",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(side_length):\n    \"\"\"\n    Calculate the total surface area of a cube given its side length.\n    \n    Parameters:\n    - side_length: The length of one side of the cube\n    \n    Returns:\n    - Total surface area of the cube as an integer.\n    \"\"\"\n    return 6 * side_length**2\n\n# Test the function with provided data points\nassert surfacearea_cube(5) == 150, \"Test case 1 failed\"\nassert surfacearea_cube(3) == 54, \"Test case 2 failed\"\nassert surfacearea_cube(10) == 600, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def positive_count(arr):\n    # Count the number of positive numbers in the array\n    count = sum(1 for x in arr if x > 0)\n    \n    # Calculate and return the ratio of positive numbers\n    return count / len(arr)\n\n# Test cases\nprint(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))  # Output should be approximately 0.54\nprint(positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))   # Output should be approximately 0.69\nprint(positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]))          # Output should be approximately 0.56",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def largest_neg(nums):\n    # Initialize max_negative with the smallest possible integer value\n    max_negative = float('-inf')\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Update max_negative if the current number is less than or equal to max_negative and is negative\n        if num <= max_negative and num < 0:\n            max_negative = num\n    \n    # Return the found maximum negative number\n    return max_negative",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def trim_tuple(tuples_list, k):\n    # Use map and filter functions to trim tuples\n    result = [tuple(i for i in t if len(t) > k) for t in tuples_list]\n    return result",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - tuple index out of range",
      "Test 2: FAIL - tuple index out of range",
      "Test 3: FAIL - tuple index out of range"
    ],
    "generated_code": "def index_multiplication(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        row_result = 1\n        for j in range(len(tup1[i])):\n            row_result *= tup1[i][j] * tup2[j][i]\n        result.append((row_result,))\n    return tuple(result)",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - argument of type 'int' is not iterable",
      "Test 3: FAIL - argument of type 'int' is not iterable"
    ],
    "generated_code": "def count_Occurrence(lst, tpl):\n    # Count occurrences using dictionary and set comprehension\n    occurrence_count = {item: sum(item in subtpl for subtpl in tpl) \n                        for item in lst}\n    return occurrence_count",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cube_nums(nums):\n    return list(map(lambda x: x ** 3, nums))",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_sum(n):\n    # Initialize the first two Perrin numbers\n    p1 = 3\n    p2 = 0\n    \n    if n < 2:\n        return p1 + p2 * n\n    \n    else:\n        psum = p1 + p2\n        prev_p1 = p1\n        prev_p2 = p2\n        \n        for _ in range(2, n):\n            next_p1 = prev_p2 + prev_p1\n            p1, p2 = prev_p1, next_p1\n            \n            if n >= len(str(next_p1)):\n                break\n                \n            psum += int(str(next_p1)[:n+1])\n        \n        return psum",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate distances between all pairs of points\n    dist1 = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n    dist2 = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    dist3 = ((x2 - x3)**2 + (y2 - y3)**2)**0.5\n    \n    # Check if sum of two sides is greater than third side\n    if abs(dist1 + dist2 < dist3) or abs(dist1 + dist3 < dist2) or abs(dist2 + dist3 < dist1):\n        return 'No'\n    else:\n        return 'Yes'",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_string(string_list, length):\n    return [s[-length:] for s in string_list]",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_whitespaces(input_string):\n    # Remove all whitespace characters from the input string\n    return re.sub(r'\\s+', '', input_string)\n\n# Test cases\nprint(remove_whitespaces(' Google    Flutter '))  # Expected output: 'GoogleFlutter'\nprint(remove_whitespaces(' Google    Dart '))     # Expected output: 'GoogleDart'\nprint(remove_whitespaces(' iOS    Swift '))       # Expected output: 'iOSSwift'",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def loss_amount(amount, price):\n    # Check if there is a loss\n    if amount > price:\n        # Calculate and return the loss amount\n        return amount - price\n    else:\n        # Return None indicating no loss\n        return None",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sumofFactors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_wordz(text):\n    # Check if the text contains 'z'\n    if 'z' in text:\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Test cases to verify the correctness of the function\nprint(text_match_wordz(\"pythonz.\"))   # Expected output: Found a match!\nprint(text_match_wordz(\"xyz.\"))      # Expected output: Found a match!\nprint(text_match_wordz(\"  lang  \"))  # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumb_number(month_num):\n    \"\"\"\n    Check if the given month number has 31 days.\n    \n    Parameters:\n    month_num (int): The month number (1-12).\n    \n    Returns:\n    bool: True if the month has 31 days, False otherwise.\n    \"\"\"\n    return month_num in [1, 3, 5, 7, 8, 10, 12]\n\n# Test Cases\nprint(check_monthnumb_number(5)) # Expected output: True\nprint(check_monthnumb_number(2)) # Expected output: False\nprint(check_monthnumb_number(6)) # Expected output: False",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min' is not defined",
      "Test 2: FAIL - name 'Find_Min' is not defined",
      "Test 3: FAIL - name 'Find_Min' is not defined"
    ],
    "generated_code": "def find_min(test_list):\n    min_length = float('inf')\n    result_sublist = []\n    \n    for sub in test_list:\n        if len(sub) < min_length:\n            min_length = len(sub)\n            result_sublist = sub\n    \n    return result_sublist\n\n# Test cases\nprint(find_min([[1],[1,2],[1,2,3]])) # Output: [1]\nprint(find_min([[1,1],[1,1,1],[1,2,7,8]])) # Output: [1, 1]\nprint(find_min(['x', 'x', 'y', 'z'])) # Output: ['x']",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length, width):\n    return length * width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_uppercase(s):\n    # Use regular expression to find and replace all uppercase letters with an empty string\n    return re.sub('[A-Z]', '', s)\n\n# Test cases to verify the correctness of the function\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos', \"Test case 1 failed\"\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo', \"Test case 2 failed\"\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    # Use list comprehension to iterate over sublists and select the first element of each\n    result = [sublist[0] for sublist in lst]\n    return result",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(s):\n    # Initialize counter for uppercase characters\n    up = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            up += 1\n            \n    return up",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import chain, combinations\n\ndef combinations_list(lst):\n    return [list(i) for i in chain.from_iterable(combinations(lst, r) for r in range(len(lst)+1))]\n\n# Test cases\nprint(combinations_list(['orange', 'red', 'green', 'blue']))\nprint(combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange']))\nprint(combinations_list(['red', 'green', 'black', 'orange']))",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_subarray_product(nums):\n    if not nums:\n        raise ValueError(\"Input list cannot be empty\")\n    \n    max_so_far = current_max = min_current_min = nums[0]\n    \n    for num in nums[1:]:\n        temp_max = max(num * current_max, num * min_current_min, num)\n        min_current_min = min(num * current_max, num * min_current_min, num)\n        current_max = temp_max\n        \n        if temp_max > max_so_far:\n            max_so_far = temp_max\n    \n    return max_so_far\n\n# Test cases\nprint(max_subarray_product([1, -2, -3, 0, 7, -8, -2]))  # Expected output: 112\nprint(max_subarray_product([6, -3, -10, 0, 2]))         # Expected output: 180\nprint(max_subarray_product([-2, -40, 0, -2, -3]))       # Expected output: 80",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_value(dict_obj, value_to_check):\n    return dict_obj.values() == {value_to_check}\n\n# Test Cases\nprint(check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 10)) # False\nprint(check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 12)) # True\nprint(check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 5)) # False",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(my_dict):\n    # Remove keys with None values from the dictionary\n    return {key: val for key, val in my_dict.items() if val is not None}\n\n# Test cases\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3': None}) == {'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3': None}) == {'c2': 'Green'}",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_peak() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_peak() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_peak() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef find_peak(nums: List[int]) -> int:\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[mid + 1]:\n            # If the middle element is greater than its next element,\n            # then the peak must be on the left side including mid.\n            right = mid\n        else:\n            # Otherwise, the peak must be on the right side excluding mid.\n            left = mid + 1\n    return left",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'decimal_to_Octal' is not defined",
      "Test 2: FAIL - name 'decimal_to_Octal' is not defined",
      "Test 3: FAIL - name 'decimal_to_Octal' is not defined"
    ],
    "generated_code": "def decimal_to_octal(decimal_number):\n    # Convert decimal number to octal using built-in int() function with base 8\n    octal_number = oct(decimal_number)\n    # Remove '0o' prefix from the octal string representation\n    result = octal_number[2:]\n    return result\n\n# Test cases\nprint(decimal_to_octal(10))  # Expected output: 12\nprint(decimal_to_octal(2))   # Expected output: 2\nprint(decimal_to_octal(33))  # Expected output: 41",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_product(arr, n):\n    # Initialize variables to store the current and next maximum products\n    current_max = arr[0]\n    next_max = arr[0]\n\n    result = float('-inf')  # Smallest possible integer value\n    \n    for i in range(1, n):\n        temp = current_max\n        \n        if arr[i] > next_max:\n            current_max = next_max\n            next_max = arr[i]\n            \n        else:\n            current_max = arr[i]\n        \n        # Update result with the maximum product found so far\n        result = max(result, temp * next_max)\n    \n    return result\n\n# Test cases\nprint(max_product([3, 100, 4, 5, 150, 6], 6))  # Output: 45000\nprint(max_product([4, 42, 55, 68, 80], 5))      # Output: 50265600\nprint(max_product([10, 22, 9, 33, 21, 50, 41, 60], 8))  # Output: 21780000",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport sys\n\ndef max_profit(prices: List[int], k: int) -> int:\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    \n    # Create an array to store the maximum profit for each transaction limit.\n    dp = [[-sys.maxsize] * (k + 1) for _ in range(n)]\n    \n    # Initialize the first row and column with zero.\n    for i in range(n):\n        dp[i][0] = 0\n    \n    # Fill the DP table.\n    for j in range(1, k + 1):\n        max_diff = -prices[0]\n        for i in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], prices[i] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j - 1] - prices[i])\n    \n    return dp[n - 1][k]\n\n# Test cases\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3))  # Output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2))     # Output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2))          # Output: 2",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not subscriptable"
    ],
    "generated_code": "def add_pairwise(tuples):\n    result = []\n    for i in range(len(tuples)):\n        result.append(tuples[i][0] + tuples[i][1])\n    return tuple(result)\n\n# Test cases\nprint(add_pairwise((1, 5, 7, 8, 10)))  # Expected output: (6, 12, 15, 18)\nprint(add_pairwise((2, 6, 8, 9, 11)))  # Expected output: (8, 14, 17, 20)\nprint(add_pairwise((3, 7, 9, 10, 12)))  # Expected output: (10, 16, 19, 22)",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_remainder(arr, n, m):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % m",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Consecutive(lst):\n    # Check if all elements in the list are unique\n    if len(set(lst)) == len(lst):\n        # Sort the list and check for consecutive numbers\n        sorted_lst = sorted(lst)\n        for i in range(1, len(sorted_lst)):\n            if sorted_lst[i] != sorted_lst[i-1] + 1:\n                return False\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: tuple_intersection() missing 1 required positional argument: 'unique_tuples'"
    ],
    "generated_code": "def tuple_intersection(tuples_list, unique_tuples):\n    \"\"\"\n    Find and return the intersection of tuples from the input list,\n    considering all possible orders of the same element as equal.\n    \n    Args:\n    tuples_list (list): A list of tuples.\n    unique_tuples (tuple): The target tuple to intersect with other tuples.\n    \n    Returns:\n    set: A set containing tuples that appear in both the input list and the target tuple.\n    \"\"\"\n    # Convert the target tuple into a set for efficient lookup\n    target_set = set(unique_tuples)\n    result = set()\n    \n    for tup in tuples_list:\n        # Check if each tuple appears in the target set after sorting its elements\n        if sorted(tup) in target_set:\n            result.add(tup)\n            \n    return result\n\n# Example usage:\nprint(tuple_intersection([[(3, 4), (5, 6), (9, 10), (4, 5)], ...]))  # Output: {(4, 5), (3, 4), (5, 6)}",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from collections import Counter\n\ndef sort_counter(c):\n    \"\"\"\n    Sorts a counter object by its values.\n    \n    Parameters:\n    c (Counter): The input counter object\n    \n    Returns:\n    list: A sorted list of tuples where each tuple contains a key and its corresponding count in ascending order of counts.\n    \"\"\"\n    return sorted(c.items(), key=lambda item: item[1])\n\n# Test cases\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250}) == [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250}) == [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Calculate the sum of the maximum and minimum values\n    total_sum = max_val + min_val\n    \n    return total_sum\n\n# Test cases\nprint(big_sum([1,2,3]))   # Expected output: 4\nprint(big_sum([-1,2,3,4]))  # Expected output: 3\nprint(big_sum([2,3,6]))    # Expected output: 8",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_lower(s):\n    \"\"\"\n    This function converts all uppercase letters in the input string 's' to lowercase and returns the modified string.\n    \n    Args:\n        s (str): The original string to be converted.\n        \n    Returns:\n        str: A new string with all characters in lowercase.\n    \"\"\"\n    return s.lower()",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(s):\n    return ''.join(char.upper() if char.islower() else char for char in s)",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(number):\n    # Convert the number to string and remove any trailing zeros.\n    number_str = str(abs(number))\n    # Return the first character of the string representation of the number.\n    return int(number_str[0])",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(s):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the character with the maximum count\n    max_char = \"\"\n    max_count = -1\n    for char, count in char_count.items():\n        if count > max_count:\n            max_char = char\n            max_count = count\n            \n    return max_char",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef is_subset_sum(nums: List[int], target: int, total: int) -> bool:\n    \"\"\"\n    Determines if there exists a subset within 'nums' whose elements add up exactly to 'total'.\n    \n    Args:\n    nums: A list of integers.\n    target: The target sum for the subset.\n    total: The total sum we want to achieve through the subset.\n    \n    Returns:\n    A boolean value indicating whether such a subset exists.\n    \"\"\"\n    # Initialize dp array where dp[i] will be true if there's a subset with sum i\n    dp = [False] * (total + 1)\n    dp[0] = True  # Base case: sum can always be achieved with an empty subset\n    \n    # Fill dp table in bottom-up manner\n    for num in nums:\n        for x in range(total, num - 1, -1): \n            dp[x] = dp[x] or dp[x - num]\n    \n    return dp[total]\n\n# Check function with provided data points\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef match(string_input):\n    \"\"\"\n    Searches for sequences where an uppercase letter is immediately followed by lowercase letters.\n    \n    Parameters:\n    - string_input (str): The input string to search through.\n    \n    Returns:\n    - str: \"Yes\" if such a sequence exists, otherwise returns \"No\".\n    \"\"\"\n    # Regular expression pattern to match uppercase followed by lowercase\n    pattern = '[A-Z][a-z]'\n    # Search for the pattern in the input string\n    result = re.search(pattern, string_input)\n    # If a match is found, return \"Yes\", else return \"No\"\n    return 'Yes' if result else 'No'\n\n# Test the function with provided data points\nprint(match(\"Geeks\"))  # Expected output: Yes\nprint(match(\"geeksforGeeks\"))  # Expected output: Yes\nprint(match(\"geeks\"))  # Expected output: No",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        if factorial(i) % x == 0:\n            return i\n        i += 1\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# Test Cases\nprint(first_Factorial_Divisible_Number(10)) # Expected output: 5\nprint(first_Factorial_Divisible_Number(15)) # Expected output: 5\nprint(first_Factorial_Divisible_Number(5)) # Expected output: 4",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_matching_tuple(tup1, tup2):\n    # Convert tuples into sets for comparison and difference operations\n    set1 = set(map(tuple, tup1))\n    set2 = set(map(tuple, tup2))\n\n    # Find elements in set1 that are not in set2\n    diff_set = set1 - set2\n    \n    # Convert back to list of tuples if needed\n    return [list(x) for x in diff_set]",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: largest_palindrome() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef largest_palindrome(nums: List[int]) -> int:\n    \"\"\"\n    Finds and returns the largest palindrome from an array of integers.\n    \n    Parameters:\n    nums (List[int]): The list of integers to search for palindromes.\n    \n    Returns:\n    int: The largest palindrome found in the list. If no palindrome is found, returns -1.\n    \"\"\"\n    def is_palindrome(num: int) -> bool:\n        \"\"\"Helper function to check if a number is a palindrome.\"\"\"\n        return str(num) == str(num)[::-1]\n    \n    max_palindrome = -1\n    for num in nums:\n        if is_palindrome(num) and num > max_palindrome:\n            max_palindrome = num\n            \n    return max_palindrome\n\n# Test cases\nprint(largest_palindrome([1, 232, 54545, 999991], 4))  # Expected output: 54545\nprint(largest_palindrome([1, 2, 3, 4, 5, 50], 6))     # Expected output: 5\nprint(largest_palindrome([1, 3, 7, 9, 45], 5))       # Expected output: 9",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the binomial probability of getting exactly k successes in n trials.\n    \n    Parameters:\n    - n (int): Number of trials.\n    - k (int): Number of successful outcomes.\n    - p (float): Probability of success on an individual trial.\n    \n    Returns:\n    float: Binomial probability of obtaining k successes.\n    \"\"\"\n    binom_coeff = math.comb(n, k)\n    prob = binom_coeff * (p ** k) * ((1 - p) ** (n - k))\n    return prob",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuples_list):\n    # Sort the list of tuples based on the second item in each tuple\n    sorted_tuples = sorted(tuples_list, key=lambda x: x[1])\n    return sorted_tuples\n\n# Test cases to verify the correctness of the solution\nassert sort_tuple([(1, 3), (3, 2), (2, 1)]) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)]) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)]) == [(4, 3), (6, 7), (3, 9)]",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def area_pentagon(side_length):\n    \"\"\"\n    Calculate the area of a regular pentagon given the side length.\n    \n    Parameters:\n    - side_length: The length of each side of the pentagon\n    \n    Returns:\n    - The area of the pentagon rounded to six decimal places\n    \"\"\"\n    # Area formula for a regular pentagon is (sqrt(5*(5+2*sqrt(5))) * s^2) / 4 where 's' is the side length\n    return round((math.sqrt(5 * (5 + 2 * math.sqrt(5))) * side_length ** 2) / 4, 6)\n\n# Test cases to verify the correctness of the function\nprint(area_pentagon(5))   # Expected output: 43.011935\nprint(area_pentagon(10))  # Expected output: 172.047740\nprint(area_pentagon(15))  # Expected output: 387.107415",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Largest(arr):\n    max_value = max(arr)\n    count = arr.count(max_value)\n    return count\n\n# Test cases\nprint(frequency_Of_Largest([1, 2, 3, 4, 4])) # Output: 2\nprint(frequency_Of_Largest([5, 6, 5])) # Output: 1\nprint(frequency_Of_Largest([2, 7, 7, 7])) # Output: 3",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef extract_symmetric(tuples_list):\n    symmetric_pairs = set()\n    \n    # Mapping each element to its complement in the tuple list\n    complements = defaultdict(list)\n    \n    for pair in tuples_list:\n        first, second = pair\n        complements[first].append(second)\n        complements[second].append(first)\n        \n    for elements in complements.values():\n        if len(elements) % 2 == 0 and len(elements) > 2:\n            midpoint = len(elements) // 2\n            symmetric_pair = tuple(sorted(elements[:midpoint] + elements[-(midpoint):]))\n            symmetric_pairs.add(symmetric_pair)\n            \n    return symmetric_pairs",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_gp(a, n, r):\n    # Calculate the sum of geometric progression using the formula\n    return a * ((1 - pow(r, n)) / (1 - r))",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_search(arr, x):\n    \"\"\"\n    Perform binary search on the sorted list `arr` to find if `x` is present.\n    \n    Parameters:\n    arr (list): A sorted list of elements.\n    x (int/float): The element to be searched for.\n    \n    Returns:\n    bool: True if `x` is found in `arr`, False otherwise.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def calculate_polygons(x_start, y_start, n_sides, n_points, increment):\n    polygons = []\n    angle_increment = 360 / n_sides\n    \n    for i in range(n_points):\n        current_angle = (i * angle_increment) + (angle_increment/2)\n        \n        if i == 0:\n            current_x = x_start\n            current_y = y_start\n            \n        elif i % 2 == 0:\n            current_x = current_x + (n_sides / 2) * math.sin(math.radians(current_angle))\n            current_y = current_y + (n_sides / 2) * math.cos(math.radians(current_angle))\n            \n        else:\n            current_x = current_x + (math.sin(math.radians(current_angle)) * n_sides / 2)\n            current_y = current_y - (math.cos(math.radians(current_angle)) * n_sides / 2)\n        \n        polygon = []\n        while len(polygon) < 6:\n            next_x = current_x + (math.sin(math.radians(current_angle + increment)) * n_sides / 2)\n            next_y = current_y - (math.cos(math.radians(current_angle + increment)) * n_sides / 2)\n            \n            polygon.append((next_x, next_y))\n            current_x = next_x\n            current_y = next_y\n        \n        polygons.append(polygon)\n    \n    return polygons\n\nimport math\n\nprint(calculate_polygons(1, 1, 4, 4, 3))\nprint(calculate_polygons(5, 4, 7, 9, 8))\nprint(calculate_polygons(9, 6, 4, 3, 2))",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_to_integer(binary_tuple):\n    # Convert the binary tuple to an integer using bin() and slicing\n    result = int(''.join(str(x) for x in binary_tuple), 2)\n    return str(result)\n\n# Test cases to verify the correctness of the solution\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(input_string):\n    # Remove all lowercase letters from the input string using regular expression\n    cleaned_string = re.sub('[a-z]', '', input_string)\n    return cleaned_string",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\nimport heapq\n\ndef heap_queue_smallest(nums, k):\n    # Transform nums into a min-heap in-place and remove the largest elements until k items remain\n    for i in range(k // 2 - 1, -1, -1):\n        heapify(nums)\n    for i in range(k - 1, -1, -1):\n        nums[0], nums[i] = nums[i], nums[0]  # Swap the root(maximum) with the last element\n        heapq._siftup(nums, 0)  # Restore the heap property after each swap\n        if i > 0:\n            heapq._siftdown(nums, 0, i)  # Restore the heap property after swapping\n    \n    return nums[:k]\n\n# Helper function to restore the max-heap property\ndef heapify(heap):\n    start = (len(heap) - 2) // 2\n    while start >= 0:\n        _siftdown(heap, start, len(heap) - 1)\n        start -= 1\n\n# Helper function to restore the max-heap property starting from index start up to end\ndef _siftdown(heap, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        swap = root\n        if heap[swap] < heap[child]:\n            swap = child\n        if child + 1 <= end and heap[swap] < heap[child + 1]:\n            swap = child + 1\n        if swap == root:\n            return\n        else:\n            heap[root], heap[swap] = heap[swap], heap[root]\n            root = swap\n\n# Check function with provided data points\nassert heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3) == [14, 22, 25]\nassert heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2) == [14, 22]\nassert heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 2",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'surfacearea_cone' is not defined",
      "Test 2: FAIL - name 'surfacearea_cone' is not defined",
      "Test 3: FAIL - name 'surfacearea_cone' is not defined"
    ],
    "generated_code": "import math\n\ndef surface_area_of_cone(radius, slant_height):\n    \"\"\"\n    Calculates the surface area of a cone given its radius and slant height.\n    \n    Parameters:\n    radius (float): The radius of the base of the cone.\n    slant_height (float): The slant height of the cone.\n    \n    Returns:\n    float: The surface area of the cone rounded to three decimal places.\n    \"\"\"\n    # Surface area formula for a cone = π * r * l + π * r^2\n    total_surface_area = math.pi * radius * slant_height + math.pi * radius ** 2\n    \n    return round(total_surface_area, 3)\n\n# Test cases to verify the correctness of the function\nprint(surface_area_of_cone(5, 12))  # Expected output: 282.743\nprint(surface_area_of_cone(10, 15)) # Expected output: 880.518\nprint(surface_area_of_cone(19, 17)) # Expected output: 2655.924",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef gcd(a, b):\n    # Use the built-in math.gcd function to calculate the greatest common divisor\n    return math.gcd(a, b)\n\n# Test cases\nprint(gcd(12, 17))  # Expected output: 1\nprint(gcd(4, 6))    # Expected output: 2\nprint(gcd(2, 9))    # Expected output: 1",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def diameter_circle(radius):\n    return 2 * radius * math.sqrt(2)",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(elements):\n    # Joining all elements in the list with spaces and returning the result as a single string.\n    return \" \".join(elements)",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def num_comm_div(x, y):\n    # Ensure x is not greater than y to avoid unnecessary iterations\n    if x > y:\n        x, y = y, x\n    # Loop from the smaller number down to 1\n    for i in range(y, 0, -1):\n        if x % i == 0 and y % i == 0:\n            return i\n    return 1",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(a, b):\n    return a % b",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_consecutive_nums(nums):\n    result = []\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if len(result) == 0 or current_sum != result[-1]:\n            result.append(current_sum)\n    return result",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_Of_Series(n):\n    # Calculate the sum of cubes for the first n natural numbers using the formula:\n    # sum = n * (n + 1) * (2*n + 1) / 6\n    return int(n * (n + 1) * (2 * n + 1) / 6)",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_order(arr):\n    # Move non-zero elements to the beginning and maintain order for those that remain\n    result = []\n    zero_count = 0\n    for num in arr:\n        if num != 0:\n            result.append(num)\n        else:\n            zero_count += 1\n    # Fill remaining positions with zeros\n    result.extend([0] * zero_count)\n    return result\n\n# Test the function\nprint(re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]))  # Expected output: [6, 8, 2, 3, 4, 1, 0, 0, 0]\nprint(re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]))  # Expected output: [4, 2, 7, 9, 12, 0, 0, 0, 0]\nprint(re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]))  # Expected output: [3, 11, 74, 14, 1, 2, 0, 0, 0]",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - permutation_coefficient() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - permutation_coefficient() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - permutation_coefficient() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def permutation_coefficient(p_n_k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \n    Args:\n    p_n_k (int): The number n and k.\n    \n    Returns:\n    int: The permutation coefficient of p(n, k).\n    \"\"\"\n    # Using formula for permutations: p(n,k) = n! / (n-k)!\n    from math import factorial\n    n, k = p_n_k\n    if k > n:\n        return 0\n    else:\n        numerator = factorial(n)\n        denominator = factorial(n - k)\n        return numerator // denominator",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(word_list, words_to_remove):\n    \"\"\"\n    Removes specified words from a given list of words.\n    \n    Parameters:\n    word_list (list): The original list of words.\n    words_to_remove (list): A list of words to be removed from the first list.\n    \n    Returns:\n    list: A new list with the specified words removed.\n    \"\"\"\n    return [word for word in word_list if word not in words_to_remove]",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'same_order' is not defined",
      "Test 2: FAIL - name 'same_order' is not defined",
      "Test 3: FAIL - name 'same_order' is not defined"
    ],
    "generated_code": "def is_same_order(list1, list2):\n    return sorted(list1) == sorted(list2)\n\n# Test cases\nprint(is_same_order([\"red\",\"green\",\"black\",\"orange\"], [\"red\",\"pink\",\"green\",\"white\",\"black\"])) # True\nprint(is_same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"], [\"white\",\"orange\",\"pink\",\"black\"])) # False\nprint(is_same_order([\"red\",\"green\",\"black\",\"orange\"], [\"red\",\"pink\",\"green\",\"white\",\"black\"])) # True",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def average_Odd(n):\n    total = sum(x for x in range(1, n+1) if x % 2 != 0)\n    return total / len(range(1, n+1) if n % 2 == 1 else list(range(1, n+1))[::2])",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def no_of_subsequences(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        prod = arr[i]\n        if prod < k:\n            count += 1\n            j = i + 1\n            while j < len(arr) and prod * arr[j] < k:\n                prod *= arr[j]\n                j += 1\n                count += 1\n    return count",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef find_Min_Sum(n):\n    # Find the smallest prime factor of n\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return i + n // i\n        i += 1\n    \n    # If n is greater than 1, it's a prime number itself\n    return n + 1",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_freq(tup):\n    freq_dict = {}\n    for item in tup:\n        if isinstance(item, int):\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n        elif isinstance(item, tuple):\n            for sub_item in item:\n                freq_dict[sub_item] = freq_dict.get(sub_item, 0) + 1\n    return freq_dict",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_str(tup, strg):\n    result = []\n    for item in tup:\n        result.append(item)\n        if len(result) < len(tup):\n            result.append(strg)\n    return result",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_elements(lst):\n    total_sum = sum(element for element in lst)\n    return total_sum",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef modular_sum(numbers: List[int], target_m: int, divisor: int) -> bool:\n    \"\"\"\n    Check if there exists a non-empty subset of numbers whose sum is divisible by divisor.\n    \n    :param numbers: List of integers representing the numbers in question.\n    :param target_m: Integer representing the divisor used for checking divisibility.\n    :param divisor: Integer representing the target modulo value.\n    :return: Boolean indicating whether such a subset exists.\n    \"\"\"\n    num_set = set()\n    mod_sum = 0\n    \n    for number in numbers:\n        mod_sum += number % divisor\n        if mod_sum == 0:\n            return True\n        elif mod_sum not in num_set and (mod_sum + divisor) % divisor != 0:\n            num_set.add(mod_sum)\n    \n    return False",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def radix_sort(lst):\n    max_num = max(lst)\n    exp = 1\n    while max_num // exp > 0:\n        count_arr = [0] * 10\n        for i in lst:\n            digit = (i // exp) % 10\n            count_arr[digit] += 1\n        for i in range(1, len(count_arr)):\n            count_arr[i] += count_arr[i - 1]\n        output_lst = [0] * len(lst)\n        for i in reversed(range(len(lst))):\n            digit = (lst[i] // exp) % 10\n            output_lst[count_arr[digit] - 1] = lst[i]\n            count_arr[digit] -= 1\n        lst[:] = output_lst[:]\n        exp *= 10\n    return lst",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(nums):\n    max_num = nums[0]  # Initialize max_num with the first element of the list\n    for num in nums:\n        if num > max_num:\n            max_num = num  # Update max_num if current number is greater\n    return max_num",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sqrt_root(n):\n    \"\"\"\n    Finds and returns the square root of a given non-negative integer n.\n    \n    Parameters:\n    n (int): A non-negative integer whose square root is to be calculated.\n    \n    Returns:\n    int: The square root of the input integer n.\n    \"\"\"\n    return int(n ** 0.5)\n\n# Test cases to verify the correctness of the function\nassert sqrt_root(4) == 2, \"Test case 1 failed\"\nassert sqrt_root(16) == 4, \"Test case 2 failed\"\nassert sqrt_root(400) == 20, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sqrt' is not defined",
      "Test 2: FAIL - name 'sqrt' is not defined",
      "Test 3: FAIL - name 'sqrt' is not defined"
    ],
    "generated_code": "def volume_tetrahedron(sidelength):\n    \"\"\"\n    Calculate the volume of a regular tetrahedron given its side length.\n    \n    :param sidelength: float, the length of one edge of the tetrahedron.\n    :return: float, the volume of the tetrahedron.\n    \"\"\"\n    return (sidelength ** 3) / (6 * sqrt(2))",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef get_lcm(numbers):\n    def lcm(x, y):\n        return x * y // math.gcd(x, y)\n    \n    result = numbers[0]\n    for number in numbers[1:]:\n        result = lcm(result, number)\n    return result\n\n# Test cases\nprint(get_lcm([2, 7, 3, 9, 4])) # Should print 252\nprint(get_lcm([1, 2, 8, 3]))     # Should print 24\nprint(get_lcm([3, 8, 4, 10, 5])) # Should print 120",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if all sides of the triangle are equal\n    return len(set([a, b, c])) == 1",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lbs(arr):\n    n = len(arr)\n    increasing_subseq = [1] * n\n    decreasing_subseq = [1] * n\n    \n    # Calculate increasing subsequences\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing_subseq[i] = max(increasing_subseq[i], increasing_subseq[j] + 1)\n                \n    # Calculate decreasing subsequences\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] < arr[j]:\n                decreasing_subseq[i] = max(decreasing_subseq[i], decreasing_subseq[j] + 1)\n                \n    # Find the maximum length of bitonic subsequence\n    ans = 0\n    for i in range(n):\n        ans = max(ans, increasing_subseq[i] + decreasing_subseq[i] - 1)\n        \n    return ans",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef check_string(s):\n    # Define regex patterns for each condition\n    pattern_upper = r'(?i)^[A-Z]$'\n    pattern_lower = r'^(?=.*[a-z])[a-z]+$'\n    pattern_num = r'^\\d+$'\n    \n    result = []\n\n    if not s:\n        result.append('Invalid input.')\n        return result\n\n    if len(s) < 8:\n        result.append(f'String length should be atleast {8}.')\n        \n    match_upper = bool(re.search(pattern_upper, s))\n    match_lower = bool(re.search(pattern_lower, s))\n    match_num = bool(re.search(pattern_num, s))\n\n    if not (match_upper or match_lower):\n        result.append('String must have 1 upper case character.')\n\n    if not (match_num):\n        result.append('String must have 1 number.')\n\n    return [r for r in result if r]\n\n# Test cases\nprint(check_string('python'))   # Expected output: ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nprint(check_string('123python'))  # Expected output: ['String must have 1 upper case character.']\nprint(check_string('123Python'))  # Expected output: ['Valid string.']",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_increasing_subsequence(arr, n):\n    # Initialize the DP table with zeros\n    dp = [arr[0]] * n\n    \n    # Calculate the maximum sum for each subarray ending at index i\n    for i in range(1, n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    \n    # Return the maximum value in the DP table which represents the sum of maximum increasing subsequence\n    return max(dp)\n\n# Test cases\nprint(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7))  # Expected output: 106\nprint(max_sum_increasing_subsequence([3, 4, 5, 10], 4))              # Expected output: 22\nprint(max_sum_increasing_subsequence([10, 5, 4, 3], 4))              # Expected output: 10",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'parallel_lines' is not defined",
      "Test 2: FAIL - name 'parallel_lines' is not defined",
      "Test 3: FAIL - name 'parallel_lines' is not defined"
    ],
    "generated_code": "def is_parallel(line1, line2):\n    \"\"\"\n    This function checks if two lines are parallel based on their coefficients.\n    \n    Parameters:\n    line1 (list of int): The coefficients of the first line in the form [a1, b1, c1].\n    line2 (list of int): The coefficients of the second line in the form [a2, b2, c2].\n    \n    Returns:\n    bool: True if the lines are parallel, False otherwise.\n    \"\"\"\n    # Calculate the cross product of vectors representing the lines\n    cross_product = line1[0] * line2[1] - line1[1] * line2[0]\n    \n    # If the cross product is zero, the lines are parallel\n    return cross_product == 0",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def capitalize_first_last_letters(input_string):\n    words = input_string.split()\n    capitalized_words = [word[0].upper() + word[1:-1] + word[-1].upper() if len(word) > 1 else word.upper() for word in words]\n    return ' '.join(capitalized_words)\n\n# Test cases\nprint(capitalize_first_last_letters(\"python\")) # Expected output: PythoN\nprint(capitalize_first_last_letters(\"bigdata\")) # Expected output: BigdatA\nprint(capitalize_first_last_letters(\"Hadoop\")) # Expected output: HadooP",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pairs_count(arr, k, target_sum):\n    count = 0\n    arr.sort()  # Sort the array for efficiency\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        current_sum = arr[left] + arr[right]\n        \n        if current_sum == target_sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif current_sum < target_sum:\n            left += 1\n        else:\n            right -= 1\n            \n    return count\n\n# Test cases\nprint(get_pairs_count([1, 5, 7, -1, 5], 5, 6))  # Expected output: 3\nprint(get_pairs_count([1, 5, 7, -1], 4, 6))      # Expected output: 2\nprint(get_pairs_count([1, 1, 1, 1], 4, 2))       # Expected output: 6",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def min_length(lst):\n    # Find the sublist with the minimum length\n    return min(lst, key=len)\n\n# Test cases\nassert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == ([0], 1)\nassert min_length([[1], [5, 7], [10, 12, 14,15]]) == ([1], 1)\nassert min_length([[5], [15,20,25]]) == ([5], 1)",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        fib = [0, 2]\n        for i in range(2, n + 1):\n            fib.append(fib[i - 1] + fib[i - 2])\n        return fib[n]\n\n# Test cases\nprint(jacobsthal_lucas(5))  # Output: 31\nprint(jacobsthal_lucas(2))  # Output: 5\nprint(jacobsthal_lucas(4))  # Output: 17",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def negative_count(arr):\n    return sum(1 for num in arr if num < 0) / len(arr)",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef min_coins(coins: List[int], amount: int, target: int) -> int:\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    \n    for i in range(1, len(dp)):\n        for coin in coins:\n            if i >= coin and dp[i - coin] != float('inf'):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[-1]",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_permutation' is not defined",
      "Test 2: FAIL - name 'check_permutation' is not defined",
      "Test 3: FAIL - name 'check_permutation' is not defined"
    ],
    "generated_code": "def is_permutation(str1, str2):\n    # Remove spaces and convert both strings to lowercase for case-insensitive comparison\n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n\n    # Check if the sorted characters of both strings match\n    return sorted(str1) == sorted(str2)",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_datatype(data_tuple, datatype):\n    result = []\n    for item in data_tuple:\n        if not isinstance(item, datatype):\n            result.append(item)\n    return result",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search_literal(s, pat):\n    start = s.find(pat)\n    return (start, start + len(pat))\n\n# Test cases\nprint(search_literal('python', 'python programming language')) # Output should be (0, 6)\nprint(search_literal('programming', 'python programming language')) # Output should be (7, 18)\nprint(search_literal('language', 'python programming language')) # Output should be (19, 27)",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def topbottom_surfacearea(radius):\n    \"\"\"\n    Calculate the total surface area of a cylinder.\n    \n    Parameters:\n    radius (float): The radius of the base circle of the cylinder.\n    \n    Returns:\n    float: The total surface area of the cylinder rounded to three decimal places.\n    \"\"\"\n    height = 10  # Placeholder for height value\n    return 2 * 3.14159 * radius * (radius + height)",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(lst,n):\n    return lst[n::n]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_word(s):\n    # Splitting the input string into words and using set for tracking\n    words = set()\n    for word in s.split():\n        if word in words:\n            return word\n        else:\n            words.add(word)\n    return None",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\n    # Convert each character in the string to its ASCII value and join them into a tuple.\n    return tuple(ord(char) for char in string_list)",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "def basesnum_correspondingnum(bases, nums):\n    return [base ** num for base, num in zip(bases, nums)]",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Diff(arr, n):\n    max_count = -1\n    min_count = float('inf')\n    \n    for i in range(n):\n        count = arr.count(arr[i])\n        if count > max_count:\n            max_count = count\n        if count < min_count:\n            min_count = count\n    \n    diff = max_count - min_count\n    return diff\n\nprint(find_Diff([1,1,2,2,7,8,4,5,1,4],10)) # Expected output: 2\nprint(find_Diff([1,7,9,2,3,3,1,3,3],9))     # Expected output: 3\nprint(find_Diff([1,2,1,2],4))               # Expected output: 0",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_of_divisors(n):\n    divisors_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef check_abundant(number):\n    divisor_sum = sum_of_divisors(number)\n    return divisor_sum > number\n\n# Test cases\nprint(check_abundant(12)) # Expected output: True\nprint(check_abundant(15)) # Expected output: False\nprint(check_abundant(18)) # Expected output: True",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef fill_spaces(input_string):\n    # Replace multiple consecutive characters (spaces, commas, dots) with one colon\n    result = re.sub(r'[\\s,.]+', ':', input_string)\n    return result",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_digits(x, y):\n    # Calculate the sum of x and y\n    total = x + y\n    \n    # Convert the total to string to iterate over each digit\n    total_str = str(total)\n    \n    # Count the number of digits in the total\n    num_digits = len(total_str)\n    \n    return num_digits",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def flatten_tuple(tup_list):\n    # Flatten the tuple list into a single string separated by spaces\n    result = ''.join(map(str, tup_list))\n    return result",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_F_and_L_bits(n):\n    # Calculate the position of the most significant bit and the least significant bit\n    msb = n >> (32 - 1)\n    lsb = n & ((1 << 32) - 1)\n\n    # Toggle the first and last bits using XOR operation\n    result = (msb ^ (lsb ^ n)) + (n & ((1 << 32) - 1))\n\n    return result\n\n# Test cases\nprint(toggle_F_and_L_bits(10))  # Expected output: 3\nprint(toggle_F_and_L_bits(15))  # Expected output: 6\nprint(toggle_F_and_L_bits(20))  # Expected output: 5",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_occurence_char(s, c):\n    try:\n        return s.rindex(c)\n    except ValueError:\n        return None",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Total_Hamming_Distance(n):\n    # Initialize total_sum with the Hamming distance between n and 0\n    total_sum = n.bit_count()\n    \n    # Iterate through numbers from 1 to n-1\n    for i in range(1, n):\n        # Calculate Hamming distance using bit operations and add it to total_sum\n        total_sum += bin(i).count('1')\n    \n    return total_sum",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    \n    # Initialize dp array where dp[i] represents the length of the longest increasing subsequence ending with sequence[i]\n    dp = [1] * len(sequence)\n    \n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[j] < sequence[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    # The maximum value in dp will be the length of the longest increasing subsequence\n    return max(dp)\n\n# Test cases\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))  # Expected output: 5\nprint(longest_increasing_subsequence([3, 10, 2, 1, 20]))  # Expected output: 3\nprint(longest_increasing_subsequence([50, 3, 10, 7, 40, 80]))  # Expected output: 4",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(n):\n        total += ((2 * i + 1)**5)\n    return total",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max(arr, start, end):\n    if start > end:\n        raise ValueError(\"Invalid range\")\n    \n    mid = (start + end) // 2\n    \n    # Check if mid itself is the maximum element\n    if mid == 0 or arr[mid] > arr[mid - 1]:\n        return arr[mid]\n    elif mid == len(arr) - 1 or arr[mid] < arr[mid + 1]:\n        return arr[mid + 1]\n    else:\n        # Recursively search in the right half for a larger middle element\n        return find_Max(arr, mid + 1, end)\n\n# Test cases\nprint(find_Max([2,3,5,6,9], 0, 4))  # Output: 9\nprint(find_Max([3,4,5,2,1], 0, 4))  # Output: 5\nprint(find_Max([1,2,3], 0, 2))      # Output: 3",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_column(nested_list, col_index):\n    return [inner_list[col_index] for inner_list in nested_list]\n\n# Test cases\nprint(extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0))  # Output: [1, 2, 1]\nprint(extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2))  # Output: [3, -5, 1]\nprint(extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0))  # Output: [1, 5, 1, 13, 5, 9]",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Seq_Linear' is not defined",
      "Test 2: FAIL - name 'Seq_Linear' is not defined",
      "Test 3: FAIL - name 'Seq_Linear' is not defined"
    ],
    "generated_code": "def seq_linear(sequence):\n    # Check if all elements in the sequence are consecutive integers starting from 0\n    for i in range(1, len(sequence)):\n        if sequence[i] != sequence[i-1] + 1:\n            return \"Non Linear Sequence\"\n    return \"Linear Sequence\"\n\n# Test cases\nprint(seq_linear([0,2,4,6,8,10]))  # Expected output: Linear Sequence\nprint(seq_linear([1,2,3]))         # Expected output: Linear Sequence\nprint(seq_linear([1,5,2]))         # Expected output: Non Linear Sequence",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_to_float(tup):\n    # Convert each element in the tuple to float and then sum them up.\n    return sum(float(i) for i in tup)\n\n# Test cases\nprint(tuple_to_float((4, 56)))  # Expected output: 4.56\nprint(tuple_to_float((7, 256)))  # Expected output: 7.256\nprint(tuple_to_float((8, 123)))  # Expected output: 8.123",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(numbers):\n    # Filter out even numbers and return only odd ones in a new list.\n    return [num for num in numbers if num % 2 != 0]\n\n# Test cases\nprint(split([1,2,3,4,5,6]))  # Expected output: [1, 3, 5]\nprint(split([10,11,12,13]))  # Expected output: [11, 13]\nprint(split([7,8,9,1]))      # Expected output: [7, 9, 1]",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def difference(n):\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes = int((n * (n + 1) / 2) ** 2)\n    \n    # Calculate the sum of first n natural numbers\n    sum_natural = int(n * (n + 1) / 2)\n    \n    # Return the difference\n    return sum_cubes - sum_natural",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Odd_Pair(nums, k):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 != 0:\n                count += 1\n    return count",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(input_str):\n    return input_str.swapcase()",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings and calculate the absolute difference of their digits\n    return abs(sum([int(digit) for digit in str(abs(num1 - num2))])) - sum([int(digit) for digit in str(num1)] + [int(digit) for digit in str(num2)])\n\n# Test cases to verify the correctness of the solution\nassert digit_distance_nums(1, 2) == 1\nassert digit_distance_nums(23, 56) == 6\nassert digit_distance_nums(123, 256) == 7\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def max_sub_array_sum(arr):\n    current_max = global_max = arr[0]\n    \n    for i in range(1, len(arr)):\n        current_max = max(arr[i], current_max + arr[i])\n        if current_max > global_max:\n            global_max = current_max\n            \n    return global_max\n\n# Test Cases\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3]) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4]) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5]) == 10",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def union_elements(tup1, tup2):\n    # Convert both tuples into sets and then use set.union() method to get the union\n    result_set = set(tup1).union(set(tup2))\n    # Convert the resulting set back into tuple\n    return tuple(result_set)\n\n# Test cases\nprint(union_elements((3, 4, 5, 6), (5, 7, 4, 10)))  # Expected output: (3, 4, 5, 6, 7, 10)\nprint(union_elements((1, 2, 3, 4), (3, 4, 5, 6)))   # Expected output: (1, 2, 3, 4, 5, 6)\nprint(union_elements((11, 12, 13, 14), (13, 15, 16, 17)))  # Expected output: (11, 12, 13, 14, 15, 16, 17)",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_elements(pairs):\n    result = {}\n    for first, second in pairs:\n        if first not in result:\n            result[first] = []\n        result[first].append(second)\n        if second not in result:\n            result[second] = []\n        result[second].append(first)\n    return result\n\n# Test cases\nprint(assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)])) # Expected output: {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nprint(assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)]))   # Expected output: {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nprint(assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)]))    # Expected output: {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]})",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Max_Length(lists):\n    # Initialize the maximum length to zero\n    max_length = 0\n    \n    # Iterate through each list in the given lists\n    for lst in lists:\n        # Update the maximum length if the current list's length is greater\n        if len(lst) > max_length:\n            max_length = len(lst)\n    \n    return max_length\n\n# Test cases\nprint(Find_Max_Length([[1],[1,4],[5,6,7,8]]))  # Expected output: 4\nprint(Find_Max_Length([[0,1],[2,2,],[3,2,1]]))  # Expected output: 3\nprint(Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]))  # Expected output: 5",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_values(input_string):\n    # Split the input string by commas and strip leading/trailing whitespace from each value\n    return [value.strip() for value in input_string.split(\",\") if value.strip()]",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    count = 0\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n                \n    return count",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(string_input):\n    # Split the input string at each character and return the result as a list of characters.\n    return list(string_input)",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(lst):\n    return lst == sorted(lst)",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst_of_lsts):\n    return [sorted(sublst) for sublst in lst_of_lsts]",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_words(lst, chars):\n    \"\"\"\n    Removes specified characters from each word in the list.\n    \n    :param lst: List of strings\n    :param chars: List of characters or substrings to be removed from the words\n    :return: A new list with characters or substrings removed\n    \n    >>> remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"], ['#', 'color', '@'])\n    ['Red', '', 'Green', 'Orange', 'White']\n    >>> remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['&', '+', '@'])\n    ['Red', '', 'Green', 'Orange', 'White']\n    >>> remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['@'])\n    ['Red &', 'Orange+', 'Green', 'Orange', 'White']\n    \"\"\"\n    return [word.translate(str.maketrans('', '', ''.join(chars))) for word in lst]\n\n# Check function with provided data points\nprint(remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"], ['#', 'color', '@']))\nprint(remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['&', '+', '@']))\nprint(remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['@']))",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_pair_diff_lessthan_K(arr: List[int], K: int, m: int) -> int:\n    arr.sort()\n    l = 0\n    r = len(arr)\n    \n    while l < r:\n        if arr[l] + arr[r-1] <= K:\n            m = min(m, arr[l] + arr[r-1])\n            l += 1\n        else:\n            r -= 1\n    \n    return m * (len(arr) - l)\n\n# Example usage\nprint(max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4))  # Output: 62\nprint(max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12))         # Output: 25\nprint(max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6))       # Output: 21",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Removes duplicates from the list nums and returns a new list with unique elements in their original order.\n    \n    :param nums: A list of integers containing potentially duplicated values.\n    :return: A new list of integers with duplicates removed.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def unique_product(numbers):\n    \"\"\"\n    This function calculates the product of all unique elements in the given list.\n    \n    :param numbers: List[int] - A list of integers including duplicates.\n    :return: int - The product of all unique elements in the list.\n    \"\"\"\n    from math import prod\n    \n    # Remove duplicates and compute the product of remaining numbers\n    result = prod(set(numbers))\n    \n    return result",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # Calculate the surface area of a cylinder using the formula:\n    # Surface Area = 2πr(r + h)\n    # where r is the radius and h is the height of the cylinder.\n    return 2 * math.pi * radius * (radius + height)\n\n# Test cases\nassert round(surfacearea_cylinder(10,5), 2) == 942.45\nassert round(surfacearea_cylinder(4,5), 3) == 226.19\nassert round(surfacearea_cylinder(4,10), 3) == 351.85",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_no(nth, divisor, start_value, end_value):\n    count = 0\n    for i in range(start_value, end_value + 1):\n        if i % divisor != 0:\n            count += 1\n            if count == nth:\n                break\n    return count",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Sub_Array(A, B, n1, n2):\n    # Initialize two pointers for both arrays\n    i = j = 0\n    \n    # Iterate through array A\n    while i < n1:\n        # Check if elements at current indices match\n        if A[i] == B[j]:\n            j += 1\n            \n            # If all elements in B have been found in order\n            if j == n2:\n                return True\n                \n        # Move pointer in A one step forward\n        i += 1\n        \n    # If we reach here, no valid subarray was found\n    return False\n\n# Test cases\nprint(is_Sub_Array([1,4,3,5], [1,2], 4, 2))  # Expected output: False\nprint(is_Sub_Array([1,2,1], [1,2,1], 3, 3))  # Expected output: True\nprint(is_Sub_Array([1,0,2,2], [2,2,0], 4, 3))  # Expected output: False",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit_Factorial(n):\n    # Initialize result as 1\n    result = 1\n    \n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # Multiply result with i and take modulo 10 to get the last digit\n        result = (result * i) % 10\n        \n    return result",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def interleave_lists(list1, list2, list3):\n    return [x for pair in zip(list1, list2, list3) for x in pair]\n\n# Test cases\nprint(interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])) # Should output: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nprint(interleave_lists([10,20],[15,2],[5,10])) # Should output: [10, 15, 5, 20, 2, 10]\nprint(interleave_lists([11,44], [10,15], [20,5])) # Should output: [11, 10, 20, 44, 15, 5]",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_dissimilar(tup1, tup2):\n    # Convert both tuples into sets to remove duplicate values and then convert them back to lists\n    set1 = list(set(tup1))\n    set2 = list(set(tup2))\n    \n    # Find the difference between the two sets of unique elements\n    dissimilar_elements = [x for x in set1 if x not in set2] + [y for y in set2 if y not in set1]\n    \n    return tuple(dissimilar_elements)\n\n# Test cases\nprint(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))  # Expected output: (3, 6, 7, 10)\nprint(find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)))  # Expected output: (1, 4, 7, 9)\nprint(find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)))  # Expected output: (34, 36, 11, 25)",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_even(tup):\n    # Initialize an empty list to store the even numbers\n    even_list = []\n    \n    # Iterate through each element in the tuple\n    for elem in tup:\n        # If the element is a tuple, recursively call the function\n        if isinstance(elem, tuple):\n            even_list.append(extract_even(elem))\n        else:\n            # Check if the element is even and append it to the list if so\n            if elem % 2 == 0:\n                even_list.append(elem)\n    \n    # Return the final list of even numbers\n    return tuple(even_list)\n\n# Test cases\nprint(extract_even((4, 5, (7, 6, (2, 4)), 6, 8))) # Expected output: (4, (6, (2, 4)), 6, 8)\nprint(extract_even((5, 6, (8, 7, (4, 8)), 7, 9))) # Expected output: (6, (8, (4, 8)))\nprint(extract_even((5, 6, (9, 8, (4, 6)), 8, 10))) # Expected output: (6, (8, (4, 6)), 8, 10)",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'surface_Area' is not defined",
      "Test 2: FAIL - name 'surface_Area' is not defined",
      "Test 3: FAIL - name 'surface_Area' is not defined"
    ],
    "generated_code": "def surface_area_square_pyramid(side_length, slant_height):\n    \"\"\"\n    Calculate the surface area of a square pyramid given its side length and slant height.\n    \n    Args:\n    side_length (float): The length of one side of the base of the pyramid.\n    slant_height (float): The slant height of the pyramid.\n    \n    Returns:\n    float: The total surface area of the square pyramid.\n    \"\"\"\n    # Base Area\n    base_area = side_length ** 2\n    \n    # Lateral Surface Area\n    lateral_surface_area = 4 * (side_length / 2) * slant_height\n    \n    # Total Surface Area\n    total_surface_area = base_area + lateral_surface_area\n    \n    return total_surface_area",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def my_dict(my_dict):\n    return len(my_dict) == 0",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number using dynamic programming.\n    \n    Parameters:\n    n (int): The index of the Catalan number to be calculated\n    \n    Returns:\n    int: The nth Catalan number\n    \"\"\"\n    if n == 0:\n        return 1\n    dp = [0] * (n+1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n+1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i-j-1]\n    return dp[n]\n\n# Test cases\nprint(catalan_number(10))  # Expected output: 16796\nprint(catalan_number(9))   # Expected output: 4862\nprint(catalan_number(7))   # Expected output: 429",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_adverbs(sentence):\n    pattern = r'(\\b\\w+\\b) \\d+-\\d+:\\s*(.+)$'\n    matches = re.finditer(pattern, sentence)\n    \n    results = []\n    for match in matches:\n        start_pos, end_pos = map(int, match.group(2).split('-'))\n        word = match.group(3)\n        results.append(f'{start_pos}-{end_pos}: {word}')\n    \n    return '\\n'.join(results)\n\n# Test cases\nprint(find_adverbs(\"Clearly, he has no excuse for such behavior.\")) # \"0-7: Clearly\"\nprint(find_adverbs(\"Please handle the situation carefuly\")) # \"28-36: carefuly\"\nprint(find_adverbs(\"Complete the task quickly\")) # \"18-25: quickly\"",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'heappushpop' is not defined",
      "Test 2: FAIL - name 'heappushpop' is not defined",
      "Test 3: FAIL - name 'heappushpop' is not defined"
    ],
    "generated_code": "from heapq import heappush, heappop\n\ndef expensive_items(items, k):\n    \"\"\"\n    Finds and returns the k most expensive priced items from the given list of dictionaries.\n    \n    :param items: List of dictionaries containing item details including name and price.\n    :param k: Number of top expensive items to return.\n    :return: A list of dictionaries representing the k most expensive items.\n    \"\"\"\n    # Initialize a min-heap with negative prices for max-heap behavior\n    max_heap = [(-item['price'], item) for item in items]\n    heappushpop(max_heap, (0, None))  # Start with an empty slot\n    \n    result = []\n    while max_heap:\n        _, item = heappop(max_heap)\n        if len(result) < k:\n            result.append(item)\n        else:\n            break\n    \n    return result",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_Arr(arr, n, k):\n    # Reverse the array for easy splitting\n    arr.reverse()\n    \n    # Split the array into two parts at index k\n    left_part = arr[:k]\n    right_part = arr[k:]\n    \n    # Concatenate the reversed left part with reversed right part\n    result = right_part + left_part\n    \n    # Reverse the final result back to restore original order\n    return result[::-1]\n\n# Test cases\nprint(split_Arr([12,10,5,6,52,36],6,2))  # Expected output: [5,6,52,36,12,10]\nprint(split_Arr([1,2,3,4],4,1))          # Expected output: [2,3,4,1]\nprint(split_Arr([0,1,2,3,4,5,6,7],8,3))   # Expected output: [3,4,5,6,7,0,1,2]",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(lst):\n    return tuple(lst)\n\n# Test cases\nprint(list_tuple([5, 10, 7, 4, 15, 3]))  # Expected output: (5, 10, 7, 4, 15, 3)\nprint(list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7]))  # Expected output: (2, 4, 5, 6, 2, 3, 4, 4, 7)\nprint(list_tuple([58, 44, 56]))  # Expected output: (58, 44, 56)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(arr):\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    # Return the difference between the maximum and minimum values\n    return max_val - min_val",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perfect_squares(start_num, end_num):\n    \"\"\"\n    Generate and return all perfect squares within the range [start_num, end_num].\n    \n    Parameters:\n    start_num (int): The starting number of the range.\n    end_num (int): The ending number of the range.\n    \n    Returns:\n    list: A list of perfect squares in the specified range.\n    \"\"\"\n    return [i*i for i in range(int((end_num**0.5)+1), int((start_num**0.5)-1), -1) if i*i >= start_num]\n\n# Check function with provided data points\nprint(perfect_squares(1, 30))  # Expected output: [1, 4, 9, 16, 25]\nprint(perfect_squares(50, 100))  # Expected output: [64, 81, 100]\nprint(perfect_squares(100, 200))  # Expected output: [100, 121, 144, 169, 196]",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates r and theta to their corresponding rectangular coordinates.\n    \n    Parameters:\n    r (float): The magnitude of the complex number in polar form.\n    theta (float): The angle in radians representing the phase shift of the complex number in polar form.\n    \n    Returns:\n    tuple: A tuple containing two elements. The first element is the real part of the rectangular coordinate,\n           and the second element is the imaginary part of the rectangular coordinate.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.imag)\n\n# Test Cases\nprint(polar_rect(3, 4)) # Expected output: (5.0, 0.9272952180016122) \nprint(polar_rect(4, 7)) # Expected output: (8.06225774829855, 1.0516502125483738)\nprint(polar_rect(15, 17)) # Expected output: (22.67156809750927, 0.8478169733934057)",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    # Interchange the first and last elements of the given list\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_product' is not defined",
      "Test 2: FAIL - name 'sum_Of_product' is not defined",
      "Test 3: FAIL - name 'sum_Of_product' is not defined"
    ],
    "generated_code": "from math import comb\n\ndef sum_of_product(n):\n    total_sum = 0\n    for k in range(n+1):\n        total_sum += comb(k, n-k) * comb(k, k-n)\n    return total_sum",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def removezero_ip(ip_address):\n    return ip_address.lstrip('0')\n\n# Test cases\nprint(removezero_ip(\"216.08.094.196\")) # Expected output: '216.8.94.196'\nprint(removezero_ip(\"12.01.024\"))      # Expected output: '12.1.24'\nprint(removezero_ip(\"216.08.094.0196\"))# Expected output: '216.8.94.196'",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_even_odd(nums):\n    # Find the first even and odd numbers in the list\n    evens = [num for num in nums if num % 2 == 0]\n    odds = [num for num in nums if num % 2 != 0]\n\n    # Return the difference between the last even and last odd numbers\n    return evens[-1] - odds[-1]",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(bin_str1, bin_str2):\n    if bin_str1 == bin_str2:\n        return 0\n    \n    diff_count = sum(1 for x, y in zip(bin_str1, bin_str2) if x != y)\n    \n    # Counting mismatches on both strings to find the maximum possible matches after swapping.\n    mismatch_count = max(diff_count - abs(diff_count // 2), 0)\n    \n    # Finding the number of swaps needed.\n    swaps_needed = mismatch_count * 2 - len(bin_str1)\n    \n    return 'Not Possible' if swaps_needed > len(bin_str1) else swaps_needed",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import sys\n\ndef tuple_size(tup):\n    # Return the size of the given tuple in bytes.\n    return sys.getsizeof(tup)",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: make_test_case.<locals>.inner() missing 1 required positional argument: 'index2'"
    ],
    "generated_code": "def find_kth(arr1, arr2, k):\n    # Ensure we don't go out of bounds\n    n = len(arr1)\n    m = len(arr2)\n\n    # If either array is empty, return None or an appropriate value\n    if n == 0:\n        return arr2[k - 1]\n    elif m == 0:\n        return arr1[k - 1]\n\n    # Base case where all elements have been compared and found in one of the lists\n    if k <= 1:\n        return arr1[0] if n > m else arr2[0]\n\n    # Find the correct position for the first element in the merged list\n    pos = min(n + m - 2, k - 1)\n\n    # Compare the last elements of both arrays\n    if arr1[pos] < arr2[pos]:\n        return find_kth(arr1, slice(arr2, pos), k - pos - 1)\n    else:\n        return find_kth(slice(arr1, pos), arr2, k - pos - 1)\n\n\n# Helper functions to generate test cases\ndef make_test_case(a1, a2, expected):\n    def inner(k1, k2, index1, index2):\n        nonlocal expected\n        actual = find_kth(a1, a2, k1, k2, index1, index2)\n        assert actual == expected, f\"Test failed! Expected {expected}, got {actual}\"\n    return inner\n\n\ntests = [\n    make_test_case(\n        [2, 3, 6, 7, 9],\n        [1, 4, 8, 10],\n        4,\n    ),\n    make_test_case(\n        [100, 112, 256, 349, 770],\n        [72, 86, 113, 119, 265, 445, 892],\n        7,\n    ),\n    make_test_case(\n        [3, 4, 7, 8, 10],\n        [2, 5, 9, 11],\n        6,\n    ),\n]\n\nfor test in tests:\n    test(5, 5, 4)\n    test(7, 7, 7)\n    test(6, 6, 8)",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def armstrong_number(number):\n    # Convert the number to a string to easily iterate over its digits\n    num_str = str(number)\n    \n    # Calculate the length of the number's digits\n    len_num = len(num_str)\n    \n    # Initialize the sum for calculating the Armstrong number\n    sum_of_digits = 0\n    \n    # Iterate through each digit in the number\n    for digit in num_str:\n        # Add the digit raised to the power of the number's length to the sum\n        sum_of_digits += int(digit) ** len_num\n    \n    # Check if the sum equals the original number\n    return sum_of_digits == number",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    avg = total_sum / n\n    return total_sum, avg",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Even' is not defined",
      "Test 2: FAIL - name 'is_Even' is not defined",
      "Test 3: FAIL - name 'is_Even' is not defined"
    ],
    "generated_code": "def is_even(num):\n    # Check if the least significant bit of num is 0 \n    return bool(num & 1)",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]