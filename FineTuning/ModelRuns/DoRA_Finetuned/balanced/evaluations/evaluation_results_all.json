[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Occ(s, c):\n    # Remove the first occurrence of c in s\n    new_str = s.replace(c, \"\", 1)\n    \n    # Remove the second occurrence of c in the modified string\n    if new_str.count(c) > 0:\n        new_str = new_str.replace(c, \"\", new_str.count(c))\n    \n    return new_str\n\n# Test cases\nprint(remove_Occ(\"hello\", \"l\"))  # Expected output: 'heo'\nprint(remove_Occ(\"abcda\", \"a\"))  # Expected output: 'bcd'\nprint(remove_Occ(\"PHP\", \"P\"))    # Expected output: 'H'",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_matrix(matrix):\n    # Sort the list of row sums and then use it as indices for sorting the original matrix\n    sorted_indices = sorted(range(len(matrix)), key=lambda i: sum(matrix[i]))\n    return [matrix[i] for i in sorted_indices]\n\n# Test cases\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nprint(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))  # [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nprint(sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))  # [[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_common(words):\n    # Count the frequency of each word\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    \n    # Find the maximum frequency and list all words with that frequency\n    max_freq = max(word_counts.values())\n    result = [(word, freq) for word, freq in word_counts.items() if freq == max_freq]\n    \n    return result",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Volume(base, height, length):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n    \n    Parameters:\n    base (float): The base length of the triangle in the prism.\n    height (float): The height of the triangle in the prism.\n    length (float): The length of the prism.\n    \n    Returns:\n    float: The calculated volume of the triangular prism.\n    \"\"\"\n    return 0.5 * base * height * length",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_lowerstring(s):\n    # Initialize an empty list to store the result\n    res = []\n    # Initialize a variable to keep track of the current substring\n    temp = \"\"\n    \n    for i in range(len(s)):\n        # Check if the character is lowercase\n        if s[i].islower():\n            # If it's the first lowercase letter encountered, add the previous substring to the result and reset it\n            if not temp:\n                res.append(temp)\n                temp = \"\"\n            # Add the lowercase letter to the current substring\n            temp += s[i]\n        else:\n            # If it's not lowercase, add the entire substring to the result and start a new one with the current letter\n            res.append(temp)\n            temp = s[i:]\n            \n    # Add the last substring to the result\n    res.append(temp)\n    \n    return res",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_lowercase_underscore(text):\n    # Check if all characters in the string are lowercase and connected by underscores\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side_length):\n    return side_length * 4",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_dirty_chars(str1, str2):\n    dirty = set(str2)\n    result = ''.join(c for c in str1 if c not in dirty)\n    return result",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_duplicate(arr):\n    \"\"\"\n    This function checks if there is at least one duplicate number in an array.\n    \n    Parameters:\n    arr (list): A list of integers\n    \n    Returns:\n    bool: True if there is at least one duplicate number, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_woodall(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multiples_of_num(m, n):\n    result = []\n    for i in range(n-1, n*(m), n):\n        result.append(i)\n    return result[:m]\n\nprint(multiples_of_num(4,3))  # Expected output: [3, 6, 9, 12]\nprint(multiples_of_num(2,5))   # Expected output: [5, 10]\nprint(multiples_of_num(9,2))   # Expected output: [2, 4, 6, 8, 10, 12, 14, 16, 18]",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_duplicate(arr):\n    n = len(arr)\n    for i in range(n):\n        # Find the index whose value matches the current value at arr[i]\n        j = abs(arr[i]) - 1\n        if arr[j] < 0:\n            return abs(arr[i])\n        else:\n            arr[j] *= -1\n    return -1",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximum_Sum(lists):\n    # Calculate the maximum value for each sublist and then sum them up.\n    max_values = [max(sublist) for sublist in lists]\n    total_sum = sum(max_values)\n    return total_sum\n\n# Test cases\nprint(maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]))  # Expected output: 33\nprint(maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]))             # Expected output: 6\nprint(maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]])) # Expected output: 19",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def binary_to_decimal(binary_number):\n    # Convert binary to decimal using int() with base 2 and then subtract 1 if necessary due to integer conversion quirks.\n    result = int(binary_number, 2) - 1\n    return result\n\n# Test cases to verify the correctness of the function\nprint(binary_to_decimal(\"100\"))   # Expected output: 4\nprint(binary_to_decimal(\"1011\"))  # Expected output: 11\nprint(binary_to_decimal(\"1101101\")) # Expected output: 109",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Product(arr, n): \n    # Initialize the result variable with 1 as multiplication of zero is always 0\n    res = 1\n  \n    # Iterate through each element in the array\n    for i in range(0, n): \n  \n        # Check if the current element is repeated  \n        count = 0\n        j = 0\n        while j < i: \n            if arr[j] == arr[i]: \n                count += 1\n            j += 1\n  \n        # If the element is not repeated, multiply it with the result\n        if count == 1 : \n            res *= arr[i]  \n  \n    return res",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def check_k_elements(tuples_list, target_element):\n    \"\"\"\n    Checks if every element in the given tuples list is equal to the target element.\n    \n    Parameters:\n        tuples_list (list of tuples): A list containing tuples whose elements need to be checked.\n        target_element: The element to compare against each tuple's elements.\n        \n    Returns:\n        bool: True if every tuple contains exactly 'target_element', otherwise False.\n    \"\"\"\n    for item in tuples_list:\n        # Check if the length of the tuple does not match with target_element\n        if len(item) != target_element:\n            return False\n        # Check if any element in the tuple does not match with target_element\n        if sum(i == target_element for i in item) < target_element:\n            return False\n    return True\n\n# Test cases to verify the correctness of the function\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove(lst):\n    new_lst = [word for word in lst if not any(c.isdigit() for c in word)]\n    return new_lst",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef binomial_Coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k), which represents the number of ways to choose k elements from a set of n distinct elements.\n    \n    Parameters:\n    n (int): The total number of distinct elements in the set.\n    k (int): The number of elements to choose from the set.\n    \n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    if k > n - k:\n        k = n - k\n    return math.comb(n, k)\n\n# Test cases to verify the correctness of the function\nassert binomial_Coeff(5, 2) == 10\nassert binomial_Coeff(4, 3) == 4\nassert binomial_Coeff(3, 2) == 3\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: get_Odd_Occurrence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def get_Odd_Occurrence(arr):\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    for key, value in count.items():\n        if value % 2 != 0:\n            return key\n\n# Test cases\nprint(get_Odd_Occurrence([1,2,3,1,2,3,1],7)) # Output: 1\nprint(get_Odd_Occurrence([1,2,3,2,3,1,3],7)) # Output: 3\nprint(get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13)) # Output: 5",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def count_substring_with_equal_ends(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        left = s[i:]\n        right = s[:i]\n        \n        if left == right:\n            count += 1\n    \n    return count",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - func() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - func() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - func() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "import heapq\nfrom typing import List\n\ndef func(lists: List[List[int]]) -> List[int]:\n    # Combine all lists into one\n    combined_list = []\n    for sublist in lists:\n        combined_list.extend(sublist)\n    \n    # Use a min-heap to keep track of the top-k frequencies\n    frequency_heap = [(freq, num) for num, freq in collections.Counter(combined_list).items()]\n    heapq.heapify(frequency_heap)\n    \n    result = []\n    for _ in range(len(frequency_heap)):\n        if not frequency_heap:\n            break\n        freq, num = heapq.heappop(frequency_heap)\n        result.append(num)\n    \n    return result",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    This function finds the largest prime factor of a given positive integer n.\n    \n    Parameters:\n    - n: A positive integer whose largest prime factor is to be found.\n    \n    Returns:\n    - The largest prime factor of n as an integer.\n    \"\"\"\n    # Initialize the largest prime factor variable\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n        \n    # Check for odd factors from 3 onwards\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n            \n    # If n becomes a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n        \n    return largest_prime\n\n# Test cases to verify the correctness of the function\nprint(max_Prime_Factors(15))  # Expected output: 5\nprint(max_Prime_Factors(6))   # Expected output: 3\nprint(max_Prime_Factors(2))   # Expected output: 2",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_To_Binary(decimal_number):\n    # Convert the integer part of the decimal number to binary and append '0b' before it.\n    integer_part_binary = bin(int(decimal_number))[2:]\n    \n    # Convert the fractional part of the decimal number to binary.\n    # The result is rounded off to 5 digits after the decimal point for simplicity.\n    fractional_part_binary = format(round(float(\".\".join(str(i).replace(\".\", \"\")[::-1] for i in str(decimal_number)[-5:])), 5), \"0.5f\")[2:]\n\n    # Concatenate the integer part binary string with the fractional part binary string.\n    binary_result = integer_part_binary + \".\" + fractional_part_binary\n    \n    return binary_result",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_missing(arr, n):\n    start = arr[0]\n    end = n\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        \n        if arr[mid] == mid + 1:\n            start = mid + 1\n        else:\n            end = mid - 1\n            \n    return start",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def find_rect_num(n):\n    # The formula for finding the n-th rectangular number is (n * (n + 1)) / 2\n    result = (n * (n + 1)) // 2\n    return result\n\n# Test cases to verify the correctness of the function\nassert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: string index out of range"
    ],
    "generated_code": "def find_Nth_Digit(num_1, num_2, N):\n    # Function to convert number to string and reverse it for easier processing\n    def convert_to_str(num):\n        return str(num)[::-1]\n    \n    # Reverse both input numbers to make it easier to find the specified digit\n    reversed_num_1 = convert_to_str(num_1)\n    reversed_num_2 = convert_to_str(num_2)\n    \n    # Check if N is within bounds of the larger number's digits\n    max_len = len(reversed_num_1) if len(reversed_num_1) > len(reversed_num_2) else len(reversed_num_2)\n    \n    if N >= 10 ** (max_len - 1):\n        # If N is at least equal to the largest possible value for its length,\n        # then it must be the last digit.\n        return int(reversed_num_1[-N])\n    else:\n        # Otherwise, calculate the digit based on its position\n        index_in_reversed = N % len(reversed_num_1)\n        first_half = int(reversed_num_1[:index_in_reversed]) * 10 ** ((len(reversed_num_1) - index_in_reversed - 1))\n        second_half = int(reversed_num_2[index_in_reversed:]) * 10 ** (-1 + index_in_reversed)\n        \n        result = first_half + second_half\n        return int(str(result)[:N])\n\n# Example usage:\nprint(find_Nth_Digit(1,2,1))  # Output: 5\nprint(find_Nth_Digit(3,5,1))  # Output: 6\nprint(find_Nth_Digit(5,6,5))  # Output: 3",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'red'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'red'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'red'"
    ],
    "generated_code": "def sort_mixed_list(lst):\n    # Convert all elements to strings for uniformity before sorting\n    lst = [str(item) for item in lst]\n    # Sort the list first by integer values then by string values alphabetically\n    lst.sort(key=lambda x: (int(x.split('.')[0]), str(x)))\n    return lst",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def div_even_odd(nums):\n    # Find the smallest and largest numbers in the list\n    min_num = min(nums)\n    max_num = max(nums)\n\n    # Check if both numbers are even or both are odd\n    if all(num % 2 == 0 for num in nums) or all(num % 2 != 0 for num in nums):\n        return None  # Not possible since there should be an even and odd number\n    \n    # Return the division result\n    return int(min_num / max_num)\n\n# Test cases\nprint(div_even_odd([1,3,5,7,4,1,6,8]))  # Expected output: 4\nprint(div_even_odd([1,2,3,4,5,6,7,8,9,10]))  # Expected output: 2\nprint(div_even_odd([1,5,7,9,10]))  # Expected output: 10",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'rearange_string' is not defined",
      "Test 2: FAIL - name 'rearange_string' is not defined",
      "Test 3: FAIL - name 'rearange_string' is not defined"
    ],
    "generated_code": "def rearrange_string(s):\n    # Count occurrences of each character in the string\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    result = []\n    used_chars = set()\n    \n    while len(result) < len(s):\n        current_char = ''\n        \n        for char in char_count:\n            if char not in used_chars and char_count[char] > 0:\n                current_char = char\n                break\n        \n        if not current_char:\n            return ''  # No valid arrangement possible\n            \n        result.append(current_char)\n        used_chars.add(current_char)\n        char_count[current_char] -= 1\n    \n    return ''.join(result)\n\n# Test cases\nprint(rearrange_string(\"aab\"))   # Expected output: 'aba'\nprint(rearrange_string(\"aabb\"))  # Expected output: 'abab'\nprint(rearrange_string(\"abccdd\"))# Expected output: 'cdabcd'",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef freq_element(lst_of_lsts):\n    \"\"\"\n    Finds the frequency of each element across all sublists within a given list of lists.\n    \n    :param lst_of_lsts: List[List[int]], where each sublist contains integers.\n    :return: A dictionary with elements as keys and their frequencies as values.\n    \"\"\"\n    return dict(Counter([item for sublist in lst_of_lsts for item in sublist]))\n\n# Test cases to verify the correctness of the solution\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]) == {2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]]) == {30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1}\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Sum(arr, target_sum):\n    element_counts = {}\n    \n    # Count occurrences of each element\n    for num in arr:\n        if num in element_counts:\n            element_counts[num] += 1\n        else:\n            element_counts[num] = 1\n    \n    total_sum = 0\n    \n    # Calculate sum based on counts and target sum\n    for count in element_counts.values():\n        total_sum += count * min(count, target_sum // count)\n        \n    return total_sum",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define the pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_string(text):\n    if re.match(r'^python', text): \n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef get_gcd(nums: List[int]) -> int:\n    # Initialize gcd with the first number in the list\n    gcd = nums[0]\n    \n    # Calculate gcd using Euclidean algorithm\n    for num in nums[1:]:\n        gcd = math.gcd(gcd, num)\n    \n    return gcd",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'test_distinct' is not defined",
      "Test 2: FAIL - name 'test_distinct' is not defined",
      "Test 3: FAIL - name 'test_distinct' is not defined"
    ],
    "generated_code": "def is_all_numbers_distinct(numbers):\n    \"\"\"\n    This function takes a list of integers and returns True if all the numbers in the list are distinct.\n    \n    :param numbers: List[int] - A list of integers.\n    :return: bool - Returns True if all numbers are distinct, otherwise False.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True\n\n# Test cases to verify the correctness of the solution\ndef check_solution():\n    assert is_all_numbers_distinct([1,5,7,9]) == True, \"Test case 1 failed\"\n    assert is_all_numbers_distinct([2,4,5,5,7,9]) == False, \"Test case 2 failed\"\n    assert is_all_numbers_distinct([1,2,3]) == True, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def compute_Last_Digit(a, b):\n    # Compute the factorials of a and b\n    factorial_a = 1\n    factorial_b = 1\n    \n    for i in range(1, a + 1):\n        factorial_a *= i\n        \n    for j in range(1, b + 1):\n        factorial_b *= j\n        \n    # Return the last digit of factorial_a divided by factorial_b\n    return factorial_a // factorial_b % 10\n\n# Test cases\nprint(compute_Last_Digit(2, 4))   # Output: 2\nprint(compute_Last_Digit(6, 8))   # Output: 6\nprint(compute_Last_Digit(1, 2))   # Output: 2",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(number):\n    # Shift right by 1 bit and add it back with XOR operation\n    return number ^ (number >> 1)",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    return [row[index] for row in matrix]\n\n# Test cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) # Output: [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) # Output: [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)) # Output: [2, 5, 1]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length_list(lst):\n    return min(lst, key=len)\n\n# Test cases\nprint(min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: (1, [0])\nprint(min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])) # Expected output: (1, [1])\nprint(min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])) # Expected output: (2, [1, 2])",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a, b, c):\n    return a == b and b == c",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'check_Eequality' is not defined. Did you mean: 'check_Equality'?"
    ],
    "generated_code": "def check_Equality(str_1):\n    # Check if the first character is same as the last character in the input string.\n    if str_1[0] == str_1[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Test cases\nprint(check_Eequality(\"abcda\"))  # Output: \"Equal\"\nprint(check_Equality(\"ab\"))      # Output: \"Not Equal\"\nprint(check_Eequality(\"mad\"))    # Output: \"Not Equal\"",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def counting_sort(arr):\n    max_element = max(arr)\n    count_arr = [0] * (max_element + 1)\n\n    # Count each element's occurrence\n    for num in arr:\n        count_arr[num] += 1\n\n    sorted_index = 0\n    for i in range(len(count_arr)):\n        while count_arr[i] > 0:\n            arr[sorted_index] = i\n            count_arr[i] -= 1\n            sorted_index += 1\n\n    return arr\n\n# Test Cases\nprint(counting_sort([1,23,4,5,6,7,8]))  # Expected output: [1, 4, 5, 6, 7, 8, 23]\nprint(counting_sort([12, 9, 28, 33, 69, 45]))  # Expected output: [9, 12, 28, 33, 45, 69]\nprint(counting_sort([8, 4, 14, 3, 2, 1]))  # Expected output: [1, 2, 3, 4, 8, 14]",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def tn_gp(t,n,a):\n    # Calculate the nth term of the geometric series with first term 'a' and common ratio as 't'\n    return a * pow(t, n-1)\n\n# Test cases\nassert tn_gp(1,5,2) == 16\nassert tn_gp(1,5,4) == 256\nassert tn_gp(2,6,3) == 486",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(n):\n    # Calculate the reverse of the number\n    reversed_n = int(str(n)[::-1])\n    \n    # Check if n is one less than twice its reverse\n    if n == 2 * reversed_n - 1:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Max_Num(digits_list, n):\n    # Sort the list of digits in descending order\n    sorted_digits = sorted(digits_list, reverse=True)\n    \n    # Initialize an empty string to build the result\n    result = ''\n    \n    # Iterate over each digit and append it to the result string if its position is less than n\n    for i in range(n-1):\n        result += str(sorted_digits[i])\n        \n    # Append the last digit at position n\n    result += str(sorted_digits[n-1])\n    \n    return int(result)\n\n# Test cases\nprint(find_Max_Num([1,2,3],3))   # Expected output: 321\nprint(find_Max_Num([4,5,6,1],4))  # Expected output: 6541\nprint(find_Max_Num([1,2,3,9],4))  # Expected output: 9321",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def opposite_Signs(x, y):\n    \"\"\"\n    Check if the given two integers x and y have opposite signs.\n    \n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    \n    Returns:\n    bool: True if x and y have opposite signs, False otherwise.\n    \"\"\"\n    return ((x < 0) != (y < 0))\n\n# Test cases\nprint(opposite_Signs(1, -2))  # Expected output: True\nprint(opposite_Signs(3, 2))   # Expected output: False\nprint(opposite_Signs(-10, -10))  # Expected output: False",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def is_octagonal(n):\n    \"\"\"\n    This function calculates the nth octagonal number.\n    \n    Parameters:\n    n (int): The position in the sequence of octagonal numbers.\n    \n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    return ((n - 1) * 3 + 1)\n\n# Function to check if the solution works for given test cases\ndef check_solution():\n    assert is_octagonal(5) == 65, \"Test case 1 failed\"\n    assert is_octagonal(10) == 280, \"Test case 2 failed\"\n    assert is_octagonal(15) == 645, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "from typing import List\n\ndef max_len_sub(nums: List[int], k: int) -> int:\n    max_length = 1\n    current_sum = nums[0]\n    start_index = 0\n    \n    for end_index in range(1, len(nums)):\n        if abs(current_sum - nums[end_index]) <= k:\n            max_length = max(max_length, end_index - start_index + 1)\n        else:\n            while abs(current_sum - nums[end_index]) > k:\n                current_sum -= nums[start_index]\n                start_index += 1\n            max_length = max(max_length, end_index - start_index + 1)\n    \n    return max_length\n\n# Test cases\nprint(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8)) # Expected output: 5\nprint(max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7)) # Expected output: 4\nprint(max_len_sub([9, 11, 13, 15, 18], 5)) # Expected output: 1",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substrings' is not defined",
      "Test 2: FAIL - name 'count_Substrings' is not defined",
      "Test 3: FAIL - name 'count_Substrings' is not defined"
    ],
    "generated_code": "from collections import defaultdict\n\ndef count_substrings(s, n):\n    prefix_sums = {0: 1}  # Base case: empty substring has sum 0 and count 1\n    current_sum = 0\n    result_count = 0\n    \n    for i in range(n):\n        current_char = s[i]\n        if current_char.isdigit():\n            current_sum += int(current_char)\n        \n        if current_sum - i not in prefix_sums:\n            prefix_sums[current_sum - i] = 0\n        \n        if current_sum not in prefix_sums:\n            prefix_sums[current_sum] = 0\n        \n        result_count += prefix_sums[current_sum - i]\n    \n    return result_count",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(nums):\n    return min(nums)",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_difference(tuple_list):\n    # Calculate the differences and keep track of the maximum\n    max_diff = 0\n    for i in range(len(tuple_list) - 1):\n        current_diff = abs(tuple_list[i][0] - tuple_list[i + 1][0]) if tuple_list[i][0] < tuple_list[i + 1][0] else abs(tuple_list[i][0] - tuple_list[i + 1][0])\n        if current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def subject_marks(subjects):\n    return sorted(subjects, key=lambda x: x[1])",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recursive_list_sum(lst):\n    if not lst:\n        return 0\n    else:\n        first = lst[0]\n        rest = lst[1:]\n        if isinstance(first, int):\n            return first + recursive_list_sum(rest)\n        elif isinstance(first, list):\n            return recursive_list_sum(first) + recursive_list_sum(rest)\n\n# Test cases\nprint(recursive_list_sum([1, 2, [3,4], [5,6]]))  # Output should be 21\nprint(recursive_list_sum([7, 10, [15, 14], [19, 41]]))  # Output should be 106\nprint(recursive_list_sum([10, 20, [30, 40], [50, 60]]))  # Output should be 210",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(nums):\n    # Initialize counter for positive numbers\n    count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is greater than zero\n        if num > 0:\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from math import comb\n\ndef bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number.\n    \n    Args:\n    n : int - The position in the sequence of Bell numbers.\n    \n    Returns:\n    int - The nth Bell number.\n    \"\"\"\n    # Initialize a list with size n+1 filled with zeros\n    bell = [0] * (n + 1)\n    # Base case: there is exactly one way to partition an empty set\n    bell[0] = 1\n    \n    for i in range(1, n + 1):\n        # Fill the current row of the triangle using the previous row\n        for j in range(i, 0, -1):\n            bell[j] += bell[j - 1]\n    \n    return bell[n]\n\n# Test cases to verify the correctness of the solution\nassert bell_number(2) == 2\nassert bell_number(10) == 115975\nassert bell_number(56) == 6775685320645824322581483068371419745979053216268760300",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(A):\n    if len(set(A)) < 2:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            decreasing = False\n        elif A[i] < A[i-1]:\n            increasing = False\n            \n    return increasing or decreasing\n\n# Test cases\nprint(is_Monotonic([6, 5, 4, 4]))  # Expected output: True\nprint(is_Monotonic([1, 2, 2, 3]))  # Expected output: True\nprint(is_Monotonic([1, 3, 2]))     # Expected output: False",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'main' is not defined",
      "Test 2: FAIL - name 'main' is not defined",
      "Test 3: FAIL - name 'main' is not defined"
    ],
    "generated_code": "def is_sublist(main_list, sub_list):\n    return all(sub in main for sub in sub_list)",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_equal(tuple_list, tuple_length):\n    \"\"\"\n    Check if all tuples in the list have the same length.\n    \n    Parameters:\n    tuple_list (list of tuples): List containing tuples to be checked.\n    tuple_length (int): The expected length of each tuple.\n    \n    Returns:\n    str: A message indicating whether all tuples have the same length or not.\n    \"\"\"\n    if len(set(map(len, tuple_list))) == 1 and len(set(tuple_list)) <= 1:\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'\n\n# Test Cases\nprint(get_equal([(11, 22, 33), (44, 55, 66)], 3))  # Expected output: 'All tuples have same length'\nprint(get_equal([(1, 2, 3), (4, 5, 6, 7)], 3))      # Expected output: 'All tuples do not have same length'\nprint(get_equal([(1, 2), (3, 4)], 2))               # Expected output: 'All tuples have same length'",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink_factor = 1.3\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        \n        for i in range(0, n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n                \n    return arr\n\n# Test cases\nprint(comb_sort([5, 15, 37, 25, 79]))  # Expected output: [5, 15, 25, 37, 79]\nprint(comb_sort([41, 32, 15, 19, 22]))  # Expected output: [15, 19, 22, 32, 41]\nprint(comb_sort([99, 15, 13, 47]))      # Expected output: [13, 15, 47, 99]",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dif_Square(n):\n    \"\"\"\n    Check if the given integer n can be expressed as the difference of two squares.\n    \n    Parameters:\n    - n (int): The integer to check\n    \n    Returns:\n    - bool: True if n can be written as diff_squares(a,b), False otherwise\n    \"\"\"\n    # A number can be expressed as the difference of two squares if and only if it is not of the form 4k+2 for some integer k.\n    return n % 4 != 2",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - nothing to repeat at position 31",
      "Test 2: FAIL - nothing to repeat at position 31",
      "Test 3: FAIL - nothing to repeat at position 31"
    ],
    "generated_code": "import re\n\ndef multiple_split(s):\n    # Use regex to split the string at spaces, newlines, asterisks, hyphens, colons, underscores, periods, forward slashes, backslashes, equals signs, semicolons, less than symbols, greater than symbols, question marks, vertical bars, ampersands, and commas.\n    return re.split(r'[ \\t]*(?=\\s*\\-*\\w|\\-|\\.|=|;|--|?|/|\\\\|=|%|\\&|,)\\s*', s)",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_samepatterns(patterns, strings):\n    \"\"\"\n    Check if the list of strings matches the pattern described by the first string.\n    \n    Parameters:\n        patterns (list): A list of strings describing the expected pattern.\n        strings (list): A list of strings to be compared against the pattern.\n        \n    Returns:\n        bool: True if every corresponding string in the list of strings matches the pattern described by the first string in the patterns list; False otherwise.\n    \"\"\"\n    return all(s == patterns[0][i] for i, s in enumerate(strings))\n\n# Test cases to verify the correctness of the solution\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"]) == True\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"]) == False\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"]) == False\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_tuples(lst, k):\n    # Filter tuples where each element is divisible by k and collect them into a new list\n    filtered_tuples = [t for t in lst if all(t[i] % k == 0 for i in range(len(t)))]\n    \n    # Return the string representation of the filtered list\n    return str(filtered_tuples)\n\n# Test cases\nprint(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6))\nprint(find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5))\nprint(find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4))",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(n,m):\n    # Initialize total square counter\n    total = 0\n    \n    # Loop through all possible positions for top-left corner of a square\n    for i in range(n-m+1):\n        for j in range(m-1,n-1):\n            if m <= j-i:\n                break\n        else:\n            continue\n        break\n            \n    # Calculate total squares formed within bounds\n    total += ((n - m + 1)*(m-1))\n    \n    # Additional horizontal lines after last vertical line\n    total += n - m\n    \n    return total",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Diff(num):\n    sum_even = 0\n    sum_odd = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            sum_even += int(digit)\n        else:\n            sum_odd += int(digit)\n    \n    # Return whether the sum of even digits minus the sum of odd digits equals the number itself\n    return abs(sum_even - sum_odd) == num\n\n# Test cases\nprint(is_Diff(12345))   # Output: False\nprint(is_Diff(-1212112)) # Output: True\nprint(is_Diff(1212))    # Output: False",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_With_Odd_SetBits(n):\n    # Count the number of 1's in the binary representation of n using bin() and string slicing\n    ones_count = sum(bin(n).count('1') for _ in range(len(bin(n))))\n    # Return half of the total count because each pair of numbers has one with an odd number of set bits and another with an even number of set bits.\n    return int(ones_count / 2)",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    # Check if the length of the word is odd\n    if len(word) % 2 != 0:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef tetrahedral_number(n):\n    # Calculate n-th tetrahedral number using the formula n*(n+1)*(n+2)/6\n    result = n * (n + 1) * (n + 2) / 6\n    return round(result)\n\n# Test cases\nprint(tetrahedral_number(5))  # Should print 35.0\nprint(tetrahedral_number(6))  # Should print 56.0\nprint(tetrahedral_number(7))  # Should print 84.0",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - tuple index out of range",
      "Test 2: FAIL - tuple index out of range",
      "Test 3: FAIL - tuple index out of range"
    ],
    "generated_code": "def zip_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append((tup1[i], tup2[i]))\n    return result",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: can only concatenate str (not \"int\") to str"
    ],
    "generated_code": "def get_Char(s):\n    result = \"\"\n    for char in s:\n        if len(result) == 0:\n            result += ord(char)\n        else:\n            result += ord(char) + int(result[-1])\n    return chr(result)\n\n# Test Cases\nprint(get_Char(\"abc\"))  # Expected output: 'f'\nprint(get_Char(\"gfg\"))  # Expected output: 't'\nprint(get_Char(\"ab\"))   # Expected output: 'c'",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequence(n):\n    # Base case\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n\n    # Initialize the first two numbers of the sequence\n    seq = [1, 1]\n    \n    for i in range(2, n):\n        # Calculate the nth number in the sequence\n        seq.append(seq[-1] + seq[-2])\n        \n    return seq[-1]",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def centered_hexagonal_number(n):\n    # Calculate the nth centered hexagonal number using the formula\n    result = n * ((n << 1) - 1)\n    return result\n\n# Test the function with provided data points\nprint(centered_hexagonal_number(10))  # Expected output: 271\nprint(centered_hexagonal_number(2))   # Expected output: 7\nprint(centered_hexagonal_number(9))   # Expected output: 217",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_count(lst):\n    from collections import Counter\n    return dict(Counter(lst))",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef closest_num(n):\n    # Calculate the floor of the square root of n\n    sqrt_floor = int(math.sqrt(n))\n    \n    # If n is a perfect square, return the largest number less than n\n    if sqrt_floor**2 == n:\n        return sqrt_floor * sqrt_floor - 1\n    \n    # Otherwise, calculate the next lower power of two and subtract one from it\n    else:\n        return pow(2, sqrt_floor + 1) - 1",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Find the maximum length among all words in the list\n    max_length = max(len(word) for word in words)\n    return max_length\n\n# Test the function with provided data points\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))  # Expected output: 7\nprint(len_log([\"a\",\"ab\",\"abc\"]))            # Expected output: 3\nprint(len_log([\"small\",\"big\",\"tall\"]))      # Expected output: 5",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_substring(string_list, substring):\n    # Iterate through each item in the list and compare it with the substring\n    for s in string_list:\n        if substring == s:\n            return True\n    return False",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_undulating(num):\n    str_num = str(num)\n    length = len(str_num)\n    \n    if length < 2:\n        return False\n    \n    for i in range(1, length // 2 + 1):\n        left_part = int(str_num[:i])\n        right_part = int(str_num[i:])\n        \n        if left_part * 10 + right_part == num or right_part * 10 + left_part == num:\n            return True\n    \n    return False",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def index_minimum(tuples_list):\n    # Extracting the first element of each tuple as indexes and finding the minimum value\n    min_index = min(range(len(tuples_list)), key=lambda i: tuples_list[i][0])\n    # Returning the corresponding value at the found index\n    return tuples_list[min_index][1]",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Min_Length(sublist):\n    min_length = float('inf')\n    for lst in sublist:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n\n# Test Cases\nprint(Find_Min_Length([[1], [1, 2]]))  # Expected output: 1\nprint(Find_Min_Length([[1, 2], [1, 2, 3], [1, 2, 3, 4]]))  # Expected output: 2\nprint(Find_Min_Length([[3, 3, 3], [4, 4, 4, 4]]))  # Expected output: 3",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def frequency_lists(lst):\n    return {item: lst.count(item) for item in set([item for sublist in lst for item in sublist])}",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_num(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product / len(lst)",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(decimal_num):\n    \"\"\"\n    Convert a given decimal number to its binary equivalent.\n    \n    Parameters:\n    - decimal_num: int\n    \n    Returns:\n    str: The binary representation of the input decimal number.\n    \"\"\"\n    return bin(decimal_num)[2:]\n\n# Test cases to verify the correctness of the function\nassert decimal_to_binary(8) == '1000', \"Test case 1 failed\"\nassert decimal_to_binary(18) == '10010', \"Test case 2 failed\"\nassert decimal_to_binary(7) == '111', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def next_smallest_palindrome(n):\n    while True:\n        n += 1\n        if str(n) == str(n)[::-1]:\n            return n\n\n# Test cases\nprint(next_smallest_palindrome(99))  # Expected output: 101\nprint(next_smallest_palindrome(1221))  # Expected output: 1331\nprint(next_smallest_palindrome(120))  # Expected output: 121",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def kth_element(arr, n, k):\n    \"\"\"\n    Find the k-th element in an array.\n    \n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The size of the input list.\n    k (int): The position we want to find in the sorted order.\n    \n    Returns:\n    int: The k-th element from the start of the sorted array.\n    \"\"\"\n    # Sort the array\n    arr.sort()\n    # Return the k-th element\n    return arr[k-1]",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def snake_to_camel(snake_str):\n    return ''.join(word.capitalize() or '_' for word in snake_str.split('_'))",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def eulerian_num(n, m):\n    if n < m:\n        return 0\n    else:\n        # Base case: if n is equal to m, then the result of the first column is always 1\n        if n == m:\n            return 1\n        # Recursive case: sum up the results for each value of k from 0 to m-1\n        return sum([eulerian_num(k, m - 1) * binomial(n - 1, k) for k in range(m)])\n\n# Helper function to calculate binomial coefficient using recursive approach\ndef binomial(n, k):\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial(n - 1, k - 1) + binomial(n - 1, k)\n\nprint(eulerian_num(3, 1))  # Output: 4\nprint(eulerian_num(4, 1))  # Output: 11\nprint(eulerian_num(5, 3))  # Output: 26",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(lst):\n    # Initialize counter to zero\n    count = 0\n    # Iterate through each item in the list\n    for item in lst:\n        # Increment counter if item is True\n        if item:\n            count += 1\n    # Return the final count of True items\n    return count\n\n# Test cases to verify the correctness of the function\nprint(count([True,False,True]))  # Expected output: 2\nprint(count([False,False]))      # Expected output: 0\nprint(count([True,True,True]))   # Expected output: 3",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_lists(list1, tuple1):\n    # Convert the first element of the tuple into a tuple if it is not already one.\n    tuple1 = tuple(tuple1) if isinstance(tuple1, list) else tuple1\n    # Use * operator for unpacking and concatenation.\n    return tuple1 + tuple(list1)\n\n# Test Cases\nprint(add_lists([5, 6, 7], (9, 10)))  # Expected output: (9, 10, 5, 6, 7)\nprint(add_lists([6, 7, 8], (10, 11)))  # Expected output: (10, 11, 6, 7, 8)\nprint(add_lists([7, 8, 9], (11, 12)))  # Expected output: (11, 12, 7, 8, 9)",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object has no attribute 'lower'",
      "Test 2: FAIL - 'int' object has no attribute 'lower'",
      "Test 3: FAIL - 'int' object has no attribute 'lower'"
    ],
    "generated_code": "def count_Hexadecimal(start, end):\n    # Initialize counter\n    count = 0\n    \n    # Iterate over all possible hexadecimal values within the range\n    for i in range(ord('A'), ord(end.lower()) + 1):\n        if chr(i).lower() not in 'abcdef':\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given",
      "Test 2: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given",
      "Test 3: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given"
    ],
    "generated_code": "import heapq\n\ndef merge_sorted_list(sorted_lists):\n    # Use a min-heap to efficiently retrieve the smallest elements from each list\n    result = []\n    for current_list in sorted_lists:\n        if not current_list:\n            continue\n        heapq.heappush(result, current_list.pop(0))\n    return result",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        if int(s[i:i+2], 2) % 2 == 1:\n            count += 1\n    return count",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_missing(ranges, start_range, end_range):\n    def find_start_end(range_a, range_b):\n        if range_a[0] < range_b[0]:\n            start = range_a[0]\n            end = max(range_a[1], range_b[0])\n        else:\n            start = min(range_a[0], range_b[0])\n            end = range_b[1]\n        return start, end\n\n    result = []\n    for i in range(start_range, end_range + 1):\n        start, end = None, None\n        found = False\n        for j in ranges:\n            st, en = find_start_end(j, [i, i + 1])\n            if st is not None:\n                if start is None:\n                    start = st\n                elif end is None:\n                    end = en\n                else:\n                    break\n                found = True\n        if not found:\n            result.append((start, i))\n        if end is not None:\n            result.append((i, end))\n    return result",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_in_nested_lists(nested_lists):\n    result = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        result &= set(lst)\n    return sorted(result)\n\n\n# Test cases\nprint(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))\nprint(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))\nprint(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def calculate_cylinder_perimeter(radius, height):\n    \"\"\"\n    Calculate the circumference of a cylinder using its radius and height.\n    \n    Parameters:\n    - radius (float): The radius of the cylinder's base.\n    - height (float): The height of the cylinder.\n    \n    Returns:\n    float: The total perimeter of the cylinder's surface area.\n    \"\"\"\n    # Calculating the circumference (perimeter of the base)\n    base_perimeter = 2 * 3.14159 * radius\n    \n    # Total perimeter is the sum of the two circular bases' circumferences and the lateral surface area\n    total_perimeter = base_perimeter + 2 * base_perimeter * height\n    \n    return total_perimeter\n\n# Example check function to verify the correctness of the generated function\ndef check_function():\n    assert abs(calculate_cylinder_perimeter(2, 4) - 12) < 0.001\n    assert abs(calculate_cylinder_perimeter(1, 2) - 6) < 0.001\n    assert abs(calculate_cylinder_perimeter(3, 1) - 8) < 0.001\n\ncheck_function()",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - pop from empty list",
      "Test 2: FAIL - pop from empty list",
      "Test 3: FAIL - pop from empty list"
    ],
    "generated_code": "def assign_freq(tuples_list):\n    freq = {}\n    for tup in tuples_list:\n        for item in tup:\n            if item not in freq:\n                freq[item] = 1\n            else:\n                freq[item] += 1\n    sorted_items = sorted(freq.items(), key=lambda x: (-x[1], -len(x)))\n    result = []\n    for tup in tuples_list:\n        temp_tup = []\n        for item in tup:\n            temp_tup.append(sorted_items.pop()[0])\n        result.append(tuple(temp_tup))\n    return result",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'bool' object is not iterable"
    ],
    "generated_code": "def is_all_dicts_empty(dicts_list):\n    return len([d for d in dicts_list if bool(d)]) == 0\n\n# Test cases\nprint(is_all_dicts_empty([{},{},{}] == True))  # Output: True\nprint(is_all_dicts_empty([{1,2},{},{}] == False))  # Output: True\nprint(is_all_dicts_empty({} == True))  # Output: True",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_to_float(lst):\n    converted_list = []\n    for item in lst:\n        if isinstance(item[0], str) and isinstance(item[1], str):\n            try:\n                converted_value = float(item[0]) * float(item[1])\n                converted_list.append((converted_value, item[1]))\n            except ValueError:\n                converted_list.append(item)\n        else:\n            converted_list.append(item)\n    return converted_list",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_list(s):\n    return s.split()",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search(nums, m):\n    left = 0\n    right = len(nums) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if nums[mid] == m and (mid == 0 or nums[mid-1] != m):\n            return m\n        elif nums[mid] > m:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    return -1",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef max_product_tuple(tuples_list: List[tuple]) -> int:\n    \"\"\"\n    Finds the maximum product from each pair of tuples in the given list.\n    \n    Args:\n    tuples_list: A list of tuples containing integers.\n    \n    Returns:\n    The maximum product among all possible pairs of tuples.\n    \"\"\"\n    return max(a * b for a, b in tuples_list)",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_triplet(arr, target_sum, x, y):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == x and arr[j] == y:\n                return True\n    return False\n\n# Test cases\nprint(check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0))  # Should return True\nprint(check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0))  # Should return False\nprint(check_triplet([10, 4, 2, 3, 5], 5, 15, 0))         # Should return True",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_smart_number(num):\n    count = 0\n    current_num = 1\n    while True:\n        next_num = current_num + 2 * num\n        if len(str(next_num)) > len(str(current_num)):\n            break\n        count += 1\n        current_num = next_num\n    return count + 1\n\ndef smartNumber(n):\n    # Implementing a simple linear search approach to estimate the nth smart number.\n    for i in range(1, 10000):  # Adjusted the upper limit as it's not clear from the problem statement what constitutes 'smart numbers'.\n        if is_smart_number(i) == n:\n            return i\n    return None",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_amicable(x, y):\n    \"\"\"Check if two numbers are amicable.\"\"\"\n    def proper_divisor(n):\n        divisors = {1}\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n    \n    return sum(proper_divisor(y)) == x and sum(proper_divisor(x)) == y and x != y\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    Sum all amicable numbers within the range [1, n].\n    \n    Parameters:\n    - n: The upper limit of the range.\n    \n    Returns:\n    The sum of all amicable numbers within the range.\n    \"\"\"\n    amicables = set()\n    for num in range(2, n+1):\n        if not is_amicable(num, num-1): continue\n        for pair in [(num-1, num)]:\n            if pair[0] > pair[1]: break\n            amicables.update(set(range(pair[0], min(pair[0]+sum(proper_divisor(p)), n)+1)))\n    \n    return sum(sorted(amicables))\n\n# Test cases\nprint(amicable_numbers_sum(999))   # Expected output: 504\nprint(amicable_numbers_sum(9999))  # Expected output: 31626\nprint(amicable_numbers_sum(99))    # Expected output: 0",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef angle_complex(x, y):\n    \"\"\"\n    This function takes two complex numbers x and y as inputs and returns the angle between them in radians.\n    \n    Parameters:\n    x (complex): The first complex number.\n    y (complex): The second complex number.\n    \n    Returns:\n    float: The angle in radians between the two complex numbers.\n    \"\"\"\n    # Calculating the angle using the argument method from cmath module for complex numbers.\n    return cmath.phase(complex(x,y))",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_length(binary_string, n):\n    count_ones = 0\n    max_diff = 0\n    \n    for i in range(n):\n        if binary_string[i] == '0':\n            count_ones += 1\n        elif binary_string[i] == '1':\n            count_ones = 0\n        \n        current_diff = count_ones - (n-i)\n        max_diff = max(max_diff, current_diff)\n    \n    return max_diff",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_of_common_divisors(num1, num2):\n    def gcd(a, b): \n        while b != 0:\n            t = b \n            b = a % b \n            a = t \n        return a \n\n    common_divisors_sum = 0\n    for i in range(1, min(num1, num2) + 1): \n        if num1 % i == 0 and num2 % i == 0: \n            common_divisors_sum += i \n  \n    return common_divisors_sum\n\n# Test cases\nprint(sum_of_common_divisors(10, 15)) # Output: 6\nprint(sum_of_common_divisors(100, 150)) # Output: 93\nprint(sum_of_common_divisors(4, 6)) # Output: 3",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_int(x, y):\n    result = 0\n    while y != 0:\n        if y % 2 == 1:\n            result += x\n        x = x << 1\n        y = y >> 1\n    return result",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, words_list):\n    return [word for word in words_list if len(word) > n]",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'magic_square_test' is not defined",
      "Test 2: FAIL - name 'magic_square_test' is not defined",
      "Test 3: FAIL - name 'magic_square_test' is not defined"
    ],
    "generated_code": "def is_magic_square(matrix):\n    n = len(matrix)\n    if not all(len(row) == n for row in matrix):\n        return False\n    \n    total_sum = sum(sum(row) for row in matrix)\n    row_sum = col_sum = diagonal_sum = anti_diagonal_sum = 0\n    \n    # Calculate sum of each row and column\n    for i in range(n):\n        row_sum += matrix[i][0]\n        for j in range(1, n):\n            row_sum += matrix[i][j]\n            col_sum += matrix[j][i]\n    \n    # Calculate main diagonal and secondary diagonal sums\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n        anti_diagonal_sum += matrix[i][-i-1]\n    \n    return total_sum % n == 0 and row_sum == col_sum == diagonal_sum == anti_diagonal_sum and len(set([x[0] + x[1] for x in zip(*matrix)])) == n*n\n\n# Test cases\nprint(is_magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])) # True\nprint(is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 8]])) # True\nprint(is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 7]])) # False",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(arr):\n    from collections import Counter\n    \n    # Count the occurrences of each element in the array\n    count = Counter(arr)\n    \n    # Find the maximum occurrence and return it along with its corresponding value\n    max_val = max(count.values())\n    for k, v in count.items():\n        if v == max_val:\n            return k, v",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def reverse_vowels(s):\n    # Define vowels as a set for O(1) lookup\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    # Convert the input string into a list to allow modification\n    s_list = list(s)\n    \n    # Find all vowels in the string and store them in a separate list\n    vowel_indices = [index for index, char in enumerate(s) if char in vowels]\n    \n    # Swap vowels from their original positions with their reversed positions\n    for i in range(len(vowel_indices)):\n        j = vowel_indices[i] - i * len(str(vowel_indices))\n        s_list[vowel_indices[i]], s_list[j] = s_list[j], s_list[vowel_indices[i]]\n        \n    # Join the list back into a string and return it\n    return ''.join(s_list)\n\n# Test cases\nprint(reverse_vowels(\"Python\"))  # Output: \"Python\"\nprint(reverse_vowels(\"USA\"))     # Output: \"ASU\"\nprint(reverse_vowels(\"ab\"))      # Output: \"ab\"",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_last(arr, n, m):\n    count = 0\n    for i in range(m-1):\n        arr.append(arr[i] + arr[-1])\n        if arr[-1] % 2 == 0:\n            count += 1\n    if count == m - 1:\n        return \"EVEN\"\n    else:\n        return \"ODD\"",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hexagonal_num(n):\n    # The formula to calculate the nth hexagonal number is 2n^2 - n\n    result = 2 * n**2 - n\n    return result\n\n# Test cases\nprint(hexagonal_num(10))  # Expected output: 190\nprint(hexagonal_num(5))   # Expected output: 45\nprint(hexagonal_num(7))   # Expected output: 91",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - unsupported operand type(s) for +: 'float' and 'tuple'",
      "Test 3: FAIL - unsupported operand type(s) for +: 'float' and 'tuple'"
    ],
    "generated_code": "def cal_electbill(power_used):\n    return round((power_used * 0.82) + 12), round(((power_used - 75) * 0.82) + (cal_electbill(75) if power_used > 75 else 0))",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def zero_count(nums):\n    # Initialize counter for zero occurrences\n    count = nums.count(0)\n    # Total number of elements in the list\n    total_elements = len(nums)\n    # Calculate and return the ratio of zeros\n    if total_elements == 0:\n        return 0.00\n    else:\n        return count / total_elements",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is odd and greater than 1\n    if n % 2 != 0 or n > 1:\n        return False\n    \n    # Iterate through possible powers of 2\n    for i in range(1, int(n ** 0.5) + 1):\n        power = 1 << i  # Calculate power of 2\n        if power <= n < power * 2:\n            return True\n    \n    return False",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Args:\n    radius (float): The radius of the circle.\n    \n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_singly(tuples_list):\n    result = []\n    for tup in tuples_list:\n        # Convert each tuple into a set to remove duplicates and then back into a list.\n        # The difference between original length of list and length of set gives the number of singular occurrences.\n        result.extend([item for item in tup if tup.count(item) == 1])\n    return result",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def flip(arr, index):\n    \"\"\"\n    Flip the subarray from start to end in the given array.\n    \n    :param arr: List[int] - The array to be manipulated.\n    :param index: int - The position where the flipping will begin.\n    \"\"\"\n    half = len(arr) // 2\n    for i in range(half):\n        temp = arr[i]\n        arr[i] = arr[index - i]\n        arr[index - i] = temp\n\ndef pancake_sort(arr):\n    \"\"\"\n    Sorts an array in ascending order using the pancake sorting algorithm.\n    \n    :param arr: List[int] - The array to be sorted.\n    :return: List[int] - The sorted array.\n    \"\"\"\n    n = len(arr)\n    while n > 0:\n        # Find the index of the maximum element in arr[0:n]\n        max_index = n - 1 if arr[n-1] >= arr[max(n-2)] else max(0, n-2)\n        \n        # Move the found maximum element to the front if it's not already at its correct position\n        if max_index != 0 and arr[max_index] < arr[0]:\n            flip(arr, max_index)\n            \n            # If the maximum element is still not at its correct position after one flip, move it to the beginning\n            if max_index != 0:\n                flip(arr, max_index + 1)\n                \n        # Reduce the length of the array by one since the largest element has been moved to its final place\n        n -= 1\n    \n    return arr\n\n# Test cases\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79], \"Test case 1 failed\"\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98], \"Test case 2 failed\"\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    # Create sets of pairs from each list and find the intersection\n    return len(set(zip(list1, list2)).intersection(set(zip(list1, list3))))\n\n# Test cases to verify the correctness of the function\nprint(count_samepair([1,2,3,4,5,6,7,8], [2,2,3,1,2,6,7,9], [2,1,3,1,2,6,7,9]))  # Expected output: 3\nprint(count_samepair([1,2,3,4,5,6,7,8], [2,2,3,1,2,6,7,8], [2,1,3,1,2,6,7,8]))  # Expected output: 4\nprint(count_samepair([1,2,3,4,2,6,7,8], [2,2,3,1,2,6,7,8], [2,1,3,1,2,6,7,8]))  # Expected output: 5",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_lists(tup):\n    # Initialize counter for list occurrences\n    count = 0\n    \n    # Iterate through each element in the tuple\n    for item in tup:\n        # Check if the current item is a list\n        if isinstance(item, list):\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef sum_Pairs(arr: List[int], n: int) -> int:\n    \"\"\"\n    Calculates the sum of the absolute difference between each pair of elements in the array.\n    \n    Parameters:\n    arr (List[int]): The input array of integers.\n    n (int): The length of the array.\n    \n    Returns:\n    int: The sum of absolute differences between all pairs of elements.\n    \"\"\"\n    total_sum = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum\n\n# Test cases\nprint(sum_Pairs([1,8,9,15,16],5)) # Expected output: 74\nprint(sum_Pairs([1,2,3,4],4)) # Expected output: 10\nprint(sum_Pairs([1,2,3,4,5,7,9,11,14],9)) # Expected output: 188",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def max_Abs_Diff(arr, k):\n    # Sort the array to easily calculate differences\n    arr.sort()\n    \n    min_val = float('inf')\n    max_diff = -float('inf')\n    \n    for i in range(len(arr)):\n        diff = abs(k - arr[i])\n        \n        if diff < max_diff:\n            continue\n        \n        if diff > min_val:\n            min_val = diff\n    \n    return min_val",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ascii_value_string(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    return sum(ord(char) for char in s)",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_path_sum(triangle, n, m):\n    \"\"\"\n    Calculate the maximum total path sum in the given triangle.\n    \n    :param triangle: A list of lists representing the triangle where each element is an integer.\n    :param n: The number of rows in the triangle.\n    :param m: The starting point's column index.\n    :return: The maximum total path sum from top to bottom of the triangle.\n    \"\"\"\n    dp = [[-float('inf')] * (m + 1) for _ in range(n)]\n    dp[0][m] = triangle[0][m]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j] + triangle[i][j]\n            elif j == i:\n                dp[i][j] = dp[i - 1][j - 1] + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j]) + triangle[i][j]\n    return max(dp[-1])\n\n# Test cases\nprint(max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)) # Expected output: 14\nprint(max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)) # Expected output: 24\nprint(max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)) # Expected output: 53",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def sum_digits_twoparts(num):\n    \"\"\"\n    Divides a given number into two non-zero parts so that their sum of digits is maximized.\n    \n    Parameters:\n    num (int): The number to be divided.\n    \n    Returns:\n    int: The sum of digits after dividing the number into two parts.\n    \"\"\"\n    # Convert number to string for digit extraction\n    str_num = str(num)\n    \n    # Calculate sum of digits in the first half\n    part_sum1 = sum(int(digit) for digit in str_num[:len(str_num)//2])\n    \n    # Calculate sum of digits in the second half if applicable\n    if len(str_num) > len(str_num)//2:\n        part_sum2 = sum(int(digit) for digit in str_num[len(str_num)//2:])\n    \n    return max(part_sum1, part_sum2)\n\n# Check function with provided data points\nassert sum_digits_twoparts(35) == 17, \"Test case 1 failed\"\nassert sum_digits_twoparts(7) == 7, \"Test case 2 failed\"\nassert sum_digits_twoparts(100) == 19, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def longest_subseq_with_diff_one(arr, k):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = 1\n    \n    max_len = 1\n    start = end = 0\n    \n    for i in range(1, n):\n        if arr[i] - arr[start] == k:\n            end = i\n            while start <= end and abs(end - start) + 1 > max_len:\n                dp[end] += dp[start]\n                max_len = max(max_len, dp[end])\n                end -= 1\n            start = end + 1\n            \n    return max_len\n\n# Test Cases\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7))  # Expected output: 6\nprint(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7))  # Expected output: 3\nprint(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8))  # Expected output: 7",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def does_Contain_B(a, b, c):\n    # Calculate the result using bitwise XOR operation\n    if ((a ^ b) == c):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_coprime(x, y):\n    # Check if GCD of x and y is 1\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    return gcd(x, y) == 1",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n    \n    return merge(left_half, right_half)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result\n\n# Test cases\nprint(merge_sort([3, 4, 2, 6, 5, 7, 1, 9]))  # Expected output: [1, 2, 3, 4, 5, 6, 7, 9]\nprint(merge_sort([7, 25, 45, 78, 11, 33, 19]))  # Expected output: [7, 11, 19, 25, 33, 45, 78]\nprint(merge_sort([3, 1, 4, 9, 8]))  # Expected output: [1, 3, 4, 8, 9]",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parabola_vertex(a,b,c):\n    x = -(b/(2*a))\n    y = a*x**2 + b*x + c\n    return(x,y)\n\n# Test cases\nprint(parabola_vertex(5,3,2)) # Expected output: (-0.3, 1.55)\nprint(parabola_vertex(9,8,4)) # Expected output: (-0.4444444444444444, 2.2222222222222223)\nprint(parabola_vertex(2,4,6)) # Expected output: (-1.0, 4.0)",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def specified_element(matrix, index):\n    # Initialize an empty list to store elements at the specified index position\n    result = []\n    for row in matrix:\n        # Append each element in the current row if it matches the specified index\n        if row[index] != -1 and row[index] not in result:\n            result.append(row[index])\n    return result",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    \"\"\"\n    Toggles all even bits of the given number.\n    \n    Parameters:\n    n (int): The number whose even bits will be toggled.\n    \n    Returns:\n    int: The number with all its even bits toggled.\n    \"\"\"\n    result = 0\n    while n > 0:\n        if n % 2 == 0:  # Check if the least significant bit is 0 (even)\n            result += 1 << n % 4  # Toggle the least significant bit and add to result\n        n //= 2  # Right shift n by 1\n    return result\n\n# Test cases to verify the correctness of the function\nassert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def tuple_int_str(tup):\n    return tuple(map(int, tup))\n\n# Test cases\nprint(tuple_int_str(((333, 33), (1416, 55)))) # Should print ((333, 33), (1416, 55))\nprint(tuple_int_str(((999, 99), (1000, 500)))) # Should print ((999, 99), (1000, 500))\nprint(tuple_int_str(((666, 66), (1500, 555)))) # Should print ((666, 66), (1500, 555))",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def encode_list(lst):\n    result = []\n    current_char = lst[0]\n    count = 1\n    \n    for i in range(1, len(lst)):\n        if lst[i] == current_char:\n            count += 1\n        else:\n            result.append([count, current_char])\n            current_char = lst[i]\n            count = 1\n            \n    # Append the last character and its count\n    result.append([count, current_char])\n    \n    return result",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef min_Ops(nums: List[int], k: int, m: int) -> int:\n    nums.sort()\n    total_ops = sum(max(0, (num - i * m)) for i, num in enumerate(nums))\n    \n    # If we can't divide all numbers into groups where each group size is divisible by k,\n    # then it's not possible to make all elements equal with at most k operations.\n    if total_ops % k != 0:\n        return -1\n    \n    return total_ops // k",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def month_season(month, day):\n    seasons = {\n        'January': {'start': 1, 'end': 3},\n        'February': {'start': 4, 'end': 6},\n        'March': {'start': 7, 'end': 9},\n        'April': {'start': 10, 'end': 12}\n    }\n    \n    if month in seasons:\n        start, end = seasons[month]['start'], seasons[month]['end']\n        return ('spring' if start <= day < end else ('summer' if end <= day <= 31 else ('fall' if 32 <= day <= 59 else 'winter')))\n    else:\n        return \"Invalid input\"",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list indices must be integers or slices, not Symbol",
      "Test 2: FAIL - list indices must be integers or slices, not Symbol",
      "Test 3: FAIL - list indices must be integers or slices, not Symbol"
    ],
    "generated_code": "from sympy import symbols, Eq, solve\n\ndef solution(a, b, n):\n    # Define symbols\n    x, y = symbols('x y')\n    \n    # Create equation\n    equation = Eq(a * x + b * y, n)\n    \n    # Solve equation\n    solutions = solve(equation, (x, y))\n    \n    # Check if there is exactly one solution\n    if len(solutions) == 1:\n        return f\"x = {solutions[x]}, y = {solutions[y]}\"\n    else:\n        return \"No solution\"",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n\n# Test Cases\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8]))  # Expected output: [1, 3, 5, 7, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]))  # Expected output: [2, 4, 6, 8, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5,7]))  # Expected output: [1, 2, 3, 4, 6, 8, 9, 10]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    total_sum = 0\n    while n >= 0:\n        total_sum += n\n        n -= 2\n    return total_sum",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef area_polygon(n_sides, side_length):\n    \"\"\"\n    Calculate the area of a regular polygon with 'n_sides' sides and side length 'side_length'.\n\n    Parameters:\n    n_sides (int): The number of sides of the regular polygon.\n    side_length (float): The length of each side of the regular polygon.\n\n    Returns:\n    float: The area of the regular polygon.\n    \"\"\"\n    return 0.25 * n_sides * side_length**2 / math.tan(math.pi / n_sides)\n\n# Test cases to verify the correctness of the function\nassert abs(area_polygon(4, 20) - 400.0) < 1e-10\nassert abs(area_polygon(10, 15) - 1731.1969896610804) < 1e-10\nassert abs(area_polygon(9, 7) - 302.90938549487214) < 1e-10",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def areEquivalent(numerator, denominator):\n    # Calculate the sum of divisors for numerator and denominator\n    sum_numerator = sum(i for i in range(1, numerator + 1) if numerator % i == 0)\n    sum_denominator = sum(i for i in range(1, denominator + 1) if denominator % i == 0)\n\n    # Compare the sums\n    return sum_numerator == sum_denominator",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_char_position(input_string):\n    # Initialize variables to store counts for lowercase and uppercase positions\n    lower_count = 0\n    upper_count = 0\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is lowercase\n        if char.islower():\n            lower_count += 1\n        else:\n            # If it's an uppercase letter, check its position relative to the English alphabet\n            index = ord(char) - ord('A')\n            if 0 <= index < 26:\n                upper_count += 1\n                \n    # Return the sum of lower case and upper case counts\n    return lower_count + upper_count",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef find_even_Pair(nums: List[int], target: int) -> int:\n    ans = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] ^ nums[j] == target and (nums[i] & nums[j]) != target:\n                ans += 1\n    return ans",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'next_Power_Of_2' is not defined",
      "Test 2: FAIL - name 'next_Power_Of_2' is not defined",
      "Test 3: FAIL - name 'next_Power_Of_2' is not defined"
    ],
    "generated_code": "def next_power_of_two(n):\n    # If n is less than 1, return 1 as it's the smallest power of two\n    if n < 1:\n        return 1\n    \n    # Calculate the next power of two using bit manipulation\n    return 1 << (n - 1).bit_length()\n\n# Test cases\nprint(next_power_of_two(0))  # Expected output: 1\nprint(next_power_of_two(5))  # Expected output: 8\nprint(next_power_of_two(17)) # Expected output: 32",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr, num):\n    count = arr.count(num)\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_range_list(numbers, start_index, end_index):\n    return sum(numbers[start_index:end_index+1])",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_pentagon(side_length):\n    # Calculate the perimeter of a pentagon with side length 'side_length'\n    return 5 * side_length",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_occurance(string):\n    std_count = 0\n    for char in string:\n        if char == \"std\":\n            std_count += 1\n    return std_count\n\n# Test cases\nprint(count_occurance(\"letstdlenstdporstd\")) # Output: 3\nprint(count_occurance(\"truststdsolensporsd\")) # Output: 1\nprint(count_occurance(\"makestdsostdworthit\")) # Output: 2",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def remove_splchar(input_str):\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    return re.sub(r'\\W+', '', input_str)",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_keyvalue(pairs):\n    result = {}\n    for k, v in pairs:\n        if k not in result:\n            result[k] = []\n        result[k].append(v)\n    return result",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n        else:\n            # Ignore invalid characters\n            continue\n    \n    return len(stack) == 0",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perimeter_triangle(a, b, c):\n    # Calculate the perimeter of the triangle using Heron's formula\n    s = (a + b + c) / 2\n    return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - UnboundLocalError: local variable 'lcm' referenced before assignment"
    ],
    "generated_code": "def answer(lcm_range, lower_bound, upper_bound):\n    \"\"\"\n    Finds two distinct numbers whose least common multiple is in the specified range.\n    \n    Parameters:\n    - lcm_range (tuple): A tuple of two integers representing the minimum and maximum values for the lcm.\n    - lower_bound (int): The lower bound for the range.\n    - upper_bound (int): The upper bound for the range.\n    \n    Returns:\n    - tuple: Two integers whose least common multiple falls between the lower_bound and upper_bound.\n    \"\"\"\n    # Function to calculate the greatest common divisor (GCD)\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n    \n    # Loop through all possible pairs to check if they meet the condition\n    for num1 in range(lower_bound, upper_bound + 1):\n        for num2 in range(num1 + 1, upper_bound + 1):\n            if lcm := num1 * num2 // gcd(num1, num2) >= lcm_range[0] and lcm <= lcm_range[1]:\n                return (num1, num2)\n\n# Check function with provided data points\nassert answer((6, 12), 2, 5) == (2, 4)\nassert answer((6, 12), 4, 10) == (3, 6)\nassert answer((6, 12), 1, 9) == (3, 6)\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_literals(strings, target):\n    for i in range(len(target)):\n        if target[:i+1] == strings[0]:\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 2 failed"
    ],
    "generated_code": "def is_num_keith(num):\n    \"\"\"\n    This function checks if a given number 'num' is a Keith Number.\n    \n    A Keith Number is defined as an n-digit number which remains unchanged when it is inserted at each step into a growing arithmetic progression consisting of its digits and initial terms up to the nth term.\n    \"\"\"\n    # Initialize the sequence with the digit(s)\n    sequence = [int(digit) for digit in str(num)]\n    while len(sequence) < num:\n        next_term = sum(sequence[-num:])\n        sequence.append(next_term)\n    \n    # Check if inserting the next term into the sequence doesn't change the sequence length\n    return len(sequence) == num\n\n# Test cases to verify the correctness of the function\nassert is_num_keith(14) == True, \"Test case 1 failed\"\nassert is_num_keith(12) == False, \"Test case 2 failed\"\nassert is_num_keith(197) == True, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371 # Radius of the Earth in kilometers\n    dLat = math.radians(lat2-lat1)\n    dLon = math.radians(lon2-lon1)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    distance = R * c\n    return distance",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_prefix(strs, length):\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as initial prefix.\n    prefix = strs[0][:length]\n    \n    for i in range(1, len(strs)):\n        while strs[i].find(prefix) != 0:\n            # If the prefix is not a common prefix, reduce it until it matches or becomes empty.\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases\nprint(common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4))  # Expected output: 'ta'\nprint(common_prefix([\"apples\", \"ape\", \"april\"], 3))                  # Expected output: 'ap'\nprint(common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3))           # Expected output: 'teen'",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_character(text):\n    uppercase = re.findall(r'[A-Z]', text)\n    lowercase = re.findall(r'[a-z]', text)\n    special_characters = re.findall(r'[^a-zA-Z0-9]', text)\n    numbers = re.findall(r'\\d', text)\n    \n    return (uppercase, lowercase, special_characters, numbers)\n\n# Test cases\nprint(find_character(\"ThisIsGeeksforGeeks\"))  # Expected output: (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nprint(find_character(\"Hithere2\"))              # Expected output: (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nprint(find_character(\"HeyFolks32\"))            # Expected output: (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_pairs(arr, k, v):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] - v == k:\n            count += 1\n        elif arr[i] + v == k:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def greater_specificnum(lst, num):\n    return all(x > num for x in lst)",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_focus(a,b,c):\n    # Calculate and return the focus of the parabola given its coefficients\n    return (-b/a, -c/(a*4))\n\n# Test the function with provided data points\nprint(parabola_focus(5,3,2)) # Expected output: (-0.6, 1.6)\nprint(parabola_focus(9,8,4)) # Expected output: (-0.4444444444444444, 2.25)\nprint(parabola_focus(2,4,6)) # Expected output: (-1.0, 4.125)",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return \"Matched!\"\n    return \"Not Matched!\"\n\n# Test cases\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['fox'])) # Should print \"Matched!\"\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['horse'])) # Should print \"Not Matched!\"\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['lazy'])) # Should print \"Matched!\"",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_common_subsequence(seq1, seq2, l1, l2):\n    # Create a matrix with extra rows and columns for base case handling\n    dp = [[0] * (l2 + 1) for _ in range(l1 + 1)]\n    \n    # Fill the matrix from bottom-right corner to top-left corner\n    for i in range(1, l1 + 1):\n        for j in range(1, l2 + 1):\n            if seq1[i - 1] == seq2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                \n    # The length of the longest common subsequence is at dp[l1][l2]\n    return dp[l1][l2]\n\n# Example usage:\nprint(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7))  # Output: 4\nprint(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6))   # Output: 3\nprint(longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4))       # Output: 2)",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef prod_Square(n):\n    # Calculate the integer square root of n\n    sqrt_n = int(math.sqrt(n))\n    \n    # Check if the square of sqrt_n is less than or equal to n\n    while sqrt_n * sqrt_n <= n:\n        # Check if the remainder when divided by sqrt_n squared equals zero\n        if n % (sqrt_n ** 2) == 0:\n            return True\n        else:\n            sqrt_n += 1\n    \n    return False",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'first_Missing_Positive' is not defined",
      "Test 2: FAIL - name 'first_Missing_Positive' is not defined",
      "Test 3: FAIL - name 'first_Missing_Positive' is not defined"
    ],
    "generated_code": "def first_missing_positive(nums):\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i]-1] != nums[i]:\n            swap(nums, i, nums[i]-1)\n    \n    for i in range(n):\n        if nums[i] != i+1:\n            return i + 1\n    \n    return n + 1\n\ndef swap(nums, x, y):\n    temp = nums[x]\n    nums[x] = nums[y]\n    nums[y] = temp",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    # Calculate the area of the rectangle formed by (x1,y1), (x2,y1), (x2,y2), and (x1,y2)\n    total_area = abs((x2 - x1) * (y2 - y1))\n    \n    # Calculate the side length of the smaller dimension of the rectangle\n    side_length = min(abs(x2 - x1), abs(y2 - y1))\n    \n    # Calculate the maximum possible integer coordinates within the rectangle\n    max_int_coordinates = int(side_length / 2) + 1\n    \n    # Return the product of total area and maximum integer coordinates\n    return total_area * max_int_coordinates",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumber(month_name):\n    \"\"\"\n    This function checks if the provided month name has exactly 30 days.\n    \n    Args:\n        month_name (str): The name of the month to be checked.\n        \n    Returns:\n        bool: True if the month has 30 days, False otherwise.\n    \"\"\"\n    month_days = {'January': 31, 'March': 31, 'May': 31, 'July': 31,\n                  'August': 31, 'October': 31, 'December': 31,\n                  'April': 30, 'June': 30, 'September': 30, 'November': 30}\n    return month_days.get(month_name, -1) == 30",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_String(input_string):\n    \"\"\"\n    Check if the input string contains at least one alphabetical character and one numeric digit.\n    \n    Parameters:\n    - input_string (str): The string to be checked\n    \n    Returns:\n    - bool: True if the string contains both an alphabet and a digit, False otherwise.\n    \"\"\"\n    # Check for alphabets in the string\n    has_alpha = any(c.isalpha() for c in input_string)\n    \n    # Check for digits in the string\n    has_digit = any(c.isdigit() for c in input_string)\n    \n    # Return True if both conditions are met, else False\n    return has_alpha and has_digit\n\n# Test Cases\nprint(check_String('thishasboth29'))  # Expected output: True\nprint(check_String('python'))         # Expected output: False\nprint(check_String('string'))         # Expected output: False",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuple(input_tuple):\n    # Convert the tuple to a set to automatically remove duplicates\n    unique_elements = set(input_tuple)\n    # Convert the set back to a tuple and return it\n    return tuple(unique_elements)\n\n# Test cases\nprint(remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)))  # Expected output: (1, 2, 3, 5)\nprint(remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)))  # Expected output: (2, 3, 4, 5, 6, 7, 8)\nprint(remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)))  # Expected output: (11, 12, 13, 14)",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def octal_To_Decimal(octal_str):\n    # Convert the given octal string to decimal and return the result.\n    return int(octal_str, 8)",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first(arr, key, n):\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == key and (mid == 0 or arr[mid-1] != key):\n            return mid\n        elif arr[mid] >= key:\n            high = mid - 1\n        else:\n            low = mid + 1\n            \n    return -1\n\n# Test cases\nprint(first([1,2,3,4,5,6,6], 6, 6)) # Expected output: 5\nprint(first([1,2,2,2,3,2,2,4,2], 2, 9)) # Expected output: 1\nprint(first([1,2,3], 1, 3)) # Expected output: 0",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuples(tuples_list, k):\n    # Filter out tuples whose lengths match 'k'\n    result = [tup for tup in tuples_list if len(tup) != k]\n    return result",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_exponentio(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        temp_result = 1\n        for j in range(len(tup2)):\n            temp_result *= tup1[i] ** tup2[j]\n        result.append(temp_result)\n    return tuple(result)\n\n# Test cases\nprint(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))) # Expected output: (100000, 4096, 78125, 7776)\nprint(find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))) # Expected output: (1771561, 78125, 1679616, 117649)\nprint(find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))) # Expected output: (35831808, 1679616, 40353607, 2097152)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: math domain error"
    ],
    "generated_code": "from math import sqrt\n\ndef largest_triangle(a, b):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in an ellipse with semi-major axis 'a' and semi-minor axis 'b'.\n    \n    Args:\n    a (float): Semi-major axis of the ellipse.\n    b (float): Semi-minor axis of the ellipse.\n    \n    Returns:\n    float: The area of the largest inscribed triangle.\n    \"\"\"\n    # Calculating the radius of the circle that circumscribes the triangle\n    r = min(sqrt(a**2 - b**2), sqrt(b**2 - a**2)) / 2\n    \n    # Area calculation for the largest inscribed triangle\n    area = sqrt((a * b) / ((a - b) + 2 * r))\n    \n    return round(area, 5)\n\n# Check function with provided data points\nassert largest_triangle(4, 2) == 10.39230, \"Test case 1 failed\"\nassert largest_triangle(5, 7) == 4.63942, \"Test case 2 failed\"\nassert largest_triangle(9, 1) == 105.22210, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 less than or equal to n.\n    \n    Args:\n        n (int): A non-negative integer\n    \n    Returns:\n        int: The highest power of 2 less than or equal to n.\n    \"\"\"\n    i = 0\n    while 2**i <= n:\n        i += 1\n    return 2**(i-1)",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def position_max(lst):\n    max_index = lst.index(max(lst))\n    return [max_index] + [i for i, x in enumerate(lst) if x == max(lst)]",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(lst):\n    # Check if all elements in the list are equal\n    return len(set(lst)) <= 1",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'l'"
    ],
    "generated_code": "def remove_even(s):\n    return ''.join([c for c in s if not c.isdigit() and int(c) % 2 != 0])",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hamming_Distance(x, y):\n    # Calculate the XOR of x and y, then calculate the sum of the binary representation lengths minus the length of the XOR result\n    xor_result = x ^ y\n    return bin(xor_result).count('1')\n\n# Test cases\nprint(hamming_Distance(4,8))  # Output should be 2\nprint(hamming_Distance(2,4))  # Output should be 2\nprint(hamming_Distance(1,2))  # Output should be 2",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(s, char):\n    # Initialize counter\n    count = 0\n    \n    # Iterate through each character in the string\n    for c in s:\n        if c == char:\n            # Increment counter on finding the target character\n            count += 1\n            \n    # Return the total count\n    return count",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - AttributeError: 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def inversion_elements(lst):\n    lst.sort()\n    res = []\n    for i in range(len(lst)):\n        if i != 0 and lst[i-1] > lst[i]:\n            res.append(-lst[i])\n        else:\n            res.append(lst[i])\n    return tuple(res)\n\n# Test Cases\nprint(inversion_elements((7, 8, 9, 1, 10, 7))) # Expected output: (-8, -9, -10, -2, -11, -8)\nprint(inversion_elements((2, 4, 5, 6, 1, 7)))   # Expected output: (-3, -5, -6, -7, -2, -8)\nprint(inversion_elements((8, 9, 11, 14, 12, 13))) # Expected output: (-9, -10, -12, -15, -13, -14)",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tuples_list):\n    concatenated_tuples = []\n    for tuple_ in tuples_list:\n        i = 0\n        while i < len(tuple_) - 1:\n            concatenated_tuples.append(tuple_[i] + tuple_[i+1])\n            i += 1\n    return concatenated_tuples",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef find_longest_repeating_subseq(s):\n    dp = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            subseq = s[i:j]\n            if subseq == subseq[::-1] and dp[subseq]:\n                dp[s[:i]] += 1\n    max_length = 0\n    for seq, count in dp.items():\n        if count > 1:\n            max_length = max(max_length, len(seq))\n    return max_length\n\n# Test cases\nprint(find_longest_repeating_subseq(\"AABEBCDD\"))  # Output: 3\nprint(find_longest_repeating_subseq(\"aabb\"))      # Output: 2\nprint(find_longest_repeating_subseq(\"aab\"))       # Output: 1",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef is_decimal(s):\n    \"\"\"\n    Check if the string s represents a valid floating-point number.\n    \n    Parameters:\n    s (str): The string to be checked.\n    \n    Returns:\n    bool: True if s is a valid floating-point number, False otherwise.\n    \"\"\"\n    pattern = r'^[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?$'\n    return bool(re.match(pattern, s))\n\n# Test cases\nprint(is_decimal('123.11'))  # Expected output: True\nprint(is_decimal('0.21'))    # Expected output: True\nprint(is_decimal('123.1214'))# Expected output: False",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'NoneType' and 'int'"
    ],
    "generated_code": "import heapq\ndef heap_replace(heap, new_item):\n    \"\"\"\n    Replaces the smallest element in the heap with a new_item and returns the modified heap.\n    \n    Parameters:\n    - heap (list): The original heap data structure.\n    - new_item: The new item to replace the smallest element with.\n    \n    Returns:\n    - list: The heap after replacing the smallest element with the new item.\n    \"\"\"\n    # Replace the first element with the new item\n    heap[0] = new_item\n    return heapq.heapreplace(heap, None)\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    assert heap_replace([25, 44, 68, 21, 39, 23, 89], 21) == [21, 25, 23, 44, 39, 68, 89], \"Test case 1 failed\"\n    assert heap_replace([25, 44, 68, 21, 39, 23, 89], 110) == [23, 25, 68, 44, 39, 110, 89], \"Test case 2 failed\"\n    assert heap_replace([25, 44, 68, 21, 39, 23, 89], 500) == [23, 25, 68, 44, 39, 500, 89], \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_allowed_specific_char(s):\n    # Regular expression pattern to match strings containing only lowercase letters, uppercase letters, digits, and whitespace\n    pattern = r'^[a-zA-Z0-9 ]+$'\n    \n    # Using fullmatch method from regular expressions to check if the entire string matches the pattern\n    if re.fullmatch(pattern, s):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_Num() missing 1 required positional argument: 'nth_bit'",
      "Test 2: FAIL - count_Num() missing 1 required positional argument: 'nth_bit'",
      "Test 3: FAIL - count_Num() missing 1 required positional argument: 'nth_bit'"
    ],
    "generated_code": "def count_Num(oth_bit, nth_bit):\n    # Initialize the counter\n    count = 0\n    \n    # Iterate through all numbers from 1 to 2^n - 1\n    for i in range(1, 2**nth_bit):\n        # Check if both bits at position 'oth_bit' and 'nth_bit' are set\n        if ((i >> oth_bit) & 1) + ((i >> nth_bit) & 1) == 1:\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\n    # Calculate the sum of the fourth powers of the first n natural numbers\n    result = sum(i**4 for i in range(1, n+1))\n    return result",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_strings(tuple1, tuple2):\n    # Concatenate two lists of strings\n    result = [item for sublist in zip(tuple1, tuple2) for item in sublist]\n    return tuple(result)",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def degree_radian(rad):\n    deg = rad * 180 / math.pi\n    return deg",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decode_list(encoded):\n    result = []\n    i = 0\n    while i < len(encoded):\n        if isinstance(encoded[i], int) and isinstance(encoded[i+1], int):\n            count = encoded[i]\n            value = encoded[i+1]\n            for _ in range(count):\n                result.append(value)\n            i += 2\n        else:\n            result.append(encoded[i])\n            i += 1\n    return result",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_subset_list(nested_lst1, nested_lst2):\n    \"\"\"\n    This function checks if all elements in the first nested list are contained within the second nested list.\n    \n    Parameters:\n    nested_lst1 (list): The outermost list which contains sublists.\n    nested_lst2 (list): Another nested list for comparison with nested_lst1.\n    \n    Returns:\n    bool: True if nested_lst1 is a subset of nested_lst2, False otherwise.\n    \"\"\"\n    return all(sub in nested_lst2 for sub in nested_lst1)",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return '\\0'",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_Operations(a, b):\n    # Calculate the difference between the two numbers\n    diff = abs(a - b)\n    \n    # If one number is zero, no operation is needed\n    if a == 0 or b == 0:\n        return diff\n    \n    # Calculate the maximum of the two numbers\n    max_num = max(a, b)\n    \n    # Calculate the number of operations needed to make both numbers equal to max_num\n    operations_needed = max_num - min(a, b)\n    \n    return operations_needed",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "from typing import List\ndef extract_min_max(arr: List[int], k: int) -> List[int]:\n    arr.sort()\n    return arr[-k:], arr[:k]",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def replace_max_specialchar(s,n):\n    return s.replace('.',':').replace(',',':').replace(' ',':')\n\n# Test cases\nprint(replace_max_specialchar('Python language, Programming language.',2))  # Expected output: 'Python:language: Programming language.'\nprint(replace_max_specialchar('a b c,d e f',3))  # Expected output: 'a:b:c:d e f'\nprint(replace_max_specialchar('ram reshma,ram rahim',1))  # Expected output: 'ram:reshma,ram rahim'",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_type(input_tuple):\n    first_type = type(input_tuple[0])\n    for element in input_tuple:\n        if type(element) != first_type:\n            return False\n    return True\n\n# Test cases\nprint(check_type((5, 6, 7, 3, 5, 6)))  # Expected output: True\nprint(check_type((1, 2, \"4\")))         # Expected output: False\nprint(check_type((3, 2, 1, 4, 5)))     # Expected output: True",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_majority(arr, n, k):\n    count = 0\n    max_count = 0\n    max_index = -1\n    \n    # Traverse through the array to find the maximum occurrence of 'k'\n    for i in range(n):\n        if arr[i] == k:\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_index = i\n        else:\n            count = 0\n            \n    # Check if there's at least one instance of 'k' more than half\n    mid = len(arr) // 2\n    if mid + 1 <= max_index and mid < max_index and arr[mid] != k:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    \"\"\"\n    Counts the number of 1s in the binary representation of n.\n    \n    Parameters:\n    n (int): The integer whose set bits are to be counted.\n    \n    Returns:\n    int: The number of set bits in n.\n    \"\"\"\n    count = 0\n    while n:\n        n &= n - 1  # Remove the rightmost set bit\n        count += 1\n    return count",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Min(arr, start, end):\n    # Base case: if the subarray has one element\n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) // 2\n    \n    # If the middle element is greater than the last element, the smallest element is in the right part\n    if arr[mid] > arr[end]:\n        return find_Min(arr, mid + 1, end)\n    \n    # Otherwise, the smallest element is in the left part including mid\n    else:\n        return find_Min(arr, start, mid)\n\n# Test cases\nprint(find_Min([1,2,3,4,5], 0, 4))  # Expected output: 1\nprint(find_Min([4,6,8], 0, 2))      # Expected output: 4\nprint(find_Min([2,3,5,7,9], 0, 4))  # Expected output: 2",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(input_str):\n    result = ''\n    for i in range(len(input_str)):\n        if i % 2 == 0:\n            result += input_str[i]\n    return result",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(number, start_index, end_index):\n    # Calculate the number of bits needed for the range [start_index, end_index]\n    num_bits_needed = max(end_index - start_index + 1, 0)\n    \n    # Shift right the number so that the least significant 'num_bits_needed' bits are aligned with the start index\n    shifted_number = number >> start_index\n    \n    # Check if every bit in the leftmost 'num_bits_needed' positions is zero\n    for i in range(num_bits_needed):\n        if (shifted_number & (1 << i)) != 0:\n            return False\n            \n    return True",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_arrange_array(arr, n):\n    # Separate negative and non-negative numbers into two lists\n    neg = [num for num in arr if num < 0]\n    pos = [num for num in arr if num >= 0]\n\n    # Concatenate the list of negative numbers with the list of positive numbers\n    result = neg + pos\n\n    # Return the resulting array\n    return result[:n]  # Return the first 'n' elements from the result array",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(input_str, replacement_char):\n    return input_str.replace(' ', replacement_char)",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum(triangle, n):\n    \"\"\"\n    Finds the maximum sum of a right triangle in the given triangle array.\n    \n    :param triangle: List[List[int]] - A list of lists representing a right-angled triangle where each row has one more element than the previous row.\n    :param n: int - The number of rows in the triangle.\n    :return: int - The maximum sum of a right triangle.\n    \"\"\"\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]\n\n# Test cases\nprint(max_sum([[1], [2,1], [3,3,2]], 3)) # Expected output: 6\nprint(max_sum([[1], [1, 2], [4, 1, 12]], 3)) # Expected output: 15\nprint(max_sum([[2], [3,2], [13,23,12]], 3)) # Expected output: 28",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def larg_nnum(data, n):\n    data.sort(reverse=True)\n    return data[:n]\n\n# Test cases\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2))  # Expected output: [100, 90]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5))  # Expected output: [100, 90, 80, 70, 60]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3))  # Expected output: [100, 90, 80]",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \n    Args:\n        radius (float): The radius of the cylinder's base.\n        height (float): The height of the cylinder.\n        \n    Returns:\n        float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height\n\n# Test cases\nprint(lateralsuface_cylinder(10,5)) # Expected output: 314.15000000000003\nprint(lateralsuface_cylinder(4,5)) # Expected output: 125.66000000000001\nprint(lateralsuface_cylinder(4,10)) # Expected output: 251.32000000000002",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(side_length):\n    return side_length ** 3",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def even_bit_set_number(number):\n    # Shift the bits of the number two positions to the left\n    # This effectively adds an extra bit at the least significant position\n    # The result is a binary representation with every other bit set to 1,\n    # which represents the numbers from 0 to 6 in their binary form.\n    shifted_bits = ((number << 2) >> 1)\n    return shifted_bits\n\n# Test cases to verify the correctness of the function\nassert even_bit_set_number(10) == 10, \"Test case 1 failed\"\nassert even_bit_set_number(20) == 30, \"Test case 2 failed\"\nassert even_bit_set_number(30) == 30, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'No_of_Triangle' is not defined",
      "Test 2: FAIL - name 'No_of_Triangle' is not defined",
      "Test 3: FAIL - name 'No_of_Triangle' is not defined"
    ],
    "generated_code": "def no_of_triangle(n, k):\n    # If n is less than k, there cannot be any equilateral triangles\n    if n < k:\n        return -1\n    \n    # The formula for finding the maximum number of equilateral triangles in an equilateral triangle with side length 'n' and using 'k' points as vertices is derived from combinatorial geometry.\n    result = int((n * (n - 1) // 2) ** 2)\n    \n    # Calculate the number of possible sets of 3 points out of 'k'\n    ways_to_choose_3_points = n * (n - 1) * (n - 2) // 6\n    \n    # Subtracting the number of sets where all three points do not form an equilateral triangle gives us the desired result.\n    total_possible_sets = ways_to_choose_3_points + ((n - 2) * (n - 1)) // 2\n    \n    return min(result, total_possible_sets)\n\n# Test Cases\nprint(no_of_triangle(4, 2))  # Expected output: 7\nprint(no_of_triangle(4, 3))  # Expected output: 3\nprint(no_of_triangle(1, 3))  # Expected output: -1",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\nfrom typing import List, Tuple\n\ndef check_occurences(tuples_list: List[Tuple[int]]) -> dict:\n    \"\"\"\n    This function takes a list of tuples as input and returns a dictionary where each key is a tuple \n    representing the occurrence of similar timestamps, and the value is the count of such occurrences.\n    \n    :param tuples_list: A list of tuples with integer elements.\n    :return: A dictionary mapping each tuple to its frequency of occurrence.\n    \"\"\"\n    occurence_count = defaultdict(int)\n    for t in tuples_list:\n        # Convert tuple to string representation so it can be used as a key in defaultdict\n        occurence_key = str(sorted(t))\n        occurence_count[occurence_key] += 1\n    \n    result_dict = {}\n    for k, v in occurence_count.items():\n        if v > 1:\n            result_dict[k] = v\n            \n    return result_dict",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def number_of_substrings(s):\n    # Initialize variables\n    n = len(s)\n    total = 0\n    \n    # Iterate through all possible starting indices for substrings\n    for i in range(n):\n        current_count = 1\n        \n        # Calculate length of substring ending at each index\n        end_index = i + 1\n        while end_index <= n:\n            current_count *= end_index\n            end_index += 1\n        \n        total += current_count - 1  # Subtract 1 because we don't want empty strings\n\n    return total\n\n# Test cases\nprint(number_of_substrings(\"abc\"))  # Expected output: 6\nprint(number_of_substrings(\"abcd\")) # Expected output: 10\nprint(number_of_substrings(\"abcde\"))# Expected output: 15",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from math import factorial\n\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    Calculate the total number of sequences of length n where each element is \n    greater than or equal to twice its predecessor and not exceeding m.\n    \n    Args:\n    - n: An integer representing the length of the sequence.\n    - m: An integer representing the maximum value for an element in the sequence.\n    \n    Returns:\n    - An integer representing the total number of valid sequences.\n    \"\"\"\n    def choose_with_lower_limit(limit):\n        return factorial(2*n)//factorial(n)*m**n\n    \n    return choose_with_lower_limit(m)",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_list(original_list, new_elements):\n    \"\"\"\n    Replace the last element in the original list 'original_list' with the elements from 'new_elements'.\n    \n    Parameters:\n    original_list (list): The original list whose last element is going to be replaced.\n    new_elements (list): The list containing elements to replace the last element of the original list.\n    \n    Returns:\n    list: A new list where the last element of 'original_list' has been replaced with the elements from 'new_elements'.\n    \"\"\"\n    # Copying all elements except the last one\n    modified_list = original_list[:-1]\n    # Appending the new elements to the copied list\n    modified_list.extend(new_elements)\n    return modified_list\n\n# Test cases\nprint(replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]))  # Expected output: [1, 3, 5, 7, 9, 2, 4, 6, 8]\nprint(replace_list([1, 2, 3, 4, 5], [5, 6, 7, 8]))     # Expected output: [1, 2, 3, 4, 5, 6, 7, 8]\nprint(replace_list([\"red\", \"blue\", \"green\"], [\"yellow\"]))  # Expected output: [\"red\", \"blue\", \"yellow\"]",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - array_3d() takes 1 positional argument but 3 were given",
      "Test 2: FAIL - array_3d() takes 1 positional argument but 3 were given",
      "Test 3: FAIL - array_3d() takes 1 positional argument but 3 were given"
    ],
    "generated_code": "def array_3d(dims):\n    \"\"\"\n    Generates a 3-dimensional list of dimensions specified in 'dims' where each dimension is defined by 'dim'.\n    \n    Parameters:\n        dims (list): A list containing three integers representing the depth, height, and width respectively.\n        \n    Returns:\n        list: A nested list with the given dimensions filled with '*'.\n    \"\"\"\n    return [[[ '*' for _ in range(dims[2])] for _ in range(dims[1])] for __ in range(dims[0])]\n\n# Test cases\nprint(array_3d([6, 4, 3]))\nprint(array_3d([5, 3, 4]))\nprint(array_3d([1, 2, 3]))",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(input_string):\n    return len(input_string)",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef sort_on_occurence(lst):\n    # Dictionary to store the occurrences and items associated with each first element tuple\n    counter = defaultdict(list)\n    \n    for i in lst:\n        counter[i[0]].append(i)\n    \n    # Sorts tuples within lists by their count, then lexicographically\n    sorted_lst = [tuple(sorted(items, key=lambda x: (-x.count(1), x))) for items in counter.values()]\n    \n    return sorted_lst",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    Finds the smallest perfect square larger than n.\n    \n    Parameters:\n    n (int): The input integer\n    \n    Returns:\n    int: The next perfect square after n\n    \"\"\"\n    # Calculate the square root of n and round up to get the smallest integer greater than or equal to sqrt(n)\n    r = math.ceil(math.sqrt(n))\n    # Return the square of this integer\n    return r * r",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_sum(arr: List[int], k: int) -> int:\n    n = len(arr)\n    dp = [[-float('inf')] * n for _ in range(2)]\n    \n    # Initialize the first row and column\n    dp[0][0] = arr[0]\n    for i in range(1, n):\n        if i == 1:\n            dp[1][0] = arr[i]\n        else:\n            dp[1][i] = max(dp[0][i - 1] + arr[i], dp[1][i - 1])\n        \n    # Fill the rest of the DP table\n    for col in range(1, n // 2 + 1):\n        temp = [arr[n - 1]] * n\n        for j in range(n - 2, -1, -1):\n            if j == n - 2:\n                temp[j] = max(dp[0][j + 1] + arr[j], dp[1][j + 1])\n            else:\n                temp[j] = max(dp[0][j + 1] + arr[j], dp[1][j + 1], dp[1][j] + arr[j])\n            dp[col & 1][j] = temp[j]\n            \n    return dp[k & 1][-1]",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a given number using the Babylonian Method.\n    \n    Parameters:\n    - number: The number to find the square root of.\n    \n    Returns:\n    The square root of the input number as a float.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number.\")\n    \n    guess = number / 2.0\n    while abs(guess * guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2.0\n    \n    return guess",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lps(input_str):\n    \"\"\"\n    Finds the length of the longest palindromic subsequence within the given string.\n    \n    Args:\n    input_str : str - The string for which to find the longest palindromic subsequence.\n    \n    Returns:\n    int - The length of the longest palindromic subsequence.\n    \"\"\"\n    dp = [[0] * len(input_str) for _ in range(len(input_str))]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(len(input_str)):\n        dp[i][i] = 1\n    \n    start, end = 0, 1\n    \n    # Fill dp table\n    for cl in range(2, len(input_str) + 1):\n        for i in range(len(input_str) - cl + 1):\n            j = i + cl - 1\n            if input_str[i] == input_str[j]:\n                if cl == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n                \n    return dp[0][len(input_str) - 1]\n\n# Check function with provided data points\nprint(lps(\"TENS FOR TENS\"))  # Expected output: 5\nprint(lps(\"CARDIO FOR CARDS\"))  # Expected output: 7\nprint(lps(\"PART OF THE JOURNEY IS PART\"))  # Expected output: 9",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def harmonic_sum(n):\n    total = 0\n    for i in range(1, n):\n        total += 1 / i\n    return total",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\n# Test cases\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))  # Output: [1, 2, 8, 9]\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))  # Output: [3, 5, 7, 9]\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))  # Output: [10]",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(tup, x):\n    # Initialize counter for occurrences\n    occurrence_count = 0\n    \n    # Iterate through each item in the tuple\n    for item in tup:\n        # If the current item matches the target value\n        if item == x:\n            # Increment the occurrence counter\n            occurrence_count += 1\n            \n    # Return the number of occurrences found\n    return occurrence_count",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def insert_element(lst, char):\n    for i in range(len(lst)):\n        lst.insert(i + 1, char)\n    return lst",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def convert(complex_num):\n    \"\"\"\n    Convert a given complex number into its polar representation.\n    \n    Args:\n    complex_num (complex): The input complex number\n    \n    Returns:\n    tuple: A tuple containing two elements:\n           - magnitude (float): The magnitude of the complex number in polar form\n           - angle_in_degrees (float): The angle in degrees of the complex number in polar form\n    \"\"\"\n    import cmath\n    magnitude = abs(complex_num)\n    angle = cmath.phase(complex_num)\n    angle_in_degrees = cmath.phase(complex_num) * (180 / cmath.pi)\n    return (magnitude, angle_in_degrees)\n\n# Check function with provided data points\nprint(convert(1))   # Expected output: (1.0, 0.0)\nprint(convert(4))   # Expected output: (4.0, 0.0)\nprint(convert(5))   # Expected output: (5.0, 0.0)",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(lst):\n    # Initialize a counter for counting integer values in the list\n    integer_count = 0\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # Check if the current item is an instance of int type\n        if isinstance(item, int):\n            integer_count += 1\n            \n    # Return the total count of integers found\n    return integer_count",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef words_ae(text):\n    # Use regular expression to find all words that start with 'a' or 'e'\n    return [word for word in re.findall(r'\\b[a-e]\\w+', text)]",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import product\n\ndef combinations_colors(colors, n):\n    \"\"\"\n    Generate all possible combinations with repetitions of given colors taken 'n' at a time.\n    \n    Parameters:\n    colors (list): List of colors as strings.\n    n (int): Number of colors in each combination.\n    \n    Returns:\n    list: All possible combinations of length 'n'.\n    \"\"\"\n    return [''.join(color) for color in product(colors, repeat=n)]\n\n# Test Cases\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)) # Expected: [('Red',), ('Green',), ('Blue',)]\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)) # Expected: [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 3)) # Expected: [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(x, y):\n    return (y, x)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_odd(lst):\n    return sum(1 for x in lst if x % 2 != 0)\n\n# Test cases\nprint(count_odd([1, 2, 3, 5, 7, 8, 10]))  # Expected output: 4\nprint(count_odd([10, 15, 14, 13, -18, 12, -20]))  # Expected output: 2\nprint(count_odd([1, 2, 4, 8, 9]))  # Expected output: 2",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximize_elements(tuples1, tuples2):\n    # Sort each tuple in descending order based on its elements\n    sorted_tuples = [tuple(sorted(elements, reverse=True)) for elements in [tuples1, tuples2]]\n    \n    # Combine and sort them with respect to their first element\n    combined_and_sorted = sorted(zip(sorted_tuples[0], sorted_tuples[1]), key=lambda x: x[0])\n    \n    # Unzip back into separate lists of max values\n    result_list = [(max_value, other_max) for max_value, other_max in combined_and_sorted]\n    \n    # Zip these lists together as per the original ordering\n    final_result = [tuple(max_values) + other_element for max_values, other_element in zip(result_list, [sorted_tuples[1][i] for i in range(len(tuples1))])]\n    \n    return final_result",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def is_newman_shanks_williams_prime(n):\n    \"\"\"\n    Determines if n-th Newman-Shanks-Williams prime exists.\n    \n    Parameters:\n    n (int): The position of the Newman-Shanks-Williams prime to check for existence.\n    \n    Returns:\n    bool: True if there exists an N such that p_N is a Newman-Shanks-Williams prime,\n          False otherwise.\n    \"\"\"\n    # Implement logic here to determine if nth Newman-Shanks-Williams prime exists\n    pass\n\ndef newman_prime(n):\n    \"\"\"\n    Finds the nth Newman-Shanks-Williams prime.\n    \n    Parameters:\n    n (int): The order of the prime to be found.\n    \n    Returns:\n    int: The nth Newman-Shanks-Williams prime.\n    \"\"\"\n    count = 0\n    num = 1\n    while True:\n        # Generate numbers until finding a Newman-Shanks-Williams prime\n        result = sum([int(d)**n for d in str(num)])\n        if is_newman_shanks_williams_prime(result):\n            count += 1\n            if count == n:\n                return result\n        num += 1\n\n# Example usage\nprint(newman_prime(3))  # Should print 7\nprint(newman_prime(4))  # Should print 17\nprint(newman_prime(5))  # Should print 41",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef division_elements(tup1: Tuple[int], tup2: Tuple[int]) -> Tuple[int]:\n    result = []\n    for i in range(len(tup1)):\n        if len(tup2) != 0:\n            quotient = tup1[i] / tup2[i]\n            result.append(int(quotient))\n        else:\n            result.append(None)\n    return tuple(result)\n\n# Test cases\nprint(division_elements((10, 4, 6, 9), (5, 2, 3, 3))) # Expected output: (2, 2, 2, 3)\nprint(division_elements((12, 6, 8, 16), (6, 3, 4, 4))) # Expected output: (2, 2, 2, 4)\nprint(division_elements((20, 14, 36, 18), (5, 7, 6, 9))) # Expected output: (4, 2, 6, 2)",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_two_parts(lst, k):\n    return lst[:k], lst[k:]",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dog_age(dog_years):\n    # Dog ages multiply by 7 first before adding the base age of 15 years for puppies under one year old.\n    if dog_years == 1:\n        return 15\n    else:\n        base_age = int(dog_years * 7)\n        remaining_years = dog_years - 1\n        additional_years = base_age + remaining_years * 7\n        final_age = additional_years + 15\n        return final_age",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_split(lst,n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Iterate over the first n odd numbers and add their squares to sum\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    \n    return sum",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_star_num(n):\n    \"\"\"\n    Calculate the n-th star number.\n    \n    A star number is defined as n^3 - (n-1)^3.\n    \n    Parameters:\n    n (int): The position in the sequence of star numbers\n    \n    Returns:\n    int: The n-th star number\n    \"\"\"\n    return n**3 - (n-1)**3",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char):\n    return ord(char)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(n):\n        if (i % 2 == 0 and arr[i] % 2 == 0):\n            total += arr[i]\n    return total",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += (2 * i)**5\n    return total\n\n# Test cases\nprint(even_Power_Sum(2))  # Output: 1056\nprint(even_Power_Sum(3))  # Output: 8832\nprint(even_Power_Sum(1))  # Output: 32",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rear_extract(records):\n    # Extracting and returning the last elements of each tuple in the list\n    return [t[-1] for t in records]\n\n# Test cases\nprint(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]))  # Expected output: [21, 20, 19]\nprint(rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]))  # Expected output: [36, 25, 45]\nprint(rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]))  # Expected output: [14, 36, 56]",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i] - tup2[i])\n    return tuple(result)\n\n# Test Cases\nprint(substract_elements((10, 4, 5), (2, 5, 18)))  # Expected output: (8, -1, -13)\nprint(substract_elements((11, 2, 3), (24, 45 ,16)))  # Expected output: (-13, -43, -13)\nprint(substract_elements((7, 18, 9), (10, 11, 12)))  # Expected output: (-3, 7, -3)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_binomial_Coeff_Sum(n):\n    # Initialize variables\n    total_sum = 0\n    \n    # Iterate through indices from 0 to n\n    for i in range(n + 1):\n        if i % 2 == 0:\n            total_sum += int(binomial_coefficient(i, i))\n    \n    return total_sum\n\n# Helper function to calculate binomial coefficient using a loop\ndef binomial_coefficient(n, k):\n    c = 1\n    for j in range(k):\n        c *= (n - j)\n        c //= (j + 1)\n    return c\n\n# Test cases\nprint(even_binomial_Coeff_Sum(4))  # Expected output: 8\nprint(even_binomial_Coeff_Sum(6))  # Expected output: 32\nprint(even_binomial_Coeff_Sum(2))  # Expected output: 2",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Position(arr, n, pos):\n    # Calculate the total number of elements before removing\n    count = sum(1 for i in arr[:pos] if i > 0)\n    \n    # Return the index of the last removed element\n    return len(arr) - count\n\n# Test cases\nprint(get_Position([2,5,4],3,2))  # Expected output: 2\nprint(get_Position([4,3],2,2))    # Expected output: 2\nprint(get_Position([1,2,3,4],4,1)) # Expected output: 4",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_filter(dict_input, value_to_check):\n    return {key:value for key,value in dict_input.items() if value >= value_to_check}",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_first_elements(tup):\n    first_count = 0\n    for i in range(len(tup)):\n        if isinstance(tup[i], tuple):\n            break\n        else:\n            first_count += 1\n    return first_count\n\n# Test cases\nprint(count_first_elements((1, 5, 7, (4, 6), 10)))  # Output: 3\nprint(count_first_elements((2, 9, (5, 7), 11)))      # Output: 2\nprint(count_first_elements((11, 15, 5, 8, (2, 3), 8))) # Output: 4",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def is_num_decagonal(nth):\n    \"\"\"\n    Calculate the nth decagonal number.\n    \n    Args:\n    nth (int): The position of the decagonal number in the sequence.\n    \n    Returns:\n    int: The nth decagonal number.\n    \"\"\"\n    return nth**2 + 4*nth - 3\n\n# Check function with provided data points\nassert is_num_decagonal(3) == 27, \"Test case 1 failed\"\nassert is_num_decagonal(7) == 175, \"Test case 2 failed\"\nassert is_num_decagonal(10) == 370, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True, i\n    return False, None\n\n# Test cases\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],31)) # Expected output: (True, 3)\nprint(sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61)) # Expected output: (True, 7)\nprint(sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48)) # Expected output: (True, 6)",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_unique(elements):\n    # Check if length of set and list is same\n    return len(set(elements)) == len(elements)",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sub_list(list1, list2):\n    # Use map and lambda to subtract corresponding elements of two lists\n    return list(map(lambda x, y: x - y, list1, list2))",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def validate(n):\n    # Convert number to string for easier iteration and digit extraction\n    str_n = str(n)\n    # Initialize a dictionary to keep track of digit frequencies\n    freq = {}\n    \n    # Iterate over each character in the string representation of n\n    for char in str_n:\n        if char in freq:\n            # If the current digit already exists in the dictionary, increment its count\n            freq[char] += 1\n        else:\n            # Otherwise, initialize its count as 1\n            freq[char] = 1\n    \n    # Check if the absolute difference between the current digit's value and its frequency is greater than 0\n    for value in freq.values():\n        if abs(value - int(value)) > 0:\n            return False\n    return True",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(lst, target):\n    return all(item == target for item in lst)",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match_two_three(\"ac\"))   # Expected output: 'Not matched!'\nprint(text_match_two_three(\"dc\"))   # Expected output: 'Not matched!'\nprint(text_match_two_three(\"abbbba\")) # Expected output: 'Found a match!'",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sub_array_sum_repeated(arr, n, k):\n    arr = list(set(arr))  # Remove duplicates for simplicity\n    dp = [arr[0]] * len(arr)\n    \n    for i in range(1, len(dp)):\n        dp[i] = max(dp[i-1] + arr[i], arr[i])\n        \n    ans = float('-inf')\n    for j in range(len(arr)):\n        curr_sum = dp[j]\n        if k > 1:\n            for m in range(j+1, len(dp)):\n                curr_sum += dp[m]\n                if curr_sum > ans:\n                    ans = curr_sum\n        \n    return ans * k\n\n# Example usage:\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))\nprint(max_sub_array_sum_repeated([-1, 10, 20], 3, 2))\nprint(max_sub_array_sum_repeated([-1, -2, -3], 3, 3))",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def square_Sum(n):\n    total = 0\n    for i in range(n):\n        total += (2 * i + 1) ** 2\n    return total",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - inverse of 6 (mod 4) does not exist",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - inverse of 2 (mod 4) does not exist"
    ],
    "generated_code": "from typing import List\nfrom sympy import mod_inverse\n\ndef modular_inverse(arr: List[int], n: int, p: int) -> int:\n    inv_count = sum(mod_inverse(x, n) == x for x in arr)\n    return inv_count",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Days(year):\n    # Calculate the number of odd days in a given year\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return 0\n    else:\n        return (year % 4)\n\n# Test cases\nprint(odd_Days(100))  # Expected output: 5\nprint(odd_Days(50))   # Expected output: 6\nprint(odd_Days(75))   # Expected output: 2",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'max_len' is not defined",
      "Test 2: FAIL - name 'max_len' is not defined",
      "Test 3: FAIL - name 'max_len' is not defined"
    ],
    "generated_code": "def max_length(lists):\n    return max(len(lst) for lst in lists), [lst for lst in lists if len(lst) == max_len]",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from math import factorial as f\n\ndef count_no_of_ways(n, k):\n    \"\"\"\n    This function calculates the total number of ways to paint a fence consisting of 'n' posts \n    using 'k' colors such that no more than two consecutive posts share the same color.\n    \n    Parameters:\n    n (int): The number of posts in the fence.\n    k (int): The number of available colors.\n    \n    Returns:\n    int: Total number of ways to paint the fence under the given constraints.\n    \"\"\"\n    # Using dynamic programming approach\n    dp = [[0] * k for _ in range(n + 1)]\n    dp[0][0], dp[1][0], dp[1][1] = 1, 1, 2\n    \n    for i in range(2, n + 1):\n        dp[i][0] = dp[i - 1][0]\n        for j in range(1, min(i, k)):\n            dp[i][j] = sum(dp[i - 1][:j])\n    \n    return sum(dp[n])\n\n# Test cases\nprint(count_no_of_ways(2, 4))  # Expected output: 16\nprint(count_no_of_ways(3, 2))  # Expected output: 6\nprint(count_no_of_ways(4, 4))  # Expected output: 228",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(x, y):\n    return x // y",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    This function calculates the length of the third side 'c' of a right-angled triangle,\n    given the lengths of two sides 'a' and 'b'.\n    \n    Parameters:\n    a (float): The length of one side.\n    b (float): The length of another side.\n    \n    Returns:\n    float: The length of the third side.\n    \"\"\"\n    c = math.sqrt(a**2 + b**2)\n    return c",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def max_val(lst):\n    return max(lst)",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def sum_div(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of all its positive divisors.\n    \n    Args:\n    n (int): The number whose divisors will be summed up.\n    \n    Returns:\n    int: The sum of all divisors of n.\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\n# Test Cases\nassert sum_div(8) == 7, \"Test case 1 failed\"\nassert sum_div(12) == 16, \"Test case 2 failed\"\nassert sum_div(7) == 1, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Inv_Count(arr, n): \n    inversion_count = 0\n  \n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                inversion_count += 1\n  \n    return inversion_count",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: argument of type 'int' is not iterable"
    ],
    "generated_code": "def intersection_nested_lists(list_1, list_2):\n    return [[x for x in sublist if x in l] for l in list_1 for sublist in list_2]\n\nprint(intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n                                [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]))\nprint(intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]]))\nprint(intersection_nested_lists(['john', 'amal', 'joel', 'george'],\n                                [['john'], ['jack', 'john', 'mary'], ['howard', 'john'], ['jude']]))\n\n# Expected output:\n# [[12], [7, 11], [1, 5, 8]]\n# []\n# [['john'], ['john'], ['john'], []]",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_aggregate(lst):\n    # Find the tuple with the highest value in the second element of each tuple\n    return max(lst, key=lambda x: x[1])[0], max(lst, key=lambda x: x[1])[1]",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from math import factorial\n\ndef count_binary_seq(n):\n    \"\"\"\n    This function calculates the number of binary sequences of length 2n with equal sums of the first n and last n bits.\n    \n    Args:\n    - n (int): The length of half the sequence.\n    \n    Returns:\n    - float: The total count of such binary sequences.\n    \"\"\"\n    # Calculate the binomial coefficient for selecting 'k' items from 'total_items' items.\n    def binom(total_items, k):\n        if k > total_items // 2:\n            k = total_items - k\n        numerator = 1\n        denominator = 1\n        for i in range(k):\n            numerator *= (total_items - i)\n            denominator *= (i + 1)\n        return int(factorial(numerator) / (factorial(denominator)))\n\n    # Since we need both halves to have equal bit sums, we choose half of the sequence's length to be 'equal_sum'\n    # Then calculate combinations where each side has \"equal_sum\" elements which must be the same.\n    # We then multiply by 2 because there can be two possibilities for the remaining part (\"same\" or \"different\").\n    equal_sum = int((2 * n)**0.5)  # sqrt(2*n), rounded down due to combinatorial properties.\n    result = (binom(2 * n, equal_sum) ** 2) * 2\n\n    return result",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max() arg is an empty sequence",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_depth(d):\n    if not isinstance(d, dict): \n        return 0\n    else:\n        return max(dict_depth(v) for v in d.values()) + 1",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def set_Bit_Number(number):\n    \"\"\"\n    This function finds the largest set bit in a given integer.\n    \n    Args:\n    - number: An integer\n    \n    Returns:\n    - The position of the highest set bit as an integer.\n    \"\"\"\n    max_bit = 0\n    while number > 0:\n        if number & 1 == 1:\n            max_bit += 1\n        number >>= 1\n    return max_bit\n\n# Check function with provided data points\nassert set_Bit_Number(6) == 4, \"Test case 1 failed\"\nassert set_Bit_Number(10) == 8, \"Test case 2 failed\"\nassert set_Bit_Number(18) == 16, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def solve(arr, n):\n    def merge_count(left, right):\n        temp = []\n        i, j = 0, 0\n        inversions_left, inversions_right = 0, 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                temp.append(left[i])\n                i += 1\n            else:\n                temp.append(right[j])\n                inversions_right += len(left) - i\n                \n            inversions_left += len(right) - j\n            \n        temp.extend(left[i:])\n        temp.extend(right[j:])\n        \n        return temp, min(inversions_left, inversions_right)\n    \n    if n % 2 == 1:\n        mid = n // 2 + 1\n    else:\n        mid = n // 2\n    \n    arr1, inv_left = merge_count(arr[:mid], arr[mid:])\n    arr2, inv_right = merge_count(arr[mid:], arr[:mid])\n    \n    return abs(inv_left - inv_right) == n / 2",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Element(nums, queries, idx, n):\n    \"\"\"\n    Find the element in nums located at the position determined by performing 'n' rotations on nums.\n    \n    :param nums: List[int] - The original array.\n    :param queries: List[List[int]] - A list of tuples indicating which rotation we need to apply and where it's happening.\n    :param idx: int - The target index for the rotated element within the array bounds.\n    :param n: int - Number of rotations applied to nums before looking up the value at idx.\n    :return: int - The element at the specified location after applying 'n' rotations.\n    \"\"\"\n    # Apply each query to nums and keep track of the result\n    results = []\n    for rotate_index, rotate_idx in queries:\n        if 0 <= rotate_index + n < len(nums):  # Ensure the rotation is within the valid range\n            new_rotated_nums = nums[(rotate_index + n) % len(nums)]\n            results.append(new_rotated_nums)\n        else:\n            results.append(-1)  # Indicate invalid rotation\n            \n    # Return the element from the last query as the result\n    return results[-1]\n\n# Test cases\nprint(find_Element([1,2,3,4,5], [[0,2],[0,3]], 2, 1))  # Output: 3\nprint(find_Element([1,2,3,4], [[0,1],[0,2]], 1, 2))   # Output: 3\nprint(find_Element([1,2,3,4,5,6], [[0,1],[0,2]], 1, 1))  # Output: 1",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(words_list):\n    # Find the first word in the list that starts with 'p'\n    for word in words_list:\n        if word.startswith('p'):\n            return word.split()  # Splitting the word into individual words and returning them as tuples\n    return None  # Returning None if no matching word is found\n\n\n# Test cases\nprint(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))  # Expected output: ('Python', 'PHP')\nprint(start_withp([\"Python Programming\",\"Java Programming\"]))  # Expected output: ('Python', 'Programming')\nprint(start_withp([\"Pqrst Pqr\",\"qrstuv\"]))  # Expected output: ('Pqrst', 'Pqr')",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum_increasing_subseq(arr, n, k, x):\n    dp = [0] * (n + 1)\n    for i in range(1, n+1):\n        dp[i] = arr[i-1]\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n            if i == k:\n                result = max(dp[1:k])\n    \n    if x <= k:\n        return dp[x]\n    else:\n        return dp[k]\n\n# Test cases\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)) # Output: 11\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5)) # Output: 7\nprint(max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)) # Output: 71",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 2: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 3: FAIL - can only concatenate tuple (not \"list\") to tuple"
    ],
    "generated_code": "def colon_tuplex(tuplex, index, value):\n    # Create a new list containing all elements except at the specified index\n    new_list = tuplex[:index] + [(value,) * len(tuplex[index:-1])] + tuplex[-1:]\n    return tuple(new_list)",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\nfrom typing import List, Tuple\n\ndef large_product(nums1: List[int], nums2: List[int], n: int) -> List[Tuple[int]]:\n    \"\"\"\n    Finds the n largest products between pairs of elements in two lists.\n    \n    Parameters:\n    nums1 (List[int]): The first list of numbers.\n    nums2 (List[int]): The second list of numbers.\n    n (int): The number of largest product pairs to return.\n    \n    Returns:\n    List[Tuple[int]]: A list containing tuples of the n largest products and their indices.\n    \"\"\"\n    # Sort both lists in descending order\n    sorted_nums1 = sorted(nums1, reverse=True)\n    sorted_nums2 = sorted(nums2, reverse=True)\n\n    max_products = []\n    index_map = {num: i for i, num in enumerate(sorted_nums1)}\n    for _ in range(n):\n        try:\n            if sorted_nums1[index_map[sorted_nums2[0]]] == sorted_nums2[0]:\n                del index_map[sorted_nums2[0]]\n            else:\n                break\n        except KeyError:\n            continue\n    \n    current_index = len(index_map) - 1\n    while current_index >= 0:\n        for num2 in sorted_nums2[:len(nums2)]:\n            if index_map[num2] != current_index:\n                max_products.append((nums1[current_index] * num2, (current_index, index_map[num2])))\n                del index_map[num2]\n                break\n        \n        current_index -= 1\n\n    return max_products\n\n\n# Test cases\nprint(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3))  # Expected output: [(60, (2, 4)), (54, (3, 1)), (50, (0, 3))]\nprint(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4))  # Expected output: [(60, (2, 4)), (54, (3, 1)), (50, (0, 3)), (48, (1, 0))]\nprint(large_product([1, 2, 3, 4,",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_tuple(s):\n    return tuple(list(s))",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_left_most_unset_bit(n):\n    # Convert n to binary string representation\n    bin_n = format(n, 'b')\n    # Find the position of the first '0' from the right\n    first_zero_pos = bin_n.rfind('0')\n    # Set the bit at this position to '1'\n    new_value = int(bin_n[:first_zero_pos] + '1' + bin_n[first_zero_pos+1:], 2)\n    return new_value",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cone(radius, height):\n    # Calculate the volume of a cone using the formula (π * radius^2 * height) / 3\n    return (math.pi * radius**2 * height) / 3",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(lst):\n    # Filter out non-positive numbers and return them as a new list\n    return [num for num in lst if num > 0]",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_rectangular_grid(grid, m):\n    # Initialize variables to store results for subproblems and current row sums\n    dp = [[-1] * len(grid[0]) for _ in range(m + 1)]\n    row_sums = [0] * len(grid[0])\n    \n    # Calculate cumulative row sums from bottom to top\n    for i in range(len(grid) - 1, -1, -1):\n        for j in range(len(grid[0])):\n            row_sums[j] += grid[i][j]\n    \n    # Iterate through each possible segment length\n    for k in range(1, min(m, len(row_sums)) + 1):\n        for r in range(k - 1, len(grid)):\n            if r == len(grid) - 1:\n                dp[r][k - 1] = row_sums[k - 1]\n            else:\n                dp[r][k - 1] = row_sums[k - 1] - row_sums[r - k + 1] + dp[r + 1][k - 2]\n    \n    # Return the maximum value found across all valid segments\n    return max(dp[r][m - 1] for r in range(m))\n\n# Test cases to verify the correctness of the solution\nprint(max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3))  # Expected output: 7\nprint(max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5))  # Expected output: 24\nprint(max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5))  # Expected output: 81",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_Max_Len_Even(s):\n    # Find all words in the string\n    words = re.findall(r'\\b\\w+\\b', s)\n    \n    max_len_even_word = -1\n    \n    for word in words:\n        if word.islower() and len(word) % 2 == 0:\n            max_len_even_word = max(max_len_even_word, len(word))\n    \n    return max_len_even_word\n\n# Test cases\nprint(find_Max_Len_Even(\"python language\"))  # Output: \"language\"\nprint(find_Max_Len_Even(\"maximum even length\"))  # Output: \"length\"\nprint(find_Max_Len_Even(\"eve\"))  # Output: \"-1\"",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target and (mid == len(arr) - 1 or arr[mid + 1] != target):\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def modified_encode(arr):\n    if not arr:\n        return []\n    \n    result = []\n    count = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            result.append(count)\n            result.extend(arr[i:i+count])\n            count = 0\n            \n    # Handle the last item\n    result.append(count)\n    result.extend(arr[-count:])\n    \n    return result\n\n# Test cases\nprint(modified_encode([1,1,2,3,4,4,5,1]))  # Output: [[2, 1], 2, 3, [2, 4], 5, 1]\nprint(modified_encode('automatically'))     # Output: ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nprint(modified_encode('python'))           # Output: ['p', 'y', 't', 'h', 'o', 'n']",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_volume(sides_sum):\n    \"\"\"\n    This function takes in the sum of the sides of a cuboid and returns the maximum possible volume.\n    \n    Parameters:\n    sides_sum (int): The sum of the lengths of all sides of the cuboid.\n    \n    Returns:\n    int: The maximum possible volume of the cuboid.\n    \"\"\"\n    # Since the sum of the sides is constant, we can assume that one side is equal to the sum divided by three,\n    # as it would give us the highest possible length for the cuboid's dimensions while keeping the total sides sum fixed.\n    # We then calculate the other two dimensions using basic geometry principles.\n    max_length = sides_sum // 3\n    height = max_length - 1\n    \n    # Calculate the area of the base (one dimension * another)\n    base_area = max_length * (max_length + height)\n    \n    # Return the product of the largest dimension and the base area to get the maximum volume.\n    return max_length * base_area\n\n# Test cases\nprint(max_volume(8))   # Expected output: 18\nprint(max_volume(4))   # Expected output: 2\nprint(max_volume(1))   # Expected output: 0",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_long_word(input_string):\n    # Define a regex pattern for words with exactly 5 letters\n    pattern = r'\\b\\w{5}\\b'\n    \n    # Use the re.findall() method to find all matches of the pattern in the input string\n    result = re.findall(pattern, input_string)\n    \n    return result\n\n# Test cases\nprint(find_long_word('Please move back to strem'))  # Expected output: ['strem']\nprint(find_long_word('4K Ultra HD streaming player'))  # Expected output: ['Ultra']\nprint(find_long_word('Streaming Media Player'))  # Expected output: ['Media']",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_difference(n):\n    # Calculate the sum of squares of the first n natural numbers\n    sum_of_squares = int(n * (n + 1) * (2*n + 1) / 6)\n    \n    # Calculate the square of the sum of the first n natural numbers\n    square_of_sum = int((n * (n + 1) / 2)) ** 2\n    \n    # Return the difference\n    return square_of_sum - sum_of_squares",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def find_demlo(num_str):\n    num_list = list(num_str)\n    result = []\n    while len(num_list) > 1:\n        temp = \"\"\n        for i in range(len(num_list)):\n            temp += str(i + 1)\n        num_list = list(temp)\n    return ''.join(num_list)\n\n# Test cases\nprint(find_demlo(\"111111\"))  # Output: \"12345654321\"\nprint(find_demlo(\"1111\"))    # Output: \"1234321\"\nprint(find_demlo(\"13333122222\"))  # Output: \"123456789101110987654321\"",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_min(lst):\n    # Find the minimum value in the list\n    min_val = min(lst)\n    \n    # Use list comprehension and enumerate() to get indexes where the element equals the minimum value\n    return [index for index, val in enumerate(lst) if val == min_val]\n\n# Test cases\nprint(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54]))  # Expected output: [3, 11]\nprint(position_min([1,2,2,2,4,4,4,5,5,5,5]))  # Expected output: [0]\nprint(position_min([2,1,5,6,8,3,4,9,10,11,8,12]))  # Expected output: [1]",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange(arr, n):\n    result = [None] * n\n    pos = 0\n    neg = 0\n    while pos < len(arr) and neg < len(arr):\n        if arr[pos] >= 0:\n            result[neg] = arr[pos]\n            neg += 2\n        else:\n            result[neg] = arr[pos]\n            neg += 2\n        pos += 1\n    for i in range(neg, len(result)):\n        result[i] = arr[pos + neg]\n        pos += 1\n    return result[:n]\n\n# Test cases\nprint(re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10))  # Output: [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nprint(re_arrange([1, 2, 3, -4, -1, 4], 6))  # Output: [-4, 1, -1, 2, 3, 4]\nprint(re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8))  # Output: [-4, 4, -3, 7, -9, 9, 77, 5]",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def sum_of_alternates(tuples_list):\n    sums = []\n    for i in range(0, len(tuples_list), 2):\n        if i + 1 < len(tuples_list):\n            sums.append(sum(tuples_list[i]))\n    return tuple(sums)\n\n# Test cases\nprint(sum_of_alternates((5, 6, 3, 6, 10, 34))) # Expected output: (46, 18)\nprint(sum_of_alternates((1, 2, 3, 4, 5))) # Expected output: (6, 9)\nprint(sum_of_alternates((6, 7, 8, 9, 4, 5))) # Expected output: (21, 18)",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Min_Squares(n):\n    \"\"\"\n    Find the minimum number of perfect squares whose sum equals n.\n    \n    Args:\n    - n (int): The target sum\n    \n    Returns:\n    - int: The minimum number of perfect squares needed to sum up to n\n    \"\"\"\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        for j in range(int(i**0.5), 0, -1):\n            dp[i] = min(dp[i], dp[i - j*j] + 1)\n            \n    return dp[n]",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "from collections import Counter\n\ndef most_occurrences(string_list):\n    \"\"\"\n    This function takes a list of strings and returns the string with the maximum number of occurrences.\n    \n    Parameters:\n    string_list (list): A list of strings.\n    \n    Returns:\n    str: The string from the list with the highest occurrence count.\n    \"\"\"\n    # Using Counter to count occurrences of each string in the list\n    counts = Counter(string_list)\n    # Finding the key (string) with the maximum value (occurrence count)\n    max_count_str = max(counts.items(), key=lambda x: x[1])[0]\n    return max_count_str\n\n# Example check function to verify the correctness of the solution\ndef check_solution():\n    assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]) == 'UTS', \"Test case 1 failed\"\n    assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"]) == 'year', \"Test case 2 failed\"\n    assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved\"]) == 'can', \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if all sides are equal\n    return a == b and b == c",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(lst, steps=1, n=None):\n    if n is None:\n        n = len(lst)\n    \n    # Normalize steps in case it's larger than array length\n    steps %= n\n    \n    return lst[n - steps:] + lst[:n - steps]\n\n# Example usage and test cases\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4))  # Expected output: [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2))   # Expected output: [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))  # Expected output: [6, 7, 8, 9, 10, 1, 2]",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(nums):\n    # Initialize counter for negative numbers\n    neg_counter = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the current number is negative\n        if num < 0:\n            # Increment the counter if the number is negative\n            neg_counter += 1\n            \n    # Return the total count of negative numbers\n    return neg_counter",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_char(text):\n    pattern = r'\\b\\w{3,5}\\b'\n    matches = re.findall(pattern, text)\n    return matches",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def count_unset_bits(n):\n    # Counting number of set bits in binary representation of n\n    ones = bin(n).count('1')\n    \n    # Subtracting the count from total bits (n+1) to get the unset bits\n    return (n + 1) - ones\n\n# Test cases\nassert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(input_string):\n    from collections import Counter\n    return dict(Counter(input_string))\n\n# Test Cases\nprint(char_frequency('python'))  # Expected output: {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nprint(char_frequency('program'))  # Expected output: {'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nprint(char_frequency('language'))  # Expected output: {'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def sort_by_second_element(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst\n\n# Test Cases\nprint(sort_by_second_element([['a', 10], ['b', 5], ['c', 20], ['d', 15]])) # [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nprint(sort_by_second_element([['452', 10], ['256', 5], ['100', 20], ['135', 15]])) # [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nprint(sort_by_second_element([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])) # [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]])",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Validity(a, b, c):\n    # Check if all sides are positive\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Check the triangle inequality theorem for at least one side\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def ap_sum(start, end, step):\n    \"\"\"\n    Calculate the sum of an arithmetic progression given its first term,\n    last term, and common difference.\n    \n    Parameters:\n    start (int): The first term of the arithmetic progression.\n    end (int): The last term of the arithmetic progression.\n    step (int): The common difference between terms in the sequence.\n    \n    Returns:\n    int: The sum of the arithmetic progression.\n    \"\"\"\n    num_terms = ((end - start) // step) + 1\n    total = num_terms * (start + start + (num_terms - 1) * step) // 2\n    return total\n\n# Test cases\nassert ap_sum(1, 5, 2) == 25\nassert ap_sum(2, 6, 4) == 72\nassert ap_sum(1, 4, 5) == 34\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum(month_name):\n    # Define the number of days for each month except February\n    day_in_months = {\"January\": 31, \"February\": 28, \"March\": 31, \"April\": 30,\n                     \"May\": 31, \"June\": 30, \"July\": 31, \"August\": 31,\n                     \"September\": 30, \"October\": 31, \"November\": 30, \"December\": 31}\n    \n    # Check if the month is January or February and return True or False accordingly\n    if month_name in [\"January\", \"February\"]:\n        return True\n    else:\n        return day_in_months[month_name] == 28",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_word(text):\n    \"\"\"\n    Check if the provided text ends with 'word' followed by an optional period.\n    \n    Args:\n    text (str): The input string to check.\n    \n    Returns:\n    str: \"Found a match!\" if the pattern is found, otherwise \"Not matched!\"\n    \"\"\"\n    # Define the regex pattern to find 'word' followed by an optional period\n    pattern = r'\\w+\\.'\n    # Search for the pattern in the given text\n    result = re.search(pattern, text)\n    # Return appropriate message based on the search outcome\n    return \"Found a match!\" if result else \"Not matched!\"\n\n# Test cases to verify the correctness of the solution\nprint(text_match_word(\"python.\"))   # Expected output: Found a match!\nprint(text_match_word(\"python\"))    # Expected output: Not matched!\nprint(text_match_word(\"lang.\"))     # Expected output: Not matched!\nprint(text_match_word(\"programming.word.\")) # Expected output: Found a match!",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def count_substring_equal_ends(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        # Check if the substring starting at index i has both ends equal to s[i]\n        if s[i] == s[i-1]:\n            # Count how many times this condition is met\n            count += sum(1 for j in range(i+1, n) if s[j] == s[i])\n    \n    return count\n\n# Test cases\nprint(count_substring_equal_ends('aba'))  # Output: 4\nprint(count_substring_equal_ends('abcab'))  # Output: 7\nprint(count_substring_equal_ends('abc'))  # Output: 3",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Divisor(a, b):\n    \"\"\"\n    Finds the maximum occurring divisor within the given range [a, b].\n    \n    Parameters:\n    a (int): The start of the range.\n    b (int): The end of the range.\n    \n    Returns:\n    int: The maximum occurring divisor within the specified range.\n    \"\"\"\n    # Initialize variables to store the most common divisor and its count\n    max_div = -1\n    count_max_div = 0\n    \n    # Loop through each number in the range\n    for i in range(a, b + 1):\n        # Check if the number is divisible by the current candidate divisor\n        for j in range(1, i // 2 + 1):\n            if i % j == 0:\n                # Update the maximum occurring divisor and its count\n                if i % j > max_div:\n                    max_div = i % j\n                    count_max_div = 1\n                elif i % j == max_div:\n                    count_max_div += 1\n                \n    return max_div",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_three_smallest_nums(nums):\n    # Remove duplicates and sort in ascending order\n    sorted_unique_nums = sorted(set(nums))\n    \n    # Sum the first three elements after removing duplicates\n    total_sum = sum(sorted_unique_nums[:3])\n    \n    return total_sum",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_to_tuple(input_set):\n    \"\"\"\n    Convert a set into an ordered tuple.\n    \n    Parameters:\n    input_set (set): The set containing elements of type int or str.\n    \n    Returns:\n    tuple: An ordered tuple with all elements from the set.\n    \"\"\"\n    return tuple(sorted(input_set))\n\n# Test Cases\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5), \"Test case 1 failed\"\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11), \"Test case 2 failed\"\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\nimport heapq\n\ndef find_minimum_range(arrays: List[List[int]]) -> Tuple[int, int]:\n    # Initialize min heap and result variables\n    heap = []\n    min_heap_value = float('inf')\n    max_heap_value = -float('inf')\n    for i in range(len(arrays)):\n        heapq.heappush(heap, (arrays[i][0], i))\n        min_heap_value = min(min_heap_value, arrays[i][0])\n    \n    start, end = 0, 0\n    \n    while True:\n        value, index = heapq.heappop(heap)\n        if max_heap_value < value:\n            max_heap_value = value\n            end += 1\n        \n        else:\n            max_heap_value = -heapq.heappop(max_heap)\n        \n        if max_heap_value == min_heap_value:\n            break\n            \n        if end > len(arrays[0]) or end > len(arrays[1]) or end > len(arrays[2]):\n            break\n                \n        if end < len(arrays[3]):\n            heapq.heappush(heap, (-arrays[3][end], 3))\n            \n        if end < len(arrays[2]):\n            heapq.heappush(heap, (-arrays[2][end], 2))\n            \n        if end < len(arrays[1]):\n            heapq.heappush(heap, (-arrays[1][end], 1))\n                \n        if end < len(arrays[0]):\n            heapq.heappush(heap, (-arrays[0][end], 0))\n        \n        if len(heap) > 2:\n            continue\n        \n        start = max(max_heap_value, min_heap_value)\n\n    return (start, end + 1)",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dig_let(s):\n    num_count = sum(c.isdigit() for c in s) \n    let_count = sum(c.isalpha() for c in s)  \n    return(num_count, let_count)",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'sqrt' is not defined. Did you mean: 'sqrt_n'?"
    ],
    "generated_code": "def count_Odd_Squares(lim):\n    def is_odd_square(n):\n        sqrt_n = int(sqrt(n))\n        if n % sqrt_n**2 == 0:\n            for i in range(1, sqrt_n + 1):\n                j = sqrt_n - i\n                k = sqrt_n - j\n                if i * j * k != 0 and i % 2 != j % 2 and i % 2 != k % 2 and j % 2 != k % 2:\n                    return True\n        return False\n    \n    count = 0\n    for i in range(lim[0], lim[1] + 1):\n        if is_odd_square(i):\n            count += 1\n    return count\n\n# Test cases\nprint(count_Odd_Squares([5, 100]))  # Expected output: 8\nprint(count_Odd_Squares([8, 65]))   # Expected output: 6\nprint(count_Odd_Squares([2, 5]))    # Expected output: 1",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diff_consecutivenums(nums):\n    # Initialize an empty list to store differences\n    diffs = []\n    # Loop through the list and calculate differences\n    for i in range(1, len(nums)):\n        diffs.append(nums[i] - nums[i-1])\n    return diffs",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ZeroDivisionError: integer division or modulo by zero"
    ],
    "generated_code": "import math\n\ndef zigzag(n, k):\n    \"\"\"\n    This function calculates and returns the nth Catalan number Cn(k).\n    The Catalan numbers sequence is defined as:\n    \n    C0 = 1\n    Cn+1 = sum(Ci * Ci+1 for i in range(n))\n    \n    Parameters:\n    n (int): A positive integer indicating the order of the Catalan number.\n    k (int): An index value used to calculate specific Catalan numbers.\n    \n    Returns:\n    int: The nth Catalan number Cn(k).\n    \"\"\"\n    if n < k:\n        return 0\n    \n    numerator = 1\n    denominator = 1\n    for _ in range(min(n, k)):\n        numerator *= n - _\n        denominator *= _\n        result = numerator // denominator\n        # If result has more than one decimal place, remove it\n        result //= 10\n        if result == k:\n            return result\n        elif result > k:\n            return k - 1\n\n# Example check function to verify the correctness of the solution\ndef check_solution():\n    assert zigzag(4, 3) == 5, \"Test case 1 failed\"\n    assert zigzag(4, 2) == 4, \"Test case 2 failed\"\n    assert zigzag(3, 1) == 1, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(length, width):\n    \"\"\"\n    Calculate the total number of squares within a rectangle.\n    \n    The rectangle is divided into smaller squares with side lengths ranging from 1 to length * width.\n    This function counts each square's area and sums them up.\n    \n    Args:\n    - length: an integer representing the length of the rectangle.\n    - width: an integer representing the width of the rectangle.\n    \n    Returns:\n    An integer indicating the total number of squares inside the rectangle.\n    \"\"\"\n    total_squares = 0\n    for i in range(1, length + 1):\n        for j in range(1, width + 1):\n            if i == j:\n                total_squares += 1\n            elif i < j:\n                total_squares += i**2\n            else:\n                total_squares += j**2\n    return total_squares",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "from collections import defaultdict\n\ndef find_ways(length):\n    \"\"\"\n    Calculate the number of ways to generate sequences with non-negative prefix sums up to a given length.\n    \n    :param length: The target length of the sequence.\n    :return: The total number of valid sequences.\n    \"\"\"\n    mod = 10**9 + 7\n    dp = [defaultdict(int) for _ in range(length)]\n    for i in range(1, length+1):\n        dp[i-1][0] = 1\n    \n    for j in range(1, length+1):\n        for k in range(j+1):\n            if j-k < 0:\n                continue\n            left_count = sum(dp[j-k][x] for x in range(k))\n            right_count = dp[j-k][j-k]\n            dp[j-1][k] = (left_count * right_count) % mod\n    \n    return sum(sum(dp[i]) for i in range(length)) % mod\n\n# Check function with provided data points\nassert find_ways(4) == 2, \"Test case 1 failed\"\nassert find_ways(6) == 5, \"Test case 2 failed\"\nassert find_ways(8) == 14, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(binary_string):\n    # Check if all characters in the string are '0' or '1'\n    return all(char in '01' for char in binary_string)",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum_Length(s):\n    count = {}\n    \n    # Count occurrences of each character in the string\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    min_length = len(s)\n    \n    # Iterate through characters and try to remove them while keeping track of unique characters\n    for char in set(s):\n        temp_string = s.replace(char, '')\n        unique_chars = set(temp_string)\n        \n        # If there is exactly one new character after removing the current one, update min_length\n        if len(unique_chars) == len(set(list(s)) - {char}):\n            min_length = min(min_length, len(temp_string))\n    \n    return min_length\n\n# Test cases\nprint(minimum_Length(\"mnm\"))  # Output: 1\nprint(minimum_Length(\"abcda\"))  # Output: 3\nprint(minimum_Length(\"abcb\"))  # Output: 2",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Element(arr, n, k):\n    frequency = {}\n    \n    # Counting the frequency of each element in the array\n    for i in range(n):\n        if arr[i] not in frequency:\n            frequency[arr[i]] = 0\n        frequency[arr[i]] += 1\n    \n    # Finding the first element with frequency equal to 'k'\n    for j in range(n):\n        if frequency[arr[j]] == k and arr.count(arr[j]) > 1:\n            return arr[j]\n    \n    return -1",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'unique_Characters' is not defined",
      "Test 2: FAIL - name 'unique_Characters' is not defined",
      "Test 3: FAIL - name 'unique_Characters' is not defined"
    ],
    "generated_code": "def is_unique_characters(s):\n    \"\"\"\n    Check if all characters in the string s are unique.\n    \n    Args:\n    s (str): The input string\n    \n    Returns:\n    bool: True if all characters are unique, False otherwise\n    \"\"\"\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return False\n        char_set.add(char)\n    return True",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_column(nested_list, index):\n    return [[row[i] for row in nested_list if i != index] for i in range(len(nested_list[0]))]",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - tn_ap() missing 1 required positional argument: 'd'",
      "Test 2: FAIL - tn_ap() missing 1 required positional argument: 'd'",
      "Test 3: FAIL - tn_ap() missing 1 required positional argument: 'd'"
    ],
    "generated_code": "def tn_ap(t,n,a,d):\n    return a + d * ((t - 1) * n)",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef count_Rectangles(r):\n    # If radius is less than or equal to zero, there can be no rectangles\n    if r <= 0:\n        return 0\n    \n    # The maximum number of rectangles for a given radius\n    max_rectangles = 4 * int(math.sqrt(r))\n    \n    return max_rectangles",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_max(tuples_list):\n    max_value = tuples_list[0][0]\n    for tup in tuples_list:\n        if tup[0] > max_value:\n            max_value = tup[0]\n    return max_value",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - integer division or modulo by zero",
      "Test 2: FAIL - integer division or modulo by zero",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport operator\n\ndef moddiv_list(list1: List[int], list2: List[int]) -> List[int]:\n    return [x % y for x, y in zip(list1, map(operator.mod, list1, list2))]",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "def check_solution(a, b, c):\n    # Calculate discriminant\n    delta = ((b**2) - (4*a*c))\n    \n    # Calculate roots using quadratic formula\n    root1 = (-b + (delta**0.5)) / (2 * a)\n    root2 = (-b - (delta**0.5)) / (2 * a)\n    \n    # Check if one root is twice of the other\n    if root1 == 2*root2 or root2 == 2*root1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test cases\nprint(check_solution(1, 3, 2))  # Expected output: Yes\nprint(check_solution(1, 2, 3))  # Expected output: No\nprint(check_solution(1, -5, 6)) # Expected output: No",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_carol(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= 10 + sum(map(int, str(i)))\n        return result - 1",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(list_of_lists):\n    return [item for item in list_of_lists if item != []]\n\n# Test cases\nprint(remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])) # ['Red', 'Green', [1, 2], 'Blue']\nprint(remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])) # ['Green', [1, 2], 'Blue']\nprint(remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])) # ['Python', 'programming', 'language']",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(arr):\n    # Count occurrences of each element in the array\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Find the maximum occurrence count\n    max_count = max(counts.values())\n    \n    # Return the first element with the maximum occurrence\n    for num, count in counts.items():\n        if count == max_count:\n            return num\n\n# Test cases\nprint(max_occurrences([1,2,3,1,2,3,12,4,2]))  # Output: 2\nprint(max_occurrences([1,2,6,7,0,1,0,1,0]))   # Output: 1\nprint(max_occurrences([1,2,3,1,2,4,1]))       # Output: 1",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_K_element(tuples_list, k):\n    # Iterate over each tuple and add k to each element\n    for i in range(len(tuples_list)):\n        tuples_list[i] = [t + k for t in tuples_list[i]]\n    return tuples_list\n\n# Test cases\nprint(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)) # Expected output: [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nprint(add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)) # Expected output: [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nprint(add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)) # Expected output: [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_flip_to_make_string_alternate(binary_str):\n    ones = 0\n    zeros = 0\n    \n    # Counting ones and zeros separately\n    for char in binary_str:\n        if char == '1':\n            ones += 1\n        else:\n            zeros += 1\n            \n    # Total flip is minimum between counting ones as zeros and zeros as ones\n    total_flip = min(ones, zeros)\n    \n    return total_flip",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(n):\n    if n == 0:\n        return 1\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def adjacent_num_product(lst):\n    # Initialize variables to store the maximum product and the current product\n    max_product = float('-inf')\n    curr_product = 1\n    \n    for num in lst:\n        # Multiply the last number with it's neighbor if there is one\n        curr_product *= num\n        \n        # If the current product becomes negative and its absolute value is greater than max_product,\n        # then update max_product with the current product.\n        if curr_product < 0:\n            max_product = max(max_product, curr_product)\n        \n        # If the current product is zero, reset it as multiplying by zero results in zero product.\n        elif curr_product == 0:\n            curr_product = 1\n    \n    return max_product",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "def is_tree_balanced(root):\n    \"\"\"\n    This function checks whether a given binary tree is balanced.\n    \n    Parameters:\n    root (TreeNode): The root node of the binary tree\n    \n    Returns:\n    bool: True if the tree is balanced, False otherwise\n    \"\"\"\n    def height_and_balance(node):\n        if not node:\n            return 0, True\n        \n        left_height, is_left_balanced = height_and_balance(node.left)\n        right_height, is_right_balanced = height_and_balance(node.right)\n        \n        # Check for balance between current node and its children\n        if not is_left_balanced or not is_right_balanced:\n            return -1, False\n        \n        # Calculate total height difference due to imbalance\n        total_diff = abs(left_height - right_height)\n        \n        # A subtree is considered unbalanced if it has more than one level in absolute difference\n        return max(left_height, right_height) + 1, (total_diff < 2)\n    \n    _, is_balanced = height_and_balance(root)\n    return is_balanced",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def repeat_tuples(tup, n):\n    return tup * n",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cuboid(length, width, height):\n    # Calculate and return the lateral surface area of the cuboid\n    return 2 * length * height + 2 * width * height",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def float_sort(tup_list):\n    return sorted(tup_list, key=lambda x: float(x[1]))",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_missing(arr, start, end):\n    \"\"\"\n    Finds the smallest missing positive integer in an ordered list of integers.\n    \n    Parameters:\n    arr (list): A list of integers sorted from lowest to highest.\n    start (int): The starting index for the search.\n    end (int): The ending index for the search.\n    \n    Returns:\n    int: The smallest missing positive integer in the given range [start, end].\n    \"\"\"\n    if not arr or start > end:\n        raise ValueError(\"Invalid input parameters\")\n    \n    while start <= end and arr[start] == start:\n        start += 1\n    \n    for i in range(start, end + 1):\n        if i != arr[i]:\n            return i\n    \n    # If all numbers up to 'end' are present, then return 'end+1'\n    return end + 1\n\nprint(smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6))  # Should print 7\nprint(smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6))  # Should print 3\nprint(smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7))  # Should print 0",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def heap_assending(nums):\n    import heapq\n    # Transform list into max-heap\n    heapq._heapify_max(nums)\n    # Repeatedly pop maximum element and put it at end\n    for _ in range(len(nums)):\n        nums.pop()  # Remove current max element\n    return nums",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def permute_string(input_str):\n    def backtrack(path, remain):\n        if not remain:\n            result.append(\"\".join(path))\n        for i in range(len(remain)):\n            path.append(remain[i])\n            backtrack(path, remain[:i] + remain[i+1:])\n            path.pop()\n\n    result = []\n    backtrack([], input_str)\n    return result\n\n# Test cases\nprint(permute_string('ab'))  # Expected output: ['ab', 'ba']\nprint(permute_string('abc'))  # Expected output: ['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nprint(permute_string('abcd'))  # Expected output: ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def round_num(number, divisor):\n    return int(divisor * round(float(number) / divisor))",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'append'",
      "Test 2: FAIL - 'tuple' object has no attribute 'append'",
      "Test 3: FAIL - 'tuple' object has no attribute 'append'"
    ],
    "generated_code": "def remove_replica(data):\n    result = []\n    for item in data:\n        if not result or result[-1][0] != item:\n            result.append((item,))\n        else:\n            result[-1].append('MSP')  # Replace duplicate items with \"MSP\"\n    return tuple(result)",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Char(str, char):\n    # Initialize an empty result string\n    res = \"\"\n    \n    # Iterate through each character in the input string\n    for i in str:\n        # If the current character is not equal to the specified character, append it to the result string\n        if i != char:\n            res += i\n    \n    # Return the modified string with characters removed\n    return res\n\n# Test the function with provided test cases\nassert(remove_Char(\"aba\", 'a') == \"b\")\nassert(remove_Char(\"toggle\", 'g') == \"tole\")\nassert(remove_Char(\"aabbc\", 'b') == \"aac\")",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def move_first(lst):\n    # Swap the last element with the first element of the list\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    # Calculate the surface area of a cuboid using the formula: 2*(lw + lh + wh)\n    return 2 * (length*width + length*height + width*height)\n\n# Test cases\nprint(surfacearea_cuboid(1,2,3))  # Expected output: 22\nprint(surfacearea_cuboid(5,7,9))  # Expected output: 286\nprint(surfacearea_cuboid(10,15,21))  # Expected output: 1350",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multi_list(rows, cols):\n    return [[i * j for i in range(cols)] for j in range(rows)]",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(list_of_lists, index):\n    # Sorts the list of lists based on the value at the specified index in each sublist.\n    return sorted(list_of_lists, key=lambda x: x[index])",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rotation_count(nums):\n    left, right = 0, len(nums) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return left\n\n# Test cases\nprint(find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]))  # Expected output: 3\nprint(find_rotation_count([8, 9, 10,2, 5, 6]))  # Expected output: 3\nprint(find_rotation_count([2, 5, 6, 8, 9, 10]))  # Expected output: 0",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(num):\n    # Convert the number to its binary representation and remove the '0b' prefix\n    binary_representation = bin(num)[2:]\n    \n    # Toggle all odd positions in the binary string\n    toggled_binary = ''.join('1' if int(binary_representation[i]) else '0' for i in range(len(binary_representation)))\n    \n    # Convert the toggled binary back to decimal and return it\n    return int(toggled_binary, 2)\n\n# Test cases\nprint(even_bit_toggle_number(10))  # Expected output: 15\nprint(even_bit_toggle_number(20))  # Expected output: 1\nprint(even_bit_toggle_number(30))  # Expected output: 11",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_Of_Smallest(k,arr):\n    # Find the minimum element in the array\n    min_element = min(arr)\n    # Initialize counter for frequency\n    count = 0\n    # Count how many times the minimum element appears in the array\n    for num in arr:\n        if num == min_element:\n            count += 1\n    return count",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - maximum recursion depth exceeded in comparison",
      "Test 2: FAIL - maximum recursion depth exceeded in comparison",
      "Test 3: FAIL - maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def swap_count(expression):\n    balance = 0\n    swap_count = 0\n    \n    # Iterate through each character in the expression\n    for char in expression:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n        \n        # If balance is negative, it means we need a closing bracket before it\n        if balance < 0:\n            swap_count += abs(balance)\n            balance = 0  # Reset balance for next pair of brackets\n    \n    # Count remaining open brackets after processing the entire expression\n    return swap_count + balance",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_or_odd(hex_number):\n    # Convert the hexadecimal string to an integer\n    num = int(hex_number, 16)\n    \n    # Check if the number of digits in binary representation is even or odd\n    if len(bin(num)[2:]) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test cases\nprint(even_or_odd(\"AB3454D\"))   # Expected output: \"Odd\"\nprint(even_or_odd(\"ABC\"))       # Expected output: \"Even\"\nprint(even_or_odd(\"AAD\"))       # Expected output: \"Odd\"",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    Finds the highest power of 2 that is less than or equal to n.\n    \n    Args:\n    n : int - The number to compare against powers of 2.\n    \n    Returns:\n    int - The highest power of 2 less than or equal to n.\n    \"\"\"\n    if n < 1:\n        return 0\n    exponent = 0\n    while ((1 << exponent) <= n): \n        exponent += 1  \n    return (1 << (exponent-1))",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev = 2\n        curr = 1\n        for _ in range(2, n + 1):\n            next_num = prev + curr\n            prev = curr\n            curr = next_num\n        return curr",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate str (not \"int\") to str",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - can only concatenate str (not \"int\") to str"
    ],
    "generated_code": "def add_string(lst, str):\n    return [str + x for x in lst]",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list indices must be integers or slices, not str",
      "Test 2: FAIL - list indices must be integers or slices, not str",
      "Test 3: FAIL - list indices must be integers or slices, not str"
    ],
    "generated_code": "def convert_list_dictionary(keys, values, data):\n    result = {}\n    for key in keys:\n        if isinstance(data[key], dict):\n            inner_dict = {key: value}\n            result.update({key: inner_dict})\n        else:\n            result.update({key: {}})\n    return result",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_max_sum(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        if i % 2 == 0:\n            dp[i] = max(dp[i], dp[i // 2] + i)\n        if i % 3 == 0:\n            dp[i] = max(dp[i], dp[i // 3] + i)\n        if i % 4 == 0:\n            dp[i] = max(dp[i], dp[i // 4] + i)\n        if i % 5 == 0:\n            dp[i] = max(dp[i], dp[i // 5] + i)\n    return dp[n]\n\n# Test cases\nprint(get_max_sum(60)) # Expected output: 106\nprint(get_max_sum(10)) # Expected output: 12\nprint(get_max_sum(2))  # Expected output: 2",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length_list(lst):\n    return max(lst, key=len)",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(input_tuple):\n    # Remove duplicate elements from the tuple and compare its length with original length\n    return len(set(input_tuple)) == len(input_tuple)",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(input_string):\n    char_count = {}\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in input_string:\n        if char_count[char] == 1:\n            return char\n    return None\n\n# Test cases\nprint(first_non_repeating_character(\"abcabc\"))   # Expected output: None\nprint(first_non_repeating_character(\"abc\"))      # Expected output: 'a'\nprint(first_non_repeating_character(\"ababc\"))    # Expected output: 'c'",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_char(str_input):\n    # Regular expression pattern to match strings starting and ending with the same character\n    regex = r\"^(.).*\\1$|^.$\"\n    \n    if re.match(regex, str_input):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Test cases to verify the correctness of the function\nassert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def median_numbers(num1, num2, num3):\n    # Arrange the numbers in ascending order\n    sorted_nums = sorted([num1, num2, num3])\n    # Calculate and return the middle value\n    if len(sorted_nums) == 3:\n        return (sorted_nums[0] + sorted_nums[1]) / 2\n    else:\n        return float('nan')  # Return NaN for non-integer values",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - int() argument must be a string, a bytes-like object or a real number, not 'list'",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_digits(nums):\n    return sum(int(num) for num in nums)",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def bitwise_xor(tup1, tup2):\n    # Perform bitwise XOR on each pair of elements from two tuples\n    result = tuple(x ^ y for x, y in zip(tup1, tup2))\n    return result",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_freq(tuples_list):\n    # Create an empty dictionary to store tuple frequencies\n    freq_dict = {}\n    \n    # Iterate through each tuple in the list\n    for tup in tuples_list:\n        # If the tuple is not already in the dictionary, add it with a frequency of 1\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            # Increment the frequency of the tuple by 1\n            freq_dict[tup] += 1\n    \n    # Return the number of distinct tuples in the original list\n    return len(tuples_list)",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_nested_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tuple(x + y for x, y in zip(tup1[i], tup2[i])))\n    return result\n\n# Test cases\nprint(add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\nprint(add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))))\nprint(add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))))",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Calculate nCr % p.\n    \n    Parameters:\n    - n (int): Total number of items.\n    - r (int): Number of items to choose.\n    - p (int): A prime number for modular arithmetic.\n    \n    Returns:\n    int: Result of nCr modulo p.\n    \"\"\"\n    return math.factorial(n) // (math.factorial(r) * math.factorial(n - r)) % p\n\n# Check function with provided data points\nassert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\nassert ncr_modp(15, 12, 43) == 25, \"Test case 2 failed\"\nassert ncr_modp(17, 9, 18) == 10, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    # Regular expression pattern for validating URLs\n    pattern = r'^http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$'\n    \n    # Using re.match to check if the URL matches the pattern\n    return bool(re.match(pattern, url))\n\n# Test cases\nprint(is_valid_URL(\"https://www.google.com\"))  # Expected output: True\nprint(is_valid_URL(\"https:/www.gmail.com\"))   # Expected output: False\nprint(is_valid_URL(\"https:// www.redit.com\")) # Expected output: False",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(a, b):\n    \"\"\"\n    This function takes two arguments 'a' and 'b', both of which must be integers.\n    It returns the smaller integer between 'a' and 'b'.\n    \n    Args:\n    :param a: An integer representing the first number.\n    :param b: An integer representing the second number.\n    \n    Returns:\n    :return: The smaller integer between 'a' and 'b'.\n    \"\"\"\n    if a <= b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_tuplex(tup, elem):\n    return elem in tup",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(number):\n    if number % 2 == 0:\n        return 'Even Parity'\n    else:\n        return 'Odd Parity'\n\n# Test cases\nprint(find_Parity(12))  # Expected output: Even Parity\nprint(find_Parity(7))   # Expected output: Odd Parity\nprint(find_Parity(10))  # Expected output: Even Parity",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: min() arg is an empty sequence"
    ],
    "generated_code": "from itertools import permutations\n\ndef rearrange_bigger(num):\n    # Convert the number to a list of its digits and generate all unique permutations\n    perms = set(int(''.join(p)) for p in permutations(str(num)))\n    \n    # Filter out numbers less than the original number and return the first one larger\n    return min([i for i in perms if i > num])\n\n# Test cases\nprint(rearrange_bigger(12))   # Expected output: 21\nprint(rearrange_bigger(10))   # Expected output: False\nprint(rearrange_bigger(102))  # Expected output: 120",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef k_smallest_pairs(A: List[int], B: List[int], k: int) -> List[List[int]]:\n    # Implementing kSmallestPairs algorithm here...\n    pass",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\nimport numpy as np\n\ndef min_product_tuple(tuples_list: List[Tuple[int]]) -> int:\n    # Convert tuple list into numpy array for efficient computation\n    arr = np.array(tuples_list)\n    \n    # Multiply each pair and calculate their sum to get total products\n    total_products = np.sum(arr[:, [0]] * arr[:, [1]])\n    \n    # Return the smallest element which is the minimum product\n    return total_products.min()",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def min_val(lst):\n    return min(lst)\n\n# Test cases\nprint(min_val(['Python', 3, 2, 4, 5, 'version'])) # Expected output: 2\nprint(min_val(['Python', 15, 20, 25])) # Expected output: 15\nprint(min_val(['Python', 30, 20, 40, 50, 'version'])) # Expected output: 20",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    # Split the input string into words based on underscores and capitalize each word except the first one.\n    # Then join them together with no separator between words.\n    return ''.join(word.capitalize() if i != 0 else word for i, word in enumerate(re.split(r'_+', snake_str)))\n\n# Test cases\nprint(snake_to_camel('android_tv'))  # Expected output: AndroidTv\nprint(snake_to_camel('google_pixel'))  # Expected output: GooglePixel\nprint(snake_to_camel('apple_watch'))  # Expected output: AppleWatch",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(numbers):\n    \"\"\"\n    Removes all odd numbers from a given list and returns the modified list.\n    \n    Parameters:\n    numbers (list): The input list containing integers.\n    \n    Returns:\n    list: A new list with all odd numbers removed.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\n# Check function with provided data points to verify correctness\nassert remove_odd([1, 2, 3]) == [2], \"Test case 1 failed\"\nassert remove_odd([2, 4, 6]) == [2, 4, 6], \"Test case 2 failed\"\nassert remove_odd([10, 20, 3]) == [10, 20], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_nth_element(tuples_list, n):\n    return [element for _, *elements in tuples_list for element in elements][n::len(tuples_list)]",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(seq1, seq2):\n    # Check if any element of the first sequence is equal to any element of the second sequence\n    for elem in seq1:\n        if elem in seq2:\n            return True\n    return False\n\n# Test cases\nprint(overlapping([1,2,3,4,5], [6,7,8,9]))  # Expected output: False\nprint(overlapping([1,2,3], [4,5,6]))       # Expected output: False\nprint(overlapping([1,4,5], [1,4,5]))       # Expected output: True",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_Product(nums):\n    # Initialize variables to store the maximum and minimum values\n    max_num = min_num = result = 0\n    \n    for num in nums:\n        if num > max_num:\n            max_num, min_num = num, max_num\n        elif num < min_num:\n            min_num = num\n        \n        # Calculate the potential products\n        prod = max_num * min_num\n        \n        # Update the result if the current product is higher than the previous maximum\n        if prod > result:\n            result = prod\n            \n    return max_num, min_num, result\n\n# Test cases\nprint(max_Product([1,2,3,4,7,0,8,4]))  # Expected output: (7, 8, 56)\nprint(max_Product([0,-1,-2,-4,5,0,-6]))  # Expected output: (-4, -6, 24)\nprint(max_Product([1,2,3]))  # Expected output: (2, 3, 6)",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def breakSum(n, memo=None):\n    if memo is None:\n        memo = {}\n    \n    # Base case: If n is less than or equal to 3, return n as the maximum sum.\n    if n <= 3:\n        return n\n    \n    # Check if result is already computed and stored in memo dictionary.\n    if n in memo:\n        return memo[n]\n    \n    # Recursive case: Try all possible ways to divide n into three parts and compute their sums,\n    # then choose the one with the maximum sum.\n    max_sum = 0\n    for i in range(1, int(n/3) + 1):  # i represents the size of the first part\n        remaining = n - i * 3\n        if remaining > 0:\n            sub_max_sum = breakSum(remaining)\n            max_sum = max(max_sum, i + sub_max_sum)\n    \n    # Store the result in memo dictionary before returning it.\n    memo[n] = max_sum\n    return max_sum\n\n# Test cases\nprint(breakSum(12))  # Expected output: 13\nprint(breakSum(24))  # Expected output: 27\nprint(breakSum(23))  # Expected output: 23",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def group_tuples(lst):\n    result = []\n    seen = set()\n    \n    for item in lst:\n        temp = tuple(item)\n        if temp not in seen:\n            seen.add(temp)\n            result.append(item)\n    \n    return result",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Max(lst):\n    max_length = 0\n    result = []\n    \n    for sub_list in lst:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n            result = sub_list\n    \n    return result",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def round_and_sum(numbers):\n    result = sum(map(lambda x: round(x), numbers))\n    return result * len(numbers)",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'cube_Sum' is not defined",
      "Test 2: FAIL - name 'cube_Sum' is not defined",
      "Test 3: FAIL - name 'cube_Sum' is not defined"
    ],
    "generated_code": "def cube_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            total += i ** 3\n    return total",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_tuple(test_tuple):\n    # Use list comprehension and join method with specified delimiter to concatenate elements of the tuple\n    concatenated_string = ''.join([str(i) for i in test_tuple])\n    return concatenated_string",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes using the formula for the sum of cubes\n    cube_sum = int((n * (n + 1) / 2)**2)\n    \n    # Return the average of cubes by dividing the sum by n\n    return cube_sum / n",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_maxgold(matrix, rows, cols):\n    if not matrix:\n        return 0\n    \n    max_gold = -float('inf')\n    \n    for i in range(rows):\n        for j in range(cols):\n            if i > 0 and matrix[i][j] > matrix[i-1][j]:\n                matrix[i][j] += matrix[i-1][j]\n            if j > 0 and matrix[i][j] > matrix[i][j-1]:\n                matrix[i][j] += matrix[i][j-1]\n                \n            max_gold = max(max_gold, matrix[i][j])\n            \n    return max_gold",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_rear(strings_tuple):\n    return [string[-1] for string in strings_tuple]",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_in_list(lst, target):\n    count = 0\n    for sublist in lst:\n        if target in sublist:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef change_date_format(date_str):\n    pattern = r'(\\d{4})-(\\d{1,2})-(\\d{1,2})'\n    match = re.match(pattern, date_str)\n    if match:\n        year, month, day = map(int, [match.group(1), match.group(2), match.group(3)])\n        new_month = f\"{month:02}\" # ensure two digits for month\n        new_day = f\"{day:02}\"\n        return f\"{new_day}-{new_month}-{year}\"\n    else:\n        raise ValueError(\"Invalid date format\")\n\n# Test cases\nprint(change_date_format(\"2026-01-02\")) # Expected output: \"02-01-2026\"\nprint(change_date_format(\"2020-11-13\")) # Expected output: \"13-11-2020\"\nprint(change_date_format(\"2021-04-26\")) # Expected output: \"26-04-2021\"",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n                \n            arr[j] = temp\n        gap //= 2\n    return arr\n\n# Test cases\nprint(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])) # Output: [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nprint(shell_sort([24, 22, 39, 34, 87, 73, 68]))         # Output: [22, 24, 34, 39, 68, 73, 87]\nprint(shell_sort([32, 30, 16, 96, 82, 83, 74]))        # Output: [16, 30, 32, 74, 82, 83, 96]",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def and_tuples(tup1, tup2):\n    # Extracting elements one by one for comparison\n    result = [min(i, j) if i is not None else None for i, j in zip(tup1, tup2)]\n    return tuple(result)\n\n# Check function with provided data points\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_directrix(a,b,c):\n    # Calculate and return the directrix value based on the given parameters\n    d = -(4*a*b - c**2) / (4*a)\n    return int(d)",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_element(list1, list2):\n    # Convert both lists to sets for comparison\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if there is any intersection between the two sets\n    return bool(set1 & set2)",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def median_trapezium(a, b, c):\n    return ((a + c) / 2)",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(arr, num):\n    if arr[0] > num:\n        return 'Yes, entered number is greater than those in the array'\n    elif len(arr) == 1 and arr[0] <= num:\n        return 'Yes, entered number is greater than those in the array' \n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > num:\n                return 'Yes, entered number is greater than those in the array'\n        return 'No, entered number is less than those in the array'\n\n# Test cases\nprint(check_greater([1, 2, 3, 4, 5], 4)) # Expected output: \"No, entered number is less than those in the array\"\nprint(check_greater([2, 3, 4, 5, 6], 8)) # Expected output: \"Yes, the entered number is greater than those in the array\"\nprint(check_greater([9, 7, 4, 8, 6, 1], 11)) # Expected output: \"Yes, the entered number is greater than those in the array\"",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match_one(text):\n    if re.search(r'^a(b+)*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit(num):\n    # Return the last digit of the given number.\n    return num % 10\n\n# Test cases\nprint(last_Digit(123))  # Expected output: 3\nprint(last_Digit(25))   # Expected output: 5\nprint(last_Digit(30))   # Expected output: 0",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [],
    "generated_code": "def neg_nos(lst):\n    for num in lst:\n        if num < 0:\n            print(num, end=' ')",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(s):\n    result = ''\n    for char in s:\n        if ord(char) % 2 == 0:\n            result += char\n    return result",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def count_bidirectional(pairs):\n    \"\"\"\n    Counts the number of unique bidirectional tuples from the given list of pairs.\n    \n    :param pairs: List of tuples representing pairs of elements.\n    :return: The count of unique bidirectional tuples as an integer.\n    \"\"\"\n    seen = set()\n    total_pairs = len(pairs)\n    \n    for i in range(total_pairs - 1):\n        for j in range(i + 1, total_pairs):\n            if pairs[i][0] == pairs[j][1] and pairs[i][1] == pairs[j][0]:\n                pair_str = str(pairs[i]) + ',' + str(pairs[j])\n                if pair_str not in seen:\n                    seen.add(pair_str)\n                    total_pairs += 1\n    \n    return total_pairs - len(seen)\n\n# Test cases\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])) # Expected output: 3\nprint(count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])) # Expected output: 2\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])) # Expected output: 4",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(nums):\n    # Convert all elements in nums to strings and concatenate them together.\n    return int(''.join(str(num) for num in nums))\n\n# Example usage:\nprint(multiple_to_single([11, 33, 50]))  # Expected output: 113350\nprint(multiple_to_single([-1, 2, 3, 4, 5, 6]))  # Expected output: -123456\nprint(multiple_to_single([10, 15, 20, 25]))  # Expected output: 10152025",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_adverb_position(sentence):\n    \"\"\"\n    Finds adverbs and returns their starting index along with the word.\n    \n    Parameters:\n    sentence (str): The input sentence from which to find adverbs.\n    \n    Returns:\n    tuple: A tuple containing the starting index of the adverb and the adverb itself.\n    \"\"\"\n    import re\n    # Using regular expression to match words ending with \"ly\" which are often considered as adverbs\n    matches = [(m.start(), m.group()) for m in re.finditer(r'\\b([A-Za-z]+)ly\\b', sentence)]\n    return matches[0] if matches else (-1, \"\")\n\n# Test cases\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly'), \"Test case 1 failed\"\nassert find_adverb_position(\"seriously!! there are many roses\") == (0, 9, 'seriously'), \"Test case 2 failed\"\nassert find_adverb_position(\"unfortunately!! sita is going to home\") == (0, 13, 'unfortunately'), \"Test case 3 failed\"\n\nprint(find_adverb_position(\"clearly!! we can see the sky\"))",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube given its side length\n    return 6 * side_length ** 2",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def positive_count(arr):\n    count = sum(1 for x in arr if x > 0)\n    return count / len(arr) if len(arr) != 0 else 0",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def largest_neg(nums):\n    # Initialize variable to store the largest negative number found\n    largest_negative = float('-inf')\n    \n    for num in nums:\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n    \n    return largest_negative\n\n# Test cases\nassert largest_neg([1,2,3,-4,-6]) == -6, \"Test case 1 failed\"\nassert largest_neg([1,2,3,-8,-9]) == -9, \"Test case 2 failed\"\nassert largest_neg([1,2,3,4,-1]) == -1, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "def trim_tuple(tuples_list, k):\n    trimmed_tuples = [(item[k:] if len(item) > k else item) for item in tuples_list]\n    return trimmed_tuples\n\n# Test the function with the first test case\nassert(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == ['(2,)', '(9,)', '(2,),']),\n\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: can't multiply sequence by non-int of type 'tuple'"
    ],
    "generated_code": "def index_multiplication(tuple1, tuple2):\n    # Multiply corresponding elements from both tuples and return as a list of tuples\n    result = [(a * b) for a, b in zip(tuple1, tuple2)]\n    return tuple(result)\n\n# Test cases\nprint(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3))))\nprint(index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4))))\nprint(index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5))))",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Occurrence(list_element, tuple_elements):\n    occurrence = 0\n    for element in tuple_elements:\n        if element in list_element:\n            occurrence += list_element.count(element)\n    return occurrence",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "cube_nums = lambda lst: [x**3 for x in lst]",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    \n    # Initialize the first two Perrin numbers\n    p1 = 3\n    p2 = 0\n    p3 = 2\n    \n    for i in range(3, n + 1):\n        # Calculate the next Perrin number using the recurrence relation\n        temp = p1 + p2\n        p1 = p2\n        p2 = p3\n        p3 = temp\n    \n    return p3",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the distances between each pair of points using the distance formula\n    d1 = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n    d2 = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    d3 = ((x2 - x3)**2 + (y2 - y3)**2)**0.5\n    \n    # Check if all sides satisfy the triangle inequality theorem\n    return True if abs(d1 + d2) > d3 and abs(d1 + d3) > d2 and abs(d2 + d3) > d1 else False",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_string(lst, size):\n    return [lst[i:i+size] for i in range(0, len(lst), size)]\n\n# Test cases\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)) # ['practice', 'solution']\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6)) # ['Python']\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9)) # ['exercises']",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_whitespaces(s):\n    # Remove all whitespace characters in the input string\n    return re.sub(r'\\s+', '', s)\n\n# Test cases\nprint(remove_whitespaces(' Google    Flutter '))\nprint(remove_whitespaces(' Google    Dart '))\nprint(remove_whitespaces(' iOS    Swift '))",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def loss_amount(amount1, amount2):\n    \"\"\"\n    This function takes two integers as input and returns the difference between them.\n    If the first integer is less than the second, it returns None.\n    \n    Examples:\n    >>> loss_amount(1500, 1200)\n    None\n    >>> loss_amount(100, 200)\n    100\n    >>> loss_amount(2000, 5000)\n    3000\n    \"\"\"\n    return None if amount1 < amount2 else amount1 - amount2",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sumofFactors(n):\n    result = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            result += i\n    return result",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumb_number(month_num):\n    # Check if the month number is within the range of 1-12 for months with 31 days\n    return month_num in [1, 3, 5, 7, 8, 10, 12]\n\n# Test cases to verify the correctness of the function\nassert check_monthnumb_number(5) == True, \"Test case 1 failed\"\nassert check_monthnumb_number(2) == False, \"Test case 2 failed\"\nassert check_monthnumb_number(6) == False, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min' is not defined",
      "Test 2: FAIL - name 'Find_Min' is not defined",
      "Test 3: FAIL - name 'Find_Min' is not defined"
    ],
    "generated_code": "def find_min(lst):\n    if not lst:\n        return []\n    min_length = float('inf')\n    result = []\n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n            result = sublst\n    return result",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length, width):\n    return length * width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_uppercase(s):\n    # Use regex to find all uppercase letters and replace them with an empty string\n    result = re.sub('[A-Z]', '', s)\n    return result\n\n# Test cases\nprint(remove_uppercase('cAstyoUrFavoRitETVshoWs'))  # Expected output: 'cstyoravoitshos'\nprint(remove_uppercase('wAtchTheinTernEtrAdIo'))     # Expected output: 'wtchheinerntrdo'\nprint(remove_uppercase('VoicESeaRchAndreComMendaTionS'))  # Expected output: 'oiceachndreomendaion'",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns a list containing \n    the first element from each inner list.\n    \n    Parameters:\n    lst (list): A list where each element is a sub-list\n    \n    Returns:\n    list: A list containing the first element from each sub-list in lst\n    \"\"\"\n    # Use map() with lambda to apply 'getitem' on each sub-list and collect results into a new list\n    result = list(map(lambda x: x[0], lst))\n    return result\n\n# Test Cases\nprint(extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))  # Expected output: [1, 3, 6]\nprint(extract([[1,2,3],[4, 5]]))  # Expected output: [1, 4]\nprint(extract([[9,8,1],[1,2]]))  # Expected output: [9, 1]",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(s):\n    # Initialize counter for uppercase letters\n    upper_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char.isupper():\n            # Increment counter if character is uppercase\n            upper_count += 1\n            \n    return upper_count",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import *\nfrom itertools import chain, combinations\n\ndef combinations_list(input_list: List[str]) -> List[List[str]]:\n    \"\"\"\n    Generate all possible combinations for each set of items in the input_list.\n    \n    Args:\n    input_list: A list of strings representing different items.\n    \n    Returns:\n    A list of lists, where each sublist contains unique combinations of items from the input_list.\n    \"\"\"\n    # Convert the list into a tuple and generate all combinations including the empty combination\n    all_combinations = []\n    for r in range(len(input_list) + 1):\n        combinations_iter = combinations(input_list, r)\n        for combo in chain.from_iterable(combinations_iter):\n            all_combinations.append(list(combo))\n    return all_combinations\n\n# Test cases\nprint(combinations_list(['orange', 'red', 'green', 'blue']))\nprint(combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange']))\nprint(combinations_list(['red', 'green', 'black', 'orange']))",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport sys\n\ndef max_subarray_product(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    \n    # Initialize variables to store the maximum and minimum products ending at each position.\n    min_prod = max_prod = result = sys.maxsize // 2  # To handle negative numbers properly.\n    \n    for num in nums:\n        temp_max = max(num, max_prod * num, min_prod * num)\n        min_prod = min(num, max_prod * num, min_prod * num)\n        \n        if temp_max < min_prod:\n            min_prod = temp_max\n        \n        if temp_max > max_prod:\n            max_prod = temp_max\n        \n        result = max(result, max_prod)\n    \n    return result\n\n# Test cases\nprint(max_subarray_product([1, -2, -3, 0, 7, -8, -2]))  # Expected output: 112\nprint(max_subarray_product([6, -3, -10, 0, 2]))         # Expected output: 180\nprint(max_subarray_product([-2, -40, 0, -2, -3]))       # Expected output: 80",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_value(dictionary, value_to_check):\n    return len(set(dictionary.values())) == 1",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(input_dict):\n    return {key:value for key,value in input_dict.items() if value is not None}\n\n# Test cases to verify the correctness of the solution\nprint(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}))  # {'c1': 'Red', 'c2': 'Green'}\nprint(drop_empty({'c1': 'Red', 'c2': None, 'c3':None}))     # {'c1': 'Red'}\nprint(drop_empty({'c1': None, 'c2': 'Green', 'c3':None}))   # {'c2': 'Green'}",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_peak(arr, n):\n    left = 0\n    right = n - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] > arr[mid + 1]:\n            # The peak is in the left half including mid.\n            right = mid\n        else:\n            # The peak is in the right half excluding mid.\n            left = mid + 1\n            \n    return arr[left]",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_to_Octal(decimal_number):\n    \"\"\"\n    Convert the given decimal number to its octal representation.\n    \n    Parameters:\n    - decimal_number (int): The decimal number to be converted.\n    \n    Returns:\n    - str: The octal representation of the decimal number as a string.\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n    octal_number = \"\"\n    while decimal_number > 0:\n        remainder = decimal_number % 8\n        octal_number = str(remainder) + octal_number\n        decimal_number //= 8\n    return octal_number\n\n# Test cases to verify the correctness of the function\nassert decimal_to_Octal(10) == \"12\"\nassert decimal_to_Octal(2) == \"2\"\nassert decimal_to_Octal(33) == \"41\"\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_product(nums: List[int], k: int) -> int:\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Initialize the answer variable\n    ans = 1\n    \n    # Calculate the maximum product by selecting at most 'k' elements from the sorted list\n    for i in range(k):\n        ans *= nums[i]\n    \n    return ans",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_profit(prices, k):\n    if not prices:\n        return 0\n    \n    n = len(prices)\n    dp = [[[0 for _ in range(2)] for _ in range(k + 1)] for _ in range(n)]\n    \n    # Iterate over each price and transaction limit\n    for t in range(1, k + 1):\n        buy = -prices[0]  # Cost of buying at first day\n        sell = float('-inf')  # Initial selling value\n        \n        for i in range(1, n):\n            # Update buy and sell values considering previous state\n            buy = max(buy, sell - prices[i])\n            sell = max(sell, buy + prices[i])\n            \n            dp[i][t][0] = buy\n            dp[i][t][1] = sell\n            \n    return max(dp[n-1][k][0], dp[n-1][k][1])\n\n# Example usage\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3))  # Output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2))     # Output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2))          # Output: 2",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef add_pairwise(tuples: List[Tuple[int]]) -> List[Tuple[int]]:\n    # Pairwise adds each element with its immediate successor in the list of tuples.\n    result = []\n    for i in range(len(tuples) - 1):\n        result.append(tuple(x + y for x, y in zip(tuples[i], tuples[i+1])))\n    return result",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_remainder(arr, divisor, mod):\n    result = 1\n    for num in arr:\n        result *= num\n    return (result % divisor + mod) % mod\n\n# Test cases\nprint(find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11)) # Expected output: 9\nprint(find_remainder([1,1,1],3,1)) # Expected output: 0\nprint(find_remainder([1,2,1],3,2)) # Expected output: 0",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Consecutive(nums):\n    # Sort the list and check if all differences between consecutive elements are 1\n    return all(abs(nums[i] - nums[i+1]) == 1 for i in range(len(nums)-1))\n\n# Test cases\nprint(check_Consecutive([1,2,3,4,5]))  # Expected output: True\nprint(check_Consecutive([1,2,3,5,6]))  # Expected output: False\nprint(check_Consecutive([1,2,1]))      # Expected output: False",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_intersection(list1, list2):\n    # Convert tuples from lists and create sets to remove duplicates\n    set1 = {tuple(sorted(tup)) for tup in list1}\n    set2 = {tuple(sorted(tup)) for tup in list2}\n    \n    # Find the intersection of both sets\n    intersection_set = set1 & set2\n    \n    # Return the result as a list of tuples with unique elements sorted within each tuple\n    return [list(sorted(tup)) for tup in intersection_set]",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_counter(counter_dict):\n    sorted_items = sorted(counter_dict.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_lower(s):\n    # Convert each character in the string to lowercase and check if all characters are lower case\n    return s.islower()",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(s):\n    # Remove all lowercase letters using regular expression and replace with an empty string\n    return re.sub('[a-z]', '', s)\n\n# Test the function\nprint(remove_lowercase(\"PYTHOn\"))  # Expected output: 'PYTH'\nprint(remove_lowercase(\"FIND\"))    # Expected output: 'FID'\nprint(remove_lowercase(\"STring\"))  # Expected output: 'STRG'",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(number):\n    # Ensure the number is positive for simplicity\n    if number < 0:\n        number = -number\n    \n    while number >= 10:\n        number //= 10\n    \n    return number\n\n# Test cases\nprint(first_Digit(123))  # Expected output: 1\nprint(first_Digit(456))  # Expected output: 4\nprint(first_Digit(12))   # Expected output: 1",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(input_str):\n    char_count = {}\n    max_char = ''\n    max_count = 0\n    \n    for char in input_str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n            \n    return max_char",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def is_subset_sum(nums, target, n):\n    \"\"\"\n    Determines if there exists a subset of nums whose sum equals target.\n    \n    Parameters:\n        nums (list): List of integers representing the numbers in the set.\n        target (int): The target sum for the subset.\n        n (int): Number of elements in the list 'nums'.\n        \n    Returns:\n        bool: True if such a subset exists, False otherwise.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(n)]\n    # Base case: If no items are present, it's impossible to make the total sum\n    for i in range(target + 1):\n        dp[0][i] = False\n    \n    # Base case: There is always a way to achieve zero sum using an empty set\n    dp[0][0] = True\n    \n    # Fill the DP table in bottom-up manner\n    for i in range(1, n):\n        for j in range(0, target + 1):\n            include = False\n            exclude = dp[i-1][j]\n            \n            if nums[i-1] <= j:\n                include = dp[i-1][j - nums[i-1]]\n            \n            dp[i][j] = include or exclude\n            \n    return dp[-1][-1]\n\n# Example check function to verify the correctness of the solution\ndef check_solution():\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 6) == True, \"Test case 1 failed\"\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False, \"Test case 2 failed\"\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef match(s):\n    # Regex pattern to match a sequence of one uppercase letter followed by zero or more lowercase letters\n    pattern = r'[A-Z][a-z]*'\n    \n    # Search for the pattern in the input string\n    result = re.search(pattern, s)\n    \n    # If a match is found, it returns \"Yes\", otherwise \"No\"\n    return \"Yes\" if result else \"No\"\n\n# Test cases to verify the correctness of the solution\nassert match(\"Geeks\") == \"Yes\"\nassert match(\"geeksforGeeks\") == \"Yes\"\nassert match(\"geeks\") == \"No\"",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        if factorial(i) % x == 0:\n            return i\n        i += 1\n        \ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def remove_matching_tuple(tuples_list_1, tuples_list_2):\n    # Convert both lists into sets for efficient comparison and removal of duplicates\n    set_1 = set(tuples_list_1)\n    set_2 = set(tuples_list_2)\n    \n    # Find the intersection of the two sets and remove them from set_1\n    for tuple in set_2.intersection(set_1):\n        if tuple not in set_1:\n            break\n    \n    # Filter out the remaining elements in set_1 which are not present in set_2\n    result_set = {tuple for tuple in set_1 - set_2}\n    \n    # Convert back to list before returning\n    return [list(result_set)[0]] if len(result_set) == 1 else []\n\n# Test cases to verify the correctness of the function\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == ['you', '?']\nassert remove_matching_tuple([['Part', 'of'], ['the', 'journey'], ['is', 'end']], [['Journey', 'the'], ['is', 'end']]) == [['Part', 'of'], ['the', 'journey'], ['is', 'end']]\nassert remove_matching_tuple([['Its', 'been'], ['a', 'long'], ['day', 'without']], [['a', 'long'], ['my', 'friend']]) == [['Its', 'been'], ['day', 'without']]",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - largest_palindrome() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - largest_palindrome() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - largest_palindrome() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef is_palindrome(num: int) -> bool:\n    \"\"\"Check if a number is a palindrome.\"\"\"\n    return str(num) == str(num)[::-1]\n\ndef largest_palindrome(arr: List[int]) -> int:\n    \"\"\"\n    Finds the largest palindromic number in the provided list.\n    \n    Parameters:\n    arr (List[int]): The list of integers to search through.\n    \n    Returns:\n    int: The largest palindromic number found in the list. If not found, returns -1.\n    \"\"\"\n    max_palindrome = -1\n    for num in arr:\n        if is_palindrome(num) and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute the binomial probability of getting exactly 'k' successes in 'n' trials.\n    \n    Parameters:\n    n (int): Number of trials.\n    k (int): Number of successful trials.\n    p (float): Probability of success on an individual trial.\n    \n    Returns:\n    float: Binomial probability of getting exactly 'k' successes.\n    \"\"\"\n    binom_coeff = math.comb(n, k)\n    prob = binom_coeff * (p ** k) * ((1 - p) ** (n - k))\n    return prob\n\n# Check function with provided data points\nprint(binomial_probability(10, 5, 1.0/3))  # Expected output: ~0.1366\nprint(binomial_probability(11, 6, 2.0/4))  # Expected output: ~0.2256\nprint(binomial_probability(12, 7, 3.0/5))  # Expected output: ~0.2270",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuples_list):\n    # Sort the list of tuples based on the last element of each tuple\n    sorted_tuples = sorted(tuples_list, key=lambda x: x[-1])\n    return sorted_tuples",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'sqrt' is not defined"
    ],
    "generated_code": "def area_pentagon(side_length):\n    \"\"\"\n    Calculate the area of a regular pentagon with side length 'side_length'.\n    \n    Args:\n    side_length (float): The length of each side of the pentagon.\n    \n    Returns:\n    float: The area of the pentagon.\n    \"\"\"\n    # Area formula for a regular pentagon: (sqrt(5*5 + 20) * side_length^2) / (24)\n    return (sqrt(5 * 5 + 20) * side_length**2) / 24\n\n# Test cases\nprint(area_pentagon(5))  # Expected output: 43.01193501472417\nprint(area_pentagon(10)) # Expected output: 172.0477400588967\nprint(area_pentagon(15)) # Expected output: 387.10741513251753",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Largest(arr):\n    # Find the maximum element in the array\n    max_element = max(arr)\n    \n    # Count how many times the maximum element appears in the array\n    count = arr.count(max_element)\n    \n    # Return the count as the result\n    return count\n\n# Test cases\nprint(frequency_Of_Largest([1,2,3,4,4]))  # Expected output: 2\nprint(frequency_Of_Largest([5,6,5]))      # Expected output: 1\nprint(frequency_Of_Largest([2,7,7,7]))    # Expected output: 3",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef extract_symmetric(tuples_list):\n    sym_pairs = set()\n    for pair in tuples_list:\n        sorted_pair = tuple(sorted(pair))\n        sym_pairs.add(sorted_pair)\n    return sym_pairs\n\n# Test cases\nprint(extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)])) # Should return {(8, 9), (6, 7)}\nprint(extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)])) # Should return {(9, 10), (7, 8)}\nprint(extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)])) # Should return {(8, 9), (10, 11)}",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_gp(a, r, n):\n    return int((a * ((1 - pow(r, n)) / (1 - r)))) if r != 1 else int(n * a)",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False\n\n# Test cases\nprint(binary_search([1,2,3,5,8], 6))  # Expected output: False\nprint(binary_search([7, 8, 9, 10, 13], 10))  # Expected output: True\nprint(binary_search([11, 13, 14, 19, 22, 36], 23))  # Expected output: False",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - cannot unpack non-iterable int object",
      "Test 2: FAIL - cannot unpack non-iterable int object",
      "Test 3: FAIL - cannot unpack non-iterable int object"
    ],
    "generated_code": "def calculate_polygons(a, b, c, d, e):\n    polygons = []\n    for i in range(e+1):\n        start_x, start_y = -a + i * (c - a)\n        end_x, end_y = -b + i * (d - b)\n        polygon_points = [\n            (start_x, start_y),\n            (end_x, start_y),\n            (end_x, end_y),\n            (start_x, end_y)\n        ]\n        polygons.append(polygon_points)\n    return polygons",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_to_integer(binary_tuple):\n    # Convert each element in the tuple from binary string to decimal and sum them up.\n    result = int(''.join(str(i) for i in binary_tuple), 2)\n    return str(result)\n\n# Test cases\nprint(binary_to_integer((1, 1, 0, 1, 0, 0, 1)))  # Output: \"105\"\nprint(binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)))  # Output: \"101\"\nprint(binary_to_integer((1, 1, 0, 1, 0, 1)))  # Output: \"53\"",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(s):\n    # Remove all lowercase letters in the input string s using regex\n    return re.sub('[a-z]', '', s)\n\n# Test cases to verify the correctness of the function\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI', \"Test case 1 failed\"\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY', \"Test case 2 failed\"\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef heap_queue_smallest(numbers_list, k):\n    \"\"\"\n    Extracts the k smallest elements from a list of integers and returns them in ascending order.\n    \n    Parameters:\n    numbers_list (list): The list of integers from which to extract the smallest values.\n    k (int): The number of smallest elements to extract.\n    \n    Returns:\n    list: A list containing the k smallest integers from the input list, sorted in ascending order.\n    \"\"\"\n    # Convert the list into a min-heap\n    heapq.heapify(numbers_list)\n    result = []\n    for _ in range(k):\n        # Pop the smallest element from the heap\n        smallest = heapq.heappop(numbers_list)\n        result.append(smallest)\n    return result",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\ndef surfacearea_cone(radius, height):\n    \"\"\"\n    Calculate the surface area of a cone given its radius and height.\n    \n    Args:\n        radius (float): The radius of the base of the cone.\n        height (float): The height of the cone.\n        \n    Returns:\n        float: The calculated surface area of the cone.\n    \"\"\"\n    slant_height = math.sqrt(radius**2 + height**2)\n    curved_surface_area = math.pi * radius * slant_height\n    base_area = math.pi * radius**2\n    total_surface_area = curved_surface_area + base_area\n    return round(total_surface_area, 4)\n\n# Check function with provided data points\nassert abs(surfacearea_cone(5, 12) - 282.7433) < 1e-4\nassert abs(surfacearea_cone(10, 15) - 880.5179) < 1e-4\nassert abs(surfacearea_cone(19, 17) - 2655.9239) < 1e-4\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'gcd' is not defined",
      "Test 2: FAIL - name 'gcd' is not defined",
      "Test 3: FAIL - name 'gcd' is not defined"
    ],
    "generated_code": "def calculate_gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(lst):\n    result = \"\"\n    for element in lst:\n        result += \" \" + str(element)\n    return result.strip()",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def num_comm_div(num1, num2):\n    \"\"\"\n    Find and return the greatest common divisor of two integers.\n    \n    Parameters:\n    - num1 (int): First integer for finding GCD\n    - num2 (int): Second integer for finding GCD\n    \n    Returns:\n    int: The greatest common divisor of num1 and num2\n    \"\"\"\n    gcd = 1\n    i = 1\n    while i <= min(num1, num2):\n        if num1 % i == 0 and num2 % i == 0:\n            gcd = i\n        i += 1\n    return gcd\n\n# Check function with provided data points\nassert num_comm_div(2, 4) == 2\nassert num_comm_div(2, 8) == 2\nassert num_comm_div(12, 24) == 6\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(a, b):\n    # Find the remainder when 'a' is divided by 'b'\n    return a % b",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef add_consecutive_nums(nums: List[int]) -> List[int]:\n    return [nums[i] + nums[i+1] for i in range(len(nums)-1)]",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Series' is not defined",
      "Test 2: FAIL - name 'sum_Of_Series' is not defined",
      "Test 3: FAIL - name 'sum_Of_Series' is not defined"
    ],
    "generated_code": "def sum_of_series(n):\n    # Calculate the cube sum using the formula for the sum of cubes from 1 to n\n    result = int((n * (n + 1) / 2)**2)\n    return result",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_order(arr):\n    # Separate non-zero elements and store them in 'non_zero'\n    non_zero = []\n    for elem in arr:\n        if elem != 0:\n            non_zero.append(elem)\n    \n    # Replace zeros at the end of the list with elements from 'non_zero' until it's exhausted\n    while len(non_zero) > 0:\n        arr.append(non_zero.pop())\n    \n    return arr\n\n# Test the function with provided data points\nprint(re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]))  # Expected output: [6, 8, 2, 3, 4, 1, 0, 0, 0]\nprint(re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]))  # Expected output: [4, 2, 7, 9, 12, 0, 0, 0, 0]\nprint(re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]))  # Expected output: [3, 11, 74, 14, 1, 2, 0, 0, 0]",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient P(n, k).\n    \n    Args:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n    \n    Returns:\n    int: The permutation coefficient P(n, k).\n    \"\"\"\n    return factorial(n) // factorial(n - k)",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(words_list, unwanted_list):\n    return [word for word in words_list if word not in unwanted_list]",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'same_order' is not defined",
      "Test 2: FAIL - name 'same_order' is not defined",
      "Test 3: FAIL - name 'same_order' is not defined"
    ],
    "generated_code": "def is_same_order(list1, list2):\n    return sorted(list1) == sorted(list2)",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'average_Odd' is not defined",
      "Test 2: FAIL - name 'average_Odd' is not defined",
      "Test 3: FAIL - name 'average_Odd' is not defined"
    ],
    "generated_code": "def average_odd(n):\n    total = sum([i for i in range(1, n+1) if i % 2 != 0])\n    count = len([i for i in range(1, n+1) if i % 2 != 0])\n    result = total / count if count > 0 else 0\n    return result",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "from typing import List\nimport bisect\n\ndef no_of_subsequences(nums: List[int], k: int) -> int:\n    nums.sort()  # Sort the array to facilitate counting products\n    dp = [0] * (k + 1)\n    \n    for num in nums:\n        new_dp = [dp[num]]  # Initialize with the current element's count\n    \n        for i in range(1, k + 1):\n            if num * i < k:\n                new_dp.append(dp[i] + new_dp[-1])  # Add to previous total if condition is met\n        \n        dp = new_dp\n    \n    return sum(dp)\n\n# Example check function calls\nprint(no_of_subsequences([1,2,3,4], 10))  # Expected output: 11\nprint(no_of_subsequences([4,8,7,2], 50))  # Expected output: 9\nprint(no_of_subsequences([5,6,7,8], 15))  # Expected output: 4",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min_Sum(n):\n    min_sum = float('inf')\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            temp_sum = i + n // i\n            if temp_sum < min_sum:\n                min_sum = temp_sum\n    return min_sum\n\n# Test cases\nprint(find_Min_Sum(12))  # Expected output: 7\nprint(find_Min_Sum(105)) # Expected output: 15\nprint(find_Min_Sum(2))   # Expected output: 2",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_freq(tup):\n    freq = {}\n    for item in tup:\n        if isinstance(item, int):\n            freq[item] = freq.get(item, 0) + 1\n        elif isinstance(item, tuple):\n            for sub_item in item:\n                freq[sub_item] = freq.get(sub_item, 0) + 1\n    return freq",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for +: 'int' and 'str'"
    ],
    "generated_code": "def add_str(tuple_input, string_add):\n    # Initialize an empty list to store the result\n    result_list = []\n    \n    # Iterate through each element in the input tuple\n    for item in tuple_input:\n        # Append the current item and then append the specified string to it\n        result_list.append(item + string_add)\n    \n    # Return the resulting list\n    return result_list\n\n# Example usage:\nprint(add_str((5, 6, 7, 4, 9), \"FDF\"))",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_elements(tup_list):\n    total_sum = 0\n    for tup in tup_list:\n        for item in tup:\n            total_sum += item\n    return total_sum\n\n# Test cases\nprint(sum_elements([(7, 8, 9, 1, 10, 7), (1, 2, 3, 4, 5, 6), (11, 12, 13, 45, 14)]))\n# Expected output: 42 + 21 + 95 = 158",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def modular_sum(arr, n, m):\n    # Initialize a list to store remainders and their counts\n    remainder_count = [0] * m\n    \n    for num in arr:\n        # Calculate the current remainder of the number when divided by m\n        curr_remainder = num % m\n        \n        # Check if we can find a valid subset using previous calculations\n        for i in range(m):\n            if (curr_remainder + remainder_count[i]) % m == 0:\n                return True\n                \n        # Update the count of each remainder\n        for j in range(remainder_count[curr_remainder]):\n            temp = (m - curr_remainder) % m\n            remainder_count[temp] += remainder_count[curr_remainder]\n            \n        remainder_count[curr_remainder] += 1\n    \n    return False",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def radix_sort(lst):\n    max_num = max(lst)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort_for_radix(lst, exp)\n        exp *= 10\n    return lst\n\ndef counting_sort_for_radix(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n\n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n\n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n\n    for i in range(n):\n        arr[i] = output[i]\n\n# Example usage:\nprint(radix_sort([15, 79, 25, 68, 37]))  # Output: [15, 25, 37, 68, 79]\nprint(radix_sort([9, 11, 8, 7, 3, 2]))   # Output: [2, 3, 7, 8, 9, 11]\nprint(radix_sort([36, 12, 24, 26, 29]))  # Output: [12, 24, 26, 29, 36]",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(nums):\n    max_num = float('-inf')\n    for num in nums:\n        if num > max_num and num >= 0:\n            max_num = num\n    return max_num",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sqrt_root(num):\n    \"\"\"\n    This function calculates the integer square root of a given positive integer.\n    \n    Parameters:\n    num (int): The number whose square root is to be calculated.\n    \n    Returns:\n    int: The integer square root of the input number.\n    \"\"\"\n    return int(math.sqrt(num))\n\n# Test cases to verify the correctness of the function\nassert sqrt_root(4) == 2\nassert sqrt_root(16) == 4\nassert sqrt_root(400) == 20",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def volume_tetrahedron(side_length):\n    # The formula for the volume of a regular tetrahedron with side length 'a' is:\n    # V = (sqrt(2) / 12) * a^3\n    return ((side_length ** 3) * (math.sqrt(2))) / 12",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_lcm(arr):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n    \n    result = arr[0]\n    for num in arr:\n        result *= num // gcd(result, num)\n    return result\n\n# Test cases\nprint(get_lcm([2, 7, 3, 9, 4])) # Expected output: 252\nprint(get_lcm([1, 2, 8, 3])) # Expected output: 24\nprint(get_lcm([3, 8, 4, 10, 5])) # Expected output: 120",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    return len(set([a,b,c])) == 1",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lbs(nums):\n    n = len(nums)\n    dp_increasing = [1]*n\n    dp_decreasing = [1]*n\n    \n    # Calculate increasing subsequences\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp_increasing[i] = max(dp_increasing[i], dp_increasing[j]+1)\n    \n    # Calculate decreasing subsequences\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if nums[i] > nums[j]:\n                dp_decreasing[i] = max(dp_decreasing[i], dp_decreasing[j]+1)\n                \n    # Find maximum length of both increasing and decreasing subsequences\n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, dp_increasing[i], dp_decreasing[i])\n        \n    return max_length\n\n# Test cases\nprint(lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]))  # Should return 7\nprint(lbs([1, 11, 2, 10, 4, 5, 2, 1]))  # Should return 6\nprint(lbs([80, 60, 30, 40, 20, 10]))  # Should return 5",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - 'NoneType' object has no attribute 'group'",
      "Test 3: FAIL - 'NoneType' object has no attribute 'group'"
    ],
    "generated_code": "import re\n\ndef check_string(s):\n    regex = r'^.{8}$|^(?=.*[a-z])(?=.*\\d)[a-z\\d]{8}$'\n    result = [(re.search(regex, s).group() if match else '') for match in [bool(re.match(r'^(?=.*[A-Z])[A-Z]{1,}|^(?=.*\\d)[0-9]{1,}', s)), len(s) >= 8]]\n    return [''.join(result)]",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: max_sum_increasing_subsequence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_increasing_subsequence(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    \n    # dp[i] will hold the maximum sum of an increasing subsequence ending at index i.\n    dp = [arr[0]] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n                \n    return max(dp)\n\n# Test cases\nprint(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7))  # Expected output: 106\nprint(max_sum_increasing_subsequence([3, 4, 5, 10], 4))              # Expected output: 22\nprint(max_sum_increasing_subsequence([10, 5, 4, 3], 4))               # Expected output: 10",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - cannot unpack non-iterable int object",
      "Test 2: FAIL - cannot unpack non-iterable int object",
      "Test 3: FAIL - cannot unpack non-iterable int object"
    ],
    "generated_code": "def parallel_lines(line1, line2):\n    # Extracting coefficients from the equations of the lines in the form Ax + By = C\n    A1, B1, _ = line1[0]\n    _, B2, _ = line2[0]\n\n    # Check if the slopes are equal (lines are parallel)\n    return A1 * B2 == A2 * B1",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def capitalize_first_last_letters(input_string):\n    # Splitting the input string into words\n    words = input_string.split()\n    \n    # Capitalizing the first letter of each word\n    capitalized_words = [word[0].upper() + word[1:] for word in words]\n    \n    # Joining the words back into a single string with spaces\n    result = ' '.join(capitalized_words)\n    \n    return result",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pairs_count(arr, target_sum, k):\n    count = 0\n    seen = set()\n    \n    for num in arr:\n        complement = k - num\n        if complement not in seen:\n            seen.add(num)\n        else:\n            # Ensure each pair is counted once and sorted as (min_num, max_num)\n            count += 1\n    \n    return count\n\n# Example usage\nprint(get_pairs_count([1, 5, 7, -1, 5], 5, 6))  # Output: 3\nprint(get_pairs_count([1, 5, 7, -1], 4, 6))     # Output: 2\nprint(get_pairs_count([1, 1, 1, 1], 4, 2))      # Output: 6",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length(lst_of_lists):\n    return min((len(sublist), sublist) for sublist in lst_of_lists)[1]",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def jacobsthal_lucas(n):\n    # Base case initialization for n = 0 and n = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 5\n    \n    # Recursively calculate the nth Jacobsthal-Lucas number\n    def jac_num(jac):\n        if jac < 2:\n            return 5 - jac\n        else:\n            return 2 * jac - 1\n    \n    # Return the result of calculating Jacobi's second term\n    return jac_num(jac_num(n-1))\n\n# Test cases\nprint(jacobsthal_lucas(5))  # Expected output: 31\nprint(jacobsthal_lucas(2))  # Expected output: 5\nprint(jacobsthal_lucas(4))  # Expected output: 17",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def negative_count(arr):\n    # Count negative numbers\n    count = sum(1 for num in arr if num < 0)\n    \n    # Calculate and return ratio\n    return float(count) / len(arr)\n\n# Test cases\nprint(negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))  # Expected output: 0.31\nprint(negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))   # Expected output: 0.31\nprint(negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17]))          # Expected output: 0.44",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "from typing import List\n\ndef min_coins(coins: List[int], target: int, max_value=0) -> int:\n    \"\"\"\n    Finds the minimum number of coins needed to make up exactly 'target' using\n    the provided 'coins'. If no solution is possible with 'max_value', returns -1.\n    \n    :param coins: A list of coin denominations.\n    :type coins: List[int]\n    :param target: The target amount to reach with the least number of coins.\n    :type target: int\n    :return: The minimum number of coins required to make up the target amount,\n             or -1 if it's not possible within 'max_value'.\n    :rtype: int\n    \"\"\"\n    dp = [-1 for _ in range(target + 1)]\n    return dfs(dp, coins, target, max_value)\n\ndef dfs(dp: List[int], coins: List[int], target: int, max_value: int) -> int:\n    if target == 0:\n        return 0\n    if target < 0 or len(coins) == 0:\n        return float('inf')\n    if dp[target] != -1:\n        return dp[target]\n\n    # Option 1: Use current coin\n    use_coin = 1 + dfs(dp, coins, target - coins[0], max_value)\n    \n    # Option 2: Do not use current coin\n    skip_coin = dfs(dp, coins, target, max_value)\n    \n    dp[target] = min(use_coin, skip_coin)\n    return dp[target]\n\n# Example usage\nprint(min_coins([9, 6, 5, 1], 4))  # Expected output: 2\nprint(min_coins([4, 5, 6, 7, 8, 9], 6))  # Expected output: 1\nprint(min_coins([1, 2, 3], 3))  # Expected output: 2",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_permutation(str1, str2):\n    # Check if both strings have the same length\n    if len(str1) != len(str2):\n        return False\n    \n    # Sort the characters in both strings and compare them\n    return sorted(str1) == sorted(str2)",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_datatype(tup, datatype):\n    new_tup = []\n    for item in tup:\n        if not isinstance(item, datatype):\n            new_tup.append(item)\n    return new_tup\n\n# Test cases\nprint(remove_datatype((4, 5, 4, 7.7, 1.2), int)) # Output: [7.7, 1.2]\nprint(remove_datatype((7, 8, 9, \"SR\"), str)) # Output: [7, 8, 9]\nprint(remove_datatype((7, 1.1, 2, 2.2), float)) # Output: [7, 2]",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search_literal(input_string, literal_pattern):\n    start = input_string.find(literal_pattern)\n    return (start, start + len(literal_pattern))\n\n# Test cases\nprint(search_literal('python programming language', 'python'))  # Expected output: (0, 6)\nprint(search_literal('programming python', 'python'))  # Expected output: (7, 18)\nprint(search_literal('language python', 'python'))  # Expected output: (19, 27)",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: topbottom_surfacearea() missing 1 required positional argument: 'height'"
    ],
    "generated_code": "import math\n\ndef topbottom_surfacearea(radius, height):\n    \"\"\"\n    Calculate the total surface area of a cylinder including both sides and bases.\n    \n    Args:\n        radius (float): The radius of the cylinder's base.\n        height (float): The height of the cylinder.\n        \n    Returns:\n        float: The total surface area of the cylinder.\n    \"\"\"\n    side_area = 2 * math.pi * radius * height\n    base_area = math.pi * radius ** 2\n    return 2 * (side_area + base_area)\n\n# Test cases to verify the correctness of the solution\nassert abs(topbottom_surfacearea(10) - 314.15999999999997) < 1e-6\nassert abs(topbottom_surfacearea(5) - 78.53981600000002) < 1e-6\nassert abs(topbottom_surfacearea(4) - 50.26548245743669) < 1e-6\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(lst,n):\n    return lst[n::n]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test Case 1 Failed."
    ],
    "generated_code": "def first_repeated_word(input_string):\n    # Split the input string into words and store them in a set for O(1) average case lookup time.\n    seen_words = set()\n    \n    # Iterate over each character in the input string.\n    for char in input_string:\n        # If the character is not already in the set of seen words,\n        if char.lower() not in seen_words:\n            seen_words.add(char.lower())\n        else:\n            # Return the first repeated word found (convert it back to upper-case for consistency).\n            return char.upper()\n    \n    # If no repetition was found, return None.\n    return None\n\n# Test cases provided in the docstring below the solution.\nassert first_repeated_word(\"ab ca bc ab\") == \"ab\", \"Test Case 1 Failed.\"\nassert first_repeated_word(\"ab ca bc\") == None, \"Test Case 2 Failed.\"\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\", \"Test Case 3 Failed.\"\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\n    # Use map and join functions to process the input string list into a tuple.\n    result = tuple(map(''.join, zip(*[iter(string_list)]*2)))\n    return result",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "def basesnum_correspondingnum(bases, nums):\n    return [base ** num for base, num in zip(bases, nums)]",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: max() arg is an empty sequence"
    ],
    "generated_code": "def find_Diff(arr, n):\n    # Initialize frequency dictionaries for each number from 1 to n\n    freq_dict = {}\n    for i in range(1, n+1):\n        freq_dict[i] = []\n    \n    # Populate the frequency dictionary with counts of numbers in the array\n    for num in arr:\n        if num <= n:\n            freq_dict[num].append(num)\n    \n    # Calculate the differences between maximum and minimum frequencies for each number\n    diffs = [max(freq_list)-min(freq_list) for num, freq_list in freq_dict.items()]\n    \n    # Return the largest difference found\n    return max(diffs)\n\n# Test cases\nprint(find_Diff([1,1,2,2,7,8,4,5,1,4], 10))  # Output: 2\nprint(find_Diff([1,7,9,2,3,3,1,3,3], 9))     # Output: 3\nprint(find_Diff([1,2,1,2], 4))                # Output: 0",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_abundant(n):\n    sum_of_divisors = sum(i for i in range(1, n) if n % i == 0)\n    return sum_of_divisors > n\n\n# Test cases\nprint(check_abundant(12)) # Expected output: True\nprint(check_abundant(15)) # Expected output: False\nprint(check_abundant(18)) # Expected output: True",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef fill_spaces(input_string):\n    # Use regular expression to find and replace spaces, commas, and dots with colons\n    result = re.sub(r'[ ,.]+', ':', input_string)\n    return result",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_digits(a, b):\n    \"\"\"\n    Add two numbers a and b, return the number of digits in their sum.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        \n    Returns:\n        int: Number of digits in the sum of a and b.\n    \"\"\"\n    sum_result = a + b\n    # Convert to string to get length\n    num_of_digits = len(str(sum_result))\n    return num_of_digits",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_tuple(tuple_list):\n    result = ''\n    for item in tuple_list:\n        for sub_item in item:\n            result += str(sub_item) + ' '\n    return result.strip()\n\n# Test cases\nprint(flatten_tuple([['1', '4', '6'], ['5', '8'], ['2', '9'], ['1', '10']]))  # Output: \"1 4 6 5 8 2 9 1 10\"\nprint(flatten_tuple([['2', '3', '4'], ['6', '9'], ['3', '2'], ['2', '11']]))  # Output: \"2 3 4 6 9 3 2 2 11\"\nprint(flatten_tuple([['14', '21', '9'], ['24', '19'], ['12', '29'], ['23', '17']]))  # Output: \"14 21 9 24 19 12 29 23 17\"",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_F_and_L_bits(n):\n    # XOR n with itself shifted right 2 places (to toggle both the most significant bit and the least significant bit)\n    return n ^ (n >> 2)\n\n# Test cases\nprint(toggle_F_and_L_bits(10))  # Expected output: 3\nprint(toggle_F_and_L_bits(15))  # Expected output: 6\nprint(toggle_F_and_L_bits(20))  # Expected output: 5",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_occurence_char(s, c):\n    # Convert the string into a list for easier manipulation\n    char_list = list(s)\n    # Iterate through the list in reverse order\n    for i in range(len(char_list) - 1, -1, -1):\n        # Check if the current element matches the target character\n        if char_list[i] == c:\n            return i\n    # Return None if the character is not found\n    return None",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Total_Hamming_Distance' is not defined",
      "Test 2: FAIL - name 'Total_Hamming_Distance' is not defined",
      "Test 3: FAIL - name 'Total_Hamming_Distance' is not defined"
    ],
    "generated_code": "def total_hamming_distance(n):\n    # Initialize sum to store the total Hamming distance\n    total_sum = 0\n    \n    # Iterate through each bit position\n    for i in range(1, n+1):\n        current_num = bin(i)[2:]  # Convert number to binary and remove '0b' prefix\n        count_ones = current_num.count('1')  # Count number of '1's in binary representation\n        \n        # Add the difference between number of ones and zeros to the total sum\n        total_sum += abs(len(current_num) - count_ones)\n    \n    return total_sum",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_increasing_subsequence(sequence):\n    dp = [1] * len(sequence)\n    \n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return max(dp)\n\n# Test cases\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60])) # Expected output: 5\nprint(longest_increasing_subsequence([3, 10, 2, 1, 20])) # Expected output: 3\nprint(longest_increasing_subsequence([50, 3, 10, 7, 40, 80])) # Expected output: 4",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    \"\"\"\n    This function calculates the sum of the fifth power of the first n odd natural numbers.\n    \n    Parameters:\n    n (int): The number of initial odd natural numbers to consider.\n    \n    Returns:\n    int: The sum of the fifth powers of the first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n + 1):\n        # Calculate the nth odd number using formula: 2n - 1\n        odd_number = 2 * i - 1\n        # Add the fifth power of the current odd number to the sum\n        sum_of_powers += odd_number ** 5\n    \n    return sum_of_powers",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'mid' is not defined. Did you mean: 'id'?"
    ],
    "generated_code": "def find_Max(nums, left, right):\n    if nums[right] > nums[left]:\n        return nums[right]\n    \n    while left < right:\n        pivot = left + (right - left) // 2\n        \n        # Check if mid itself is the max\n        if mid == len(nums) - 1:\n            return nums[mid]\n        \n        # Check for two elements next to each other\n        if nums[pivot] > nums[(pivot + 1) % len(nums)]:\n            return nums[pivot]\n        \n        # If we found one rotation point then move to right side\n        elif nums[pivot] < nums[left]:\n            right = pivot\n        else:\n            left = pivot + 1\n            \n# Test cases\nprint(find_Max([2,3,5,6,9], 0, 4))  # Expected output: 9\nprint(find_Max([3,4,5,2,1], 0, 4))  # Expected output: 5\nprint(find_Max([1,2,3], 0, 2))      # Expected output: 3",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_column(data, index):\n    return [row[index] for row in data]\n\n# Test cases to verify the correctness of the function\nassert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0) == [1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2) == [3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0) == [1, 5, 1, 13, 5, 9]",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Seq_Linear(seq):\n    # Check if all elements in the sequence are equal\n    if len(set(seq)) == 1:\n        return \"Linear Sequence\"\n    else:\n        return \"Non Linear Sequence\"\n\n# Test Cases\nprint(Seq_Linear([0,2,4,6,8,10]))  # Expected output: Linear Sequence\nprint(Seq_Linear([1,2,3]))         # Expected output: Linear Sequence\nprint(Seq_Linear([1,5,2]))         # Expected output: Non Linear Sequence",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_to_float(tup):\n    # Convert each element in the tuple to float and then sum them up\n    return sum(float(i) for i in tup)",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(lst):\n    # Initialize an empty list to store odd numbers\n    odds = []\n    \n    # Iterate through each element in the input list\n    for num in lst:\n        # Check if the number is odd\n        if num % 2 != 0:\n            # If it's odd, add it to the odds list\n            odds.append(num)\n    \n    # Return the list of odd numbers\n    return odds",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def difference(n):\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    \n    # Return the difference\n    return sum_cubes - sum_numbers",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef find_Odd_Pair(arr: List[int], k: int) -> int:\n    \"\"\"\n    Counts the number of unique pairs in the array whose XOR is an odd number.\n    \n    :param arr: List of integers representing the array.\n    :param k: Integer value for which pairs are checked.\n    :return: Number of pairs where the XOR of each pair equals 'k'.\n    \"\"\"\n    result = 0\n    seen_xor_k = set()\n    for num in arr:\n        if num % 2 == 0 and k ^ num not in seen_xor_k:\n            result += 1\n        elif num % 2 != 0 and k & num not in seen_xor_k:\n            result += 1\n        else:\n            seen_xor_k.add(k ^ num)\n        seen_xor_k.add(num & k)\n    return result",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(s):\n    return s.swapcase()",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def digit_distance_nums(a, b):\n    # Convert both numbers to strings and concatenate them.\n    concatenated_digits = str(a) + str(b)\n    \n    # Calculate the absolute difference of lengths of the concatenated string.\n    length_difference = abs(len(str(a)) - len(str(b)))\n    \n    # Subtract the length difference from twice the maximum number's digits.\n    digit_distance = 2 * max(len(str(a)), len(str(b))) - length_difference\n    \n    return digit_distance",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def max_sub_array_sum(nums):\n    if not nums:\n        return 0\n    \n    max_sum = current_sum = nums[0]\n    \n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: descriptor 'union' for 'set' objects doesn't apply to a 'tuple' object"
    ],
    "generated_code": "def union_elements(*tuples):\n    \"\"\"\n    This function takes multiple tuples as input and returns their union.\n    \n    :param tuples: A variable number of tuple arguments.\n    :return: A list containing all unique elements from the provided tuples.\n    \"\"\"\n    return list(set.union(*tuples))\n\n# Test Cases\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == [3, 4, 5, 6, 7, 10]\nassert union_elements((1, 2, 3, 4), (3, 4, 5, 6)) == [1, 2, 3, 4, 5, 6]\nassert union_elements((11, 12, 13, 14), (13, 15, 16, 17)) == [11, 12, 13, 14, 15, 16, 17]\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: too many values to unpack (expected 2)"
    ],
    "generated_code": "def assign_elements(tup):\n    \"\"\"\n    Assigns each element of the input tuple with its corresponding element(s) from another tuple \n    where those elements have matching first values.\n    \n    :param tup: A tuple containing tuples of integers.\n    :return: A dictionary where each key is an integer and value is a list of integers representing\n             their corresponding assigned pairs from the second tuple.\n    \"\"\"\n    result = {}\n    for i, j in set(zip(*tup)):  # Collect unique first elements and paired elements together\n        for k, v in zip(i, j):  # For each combination of unique first elements and pairs\n            if k not in result:\n                result[k] = []\n            result[k].append(v)\n    return result\n\n# Test cases\nprint(assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)]))  # Output should match one of the test cases\nprint(assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)]))\nprint(assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)]))",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max_Length' is not defined",
      "Test 2: FAIL - name 'Find_Max_Length' is not defined",
      "Test 3: FAIL - name 'Find_Max_Length' is not defined"
    ],
    "generated_code": "def find_max_length(lists):\n    # Initialize max_len with 0\n    max_len = 0\n    \n    # Iterate through each list in the input list\n    for lst in lists:\n        # Update max_len if the current list's length is greater than max_len\n        max_len = max(max_len, len(lst))\n    \n    return max_len",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_values(s):\n    return s.replace('\"', '').split(', ')",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\n# Test cases\nprint(count_Pairs([1,2,1], 3)) # Expected output: 2\nprint(count_Pairs([1,1,1,1], 4)) # Expected output: 0\nprint(count_Pairs([1,2,3,4,5], 5)) # Expected output: 10",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(s):\n    return list(s)",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def empty_list(n):\n    return [{}] * n",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_words(string_list, chars):\n    return [word for word in string_list if not any(char in word for char in chars)]\n\n# Example usage and test cases\nprint(remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"], ['#', 'color', '@'])) # ['Red', '', 'Green', 'Orange', 'White']\nprint(remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['&', '+', '@'])) # ['Red', '', 'Green', 'Orange', 'White']\nprint(remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['@'])) # ['Red &', 'Orange+', 'Green', 'Orange', 'White']",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_pair_diff_lessthan_K(arr, k, n):\n    arr.sort()\n    ans = []\n    i = j = k = 0\n    while k < len(arr) and i < len(arr) - 1:\n        if abs(arr[i] - arr[j]) <= k:\n            ans.append((arr[i], arr[j]))\n            i += 1\n            j += 1\n        else:\n            if arr[i] + arr[n-1] >= arr[k]:\n                i += 1\n            elif arr[j] + arr[0] >= arr[k]:\n                j += 1\n            else:\n                k += 1\n    print(ans)\n    return sum(x for x, y in ans)\n\nmax_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4)",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def two_unique_nums(nums):\n    unique_list = []\n    for num in nums:\n        if num not in unique_list:\n            unique_list.append(num)\n    return unique_list",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport functools\n\ndef unique_product(numbers: List[int]) -> int:\n    # Remove duplicates from the list\n    unique_numbers = set(numbers)\n    # Calculate the product of all unique numbers\n    result = functools.reduce(lambda x, y: x * y, unique_numbers)\n    return result",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the total surface area of a cylinder with given radius r and height h.\n    \n    Parameters:\n    r (float): The radius of the base of the cylinder.\n    h (float): The height of the cylinder.\n    \n    Returns:\n    float: The total surface area of the cylinder.\n    \"\"\"\n    top_bottom_area = 2 * math.pi * r ** 2\n    side_area = 2 * math.pi * r * h\n    return top_bottom_area + side_area\n\n# Check function with provided data points\nprint(surfacearea_cylinder(10, 5))  # Expected output: approximately 942.45\nprint(surfacearea_cylinder(4, 5))   # Expected output: approximately 226.188\nprint(surfacearea_cylinder(4, 10))  # Expected output: approximately 351.848",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - count_no() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def count_no(n, divisor, max_num):\n    total = 0\n    for i in range(1, max_num + 1):\n        if i % n != 0 and i % divisor != 0:\n            total += 1\n    return total",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: is_sub_array() takes 2 positional arguments but 4 were given"
    ],
    "generated_code": "def is_sub_array(arr1, arr2):\n    if len(arr2) > len(arr1): \n        return False \n\n    n = len(arr1)\n    m = len(arr2)\n\n    for i in range(m - n + 1):\n        flag = True \n        for j in range(n):\n            if arr1[j] != arr2[i+j]:\n                flag = False \n                break\n        \n        if flag:\n            return True \n    \n    return False \n\n# Test Cases\nprint(is_sub_array([1,4,3,5], [1,2], 4, 2)) # Expected output: False\nprint(is_sub_array([1,2,1], [1,2,1], 3, 3)) # Expected output: True\nprint(is_sub_array([1,0,2,2], [2,2,0], 4, 3)) # Expected output: False",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit_Factorial(n):\n    # Initialize result to 1 as 0! is defined to be 1 and does not affect the last digit\n    res = 1\n    \n    # Iterate from 1 to n inclusive\n    for i in range(1, n + 1):\n        # Update result with the last digit of i!\n        res = ((res * i) % 10)\n    \n    return res",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "from typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    return [list1[i] if i < len(list1) else list2[i - len(list1)] if i >= 0 else list3[i - 2 * len(list1)] for i in range(len(list1) + len(list2) + len(list3))]",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_dissimilar(tuple_a, tuple_b):\n    # Convert tuples to sets for comparison\n    set_a = set(tuple_a)\n    set_b = set(tuple_b)\n    \n    # Find elements in one set but not in the other\n    result = set_a.symmetric_difference(set_b)\n    \n    # Return as a sorted list of integers\n    return sorted(result)\n\n# Test cases\nprint(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))  # Expected output: [3, 6, 7, 10]\nprint(find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)))  # Expected output: [1, 4, 7, 9]\nprint(find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)))  # Expected output: [34, 36, 11, 25]",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_even(data):\n    return tuple(i for i in data if not isinstance(i, int) or i % 2 == 0)\n\n# Test cases\nprint(extract_even((4, 5, (7, 6, (2, 4)), 6, 8))) # Should return (4, (6, (2, 4)), 6, 8)\nprint(extract_even((5, 6, (8, 7, (4, 8)), 7, 9))) # Should return (6, (8, (4, 8)))\nprint(extract_even((5, 6, (9, 8, (4, 6)), 8, 10))) # Should return (6, (8, (4, 6)), 8, 10)",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'surface_Area' is not defined",
      "Test 2: FAIL - name 'surface_Area' is not defined",
      "Test 3: FAIL - name 'surface_Area' is not defined"
    ],
    "generated_code": "def surface_area_square_pyramid(base_edge, slant_height):\n    # Calculate the area of the base\n    base_area = base_edge ** 2\n    # Calculate the four triangular faces' areas\n    triangle_area = 2 * base_edge * slant_height / 2 + base_edge ** 2 / 2\n    # The total surface area is the sum of the base and all four triangles\n    total_surface_area = base_area + triangle_area\n    return total_surface_area",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def my_dict(test_dict):\n    return len(test_dict) == 0",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        ans = 0\n        for i in range(n):\n            ans += catalan_number(i) * catalan_number(n - i - 1)\n        return ans",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_adverbs(sentence):\n    # Define the pattern to match adverbs followed by an apostrophe and then a letter.\n    pattern = r'([a-zA-Z]+)' \n    matches = re.findall(pattern, sentence)\n    \n    if not matches:\n        return None\n    \n    results = []\n    for match in matches:\n        start = sentence.find(match) + len(match)\n        end = start + len(match)\n        results.append(f\"{start}-{end}: {match}\")\n        \n    return results",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef expensive_items(dataset, k):\n    \"\"\"\n    Finds and returns the 'k' most expensive items in the given dataset.\n    \n    :param dataset: A list of dictionaries where each dictionary represents an item with keys 'name' and 'price'.\n    :param k: An integer representing the number of most expensive items to return.\n    :return: A list of dictionaries containing the names and prices of the 'k' most expensive items.\n    \"\"\"\n    # Using `heapq.nlargest` for finding the largest elements efficiently.\n    result = heapq.nlargest(k, dataset, key=lambda x: x['price'])\n    return result\n\n# Test cases to verify the correctness of the solution\ndef check_solution():\n    assert len(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 1)) == 1\n    assert len(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2)) == 2\n    assert len(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}], 1)) == 1\n\ncheck_solution()",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_Arr(arr, n, k):\n    # Add the first part of the array to the end\n    arr.extend(arr[:k])\n    return arr\n\n# Test Cases\nprint(split_Arr([12,10,5,6,52,36],6,2))  # Expected output: [5,6,52,36,12,10]\nprint(split_Arr([1,2,3,4],4,1))         # Expected output: [2,3,4,1]\nprint(split_Arr([0,1,2,3,4,5,6,7],8,3))  # Expected output: [3,4,5,6,7,0,1,2]",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(lst):\n    return tuple(lst)\n\n# Test cases\nprint(list_tuple([5, 10, 7, 4, 15, 3])) # Expected output: (5, 10, 7, 4, 15, 3)\nprint(list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])) # Expected output: (2, 4, 5, 6, 2, 3, 4, 4, 7)\nprint(list_tuple([58,44,56])) # Expected output: (58,44,56)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(nums):\n    \"\"\"\n    Finds the difference between the largest and smallest values in the list.\n    \n    Parameters:\n    nums (list): A list of integers.\n    \n    Returns:\n    int: The difference between the largest and smallest integer in the list.\n    \"\"\"\n    # Return the difference between the max and min values in the list\n    return max(nums) - min(nums)",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perfect_squares(start, end):\n    return [i*i for i in range(int((end**0.5)+1), int((start**0.5)-1), -1) if start <= i*i <= end]\n\n# Test cases\nprint(perfect_squares(1, 30))  # Expected output: [1, 4, 9, 16, 25]\nprint(perfect_squares(50, 100))  # Expected output: [64, 81, 100]\nprint(perfect_squares(100, 200))  # Expected output: [100, 121, 144, 169, 196]",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates (rho, theta) into their corresponding rectangular coordinates.\n    \n    Parameters:\n    - rho: A number representing the radial distance in polar coordinates.\n    - theta: A number representing the angle in radians in polar coordinates.\n    \n    Returns:\n    - A tuple containing two numbers. The first number is the x-coordinate of the point,\n      and the second number is the y-coordinate.\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return ((x.real, y.real), (x.imag, y.imag))\n\n# Test cases\nprint(polar_rect(3, 4)) # Expected output: ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nprint(polar_rect(4, 7)) # Expected output: ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nprint(polar_rect(15, 17)) # Expected output: ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    # Interchange the first and last elements of the list\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_product' is not defined",
      "Test 2: FAIL - name 'sum_Of_product' is not defined",
      "Test 3: FAIL - name 'sum_Of_product' is not defined"
    ],
    "generated_code": "import math\n\ndef sum_of_product(n):\n    \"\"\"\n    Calculate the sum of the product of binomial coefficients for a given integer n.\n    \n    Args:\n    n (int): The input integer\n    \n    Returns:\n    int: Sum of the product of binomial coefficients for integers from 0 to n\n    \"\"\"\n    total_sum = 0\n    for i in range(n + 1):\n        for j in range(i + 1):\n            total_sum += math.comb(n, i) * math.comb(n - i, j)\n    return total_sum\n\n# Test cases\nprint(sum_of_product(3))  # Expected output: 15\nprint(sum_of_product(4))  # Expected output: 56\nprint(sum_of_product(1))  # Expected output: 1",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef removezero_ip(ip):\n    return re.sub(r'^0+\\.?', '', ip)",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diff_even_odd(lst):\n    # Find the first even and odd numbers in the list\n    first_even = None if not any(isinstance(x, int) and x % 2 == 0 for x in lst) else min(filter(lambda x: isinstance(x, int) and x % 2 == 0, lst))\n    first_odd = None if not any(isinstance(x, int) and x % 2 != 0 for x in lst) else min(filter(lambda x: isinstance(x, int) and x % 2 != 0, lst))\n\n    # Return the difference between the two numbers\n    return abs(first_odd - first_even)\n\n# Test cases\nprint(diff_even_odd([1,3,5,7,4,1,6,8]))  # Expected output: 3\nprint(diff_even_odd([1,2,3,4,5,6,7,8,9,10]))  # Expected output: 1\nprint(diff_even_odd([1,5,7,9,10]))  # Expected output: 9",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2): \n        return 'Not Possible'\n    \n    swap_count = 0\n    \n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            if s1[i] == '1':\n                if s2[i] == '0':\n                    swap_count += 1\n                else:\n                    return 'Not Possible'\n            elif s1[i] == '0':\n                if s2[i] == '1':\n                    return 'Not Possible'\n                else:\n                    swap_count += 1\n    \n    return swap_count",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import sys\n\ndef tuple_size(input_tuple):\n    \"\"\"\n    This function takes an input tuple and returns its size in bytes.\n    \n    Parameters:\n    input_tuple (tuple): The tuple whose size is to be calculated.\n    \n    Returns:\n    int: Size of the input tuple in bytes.\n    \"\"\"\n    # Calculate the size of the input tuple\n    tuple_size_in_bytes = sys.getsizeof(input_tuple)\n    return tuple_size_in_bytes\n\n# Test cases to verify the correctness of the solution\nprint(tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)))  # Expected output: 80\nprint(tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\")))  # Expected output: 80\nprint(tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))))  # Expected output: 80",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_kth(arr1, arr2, n1, n2, k):\n    if n1 == 0:\n        return arr2[k-1]\n    if n2 == 0:\n        return arr1[k-1]\n    \n    if k > n1 + n2:\n        return None\n    \n    mid1 = min(k, n1)\n    mid2 = min(k, n2)\n\n    if arr1[mid1-1] < arr2[mid2-1]:\n        return find_kth(arr1[mid1:], arr2[:mid2], n1-mid1, n2, k-mid1)\n    else:\n        return find_kth(arr1[:mid1], arr2[mid2:], n1, n2-mid2, k-mid2)",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
    ],
    "generated_code": "def armstrong_number(num):\n    # Calculate the sum of cubes of each digit\n    return num == int(str(num) ** (len(str(num))))\n\n\n# Test cases\nprint(armstrong_number(153))  # Expected output: True\nprint(armstrong_number(259))  # Expected output: False\nprint(armstrong_number(4458)) # Expected output: False",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n):\n    total_sum = (n * (n + 1)) / 2\n    average = total_sum / n\n    return int(total_sum), round(average, 2)\n\n# Test cases\nprint(sum_average(10))  # Expected output: (55, 5.5)\nprint(sum_average(15))  # Expected output: (120, 8.0)\nprint(sum_average(20))  # Expected output: (210, 10.5)",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Even' is not defined",
      "Test 2: FAIL - name 'is_Even' is not defined",
      "Test 3: FAIL - name 'is_Even' is not defined"
    ],
    "generated_code": "def is_even(n):\n    \"\"\"\n    Check if the given number is even.\n    \n    Args:\n    n (int): The number to be checked.\n    \n    Returns:\n    bool: True if n is even, False otherwise.\n    \"\"\"\n    return (n & 1) == 0",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]