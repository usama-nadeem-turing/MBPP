[
  {
    "mbpp_id": 11,
    "problem": {
      "task_id": 11,
      "text": "Write a python function to remove first and last occurrence of a given character from the string.",
      "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
      "test_list": [
        "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
        "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
        "assert remove_Occ(\"PHP\",\"P\") == \"H\""
      ],
      "test_setup_code": "",
      "challenge_test_list": [
        "assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"",
        "assert remove_Occ(\"\",\"l\") == \"\""
      ]
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to remove first and last occurrence of a given character from the string.\n\nTask ID: 11\n\nExpected behavior (test cases):\n1. remove_Occ(\"hello\",\"l\") should return \"heo\"\n2. remove_Occ(\"abcda\",\"a\") should return \"bcd\"\n3. remove_Occ(\"PHP\",\"P\") should return \"H\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_Occ(str,n):\r\n  count = str.count(n)\r\n  i = -1\r\n  while(count>0):\r\n    i = str.find(n,i+1) \r\n    if(i==-1): \r\n        break\r\n    j = str.rfind(n,i)\r\n    temp = str[i:j]\r\n    for c in temp:\r\n        str=str.replace(c,'',1)\r\n    count-=1\r\n  print (\"String after removing all occurrences is : \",str) "
          }
        }
      ],
      "usage": {
        "total_tokens": 229,
        "prompt_tokens": 139,
        "completion_tokens": 97
      }
    },
    "timestamp": 1752255008.4316304
  },
  {
    "mbpp_id": 12,
    "problem": {
      "task_id": 12,
      "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
      "code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
      "test_list": [
        "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
        "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
        "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\nTask ID: 12\n\nExpected behavior (test cases):\n1. sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n2. sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n3. sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sort_matrix(matrix):\r\n    for i in range(len(matrix)):\r\n        for j in range(i+1, len(matrix[i])):\r\n            if sum(matrix[j]) < sum(matrix[i]):\r\n                temp = matrix[j]\r\n                matrix[j] = matrix[i]\r\n                matrix[i] = temp\r\n    return matrix"
          }
        }
      ],
      "usage": {
        "total_tokens": 319,
        "prompt_tokens": 264,
        "completion_tokens": 62
      }
    },
    "timestamp": 1752255013.8873303
  },
  {
    "mbpp_id": 13,
    "problem": {
      "task_id": 13,
      "text": "Write a function to count the most common words in a dictionary.",
      "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
      "test_list": [
        "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
        "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
        "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count the most common words in a dictionary.\n\nTask ID: 13\n\nExpected behavior (test cases):\n1. count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) should return [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n2. count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) should return [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n3. count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) should return [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "from collections import Counter\r\ndef count_common(test):\r\n  test = sorted(set(test))\r\n  result = [(x,test.count(x)) for x in test]\r\n  result.sort(key=lambda item:item[1], reverse=True)\r\n  if not result:\r\n    result.append(('empty_set',0))\r\n  return result[0]"
          }
        }
      ],
      "usage": {
        "total_tokens": 348,
        "prompt_tokens": 291,
        "completion_tokens": 64
      }
    },
    "timestamp": 1752255019.5120115
  },
  {
    "mbpp_id": 14,
    "problem": {
      "task_id": 14,
      "text": "Write a python function to find the volume of a triangular prism.",
      "code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
      "test_list": [
        "assert find_Volume(10,8,6) == 240",
        "assert find_Volume(3,2,2) == 6",
        "assert find_Volume(1,2,1) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the volume of a triangular prism.\n\nTask ID: 14\n\nExpected behavior (test cases):\n1. find_Volume(10,8,6) should return 240\n2. find_Volume(3,2,2) should return 6\n3. find_Volume(1,2,1) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Volume(a,b,c):\r\n    vol = ((a*b*c)/2)\r\n    print(\"The Volume is\",vol) "
          }
        }
      ],
      "usage": {
        "total_tokens": 162,
        "prompt_tokens": 141,
        "completion_tokens": 28
      }
    },
    "timestamp": 1752255022.2369056
  },
  {
    "mbpp_id": 15,
    "problem": {
      "task_id": 15,
      "text": "Write a function to split a string at lowercase letters.",
      "code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
      "test_list": [
        "assert split_lowerstring(\"AbCd\")==['bC','d']",
        "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
        "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to split a string at lowercase letters.\n\nTask ID: 15\n\nExpected behavior (test cases):\n1. split_lowerstring(\"AbCd\")==['bC','d']\n2. split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\n3. split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def split_lowerstring(string):\r\n  res = [string[i:j] for i in range(len(string)) for j in range(i+1,len(string)+1) if not string[i:j].islower()]\r\n  return list(map(list, zip(*res)))"
          }
        }
      ],
      "usage": {
        "total_tokens": 207,
        "prompt_tokens": 161,
        "completion_tokens": 53
      }
    },
    "timestamp": 1752255026.919429
  },
  {
    "mbpp_id": 16,
    "problem": {
      "task_id": 16,
      "text": "Write a function to find sequences of lowercase letters joined with an underscore.",
      "code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
      "test_list": [
        "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
        "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
        "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
      ],
      "test_setup_code": "",
      "challenge_test_list": [
        "assert text_lowercase_underscore(\"aab-cbbbc\")==('Not matched!')"
      ]
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find sequences of lowercase letters joined with an underscore.\n\nTask ID: 16\n\nExpected behavior (test cases):\n1. text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n2. text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\n3. text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef text_lowercase_underscore(text):\r\n    pattern = '^[a-z]+_[a-z]+$'\r\n    if(re.search(pattern,text)):\r\n        return \"Found a match!\" \r\n    else:\r\n        return (\"Not matched!\")"
          }
        }
      ],
      "usage": {
        "total_tokens": 178,
        "prompt_tokens": 138,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752255031.1183994
  },
  {
    "mbpp_id": 17,
    "problem": {
      "task_id": 17,
      "text": "Write a function to find the perimeter of a square.",
      "code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
      "test_list": [
        "assert square_perimeter(10)==40",
        "assert square_perimeter(5)==20",
        "assert square_perimeter(4)==16"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the perimeter of a square.\n\nTask ID: 17\n\nExpected behavior (test cases):\n1. square_perimeter(10)==40\n2. square_perimeter(5)==20\n3. square_perimeter(4)==16\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def square_perimeter(s):\r\n  return s * 4"
          }
        }
      ],
      "usage": {
        "total_tokens": 124,
        "prompt_tokens": 119,
        "completion_tokens": 12
      }
    },
    "timestamp": 1752255032.5593152
  },
  {
    "mbpp_id": 18,
    "problem": {
      "task_id": 18,
      "text": "Write a function to remove characters from the first string which are present in the second string.",
      "code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
      "test_list": [
        "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
        "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
        "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove characters from the first string which are present in the second string.\n\nTask ID: 18\n\nExpected behavior (test cases):\n1. remove_dirty_chars(\"probasscurve\", \"pros\") should return 'bacuve'\n2. remove_dirty_chars(\"digitalindia\", \"talent\") should return 'digiidi'\n3. remove_dirty_chars(\"exoticmiles\", \"toxic\") should return 'emles' \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_dirty_chars(str1,str2):\r\n  res = \"\"\r\n  for x in str1:\r\n    if(x not in str2):\r\n      res = res + x\r\n  return (res) "
          }
        }
      ],
      "usage": {
        "total_tokens": 189,
        "prompt_tokens": 155,
        "completion_tokens": 41
      }
    },
    "timestamp": 1752255036.2324665
  },
  {
    "mbpp_id": 19,
    "problem": {
      "task_id": 19,
      "text": "Write a function to find whether a given array of integers contains any duplicate element.",
      "code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
      "test_list": [
        "assert test_duplicate(([1,2,3,4,5]))==False",
        "assert test_duplicate(([1,2,3,4, 4]))==True",
        "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find whether a given array of integers contains any duplicate element.\n\nTask ID: 19\n\nExpected behavior (test cases):\n1. test_duplicate(([1,2,3,4,5]))==False\n2. test_duplicate(([1,2,3,4, 4]))==True\n3. test_duplicate([1,1,2,2,3,3,4,4,5])==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def test_duplicate(arr):\r\n    for i in range(len(arr)):\r\n        if arr[i] == arr[arr[i]]:\r\n            return True\r\n    else:\r\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 179,
        "prompt_tokens": 152,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752255039.3705175
  },
  {
    "mbpp_id": 20,
    "problem": {
      "task_id": 20,
      "text": "Write a function to check if the given number is woodball or not.",
      "code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
      "test_list": [
        "assert is_woodall(383) == True",
        "assert is_woodall(254) == False",
        "assert is_woodall(200) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": [
        "assert is_woodall(32212254719) == True",
        "assert is_woodall(32212254718) == False",
        "assert is_woodall(159) == True"
      ]
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the given number is woodball or not.\n\nTask ID: 20\n\nExpected behavior (test cases):\n1. is_woodall(383) should return True\n2. is_woodall(254) should return False\n3. is_woodall(200) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_woodall(n):\r\n    x = n\r\n    y = 1\r\n    while y <= x:\r\n        z = y + x\r\n        y = z\r\n        x += 2\r\n    return y == n"
          }
        }
      ],
      "usage": {
        "total_tokens": 174,
        "prompt_tokens": 134,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752255043.4935744
  },
  {
    "mbpp_id": 21,
    "problem": {
      "task_id": 21,
      "text": "Write a function to find m number of multiples of n.",
      "code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
      "test_list": [
        "assert multiples_of_num(4,3)== [3,6,9,12]",
        "assert multiples_of_num(2,5)== [5,10]",
        "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find m number of multiples of n.\n\nTask ID: 21\n\nExpected behavior (test cases):\n1. multiples_of_num(4,3)== [3,6,9,12]\n2. multiples_of_num(2,5)== [5,10]\n3. multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def multiples_of_num(n,m):\r\n    return ([i*m for i in range(1,n+1)])"
          }
        }
      ],
      "usage": {
        "total_tokens": 171,
        "prompt_tokens": 156,
        "completion_tokens": 22
      }
    },
    "timestamp": 1752255045.6692288
  },
  {
    "mbpp_id": 22,
    "problem": {
      "task_id": 22,
      "text": "Write a function to find the first duplicate element in a given array of integers.",
      "code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
      "test_list": [
        "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
        "assert find_first_duplicate([1, 2, 3, 4])==-1",
        "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the first duplicate element in a given array of integers.\n\nTask ID: 22\n\nExpected behavior (test cases):\n1. find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n2. find_first_duplicate([1, 2, 3, 4])==-1\n3. find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_first_duplicate(arr):\r\n    seen = set()\r\n    for i in arr:\r\n        if i in seen:\r\n            return i\r\n        else:\r\n            seen.add(i)\r\n    return -1"
          }
        }
      ],
      "usage": {
        "total_tokens": 196,
        "prompt_tokens": 164,
        "completion_tokens": 39
      }
    },
    "timestamp": 1752255049.0364823
  },
  {
    "mbpp_id": 23,
    "problem": {
      "task_id": 23,
      "text": "Write a python function to find the maximum sum of elements of list in a list of lists.",
      "code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
      "test_list": [
        "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
        "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
        "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
      ],
      "test_setup_code": "",
      "challenge_test_list": [
        "assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2"
      ]
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the maximum sum of elements of list in a list of lists.\n\nTask ID: 23\n\nExpected behavior (test cases):\n1. maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) should return 33\n2. maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) should return 6\n3. maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) should return 19\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def maximum_Sum(lists):\r\n    temp = [max(i) for i in zip(*lists)]\r\n    return max(temp) + sum([min(i) for i in zip(*lists)])"
          }
        }
      ],
      "usage": {
        "total_tokens": 235,
        "prompt_tokens": 203,
        "completion_tokens": 39
      }
    },
    "timestamp": 1752255052.542412
  },
  {
    "mbpp_id": 24,
    "problem": {
      "task_id": 24,
      "text": "Write a function to convert the given binary number to its decimal equivalent.",
      "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
      "test_list": [
        "assert binary_to_decimal(100) == 4",
        "assert binary_to_decimal(1011) == 11",
        "assert binary_to_decimal(1101101) == 109"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert the given binary number to its decimal equivalent.\n\nTask ID: 24\n\nExpected behavior (test cases):\n1. binary_to_decimal(100) should return 4\n2. binary_to_decimal(1011) should return 11\n3. binary_to_decimal(1101101) should return 109\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def binary_to_decimal(binary):\r\n  dec = int(binary, 2)\r\n  return dec"
          }
        }
      ],
      "usage": {
        "total_tokens": 152,
        "prompt_tokens": 141,
        "completion_tokens": 18
      }
    },
    "timestamp": 1752255054.5546594
  },
  {
    "mbpp_id": 25,
    "problem": {
      "task_id": 25,
      "text": "Write a python function to find the product of non-repeated elements in a given array.",
      "code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
      "test_list": [
        "assert find_Product([1,1,2,3],4) == 6",
        "assert find_Product([1,2,3,1,1],5) == 6",
        "assert find_Product([1,1,4,5,6],5) == 120"
      ],
      "test_setup_code": "",
      "challenge_test_list": [
        "assert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520"
      ]
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the product of non-repeated elements in a given array.\n\nTask ID: 25\n\nExpected behavior (test cases):\n1. find_Product([1,1,2,3],4) should return 6\n2. find_Product([1,2,3,1,1],5) should return 6\n3. find_Product([1,1,4,5,6],5) should return 120\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Product(arr,k): \r\n    mul = 1\r\n  \r\n    # Iterate through each element in an array\r\n    for i in range(0,len(arr)): \r\n        if (arr[i] < k and arr.count(i)<k):\r\n            mul *= arr[i] \r\n    return mul"
          }
        }
      ],
      "usage": {
        "total_tokens": 211,
        "prompt_tokens": 158,
        "completion_tokens": 60
      }
    },
    "timestamp": 1752255059.6977088
  },
  {
    "mbpp_id": 26,
    "problem": {
      "task_id": 26,
      "text": "Write a function to check if the given tuple list has all k elements.",
      "code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
      "test_list": [
        "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
        "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
        "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": [
        "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False"
      ]
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the given tuple list has all k elements.\n\nTask ID: 26\n\nExpected behavior (test cases):\n1. check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) should return True\n2. check_k_elements([(7, 7, 7), (7, 7)], 7) should return True\n3. check_k_elements([(9, 9), (9, 9, 9, 9)], 7) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_k_elements(test_list, k):\r\n    for i in test_list:\r\n        if len(i) != k:\r\n            return \"False\"\r\n    else:\r\n        return \"True\""
          }
        }
      ],
      "usage": {
        "total_tokens": 226,
        "prompt_tokens": 196,
        "completion_tokens": 37
      }
    },
    "timestamp": 1752255063.2320857
  },
  {
    "mbpp_id": 27,
    "problem": {
      "task_id": 27,
      "text": "Write a python function to remove all digits from a list of strings.",
      "code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
      "test_list": [
        "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
        "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
        "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to remove all digits from a list of strings.\n\nTask ID: 27\n\nExpected behavior (test cases):\n1. remove(['4words', '3letters', '4digits']) should return ['words', 'letters', 'digits']\n2. remove(['28Jan','12Jan','11Jan']) should return ['Jan','Jan','Jan']\n3. remove(['wonder1','wonder2','wonder3']) should return ['wonder','wonder','wonder']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef remove(string_list):\r\n    string_list = [re.sub('[0-9]', '', i) for i in string_list]\r\n    return (string_list)"
          }
        }
      ],
      "usage": {
        "total_tokens": 195,
        "prompt_tokens": 167,
        "completion_tokens": 35
      }
    },
    "timestamp": 1752255066.4055567
  },
  {
    "mbpp_id": 28,
    "problem": {
      "task_id": 28,
      "text": "Write a python function to find binomial co-efficient.",
      "code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
      "test_list": [
        "assert binomial_Coeff(5,2) == 10",
        "assert binomial_Coeff(4,3) == 4",
        "assert binomial_Coeff(3,2) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": [
        "assert binomial_Coeff(14,6) == 3003"
      ]
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find binomial co-efficient.\n\nTask ID: 28\n\nExpected behavior (test cases):\n1. binomial_Coeff(5,2) should return 10\n2. binomial_Coeff(4,3) should return 4\n3. binomial_Coeff(3,2) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def binomial_Coeff(n,k):\r\n    if k==0 or n==k:\r\n        return 1\r\n    else:\r\n        return(binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k))"
          }
        }
      ],
      "usage": {
        "total_tokens": 175,
        "prompt_tokens": 134,
        "completion_tokens": 48
      }
    },
    "timestamp": 1752255070.5749416
  },
  {
    "mbpp_id": 29,
    "problem": {
      "task_id": 29,
      "text": "Write a python function to find the element occurring odd number of times.",
      "code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
      "test_list": [
        "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
        "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
        "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the element occurring odd number of times.\n\nTask ID: 29\n\nExpected behavior (test cases):\n1. get_Odd_Occurrence([1,2,3,1,2,3,1],7) should return 1\n2. get_Odd_Occurrence([1,2,3,2,3,1,3],7) should return 3\n3. get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) should return 5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_Odd_Occurrence(arr,n): \r\n    # Initialize result variable  \r\n    res = 0\r\n      \r\n    # Iterate through the list and add all elements together \r\n    for i in range(0, n): \r\n        res = res ^ arr[i] \r\n\r\n    # Return the element whose position is not found \r\n    return res "
          }
        }
      ],
      "usage": {
        "total_tokens": 255,
        "prompt_tokens": 191,
        "completion_tokens": 71
      }
    },
    "timestamp": 1752255076.4636853
  },
  {
    "mbpp_id": 30,
    "problem": {
      "task_id": 30,
      "text": "Write a python function to count all the substrings starting and ending with same characters.",
      "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
      "test_list": [
        "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
        "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
        "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count all the substrings starting and ending with same characters.\n\nTask ID: 30\n\nExpected behavior (test cases):\n1. count_Substring_With_Equal_Ends(\"abc\") should return 3\n2. count_Substring_With_Equal_Ends(\"abcda\") should return 6\n3. count_Substring_With_Equal_Ends(\"ab\") should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_substring_equal_end(string): \r\n\tcount = 0\r\n\tfor i in range(0, len(string) - 1):\r\n\t\tif string[i] == string[len(string) - 1]: \r\n\t\t\tcount += 1 \r\n\treturn count"
          }
        }
      ],
      "usage": {
        "total_tokens": 193,
        "prompt_tokens": 149,
        "completion_tokens": 51
      }
    },
    "timestamp": 1752255080.8766773
  },
  {
    "mbpp_id": 31,
    "problem": {
      "task_id": 31,
      "text": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
      "code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
      "test_list": [
        "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
        "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
        "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\nTask ID: 31\n\nExpected behavior (test cases):\n1. func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n2. func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\n3. func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "from heapq import heappush, heappop\r\ndef func(lists,k):\r\n    min_heap=[]\r\n    for list in lists:\r\n        for num in list:\r\n            if len(min_heap)<k:\r\n                heappush(min_heap,(num,num))\r\n            else:\r\n                x,y = min_heap[0]\r\n                if y<num :\r\n                    heappush(min_heap,(num,num))\r\n                    heappop(min_heap)\r\n                    heappush(min_heap,(x,x))\r\n    result = []\r\n    while min_heap!=[]:\r\n        x,y = heappop(min_heap)\r\n        result.append(x)\r\n    return(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 482,
        "prompt_tokens": 364,
        "completion_tokens": 125
      }
    },
    "timestamp": 1752255090.923923
  },
  {
    "mbpp_id": 32,
    "problem": {
      "task_id": 32,
      "text": "Write a python function to find the largest prime factor of a given number.",
      "code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
      "test_list": [
        "assert max_Prime_Factors(15) == 5",
        "assert max_Prime_Factors(6) == 3",
        "assert max_Prime_Factors(2) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the largest prime factor of a given number.\n\nTask ID: 32\n\nExpected behavior (test cases):\n1. max_Prime_Factors(15) should return 5\n2. max_Prime_Factors(6) should return 3\n3. max_Prime_Factors(2) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef max_prime_factor(n):\r\n    x = -(-n // math.sqrt(n))\r\n    while not all((x % i) for i in range(2,int(math.sqrt(x))+1)):\r\n        x -= 1\r\n    return x"
          }
        }
      ],
      "usage": {
        "total_tokens": 179,
        "prompt_tokens": 135,
        "completion_tokens": 51
      }
    },
    "timestamp": 1752255095.4714165
  },
  {
    "mbpp_id": 33,
    "problem": {
      "task_id": 33,
      "text": "Write a python function to convert a decimal number to binary number.",
      "code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
      "test_list": [
        "assert decimal_To_Binary(10) == 1010",
        "assert decimal_To_Binary(1) == 1",
        "assert decimal_To_Binary(20) == 10100"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to convert a decimal number to binary number.\n\nTask ID: 33\n\nExpected behavior (test cases):\n1. decimal_To_Binary(10) should return 1010\n2. decimal_To_Binary(1) should return 1\n3. decimal_To_Binary(20) should return 10100\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def decimal_To_Binary(num):\r\n    bin_num = format(num,\"b\")\r\n    print(bin_num)\r\n    return(bin_num)"
          }
        }
      ],
      "usage": {
        "total_tokens": 157,
        "prompt_tokens": 138,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752255097.978818
  },
  {
    "mbpp_id": 34,
    "problem": {
      "task_id": 34,
      "text": "Write a python function to find the missing number in a sorted array.",
      "code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ",
      "test_list": [
        "assert find_missing([1,2,3,5],4) == 4",
        "assert find_missing([1,3,4,5],4) == 2",
        "assert find_missing([1,2,3,5,6,7],5) == 4"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the missing number in a sorted array.\n\nTask ID: 34\n\nExpected behavior (test cases):\n1. find_missing([1,2,3,5],4) should return 4\n2. find_missing([1,3,4,5],4) should return 2\n3. find_missing([1,2,3,5,6,7],5) should return 4\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_missing(nums,start,end):\r\n    for i in range(start+1,end):\r\n        if not i in nums:\r\n            return i\r\nprint(find_missing([1,2,3,5],4))"
          }
        }
      ],
      "usage": {
        "total_tokens": 187,
        "prompt_tokens": 152,
        "completion_tokens": 42
      }
    },
    "timestamp": 1752255101.8348703
  },
  {
    "mbpp_id": 35,
    "problem": {
      "task_id": 35,
      "text": "Write a function to find the n-th rectangular number.",
      "code": "def find_rect_num(n):\r\n  return n*(n + 1) ",
      "test_list": [
        "assert find_rect_num(4) == 20",
        "assert find_rect_num(5) == 30",
        "assert find_rect_num(6) == 42"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the n-th rectangular number.\n\nTask ID: 35\n\nExpected behavior (test cases):\n1. find_rect_num(4) should return 20\n2. find_rect_num(5) should return 30\n3. find_rect_num(6) should return 42\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_rect_num(n):\r\n    # Rectangular numbers can be calculated using formula (n*(n+1))/2\r\n    rect = ((n * (n + 1)) / 2)\r\n    return int(rect) "
          }
        }
      ],
      "usage": {
        "total_tokens": 167,
        "prompt_tokens": 127,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752255105.9752722
  },
  {
    "mbpp_id": 36,
    "problem": {
      "task_id": 36,
      "text": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
      "code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
      "test_list": [
        "assert find_Nth_Digit(1,2,1) == 5",
        "assert find_Nth_Digit(3,5,1) == 6",
        "assert find_Nth_Digit(5,6,5) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the nth digit in the proper fraction of two given numbers.\n\nTask ID: 36\n\nExpected behavior (test cases):\n1. find_Nth_Digit(1,2,1) should return 5\n2. find_Nth_Digit(3,5,1) should return 6\n3. find_Nth_Digit(5,6,5) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Nth_Digit(x,y,n):\r\n    i=x\r\n    while n>0:\r\n        if x+i<=y:\r\n            return str(n+1)[i-1]\r\n        else:\r\n            i=i*10\r\n            n=n-i\r\n    return '0'"
          }
        }
      ],
      "usage": {
        "total_tokens": 200,
        "prompt_tokens": 149,
        "completion_tokens": 58
      }
    },
    "timestamp": 1752255110.7891178
  },
  {
    "mbpp_id": 37,
    "problem": {
      "task_id": 37,
      "text": "Write a function to sort a given mixed list of integers and strings.",
      "code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part",
      "test_list": [
        "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a given mixed list of integers and strings.\n\nTask ID: 37\n\nExpected behavior (test cases):\n1. sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n2. sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n3. sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sort_mixed_list(testlist):\r\n    testlist.sort(key=str.lower)\r\n    return(testlist)"
          }
        }
      ],
      "usage": {
        "total_tokens": 279,
        "prompt_tokens": 265,
        "completion_tokens": 21
      }
    },
    "timestamp": 1752255112.9867942
  },
  {
    "mbpp_id": 38,
    "problem": {
      "task_id": 38,
      "text": "Write a function to find the division of first even and odd number of a given list.",
      "code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
      "test_list": [
        "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
        "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
        "assert div_even_odd([1,5,7,9,10])==10"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the division of first even and odd number of a given list.\n\nTask ID: 38\n\nExpected behavior (test cases):\n1. div_even_odd([1,3,5,7,4,1,6,8])==4\n2. div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\n3. div_even_odd([1,5,7,9,10])==10\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def div_even_odd(arr):\r\n    if len(arr)%2 == 0:\r\n        return arr[::2]\r\n    else:\r\n        return arr[1::2]"
          }
        }
      ],
      "usage": {
        "total_tokens": 192,
        "prompt_tokens": 165,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752255116.1956806
  },
  {
    "mbpp_id": 39,
    "problem": {
      "task_id": 39,
      "text": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
      "code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
      "test_list": [
        "assert rearange_string(\"aab\")==('aba')",
        "assert rearange_string(\"aabb\")==('abab')",
        "assert rearange_string(\"abccdd\")==('cdabcd')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\nTask ID: 39\n\nExpected behavior (test cases):\n1. rearange_string(\"aab\")==('aba')\n2. rearange_string(\"aabb\")==('abab')\n3. rearange_string(\"abccdd\")==('cdabcd')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "from collections import Counter\r\ndef RearrangeString(s): \r\n    d = dict(Counter(s))\r\n    res=[]\r\n    for i in range(len(d)):\r\n        for j in d:\r\n            if d[j]==1 and j not in s:\r\n                continue\r\n            else:\r\n                res.append(j)\r\n    return \"\".join(sorted(res))"
          }
        }
      ],
      "usage": {
        "total_tokens": 201,
        "prompt_tokens": 141,
        "completion_tokens": 67
      }
    },
    "timestamp": 1752255121.7406738
  },
  {
    "mbpp_id": 40,
    "problem": {
      "task_id": 40,
      "text": "Write a function to find frequency of the elements in a given list of lists using collections module.",
      "code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result",
      "test_list": [
        "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
        "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
        "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find frequency of the elements in a given list of lists using collections module.\n\nTask ID: 40\n\nExpected behavior (test cases):\n1. freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n2. freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\n3. freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import collections\r\ndef freq_element(test_list):\r\n    res = {}\r\n    for t in test_list:\r\n        for ele in t:\r\n            if ele not in res:\r\n                res[ele] = 1\r\n            else:\r\n                res[ele] += 1\r\n    return (res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 444,
        "prompt_tokens": 392,
        "completion_tokens": 59
      }
    },
    "timestamp": 1752255126.9113677
  },
  {
    "mbpp_id": 41,
    "problem": {
      "task_id": 41,
      "text": "Write a function to filter even numbers using lambda function.",
      "code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
      "test_list": [
        "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
        "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
        "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to filter even numbers using lambda function.\n\nTask ID: 41\n\nExpected behavior (test cases):\n1. filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n2. filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\n3. filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def filter_evennumbers(numbers):\r\n    return list(filter(lambda x : x%2==0,numbers))"
          }
        }
      ],
      "usage": {
        "total_tokens": 212,
        "prompt_tokens": 198,
        "completion_tokens": 21
      }
    },
    "timestamp": 1752255129.0014462
  },
  {
    "mbpp_id": 42,
    "problem": {
      "task_id": 42,
      "text": "Write a python function to find the sum of repeated elements in a given array.",
      "code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
      "test_list": [
        "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
        "assert find_Sum([1,2,3,1,1],5) == 3",
        "assert find_Sum([1,1,2],3) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": [
        "assert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18"
      ]
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of repeated elements in a given array.\n\nTask ID: 42\n\nExpected behavior (test cases):\n1. find_Sum([1,2,3,1,1,4,5,6],8) should return 3\n2. find_Sum([1,2,3,1,1],5) should return 3\n3. find_Sum([1,1,2],3) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    res = n*arr[n-1] - sum(set(arr)) \r\n    return res "
          }
        }
      ],
      "usage": {
        "total_tokens": 187,
        "prompt_tokens": 161,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752255131.979305
  },
  {
    "mbpp_id": 43,
    "problem": {
      "task_id": 43,
      "text": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
      "code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
      "test_list": [
        "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
        "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
        "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
      ],
      "test_setup_code": "",
      "challenge_test_list": [
        "assert text_match(\"aab-cbbbc\") == 'Not matched!'"
      ]
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find sequences of lowercase letters joined with an underscore using regex.\n\nTask ID: 43\n\nExpected behavior (test cases):\n1. text_match(\"aab_cbbbc\") should return 'Found a match!'\n2. text_match(\"aab_Abbbc\") should return 'Not matched!'\n3. text_match(\"Aaab_abbbc\") should return 'Not matched!'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef text_match(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
          }
        }
      ],
      "usage": {
        "total_tokens": 182,
        "prompt_tokens": 140,
        "completion_tokens": 49
      }
    },
    "timestamp": 1752255136.3127537
  },
  {
    "mbpp_id": 44,
    "problem": {
      "task_id": 44,
      "text": "Write a function that matches a word at the beginning of a string.",
      "code": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
      "test_list": [
        "assert text_match_string(\" python\")==('Not matched!')",
        "assert text_match_string(\"python\")==('Found a match!')",
        "assert text_match_string(\"  lang\")==('Not matched!')"
      ],
      "test_setup_code": "",
      "challenge_test_list": [
        "assert text_match_string(\"foo\")==('Found a match!')"
      ]
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function that matches a word at the beginning of a string.\n\nTask ID: 44\n\nExpected behavior (test cases):\n1. text_match_string(\" python\")==('Not matched!')\n2. text_match_string(\"python\")==('Found a match!')\n3. text_match_string(\"  lang\")==('Not matched!')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef text_match_regex(string):\r\n    if bool(re.search(\"^python\",string)):\r\n        return ('Found a match')\r\n    else:\r\n        return ('Not matched!')"
          }
        }
      ],
      "usage": {
        "total_tokens": 156,
        "prompt_tokens": 127,
        "completion_tokens": 36
      }
    },
    "timestamp": 1752255139.6064184
  },
  {
    "mbpp_id": 45,
    "problem": {
      "task_id": 45,
      "text": "Write a function to find the gcd of the given array elements.",
      "code": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
      "test_list": [
        "assert get_gcd([2, 4, 6, 8, 16]) == 2",
        "assert get_gcd([1, 2, 3]) == 1",
        "assert get_gcd([2, 4, 6, 8]) == 2 "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the gcd of the given array elements.\n\nTask ID: 45\n\nExpected behavior (test cases):\n1. get_gcd([2, 4, 6, 8, 16]) should return 2\n2. get_gcd([1, 2, 3]) should return 1\n3. get_gcd([2, 4, 6, 8]) should return 2 \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_gcd(arr):\r\n    if len(arr) == 0:\r\n        return 0\r\n    max_num = max(arr)\r\n    for i in range(1, max_num + 1):\r\n        count = 0\r\n        for j in arr:\r\n            if j % i == 0:\r\n                count += 1\r\n        if count == len(arr):\r\n            result = i\r\n            break\r\n\r\n    return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 233,
        "prompt_tokens": 154,
        "completion_tokens": 86
      }
    },
    "timestamp": 1752255146.6259248
  },
  {
    "mbpp_id": 46,
    "problem": {
      "task_id": 46,
      "text": "Write a python function to determine whether all the numbers are different from each other are not.",
      "code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
      "test_list": [
        "assert test_distinct([1,5,7,9]) == True",
        "assert test_distinct([2,4,5,5,7,9]) == False",
        "assert test_distinct([1,2,3]) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to determine whether all the numbers are different from each other are not.\n\nTask ID: 46\n\nExpected behavior (test cases):\n1. test_distinct([1,5,7,9]) should return True\n2. test_distinct([2,4,5,5,7,9]) should return False\n3. test_distinct([1,2,3]) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def distinct(a): \r\n    d = {}  \r\n    for i in a : \r\n        if (i in d) : \r\n            return False\r\n        else : \r\n            d[i] = 1\r\n    return True "
          }
        }
      ],
      "usage": {
        "total_tokens": 187,
        "prompt_tokens": 148,
        "completion_tokens": 46
      }
    },
    "timestamp": 1752255150.623788
  },
  {
    "mbpp_id": 47,
    "problem": {
      "task_id": 47,
      "text": "Write a python function to find the last digit when factorial of a divides factorial of b.",
      "code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
      "test_list": [
        "assert compute_Last_Digit(2,4) == 2",
        "assert compute_Last_Digit(6,8) == 6",
        "assert compute_Last_Digit(1,2) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": [
        "assert compute_Last_Digit(3,7) == 0",
        "assert compute_Last_Digit(20,23) == 6",
        "assert compute_Last_Digit(1021,1024) == 4"
      ]
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the last digit when factorial of a divides factorial of b.\n\nTask ID: 47\n\nExpected behavior (test cases):\n1. compute_Last_Digit(2,4) should return 2\n2. compute_Last_Digit(6,8) should return 6\n3. compute_Last_Digit(1,2) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def compute_Last_Digit(n,m):\r\n    if n < m:\r\n        return 0\r\n    else:\r\n        res = pow((n-m+1),m-1)%10\r\n        res *= pow(m, n-m)\r\n        res %= 10\r\n        return res"
          }
        }
      ],
      "usage": {
        "total_tokens": 191,
        "prompt_tokens": 140,
        "completion_tokens": 58
      }
    },
    "timestamp": 1752255155.4229438
  },
  {
    "mbpp_id": 48,
    "problem": {
      "task_id": 48,
      "text": "Write a python function to set all odd bits of a given number.",
      "code": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)",
      "test_list": [
        "assert odd_bit_set_number(10) == 15",
        "assert odd_bit_set_number(20) == 21",
        "assert odd_bit_set_number(30) == 31"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to set all odd bits of a given number.\n\nTask ID: 48\n\nExpected behavior (test cases):\n1. odd_bit_set_number(10) should return 15\n2. odd_bit_set_number(20) should return 21\n3. odd_bit_set_number(30) should return 31\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def odd_bit_set_number(number): \r\n    temp = 0\r\n    while (number > 0):\r\n        if ((number % 2) != 0):  \r\n            temp += pow(2,number%4)\r\n        number /= 2\r\n    return int(temp)"
          }
        }
      ],
      "usage": {
        "total_tokens": 185,
        "prompt_tokens": 136,
        "completion_tokens": 56
      }
    },
    "timestamp": 1752255160.3992414
  },
  {
    "mbpp_id": 49,
    "problem": {
      "task_id": 49,
      "text": "Write a function to extract every first or specified element from a given two-dimensional list.",
      "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
      "test_list": [
        "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
        "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
        "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract every first or specified element from a given two-dimensional list.\n\nTask ID: 49\n\nExpected behavior (test cases):\n1. specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n2. specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n3. specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def specified_element(list1,specified):\r\n    res=[]\r\n    for i in range(len(list1)):\r\n        if(specified==i):\r\n            res.append(list1[i])\r\n    return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 273,
        "prompt_tokens": 242,
        "completion_tokens": 38
      }
    },
    "timestamp": 1752255164.042127
  },
  {
    "mbpp_id": 50,
    "problem": {
      "task_id": 50,
      "text": "Write a function to find the list with minimum length using lambda function.",
      "code": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
      "test_list": [
        "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
        "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
        "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the list with minimum length using lambda function.\n\nTask ID: 50\n\nExpected behavior (test cases):\n1. min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n2. min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\n3. min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def min_length_list(l):\r\n    l.sort(key=len)\r\n    return (len(l[0]), l[0])"
          }
        }
      ],
      "usage": {
        "total_tokens": 231,
        "prompt_tokens": 214,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752255166.4124334
  },
  {
    "mbpp_id": 51,
    "problem": {
      "task_id": 51,
      "text": "Write a function to print check if the triangle is equilateral or not.",
      "code": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
      "test_list": [
        "assert check_equilateral(6,8,12)==False ",
        "assert check_equilateral(6,6,12)==False",
        "assert check_equilateral(6,6,6)==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to print check if the triangle is equilateral or not.\n\nTask ID: 51\n\nExpected behavior (test cases):\n1. check_equilateral(6,8,12)==False \n2. check_equilateral(6,6,12)==False\n3. check_equilateral(6,6,6)==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_equilateral(a,b,c):\r\n    if ((a == b and b == c) and (a != c)):\r\n        return True\r\n    else:\r\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 161,
        "prompt_tokens": 133,
        "completion_tokens": 35
      }
    },
    "timestamp": 1752255169.6179135
  },
  {
    "mbpp_id": 52,
    "problem": {
      "task_id": 52,
      "text": "Write a function to caluclate area of a parallelogram.",
      "code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
      "test_list": [
        "assert parallelogram_area(10,20)==200",
        "assert parallelogram_area(15,20)==300",
        "assert parallelogram_area(8,9)==72"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to caluclate area of a parallelogram.\n\nTask ID: 52\n\nExpected behavior (test cases):\n1. parallelogram_area(10,20)==200\n2. parallelogram_area(15,20)==300\n3. parallelogram_area(8,9)==72\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def parallelogram_area(base,height):\r\n return base * height "
          }
        }
      ],
      "usage": {
        "total_tokens": 143,
        "prompt_tokens": 137,
        "completion_tokens": 13
      }
    },
    "timestamp": 1752255171.2335365
  },
  {
    "mbpp_id": 53,
    "problem": {
      "task_id": 53,
      "text": "Write a python function to check whether the first and last characters of a given string are equal or not.",
      "code": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ",
      "test_list": [
        "assert check_Equality(\"abcda\") == \"Equal\"",
        "assert check_Equality(\"ab\") == \"Not Equal\"",
        "assert check_Equality(\"mad\") == \"Not Equal\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the first and last characters of a given string are equal or not.\n\nTask ID: 53\n\nExpected behavior (test cases):\n1. check_Equality(\"abcda\") should return \"Equal\"\n2. check_Equality(\"ab\") should return \"Not Equal\"\n3. check_Equality(\"mad\") should return \"Not Equal\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_Equality(string):\r\n  if(string[0] == string[-1]):\r\n    print(\"Equal\")\r\n  else:\r\n    print(\"Not Equal\")"
          }
        }
      ],
      "usage": {
        "total_tokens": 161,
        "prompt_tokens": 137,
        "completion_tokens": 31
      }
    },
    "timestamp": 1752255174.2075977
  },
  {
    "mbpp_id": 54,
    "problem": {
      "task_id": 54,
      "text": "Write a function to sort the given array by using counting sort.",
      "code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list",
      "test_list": [
        "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
        "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
        "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort the given array by using counting sort.\n\nTask ID: 54\n\nExpected behavior (test cases):\n1. counting_sort([1,23,4,5,6,7,8]) should return [1, 4, 5, 6, 7, 8, 23]\n2. counting_sort([12, 9, 28, 33, 69, 45]) should return [9, 12, 28, 33, 45, 69]\n3. counting_sort([8, 4, 14, 3, 2, 1]) should return [1, 2, 3, 4, 8, 14]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def counting_sort(arr):\r\n    max_val = max(arr)\r\n    count_arr = [0] * (max_val + 1) \r\n    \r\n    for i in arr:\r\n        count_arr[i] += 1\r\n    \r\n    sorted_arr = []\r\n    for i in range(len(count_arr)):\r\n        if count_arr[i] != 0:\r\n            for j in range(count_arr[i]):\r\n                sorted_arr.append(i)\r\n                \r\n    return(sorted_arr)"
          }
        }
      ],
      "usage": {
        "total_tokens": 309,
        "prompt_tokens": 227,
        "completion_tokens": 89
      }
    },
    "timestamp": 1752255181.754273
  },
  {
    "mbpp_id": 55,
    "problem": {
      "task_id": 55,
      "text": "Write a function to find t-nth term of geometric series.",
      "code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
      "test_list": [
        "assert tn_gp(1,5,2)==16",
        "assert tn_gp(1,5,4)==256",
        "assert tn_gp(2,6,3)==486"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find t-nth term of geometric series.\n\nTask ID: 55\n\nExpected behavior (test cases):\n1. tn_gp(1,5,2)==16\n2. tn_gp(1,5,4)==256\n3. tn_gp(2,6,3)==486\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def nth_term(n , r , l):\r\n    return ((l * pow(r,n-1)) - (r**(n-1)))\r\n\tnth_term(1 , 5 , 2)"
          }
        }
      ],
      "usage": {
        "total_tokens": 164,
        "prompt_tokens": 131,
        "completion_tokens": 40
      }
    },
    "timestamp": 1752255185.5077689
  },
  {
    "mbpp_id": 56,
    "problem": {
      "task_id": 56,
      "text": "Write a python function to check if a given number is one less than twice its reverse.",
      "code": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ",
      "test_list": [
        "assert check(70) == False",
        "assert check(23) == False",
        "assert check(73) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check if a given number is one less than twice its reverse.\n\nTask ID: 56\n\nExpected behavior (test cases):\n1. check(70) should return False\n2. check(23) should return False\n3. check(73) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check(n):\r\n    temp = n\r\n    rev = int(str(temp)[::-1])\r\n    res = n - rev\r\n    return(res == 2*rev)"
          }
        }
      ],
      "usage": {
        "total_tokens": 153,
        "prompt_tokens": 125,
        "completion_tokens": 35
      }
    },
    "timestamp": 1752255188.8243964
  },
  {
    "mbpp_id": 57,
    "problem": {
      "task_id": 57,
      "text": "Write a python function to find the largest number that can be formed with the given digits.",
      "code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ",
      "test_list": [
        "assert find_Max_Num([1,2,3],3) == 321",
        "assert find_Max_Num([4,5,6,1],4) == 6541",
        "assert find_Max_Num([1,2,3,9],4) == 9321"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the largest number that can be formed with the given digits.\n\nTask ID: 57\n\nExpected behavior (test cases):\n1. find_Max_Num([1,2,3],3) should return 321\n2. find_Max_Num([4,5,6,1],4) should return 6541\n3. find_Max_Num([1,2,3,9],4) should return 9321\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Max_Num(digits,n): \r\n    digits.sort() \r\n    for i in range(n-1,-1,-1): \r\n        if digits[i] != 0: \r\n            break\r\n    else: \r\n        digits[-1] = 0\r\n    res = \"\".join(map(str,digits)) \r\n    return int(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 223,
        "prompt_tokens": 161,
        "completion_tokens": 69
      }
    },
    "timestamp": 1752255194.7587755
  },
  {
    "mbpp_id": 58,
    "problem": {
      "task_id": 58,
      "text": "Write a python function to check whether the given two integers have opposite sign or not.",
      "code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ",
      "test_list": [
        "assert opposite_Signs(1,-2) == True",
        "assert opposite_Signs(3,2) == False",
        "assert opposite_Signs(-10,-10) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given two integers have opposite sign or not.\n\nTask ID: 58\n\nExpected behavior (test cases):\n1. opposite_Signs(1,-2) should return True\n2. opposite_Signs(3,2) should return False\n3. opposite_Signs(-10,-10) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def opposite_Signs(a,b):\r\n    if ((a<0 and b>0)or(a>0 and b<0)):\r\n        return True\r\n    else:\r\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 169,
        "prompt_tokens": 138,
        "completion_tokens": 38
      }
    },
    "timestamp": 1752255198.2671158
  },
  {
    "mbpp_id": 59,
    "problem": {
      "task_id": 59,
      "text": "Write a function to find the nth octagonal number.",
      "code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
      "test_list": [
        "assert is_octagonal(5) == 65",
        "assert is_octagonal(10) == 280",
        "assert is_octagonal(15) == 645"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the nth octagonal number.\n\nTask ID: 59\n\nExpected behavior (test cases):\n1. is_octagonal(5) should return 65\n2. is_octagonal(10) should return 280\n3. is_octagonal(15) should return 645\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_octagonal(n):\r\n  return n*(7*n - 5)/2"
          }
        }
      ],
      "usage": {
        "total_tokens": 141,
        "prompt_tokens": 131,
        "completion_tokens": 17
      }
    },
    "timestamp": 1752255200.2295494
  },
  {
    "mbpp_id": 60,
    "problem": {
      "task_id": 60,
      "text": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
      "code": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
      "test_list": [
        "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
        "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
        "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\nTask ID: 60\n\nExpected behavior (test cases):\n1. max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) should return 5\n2. max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) should return 4\n3. max_len_sub([9, 11, 13, 15, 18], 5) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_len_sub(nums):\r\n    result = [max(0)]\r\n    cur_max = min(nums)\r\n    last_min = nums[0]\r\n    diff = nums[1] - nums[0]\r\n    \r\n    if(diff == 0):\r\n        result.append(cur_max)\r\n        \r\n    else:\r\n        for num in nums[2:]:\r\n            diff = num - cur_max\r\n            if(diff >= 0):\r\n                result.append(max(result[-1], cur_max))\r\n                last_min = cur_max\r\n            elif(diff < 0):\r\n                diff += last_min\r\n                cur_max = diff + min(last_min, num)\r\n            \r\n    return result[-1]"
          }
        }
      ],
      "usage": {
        "total_tokens": 325,
        "prompt_tokens": 199,
        "completion_tokens": 133
      }
    },
    "timestamp": 1752255211.143403
  },
  {
    "mbpp_id": 61,
    "problem": {
      "task_id": 61,
      "text": "Write a python function to count number of substrings with the sum of digits equal to their length.",
      "code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count",
      "test_list": [
        "assert count_Substrings('112112',6) == 6",
        "assert count_Substrings('111',3) == 6",
        "assert count_Substrings('1101112',7) == 12"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count number of substrings with the sum of digits equal to their length.\n\nTask ID: 61\n\nExpected behavior (test cases):\n1. count_Substrings('112112',6) should return 6\n2. count_Substrings('111',3) should return 6\n3. count_Substrings('1101112',7) should return 12\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_substrings(s,n):\r\n    count = 0\r\n    for i in range(n+1):\r\n        if s[i:].isdigit():\r\n            for j in range(9,-1,-1):\r\n                temp = int(s[i:])\r\n                while True:\r\n                    rem = int(str(temp)[0]) \r\n                    temp -= rem*10**(len(str(temp))-1)\r\n                    if temp == 0:\r\n                        break\r\n                temp += rem*(10**len(str(temp)))\r\n                if len(str(temp)) >= n and str(temp)[-n:] == s[-n:]:\r\n                    count += 1\r\n    return count"
          }
        }
      ],
      "usage": {
        "total_tokens": 274,
        "prompt_tokens": 153,
        "completion_tokens": 128
      }
    },
    "timestamp": 1752255221.299907
  },
  {
    "mbpp_id": 62,
    "problem": {
      "task_id": 62,
      "text": "Write a python function to find smallest number in a list.",
      "code": "def smallest_num(xs):\n  return min(xs)\n",
      "test_list": [
        "assert smallest_num([10, 20, 1, 45, 99]) == 1",
        "assert smallest_num([1, 2, 3]) == 1",
        "assert smallest_num([45, 46, 50, 60]) == 45"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find smallest number in a list.\n\nTask ID: 62\n\nExpected behavior (test cases):\n1. smallest_num([10, 20, 1, 45, 99]) should return 1\n2. smallest_num([1, 2, 3]) should return 1\n3. smallest_num([45, 46, 50, 60]) should return 45\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def smallest_num(num_list):\r\n    num_list.sort()\r\n    small = num_list[0]\r\n    return(small)"
          }
        }
      ],
      "usage": {
        "total_tokens": 175,
        "prompt_tokens": 158,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752255223.6574538
  },
  {
    "mbpp_id": 63,
    "problem": {
      "task_id": 63,
      "text": "Write a function to find the maximum difference between available pairs in the given tuple list.",
      "code": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ",
      "test_list": [
        "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
        "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
        "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum difference between available pairs in the given tuple list.\n\nTask ID: 63\n\nExpected behavior (test cases):\n1. max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) should return 7\n2. max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) should return 15\n3. max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) should return 23\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_difference(list):\r\n    max = abs(list[0][0] - list[0][1])\r\n    for i in range(1,len(list)):\r\n        if(abs(list[i][0] - list[i][1]) > max):\r\n            max = abs(list[i][0] - list[i][1])\r\n    return max"
          }
        }
      ],
      "usage": {
        "total_tokens": 265,
        "prompt_tokens": 205,
        "completion_tokens": 67
      }
    },
    "timestamp": 1752255229.4363115
  },
  {
    "mbpp_id": 64,
    "problem": {
      "task_id": 64,
      "text": "Write a function to sort a list of tuples using lambda.",
      "code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks",
      "test_list": [
        "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
        "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
        "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a list of tuples using lambda.\n\nTask ID: 64\n\nExpected behavior (test cases):\n1. subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n2. subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n3. subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def subject_marks(list_of_tuples):\r\n    return sorted(list_of_tuples,key=lambda x:(x[1],x[0]))"
          }
        }
      ],
      "usage": {
        "total_tokens": 263,
        "prompt_tokens": 245,
        "completion_tokens": 25
      }
    },
    "timestamp": 1752255232.0377603
  },
  {
    "mbpp_id": 65,
    "problem": {
      "task_id": 65,
      "text": "Write a function of recursion list sum.",
      "code": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total",
      "test_list": [
        "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
        "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
        "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function of recursion list sum.\n\nTask ID: 65\n\nExpected behavior (test cases):\n1. recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n2. recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\n3. recursive_list_sum(([10, 20, [30,40],[50,60]]))==210\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def recursive_list_sum(lst):\r\n    if not lst:\r\n        return 0\r\n    else:\r\n        return lst[0] + recursive_list_sum(lst[1:]) "
          }
        }
      ],
      "usage": {
        "total_tokens": 194,
        "prompt_tokens": 167,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752255235.0617766
  },
  {
    "mbpp_id": 66,
    "problem": {
      "task_id": 66,
      "text": "Write a python function to count positive numbers in a list.",
      "code": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ",
      "test_list": [
        "assert pos_count([1,-2,3,-4]) == 2",
        "assert pos_count([3,4,5,-1]) == 3",
        "assert pos_count([1,2,3,4]) == 4"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count positive numbers in a list.\n\nTask ID: 66\n\nExpected behavior (test cases):\n1. pos_count([1,-2,3,-4]) should return 2\n2. pos_count([3,4,5,-1]) should return 3\n3. pos_count([1,2,3,4]) should return 4\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def pos_count(lst):\r\n    counter = 0\r\n    for x in lst:\r\n        if(x > 0): \r\n            counter += 1\r\n    return(counter)"
          }
        }
      ],
      "usage": {
        "total_tokens": 168,
        "prompt_tokens": 140,
        "completion_tokens": 35
      }
    },
    "timestamp": 1752255238.2973804
  },
  {
    "mbpp_id": 67,
    "problem": {
      "task_id": 67,
      "text": "Write a function to find the number of ways to partition a set of bell numbers.",
      "code": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ",
      "test_list": [
        "assert bell_number(2)==2",
        "assert bell_number(10)==115975",
        "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the number of ways to partition a set of bell numbers.\n\nTask ID: 67\n\nExpected behavior (test cases):\n1. bell_number(2)==2\n2. bell_number(10)==115975\n3. bell_number(56)==6775685320645824322581483068371419745979053216268760300\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def factorial(n):\r\n    if n == 0:\r\n        return 1\r\n    fact = 1\r\n    for i in range(1, n + 1):\r\n        fact *= i\r\n    return fact\r\n\r\ndef bell_number(n): \r\n    bell=[[0 for i in range(n+1)]for j in range(n+1)]\r\n    bell[0][0] = 1\r\n    \r\n    for i in range(1,n+1):\r\n        for j in range(i+1):\r\n            bell[i][j]=bell[i-1][j]+i*bell[i-1][j-1]\r\n    \r\n    return bell[n][n] "
          }
        }
      ],
      "usage": {
        "total_tokens": 306,
        "prompt_tokens": 179,
        "completion_tokens": 134
      }
    },
    "timestamp": 1752255249.831675
  },
  {
    "mbpp_id": 68,
    "problem": {
      "task_id": 68,
      "text": "Write a python function to check whether the given array is monotonic or not.",
      "code": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
      "test_list": [
        "assert is_Monotonic([6, 5, 4, 4]) == True",
        "assert is_Monotonic([1, 2, 2, 3]) == True",
        "assert is_Monotonic([1, 3, 2]) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given array is monotonic or not.\n\nTask ID: 68\n\nExpected behavior (test cases):\n1. is_Monotonic([6, 5, 4, 4]) should return True\n2. is_Monotonic([1, 2, 2, 3]) should return True\n3. is_Monotonic([1, 3, 2]) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_monotonic(arr):\r\n    if len(arr) <= 2:\r\n        return True\r\n\r\n    is_increasing = all(x <= y for x, y in zip(arr[1:], arr[:-1]))\r\n    is_decreasing = all(x >= y for x, y in zip(arr[1:], arr[:-1]))\r\n\r\n    return is_increasing or is_decreasing "
          }
        }
      ],
      "usage": {
        "total_tokens": 226,
        "prompt_tokens": 156,
        "completion_tokens": 77
      }
    },
    "timestamp": 1752255256.328921
  },
  {
    "mbpp_id": 69,
    "problem": {
      "task_id": 69,
      "text": "Write a function to check whether a list contains the given sublist or not.",
      "code": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set",
      "test_list": [
        "assert is_sublist([2,4,3,5,7],[3,7])==False",
        "assert is_sublist([2,4,3,5,7],[4,3])==True",
        "assert is_sublist([2,4,3,5,7],[1,6])==False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether a list contains the given sublist or not.\n\nTask ID: 69\n\nExpected behavior (test cases):\n1. is_sublist([2,4,3,5,7],[3,7])==False\n2. is_sublist([2,4,3,5,7],[4,3])==True\n3. is_sublist([2,4,3,5,7],[1,6])==False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_sublist(list1,list2):\r\n   for i in range(len(list1)):\r\n      if list1[i:i+len(list2)] == list2:\r\n         return True\r\n   return False "
          }
        }
      ],
      "usage": {
        "total_tokens": 188,
        "prompt_tokens": 155,
        "completion_tokens": 40
      }
    },
    "timestamp": 1752255259.9621181
  },
  {
    "mbpp_id": 70,
    "problem": {
      "task_id": 70,
      "text": "Write a function to find whether all the given tuples have equal length or not.",
      "code": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")",
      "test_list": [
        "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
        "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
        "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find whether all the given tuples have equal length or not.\n\nTask ID: 70\n\nExpected behavior (test cases):\n1. get_equal([(11, 22, 33), (44, 55, 66)], 3) should return 'All tuples have same length'\n2. get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) should return 'All tuples do not have same length'\n3. get_equal([(1, 2), (3, 4)], 2) should return 'All tuples have same length'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_equal(lst): \r\n    if len(set([len(i) for i in lst])) == 1:\r\n        return \"All tuples have same length\"\r\n    else:\r\n        return \"All tuples do not have same length\""
          }
        }
      ],
      "usage": {
        "total_tokens": 236,
        "prompt_tokens": 197,
        "completion_tokens": 46
      }
    },
    "timestamp": 1752255264.131979
  },
  {
    "mbpp_id": 71,
    "problem": {
      "task_id": 71,
      "text": "Write a function to sort a list of elements using comb sort.",
      "code": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums",
      "test_list": [
        "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
        "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
        "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a list of elements using comb sort.\n\nTask ID: 71\n\nExpected behavior (test cases):\n1. comb_sort([5, 15, 37, 25, 79]) should return [5, 15, 25, 37, 79]\n2. comb_sort([41, 32, 15, 19, 22]) should return [15, 19, 22, 32, 41]\n3. comb_sort([99, 15, 13, 47]) should return [13, 15, 47, 99]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def comb_sort(list):\r\n    gap = len(list)\r\n    shrink_factor = 1.3\r\n    sorted_list = False\r\n\r\n    while not sorted_list:\r\n        # Set new value for gap size based on shrink factor\r\n        gap = int(gap / shrink_factor)\r\n\r\n        if gap <= 1:\r\n            gap = 1\r\n            sorted_list = True\r\n\r\n        i = 0\r\n        while i + gap < len(list):\r\n            if list[i] > list[i+gap]:\r\n                # Swap elements\r\n                temp = list[i]\r\n                list[i] = list[i+gap]\r\n                list[i+gap] = temp\r\n                sorted_list = False\r\n            i += 1\r\n    return list"
          }
        }
      ],
      "usage": {
        "total_tokens": 353,
        "prompt_tokens": 215,
        "completion_tokens": 145
      }
    },
    "timestamp": 1752255275.7126896
  },
  {
    "mbpp_id": 72,
    "problem": {
      "task_id": 72,
      "text": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
      "code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False",
      "test_list": [
        "assert dif_Square(5) == True",
        "assert dif_Square(10) == False",
        "assert dif_Square(15) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given number can be represented as difference of two squares or not.\n\nTask ID: 72\n\nExpected behavior (test cases):\n1. dif_Square(5) should return True\n2. dif_Square(10) should return False\n3. dif_Square(15) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def dif_Square(n): \r\n    if ((n % 4 == 0 or n % 4 == 1) and n > 3): \r\n        return True\r\n    elif (n % 4 == 3): \r\n        return False\r\n    else:\r\n        return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 185,
        "prompt_tokens": 133,
        "completion_tokens": 59
      }
    },
    "timestamp": 1752255280.9313412
  },
  {
    "mbpp_id": 73,
    "problem": {
      "task_id": 73,
      "text": "Write a function to split the given string with multiple delimiters by using regex.",
      "code": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))",
      "test_list": [
        "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
        "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
        "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to split the given string with multiple delimiters by using regex.\n\nTask ID: 73\n\nExpected behavior (test cases):\n1. multiple_split('Forces of the \\ndarkness*are coming into the play.') should return ['Forces of the ', 'darkness', 'are coming into the play.']\n2. multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') should return ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n3. multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') should return ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef multiple_split(string):\r\n  list = [s for s in re.split(r'[*/\\s+-]',string) if s]\r\n  return list "
          }
        }
      ],
      "usage": {
        "total_tokens": 240,
        "prompt_tokens": 213,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752255284.0017617
  },
  {
    "mbpp_id": 74,
    "problem": {
      "task_id": 74,
      "text": "Write a function to check whether it follows the sequence given in the patterns array.",
      "code": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True",
      "test_list": [
        "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
        "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
        "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether it follows the sequence given in the patterns array.\n\nTask ID: 74\n\nExpected behavior (test cases):\n1. is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n2. is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \n3. is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_samepatterns(patterns, target):\r\n    return len(set(zip(*patterns))) == 1"
          }
        }
      ],
      "usage": {
        "total_tokens": 171,
        "prompt_tokens": 158,
        "completion_tokens": 20
      }
    },
    "timestamp": 1752255286.1016824
  },
  {
    "mbpp_id": 75,
    "problem": {
      "task_id": 75,
      "text": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
      "code": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ",
      "test_list": [
        "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
        "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
        "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\nTask ID: 75\n\nExpected behavior (test cases):\n1. find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) should return '[(6, 24, 12)]'\n2. find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) should return '[(5, 25, 30)]'\n3. find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) should return '[(8, 16, 4)]'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_tuples(tupl_list, num):\r\n    result = [t for t in tupl_list if len([x for x in t if not (x % num)]) == 0]\r\n    return str(result)[1:-1]"
          }
        }
      ],
      "usage": {
        "total_tokens": 294,
        "prompt_tokens": 252,
        "completion_tokens": 49
      }
    },
    "timestamp": 1752255290.5322275
  },
  {
    "mbpp_id": 76,
    "problem": {
      "task_id": 76,
      "text": "Write a python function to count the number of squares in a rectangle.",
      "code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
      "test_list": [
        "assert count_Squares(4,3) == 20",
        "assert count_Squares(2,2) == 5",
        "assert count_Squares(1,1) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the number of squares in a rectangle.\n\nTask ID: 76\n\nExpected behavior (test cases):\n1. count_Squares(4,3) should return 20\n2. count_Squares(2,2) should return 5\n3. count_Squares(1,1) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_Squares(a,b):\r\n    x = (a*(a+1)*(2*a+1))/6\r\n    y = ((b*(b+1)*(2*b+1))/6)\r\n    z = (x+y)/2\r\n    print(z)"
          }
        }
      ],
      "usage": {
        "total_tokens": 181,
        "prompt_tokens": 134,
        "completion_tokens": 54
      }
    },
    "timestamp": 1752255295.3281705
  },
  {
    "mbpp_id": 77,
    "problem": {
      "task_id": 77,
      "text": "Write a python function to find the difference between sum of even and odd digits.",
      "code": "def is_Diff(n): \r\n    return (n % 11 == 0) ",
      "test_list": [
        "assert is_Diff (12345) == False",
        "assert is_Diff(1212112) == True",
        "assert is_Diff(1212) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the difference between sum of even and odd digits.\n\nTask ID: 77\n\nExpected behavior (test cases):\n1. is_Diff (12345) should return False\n2. is_Diff(1212112) should return True\n3. is_Diff(1212) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_Diff(n):\r\n    sum1 = 0\r\n    sum2 = 0\r\n    while n:\r\n        if (n % 2 == 0):\r\n            sum1 += n % 10\r\n        else:\r\n            sum2 += n % 10\r\n        n //= 10\r\n    if(sum1 > sum2):\r\n        return 1 \r\n    else:\r\n        return 0 "
          }
        }
      ],
      "usage": {
        "total_tokens": 218,
        "prompt_tokens": 139,
        "completion_tokens": 86
      }
    },
    "timestamp": 1752255302.1020107
  },
  {
    "mbpp_id": 78,
    "problem": {
      "task_id": 78,
      "text": "Write a python function to find number of integers with odd number of set bits.",
      "code": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ",
      "test_list": [
        "assert count_With_Odd_SetBits(5) == 3",
        "assert count_With_Odd_SetBits(10) == 5",
        "assert count_With_Odd_SetBits(15) == 8"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find number of integers with odd number of set bits.\n\nTask ID: 78\n\nExpected behavior (test cases):\n1. count_With_Odd_SetBits(5) should return 3\n2. count_With_Odd_SetBits(10) should return 5\n3. count_With_Odd_SetBits(15) should return 8\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_With_Odd_SetBits(n):\r\n    if n == 0:\r\n        return 1\r\n    elif n % 2 == 0:\r\n        return (n // 2)\r\n    else:\r\n        return ((n // 2) + 1)"
          }
        }
      ],
      "usage": {
        "total_tokens": 191,
        "prompt_tokens": 143,
        "completion_tokens": 55
      }
    },
    "timestamp": 1752255306.9126227
  },
  {
    "mbpp_id": 79,
    "problem": {
      "task_id": 79,
      "text": "Write a python function to check whether the length of the word is odd or not.",
      "code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False",
      "test_list": [
        "assert word_len(\"Hadoop\") == False",
        "assert word_len(\"great\") == True",
        "assert word_len(\"structure\") == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the length of the word is odd or not.\n\nTask ID: 79\n\nExpected behavior (test cases):\n1. word_len(\"Hadoop\") should return False\n2. word_len(\"great\") should return True\n3. word_len(\"structure\") should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def word_len(word): \r\n    if len(word)%2!=0:\r\n        print(True)  \r\n    else: \r\n        print(False)  "
          }
        }
      ],
      "usage": {
        "total_tokens": 147,
        "prompt_tokens": 125,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752255309.5061762
  },
  {
    "mbpp_id": 80,
    "problem": {
      "task_id": 80,
      "text": "Write a function to find the nth tetrahedral number.",
      "code": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6",
      "test_list": [
        "assert tetrahedral_number(5) == 35.0",
        "assert tetrahedral_number(6) == 56.0",
        "assert tetrahedral_number(7) == 84.0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the nth tetrahedral number.\n\nTask ID: 80\n\nExpected behavior (test cases):\n1. tetrahedral_number(5) should return 35.0\n2. tetrahedral_number(6) should return 56.0\n3. tetrahedral_number(7) should return 84.0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_perfect(n): \r\n    if (n * (n + 1)) / 2 == n ** 2 : \r\n        return True\r\n    else : \r\n        return False \r\n\r\ndef tetrahedral_number(n): \r\n\treturn ((1.0/4)* n * (n+1)*(n+2)) "
          }
        }
      ],
      "usage": {
        "total_tokens": 198,
        "prompt_tokens": 137,
        "completion_tokens": 68
      }
    },
    "timestamp": 1752255315.1702995
  },
  {
    "mbpp_id": 81,
    "problem": {
      "task_id": 81,
      "text": "Write a function to zip the two given tuples.",
      "code": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ",
      "test_list": [
        "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
        "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
        "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to zip the two given tuples.\n\nTask ID: 81\n\nExpected behavior (test cases):\n1. zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) should return [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n2. zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) should return [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n3. zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) should return [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def zip_tuples(test_tup):\r\n  res = list(zip(test_tup[0], test_tup[1]))\r\n  for i in range(1, len(res)):\r\n    if (res[i-1][1] > res[i][1]):\r\n      res.insert(i, (res[i-1][0], res[i][1])) \r\n  return tuple(res) "
          }
        }
      ],
      "usage": {
        "total_tokens": 373,
        "prompt_tokens": 304,
        "completion_tokens": 76
      }
    },
    "timestamp": 1752255321.6294925
  },
  {
    "mbpp_id": 82,
    "problem": {
      "task_id": 82,
      "text": "Write a function to find the volume of a sphere.",
      "code": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume",
      "test_list": [
        "assert volume_sphere(10)==4188.790204786391",
        "assert volume_sphere(25)==65449.84694978735",
        "assert volume_sphere(20)==33510.32163829113"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the volume of a sphere.\n\nTask ID: 82\n\nExpected behavior (test cases):\n1. volume_sphere(10)==4188.790204786391\n2. volume_sphere(25)==65449.84694978735\n3. volume_sphere(20)==33510.32163829113\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef volume_sphere(radius):\r\n\treturn 4/3 * math.pi * radius ** 3"
          }
        }
      ],
      "usage": {
        "total_tokens": 177,
        "prompt_tokens": 163,
        "completion_tokens": 21
      }
    },
    "timestamp": 1752255323.9089394
  },
  {
    "mbpp_id": 83,
    "problem": {
      "task_id": 83,
      "text": "Write a python function to find the character made by adding all the characters of the given string.",
      "code": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)",
      "test_list": [
        "assert get_Char(\"abc\") == \"f\"",
        "assert get_Char(\"gfg\") == \"t\"",
        "assert get_Char(\"ab\") == \"c\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the character made by adding all the characters of the given string.\n\nTask ID: 83\n\nExpected behavior (test cases):\n1. get_Char(\"abc\") should return \"f\"\n2. get_Char(\"gfg\") should return \"t\"\n3. get_Char(\"ab\") should return \"c\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_Char(str): \r\n    result = \"\"  \r\n    for i in range(len(str)): \r\n        res = res + chr(ord(str[i]) + 1)  \r\n    return (result) \r\n "
          }
        }
      ],
      "usage": {
        "total_tokens": 165,
        "prompt_tokens": 130,
        "completion_tokens": 42
      }
    },
    "timestamp": 1752255327.5309417
  },
  {
    "mbpp_id": 84,
    "problem": {
      "task_id": 84,
      "text": "Write a function to find the n-th number in newman conway sequence.",
      "code": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
      "test_list": [
        "assert sequence(10) == 6",
        "assert sequence(2) == 1",
        "assert sequence(3) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the n-th number in newman conway sequence.\n\nTask ID: 84\n\nExpected behavior (test cases):\n1. sequence(10) should return 6\n2. sequence(2) should return 1\n3. sequence(3) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sequence(n): \r\n    if (n == 1 or n == 2): \r\n        return (n - 1) \r\n    else:\r\n        if (sequence[n - 1] > sequence[n - 2]): \r\n            l = sequence[n - 1] + sequence[n - 2] \r\n            return (l % 10) \r\n        else : \r\n            r = (sequence[n - 1] * 2) - sequence[n - 2]\r\n            return (r % 10) "
          }
        }
      ],
      "usage": {
        "total_tokens": 227,
        "prompt_tokens": 124,
        "completion_tokens": 110
      }
    },
    "timestamp": 1752255336.302325
  },
  {
    "mbpp_id": 85,
    "problem": {
      "task_id": 85,
      "text": "Write a function to find the surface area of a sphere.",
      "code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea",
      "test_list": [
        "assert surfacearea_sphere(10)==1256.6370614359173",
        "assert surfacearea_sphere(15)==2827.4333882308138",
        "assert surfacearea_sphere(20)==5026.548245743669"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the surface area of a sphere.\n\nTask ID: 85\n\nExpected behavior (test cases):\n1. surfacearea_sphere(10)==1256.6370614359173\n2. surfacearea_sphere(15)==2827.4333882308138\n3. surfacearea_sphere(20)==5026.548245743669\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef surfacearea_sphere(radius):\r\n    sa = 4 * math.pi * radius ** 2\r\n    return sa"
          }
        }
      ],
      "usage": {
        "total_tokens": 188,
        "prompt_tokens": 169,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752255338.6720629
  },
  {
    "mbpp_id": 86,
    "problem": {
      "task_id": 86,
      "text": "Write a function to find nth centered hexagonal number.",
      "code": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1",
      "test_list": [
        "assert centered_hexagonal_number(10) == 271",
        "assert centered_hexagonal_number(2) == 7",
        "assert centered_hexagonal_number(9) == 217"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find nth centered hexagonal number.\n\nTask ID: 86\n\nExpected behavior (test cases):\n1. centered_hexagonal_number(10) should return 271\n2. centered_hexagonal_number(2) should return 7\n3. centered_hexagonal_number(9) should return 217\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def centered_hexagonal_number(n):\r\n    # formula for calculating n-th centered hexagonal number is 3*n^2 -n\r\n    return (3 * pow(n, 2)) - n "
          }
        }
      ],
      "usage": {
        "total_tokens": 166,
        "prompt_tokens": 132,
        "completion_tokens": 41
      }
    },
    "timestamp": 1752255342.1014612
  },
  {
    "mbpp_id": 87,
    "problem": {
      "task_id": 87,
      "text": "Write a function to merge three dictionaries into a single expression.",
      "code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict",
      "test_list": [
        "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
        "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
        "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to merge three dictionaries into a single expression.\n\nTask ID: 87\n\nExpected behavior (test cases):\n1. merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n2. merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n3. merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def merge_dictionaries_three(a,b,c):\r\n    d={**a,**b,**c}\r\n    return(d)"
          }
        }
      ],
      "usage": {
        "total_tokens": 375,
        "prompt_tokens": 359,
        "completion_tokens": 23
      }
    },
    "timestamp": 1752255344.5632098
  },
  {
    "mbpp_id": 88,
    "problem": {
      "task_id": 88,
      "text": "Write a function to get the frequency of the elements in a list.",
      "code": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count",
      "test_list": [
        "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
        "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
        "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to get the frequency of the elements in a list.\n\nTask ID: 88\n\nExpected behavior (test cases):\n1. freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n2. freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \n3. freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def freq_count(lst):\r\n    dic = {}\r\n    for i in lst:\r\n        if i in dic.keys():\r\n            dic[i] += 1\r\n        else:\r\n            dic[i] = 1\r\n    return(dic)"
          }
        }
      ],
      "usage": {
        "total_tokens": 309,
        "prompt_tokens": 271,
        "completion_tokens": 45
      }
    },
    "timestamp": 1752255348.5704334
  },
  {
    "mbpp_id": 89,
    "problem": {
      "task_id": 89,
      "text": "Write a function to find the closest smaller number than n.",
      "code": "def closest_num(N):\r\n  return (N - 1)",
      "test_list": [
        "assert closest_num(11) == 10",
        "assert closest_num(7) == 6",
        "assert closest_num(12) == 11"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the closest smaller number than n.\n\nTask ID: 89\n\nExpected behavior (test cases):\n1. closest_num(11) should return 10\n2. closest_num(7) should return 6\n3. closest_num(12) should return 11\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def closest_num(n):\r\n    i = int((n - 1)/1)\r\n    if(i != 0 and i != (n-1)):\r\n        i -= 1\r\n    return str(i) + \" \"\r\n  1. close(num): \r\n        for num in range(num): \r\n            temp = num-1\r\n            for j in range(temp+1): \r\n                result = temp-temp \r\n                if(result == num): \r\n                    break\r\n                elif(result < num): \r\n                    res = str(num) \r\n                    res += ' '\r\n                    break\r\n            else: \r\n                res = '1' \r\n        return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 250,
        "prompt_tokens": 126,
        "completion_tokens": 131
      }
    },
    "timestamp": 1752255359.1017728
  },
  {
    "mbpp_id": 90,
    "problem": {
      "task_id": 90,
      "text": "Write a python function to find the length of the longest word.",
      "code": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max",
      "test_list": [
        "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
        "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
        "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the length of the longest word.\n\nTask ID: 90\n\nExpected behavior (test cases):\n1. len_log([\"python\",\"PHP\",\"bigdata\"]) should return 7\n2. len_log([\"a\",\"ab\",\"abc\"]) should return 3\n3. len_log([\"small\",\"big\",\"tall\"]) should return 5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def len_log(arr):\r\n    l = [len(i) for i in arr]\r\n    return max(l)"
          }
        }
      ],
      "usage": {
        "total_tokens": 152,
        "prompt_tokens": 137,
        "completion_tokens": 22
      }
    },
    "timestamp": 1752255361.430357
  },
  {
    "mbpp_id": 91,
    "problem": {
      "task_id": 91,
      "text": "Write a function to check if a substring is present in a given list of string values.",
      "code": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False",
      "test_list": [
        "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
        "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
        "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if a substring is present in a given list of string values.\n\nTask ID: 91\n\nExpected behavior (test cases):\n1. find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n2. find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n3. find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_substring(list_1 , str):\r\n    flag = False\r\n    for i in range(len(list_1)):\r\n        for j in range(i+1,len(list_1)+1):\r\n            if list_1[i:j] == str:\r\n                flag = True\r\n                break;\r\n        if(flag==True):\r\n            return True\r\n    else:\r\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 232,
        "prompt_tokens": 164,
        "completion_tokens": 75
      }
    },
    "timestamp": 1752255367.5960734
  },
  {
    "mbpp_id": 92,
    "problem": {
      "task_id": 92,
      "text": "Write a function to check whether the given number is undulating or not.",
      "code": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True",
      "test_list": [
        "assert is_undulating(\"1212121\") == True",
        "assert is_undulating(\"1991\") == False",
        "assert is_undulating(\"121\") == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given number is undulating or not.\n\nTask ID: 92\n\nExpected behavior (test cases):\n1. is_undulating(\"1212121\") should return True\n2. is_undulating(\"1991\") should return False\n3. is_undulating(\"121\") should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_undulating(num):\r\n    if num == \"\":\r\n        return True\r\n    str_num = list(str(num))\r\n    for i in range(len(str_num) - 1):\r\n        if abs(int(str_num[i]) - int(str_num[i + 1])) != 1:\r\n            return False\r\n    return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 198,
        "prompt_tokens": 139,
        "completion_tokens": 66
      }
    },
    "timestamp": 1752255373.3418229
  },
  {
    "mbpp_id": 93,
    "problem": {
      "task_id": 93,
      "text": "Write a function to calculate the value of 'a' to the power 'b'.",
      "code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)",
      "test_list": [
        "assert power(3,4) == 81",
        "assert power(2,3) == 8",
        "assert power(5,5) == 3125"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the value of 'a' to the power 'b'.\n\nTask ID: 93\n\nExpected behavior (test cases):\n1. power(3,4) should return 81\n2. power(2,3) should return 8\n3. power(5,5) should return 3125\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def power(x,y): \r\n\tif(y == 0):  \r\n\t\treturn (1); \r\n\telif(y % 2 == 0): \r\n\t\tpower_ = power(x, int(y / 2));  \r\n\t\treturn(power_*power_); \r\n\telse :  \r\n\t\tpower_ = power(x, (int)(y/2));  \r\n\t\treturn((x * power_) * power_); "
          }
        }
      ],
      "usage": {
        "total_tokens": 210,
        "prompt_tokens": 134,
        "completion_tokens": 83
      }
    },
    "timestamp": 1752255380.3677163
  },
  {
    "mbpp_id": 94,
    "problem": {
      "task_id": 94,
      "text": "Write a function to extract the index minimum value record from the given tuples.",
      "code": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ",
      "test_list": [
        "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
        "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
        "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract the index minimum value record from the given tuples.\n\nTask ID: 94\n\nExpected behavior (test cases):\n1. index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) should return 'Varsha'\n2. index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) should return 'Dawood'\n3. index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) should return 'Ayesha'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def index_minimum(test_tup):\r\n  temp = sorted(test_tup,key=lambda i : i[1])\r\n  return temp[0][0]"
          }
        }
      ],
      "usage": {
        "total_tokens": 227,
        "prompt_tokens": 204,
        "completion_tokens": 30
      }
    },
    "timestamp": 1752255383.4940178
  },
  {
    "mbpp_id": 95,
    "problem": {
      "task_id": 95,
      "text": "Write a python function to find the minimum length of sublist.",
      "code": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ",
      "test_list": [
        "assert Find_Min_Length([[1],[1,2]]) == 1",
        "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
        "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the minimum length of sublist.\n\nTask ID: 95\n\nExpected behavior (test cases):\n1. Find_Min_Length([[1],[1,2]]) should return 1\n2. Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) should return 2\n3. Find_Min_Length([[3,3,3],[4,4,4,4]]) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def Find_Min_Length(list_of_list):\r\n  min_length = min(len(x) for x in list_of_list)\r\n  return(min_length) "
          }
        }
      ],
      "usage": {
        "total_tokens": 179,
        "prompt_tokens": 157,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752255386.2270765
  },
  {
    "mbpp_id": 96,
    "problem": {
      "task_id": 96,
      "text": "Write a python function to find the number of divisors of a given integer.",
      "code": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x",
      "test_list": [
        "assert divisor(15) == 4 ",
        "assert divisor(12) == 6",
        "assert divisor(9) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the number of divisors of a given integer.\n\nTask ID: 96\n\nExpected behavior (test cases):\n1. divisor(15) should return 4 \n2. divisor(12) should return 6\n3. divisor(9) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def divisor(n):\r\n    count = 0\r\n    for i in range(1,n+1): \r\n        if n % i == 0: \r\n            count += 1\r\n    return(count)"
          }
        }
      ],
      "usage": {
        "total_tokens": 160,
        "prompt_tokens": 125,
        "completion_tokens": 42
      }
    },
    "timestamp": 1752255389.855266
  },
  {
    "mbpp_id": 97,
    "problem": {
      "task_id": 97,
      "text": "Write a function to find frequency count of list of lists.",
      "code": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n",
      "test_list": [
        "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
        "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
        "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find frequency count of list of lists.\n\nTask ID: 97\n\nExpected behavior (test cases):\n1. frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n2. frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n3. frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def frequency_lists(list_of_list):\r\n    d = dict()\r\n    for i in list_of_list:\r\n        for j in i:\r\n            if j not in d:\r\n                d[j] = i.count(j)\r\n    return d"
          }
        }
      ],
      "usage": {
        "total_tokens": 416,
        "prompt_tokens": 378,
        "completion_tokens": 45
      }
    },
    "timestamp": 1752255393.9133475
  },
  {
    "mbpp_id": 98,
    "problem": {
      "task_id": 98,
      "text": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
      "code": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ",
      "test_list": [
        "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
        "assert multiply_num((-10,-20,-30))==-2000.0",
        "assert multiply_num((19,15,18))==1710.0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to multiply all the numbers in a list and divide with the length of the list.\n\nTask ID: 98\n\nExpected behavior (test cases):\n1. multiply_num((8, 2, 3, -1, 7))==-67.2\n2. multiply_num((-10,-20,-30))==-2000.0\n3. multiply_num((19,15,18))==1710.0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def multiply_num(test_list):\r\n    res= reduce(lambda x,y :x*y , test_list)\r\n    return(res/len(test_list))"
          }
        }
      ],
      "usage": {
        "total_tokens": 183,
        "prompt_tokens": 162,
        "completion_tokens": 28
      }
    },
    "timestamp": 1752255396.567492
  },
  {
    "mbpp_id": 99,
    "problem": {
      "task_id": 99,
      "text": "Write a function to convert the given decimal number to its binary equivalent.",
      "code": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ",
      "test_list": [
        "assert decimal_to_binary(8) == '1000'",
        "assert decimal_to_binary(18) == '10010'",
        "assert decimal_to_binary(7) == '111' "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert the given decimal number to its binary equivalent.\n\nTask ID: 99\n\nExpected behavior (test cases):\n1. decimal_to_binary(8) should return '1000'\n2. decimal_to_binary(18) should return '10010'\n3. decimal_to_binary(7) should return '111' \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def decimal_to_binary(num):\r\n   if num >= 1:\r\n       decimal_to_binary(num // 2)\r\n   print(num % 2 , end = '')"
          }
        }
      ],
      "usage": {
        "total_tokens": 163,
        "prompt_tokens": 138,
        "completion_tokens": 32
      }
    },
    "timestamp": 1752255399.6579192
  },
  {
    "mbpp_id": 100,
    "problem": {
      "task_id": 100,
      "text": "Write a function to find the next smallest palindrome of a specified number.",
      "code": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i",
      "test_list": [
        "assert next_smallest_palindrome(99)==101",
        "assert next_smallest_palindrome(1221)==1331",
        "assert next_smallest_palindrome(120)==121"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the next smallest palindrome of a specified number.\n\nTask ID: 100\n\nExpected behavior (test cases):\n1. next_smallest_palindrome(99)==101\n2. next_smallest_palindrome(1221)==1331\n3. next_smallest_palindrome(120)==121\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def next_smallest_palindrome(n):\r\n    num_str = str(n)\r\n    if int(num_str) == n:\r\n        return n\r\n    else:\r\n        new_num_str = ''\r\n        for i in range(len(num_str)):\r\n            new_num_str += num_str[-i-1]\r\n        return int(new_num_str) + 1"
          }
        }
      ],
      "usage": {
        "total_tokens": 199,
        "prompt_tokens": 138,
        "completion_tokens": 68
      }
    },
    "timestamp": 1752255405.2992961
  },
  {
    "mbpp_id": 101,
    "problem": {
      "task_id": 101,
      "text": "Write a function to find the kth element in the given array.",
      "code": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]",
      "test_list": [
        "assert kth_element([12,3,5,7,19], 5, 2) == 3",
        "assert kth_element([17,24,8,23], 4, 3) == 8",
        "assert kth_element([16,21,25,36,4], 5, 4) == 36"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the kth element in the given array.\n\nTask ID: 101\n\nExpected behavior (test cases):\n1. kth_element([12,3,5,7,19], 5, 2) should return 3\n2. kth_element([17,24,8,23], 4, 3) should return 8\n3. kth_element([16,21,25,36,4], 5, 4) should return 36\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def kth_element(arr,k,index):\r\n    if(index>k-1):\r\n        arr[index] = max(arr)\r\n        index+=1\r\n    else:\r\n        for j in range(len(arr)):\r\n            if(arr[j]>arr[index]):\r\n                temp=arr[index]\r\n                arr[index]=arr[j]\r\n                arr[j]=temp\r\n        index+=1\r\n    return arr[index] "
          }
        }
      ],
      "usage": {
        "total_tokens": 248,
        "prompt_tokens": 178,
        "completion_tokens": 77
      }
    },
    "timestamp": 1752255411.820744
  },
  {
    "mbpp_id": 102,
    "problem": {
      "task_id": 102,
      "text": "Write a function to convert snake case string to camel case string.",
      "code": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
      "test_list": [
        "assert snake_to_camel('python_program')=='PythonProgram'",
        "assert snake_to_camel('python_language')==('PythonLanguage')",
        "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert snake case string to camel case string.\n\nTask ID: 102\n\nExpected behavior (test cases):\n1. snake_to_camel('python_program')=='PythonProgram'\n2. snake_to_camel('python_language')==('PythonLanguage')\n3. snake_to_camel('programming_language')==('ProgrammingLanguage')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def snake_to_camel(snake_str):\r\n    return ''.join(x.capitalize() or '_' for x in snake_str.split('_'))"
          }
        }
      ],
      "usage": {
        "total_tokens": 149,
        "prompt_tokens": 130,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752255414.335926
  },
  {
    "mbpp_id": 103,
    "problem": {
      "task_id": 103,
      "text": "Write a function to find eulerian number a(n, m).",
      "code": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
      "test_list": [
        "assert eulerian_num(3, 1) == 4",
        "assert eulerian_num(4, 1) == 11",
        "assert eulerian_num(5, 3) == 26"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find eulerian number a(n, m).\n\nTask ID: 103\n\nExpected behavior (test cases):\n1. eulerian_num(3, 1) should return 4\n2. eulerian_num(4, 1) should return 11\n3. eulerian_num(5, 3) should return 26\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def factorial(num):\r\n  if num == 0:\r\n    return 1\r\n  else:\r\n    return num * factorial(num - 1)\r\n    \r\ndef eulerian_num(n, k):\r\n  res = 0\r\n  for i in range(k + 1, n + 1): \r\n      res += int(factorial(i)/(factorial(k)*factorial(i-k)))\r\n  return res"
          }
        }
      ],
      "usage": {
        "total_tokens": 211,
        "prompt_tokens": 138,
        "completion_tokens": 80
      }
    },
    "timestamp": 1752255420.852191
  },
  {
    "mbpp_id": 104,
    "problem": {
      "task_id": 104,
      "text": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
      "code": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r",
      "test_list": [
        "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
        "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
        "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort each sublist of strings in a given list of lists using lambda function.\n\nTask ID: 104\n\nExpected behavior (test cases):\n1. sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n2. sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n3. sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sort_sublists(test_list): \r\n\tresult = [sorted(sublist) for sublist in test_list]  \r\n\treturn result"
          }
        }
      ],
      "usage": {
        "total_tokens": 252,
        "prompt_tokens": 235,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752255423.3260474
  },
  {
    "mbpp_id": 105,
    "problem": {
      "task_id": 105,
      "text": "Write a python function to count true booleans in the given list.",
      "code": "def count(lst):   \r\n    return sum(lst) ",
      "test_list": [
        "assert count([True,False,True]) == 2",
        "assert count([False,False]) == 0",
        "assert count([True,True,True]) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count true booleans in the given list.\n\nTask ID: 105\n\nExpected behavior (test cases):\n1. count([True,False,True]) should return 2\n2. count([False,False]) should return 0\n3. count([True,True,True]) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count(l):\r\n    cnt = sum(l)\r\n    return cnt"
          }
        }
      ],
      "usage": {
        "total_tokens": 133,
        "prompt_tokens": 127,
        "completion_tokens": 13
      }
    },
    "timestamp": 1752255425.047267
  },
  {
    "mbpp_id": 106,
    "problem": {
      "task_id": 106,
      "text": "Write a function to add the given list to the given tuples.",
      "code": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ",
      "test_list": [
        "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
        "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
        "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to add the given list to the given tuples.\n\nTask ID: 106\n\nExpected behavior (test cases):\n1. add_lists([5, 6, 7], (9, 10)) should return (9, 10, 5, 6, 7)\n2. add_lists([6, 7, 8], (10, 11)) should return (10, 11, 6, 7, 8)\n3. add_lists([7, 8, 9], (11, 12)) should return (11, 12, 7, 8, 9)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def add_lists(listtuples):\r\n    return tuple(list(listtuples[0]) + list(listtuples[1]))"
          }
        }
      ],
      "usage": {
        "total_tokens": 224,
        "prompt_tokens": 206,
        "completion_tokens": 25
      }
    },
    "timestamp": 1752255427.5214186
  },
  {
    "mbpp_id": 107,
    "problem": {
      "task_id": 107,
      "text": "Write a python function to count hexadecimal numbers for a given range.",
      "code": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ",
      "test_list": [
        "assert count_Hexadecimal(10,15) == 6",
        "assert count_Hexadecimal(2,4) == 0",
        "assert count_Hexadecimal(15,16) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count hexadecimal numbers for a given range.\n\nTask ID: 107\n\nExpected behavior (test cases):\n1. count_Hexadecimal(10,15) should return 6\n2. count_Hexadecimal(2,4) should return 0\n3. count_Hexadecimal(15,16) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_Hexadecimal(low ,high):\r\n    hex_num = '0123456789ABCDEF'\r\n    if low>high:\r\n        return -1\r\n    elif low == high:\r\n        return str(hex_num.count(hex_num[low]))\r\n    else:\r\n        total = len(list(filter(lambda x:x >= low and x <= high,hex_num)))\r\n        return str(total) "
          }
        }
      ],
      "usage": {
        "total_tokens": 216,
        "prompt_tokens": 140,
        "completion_tokens": 83
      }
    },
    "timestamp": 1752255434.3953483
  },
  {
    "mbpp_id": 108,
    "problem": {
      "task_id": 108,
      "text": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
      "code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)",
      "test_list": [
        "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
        "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
        "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\nTask ID: 108\n\nExpected behavior (test cases):\n1. merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n2. merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n3. merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import heapq\r\ndef merge_sorted_list(input_list_1,input_list_2, input_list_3):\r\n    result = []\r\n    while True:\r\n        if not input_list_1 and not input_list_2 and not input_list_3:\r\n            break\r\n        elif input_list_1 and not input_list_2 and not input_list_3:\r\n            for i in range(len(input_list_1)):\r\n                result.append(input_list_1[i])\r\n            input_list_1 = []\r\n        elif input_list_2 and not input_list_1 and not input_list_3:\r\n            for j in range(len(input_list_2)):\r\n                result.append(input_list_2[j])\r\n            input_list_2 = []\r\n        else:\r\n            k = min(min(input_list_1), min(input_list_2),min(input_list_3))\r\n            heapq.heappush(result,k)\r\n            if len(input_list_1) > 1 and input_list_1[len(input_list_1)-1] == k :\r\n                input_list_1.pop()\r\n            if len(input_list_2) > 1 and input_list_2[len(input_list_2)-1] == k :\r\n                input_list_2.pop()\r\n            if len(input_list_3) > 1 and input_list_3[len(input_list_3)-1] == k :\r\n                input_list_3.pop()\r\n    return result "
          }
        }
      ],
      "usage": {
        "total_tokens": 810,
        "prompt_tokens": 534,
        "completion_tokens": 283
      }
    },
    "timestamp": 1752255456.1336071
  },
  {
    "mbpp_id": 109,
    "problem": {
      "task_id": 109,
      "text": "Write a python function to find the count of rotations of a binary string with odd value.",
      "code": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ",
      "test_list": [
        "assert odd_Equivalent(\"011001\",6) == 3",
        "assert odd_Equivalent(\"11011\",5) == 4",
        "assert odd_Equivalent(\"1010\",4) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the count of rotations of a binary string with odd value.\n\nTask ID: 109\n\nExpected behavior (test cases):\n1. odd_Equivalent(\"011001\",6) should return 3\n2. odd_Equivalent(\"11011\",5) should return 4\n3. odd_Equivalent(\"1010\",4) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def odd_Equivalent(binStr,numOfRotations):\r\n    evenVal = binStr[numOfRotations:] + binStr[:numOfRotations]\r\n    if int(evenVal, 2)%2 != 0:\r\n        return len(binStr)-numOfRotations\r\n    else:\r\n        return numOfRotations - 1 "
          }
        }
      ],
      "usage": {
        "total_tokens": 216,
        "prompt_tokens": 153,
        "completion_tokens": 70
      }
    },
    "timestamp": 1752255462.0768447
  },
  {
    "mbpp_id": 110,
    "problem": {
      "task_id": 110,
      "text": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
      "code": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ",
      "test_list": [
        "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
        "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
        "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\nTask ID: 110\n\nExpected behavior (test cases):\n1. extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) should return [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n2. extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) should return [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\n3. extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) should return [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def extract_missing(lst, start_range, end_range):\r\n    result = []\r\n    prev = -1\r\n    for i in lst:\r\n        if (i[0] > start_range or i[0] == start_range) and (\r\n            i[1] < end_range or i[1] == end_range):  # If there is a gap between the current number and the previous one.\r\n            if prev != i[0]:\r\n                result.append((prev + 1, i[0]))  # Inserting first missing value between two consecutive elements.\r\n            result.append(i)\r\n            prev = i[1]\r\n    else:\r\n        if prev != end_range:\r\n            result.append((prev + 1, end_range))  # Last case insertion.\r\n    return sorted(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 493,
        "prompt_tokens": 341,
        "completion_tokens": 159
      }
    },
    "timestamp": 1752255474.5988364
  },
  {
    "mbpp_id": 111,
    "problem": {
      "task_id": 111,
      "text": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
      "code": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result",
      "test_list": [
        "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
        "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
        "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n\nTask ID: 111\n\nExpected behavior (test cases):\n1. common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n2. common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\n3. common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def common_in_nested_lists(test_list):\r\n    res = set.intersection(*map(set, test_list))\r\n    return list(res) "
          }
        }
      ],
      "usage": {
        "total_tokens": 317,
        "prompt_tokens": 298,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752255477.2779994
  },
  {
    "mbpp_id": 112,
    "problem": {
      "task_id": 112,
      "text": "Write a python function to find the perimeter of a cylinder.",
      "code": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ",
      "test_list": [
        "assert perimeter(2,4) == 12",
        "assert perimeter(1,2) == 6",
        "assert perimeter(3,1) == 8"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the perimeter of a cylinder.\n\nTask ID: 112\n\nExpected behavior (test cases):\n1. perimeter(2,4) should return 12\n2. perimeter(1,2) should return 6\n3. perimeter(3,1) should return 8\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def perimeter(r,h):\r\n    p=2*2*r+2*h\r\n    return(p)"
          }
        }
      ],
      "usage": {
        "total_tokens": 140,
        "prompt_tokens": 127,
        "completion_tokens": 20
      }
    },
    "timestamp": 1752255479.2289965
  },
  {
    "mbpp_id": 113,
    "problem": {
      "task_id": 113,
      "text": "Write a function to check if a string represents an integer or not.",
      "code": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False",
      "test_list": [
        "assert check_integer(\"python\")==False",
        "assert check_integer(\"1\")==True",
        "assert check_integer(\"12345\")==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if a string represents an integer or not.\n\nTask ID: 113\n\nExpected behavior (test cases):\n1. check_integer(\"python\")==False\n2. check_integer(\"1\")==True\n3. check_integer(\"12345\")==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef check_integer(str): \r\n    pattern = '^\\d+$'\r\n    return True if(re.search(pattern,str)) else False "
          }
        }
      ],
      "usage": {
        "total_tokens": 142,
        "prompt_tokens": 120,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752255482.031005
  },
  {
    "mbpp_id": 114,
    "problem": {
      "task_id": 114,
      "text": "Write a function to assign frequency to each tuple in the given tuple list.",
      "code": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ",
      "test_list": [
        "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
        "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
        "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to assign frequency to each tuple in the given tuple list.\n\nTask ID: 114\n\nExpected behavior (test cases):\n1. assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) should return '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n2. assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) should return '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\n3. assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) should return '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def assign_freq(lst):\r\n    lst.sort(key=len)\r\n    n = len(lst[0])\r\n    d = {}\r\n    for i in range(len(lst)):\r\n        s = set()\r\n        l = []\r\n        j = 0\r\n        while j < n:\r\n            c = lst[i][j]\r\n            if c not in s:\r\n                l.append(c)\r\n                s.add(c)\r\n            else:\r\n                j += 1\r\n        d[tuple(l)] = n - j\r\n    res = [list(i) for i in lst]\r\n    for k, v in sorted(d.items()):\r\n        res[k] = list(map(lambda x: str(v + int(x)), k))\r\n    return ('[' + ','.join(['('.join(res[x]) for x in range(len(res))]) + ']')"
          }
        }
      ],
      "usage": {
        "total_tokens": 522,
        "prompt_tokens": 367,
        "completion_tokens": 162
      }
    },
    "timestamp": 1752255494.716345
  },
  {
    "mbpp_id": 115,
    "problem": {
      "task_id": 115,
      "text": "Write a function to check whether all dictionaries in a list are empty or not.",
      "code": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit",
      "test_list": [
        "assert empty_dit([{},{},{}])==True",
        "assert empty_dit([{1,2},{},{}])==False",
        "assert empty_dit({})==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether all dictionaries in a list are empty or not.\n\nTask ID: 115\n\nExpected behavior (test cases):\n1. empty_dit([{},{},{}])==True\n2. empty_dit([{1,2},{},{}])==False\n3. empty_dit({})==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def empty_dit(arr):\r\n    if(all(not d for d in arr)):\r\n        return True\r\n    else:\r\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 147,
        "prompt_tokens": 128,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752255497.2829459
  },
  {
    "mbpp_id": 116,
    "problem": {
      "task_id": 116,
      "text": "Write a function to convert a given tuple of positive integers into an integer.",
      "code": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result",
      "test_list": [
        "assert tuple_to_int((1,2,3))==123",
        "assert tuple_to_int((4,5,6))==456",
        "assert tuple_to_int((5,6,7))==567"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert a given tuple of positive integers into an integer.\n\nTask ID: 116\n\nExpected behavior (test cases):\n1. tuple_to_int((1,2,3))==123\n2. tuple_to_int((4,5,6))==456\n3. tuple_to_int((5,6,7))==567\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def tuple_to_int(tup):\r\n    return int(''.join(map(str,tup)))"
          }
        }
      ],
      "usage": {
        "total_tokens": 149,
        "prompt_tokens": 138,
        "completion_tokens": 18
      }
    },
    "timestamp": 1752255499.2250473
  },
  {
    "mbpp_id": 117,
    "problem": {
      "task_id": 117,
      "text": "Write a function to convert all possible convertible elements in the list to float.",
      "code": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ",
      "test_list": [
        "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
        "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
        "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert all possible convertible elements in the list to float.\n\nTask ID: 117\n\nExpected behavior (test cases):\n1. list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) should return '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n2. list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) should return '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\n3. list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) should return '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def list_to_float(test_list):\r\n    res = [(float(i[0]), j) if type(i[0]) == str else (i[0], float(j)) for i,j in test_list]\r\n    return res"
          }
        }
      ],
      "usage": {
        "total_tokens": 387,
        "prompt_tokens": 349,
        "completion_tokens": 45
      }
    },
    "timestamp": 1752255503.041357
  },
  {
    "mbpp_id": 118,
    "problem": {
      "task_id": 118,
      "text": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
      "code": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst",
      "test_list": [
        "assert string_to_list(\"python programming\")==['python','programming']",
        "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
        "assert string_to_list(\"write a program\")==['write','a','program']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\nTask ID: 118\n\nExpected behavior (test cases):\n1. string_to_list(\"python programming\")==['python','programming']\n2. string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\n3. string_to_list(\"write a program\")==['write','a','program']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def string_to_list(s):\r\n    s =s.split()\r\n    return s "
          }
        }
      ],
      "usage": {
        "total_tokens": 163,
        "prompt_tokens": 154,
        "completion_tokens": 16
      }
    },
    "timestamp": 1752255504.9106445
  },
  {
    "mbpp_id": 119,
    "problem": {
      "task_id": 119,
      "text": "Write a python function to find the element that appears only once in a sorted array.",
      "code": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)",
      "test_list": [
        "assert search([1,1,2,2,3],5) == 3",
        "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
        "assert search([1,2,2,3,3,4,4],7) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the element that appears only once in a sorted array.\n\nTask ID: 119\n\nExpected behavior (test cases):\n1. search([1,1,2,2,3],5) should return 3\n2. search([1,1,3,3,4,4,5,5,7,7,8],11) should return 8\n3. search([1,2,2,3,3,4,4],7) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def search(arr,n): \r\n    low = 0\r\n    high = n - 1\r\n  \r\n    while(low <= high):\r\n        mid = (low + high)//2\r\n  \r\n        if((mid == 0 or arr[mid-1] != arr[mid]) and (mid == n-1 or arr[mid+1] != arr[mid])):\r\n            return arr[mid]\r\n        elif(mid > 0 and arr[mid-1] == arr[mid]):\r\n            high = mid - 1\r\n        else:\r\n            low = mid + 1\r\n    return -1 "
          }
        }
      ],
      "usage": {
        "total_tokens": 283,
        "prompt_tokens": 172,
        "completion_tokens": 118
      }
    },
    "timestamp": 1752255514.5911849
  },
  {
    "mbpp_id": 120,
    "problem": {
      "task_id": 120,
      "text": "Write a function to find the maximum product from the pairs of tuples within a given list.",
      "code": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max",
      "test_list": [
        "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
        "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
        "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum product from the pairs of tuples within a given list.\n\nTask ID: 120\n\nExpected behavior (test cases):\n1. max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n2. max_product_tuple([(10,20), (15,2), (5,10)] )==200\n3. max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_product_tuple(test_list):\r\n  max_product = 0\r\n  for i in range(len(test_list)):\r\n    for j in range(i+1 , len(test_list)):\r\n      if(max_product < test_list[i][j] * test_list[j][i]):\r\n        max_product = test_list[i][j] * test_list[j][i]\r\n  return (max_product)"
          }
        }
      ],
      "usage": {
        "total_tokens": 265,
        "prompt_tokens": 195,
        "completion_tokens": 77
      }
    },
    "timestamp": 1752255520.791671
  },
  {
    "mbpp_id": 121,
    "problem": {
      "task_id": 121,
      "text": "Write a function to find the triplet with sum of the given array",
      "code": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)",
      "test_list": [
        "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
        "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
        "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the triplet with sum of the given array\n\nTask ID: 121\n\nExpected behavior (test cases):\n1. check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) should return True\n2. check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) should return False\n3. check_triplet([10, 4, 2, 3, 5], 5, 15, 0) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_triplet(arr, n, s):\r\n    for i in range(n - 2):\r\n        temp = set()\r\n        for j in range(i + 1, n - 1):\r\n            if arr[i] + arr[j] + s in temp:\r\n                print(\"Found triplets\", arr[i], arr[j], s)\r\n                return True\r\n            else:\r\n                temp.add(s - (arr[i] + arr[j]))\r\n    return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 293,
        "prompt_tokens": 208,
        "completion_tokens": 92
      }
    },
    "timestamp": 1752255528.393756
  },
  {
    "mbpp_id": 122,
    "problem": {
      "task_id": 122,
      "text": "Write a function to find n’th smart number.",
      "code": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ",
      "test_list": [
        "assert smartNumber(1) == 30",
        "assert smartNumber(50) == 273",
        "assert smartNumber(1000) == 2664"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find n’th smart number.\n\nTask ID: 122\n\nExpected behavior (test cases):\n1. smartNumber(1) should return 30\n2. smartNumber(50) should return 273\n3. smartNumber(1000) should return 2664\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def smartNumber(n): \r\n    ans = ((n - 1) * (n // 2)) + sum(range(n)) \r\n    return int(ans)"
          }
        }
      ],
      "usage": {
        "total_tokens": 158,
        "prompt_tokens": 132,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752255531.5986655
  },
  {
    "mbpp_id": 123,
    "problem": {
      "task_id": 123,
      "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
      "code": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)",
      "test_list": [
        "assert amicable_numbers_sum(999)==504",
        "assert amicable_numbers_sum(9999)==31626",
        "assert amicable_numbers_sum(99)==0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sum all amicable numbers from 1 to a specified number.\n\nTask ID: 123\n\nExpected behavior (test cases):\n1. amicable_numbers_sum(999)==504\n2. amicable_numbers_sum(9999)==31626\n3. amicable_numbers_sum(99)==0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_amicable(x): \r\n\tsums = 0\r\n\tfor i in range(1,x//2 + 1): \r\n\t\tif x % i == 0: \r\n\t\t\tsums += i \r\n\tif sums != x: \r\n\t\treturn False; \r\n\telse : \r\n\t\treturn True; \r\n\r\ndef amicable_numbers_sum(n): \r\n\ts = 0 \r\n\tfor i in range(1,n+1):\r\n\t\tif(is_amicable(i) and is_amicable(i)): \r\n\t\t\ts+=i \r\n\treturn s "
          }
        }
      ],
      "usage": {
        "total_tokens": 240,
        "prompt_tokens": 137,
        "completion_tokens": 110
      }
    },
    "timestamp": 1752255540.5582242
  },
  {
    "mbpp_id": 124,
    "problem": {
      "task_id": 124,
      "text": "Write a function to get the angle of a complex number.",
      "code": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle",
      "test_list": [
        "assert angle_complex(0,1j)==1.5707963267948966 ",
        "assert angle_complex(2,1j)==0.4636476090008061",
        "assert angle_complex(0,2j)==1.5707963267948966"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to get the angle of a complex number.\n\nTask ID: 124\n\nExpected behavior (test cases):\n1. angle_complex(0,1j)==1.5707963267948966 \n2. angle_complex(2,1j)==0.4636476090008061\n3. angle_complex(0,2j)==1.5707963267948966\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def angle_complex(x,y):\r\n    if x == 0:\r\n        return (y/abs(y))\r\n    else:\r\n        return (cmath.phase(complex(x,y))) "
          }
        }
      ],
      "usage": {
        "total_tokens": 202,
        "prompt_tokens": 174,
        "completion_tokens": 35
      }
    },
    "timestamp": 1752255544.7419138
  },
  {
    "mbpp_id": 125,
    "problem": {
      "task_id": 125,
      "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
      "code": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0",
      "test_list": [
        "assert find_length(\"11000010001\", 11) == 6",
        "assert find_length(\"10111\", 5) == 1",
        "assert find_length(\"11011101100101\", 14) == 2 "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\nTask ID: 125\n\nExpected behavior (test cases):\n1. find_length(\"11000010001\", 11) should return 6\n2. find_length(\"10111\", 5) should return 1\n3. find_length(\"11011101100101\", 14) should return 2 \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_length(binary_string,n):\r\n    length = 0\r\n    for i in range(n-1): \r\n        count_ones = 0\r\n        count_zeros = 0\r\n        j = i + 1  \r\n        while(j < n): \r\n            if (binary_string[j] == '0'): \r\n                count_zeros += 1\r\n            else:\r\n                count_ones += 1\r\n            if (count_ones > count_zeros): \r\n                length += 1\r\n                count_zeros = 0\r\n                count_ones = 0\r\n            j += 1\r\n        count_zeros = 0\r\n        count_ones = 0\r\n    return length"
          }
        }
      ],
      "usage": {
        "total_tokens": 312,
        "prompt_tokens": 180,
        "completion_tokens": 139
      }
    },
    "timestamp": 1752255555.7701197
  },
  {
    "mbpp_id": 126,
    "problem": {
      "task_id": 126,
      "text": "Write a python function to find the sum of common divisors of two given numbers.",
      "code": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum",
      "test_list": [
        "assert sum(10,15) == 6",
        "assert sum(100,150) == 93",
        "assert sum(4,6) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of common divisors of two given numbers.\n\nTask ID: 126\n\nExpected behavior (test cases):\n1. sum(10,15) should return 6\n2. sum(100,150) should return 93\n3. sum(4,6) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_of_div(n1,n2):\r\n    sum = 0\r\n    for i in range(1,max(n1,n2)+1):\r\n        if n1%i==0 and n2 %i == 0:\r\n            sum += i\r\n    return(sum)"
          }
        }
      ],
      "usage": {
        "total_tokens": 186,
        "prompt_tokens": 138,
        "completion_tokens": 55
      }
    },
    "timestamp": 1752255560.2779367
  },
  {
    "mbpp_id": 127,
    "problem": {
      "task_id": 127,
      "text": "Write a function to multiply two integers without using the * operator in python.",
      "code": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)",
      "test_list": [
        "assert multiply_int(10,20)==200",
        "assert multiply_int(5,10)==50",
        "assert multiply_int(4,8)==32"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to multiply two integers without using the * operator in python.\n\nTask ID: 127\n\nExpected behavior (test cases):\n1. multiply_int(10,20)==200\n2. multiply_int(5,10)==50\n3. multiply_int(4,8)==32\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def multiply_int(a,b):\r\n    if b == 0:\r\n        return 0\r\n    else:\r\n        return ((a + multiply_int(a, b - 1))) "
          }
        }
      ],
      "usage": {
        "total_tokens": 159,
        "prompt_tokens": 130,
        "completion_tokens": 36
      }
    },
    "timestamp": 1752255563.6440394
  },
  {
    "mbpp_id": 128,
    "problem": {
      "task_id": 128,
      "text": "Write a function to shortlist words that are longer than n from a given list of words.",
      "code": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t",
      "test_list": [
        "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
        "assert long_words(2,\"writing a program\")==['writing','program']",
        "assert long_words(5,\"sorting list\")==['sorting']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to shortlist words that are longer than n from a given list of words.\n\nTask ID: 128\n\nExpected behavior (test cases):\n1. long_words(3,\"python is a programming language\")==['python','programming','language']\n2. long_words(2,\"writing a program\")==['writing','program']\n3. long_words(5,\"sorting list\")==['sorting']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def long_words(n, lst):\r\n    return [i for i in lst if len(i) > n]"
          }
        }
      ],
      "usage": {
        "total_tokens": 158,
        "prompt_tokens": 143,
        "completion_tokens": 22
      }
    },
    "timestamp": 1752255565.8237436
  },
  {
    "mbpp_id": 129,
    "problem": {
      "task_id": 129,
      "text": "Write a function to calculate magic square.",
      "code": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True",
      "test_list": [
        "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
        "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
        "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate magic square.\n\nTask ID: 129\n\nExpected behavior (test cases):\n1. magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n2. magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n3. magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def magic_square_test(mat):\r\n    n = len(mat)\r\n    for i in range(n):\r\n        sum_r = sum(mat[i])\r\n        if sum_r != (n + 1) * (n + 2) // 2:\r\n            return False\r\n    sum_c = 0\r\n    for j in range(n):\r\n        sum_c += mat[j][i]\r\n    if sum_c != (n + 1) * (n + 2) // 2:\r\n        return False\r\n\r\n    sum_diag_1 = 0\r\n    sum_diag_2 = 0\r\n    for i in range(n):\r\n        sum_diag_1 += mat[i][i]\r\n    for j in range(n):\r\n        sum_diag_2 += mat[n - 1 - j][j]\r\n\r\n    if sum_diag_1 != (n + 1) * (n + 2) // 2 or sum_diag_2 != (n + 1) * (n + 2) // 2:\r\n        return False\r\n    else:\r\n        return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 426,
        "prompt_tokens": 216,
        "completion_tokens": 217
      }
    },
    "timestamp": 1752255582.8683162
  },
  {
    "mbpp_id": 130,
    "problem": {
      "task_id": 130,
      "text": "Write a function to find the item with maximum frequency in a given list.",
      "code": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result",
      "test_list": [
        "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
        "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
        "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the item with maximum frequency in a given list.\n\nTask ID: 130\n\nExpected behavior (test cases):\n1. max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n2. max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\n3. max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_occurrences(nums):\r\n  res = []\r\n  count_dict = {}\r\n  for num in nums:\r\n    if num not in count_dict.keys():\r\n      count_dict[num] = 1\r\n    else:\r\n      count_dict[num] += 1\r\n  res = sorted(count_dict.items(), key=lambda kv:kv[1], reverse=True)\r\n  return(res[0])"
          }
        }
      ],
      "usage": {
        "total_tokens": 316,
        "prompt_tokens": 247,
        "completion_tokens": 76
      }
    },
    "timestamp": 1752255589.1918194
  },
  {
    "mbpp_id": 131,
    "problem": {
      "task_id": 131,
      "text": "Write a python function to reverse only the vowels of a given string.",
      "code": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string",
      "test_list": [
        "assert reverse_vowels(\"Python\") == \"Python\"",
        "assert reverse_vowels(\"USA\") == \"ASU\"",
        "assert reverse_vowels(\"ab\") == \"ab\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to reverse only the vowels of a given string.\n\nTask ID: 131\n\nExpected behavior (test cases):\n1. reverse_vowels(\"Python\") should return \"Python\"\n2. reverse_vowels(\"USA\") should return \"ASU\"\n3. reverse_vowels(\"ab\") should return \"ab\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def reverse_vowels(s):\r\n    s = list(s)\r\n    i=0\r\n    j=len(s)-1\r\n    vowel = 'aeiouAEIOU'\r\n    while i<j:\r\n        if s[i] not in vowel:\r\n            i+=1\r\n        elif s[j] not in vowel:\r\n            j-=1\r\n        else:\r\n            t = s[i]\r\n            s[i]=s[j]\r\n            s[j]=t\r\n            i+=1\r\n            j-=1\r\n    return \"\".join(s)"
          }
        }
      ],
      "usage": {
        "total_tokens": 231,
        "prompt_tokens": 132,
        "completion_tokens": 106
      }
    },
    "timestamp": 1752255597.858159
  },
  {
    "mbpp_id": 132,
    "problem": {
      "task_id": 132,
      "text": "Write a function to convert tuple to a string.",
      "code": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str",
      "test_list": [
        "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
        "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
        "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert tuple to a string.\n\nTask ID: 132\n\nExpected behavior (test cases):\n1. tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n2. tup_string(('p','y','t','h','o','n'))==(\"python\")\n3. tup_string(('p','r','o','g','r','a','m'))==(\"program\")\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def tup_string(test_tup):\r\n  return \"\".join(test_tup)"
          }
        }
      ],
      "usage": {
        "total_tokens": 173,
        "prompt_tokens": 165,
        "completion_tokens": 15
      }
    },
    "timestamp": 1752255599.4979074
  },
  {
    "mbpp_id": 133,
    "problem": {
      "task_id": 133,
      "text": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
      "code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
      "test_list": [
        "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
        "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
        "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\nTask ID: 133\n\nExpected behavior (test cases):\n1. sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n2. sum_negativenum([10,15,-14,13,-18,12,-20])==-52\n3. sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_negativenum(lst): \r\n    return sum(x for x in lst if x<0)"
          }
        }
      ],
      "usage": {
        "total_tokens": 241,
        "prompt_tokens": 226,
        "completion_tokens": 22
      }
    },
    "timestamp": 1752255601.9756494
  },
  {
    "mbpp_id": 134,
    "problem": {
      "task_id": 134,
      "text": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
      "code": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ",
      "test_list": [
        "assert check_last([5,7,10],3,1) == \"ODD\"",
        "assert check_last([2,3],2,3) == \"EVEN\"",
        "assert check_last([1,2,3],3,1) == \"ODD\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\nTask ID: 134\n\nExpected behavior (test cases):\n1. check_last([5,7,10],3,1) should return \"ODD\"\n2. check_last([2,3],2,3) should return \"EVEN\"\n3. check_last([1,2,3],3,1) should return \"ODD\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_last(a,p,q):\r\n    if ((a[p-1]%2==0)):\r\n        ans = \"EVEN\"\r\n    else:\r\n        ans = \"ODD\"    \r\n    if((ans==\"ODD\")and(q%2!=0))or((ans==\"EVEN\")and(q%2==0)):\r\n        return (\"EVEN\")\r\n    elif(ans==\"EVEN\"):\r\n        return (\"ODD\")\r\n    else:\r\n        return (\"EVEN\")"
          }
        }
      ],
      "usage": {
        "total_tokens": 248,
        "prompt_tokens": 161,
        "completion_tokens": 94
      }
    },
    "timestamp": 1752255610.0067987
  },
  {
    "mbpp_id": 135,
    "problem": {
      "task_id": 135,
      "text": "Write a function to find the nth hexagonal number.",
      "code": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ",
      "test_list": [
        "assert hexagonal_num(10) == 190",
        "assert hexagonal_num(5) == 45",
        "assert hexagonal_num(7) == 91"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the nth hexagonal number.\n\nTask ID: 135\n\nExpected behavior (test cases):\n1. hexagonal_num(10) should return 190\n2. hexagonal_num(5) should return 45\n3. hexagonal_num(7) should return 91\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def hexagonal_num(n): \r\n    return ((n * (2 * n - 1))) // 2 "
          }
        }
      ],
      "usage": {
        "total_tokens": 147,
        "prompt_tokens": 130,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752255612.4780312
  },
  {
    "mbpp_id": 136,
    "problem": {
      "task_id": 136,
      "text": "Write a function to calculate electricity bill.",
      "code": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total",
      "test_list": [
        "assert cal_electbill(75)==246.25",
        "assert cal_electbill(265)==1442.75",
        "assert cal_electbill(100)==327.5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate electricity bill.\n\nTask ID: 136\n\nExpected behavior (test cases):\n1. cal_electbill(75)==246.25\n2. cal_electbill(265)==1442.75\n3. cal_electbill(100)==327.5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def cal_electbill(units):\r\n    rate_per_unit = 4.8\r\n    if units <= 100:\r\n        bill = (units * rate_per_unit)\r\n        return bill\r\n    elif units > 100 and units < 200:\r\n        unit_charge_1 = 100 * rate_per_unit\r\n        remaining_units = (units - 100) \r\n        bill = ((unit_charge_1 + (remaining_units * rate_per_unit)))\r\n        return bill\r\n    else:\r\n        unit_charge_1 = 100 * rate_per_unit\r\n        unit_charge_2 = (200 - 100) * rate_per_unit \r\n        remaining_units = (units - 200)\r\n        bill = ((unit_charge_1 + unit_charge_2)+(remaining_units * rate_per_unit))\r\n        return bill"
          }
        }
      ],
      "usage": {
        "total_tokens": 309,
        "prompt_tokens": 136,
        "completion_tokens": 180
      }
    },
    "timestamp": 1752255626.872164
  },
  {
    "mbpp_id": 137,
    "problem": {
      "task_id": 137,
      "text": "Write a function to find the ration of zeroes in an array of integers.",
      "code": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
      "test_list": [
        "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
        "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
        "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the ration of zeroes in an array of integers.\n\nTask ID: 137\n\nExpected behavior (test cases):\n1. zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n2. zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\n3. zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def zero_count(arr):\r\n    if len(arr) == 0:\r\n        return 0\r\n    elif arr.count(0) > 0 and arr.count(0) <= len(arr):\r\n        count = float(len(arr))/arr.count(0)\r\n    else:\r\n        count = 0.00\r\n    \r\n    return count "
          }
        }
      ],
      "usage": {
        "total_tokens": 286,
        "prompt_tokens": 226,
        "completion_tokens": 67
      }
    },
    "timestamp": 1752255632.6286242
  },
  {
    "mbpp_id": 138,
    "problem": {
      "task_id": 138,
      "text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
      "code": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True",
      "test_list": [
        "assert is_Sum_Of_Powers_Of_Two(10) == True",
        "assert is_Sum_Of_Powers_Of_Two(7) == False",
        "assert is_Sum_Of_Powers_Of_Two(14) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\nTask ID: 138\n\nExpected behavior (test cases):\n1. is_Sum_Of_Powers_Of_Two(10) should return True\n2. is_Sum_Of_Powers_Of_Two(7) should return False\n3. is_Sum_Of_Powers_Of_Two(14) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_Sum_Of_Powers_Of_Two(n):\r\n    while n != 0:\r\n        if n % 2 == 0 and n + 1 >= 2 ** (n - 1): \r\n            n = n // 2\r\n        else:\r\n            return False\r\n    return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 207,
        "prompt_tokens": 153,
        "completion_tokens": 61
      }
    },
    "timestamp": 1752255637.632044
  },
  {
    "mbpp_id": 139,
    "problem": {
      "task_id": 139,
      "text": "Write a function to find the circumference of a circle.",
      "code": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter",
      "test_list": [
        "assert circle_circumference(10)==62.830000000000005",
        "assert circle_circumference(5)==31.415000000000003",
        "assert circle_circumference(4)==25.132"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the circumference of a circle.\n\nTask ID: 139\n\nExpected behavior (test cases):\n1. circle_circumference(10)==62.830000000000005\n2. circle_circumference(5)==31.415000000000003\n3. circle_circumference(4)==25.132\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef circle_circumference(radius):\r\n    return 2 * math.pi * radius"
          }
        }
      ],
      "usage": {
        "total_tokens": 175,
        "prompt_tokens": 162,
        "completion_tokens": 20
      }
    },
    "timestamp": 1752255639.7087345
  },
  {
    "mbpp_id": 140,
    "problem": {
      "task_id": 140,
      "text": "Write a function to extract elements that occur singly in the given tuple list.",
      "code": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ",
      "test_list": [
        "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
        "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
        "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract elements that occur singly in the given tuple list.\n\nTask ID: 140\n\nExpected behavior (test cases):\n1. extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) should return [3, 4, 5, 7, 1]\n2. extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) should return [1, 2, 3, 4, 7, 8]\n3. extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) should return [7, 8, 9, 10, 11, 12]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def extract_singly(test_list):\r\n    single_list = []\r\n    for i in test_list:\r\n        if len(i) == 1:\r\n            single_list.append(i[0])\r\n    return single_list"
          }
        }
      ],
      "usage": {
        "total_tokens": 275,
        "prompt_tokens": 242,
        "completion_tokens": 40
      }
    },
    "timestamp": 1752255643.565685
  },
  {
    "mbpp_id": 141,
    "problem": {
      "task_id": 141,
      "text": "Write a function to sort a list of elements using pancake sort.",
      "code": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums",
      "test_list": [
        "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
        "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
        "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a list of elements using pancake sort.\n\nTask ID: 141\n\nExpected behavior (test cases):\n1. pancake_sort([15, 79, 25, 38, 69]) should return [15, 25, 38, 69, 79]\n2. pancake_sort([98, 12, 54, 36, 85]) should return [12, 36, 54, 85, 98]\n3. pancake_sort([41, 42, 32, 12, 23]) should return [12, 23, 32, 41, 42]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def pancake_sort(arr): \r\n\tn = len(arr) \r\n\tfor i in range(n): \r\n\t\tif arr[i] != n-i : \r\n\t\t\tmaxi = -1\r\n\t\t\tindex = -1\r\n\t\t\tfor j in range(i+1, n): \r\n\t\t\t\tif arr[j] > arr[maxi]: \r\n\t\t\t\t\tmaxi = j\r\n\t\t\tif maxi != -1: \r\n\t\t\t\tif index == -1: \r\n\t\t\t\t\tarr[index], arr[n-1] = arr[n-1], arr[index]\r\n\t\t\t\t\ti += 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tarr[index], arr[i] = arr[i], arr[index]\r\n\t\t\t\tarr[0:n-i-1] = sorted(arr[0:i+1]+arr[i+1:n])\r\n\treturn arr"
          }
        }
      ],
      "usage": {
        "total_tokens": 379,
        "prompt_tokens": 230,
        "completion_tokens": 156
      }
    },
    "timestamp": 1752255655.8346121
  },
  {
    "mbpp_id": 142,
    "problem": {
      "task_id": 142,
      "text": "Write a function to count the same pair in three given lists.",
      "code": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result",
      "test_list": [
        "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
        "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
        "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count the same pair in three given lists.\n\nTask ID: 142\n\nExpected behavior (test cases):\n1. count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n2. count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n3. count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_samepair(a,b,c): \r\n    d = list(zip(a,b))  \r\n    e = set(d) \r\n    return len(e & set(zip(b,c))) "
          }
        }
      ],
      "usage": {
        "total_tokens": 285,
        "prompt_tokens": 256,
        "completion_tokens": 36
      }
    },
    "timestamp": 1752255659.189528
  },
  {
    "mbpp_id": 143,
    "problem": {
      "task_id": 143,
      "text": "Write a function to find number of lists present in the given tuple.",
      "code": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ",
      "test_list": [
        "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
        "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
        "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find number of lists present in the given tuple.\n\nTask ID: 143\n\nExpected behavior (test cases):\n1. find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) should return 2\n2. find_lists(([1, 2], [3, 4], [5, 6]))  should return 3\n3. find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_lists(test_list):\r\n    count = 0\r\n    for i in test_list:\r\n        if isinstance(i,list):\r\n            count+=1\r\n    return count"
          }
        }
      ],
      "usage": {
        "total_tokens": 212,
        "prompt_tokens": 186,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752255662.2235532
  },
  {
    "mbpp_id": 144,
    "problem": {
      "task_id": 144,
      "text": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
      "code": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum",
      "test_list": [
        "assert sum_Pairs([1,8,9,15,16],5) == 74",
        "assert sum_Pairs([1,2,3,4],4) == 10",
        "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of absolute differences in all pairs of the given array.\n\nTask ID: 144\n\nExpected behavior (test cases):\n1. sum_Pairs([1,8,9,15,16],5) should return 74\n2. sum_Pairs([1,2,3,4],4) should return 10\n3. sum_Pairs([1,2,3,4,5,7,9,11,14],9) should return 188\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_Pairs(nums,n): \r\n\tsum = 0\r\n\tfor i in range(n-1):\r\n\t\tfor j in range(i+1,n):  \r\n\t\t\tsum += abs(nums[i] - nums[j])  # sum up the absolute difference between each pair \r\n\treturn sum "
          }
        }
      ],
      "usage": {
        "total_tokens": 227,
        "prompt_tokens": 177,
        "completion_tokens": 57
      }
    },
    "timestamp": 1752255667.616624
  },
  {
    "mbpp_id": 145,
    "problem": {
      "task_id": 145,
      "text": "Write a python function to find the maximum difference between any two elements in a given array.",
      "code": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ",
      "test_list": [
        "assert max_Abs_Diff((2,1,5,3),4) == 4",
        "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
        "assert max_Abs_Diff((3,2,1),3) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the maximum difference between any two elements in a given array.\n\nTask ID: 145\n\nExpected behavior (test cases):\n1. max_Abs_Diff((2,1,5,3),4) should return 4\n2. max_Abs_Diff((9,3,2,5,1),5) should return 8\n3. max_Abs_Diff((3,2,1),3) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_Abs_Diff(nums,k):\r\n    minVal = min(nums)\r\n    diffSum = abs(k-minVal)\r\n    for i in range(len(nums)):\r\n        if nums[i] >= k:\r\n            break\r\n        else:\r\n            diffSum += abs(nums[i]-k)\r\n    return diffSum"
          }
        }
      ],
      "usage": {
        "total_tokens": 216,
        "prompt_tokens": 162,
        "completion_tokens": 61
      }
    },
    "timestamp": 1752255672.7788038
  },
  {
    "mbpp_id": 146,
    "problem": {
      "task_id": 146,
      "text": "Write a function to find the ascii value of total characters in a string.",
      "code": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])",
      "test_list": [
        "assert ascii_value_string(\"python\")==112",
        "assert ascii_value_string(\"Program\")==80",
        "assert ascii_value_string(\"Language\")==76"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the ascii value of total characters in a string.\n\nTask ID: 146\n\nExpected behavior (test cases):\n1. ascii_value_string(\"python\")==112\n2. ascii_value_string(\"Program\")==80\n3. ascii_value_string(\"Language\")==76\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def ascii_value_string(string):\r\n    total = sum([ord(i) for i in string])\r\n    return total"
          }
        }
      ],
      "usage": {
        "total_tokens": 139,
        "prompt_tokens": 124,
        "completion_tokens": 22
      }
    },
    "timestamp": 1752255674.9295475
  },
  {
    "mbpp_id": 147,
    "problem": {
      "task_id": 147,
      "text": "Write a function to find the maximum total path sum in the given triangle.",
      "code": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]",
      "test_list": [
        "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
        "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
        "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum total path sum in the given triangle.\n\nTask ID: 147\n\nExpected behavior (test cases):\n1. max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) should return 14\n2. max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) should return 24 \n3. max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) should return 53\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_path_sum(arr, i, j):\r\n    if not arr:\r\n        return None\r\n    if i == len(arr)-1 and j == 0 and arr[i][j] != -1:\r\n        return arr[i][j]\r\n    elif i >= len(arr) or j >= len(arr[0]):\r\n        return float('-inf')\r\n    else:\r\n        res = max(max_path_sum(arr, i+1, j), max_path_sum(arr, i+1, j+1)) + arr[i][j]\r\n        if res > max_path_sum(arr, i-1, j-1):\r\n            return max(res, max_path_sum(arr, i-1, j-1))\r\n        else:\r\n            return min(res, max_path_sum(arr, i-1, j-1))\r\n\r\nprint(max_path_sum([[-19, -19, -19, 0, -19],\r\n                     [-19, 15, 3, -19, -19],\r\n                     [-19, 18, 2, 4, -19],\r\n                     [-19, -19, 19, 10, -19]], 2, 2))  # returns 58"
          }
        }
      ],
      "usage": {
        "total_tokens": 480,
        "prompt_tokens": 228,
        "completion_tokens": 259
      }
    },
    "timestamp": 1752255694.8250256
  },
  {
    "mbpp_id": 148,
    "problem": {
      "task_id": 148,
      "text": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
      "code": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
      "test_list": [
        "assert sum_digits_twoparts(35)==17",
        "assert sum_digits_twoparts(7)==7",
        "assert sum_digits_twoparts(100)==19"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to divide a number into two parts such that the sum of digits is maximum.\n\nTask ID: 148\n\nExpected behavior (test cases):\n1. sum_digits_twoparts(35)==17\n2. sum_digits_twoparts(7)==7\n3. sum_digits_twoparts(100)==19\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_digits_twoparts(n): \r\n    temp = n; \r\n    s = 0; \r\n    r = 0;\r\n    while(temp != 0): \r\n        r = temp % 10\r\n        if (r > s):\r\n            t = s\r\n            s = r \r\n            temp = temp - t + s  \r\n        else:\r\n            temp = temp // 10\r\n            s += r \r\n    return(s)"
          }
        }
      ],
      "usage": {
        "total_tokens": 220,
        "prompt_tokens": 135,
        "completion_tokens": 92
      }
    },
    "timestamp": 1752255702.384057
  },
  {
    "mbpp_id": 149,
    "problem": {
      "task_id": 149,
      "text": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
      "code": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result",
      "test_list": [
        "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
        "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
        "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\nTask ID: 149\n\nExpected behavior (test cases):\n1. longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) should return 6\n2. longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) should return 3\n3. longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) should return 7\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def longest_subseq_with_diff_one(nums, n): \r\n\tcount = 1\r\n\tmax_count = count \r\n\r\n\tfor i in range(1,n): \r\n\t\tif (nums[i] - nums[i-1] == 1): \r\n\t\t\tcount += 1\r\n\t\t\tif(count > max_count): \r\n\t\t\t\tmax_count = count \r\n\t\telse: \r\n\t\t\tcount = 1\r\n\treturn(max_count) "
          }
        }
      ],
      "usage": {
        "total_tokens": 290,
        "prompt_tokens": 214,
        "completion_tokens": 83
      }
    },
    "timestamp": 1752255709.2815368
  },
  {
    "mbpp_id": 150,
    "problem": {
      "task_id": 150,
      "text": "Write a python function to find whether the given number is present in the infinite sequence or not.",
      "code": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False",
      "test_list": [
        "assert does_Contain_B(1,7,3) == True",
        "assert does_Contain_B(1,-3,5) == False",
        "assert does_Contain_B(3,2,5) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find whether the given number is present in the infinite sequence or not.\n\nTask ID: 150\n\nExpected behavior (test cases):\n1. does_Contain_B(1,7,3) should return True\n2. does_Contain_B(1,-3,5) should return False\n3. does_Contain_B(3,2,5) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def does_Contain_B(largest_num,num,to_find):\r\n    if (num >= largest_num - num and\r\n        abs(num - to_find) < largest_num + num // 2): \r\n        return True\r\n    else:\r\n        return False "
          }
        }
      ],
      "usage": {
        "total_tokens": 189,
        "prompt_tokens": 145,
        "completion_tokens": 51
      }
    },
    "timestamp": 1752255713.9489684
  },
  {
    "mbpp_id": 151,
    "problem": {
      "task_id": 151,
      "text": "Write a python function to check whether the given number is co-prime or not.",
      "code": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1",
      "test_list": [
        "assert is_coprime(17,13) == True",
        "assert is_coprime(15,21) == False",
        "assert is_coprime(25,45) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given number is co-prime or not.\n\nTask ID: 151\n\nExpected behavior (test cases):\n1. is_coprime(17,13) should return True\n2. is_coprime(15,21) should return False\n3. is_coprime(25,45) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def gcd(a,b): \r\n    if(b==0): \r\n        return a; \r\n    else: \r\n        return gcd(b,a%b); \r\n    \r\ndef is_coprime(x,y): \r\n    res = gcd(x,y) \r\n    if(res == 1): \r\n        return True\r\n    else:\r\n        return False "
          }
        }
      ],
      "usage": {
        "total_tokens": 204,
        "prompt_tokens": 143,
        "completion_tokens": 68
      }
    },
    "timestamp": 1752255719.67939
  },
  {
    "mbpp_id": 152,
    "problem": {
      "task_id": 152,
      "text": "Write a function to sort the given array by using merge sort.",
      "code": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n",
      "test_list": [
        "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
        "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
        "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort the given array by using merge sort.\n\nTask ID: 152\n\nExpected behavior (test cases):\n1. merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) should return [1, 2, 3, 4, 5, 6, 7, 9]\n2. merge_sort([7, 25, 45, 78, 11, 33, 19]) should return [7, 11, 19, 25, 33, 45, 78]\n3. merge_sort([3, 1, 4, 9, 8]) should return [1, 3, 4, 8, 9]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def merge_sort(list):\r\n    if len(list) > 1:\r\n        mid = len(list)//2\r\n        left_half = list[:mid]\r\n        right_half = list[mid:]\r\n\r\n        # Recursive call on each half\r\n        merge_sort(left_half)\r\n        merge_sort(right_half)\r\n\r\n        i = j = k = 0\r\n\r\n        # Copy data to temp arrays L[] and R[]\r\n        while i < len(left_half) and j < len(right_half):\r\n            if left_half[i] <= right_half[j]:\r\n                list[k] = left_half[i]\r\n                i += 1\r\n            else:\r\n                list[k] = right_half[j]\r\n                j += 1\r\n            k += 1\r\n\r\n        # Checking if any element was left\r\n        while i < len(left_half):\r\n            list[k] = left_half[i]\r\n            i += 1\r\n            k += 1\r\n\r\n        while j < len(right_half):\r\n            list[k] = right_half[j]\r\n            j += 1\r\n            k += 1\r\nlist = [int(ele) for ele in input().split()]\r\nmerge_sort(list) \r\nprint (\"Sorted array is:\", list)"
          }
        }
      ],
      "usage": {
        "total_tokens": 470,
        "prompt_tokens": 238,
        "completion_tokens": 239
      }
    },
    "timestamp": 1752255738.1007826
  },
  {
    "mbpp_id": 153,
    "problem": {
      "task_id": 153,
      "text": "Write a function to find the vertex of a parabola.",
      "code": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
      "test_list": [
        "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
        "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
        "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the vertex of a parabola.\n\nTask ID: 153\n\nExpected behavior (test cases):\n1. parabola_vertex(5,3,2)==(-0.3, 1.55)\n2. parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\n3. parabola_vertex(2,4,6)==(-1.0, 4.0)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef parabola_vertex(a,b,c):\r\n    if b == 0 and c == 0:\r\n        return (-a, -a)\r\n    x = -b/(2*a) \r\n    y = ((math.pow(b,2))-(4*a*c))/(4*a)\r\n    return (x,y) "
          }
        }
      ],
      "usage": {
        "total_tokens": 248,
        "prompt_tokens": 188,
        "completion_tokens": 67
      }
    },
    "timestamp": 1752255743.6524377
  },
  {
    "mbpp_id": 154,
    "problem": {
      "task_id": 154,
      "text": "Write a function to extract every specified element from a given two dimensional list.",
      "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result",
      "test_list": [
        "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
        "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
        "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract every specified element from a given two dimensional list.\n\nTask ID: 154\n\nExpected behavior (test cases):\n1. specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n2. specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n3. specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def specified_element(test_list,start): \r\n    return test_list[start][::]"
          }
        }
      ],
      "usage": {
        "total_tokens": 250,
        "prompt_tokens": 241,
        "completion_tokens": 16
      }
    },
    "timestamp": 1752255745.4946775
  },
  {
    "mbpp_id": 155,
    "problem": {
      "task_id": 155,
      "text": "Write a python function to toggle all even bits of a given number.",
      "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
      "test_list": [
        "assert even_bit_toggle_number(10) == 0",
        "assert even_bit_toggle_number(20) == 30",
        "assert even_bit_toggle_number(30) == 20"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to toggle all even bits of a given number.\n\nTask ID: 155\n\nExpected behavior (test cases):\n1. even_bit_toggle_number(10) should return 0\n2. even_bit_toggle_number(20) should return 30\n3. even_bit_toggle_number(30) should return 20\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def even_bit_toggle_number(num):\r\n    mask = 0b11\r\n    res = num ^ (mask << 1)\r\n    return res "
          }
        }
      ],
      "usage": {
        "total_tokens": 160,
        "prompt_tokens": 136,
        "completion_tokens": 31
      }
    },
    "timestamp": 1752255748.5910127
  },
  {
    "mbpp_id": 156,
    "problem": {
      "task_id": 156,
      "text": "Write a function to convert a tuple of string values to a tuple of integer values.",
      "code": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result",
      "test_list": [
        "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
        "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
        "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert a tuple of string values to a tuple of integer values.\n\nTask ID: 156\n\nExpected behavior (test cases):\n1. tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n2. tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\n3. tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def tuple_int_str(test_tup):\r\n    return tuple(int(i) for i in test_tup)"
          }
        }
      ],
      "usage": {
        "total_tokens": 245,
        "prompt_tokens": 231,
        "completion_tokens": 21
      }
    },
    "timestamp": 1752255750.9260511
  },
  {
    "mbpp_id": 157,
    "problem": {
      "task_id": 157,
      "text": "Write a function to reflect the run-length encoding from a list.",
      "code": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]",
      "test_list": [
        "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
        "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
        "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to reflect the run-length encoding from a list.\n\nTask ID: 157\n\nExpected behavior (test cases):\n1. encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n2. encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\n3. encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def encode_list(lst):\r\n    rle = [[lst[0], 0]]\r\n    for i in range(1, len(lst)):\r\n        if lst[i] == rle[-1][0]:\r\n            rle[-1][1] += 1\r\n        else:\r\n            rle.append([lst[i], 1])\r\n    return(rle)"
          }
        }
      ],
      "usage": {
        "total_tokens": 344,
        "prompt_tokens": 279,
        "completion_tokens": 72
      }
    },
    "timestamp": 1752255757.0465925
  },
  {
    "mbpp_id": 158,
    "problem": {
      "task_id": 158,
      "text": "Write a python function to find k number of operations required to make all elements equal.",
      "code": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ",
      "test_list": [
        "assert min_Ops([2,2,2,2],4,3) == 0",
        "assert min_Ops([4,2,6,8],4,3) == -1",
        "assert min_Ops([21,33,9,45,63],5,6) == 24"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find k number of operations required to make all elements equal.\n\nTask ID: 158\n\nExpected behavior (test cases):\n1. min_Ops([2,2,2,2],4,3) should return 0\n2. min_Ops([4,2,6,8],4,3) should return -1\n3. min_Ops([21,33,9,45,63],5,6) should return 24\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max(x):\r\n    res = x[0]\r\n    for i in range(1, len(x)):\r\n        if x[i] > res:\r\n            res = x[i]\r\n    return res\r\n\r\ndef min_Ops(A,n,k):\r\n   # Your Code Here\r\n   res= sum((x-max(A))/k for x in A)\r\n   return int(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 235,
        "prompt_tokens": 168,
        "completion_tokens": 74
      }
    },
    "timestamp": 1752255763.3653522
  },
  {
    "mbpp_id": 159,
    "problem": {
      "task_id": 159,
      "text": "Write a function to print the season for the given month and day.",
      "code": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season",
      "test_list": [
        "assert month_season('January',4)==('winter')",
        "assert month_season('October',28)==('autumn')",
        "assert month_season('June',6)==('spring')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to print the season for the given month and day.\n\nTask ID: 159\n\nExpected behavior (test cases):\n1. month_season('January',4)==('winter')\n2. month_season('October',28)==('autumn')\n3. month_season('June',6)==('spring')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def month_season(month,days):\r\n  if (month=='March'or month =='April')and(days>=19):\r\n      return ('Spring')\r\n  elif (month == 'December'or month == 'January') and (days < 19):\r\n       return ('Winter')\r\n  elif (month == 'July' or month == 'August') and (days < 19):\r\n       return ('Summer')\r\n  else:\r\n        return ('Autumn')"
          }
        }
      ],
      "usage": {
        "total_tokens": 213,
        "prompt_tokens": 127,
        "completion_tokens": 93
      }
    },
    "timestamp": 1752255771.0056453
  },
  {
    "mbpp_id": 160,
    "problem": {
      "task_id": 160,
      "text": "Write a function to find x and y that satisfies ax + by = n.",
      "code": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ",
      "test_list": [
        "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
        "assert solution(4, 2, 7) == 'No solution'",
        "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find x and y that satisfies ax + by = n.\n\nTask ID: 160\n\nExpected behavior (test cases):\n1. solution(2, 3, 7) should return ('x = ', 2, ', y = ', 1)\n2. solution(4, 2, 7) should return 'No solution'\n3. solution(1, 13, 17) should return ('x = ', 4, ', y = ', 1)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef solution(a,b,n):\r\n    gcd = math.gcd(abs(a), abs(b))\r\n    if(gcd != abs(n)):\r\n        return('No solution')\r\n    elif((n % a == 0) or (n % b == 0)):\r\n        return('x = ', n // a ,', y = ', n // b)\r\n    else:\r\n        return('x = ', -n//a, ', y = ', -n//b)"
          }
        }
      ],
      "usage": {
        "total_tokens": 255,
        "prompt_tokens": 167,
        "completion_tokens": 95
      }
    },
    "timestamp": 1752255778.9351964
  },
  {
    "mbpp_id": 161,
    "problem": {
      "task_id": 161,
      "text": "Write a function to remove all elements from a given list present in another list.",
      "code": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result",
      "test_list": [
        "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
        "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
        "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove all elements from a given list present in another list.\n\nTask ID: 161\n\nExpected behavior (test cases):\n1. remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n2. remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\n3. remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_elements(list_one,list_two):\r\n    return [x for x in list_one if x not in list_two]"
          }
        }
      ],
      "usage": {
        "total_tokens": 290,
        "prompt_tokens": 273,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752255781.3812208
  },
  {
    "mbpp_id": 162,
    "problem": {
      "task_id": 162,
      "text": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
      "code": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)",
      "test_list": [
        "assert sum_series(6)==12",
        "assert sum_series(10)==30",
        "assert sum_series(9)==25"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\nTask ID: 162\n\nExpected behavior (test cases):\n1. sum_series(6)==12\n2. sum_series(10)==30\n3. sum_series(9)==25\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_series(n): \r\n    total = sum(x for x in range(n+1) if not x % 2)\r\n    return total"
          }
        }
      ],
      "usage": {
        "total_tokens": 159,
        "prompt_tokens": 137,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752255783.9167817
  },
  {
    "mbpp_id": 163,
    "problem": {
      "task_id": 163,
      "text": "Write a function to calculate the area of a regular polygon.",
      "code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area",
      "test_list": [
        "assert area_polygon(4,20)==400.00000000000006",
        "assert area_polygon(10,15)==1731.1969896610804",
        "assert area_polygon(9,7)==302.90938549487214"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the area of a regular polygon.\n\nTask ID: 163\n\nExpected behavior (test cases):\n1. area_polygon(4,20)==400.00000000000006\n2. area_polygon(10,15)==1731.1969896610804\n3. area_polygon(9,7)==302.90938549487214\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef area_polygon(sides,length):\r\n    import math\r\n    return sides * length ** 2 / (4 * math.tan(math.pi/sides))"
          }
        }
      ],
      "usage": {
        "total_tokens": 201,
        "prompt_tokens": 174,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752255786.958177
  },
  {
    "mbpp_id": 164,
    "problem": {
      "task_id": 164,
      "text": "Write a python function to check whether the sum of divisors are same or not.",
      "code": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ",
      "test_list": [
        "assert areEquivalent(36,57) == False",
        "assert areEquivalent(2,4) == False",
        "assert areEquivalent(23,47) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the sum of divisors are same or not.\n\nTask ID: 164\n\nExpected behavior (test cases):\n1. areEquivalent(36,57) should return False\n2. areEquivalent(2,4) should return False\n3. areEquivalent(23,47) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef areEquivalent(a,b):\r\n    if(sum([i for i in range(1,int(math.sqrt(b))+1)if b%i==0])==a and sum([i for i in range(1,int(math.sqrt(a))+1)if a%i==0])==b):\r\n        return 'True'\r\n    else:\r\n        return 'False'"
          }
        }
      ],
      "usage": {
        "total_tokens": 200,
        "prompt_tokens": 135,
        "completion_tokens": 72
      }
    },
    "timestamp": 1752255792.8445694
  },
  {
    "mbpp_id": 165,
    "problem": {
      "task_id": 165,
      "text": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
      "code": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ",
      "test_list": [
        "assert count_char_position(\"xbcefg\") == 2",
        "assert count_char_position(\"ABcED\") == 3",
        "assert count_char_position(\"AbgdeF\") == 5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\nTask ID: 165\n\nExpected behavior (test cases):\n1. count_char_position(\"xbcefg\") should return 2\n2. count_char_position(\"ABcED\") should return 3\n3. count_char_position(\"AbgdeF\") should return 5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_char_position(str1):\r\n    c = [str1[i:i+2] for i in range(0, len(str1), 2)]\r\n    ans = []\r\n    for j in c:\r\n        if((j[0].isupper() and j[1].isupper())or(j[0].islower() and j[1].islower())):\r\n            ans.append(1)\r\n        else:\r\n            ans.append(0)\r\n    return sum(ans)"
          }
        }
      ],
      "usage": {
        "total_tokens": 236,
        "prompt_tokens": 146,
        "completion_tokens": 97
      }
    },
    "timestamp": 1752255800.5138981
  },
  {
    "mbpp_id": 166,
    "problem": {
      "task_id": 166,
      "text": "Write a python function to count the pairs with xor as an even number.",
      "code": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ",
      "test_list": [
        "assert find_even_Pair([5,4,7,2,1],5) == 4",
        "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
        "assert find_even_Pair([1,2,3],3) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the pairs with xor as an even number.\n\nTask ID: 166\n\nExpected behavior (test cases):\n1. find_even_Pair([5,4,7,2,1],5) should return 4\n2. find_even_Pair([7,2,8,1,0,5,11],7) should return 9\n3. find_even_Pair([1,2,3],3) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_even_Pair(arr,n):\r\n    x = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if((arr[i]^arr[j])%2==0):\r\n                x+=1\r\n    return(x)"
          }
        }
      ],
      "usage": {
        "total_tokens": 210,
        "prompt_tokens": 163,
        "completion_tokens": 54
      }
    },
    "timestamp": 1752255805.1972432
  },
  {
    "mbpp_id": 167,
    "problem": {
      "task_id": 167,
      "text": "Write a python function to find smallest power of 2 greater than or equal to n.",
      "code": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ",
      "test_list": [
        "assert next_Power_Of_2(0) == 1",
        "assert next_Power_Of_2(5) == 8",
        "assert next_Power_Of_2(17) == 32"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find smallest power of 2 greater than or equal to n.\n\nTask ID: 167\n\nExpected behavior (test cases):\n1. next_Power_Of_2(0) should return 1\n2. next_Power_Of_2(5) should return 8\n3. next_Power_Of_2(17) should return 32\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def next_Power_Of_2(n):\r\n    if (n == 0): \r\n        return 1; \r\n  \r\n    p = int(math.log2(n)) + 1\r\n    return 2 ** p"
          }
        }
      ],
      "usage": {
        "total_tokens": 180,
        "prompt_tokens": 143,
        "completion_tokens": 44
      }
    },
    "timestamp": 1752255809.0211515
  },
  {
    "mbpp_id": 168,
    "problem": {
      "task_id": 168,
      "text": "Write a python function to find the frequency of a number in a given array.",
      "code": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ",
      "test_list": [
        "assert frequency([1,2,3],4) == 0",
        "assert frequency([1,2,2,3,3,3,4],3) == 3",
        "assert frequency([0,1,2,3,1,2],1) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the frequency of a number in a given array.\n\nTask ID: 168\n\nExpected behavior (test cases):\n1. frequency([1,2,3],4) should return 0\n2. frequency([1,2,2,3,3,3,4],3) should return 3\n3. frequency([0,1,2,3,1,2],1) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def frequency(test_list,n): \r\n    count = test_list.count(n) \r\n    return count "
          }
        }
      ],
      "usage": {
        "total_tokens": 169,
        "prompt_tokens": 156,
        "completion_tokens": 20
      }
    },
    "timestamp": 1752255811.0816944
  },
  {
    "mbpp_id": 169,
    "problem": {
      "task_id": 169,
      "text": "Write a function to calculate the nth pell number.",
      "code": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
      "test_list": [
        "assert get_pell(4) == 12",
        "assert get_pell(7) == 169",
        "assert get_pell(8) == 408"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the nth pell number.\n\nTask ID: 169\n\nExpected behavior (test cases):\n1. get_pell(4) should return 12\n2. get_pell(7) should return 169\n3. get_pell(8) should return 408\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_pell(n):\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        res = [0] * (n+1)\r\n        res[1] = 1\r\n        for i in range(2,n+1):\r\n            res[i]=2*res[i-1]+res[i-2]\r\n        return(res[n])"
          }
        }
      ],
      "usage": {
        "total_tokens": 209,
        "prompt_tokens": 130,
        "completion_tokens": 86
      }
    },
    "timestamp": 1752255818.3819869
  },
  {
    "mbpp_id": 170,
    "problem": {
      "task_id": 170,
      "text": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
      "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
      "test_list": [
        "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
        "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
        "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find sum of the numbers in a list between the indices of a specified range.\n\nTask ID: 170\n\nExpected behavior (test cases):\n1. sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n2. sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\n3. sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_range_list(list, start,end):\r\n  result = 0\r\n  for i in range(start-1,end+1):\r\n    result+=list[i]\r\n  return(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 250,
        "prompt_tokens": 220,
        "completion_tokens": 37
      }
    },
    "timestamp": 1752255821.5500963
  },
  {
    "mbpp_id": 171,
    "problem": {
      "task_id": 171,
      "text": "Write a function to find the perimeter of a pentagon.",
      "code": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter",
      "test_list": [
        "assert perimeter_pentagon(5)==25",
        "assert perimeter_pentagon(10)==50",
        "assert perimeter_pentagon(15)==75"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the perimeter of a pentagon.\n\nTask ID: 171\n\nExpected behavior (test cases):\n1. perimeter_pentagon(5)==25\n2. perimeter_pentagon(10)==50\n3. perimeter_pentagon(15)==75\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def perimeter_pentagon(n):\r\n    return n*5"
          }
        }
      ],
      "usage": {
        "total_tokens": 130,
        "prompt_tokens": 125,
        "completion_tokens": 12
      }
    },
    "timestamp": 1752255822.9803898
  },
  {
    "mbpp_id": 172,
    "problem": {
      "task_id": 172,
      "text": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
      "code": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count",
      "test_list": [
        "assert count_occurance(\"letstdlenstdporstd\") == 3",
        "assert count_occurance(\"truststdsolensporsd\") == 1",
        "assert count_occurance(\"makestdsostdworthit\") == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\nTask ID: 172\n\nExpected behavior (test cases):\n1. count_occurance(\"letstdlenstdporstd\") should return 3\n2. count_occurance(\"truststdsolensporsd\") should return 1\n3. count_occurance(\"makestdsostdworthit\") should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_occurance(string): \r\n    n = len(string) \r\n      \r\n    # loop will iterate from start index\r\n    for i in range(n - 4 + 1):  \r\n        if (string[i:i+4] == \"std\"):   \r\n            print(i)  # print starting index  of occurrence  of std\r\n            break   // Stop when all four occurances found "
          }
        }
      ],
      "usage": {
        "total_tokens": 256,
        "prompt_tokens": 182,
        "completion_tokens": 81
      }
    },
    "timestamp": 1752255829.7999694
  },
  {
    "mbpp_id": 173,
    "problem": {
      "task_id": 173,
      "text": "Write a function to remove everything except alphanumeric characters from a string.",
      "code": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))",
      "test_list": [
        "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
        "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
        "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove everything except alphanumeric characters from a string.\n\nTask ID: 173\n\nExpected behavior (test cases):\n1. remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n2. remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\n3. remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_splchar(s):\r\n  return ''.join(c for c in s if c.isalnum()) "
          }
        }
      ],
      "usage": {
        "total_tokens": 196,
        "prompt_tokens": 181,
        "completion_tokens": 22
      }
    },
    "timestamp": 1752255832.033852
  },
  {
    "mbpp_id": 174,
    "problem": {
      "task_id": 174,
      "text": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
      "code": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result",
      "test_list": [
        "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
        "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
        "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to group a sequence of key-value pairs into a dictionary of lists.\n\nTask ID: 174\n\nExpected behavior (test cases):\n1. group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n2. group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\n3. group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def group_keyvalue(keyvalue_pairs):\r\n  res={}\r\n  for k,v in keyvalue_pairs:\r\n    if not k in res:\r\n      res[k]=[]\r\n    res[k].append(v)\r\n  return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 319,
        "prompt_tokens": 282,
        "completion_tokens": 44
      }
    },
    "timestamp": 1752255836.0287468
  },
  {
    "mbpp_id": 175,
    "problem": {
      "task_id": 175,
      "text": "Write a function to verify validity of a string of parentheses.",
      "code": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0",
      "test_list": [
        "assert is_valid_parenthese(\"(){}[]\")==True",
        "assert is_valid_parenthese(\"()[{)}\")==False",
        "assert is_valid_parenthese(\"()\")==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to verify validity of a string of parentheses.\n\nTask ID: 175\n\nExpected behavior (test cases):\n1. is_valid_parenthese(\"(){}[]\")==True\n2. is_valid_parenthese(\"()[{)}\")==False\n3. is_valid_parenthese(\"()\")==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_valid_parenthese(s):\r\n    stack = []\r\n    for i in s:\r\n        if i == '(' or i == '{' or i == '[':\r\n            stack.append(i)\r\n        elif len(stack) > 0 and (i == ')' and stack[-1] == '('\r\n                                 ) or (i == '}' and stack[-1] == '{'\r\n                                       ) or (i == ']' and stack[-1] == '['):\r\n            stack.pop()\r\n        else:\r\n            return False\r\n    if len(stack) == 0:\r\n        return True\r\n    else:\r\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 241,
        "prompt_tokens": 127,
        "completion_tokens": 121
      }
    },
    "timestamp": 1752255845.6666348
  },
  {
    "mbpp_id": 176,
    "problem": {
      "task_id": 176,
      "text": "Write a function to find the perimeter of a triangle.",
      "code": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter",
      "test_list": [
        "assert perimeter_triangle(10,20,30)==60",
        "assert perimeter_triangle(3,4,5)==12",
        "assert perimeter_triangle(25,35,45)==105"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the perimeter of a triangle.\n\nTask ID: 176\n\nExpected behavior (test cases):\n1. perimeter_triangle(10,20,30)==60\n2. perimeter_triangle(3,4,5)==12\n3. perimeter_triangle(25,35,45)==105\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def perimeter_triangle(a,b,c): \r\n    p=a+b+c \r\n    return(p)"
          }
        }
      ],
      "usage": {
        "total_tokens": 146,
        "prompt_tokens": 135,
        "completion_tokens": 18
      }
    },
    "timestamp": 1752255847.5757346
  },
  {
    "mbpp_id": 177,
    "problem": {
      "task_id": 177,
      "text": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
      "code": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ",
      "test_list": [
        "assert answer(3,8) == (3,6)",
        "assert answer(2,6) == (2,4)",
        "assert answer(1,3) == (1,2)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find two distinct numbers such that their lcm lies within the given range.\n\nTask ID: 177\n\nExpected behavior (test cases):\n1. answer(3,8) should return (3,6)\n2. answer(2,6) should return (2,4)\n3. answer(1,3) should return (1,2)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def answer(lcm_range):\r\n    n = len(lcm_range)\r\n    for i in range(1,n+1):\r\n        if((lcm_range[i] % i == 0)):\r\n            m = lcm_range[i]\r\n    for j in range(i+1,n+1):\r\n        if((lcm_range[j] % j == 0)):\r\n            k = lcm_range[j]\r\n    lcm_list = [m,k]\r\n    l = sorted(lcm_list)\r\n    if (l[0]%i == 0 and l[0]%j == 0 and l[0]<=lcm_range[i]*lcm_range[j]):\r\n        res = tuple([i,j])\r\n    else:\r\n        res = ()\r\n    return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 281,
        "prompt_tokens": 139,
        "completion_tokens": 149
      }
    },
    "timestamp": 1752255859.8400483
  },
  {
    "mbpp_id": 178,
    "problem": {
      "task_id": 178,
      "text": "Write a function to search some literals strings in a string.",
      "code": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')",
      "test_list": [
        "assert string_literals(['language'],'python language')==('Matched!')",
        "assert string_literals(['program'],'python language')==('Not Matched!')",
        "assert string_literals(['python'],'programming language')==('Not Matched!')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to search some literals strings in a string.\n\nTask ID: 178\n\nExpected behavior (test cases):\n1. string_literals(['language'],'python language')==('Matched!')\n2. string_literals(['program'],'python language')==('Not Matched!')\n3. string_literals(['python'],'programming language')==('Not Matched!')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef string_literals(strings,literals):\r\n    for item in literals:\r\n        res = re.search(item,strings)\r\n        if(res!=None): \r\n            return \"Matched!\"\r\n    else:\r\n        return(\"Not Matched!\")"
          }
        }
      ],
      "usage": {
        "total_tokens": 174,
        "prompt_tokens": 132,
        "completion_tokens": 49
      }
    },
    "timestamp": 1752255864.1940138
  },
  {
    "mbpp_id": 179,
    "problem": {
      "task_id": 179,
      "text": "Write a function to find if the given number is a keith number or not.",
      "code": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ",
      "test_list": [
        "assert is_num_keith(14) == True",
        "assert is_num_keith(12) == False",
        "assert is_num_keith(197) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find if the given number is a keith number or not.\n\nTask ID: 179\n\nExpected behavior (test cases):\n1. is_num_keith(14) should return True\n2. is_num_keith(12) should return False\n3. is_num_keith(197) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_num_keith(n):\r\n    num = n\r\n    sum_n = 0\r\n    while (num > 0): \r\n        rem = num % 10\r\n        sum_n += rem * rem\r\n        num //= 10  \r\n    \r\n    flag = True\r\n    while (sum_n > 0): \r\n        rem = sum_n % 10 \r\n        sum_n //= 10  \r\n        if (n != (rem*rem + sum_n)):\r\n            flag = False  \r\n            break\r\n    \r\n    if (flag == True):\r\n        print(\"Keith Number\")\r\n    else:\r\n        print (\"Not Keith Number\") "
          }
        }
      ],
      "usage": {
        "total_tokens": 259,
        "prompt_tokens": 135,
        "completion_tokens": 131
      }
    },
    "timestamp": 1752255874.4680803
  },
  {
    "mbpp_id": 180,
    "problem": {
      "task_id": 180,
      "text": "Write a function to calculate distance between two points using latitude and longitude.",
      "code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist",
      "test_list": [
        "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
        "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
        "assert distance_lat_long(10,20,30,40)==6783.751974994595"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate distance between two points using latitude and longitude.\n\nTask ID: 180\n\nExpected behavior (test cases):\n1. distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n2. distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\n3. distance_lat_long(10,20,30,40)==6783.751974994595\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "from math import sin,cos,sqrt,atan2\r\ndef distance_lat_long(lat1,lon1,lat2,lon2):\r\n    R = 6373.0\r\n    dLat = lat2 - lat1\r\n    dLon = lon2 - lon1\r\n    a = sin(dLat / 2)**2 + cos(lat1) * cos(lat2) * sin(dLon / 2)**2\r\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\r\n    return(R * c)"
          }
        }
      ],
      "usage": {
        "total_tokens": 319,
        "prompt_tokens": 214,
        "completion_tokens": 112
      }
    },
    "timestamp": 1752255883.1794791
  },
  {
    "mbpp_id": 181,
    "problem": {
      "task_id": 181,
      "text": "Write a function to find the longest common prefix in the given set of strings.",
      "code": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ",
      "test_list": [
        "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
        "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
        "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the longest common prefix in the given set of strings.\n\nTask ID: 181\n\nExpected behavior (test cases):\n1. common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) should return 'ta'\n2. common_prefix([\"apples\", \"ape\", \"april\"], 3) should return 'ap'\n3. common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) should return 'teen'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def common_prefix(strs):\r\n    if not strs:\r\n        return ''\r\n    \r\n    shortest_str = min(strs, key=len)\r\n    for i, ch in enumerate(shortest_str):\r\n        for other in strs:\r\n            if other[i] != ch:\r\n                return shortest_str[:i]\r\n    return shortest_str "
          }
        }
      ],
      "usage": {
        "total_tokens": 222,
        "prompt_tokens": 166,
        "completion_tokens": 63
      }
    },
    "timestamp": 1752255888.5276818
  },
  {
    "mbpp_id": 182,
    "problem": {
      "task_id": 182,
      "text": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
      "code": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
      "test_list": [
        "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
        "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
        "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find uppercase, lowercase, special character and numeric values using regex.\n\nTask ID: 182\n\nExpected behavior (test cases):\n1. find_character(\"ThisIsGeeksforGeeks\") should return (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n2. find_character(\"Hithere2\") should return (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\n3. find_character(\"HeyFolks32\") should return (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef find_characters(test_str):\r\n    alpha = re.findall(\"[a-zA-Z]\", test_str)\r\n    digit = re.findall(\"[0-9]\", test_str)\r\n    special = re.findall(\"[^\\w]\", test_str)\r\n    charact = [alpha, digit, special]\r\n    return charact"
          }
        }
      ],
      "usage": {
        "total_tokens": 307,
        "prompt_tokens": 252,
        "completion_tokens": 62
      }
    },
    "timestamp": 1752255893.7660537
  },
  {
    "mbpp_id": 183,
    "problem": {
      "task_id": 183,
      "text": "Write a function to count all the distinct pairs having a difference of k in any array.",
      "code": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count",
      "test_list": [
        "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
        "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
        "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count all the distinct pairs having a difference of k in any array.\n\nTask ID: 183\n\nExpected behavior (test cases):\n1. count_pairs([1, 5, 3, 4, 2], 5, 3) should return 2\n2. count_pairs([8, 12, 16, 4, 0, 20], 6, 4) should return 5\n3. count_pairs([2, 4, 1, 3, 4], 5, 2) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_pairs(arr,k):\r\n    n = len(arr)\r\n    res = set()\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if abs(arr[i] - arr[j]) == k:\r\n                res.add((min(arr[i],arr[j]),max(arr[i],arr[j])))\r\n    return len(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 255,
        "prompt_tokens": 189,
        "completion_tokens": 73
      }
    },
    "timestamp": 1752255899.9595416
  },
  {
    "mbpp_id": 184,
    "problem": {
      "task_id": 184,
      "text": "Write a function to find all the values in a list that are greater than a specified number.",
      "code": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum",
      "test_list": [
        "assert greater_specificnum([220, 330, 500],200)==True",
        "assert greater_specificnum([12, 17, 21],20)==False",
        "assert greater_specificnum([1,2,3,4],10)==False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find all the values in a list that are greater than a specified number.\n\nTask ID: 184\n\nExpected behavior (test cases):\n1. greater_specificnum([220, 330, 500],200)==True\n2. greater_specificnum([12, 17, 21],20)==False\n3. greater_specificnum([1,2,3,4],10)==False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def greater_specificnum(list_1,special_num):\r\n    for i in range(len(list_1)):\r\n        if list_1[i] > special_num:\r\n            return True\r\n        else:\r\n            return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 196,
        "prompt_tokens": 161,
        "completion_tokens": 42
      }
    },
    "timestamp": 1752255903.5379245
  },
  {
    "mbpp_id": 185,
    "problem": {
      "task_id": 185,
      "text": "Write a function to find the focus of a parabola.",
      "code": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus",
      "test_list": [
        "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
        "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
        "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the focus of a parabola.\n\nTask ID: 185\n\nExpected behavior (test cases):\n1. parabola_focus(5,3,2)==(-0.3, 1.6)\n2. parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\n3. parabola_focus(2,4,6)==(-1.0, 4.125)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def parabola_focus(a,b,c):\r\n   return ((-b/a),(-c/b))"
          }
        }
      ],
      "usage": {
        "total_tokens": 188,
        "prompt_tokens": 175,
        "completion_tokens": 20
      }
    },
    "timestamp": 1752255905.830205
  },
  {
    "mbpp_id": 186,
    "problem": {
      "task_id": 186,
      "text": "Write a function to search some literals strings in a string by using regex.",
      "code": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')",
      "test_list": [
        "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
        "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
        "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to search some literals strings in a string by using regex.\n\nTask ID: 186\n\nExpected behavior (test cases):\n1. check_literals('The quick brown fox jumps over the lazy dog.',['fox']) should return 'Matched!'\n2. check_literals('The quick brown fox jumps over the lazy dog.',['horse']) should return 'Not Matched!'\n3. check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) should return 'Matched!'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef check_literals(s,literals):\r\n    pattern = '|'.join(map(re.escape, literals))\r\n    result = re.findall(pattern, s)\r\n    if len(result) > 0:\r\n        return 'Matched!'\r\n    else:\r\n        return 'Not Matched!'"
          }
        }
      ],
      "usage": {
        "total_tokens": 214,
        "prompt_tokens": 164,
        "completion_tokens": 57
      }
    },
    "timestamp": 1752255910.7099342
  },
  {
    "mbpp_id": 187,
    "problem": {
      "task_id": 187,
      "text": "Write a function to find the longest common subsequence for the given two sequences.",
      "code": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
      "test_list": [
        "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
        "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
        "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the longest common subsequence for the given two sequences.\n\nTask ID: 187\n\nExpected behavior (test cases):\n1. longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) should return 4\n2. longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) should return 3\n3. longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def longest_common_subsequence(X, Y): \r\n\tm = len(X) \r\n\tn = len(Y) \r\n\r\n\tL = [[None]*(n + 1) for i in range(m + 1)] \r\n\r\n\tfor i in range(m + 1): \r\n\t\tfor j in range(n + 1): \r\n\t\t\tif i == 0 or j == 0 : \r\n\t\t\t\tL[i][j] = 0\r\n\t\t\telif X[i-1] == Y[j-1]: \r\n\t\t\t\tL[i][j] = L[i - 1][j - 1]+1\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i - 1][j], L[i][j - 1]) \r\n\r\n\treturn L[m][n]"
          }
        }
      ],
      "usage": {
        "total_tokens": 324,
        "prompt_tokens": 176,
        "completion_tokens": 155
      }
    },
    "timestamp": 1752255923.25765
  },
  {
    "mbpp_id": 188,
    "problem": {
      "task_id": 188,
      "text": "Write a python function to check whether the given number can be represented by product of two squares or not.",
      "code": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;",
      "test_list": [
        "assert prod_Square(25) == False",
        "assert prod_Square(30) == False",
        "assert prod_Square(16) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given number can be represented by product of two squares or not.\n\nTask ID: 188\n\nExpected behavior (test cases):\n1. prod_Square(25) should return False\n2. prod_Square(30) should return False\n3. prod_Square(16) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def prod_Square(n):\r\n    sqrt = int(sqrt(n))\r\n    for i in range(0,sqrt+1):\r\n        if (i*i == n):\r\n            return(True)\r\n    else:\r\n        return(False)"
          }
        }
      ],
      "usage": {
        "total_tokens": 172,
        "prompt_tokens": 135,
        "completion_tokens": 44
      }
    },
    "timestamp": 1752255927.1030078
  },
  {
    "mbpp_id": 189,
    "problem": {
      "task_id": 189,
      "text": "Write a python function to find the first missing positive number.",
      "code": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)",
      "test_list": [
        "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
        "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
        "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the first missing positive number.\n\nTask ID: 189\n\nExpected behavior (test cases):\n1. first_Missing_Positive([1,2,3,-1,5],5) should return 4\n2. first_Missing_Positive([0,-1,-2,1,5,8],6) should return 2\n3. first_Missing_Positive([0,1,2,5,-8],5) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def first_Missing_Positive(arr,N): \r\n\tfor i in range(0, N+1): \r\n\t\tarr[i] = -1 * arr[i] \r\n\r\n\tsorted_arr = sorted(arr) \r\n\r\n\tresult = [] \r\n\tj = 0\r\n\tfor i in range(N + 1): \r\n\t\tif(sorted_arr[i]>0 and j==sorted_arr[i]): \r\n\t\t\tresult.append(j) \r\n\t\t\tj += 1\r\n\r\n\treturn result[0] if len(result) == 0 else result[-1]"
          }
        }
      ],
      "usage": {
        "total_tokens": 262,
        "prompt_tokens": 164,
        "completion_tokens": 105
      }
    },
    "timestamp": 1752255935.6558073
  },
  {
    "mbpp_id": 190,
    "problem": {
      "task_id": 190,
      "text": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
      "code": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",
      "test_list": [
        "assert count_Intgral_Points(1,1,4,4) == 4",
        "assert count_Intgral_Points(1,2,1,2) == 1",
        "assert count_Intgral_Points(4,2,6,4) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the number of integral co-ordinates that lie inside a square.\n\nTask ID: 190\n\nExpected behavior (test cases):\n1. count_Intgral_Points(1,1,4,4) should return 4\n2. count_Intgral_Points(1,2,1,2) should return 1\n3. count_Intgral_Points(4,2,6,4) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_Intgral_Points(x1,y1,x2,y2):\r\n    # Calculate length and width\r\n    length = abs(y2 - y1)\r\n    width = abs(x2 - x1)\r\n    \r\n    # Initialize result\r\n    res = 0\r\n    \r\n    # Iterate through each point on grid\r\n    for i in range(length+1):\r\n        for j in range(width+1):\r\n            if(i*i + j*j <= (length/2)*(length/2) + (width/2)*(width/2)):\r\n                res += 1\r\n            \r\n    return res"
          }
        }
      ],
      "usage": {
        "total_tokens": 271,
        "prompt_tokens": 160,
        "completion_tokens": 118
      }
    },
    "timestamp": 1752255945.3291192
  },
  {
    "mbpp_id": 191,
    "problem": {
      "task_id": 191,
      "text": "Write a function to check whether the given month name contains 30 days or not.",
      "code": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False",
      "test_list": [
        "assert check_monthnumber(\"February\")==False",
        "assert check_monthnumber(\"June\")==True",
        "assert check_monthnumber(\"April\")==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given month name contains 30 days or not.\n\nTask ID: 191\n\nExpected behavior (test cases):\n1. check_monthnumber(\"February\")==False\n2. check_monthnumber(\"June\")==True\n3. check_monthnumber(\"April\")==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_monthnumber(monthname):\r\n    if monthname in (\"April\", \"June\", \"September\", \"November\"):\r\n        return True\r\n    else:\r\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 150,
        "prompt_tokens": 123,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752255948.548571
  },
  {
    "mbpp_id": 192,
    "problem": {
      "task_id": 192,
      "text": "Write a python function to check whether a string has atleast one letter and one number.",
      "code": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ",
      "test_list": [
        "assert check_String('thishasboth29') == True",
        "assert check_String('python') == False",
        "assert check_String ('string') == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether a string has atleast one letter and one number.\n\nTask ID: 192\n\nExpected behavior (test cases):\n1. check_String('thishasboth29') should return True\n2. check_String('python') should return False\n3. check_String ('string') should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef check_string(test_str):\r\n  if(re.search(\"[a-zA-Z]\", test_str) and \r\n      re.search(\"[0-9]\", test_str)):\r\n    return(\"True\")\r\n  else:\r\n    return(\"False\") "
          }
        }
      ],
      "usage": {
        "total_tokens": 170,
        "prompt_tokens": 129,
        "completion_tokens": 48
      }
    },
    "timestamp": 1752255952.7682884
  },
  {
    "mbpp_id": 193,
    "problem": {
      "task_id": 193,
      "text": "Write a function to remove the duplicates from the given tuple.",
      "code": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ",
      "test_list": [
        "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
        "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
        "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove the duplicates from the given tuple.\n\nTask ID: 193\n\nExpected behavior (test cases):\n1. remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) should return (1, 2, 3, 5)\n2. remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) should return (2, 3, 4, 5, 6, 7, 8)\n3. remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) should return (11, 12, 13, 14)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_duplicates(test_tup):\r\n    res = []\r\n    for num in test_tup:\r\n        if num not in res:\r\n            res.append(num)\r\n    return tuple(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 272,
        "prompt_tokens": 243,
        "completion_tokens": 36
      }
    },
    "timestamp": 1752255956.0738735
  },
  {
    "mbpp_id": 194,
    "problem": {
      "task_id": 194,
      "text": "Write a python function to convert octal number to decimal number.",
      "code": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
      "test_list": [
        "assert octal_To_Decimal(25) == 21",
        "assert octal_To_Decimal(30) == 24",
        "assert octal_To_Decimal(40) == 32"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to convert octal number to decimal number.\n\nTask ID: 194\n\nExpected behavior (test cases):\n1. octal_To_Decimal(25) should return 21\n2. octal_To_Decimal(30) should return 24\n3. octal_To_Decimal(40) should return 32\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def octal_To_Decimal(n):\r\n    decimal = int(str(n),8)\r\n    return(decimal)"
          }
        }
      ],
      "usage": {
        "total_tokens": 153,
        "prompt_tokens": 139,
        "completion_tokens": 21
      }
    },
    "timestamp": 1752255958.1738088
  },
  {
    "mbpp_id": 195,
    "problem": {
      "task_id": 195,
      "text": "Write a python function to find the first position of an element in a sorted array.",
      "code": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res",
      "test_list": [
        "assert first([1,2,3,4,5,6,6],6,6) == 5",
        "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
        "assert first([1,2,3],1,3) == 0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the first position of an element in a sorted array.\n\nTask ID: 195\n\nExpected behavior (test cases):\n1. first([1,2,3,4,5,6,6],6,6) should return 5\n2. first([1,2,2,2,3,2,2,4,2],2,9) should return 1\n3. first([1,2,3],1,3) should return 0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def first(nums, target, start):\r\n    if len(nums) == 0:\r\n        return -1\r\n\r\n    index = -1\r\n    end = len(nums)\r\n    while(start < end):\r\n        mid = int((start + end)/2)\r\n        if nums[mid] >= target:\r\n            end = mid \r\n        else:\r\n            start = mid+1\r\n\r\n    return start "
          }
        }
      ],
      "usage": {
        "total_tokens": 240,
        "prompt_tokens": 169,
        "completion_tokens": 78
      }
    },
    "timestamp": 1752255964.8618412
  },
  {
    "mbpp_id": 196,
    "problem": {
      "task_id": 196,
      "text": "Write a function to remove all the tuples with length k.",
      "code": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ",
      "test_list": [
        "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
        "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
        "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove all the tuples with length k.\n\nTask ID: 196\n\nExpected behavior (test cases):\n1. remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) should return [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n2. remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) should return [(1, 2, 3), (3, 4, 6, 7)]\n3. remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) should return [(4, 3), (1,)]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_tuples(test_list, test_k):\r\n  result = []\r\n  for i in test_list:\r\n    if len(i)==test_k :\r\n      continue\r\n    else:\r\n      result.append(i)\r\n  return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 320,
        "prompt_tokens": 285,
        "completion_tokens": 42
      }
    },
    "timestamp": 1752255968.6681187
  },
  {
    "mbpp_id": 197,
    "problem": {
      "task_id": 197,
      "text": "Write a function to perform the exponentiation of the given two tuples.",
      "code": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n",
      "test_list": [
        "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
        "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
        "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to perform the exponentiation of the given two tuples.\n\nTask ID: 197\n\nExpected behavior (test cases):\n1. find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) should return (100000, 4096, 78125, 7776)\n2. find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) should return (1771561, 78125, 1679616, 117649)\n3. find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) should return (35831808, 1679616, 40353607, 2097152)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_exponentio(a,b):\r\n    for i in range(0,len(a)):\r\n        b[i]=a[i]**b[i]\r\n    return(b)"
          }
        }
      ],
      "usage": {
        "total_tokens": 311,
        "prompt_tokens": 286,
        "completion_tokens": 32
      }
    },
    "timestamp": 1752255971.8930535
  },
  {
    "mbpp_id": 198,
    "problem": {
      "task_id": 198,
      "text": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
      "code": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ",
      "test_list": [
        "assert largest_triangle(4,2)==10.392304845413264",
        "assert largest_triangle(5,7)==4.639421805988064",
        "assert largest_triangle(9,1)==105.2220865598093"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the largest triangle that can be inscribed in an ellipse.\n\nTask ID: 198\n\nExpected behavior (test cases):\n1. largest_triangle(4,2)==10.392304845413264\n2. largest_triangle(5,7)==4.639421805988064\n3. largest_triangle(9,1)==105.2220865598093\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef largest_triangle(a,b):\r\n    h = ((a**2)*(math.sqrt((b**2)+(a**2))))/((a+b)**2)\r\n    return(h)"
          }
        }
      ],
      "usage": {
        "total_tokens": 206,
        "prompt_tokens": 174,
        "completion_tokens": 39
      }
    },
    "timestamp": 1752255975.4149456
  },
  {
    "mbpp_id": 199,
    "problem": {
      "task_id": 199,
      "text": "Write a python function to find highest power of 2 less than or equal to given number.",
      "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ",
      "test_list": [
        "assert highest_Power_of_2(10) == 8",
        "assert highest_Power_of_2(19) == 16",
        "assert highest_Power_of_2(32) == 32"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find highest power of 2 less than or equal to given number.\n\nTask ID: 199\n\nExpected behavior (test cases):\n1. highest_Power_of_2(10) should return 8\n2. highest_Power_of_2(19) should return 16\n3. highest_Power_of_2(32) should return 32\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def highest_Power_of_2(n):\r\n    x = int(math.log(n , 2))\r\n    y = 2 ** x\r\n    return y"
          }
        }
      ],
      "usage": {
        "total_tokens": 171,
        "prompt_tokens": 147,
        "completion_tokens": 31
      }
    },
    "timestamp": 1752255978.3480237
  },
  {
    "mbpp_id": 200,
    "problem": {
      "task_id": 200,
      "text": "Write a function to find all index positions of the maximum values in a given list.",
      "code": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result",
      "test_list": [
        "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
        "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
        "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find all index positions of the maximum values in a given list.\n\nTask ID: 200\n\nExpected behavior (test cases):\n1. position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n2. position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\n3. position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def position_max(list): \r\n    max_index = [i for i , val in enumerate(max(list))] \r\n    return max_index"
          }
        }
      ],
      "usage": {
        "total_tokens": 232,
        "prompt_tokens": 213,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752255981.0382934
  },
  {
    "mbpp_id": 201,
    "problem": {
      "task_id": 201,
      "text": "Write a python function to check whether the elements in a list are same or not.",
      "code": "def chkList(lst): \r\n    return len(set(lst)) == 1",
      "test_list": [
        "assert chkList(['one','one','one']) == True",
        "assert chkList(['one','Two','Three']) == False",
        "assert chkList(['bigdata','python','Django']) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the elements in a list are same or not.\n\nTask ID: 201\n\nExpected behavior (test cases):\n1. chkList(['one','one','one']) should return True\n2. chkList(['one','Two','Three']) should return False\n3. chkList(['bigdata','python','Django']) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def chkList(lst):\r\n    for i in range(len(lst)):\r\n        if lst.count(lst[i]) == len(lst):\r\n            return True\r\n    else:\r\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 166,
        "prompt_tokens": 139,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752255984.2365491
  },
  {
    "mbpp_id": 202,
    "problem": {
      "task_id": 202,
      "text": "Write a function to remove even characters in a string.",
      "code": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
      "test_list": [
        "assert remove_even(\"python\")==(\"pto\")",
        "assert remove_even(\"program\")==(\"porm\")",
        "assert remove_even(\"language\")==(\"lnug\")"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove even characters in a string.\n\nTask ID: 202\n\nExpected behavior (test cases):\n1. remove_even(\"python\")==(\"pto\")\n2. remove_even(\"program\")==(\"porm\")\n3. remove_even(\"language\")==(\"lnug\")\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_even(string): \r\n    result = \"\" \r\n    for i in range(0,len(string)): \r\n        if(i % 2 != 0):\r\n            result = result + string[i] \r\n    return result "
          }
        }
      ],
      "usage": {
        "total_tokens": 156,
        "prompt_tokens": 118,
        "completion_tokens": 45
      }
    },
    "timestamp": 1752255988.3794904
  },
  {
    "mbpp_id": 203,
    "problem": {
      "task_id": 203,
      "text": "Write a python function to find the hamming distance between given two integers.",
      "code": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ",
      "test_list": [
        "assert hamming_Distance(4,8) == 2",
        "assert hamming_Distance(2,4) == 2",
        "assert hamming_Distance(1,2) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the hamming distance between given two integers.\n\nTask ID: 203\n\nExpected behavior (test cases):\n1. hamming_Distance(4,8) should return 2\n2. hamming_Distance(2,4) should return 2\n3. hamming_Distance(1,2) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def hamming_Distance(x,y):\r\n    if x > y:\r\n        z = x\r\n        x = y\r\n        y = z\r\n    count = 0\r\n    while x != 0 :\r\n        if ((x & y) == 0 ):\r\n            count += 1\r\n        y = y >> 1\r\n        x = x >> 1\r\n    return(count)"
          }
        }
      ],
      "usage": {
        "total_tokens": 211,
        "prompt_tokens": 138,
        "completion_tokens": 80
      }
    },
    "timestamp": 1752255994.9917371
  },
  {
    "mbpp_id": 204,
    "problem": {
      "task_id": 204,
      "text": "Write a python function to count the occurrence of a given character in a string.",
      "code": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ",
      "test_list": [
        "assert count(\"abcc\",\"c\") == 2",
        "assert count(\"ababca\",\"a\") == 3",
        "assert count(\"mnmm0pm\",\"m\") == 4"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the occurrence of a given character in a string.\n\nTask ID: 204\n\nExpected behavior (test cases):\n1. count(\"abcc\",\"c\") should return 2\n2. count(\"ababca\",\"a\") should return 3\n3. count(\"mnmm0pm\",\"m\") should return 4\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count(str1,ch):\r\n  c=0\r\n  for i in str1:\r\n    if(i==ch):\r\n      c+=1\r\n  return(c)"
          }
        }
      ],
      "usage": {
        "total_tokens": 162,
        "prompt_tokens": 136,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752255997.9612343
  },
  {
    "mbpp_id": 205,
    "problem": {
      "task_id": 205,
      "text": "Write a function to find the inversions of tuple elements in the given tuple list.",
      "code": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ",
      "test_list": [
        "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
        "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
        "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the inversions of tuple elements in the given tuple list.\n\nTask ID: 205\n\nExpected behavior (test cases):\n1. inversion_elements((7, 8, 9, 1, 10, 7)) should return (-8, -9, -10, -2, -11, -8)\n2. inversion_elements((2, 4, 5, 6, 1, 7)) should return (-3, -5, -6, -7, -2, -8)\n3. inversion_elements((8, 9, 11, 14, 12, 13)) should return (-9, -10, -12, -15, -13, -14)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def inversion_elements(tuples):\r\n    result = []\r\n    for i in range(len(tuples)):\r\n        count = 0\r\n        for j in tuples:\r\n            if j < tuples[i]:\r\n                count += 1\r\n        result.append(count)\r\n    return(tuple(result))"
          }
        }
      ],
      "usage": {
        "total_tokens": 277,
        "prompt_tokens": 230,
        "completion_tokens": 54
      }
    },
    "timestamp": 1752256002.6307034
  },
  {
    "mbpp_id": 206,
    "problem": {
      "task_id": 206,
      "text": "Write a function to perform the adjacent element concatenation in the given tuples.",
      "code": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
      "test_list": [
        "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
        "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
        "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to perform the adjacent element concatenation in the given tuples.\n\nTask ID: 206\n\nExpected behavior (test cases):\n1. concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) should return ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n2. concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) should return ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\n3. concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) should return ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def concatenate_elements(test_tup):\r\n    res = []\r\n    for i in range(len(test_tup)):\r\n        if(i%2 == 0):\r\n            s = test_tup[i] + \" \"\r\n        else:\r\n            s = test_tup[i]\r\n        res.append(s)\r\n    return tuple(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 287,
        "prompt_tokens": 232,
        "completion_tokens": 62
      }
    },
    "timestamp": 1752256007.8678055
  },
  {
    "mbpp_id": 207,
    "problem": {
      "task_id": 207,
      "text": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
      "code": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]",
      "test_list": [
        "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
        "assert find_longest_repeating_subseq(\"aabb\") == 2",
        "assert find_longest_repeating_subseq(\"aab\") == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\nTask ID: 207\n\nExpected behavior (test cases):\n1. find_longest_repeating_subseq(\"AABEBCDD\") should return 3\n2. find_longest_repeating_subseq(\"aabb\") should return 2\n3. find_longest_repeating_subseq(\"aab\") should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "from collections import Counter\r\ndef find_longest_repeating_subseq(text):\r\n    n = len(text)\r\n    lps = [0] * n \r\n    prev_index = -1\r\n    i = 1\r\n\r\n    while(i < n):\r\n        if text[i] == text[prev_index]:\r\n            prev_index += 1\r\n            lps[i] = prev_index + 1\r\n            i += 1\r\n        else:\r\n            if(prev_index == -1):\r\n                lps[i] = 0\r\n                i += 1\r\n            else:\r\n                prev_index = lps[prev_index]\r\n    max_len = 0\r\n    \r\n    for i in range(n):\r\n        max_len = max(max_len , min(len(text) - i , lps[i]))\r\n\r\n    return max_len"
          }
        }
      ],
      "usage": {
        "total_tokens": 313,
        "prompt_tokens": 157,
        "completion_tokens": 163
      }
    },
    "timestamp": 1752256020.7303257
  },
  {
    "mbpp_id": 208,
    "problem": {
      "task_id": 208,
      "text": "Write a function to check the given decimal with a precision of 2 by using regex.",
      "code": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)",
      "test_list": [
        "assert is_decimal('123.11') == True",
        "assert is_decimal('0.21') == True",
        "assert is_decimal('123.1214') == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check the given decimal with a precision of 2 by using regex.\n\nTask ID: 208\n\nExpected behavior (test cases):\n1. is_decimal('123.11') should return True\n2. is_decimal('0.21') should return True\n3. is_decimal('123.1214') should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef is_decimal(string):\r\n        if len(re.findall(r'[^\\d.-]', string)) == 0:\r\n                return True\r\n        else:\r\n                return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 169,
        "prompt_tokens": 141,
        "completion_tokens": 35
      }
    },
    "timestamp": 1752256024.4522998
  },
  {
    "mbpp_id": 209,
    "problem": {
      "task_id": 209,
      "text": "Write a function to delete the smallest element from the given heap and then insert a new item.",
      "code": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap",
      "test_list": [
        "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
        "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
        "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to delete the smallest element from the given heap and then insert a new item.\n\nTask ID: 209\n\nExpected behavior (test cases):\n1. heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n2. heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\n3. heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def heap_replace(heap,a):\r\n    heap.append(a)\r\n    i = len(heap)-1\r\n    while ((i-1)//2 >= 0 ):\r\n        parent = int((i - 1) / 2)\r\n        if (heap[i] < heap[parent]):\r\n            temp = heap[i]\r\n            heap[i] = heap[parent]\r\n            heap[parent] = temp\r\n            i = parent\r\n        else :\r\n            break\r\n    return heap"
          }
        }
      ],
      "usage": {
        "total_tokens": 372,
        "prompt_tokens": 288,
        "completion_tokens": 91
      }
    },
    "timestamp": 1752256031.896477
  },
  {
    "mbpp_id": 210,
    "problem": {
      "task_id": 210,
      "text": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
      "code": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)",
      "test_list": [
        "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
        "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
        "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\nTask ID: 210\n\nExpected behavior (test cases):\n1. is_allowed_specific_char(\"ABCDEFabcdef123450\") should return True\n2. is_allowed_specific_char(\"*&%@#!}{\") should return False\n3. is_allowed_specific_char(\"HELLOhowareyou98765\") should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef is_allowed_specific_char(string):\r\n        if bool(re.search(\"[^a-zA-Z0-9]\",string)):\r\n                return(False)\r\n        else:\r\n                return(True)"
          }
        }
      ],
      "usage": {
        "total_tokens": 198,
        "prompt_tokens": 168,
        "completion_tokens": 37
      }
    },
    "timestamp": 1752256035.0872147
  },
  {
    "mbpp_id": 211,
    "problem": {
      "task_id": 211,
      "text": "Write a python function to count numbers whose oth and nth bits are set.",
      "code": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ",
      "test_list": [
        "assert count_Num(2) == 1",
        "assert count_Num(3) == 2",
        "assert count_Num(1) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count numbers whose oth and nth bits are set.\n\nTask ID: 211\n\nExpected behavior (test cases):\n1. count_Num(2) should return 1\n2. count_Num(3) should return 2\n3. count_Num(1) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_Num(o,n):\r\n    x = (1 << n) - 1\r\n    if ((x & (1 << o)) != 0):\r\n        print(\"Number of even integers between\",o,\"and\",n, \"is \",(x-o+1)//2)\r\n        return 0\r\n    else:\r\n        print(\"Number of odd integers between\",o,\"and\",n, \"is \",((n-o+1)*(n-o+2)/2-(x-o+1))/2 )\r\n        return 1"
          }
        }
      ],
      "usage": {
        "total_tokens": 228,
        "prompt_tokens": 127,
        "completion_tokens": 108
      }
    },
    "timestamp": 1752256043.702889
  },
  {
    "mbpp_id": 212,
    "problem": {
      "task_id": 212,
      "text": "Write a python function to find the sum of fourth power of n natural numbers.",
      "code": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum",
      "test_list": [
        "assert fourth_Power_Sum(2) == 17",
        "assert fourth_Power_Sum(4) == 354",
        "assert fourth_Power_Sum(6) == 2275"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of fourth power of n natural numbers.\n\nTask ID: 212\n\nExpected behavior (test cases):\n1. fourth_Power_Sum(2) should return 17\n2. fourth_Power_Sum(4) should return 354\n3. fourth_Power_Sum(6) should return 2275\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def fourth_Power_Sum(n):\r\n    Sum = ((n * (n + 1)) // 2)**4\r\n    return int(Sum)"
          }
        }
      ],
      "usage": {
        "total_tokens": 167,
        "prompt_tokens": 142,
        "completion_tokens": 32
      }
    },
    "timestamp": 1752256046.738049
  },
  {
    "mbpp_id": 213,
    "problem": {
      "task_id": 213,
      "text": "Write a function to perform the concatenation of two string tuples.",
      "code": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "test_list": [
        "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
        "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
        "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to perform the concatenation of two string tuples.\n\nTask ID: 213\n\nExpected behavior (test cases):\n1. concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) should return ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n2. concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) should return ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n3. concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) should return ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def concatenate_strings(a,b): \r\n    c = tuple(zip(a, b))  \r\n    d = list(c) \r\n    e = tuple(d) \r\n    return(e) "
          }
        }
      ],
      "usage": {
        "total_tokens": 275,
        "prompt_tokens": 246,
        "completion_tokens": 36
      }
    },
    "timestamp": 1752256049.9889834
  },
  {
    "mbpp_id": 214,
    "problem": {
      "task_id": 214,
      "text": "Write a function to convert radians to degrees.",
      "code": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
      "test_list": [
        "assert degree_radian(90)==5156.620156177409",
        "assert degree_radian(60)==3437.746770784939",
        "assert degree_radian(120)==6875.493541569878"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert radians to degrees.\n\nTask ID: 214\n\nExpected behavior (test cases):\n1. degree_radian(90)==5156.620156177409\n2. degree_radian(60)==3437.746770784939\n3. degree_radian(120)==6875.493541569878\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef degree_radian(radians):\r\n    return math.degrees(radians)"
          }
        }
      ],
      "usage": {
        "total_tokens": 177,
        "prompt_tokens": 166,
        "completion_tokens": 18
      }
    },
    "timestamp": 1752256051.9420772
  },
  {
    "mbpp_id": 215,
    "problem": {
      "task_id": 215,
      "text": "Write a function to decode a run-length encoded given list.",
      "code": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]",
      "test_list": [
        "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
        "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
        "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to decode a run-length encoded given list.\n\nTask ID: 215\n\nExpected behavior (test cases):\n1. decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n2. decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\n3. decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def decode_list(rle):\r\n    output = []\r\n    for item in rle:\r\n        if type(item) is int:\r\n            for _ in range(0, item):\r\n                output.append(item)\r\n        else:\r\n            output += [item]\r\n    return(output)"
          }
        }
      ],
      "usage": {
        "total_tokens": 301,
        "prompt_tokens": 255,
        "completion_tokens": 53
      }
    },
    "timestamp": 1752256056.5181422
  },
  {
    "mbpp_id": 216,
    "problem": {
      "task_id": 216,
      "text": "Write a function to check if a nested list is a subset of another nested list.",
      "code": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ",
      "test_list": [
        "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
        "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
        "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if a nested list is a subset of another nested list.\n\nTask ID: 216\n\nExpected behavior (test cases):\n1. check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n2. check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\n3. check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_subset_list(lst1, lst2):\r\n    return all(element in lst2 for element in lst1) "
          }
        }
      ],
      "usage": {
        "total_tokens": 294,
        "prompt_tokens": 277,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752256059.07665
  },
  {
    "mbpp_id": 217,
    "problem": {
      "task_id": 217,
      "text": "Write a python function to find the first repeated character in a given string.",
      "code": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'",
      "test_list": [
        "assert first_Repeated_Char(\"Google\") == \"o\"",
        "assert first_Repeated_Char(\"data\") == \"a\"",
        "assert first_Repeated_Char(\"python\") == '\\0'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the first repeated character in a given string.\n\nTask ID: 217\n\nExpected behavior (test cases):\n1. first_Repeated_Char(\"Google\") should return \"o\"\n2. first_Repeated_Char(\"data\") should return \"a\"\n3. first_Repeated_Char(\"python\") should return '\\0'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def first_Repeated_Char(str):\r\n    dict = {}\r\n    for i in str:\r\n        if i in dict.keys():\r\n            return i\r\n        else:\r\n            dict[i] = 1\r\n    return '\\0'"
          }
        }
      ],
      "usage": {
        "total_tokens": 169,
        "prompt_tokens": 132,
        "completion_tokens": 44
      }
    },
    "timestamp": 1752256062.8157914
  },
  {
    "mbpp_id": 218,
    "problem": {
      "task_id": 218,
      "text": "Write a python function to find the minimum operations required to make two numbers equal.",
      "code": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1",
      "test_list": [
        "assert min_Operations(2,4) == 1",
        "assert min_Operations(4,10) == 4",
        "assert min_Operations(1,4) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the minimum operations required to make two numbers equal.\n\nTask ID: 218\n\nExpected behavior (test cases):\n1. min_Operations(2,4) should return 1\n2. min_Operations(4,10) should return 4\n3. min_Operations(1,4) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def min_Operations(x, y):\r\n    x = abs(x)\r\n    y = abs(y)\r\n\r\n    # if both x and y are odd then we need\r\n    # (x - 1)/2 + (y - 1)/2 extra operations for subtraction\r\n    if ((x % 2 == 1) and (y % 2 == 1)):\r\n        x -= 1\r\n        y -= 1\r\n\r\n    while (x != y):\r\n\r\n        # if x is greater than y, subtract x-y\r\n        if (x > y):\r\n            x = x - y\r\n\r\n        else:\r\n            y = y - x\r\n\r\n    return (x) "
          }
        }
      ],
      "usage": {
        "total_tokens": 272,
        "prompt_tokens": 140,
        "completion_tokens": 139
      }
    },
    "timestamp": 1752256073.9731987
  },
  {
    "mbpp_id": 219,
    "problem": {
      "task_id": 219,
      "text": "Write a function to extract maximum and minimum k elements in the given tuple.",
      "code": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ",
      "test_list": [
        "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
        "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
        "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract maximum and minimum k elements in the given tuple.\n\nTask ID: 219\n\nExpected behavior (test cases):\n1. extract_min_max((5, 20, 3, 7, 6, 8), 2) should return (3, 5, 8, 20)\n2. extract_min_max((4, 5, 6, 1, 2, 7), 3) should return (1, 2, 4, 5, 6, 7)\n3. extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) should return (2, 3, 4, 7, 8, 9, 11)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def extract_min_max(test_tup, n):\r\n    res = [float('-inf'), float('inf')]\r\n    for i in test_tup:\r\n        if i < res[0]:\r\n            res[1] = res[0]\r\n            res[0] = i\r\n        elif i > res[1]:\r\n            res[1] = i\r\n    result = sorted(list(set(res)))\r\n    return result[n - 1:] + [result[-n]]+ list(result[:n-1]) "
          }
        }
      ],
      "usage": {
        "total_tokens": 329,
        "prompt_tokens": 232,
        "completion_tokens": 104
      }
    },
    "timestamp": 1752256082.2162592
  },
  {
    "mbpp_id": 220,
    "problem": {
      "task_id": 220,
      "text": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
      "code": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))",
      "test_list": [
        "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
        "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
        "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\nTask ID: 220\n\nExpected behavior (test cases):\n1. replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n2. replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\n3. replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def replace_max_specialchar(string,n):\r\n    list_of_strings = string.split()\r\n    final_list = []\r\n    for word in list_of_strings:\r\n        if len(word) > 2 and (word[-4:] == '....' or word[-5:] == '.....'):\r\n            final_list.append(':'.join(word))\r\n        else:\r\n            final_list.append(word)\r\n    return (' '.join(final_list))[:n]"
          }
        }
      ],
      "usage": {
        "total_tokens": 246,
        "prompt_tokens": 168,
        "completion_tokens": 85
      }
    },
    "timestamp": 1752256089.7525136
  },
  {
    "mbpp_id": 221,
    "problem": {
      "task_id": 221,
      "text": "Write a python function to find the first even number in a given list of numbers.",
      "code": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even",
      "test_list": [
        "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
        "assert first_even([2, 3, 4]) == 2",
        "assert first_even([5, 6, 7]) == 6"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the first even number in a given list of numbers.\n\nTask ID: 221\n\nExpected behavior (test cases):\n1. first_even ([1, 3, 5, 7, 4, 1, 6, 8]) should return 4\n2. first_even([2, 3, 4]) should return 2\n3. first_even([5, 6, 7]) should return 6\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def first_even(nums):\r\n    for num in nums:\r\n        if (num % 2 == 0):\r\n            return num\r\n    return -1"
          }
        }
      ],
      "usage": {
        "total_tokens": 184,
        "prompt_tokens": 161,
        "completion_tokens": 30
      }
    },
    "timestamp": 1752256092.6390471
  },
  {
    "mbpp_id": 222,
    "problem": {
      "task_id": 222,
      "text": "Write a function to check if all the elements in tuple have same data type or not.",
      "code": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ",
      "test_list": [
        "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
        "assert check_type((1, 2, \"4\") ) == False",
        "assert check_type((3, 2, 1, 4, 5) ) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if all the elements in tuple have same data type or not.\n\nTask ID: 222\n\nExpected behavior (test cases):\n1. check_type((5, 6, 7, 3, 5, 6) ) should return True\n2. check_type((1, 2, \"4\") ) should return False\n3. check_type((3, 2, 1, 4, 5) ) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_type(test_tup):\r\n    temp = test_tup[0]\r\n    for ele in test_tup:\r\n        if(type(temp) != type(ele)):\r\n            return False\r\n    return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 195,
        "prompt_tokens": 162,
        "completion_tokens": 40
      }
    },
    "timestamp": 1752256096.4586868
  },
  {
    "mbpp_id": 223,
    "problem": {
      "task_id": 223,
      "text": "Write a function to check for majority element in the given sorted array.",
      "code": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
      "test_list": [
        "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
        "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
        "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check for majority element in the given sorted array.\n\nTask ID: 223\n\nExpected behavior (test cases):\n1. is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) should return True\n2. is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) should return False\n3. is_majority([1, 1, 1, 2, 2], 5, 1) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_majority(arr, n, k):\r\n    if arr[k] == arr[2 * k]:\r\n        return True\r\n    elif arr[k] != arr[2 * k]:\r\n        while 2 * k < n:\r\n            if arr[k] != arr[2 * k]:\r\n                break\r\n            else:\r\n                k += 1\r\n    return k + 1 >= n / 2"
          }
        }
      ],
      "usage": {
        "total_tokens": 270,
        "prompt_tokens": 195,
        "completion_tokens": 82
      }
    },
    "timestamp": 1752256103.3046978
  },
  {
    "mbpp_id": 224,
    "problem": {
      "task_id": 224,
      "text": "Write a python function to count set bits of a given number.",
      "code": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ",
      "test_list": [
        "assert count_Set_Bits(2) == 1",
        "assert count_Set_Bits(4) == 1",
        "assert count_Set_Bits(6) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count set bits of a given number.\n\nTask ID: 224\n\nExpected behavior (test cases):\n1. count_Set_Bits(2) should return 1\n2. count_Set_Bits(4) should return 1\n3. count_Set_Bits(6) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_Set_Bits(n):\r\n    count = 0\r\n    while n != 0:\r\n        if (n % 2 == 1):\r\n            count += 1\r\n        n >>= 1\r\n    return count"
          }
        }
      ],
      "usage": {
        "total_tokens": 169,
        "prompt_tokens": 130,
        "completion_tokens": 46
      }
    },
    "timestamp": 1752256107.3529582
  },
  {
    "mbpp_id": 225,
    "problem": {
      "task_id": 225,
      "text": "Write a python function to find the minimum element in a sorted and rotated array.",
      "code": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ",
      "test_list": [
        "assert find_Min([1,2,3,4,5],0,4) == 1",
        "assert find_Min([4,6,8],0,2) == 4",
        "assert find_Min([2,3,5,7,9],0,4) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the minimum element in a sorted and rotated array.\n\nTask ID: 225\n\nExpected behavior (test cases):\n1. find_Min([1,2,3,4,5],0,4) should return 1\n2. find_Min([4,6,8],0,2) should return 4\n3. find_Min([2,3,5,7,9],0,4) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Min(arr,n):\r\n    low = 0\r\n    high = n-1\r\n \r\n    while(low < high):\r\n        mid = int((low+high)/2)\r\n        if (arr[mid] > arr[high]):\r\n            low = mid + 1\r\n        elif (arr[mid] < arr[high]):\r\n            high = mid\r\n        else:\r\n            high -= 1\r\n    return (arr[high])"
          }
        }
      ],
      "usage": {
        "total_tokens": 240,
        "prompt_tokens": 159,
        "completion_tokens": 88
      }
    },
    "timestamp": 1752256114.4989388
  },
  {
    "mbpp_id": 226,
    "problem": {
      "task_id": 226,
      "text": "Write a python function to remove the characters which have odd index values of a given string.",
      "code": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result",
      "test_list": [
        "assert odd_values_string('abcdef') == 'ace'",
        "assert odd_values_string('python') == 'pto'",
        "assert odd_values_string('data') == 'dt'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to remove the characters which have odd index values of a given string.\n\nTask ID: 226\n\nExpected behavior (test cases):\n1. odd_values_string('abcdef') should return 'ace'\n2. odd_values_string('python') should return 'pto'\n3. odd_values_string('data') should return 'dt'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def odd_values_string(str1):\r\n  res = \"\" \r\n  for i in range(len(str1)):  \r\n    if i % 2 == 0:\r\n      res = res + str1[i]    \r\n  return (res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 172,
        "prompt_tokens": 132,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752256118.6060913
  },
  {
    "mbpp_id": 227,
    "problem": {
      "task_id": 227,
      "text": "Write a function to find minimum of three numbers.",
      "code": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ",
      "test_list": [
        "assert min_of_three(10,20,0)==0",
        "assert min_of_three(19,15,18)==15",
        "assert min_of_three(-10,-20,-30)==-30"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find minimum of three numbers.\n\nTask ID: 227\n\nExpected behavior (test cases):\n1. min_of_three(10,20,0)==0\n2. min_of_three(19,15,18)==15\n3. min_of_three(-10,-20,-30)==-30\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def min_of_three(x,y,z):\r\n  if x>=y and y>=z:\r\n    return z\r\n  elif y>=x and x>=z:\r\n    return x \r\n  else :\r\n    return y "
          }
        }
      ],
      "usage": {
        "total_tokens": 174,
        "prompt_tokens": 138,
        "completion_tokens": 43
      }
    },
    "timestamp": 1752256122.2642312
  },
  {
    "mbpp_id": 228,
    "problem": {
      "task_id": 228,
      "text": "Write a python function to check whether all the bits are unset in the given range or not.",
      "code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False",
      "test_list": [
        "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
        "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
        "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether all the bits are unset in the given range or not.\n\nTask ID: 228\n\nExpected behavior (test cases):\n1. all_Bits_Set_In_The_Given_Range(4,1,2) should return True\n2. all_Bits_Set_In_The_Given_Range(17,2,4) should return True\n3. all_Bits_Set_In_The_Given_Range(39,4,6) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def all_Bits_Set_In_The_Given_Range(number,start,end):\r\n    for i in range(start,end+1):\r\n        if ((number>>i)&1)!=0:\r\n            return False\r\n    else:\r\n        return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 208,
        "prompt_tokens": 168,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752256126.5047853
  },
  {
    "mbpp_id": 229,
    "problem": {
      "task_id": 229,
      "text": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
      "code": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr",
      "test_list": [
        "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
        "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
        "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\nTask ID: 229\n\nExpected behavior (test cases):\n1. re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) should return [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n2. re_arrange_array([12, -14, -26, 13, 15], 5) should return [-14, -26, 12, 13, 15]\n3. re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) should return [-42, -39, -78, 10, 24, 36, 85]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def re_arrange_array(arr, n):\r\n    arr.sort()\r\n    ans = []\r\n    pos = 0\r\n    neg = len(arr)-1\r\n    \r\n    while(neg >= pos and pos <= neg): \r\n        if arr[neg] < 0:\r\n            ans.append(arr[neg])\r\n            neg -= 1\r\n\r\n        elif arr[pos] > 0:\r\n            ans.append(arr[pos])\r\n            pos += 1\r\n        else:\r\n            break\r\n    return ans"
          }
        }
      ],
      "usage": {
        "total_tokens": 371,
        "prompt_tokens": 282,
        "completion_tokens": 96
      }
    },
    "timestamp": 1752256133.9265597
  },
  {
    "mbpp_id": 230,
    "problem": {
      "task_id": 230,
      "text": "Write a function to replace blank spaces with any character in a string.",
      "code": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2",
      "test_list": [
        "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
        "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
        "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to replace blank spaces with any character in a string.\n\nTask ID: 230\n\nExpected behavior (test cases):\n1. replace_blank(\"hello people\",'@')==(\"hello@people\")\n2. replace_blank(\"python program language\",'$')==(\"python$program$language\")\n3. replace_blank(\"blank space\",\"-\")==(\"blank-space\")\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef replace_blank(s,pattern,new):\r\n    return(re.sub(pattern,new,s))"
          }
        }
      ],
      "usage": {
        "total_tokens": 148,
        "prompt_tokens": 136,
        "completion_tokens": 19
      }
    },
    "timestamp": 1752256135.9374385
  },
  {
    "mbpp_id": 231,
    "problem": {
      "task_id": 231,
      "text": "Write a function to find the maximum sum in the given right triangle of numbers.",
      "code": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))",
      "test_list": [
        "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
        "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
        "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum sum in the given right triangle of numbers.\n\nTask ID: 231\n\nExpected behavior (test cases):\n1. max_sum([[1], [2,1], [3,3,2]], 3) should return 6\n2. max_sum([[1], [1, 2], [4, 1, 12]], 3) should return 15 \n3. max_sum([[2], [3,2], [13,23,12]], 3) should return 28\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_sum(triangle):\r\n    for i in range(0, len(triangle)-1):\r\n        for j in range(0, len(triangle[i])-1):\r\n            triangle[i + 1][j] += max(triangle[i][j], triangle[i][j+1])\r\n    print(max(triangle[-1]))\r\n    #return max(triangle[-1])"
          }
        }
      ],
      "usage": {
        "total_tokens": 250,
        "prompt_tokens": 181,
        "completion_tokens": 76
      }
    },
    "timestamp": 1752256142.3936455
  },
  {
    "mbpp_id": 232,
    "problem": {
      "task_id": 232,
      "text": "Write a function to get the n largest items from a dataset.",
      "code": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest",
      "test_list": [
        "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
        "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
        "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to get the n largest items from a dataset.\n\nTask ID: 232\n\nExpected behavior (test cases):\n1. larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n2. larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\n3. larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import heapq\r\ndef larg_nnum(dataset,n):\r\n    result = sorted(dataset,reverse=True)[:n]\r\n    return result "
          }
        }
      ],
      "usage": {
        "total_tokens": 298,
        "prompt_tokens": 280,
        "completion_tokens": 25
      }
    },
    "timestamp": 1752256144.7552361
  },
  {
    "mbpp_id": 233,
    "problem": {
      "task_id": 233,
      "text": "Write a function to find the lateral surface area of a cylinder.",
      "code": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface",
      "test_list": [
        "assert lateralsuface_cylinder(10,5)==314.15000000000003",
        "assert lateralsuface_cylinder(4,5)==125.66000000000001",
        "assert lateralsuface_cylinder(4,10)==251.32000000000002"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the lateral surface area of a cylinder.\n\nTask ID: 233\n\nExpected behavior (test cases):\n1. lateralsuface_cylinder(10,5)==314.15000000000003\n2. lateralsuface_cylinder(4,5)==125.66000000000001\n3. lateralsuface_cylinder(4,10)==251.32000000000002\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef lateralsuface_cylinder(radius,height):\r\n    result = 2 * math.pi * radius * height \r\n    return round(result , 4)"
          }
        }
      ],
      "usage": {
        "total_tokens": 213,
        "prompt_tokens": 186,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752256147.9941177
  },
  {
    "mbpp_id": 234,
    "problem": {
      "task_id": 234,
      "text": "Write a function to find the volume of a cube.",
      "code": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume",
      "test_list": [
        "assert volume_cube(3)==27",
        "assert volume_cube(2)==8",
        "assert volume_cube(5)==125"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the volume of a cube.\n\nTask ID: 234\n\nExpected behavior (test cases):\n1. volume_cube(3)==27\n2. volume_cube(2)==8\n3. volume_cube(5)==125\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def volume_cube(n):\r\n    vol = n**3\r\n    return(vol)"
          }
        }
      ],
      "usage": {
        "total_tokens": 125,
        "prompt_tokens": 116,
        "completion_tokens": 16
      }
    },
    "timestamp": 1752256149.734478
  },
  {
    "mbpp_id": 235,
    "problem": {
      "task_id": 235,
      "text": "Write a python function to set all even bits of a given number.",
      "code": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ",
      "test_list": [
        "assert even_bit_set_number(10) == 10",
        "assert even_bit_set_number(20) == 30",
        "assert even_bit_set_number(30) == 30"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to set all even bits of a given number.\n\nTask ID: 235\n\nExpected behavior (test cases):\n1. even_bit_set_number(10) should return 10\n2. even_bit_set_number(20) should return 30\n3. even_bit_set_number(30) should return 30\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def even_bit_set_number(n):\r\n    # Calculate number of bit positions\r\n    num_of_bits = n.bit_length()\r\n    \r\n    # Shift the number right by one bit until it becomes zero.\r\n    for i in range(num_of_bits):\r\n        if n & (1 << (num_of_bits - i - 1)):\r\n            n = (n | (1 << (i + 1)))\r\n            \r\n    return n"
          }
        }
      ],
      "usage": {
        "total_tokens": 214,
        "prompt_tokens": 137,
        "completion_tokens": 84
      }
    },
    "timestamp": 1752256156.919302
  },
  {
    "mbpp_id": 236,
    "problem": {
      "task_id": 236,
      "text": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
      "code": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;",
      "test_list": [
        "assert No_of_Triangle(4,2) == 7",
        "assert No_of_Triangle(4,3) == 3",
        "assert No_of_Triangle(1,3) == -1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\nTask ID: 236\n\nExpected behavior (test cases):\n1. No_of_Triangle(4,2) should return 7\n2. No_of_Triangle(4,3) should return 3\n3. No_of_Triangle(1,3) should return -1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef No_of_Triangle(n,k):\r\n    ans = int(math.pow(k,n-1))\r\n    if (ans == n**n ):\r\n        return 1 + ((n-2)*(k-1)) \r\n    else :   \r\n        return -1 "
          }
        }
      ],
      "usage": {
        "total_tokens": 196,
        "prompt_tokens": 147,
        "completion_tokens": 56
      }
    },
    "timestamp": 1752256161.6323051
  },
  {
    "mbpp_id": 237,
    "problem": {
      "task_id": 237,
      "text": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
      "code": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ",
      "test_list": [
        "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
        "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
        "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check the occurrences of records which occur similar times in the given tuples.\n\nTask ID: 237\n\nExpected behavior (test cases):\n1. check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) should return {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n2. check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) should return {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n3. check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) should return {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_occurences(test):\r\n  res = dict()\r\n  for t in test:\r\n    if len(t) != 0 and len(set(t)) == 1:\r\n      key = t[0]\r\n      if key not in res:\r\n        res[key] = 0\r\n      res[key] += 1\r\n  return (res) "
          }
        }
      ],
      "usage": {
        "total_tokens": 380,
        "prompt_tokens": 316,
        "completion_tokens": 71
      }
    },
    "timestamp": 1752256167.4974887
  },
  {
    "mbpp_id": 238,
    "problem": {
      "task_id": 238,
      "text": "Write a python function to count number of non-empty substrings of a given string.",
      "code": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ",
      "test_list": [
        "assert number_of_substrings(\"abc\") == 6",
        "assert number_of_substrings(\"abcd\") == 10",
        "assert number_of_substrings(\"abcde\") == 15"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count number of non-empty substrings of a given string.\n\nTask ID: 238\n\nExpected behavior (test cases):\n1. number_of_substrings(\"abc\") should return 6\n2. number_of_substrings(\"abcd\") should return 10\n3. number_of_substrings(\"abcde\") should return 15\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def number_of_substrings(string): \r\n\tn = len(string) \r\n\treturn int((n * (n + 1)) / 2)"
          }
        }
      ],
      "usage": {
        "total_tokens": 159,
        "prompt_tokens": 137,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752256170.47678
  },
  {
    "mbpp_id": 239,
    "problem": {
      "task_id": 239,
      "text": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
      "code": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]",
      "test_list": [
        "assert get_total_number_of_sequences(10, 4) == 4",
        "assert get_total_number_of_sequences(5, 2) == 6",
        "assert get_total_number_of_sequences(16, 3) == 84"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\nTask ID: 239\n\nExpected behavior (test cases):\n1. get_total_number_of_sequences(10, 4) should return 4\n2. get_total_number_of_sequences(5, 2) should return 6\n3. get_total_number_of_sequences(16, 3) should return 84\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_total_number_of_sequences(m,n):\r\n    if(n == 1):\r\n        return m\r\n    else:\r\n        return ((m-1)*get_total_number_of_sequences(m,(n//2)+1))%((10**9)+7)"
          }
        }
      ],
      "usage": {
        "total_tokens": 216,
        "prompt_tokens": 171,
        "completion_tokens": 52
      }
    },
    "timestamp": 1752256175.1355932
  },
  {
    "mbpp_id": 240,
    "problem": {
      "task_id": 240,
      "text": "Write a function to replace the last element of the list with another list.",
      "code": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n",
      "test_list": [
        "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
        "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
        "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to replace the last element of the list with another list.\n\nTask ID: 240\n\nExpected behavior (test cases):\n1. replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n2. replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n3. replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def replace_last_element(testlist,testlist2):\r\n    testlist.append(testlist2)\r\n    del testlist[len(testlist)-1]\r\n    return testlist"
          }
        }
      ],
      "usage": {
        "total_tokens": 238,
        "prompt_tokens": 213,
        "completion_tokens": 32
      }
    },
    "timestamp": 1752256178.1450088
  },
  {
    "mbpp_id": 241,
    "problem": {
      "task_id": 241,
      "text": "Write a function to generate a 3d array having each element as '*'.",
      "code": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d",
      "test_list": [
        "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
        "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
        "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to generate a 3d array having each element as '*'.\n\nTask ID: 241\n\nExpected behavior (test cases):\n1. array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n2. array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\n3. array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def array_3d(N,M,P): \r\n\treturn ([[['*' for i in range(P)]for j in range(M)]for k in range(N)])"
          }
        }
      ],
      "usage": {
        "total_tokens": 357,
        "prompt_tokens": 332,
        "completion_tokens": 32
      }
    },
    "timestamp": 1752256181.2719014
  },
  {
    "mbpp_id": 242,
    "problem": {
      "task_id": 242,
      "text": "Write a function to count total characters in a string.",
      "code": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total",
      "test_list": [
        "assert count_charac(\"python programming\")==18",
        "assert count_charac(\"language\")==8",
        "assert count_charac(\"words\")==5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count total characters in a string.\n\nTask ID: 242\n\nExpected behavior (test cases):\n1. count_charac(\"python programming\")==18\n2. count_charac(\"language\")==8\n3. count_charac(\"words\")==5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_charac(str):\r\n    return len(str)"
          }
        }
      ],
      "usage": {
        "total_tokens": 122,
        "prompt_tokens": 118,
        "completion_tokens": 11
      }
    },
    "timestamp": 1752256182.7487848
  },
  {
    "mbpp_id": 243,
    "problem": {
      "task_id": 243,
      "text": "Write a function to sort the given list based on the occurrence of first element of tuples.",
      "code": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ",
      "test_list": [
        "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
        "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
        "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort the given list based on the occurrence of first element of tuples.\n\nTask ID: 243\n\nExpected behavior (test cases):\n1. sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) should return [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n2. sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) should return [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\n3. sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) should return [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sort_on_occurence(list_of_tuples):\r\n    sorted_list = sorted(list_of_tuples, key=lambda x : sum(1 for i in x if isinstance(i, tuple)))\r\n    final_list = [tuple(sorted(sublist)) for sublist in zip(*sorted_list)]\r\n    return final_list"
          }
        }
      ],
      "usage": {
        "total_tokens": 303,
        "prompt_tokens": 253,
        "completion_tokens": 57
      }
    },
    "timestamp": 1752256187.742181
  },
  {
    "mbpp_id": 244,
    "problem": {
      "task_id": 244,
      "text": "Write a python function to find the next perfect square greater than a given number.",
      "code": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ",
      "test_list": [
        "assert next_Perfect_Square(35) == 36",
        "assert next_Perfect_Square(6) == 9",
        "assert next_Perfect_Square(9) == 16"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the next perfect square greater than a given number.\n\nTask ID: 244\n\nExpected behavior (test cases):\n1. next_Perfect_Square(35) should return 36\n2. next_Perfect_Square(6) should return 9\n3. next_Perfect_Square(9) should return 16\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def next_Perfect_Square(n): \r\n    if n == 0 : \r\n        return 1\r\n    elif (n & (n - 1)) == 0:\r\n        return int((int)(math.sqrt(n)))\r\n    else: \r\n        while (1):\r\n            i = int(math.pow(int((n + 1)**(1/2)), 2))\r\n            if i > n and is_perfect_square(i) :\r\n                return i\r\n            else:\r\n                i += 1"
          }
        }
      ],
      "usage": {
        "total_tokens": 234,
        "prompt_tokens": 139,
        "completion_tokens": 102
      }
    },
    "timestamp": 1752256196.1233654
  },
  {
    "mbpp_id": 245,
    "problem": {
      "task_id": 245,
      "text": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
      "code": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum",
      "test_list": [
        "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
        "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
        "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\nTask ID: 245\n\nExpected behavior (test cases):\n1. max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) should return 194\n2. max_sum([80, 60, 30, 40, 20, 10], 6) should return 210\n3. max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) should return 138\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_sum(arr, n):\r\n    incl = arr[0]\r\n    excl = 0\r\n    for i in range(1, n):\r\n        incl, excl = excl + arr[i], max(incl, excl)\r\n        temp = excl\r\n        excl = incl - excl\r\n        incl = temp\r\n\r\n    return excl + arr[n-1] "
          }
        }
      ],
      "usage": {
        "total_tokens": 291,
        "prompt_tokens": 225,
        "completion_tokens": 73
      }
    },
    "timestamp": 1752256202.4042082
  },
  {
    "mbpp_id": 246,
    "problem": {
      "task_id": 246,
      "text": "Write a function for computing square roots using the babylonian method.",
      "code": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;",
      "test_list": [
        "assert babylonian_squareroot(10)==3.162277660168379",
        "assert babylonian_squareroot(2)==1.414213562373095",
        "assert babylonian_squareroot(9)==3.0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function for computing square roots using the babylonian method.\n\nTask ID: 246\n\nExpected behavior (test cases):\n1. babylonian_squareroot(10)==3.162277660168379\n2. babylonian_squareroot(2)==1.414213562373095\n3. babylonian_squareroot(9)==3.0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def babylonian_squareroot(x):\r\n    epsilon = 1e-12\r\n    y = x / 2.0 + 1.0\r\n    while abs(y - x/y) > epsilon:\r\n        x = y\r\n        y = (x + x / y) / 2.0\r\n    return round(y, 12)"
          }
        }
      ],
      "usage": {
        "total_tokens": 235,
        "prompt_tokens": 166,
        "completion_tokens": 76
      }
    },
    "timestamp": 1752256208.6426814
  },
  {
    "mbpp_id": 247,
    "problem": {
      "task_id": 247,
      "text": "Write a function to find the longest palindromic subsequence in the given string.",
      "code": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]",
      "test_list": [
        "assert lps(\"TENS FOR TENS\") == 5 ",
        "assert lps(\"CARDIO FOR CARDS\") == 7",
        "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the longest palindromic subsequence in the given string.\n\nTask ID: 247\n\nExpected behavior (test cases):\n1. lps(\"TENS FOR TENS\") should return 5 \n2. lps(\"CARDIO FOR CARDS\") should return 7\n3. lps(\"PART OF THE JOURNEY IS PART\") should return 9 \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def lps(str):\r\n    n = len(str)\r\n    dp = [[0] * (n+1) for i in range(n + 1)]\r\n \r\n    # All substrings of length 1 are palindromes\r\n    for i in range(1,n+1):\r\n        dp[i][i] = 1\r\n\r\n    # Fill dp[][] in bottom up manner\r\n    for cl in range(2, n+1): # loop over column number.\r\n        for row in range(1, n-cl+2): # loop over row number.\r\n            start = row - 1;\r\n            end = row + cl - 1;\r\n\r\n            if str[start] == str[end]: \r\n                dp[row][end] = dp[row+1][end-1]+2; \r\n            else:\r\n                dp[row][end] = max(dp[row][end-1],dp[row+1][end]);\r\n        \r\n    return dp[1][n];"
          }
        }
      ],
      "usage": {
        "total_tokens": 334,
        "prompt_tokens": 144,
        "completion_tokens": 197
      }
    },
    "timestamp": 1752256224.4390569
  },
  {
    "mbpp_id": 248,
    "problem": {
      "task_id": 248,
      "text": "Write a function to calculate the harmonic sum of n-1.",
      "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
      "test_list": [
        "assert harmonic_sum(7) == 2.5928571428571425",
        "assert harmonic_sum(4) == 2.083333333333333",
        "assert harmonic_sum(19) == 3.547739657143682"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the harmonic sum of n-1.\n\nTask ID: 248\n\nExpected behavior (test cases):\n1. harmonic_sum(7) should return 2.5928571428571425\n2. harmonic_sum(4) should return 2.083333333333333\n3. harmonic_sum(19) should return 3.547739657143682\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef harmonic_sum(n):\r\n    s = 0 \r\n    for i in range(1,n+1):  \r\n        s += 1/i\r\n    return s "
          }
        }
      ],
      "usage": {
        "total_tokens": 204,
        "prompt_tokens": 174,
        "completion_tokens": 37
      }
    },
    "timestamp": 1752256227.843261
  },
  {
    "mbpp_id": 249,
    "problem": {
      "task_id": 249,
      "text": "Write a function to find the intersection of two arrays using lambda function.",
      "code": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result",
      "test_list": [
        "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
        "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
        "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the intersection of two arrays using lambda function.\n\nTask ID: 249\n\nExpected behavior (test cases):\n1. intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n2. intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\n3. intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def intersection_array(arr1,arr2):\r\n    return list(filter(lambda x:(x in arr1 and x in arr2),arr1))"
          }
        }
      ],
      "usage": {
        "total_tokens": 256,
        "prompt_tokens": 235,
        "completion_tokens": 28
      }
    },
    "timestamp": 1752256230.7202988
  },
  {
    "mbpp_id": 250,
    "problem": {
      "task_id": 250,
      "text": "Write a python function to count the occcurences of an element in a tuple.",
      "code": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ",
      "test_list": [
        "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
        "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
        "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the occcurences of an element in a tuple.\n\nTask ID: 250\n\nExpected behavior (test cases):\n1. count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) should return 0\n2. count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) should return 3\n3. count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) should return 4\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_X(tup,x):\r\n    return tup.count(x)"
          }
        }
      ],
      "usage": {
        "total_tokens": 253,
        "prompt_tokens": 247,
        "completion_tokens": 13
      }
    },
    "timestamp": 1752256232.373835
  },
  {
    "mbpp_id": 251,
    "problem": {
      "task_id": 251,
      "text": "Write a function to insert an element before each element of a list.",
      "code": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list",
      "test_list": [
        "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
        "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
        "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to insert an element before each element of a list.\n\nTask ID: 251\n\nExpected behavior (test cases):\n1. insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n2. insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \n3. insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def insert_element(list1,'insertion') :\r\n    return [insertion + str(x) for x in list1] "
          }
        }
      ],
      "usage": {
        "total_tokens": 198,
        "prompt_tokens": 179,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752256234.8537762
  },
  {
    "mbpp_id": 252,
    "problem": {
      "task_id": 252,
      "text": "Write a python function to convert complex numbers to polar coordinates.",
      "code": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ",
      "test_list": [
        "assert convert(1) == (1.0, 0.0)",
        "assert convert(4) == (4.0,0.0)",
        "assert convert(5) == (5.0,0.0)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to convert complex numbers to polar coordinates.\n\nTask ID: 252\n\nExpected behavior (test cases):\n1. convert(1) should return (1.0, 0.0)\n2. convert(4) should return (4.0,0.0)\n3. convert(5) should return (5.0,0.0)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def convert(c):\r\n    x = abs(c)\r\n    y = cmath.phase(c)\r\n    polar_c = (x,y)\r\n    return polar_c"
          }
        }
      ],
      "usage": {
        "total_tokens": 162,
        "prompt_tokens": 139,
        "completion_tokens": 30
      }
    },
    "timestamp": 1752256237.7720969
  },
  {
    "mbpp_id": 253,
    "problem": {
      "task_id": 253,
      "text": "Write a python function to count integers from a given list.",
      "code": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr",
      "test_list": [
        "assert count_integer([1,2,'abc',1.2]) == 2",
        "assert count_integer([1,2,3]) == 3",
        "assert count_integer([1,1.2,4,5.1]) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count integers from a given list.\n\nTask ID: 253\n\nExpected behavior (test cases):\n1. count_integer([1,2,'abc',1.2]) should return 2\n2. count_integer([1,2,3]) should return 3\n3. count_integer([1,1.2,4,5.1]) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_integer(list):\r\n    c = len(list)\r\n    return c"
          }
        }
      ],
      "usage": {
        "total_tokens": 152,
        "prompt_tokens": 145,
        "completion_tokens": 14
      }
    },
    "timestamp": 1752256239.420413
  },
  {
    "mbpp_id": 254,
    "problem": {
      "task_id": 254,
      "text": "Write a function to find all words starting with 'a' or 'e' in a given string.",
      "code": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list",
      "test_list": [
        "assert words_ae(\"python programe\")==['ame']",
        "assert words_ae(\"python programe language\")==['ame','anguage']",
        "assert words_ae(\"assert statement\")==['assert', 'atement']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find all words starting with 'a' or 'e' in a given string.\n\nTask ID: 254\n\nExpected behavior (test cases):\n1. words_ae(\"python programe\")==['ame']\n2. words_ae(\"python programe language\")==['ame','anguage']\n3. words_ae(\"statement\")==['assert', 'atement']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def words_ae(sentence):\r\n  return [word for word in sentence.split() if(word.startswith('a') or word.startswith('e'))]"
          }
        }
      ],
      "usage": {
        "total_tokens": 163,
        "prompt_tokens": 141,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752256242.3709848
  },
  {
    "mbpp_id": 255,
    "problem": {
      "task_id": 255,
      "text": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
      "code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r",
      "test_list": [
        "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
        "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
        "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\nTask ID: 255\n\nExpected behavior (test cases):\n1. combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n2. combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n3. combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "from itertools import product\r\ndef combinations_colors(color_list,number_of_colors):\r\n    color_combinations = list(product(color_list,number_of_colors))\r\n    return (color_combinations)"
          }
        }
      ],
      "usage": {
        "total_tokens": 307,
        "prompt_tokens": 280,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752256245.4599912
  },
  {
    "mbpp_id": 256,
    "problem": {
      "task_id": 256,
      "text": "Write a python function to count the number of prime numbers less than a given non-negative number.",
      "code": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr",
      "test_list": [
        "assert count_Primes_nums(5) == 2",
        "assert count_Primes_nums(10) == 4",
        "assert count_Primes_nums(100) == 25"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the number of prime numbers less than a given non-negative number.\n\nTask ID: 256\n\nExpected behavior (test cases):\n1. count_Primes_nums(5) should return 2\n2. count_Primes_nums(10) should return 4\n3. count_Primes_nums(100) should return 25\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_prime(num):\r\n    if num > 1:\r\n        for i in range(2, int(num/2)):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            print(\"Prime Number\")\r\n    else:\r\n        print(\"Not Prime Number\") \r\n\r\ndef count_Primes_nums(x): \r\n    count = 0\r\n    for n in range(1,x):    \r\n        if is_prime(n):      \r\n            count += 1    \r\n    return count"
          }
        }
      ],
      "usage": {
        "total_tokens": 232,
        "prompt_tokens": 140,
        "completion_tokens": 99
      }
    },
    "timestamp": 1752256253.4861004
  },
  {
    "mbpp_id": 257,
    "problem": {
      "task_id": 257,
      "text": "Write a function to swap two numbers.",
      "code": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)",
      "test_list": [
        "assert swap_numbers(10,20)==(20,10)",
        "assert swap_numbers(15,17)==(17,15)",
        "assert swap_numbers(100,200)==(200,100)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to swap two numbers.\n\nTask ID: 257\n\nExpected behavior (test cases):\n1. swap_numbers(10,20)==(20,10)\n2. swap_numbers(15,17)==(17,15)\n3. swap_numbers(100,200)==(200,100)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def swap_numbers(x,y):\r\n    x=x+y\r\n    y=x-y\r\n    x=x-y\r\n    return (x,y)"
          }
        }
      ],
      "usage": {
        "total_tokens": 161,
        "prompt_tokens": 141,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752256256.0392673
  },
  {
    "mbpp_id": 258,
    "problem": {
      "task_id": 258,
      "text": "Write a function to find number of odd elements in the given list using lambda function.",
      "code": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd",
      "test_list": [
        "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
        "assert count_odd([10,15,14,13,-18,12,-20])==2",
        "assert count_odd([1, 2, 4, 8, 9])==2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find number of odd elements in the given list using lambda function.\n\nTask ID: 258\n\nExpected behavior (test cases):\n1. count_odd([1, 2, 3, 5, 7, 8, 10])==4\n2. count_odd([10,15,14,13,-18,12,-20])==2\n3. count_odd([1, 2, 4, 8, 9])==2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_odd(test_list):\r\n    return len(list(filter(lambda n: (n % 2 != 0), test_list)))"
          }
        }
      ],
      "usage": {
        "total_tokens": 188,
        "prompt_tokens": 169,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752256258.6008294
  },
  {
    "mbpp_id": 259,
    "problem": {
      "task_id": 259,
      "text": "Write a function to maximize the given two tuples.",
      "code": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "test_list": [
        "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
        "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
        "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to maximize the given two tuples.\n\nTask ID: 259\n\nExpected behavior (test cases):\n1. maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) should return ((6, 7), (4, 9), (2, 9), (7, 10))\n2. maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) should return ((7, 8), (5, 10), (3, 10), (8, 11))\n3. maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) should return ((8, 9), (6, 11), (4, 11), (9, 12))\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def maximize_elements(test_tup):\r\n    test_tup=sorted(test_tup,key=lambda x:(x[1],-x[0]))\r\n    result=[(x,y) for (y,x) in test_tup]\r\n    return tuple(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 377,
        "prompt_tokens": 333,
        "completion_tokens": 51
      }
    },
    "timestamp": 1752256263.2094374
  },
  {
    "mbpp_id": 260,
    "problem": {
      "task_id": 260,
      "text": "Write a function to find the nth newman–shanks–williams prime number.",
      "code": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
      "test_list": [
        "assert newman_prime(3) == 7 ",
        "assert newman_prime(4) == 17",
        "assert newman_prime(5) == 41"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the nth newman–shanks–williams prime number.\n\nTask ID: 260\n\nExpected behavior (test cases):\n1. newman_prime(3) should return 7 \n2. newman_prime(4) should return 17\n3. newman_prime(5) should return 41\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def newman_prime(n): \r\n    if n == 0 : \r\n        return -1\r\n    num = str((pow(int(str(bin(n))[-1]), int(str(bin(n))[-2])),2)) \r\n    res = 2*(int(num[1:]) + 1) \r\n    if len(res) % 2 == 0:\r\n      for i in range(2,n+1):\r\n         if pow(i,int(res),res) == 1 :\r\n           print(pow(i,int(res),res))\r\n  \treturn (num)\r\n\telse:\r\n    \tfor i in range(2,n+1):\r\n          if pow(i,int(res),res) == 1 :\r\n            print(pow(i,int(res),res))\r\n      \treturn (num)"
          }
        }
      ],
      "usage": {
        "total_tokens": 278,
        "prompt_tokens": 134,
        "completion_tokens": 151
      }
    },
    "timestamp": 1752256275.5844471
  },
  {
    "mbpp_id": 261,
    "problem": {
      "task_id": 261,
      "text": "Write a function to perform mathematical division operation across the given tuples.",
      "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "test_list": [
        "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
        "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
        "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to perform mathematical division operation across the given tuples.\n\nTask ID: 261\n\nExpected behavior (test cases):\n1. division_elements((10, 4, 6, 9),(5, 2, 3, 3)) should return (2, 2, 2, 3)\n2. division_elements((12, 6, 8, 16),(6, 3, 4, 4)) should return (2, 2, 2, 4)\n3. division_elements((20, 14, 36, 18),(5, 7, 6, 9)) should return (4, 2, 6, 2)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def division_elements(tuples):\r\n    result = [a / b for a, b in zip(tuples[0], tuples[1])]\r\n    return tuple(result) "
          }
        }
      ],
      "usage": {
        "total_tokens": 246,
        "prompt_tokens": 218,
        "completion_tokens": 35
      }
    },
    "timestamp": 1752256278.7796185
  },
  {
    "mbpp_id": 262,
    "problem": {
      "task_id": 262,
      "text": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
      "code": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]",
      "test_list": [
        "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
        "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
        "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to split a given list into two parts where the length of the first part of the list is given.\n\nTask ID: 262\n\nExpected behavior (test cases):\n1. split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n2. split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n3. split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def split_two_parts(test_list,n):\r\n  return (test_list[:n], test_list[n:])"
          }
        }
      ],
      "usage": {
        "total_tokens": 234,
        "prompt_tokens": 221,
        "completion_tokens": 20
      }
    },
    "timestamp": 1752256280.7809792
  },
  {
    "mbpp_id": 263,
    "problem": {
      "task_id": 263,
      "text": "Write a function to merge two dictionaries.",
      "code": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d",
      "test_list": [
        "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
        "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
        "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to merge two dictionaries.\n\nTask ID: 263\n\nExpected behavior (test cases):\n1. merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n2. merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\n3. merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def merge_dicts(dict_1 , dict_2):\r\n    return dict(list(dict_1.items()) + list(dict_2.items()))"
          }
        }
      ],
      "usage": {
        "total_tokens": 300,
        "prompt_tokens": 280,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752256283.4621656
  },
  {
    "mbpp_id": 264,
    "problem": {
      "task_id": 264,
      "text": "Write a function to calculate a dog's age in dog's years.",
      "code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age",
      "test_list": [
        "assert dog_age(12)==61",
        "assert dog_age(15)==73",
        "assert dog_age(24)==109"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate a dog's age in dog's years.\n\nTask ID: 264\n\nExpected behavior (test cases):\n1. dog_age(12)==61\n2. dog_age(15)==73\n3. dog_age(24)==109\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def dog_age(age):\r\n    if age <= 2:\r\n        return age * 10.5\r\n    else:\r\n        return (age - 2) * 4 + 21"
          }
        }
      ],
      "usage": {
        "total_tokens": 156,
        "prompt_tokens": 123,
        "completion_tokens": 40
      }
    },
    "timestamp": 1752256287.1388607
  },
  {
    "mbpp_id": 265,
    "problem": {
      "task_id": 265,
      "text": "Write a function to split a list for every nth element.",
      "code": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]",
      "test_list": [
        "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
        "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
        "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to split a list for every nth element.\n\nTask ID: 265\n\nExpected behavior (test cases):\n1. list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n2. list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \n3. list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def list_split(list_, n):\r\n    return [[list_[i*n:(i+1)*n] for i in range(len(list_)//n)] ]"
          }
        }
      ],
      "usage": {
        "total_tokens": 322,
        "prompt_tokens": 297,
        "completion_tokens": 32
      }
    },
    "timestamp": 1752256290.029709
  },
  {
    "mbpp_id": 266,
    "problem": {
      "task_id": 266,
      "text": "Write a function to find the lateral surface area of a cube.",
      "code": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA",
      "test_list": [
        "assert lateralsurface_cube(5)==100",
        "assert lateralsurface_cube(9)==324",
        "assert lateralsurface_cube(10)==400"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the lateral surface area of a cube.\n\nTask ID: 266\n\nExpected behavior (test cases):\n1. lateralsurface_cube(5)==100\n2. lateralsurface_cube(9)==324\n3. lateralsurface_cube(10)==400\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def lateralsurface_cube(n): \r\n    return n**2 * 4 "
          }
        }
      ],
      "usage": {
        "total_tokens": 138,
        "prompt_tokens": 128,
        "completion_tokens": 17
      }
    },
    "timestamp": 1752256291.9667478
  },
  {
    "mbpp_id": 267,
    "problem": {
      "task_id": 267,
      "text": "Write a python function to find the sum of squares of first n odd natural numbers.",
      "code": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ",
      "test_list": [
        "assert square_Sum(2) == 10",
        "assert square_Sum(3) == 35",
        "assert square_Sum(4) == 84"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of squares of first n odd natural numbers.\n\nTask ID: 267\n\nExpected behavior (test cases):\n1. square_Sum(2) should return 10\n2. square_Sum(3) should return 35\n3. square_Sum(4) should return 84\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def square_Sum(n):\r\n\tsum = 0\r\n\tfor i in range(1,n+1):\r\n\t\tif (i%2 != 0): \r\n\t\t\tsum += i**2\r\n\treturn sum "
          }
        }
      ],
      "usage": {
        "total_tokens": 169,
        "prompt_tokens": 134,
        "completion_tokens": 42
      }
    },
    "timestamp": 1752256295.8573127
  },
  {
    "mbpp_id": 268,
    "problem": {
      "task_id": 268,
      "text": "Write a function to find the n'th star number.",
      "code": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ",
      "test_list": [
        "assert find_star_num(3) == 37",
        "assert find_star_num(4) == 73",
        "assert find_star_num(5) == 121"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the n'th star number.\n\nTask ID: 268\n\nExpected behavior (test cases):\n1. find_star_num(3) should return 37\n2. find_star_num(4) should return 73\n3. find_star_num(5) should return 121\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_star_num(n):\r\n    # Star numbers have a formula of [n*(n+1)]/2 + n\r\n    result = (n*(n+1)) / 2 + n \r\n    return int(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 170,
        "prompt_tokens": 130,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752256300.04937
  },
  {
    "mbpp_id": 269,
    "problem": {
      "task_id": 269,
      "text": "Write a function to find the ascii value of a character.",
      "code": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)",
      "test_list": [
        "assert ascii_value('A')==65",
        "assert ascii_value('R')==82",
        "assert ascii_value('S')==83"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the ascii value of a character.\n\nTask ID: 269\n\nExpected behavior (test cases):\n1. ascii_value('A')==65\n2. ascii_value('R')==82\n3. ascii_value('S')==83\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def ascii_value(c):\r\n  return ord(c)"
          }
        }
      ],
      "usage": {
        "total_tokens": 120,
        "prompt_tokens": 117,
        "completion_tokens": 10
      }
    },
    "timestamp": 1752256301.4422622
  },
  {
    "mbpp_id": 270,
    "problem": {
      "task_id": 270,
      "text": "Write a python function to find the sum of even numbers at even positions.",
      "code": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum",
      "test_list": [
        "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
        "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
        "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of even numbers at even positions.\n\nTask ID: 270\n\nExpected behavior (test cases):\n1. sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) should return 30\n2. sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) should return 26\n3. sum_even_and_even_index([5, 6, 12, 1],4) should return 12\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_even_and_even_index(test_list,n):\r\n    res = []\r\n    for i in range(n):\r\n        if(i%2==0 and test_list[i] % 2 == 0):\r\n            res.append(test_list[i])\r\n    return sum(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 250,
        "prompt_tokens": 205,
        "completion_tokens": 52
      }
    },
    "timestamp": 1752256305.9728966
  },
  {
    "mbpp_id": 271,
    "problem": {
      "task_id": 271,
      "text": "Write a python function to find the sum of fifth power of first n even natural numbers.",
      "code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ",
      "test_list": [
        "assert even_Power_Sum(2) == 1056",
        "assert even_Power_Sum(3) == 8832",
        "assert even_Power_Sum(1) == 32"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of fifth power of first n even natural numbers.\n\nTask ID: 271\n\nExpected behavior (test cases):\n1. even_Power_Sum(2) should return 1056\n2. even_Power_Sum(3) should return 8832\n3. even_Power_Sum(1) should return 32\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def even_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        if(i%2 == 0):\r\n            sum += ((i)**5)\r\n    return(sum) "
          }
        }
      ],
      "usage": {
        "total_tokens": 186,
        "prompt_tokens": 145,
        "completion_tokens": 48
      }
    },
    "timestamp": 1752256310.2628093
  },
  {
    "mbpp_id": 272,
    "problem": {
      "task_id": 272,
      "text": "Write a function to perfom the rear element extraction from list of tuples records.",
      "code": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ",
      "test_list": [
        "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
        "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
        "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to perfom the rear element extraction from list of tuples records.\n\nTask ID: 272\n\nExpected behavior (test cases):\n1. rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) should return [21, 20, 19]\n2. rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) should return [36, 25, 45]\n3. rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) should return [14, 36, 56]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def rear_extract(list_of_tuples):\r\n  new_list = sorted(list_of_tuples, key=lambda x: x[2], reverse=True)\r\n  output = []\r\n  for item in new_list:\r\n    output.append(item[-1])\r\n  return output"
          }
        }
      ],
      "usage": {
        "total_tokens": 289,
        "prompt_tokens": 248,
        "completion_tokens": 48
      }
    },
    "timestamp": 1752256314.4718678
  },
  {
    "mbpp_id": 273,
    "problem": {
      "task_id": 273,
      "text": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
      "code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ",
      "test_list": [
        "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
        "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
        "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to substract the contents of one tuple with corresponding index of other tuple.\n\nTask ID: 273\n\nExpected behavior (test cases):\n1. substract_elements((10, 4, 5), (2, 5, 18)) should return (8, -1, -13)\n2. substract_elements((11, 2, 3), (24, 45 ,16)) should return (-13, -43, -13)\n3. substract_elements((7, 18, 9), (10, 11, 12)) should return (-3, 7, -3)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def substract_elements(tup1,tup2):\r\n    result = ()\r\n    for i in range(len(tup1)):\r\n        result += ((tup1[i] - tup2[i]),)\r\n    return(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 245,
        "prompt_tokens": 208,
        "completion_tokens": 44
      }
    },
    "timestamp": 1752256318.5080304
  },
  {
    "mbpp_id": 274,
    "problem": {
      "task_id": 274,
      "text": "Write a python function to find sum of even index binomial coefficients.",
      "code": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ",
      "test_list": [
        "assert even_binomial_Coeff_Sum(4) == 8",
        "assert even_binomial_Coeff_Sum(6) == 32",
        "assert even_binomial_Coeff_Sum(2) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find sum of even index binomial coefficients.\n\nTask ID: 274\n\nExpected behavior (test cases):\n1. even_binomial_Coeff_Sum(4) should return 8\n2. even_binomial_Coeff_Sum(6) should return 32\n3. even_binomial_Coeff_Sum(2) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def even_binomial_Coeff_Sum(n):\r\n    s = 0\r\n    for i in range(n + 1):\r\n        if (i % 2 == 0 and n >= i):\r\n            s += pow(-1, i - int(i / 2)) * ((n - i) ** (int((n - i)/2)))\r\n    return s"
          }
        }
      ],
      "usage": {
        "total_tokens": 209,
        "prompt_tokens": 141,
        "completion_tokens": 75
      }
    },
    "timestamp": 1752256325.302596
  },
  {
    "mbpp_id": 275,
    "problem": {
      "task_id": 275,
      "text": "Write a python function to find the position of the last removed element from the given array.",
      "code": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1",
      "test_list": [
        "assert get_Position([2,5,4],3,2) == 2",
        "assert get_Position([4,3],2,2) == 2",
        "assert get_Position([1,2,3,4],4,1) == 4"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the position of the last removed element from the given array.\n\nTask ID: 275\n\nExpected behavior (test cases):\n1. get_Position([2,5,4],3,2) should return 2\n2. get_Position([4,3],2,2) should return 2\n3. get_Position([1,2,3,4],4,1) should return 4\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_Position(a,l,m):\r\n  b = m+1\r\n  for i in range(m+1,len(l)):\r\n    if l[i] < a:\r\n      break\r\n    else:\r\n      b += 1\r\n\r\n  print(b-1)\r\n  return b-1 "
          }
        }
      ],
      "usage": {
        "total_tokens": 203,
        "prompt_tokens": 153,
        "completion_tokens": 57
      }
    },
    "timestamp": 1752256330.5193064
  },
  {
    "mbpp_id": 276,
    "problem": {
      "task_id": 276,
      "text": "Write a function to find the volume of a cylinder.",
      "code": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume",
      "test_list": [
        "assert volume_cylinder(10,5)==1570.7500000000002",
        "assert volume_cylinder(4,5)==251.32000000000002",
        "assert volume_cylinder(4,10)==502.64000000000004"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the volume of a cylinder.\n\nTask ID: 276\n\nExpected behavior (test cases):\n1. volume_cylinder(10,5)==1570.7500000000002\n2. volume_cylinder(4,5)==251.32000000000002\n3. volume_cylinder(4,10)==502.64000000000004\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef volume_cylinder(radius,height):\r\n    return math.pi*radius**2 * height"
          }
        }
      ],
      "usage": {
        "total_tokens": 188,
        "prompt_tokens": 175,
        "completion_tokens": 20
      }
    },
    "timestamp": 1752256332.7424858
  },
  {
    "mbpp_id": 277,
    "problem": {
      "task_id": 277,
      "text": "Write a function to filter a dictionary based on values.",
      "code": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result",
      "test_list": [
        "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
        "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
        "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to filter a dictionary based on values.\n\nTask ID: 277\n\nExpected behavior (test cases):\n1. dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n2. dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n3. dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def dict_filter(dict_1, num):\r\n    return {k:v for k,v in dict_1.items() if v>=num}"
          }
        }
      ],
      "usage": {
        "total_tokens": 326,
        "prompt_tokens": 305,
        "completion_tokens": 28
      }
    },
    "timestamp": 1752256335.563829
  },
  {
    "mbpp_id": 278,
    "problem": {
      "task_id": 278,
      "text": "Write a function to find the element count that occurs before the record in the given tuple.",
      "code": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ",
      "test_list": [
        "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
        "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
        "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the element count that occurs before the record in the given tuple.\n\nTask ID: 278\n\nExpected behavior (test cases):\n1. count_first_elements((1, 5, 7, (4, 6), 10) ) should return 3\n2. count_first_elements((2, 9, (5, 7), 11) ) should return 2\n3. count_first_elements((11, 15, 5, 8, (2, 3), 8) ) should return 4\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_first_elements(tup):\r\n  count = 0\r\n  for i in tup:\r\n    if type(i)==tuple:\r\n      count += 1\r\n  return count"
          }
        }
      ],
      "usage": {
        "total_tokens": 212,
        "prompt_tokens": 184,
        "completion_tokens": 35
      }
    },
    "timestamp": 1752256338.814713
  },
  {
    "mbpp_id": 279,
    "problem": {
      "task_id": 279,
      "text": "Write a function to find the nth decagonal number.",
      "code": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ",
      "test_list": [
        "assert is_num_decagonal(3) == 27",
        "assert is_num_decagonal(7) == 175",
        "assert is_num_decagonal(10) == 370"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the nth decagonal number.\n\nTask ID: 279\n\nExpected behavior (test cases):\n1. is_num_decagonal(3) should return 27\n2. is_num_decagonal(7) should return 175\n3. is_num_decagonal(10) should return 370\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def num_decagonal(n):\r\n    return int((n * ((5 * n - 4)) / 2))"
          }
        }
      ],
      "usage": {
        "total_tokens": 151,
        "prompt_tokens": 134,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752256341.25447
  },
  {
    "mbpp_id": 280,
    "problem": {
      "task_id": 280,
      "text": "Write a function to search an element in the given array by using sequential search.",
      "code": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
      "test_list": [
        "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
        "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
        "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to search an element in the given array by using sequential search.\n\nTask ID: 280\n\nExpected behavior (test cases):\n1. sequential_search([11,23,58,31,56,77,43,12,65,19],31) should return (True, 3)\n2. sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) should return (True, 7)\n3. sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) should return (True, 6)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sequential_search(arr, x): \r\n    n = len(arr) \r\n\r\n    # Start from the first index\r\n    for i in range(0, n): \r\n        if arr[i] == x: \r\n            return True, i \r\n  \r\n    return False, -1"
          }
        }
      ],
      "usage": {
        "total_tokens": 279,
        "prompt_tokens": 230,
        "completion_tokens": 56
      }
    },
    "timestamp": 1752256345.868457
  },
  {
    "mbpp_id": 281,
    "problem": {
      "task_id": 281,
      "text": "Write a python function to check if the elements of a given list are unique or not.",
      "code": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True",
      "test_list": [
        "assert all_unique([1,2,3]) == True",
        "assert all_unique([1,2,1,2]) == False",
        "assert all_unique([1,2,3,4,5]) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check if the elements of a given list are unique or not.\n\nTask ID: 281\n\nExpected behavior (test cases):\n1. all_unique([1,2,3]) should return True\n2. all_unique([1,2,1,2]) should return False\n3. all_unique([1,2,3,4,5]) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def isUnique(list1):\r\n    s = set()\r\n    for i in list1:\r\n        if i in s:\r\n            return False\r\n        else:\r\n            s.add(i)\r\n    return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 176,
        "prompt_tokens": 144,
        "completion_tokens": 39
      }
    },
    "timestamp": 1752256349.1760247
  },
  {
    "mbpp_id": 282,
    "problem": {
      "task_id": 282,
      "text": "Write a function to substaract two lists using map and lambda function.",
      "code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
      "test_list": [
        "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
        "assert sub_list([1,2],[3,4])==[-2,-2]",
        "assert sub_list([90,120],[50,70])==[40,50]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to substaract two lists using map and lambda function.\n\nTask ID: 282\n\nExpected behavior (test cases):\n1. sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n2. sub_list([1,2],[3,4])==[-2,-2]\n3. sub_list([90,120],[50,70])==[40,50]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sub_list(list1,list2):\r\n  result = list(map(lambda x,y :x - y ,list1 , list2))\r\n  return(result) "
          }
        }
      ],
      "usage": {
        "total_tokens": 184,
        "prompt_tokens": 159,
        "completion_tokens": 32
      }
    },
    "timestamp": 1752256352.1987135
  },
  {
    "mbpp_id": 283,
    "problem": {
      "task_id": 283,
      "text": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
      "code": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True",
      "test_list": [
        "assert validate(1234) == True",
        "assert validate(51241) == False",
        "assert validate(321) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\nTask ID: 283\n\nExpected behavior (test cases):\n1. validate(1234) should return True\n2. validate(51241) should return False\n3. validate(321) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def validate(num):\r\n    str_num = list(str(num))\r\n    for i in range(len(str_num)):\r\n        if int(str_num[i]) > num % int(str_num[i]):\r\n            return False\r\n    return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 172,
        "prompt_tokens": 136,
        "completion_tokens": 43
      }
    },
    "timestamp": 1752256356.0951176
  },
  {
    "mbpp_id": 284,
    "problem": {
      "task_id": 284,
      "text": "Write a function to check whether all items of a list are equal to a given string.",
      "code": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element",
      "test_list": [
        "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
        "assert check_element([1,2,3,4],7)==False",
        "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether all items of a list are equal to a given string.\n\nTask ID: 284\n\nExpected behavior (test cases):\n1. check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n2. check_element([1,2,3,4],7)==False\n3. check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_element(test_list,test_string):\r\n    for i in test_list:\r\n        if(i!=test_string):\r\n            return False\r\n    return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 174,
        "prompt_tokens": 152,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752256358.8915343
  },
  {
    "mbpp_id": 285,
    "problem": {
      "task_id": 285,
      "text": "Write a function that matches a string that has an a followed by two to three 'b'.",
      "code": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
      "test_list": [
        "assert text_match_two_three(\"ac\")==('Not matched!')",
        "assert text_match_two_three(\"dc\")==('Not matched!')",
        "assert text_match_two_three(\"abbbba\")==('Found a match!')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function that matches a string that has an a followed by two to three 'b'.\n\nTask ID: 285\n\nExpected behavior (test cases):\n1. text_match_two_three(\"ac\")==('Not matched!')\n2. text_match_two_three(\"dc\")==('Not matched!')\n3. text_match_two_three(\"abbbba\")==('Found a match!')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef text_match_two_three(text):\r\n    pattern = 'ab{2,3}'\r\n    if(re.search(pattern,text)):\r\n        return ('Found a match')\r\n    else:\r\n        return ('Not matched!')"
          }
        }
      ],
      "usage": {
        "total_tokens": 175,
        "prompt_tokens": 137,
        "completion_tokens": 45
      }
    },
    "timestamp": 1752256362.6433804
  },
  {
    "mbpp_id": 286,
    "problem": {
      "task_id": 286,
      "text": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
      "code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
      "test_list": [
        "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
        "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
        "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\nTask ID: 286\n\nExpected behavior (test cases):\n1. max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) should return 30\n2. max_sub_array_sum_repeated([-1, 10, 20], 3, 2) should return 59\n3. max_sub_array_sum_repeated([-1, -2, -3], 3, 3) should return -1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_sub_array_sum_repeated(arr, n, k):\r\n    # Initialize variables\r\n    m = len(arr)\r\n    dp = [[-1 for i in range(m)]for j in range(m)]\r\n    temp = [0 for i in range(k+1)]\r\n    \r\n    # Create prefix and suffix arrays\r\n    arr1 = list(map(sum, zip(*arr)))\r\n    arr2 = list(map(sum, zip(*arr[::-1])))\r\n    arr1 = arr + [0] * (k-1)\r\n    arr2 = arr2 + [0] * (k-1)\r\n\r\n    # Find maximum sum for subarrays using dynamic programming table \r\n    for i in range(1,m):\r\n        for j in range(n):   \r\n            dp[i][j]=temp[j]+dp[i-1][j]\r\n        if(i>0):\r\n            dp[i][j]+=max(dp[i-j][i-1]*(-1),temp[i])\r\n            temp[i]=max(temp[i],dp[i][j]) \r\n\r\n    # Find the maximum element from above computed DP table.\r\n    ans= min(m,k)\r\n    for i in range(ans):\r\n        ans=max(ans,temp[i])\r\n\r\n    return ans "
          }
        }
      ],
      "usage": {
        "total_tokens": 434,
        "prompt_tokens": 195,
        "completion_tokens": 246
      }
    },
    "timestamp": 1752256382.221368
  },
  {
    "mbpp_id": 287,
    "problem": {
      "task_id": 287,
      "text": "Write a python function to find the sum of squares of first n even natural numbers.",
      "code": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)",
      "test_list": [
        "assert square_Sum(2) == 20",
        "assert square_Sum(3) == 56",
        "assert square_Sum(4) == 120"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of squares of first n even natural numbers.\n\nTask ID: 287\n\nExpected behavior (test cases):\n1. square_Sum(2) should return 20\n2. square_Sum(3) should return 56\n3. square_Sum(4) should return 120\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def square_sum(n):\r\n    total = 0\r\n    for i in range(1,n+1):\r\n        if(i%2==0): \r\n            total += (i * i) \r\n    return total "
          }
        }
      ],
      "usage": {
        "total_tokens": 172,
        "prompt_tokens": 135,
        "completion_tokens": 44
      }
    },
    "timestamp": 1752256385.925615
  },
  {
    "mbpp_id": 288,
    "problem": {
      "task_id": 288,
      "text": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
      "code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
      "test_list": [
        "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
        "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
        "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count array elements having modular inverse under given prime number p equal to itself.\n\nTask ID: 288\n\nExpected behavior (test cases):\n1. modular_inverse([ 1, 6, 4, 5 ], 4, 7) should return 2\n2. modular_inverse([1, 3, 8, 12, 12], 5, 13) should return 3\n3. modular_inverse([2, 3, 4, 5], 4, 6) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def modular_inverse(a_list,p):\r\n    result = [0]*len(a_list)\r\n    for i in range(len(a_list)):\r\n        result[i] = pow((a_list[i]),-1 ,p)\r\n    return (result) "
          }
        }
      ],
      "usage": {
        "total_tokens": 223,
        "prompt_tokens": 182,
        "completion_tokens": 48
      }
    },
    "timestamp": 1752256390.0790644
  },
  {
    "mbpp_id": 289,
    "problem": {
      "task_id": 289,
      "text": "Write a python function to calculate the number of odd days in a given year.",
      "code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ",
      "test_list": [
        "assert odd_Days(100) == 5",
        "assert odd_Days(50) ==6",
        "assert odd_Days(75) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to calculate the number of odd days in a given year.\n\nTask ID: 289\n\nExpected behavior (test cases):\n1. odd_Days(100) should return 5\n2. odd_Days(50) ==6\n3. odd_Days(75) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def odd_Days(y):\r\n    d= y%400\r\n    if d==0:\r\n        print(d)\r\n    else:\r\n        d = y % 100\r\n        if d == 0:\r\n            d = y % 4\r\n            if d != 0:\r\n                return 1 + ((y-2) / 4)\r\n        elif d == 1:\r\n            return 0\r\n        else:\r\n            return (d - 1) / 4"
          }
        }
      ],
      "usage": {
        "total_tokens": 225,
        "prompt_tokens": 132,
        "completion_tokens": 100
      }
    },
    "timestamp": 1752256397.8499277
  },
  {
    "mbpp_id": 290,
    "problem": {
      "task_id": 290,
      "text": "Write a function to find the list of lists with maximum length.",
      "code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
      "test_list": [
        "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
        "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
        "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the list of lists with maximum length.\n\nTask ID: 290\n\nExpected behavior (test cases):\n1. max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n2. max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n3. max_length([[5], [15,20,25]])==(3, [15,20,25])\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_length(test_list):\r\n    res = []\r\n    for i in test_list:\r\n        if len(i) > len(res[0]):\r\n            res.clear()\r\n            res.append(i)\r\n        elif len(i) == len(res[0]) and i not in res:\r\n            res.append(i)\r\n    return tuple(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 274,
        "prompt_tokens": 217,
        "completion_tokens": 64
      }
    },
    "timestamp": 1752256403.2853842
  },
  {
    "mbpp_id": 291,
    "problem": {
      "task_id": 291,
      "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
      "code": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]",
      "test_list": [
        "assert count_no_of_ways(2, 4) == 16",
        "assert count_no_of_ways(3, 2) == 6",
        "assert count_no_of_ways(4, 4) == 228"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\nTask ID: 291\n\nExpected behavior (test cases):\n1. count_no_of_ways(2, 4) should return 16\n2. count_no_of_ways(3, 2) should return 6\n3. count_no_of_ways(4, 4) should return 228\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_no_of_ways(n,k):\r\n    if(k == 1):return 1\r\n    dp = [0] * n\r\n    dp[0],dp[1] = 1 , k \r\n    for i in range(2,n):\r\n        dp[i] = ((k - 1)*(dp[i-1]+dp[i-2])) % 10**9 + 7  \r\n    return sum(dp)% 10**9 + 7"
          }
        }
      ],
      "usage": {
        "total_tokens": 259,
        "prompt_tokens": 169,
        "completion_tokens": 97
      }
    },
    "timestamp": 1752256411.3195226
  },
  {
    "mbpp_id": 292,
    "problem": {
      "task_id": 292,
      "text": "Write a python function to find quotient of two numbers.",
      "code": "def find(n,m):  \r\n    q = n//m \r\n    return (q)",
      "test_list": [
        "assert find(10,3) == 3",
        "assert find(4,2) == 2",
        "assert find(20,5) == 4"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find quotient of two numbers.\n\nTask ID: 292\n\nExpected behavior (test cases):\n1. find(10,3) should return 3\n2. find(4,2) should return 2\n3. find(20,5) should return 4\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find(a,b): \r\n\treturn a//b"
          }
        }
      ],
      "usage": {
        "total_tokens": 130,
        "prompt_tokens": 127,
        "completion_tokens": 10
      }
    },
    "timestamp": 1752256412.6216764
  },
  {
    "mbpp_id": 293,
    "problem": {
      "task_id": 293,
      "text": "Write a function to find the third side of a right angled triangle.",
      "code": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s",
      "test_list": [
        "assert otherside_rightangle(7,8)==10.63014581273465",
        "assert otherside_rightangle(3,4)==5",
        "assert otherside_rightangle(7,15)==16.55294535724685"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the third side of a right angled triangle.\n\nTask ID: 293\n\nExpected behavior (test cases):\n1. otherside_rightangle(7,8)==10.63014581273465\n2. otherside_rightangle(3,4)==5\n3. otherside_rightangle(7,15)==16.55294535724685\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def otherside_rightangle(a,b):\r\n   c = ((a**2+b**2)**0.5)\r\n   return(c)"
          }
        }
      ],
      "usage": {
        "total_tokens": 181,
        "prompt_tokens": 161,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752256415.168608
  },
  {
    "mbpp_id": 294,
    "problem": {
      "task_id": 294,
      "text": "Write a function to find the maximum value in a given heterogeneous list.",
      "code": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)",
      "test_list": [
        "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
        "assert max_val(['Python', 15, 20, 25])==25",
        "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum value in a given heterogeneous list.\n\nTask ID: 294\n\nExpected behavior (test cases):\n1. max_val(['Python', 3, 2, 4, 5, 'version'])==5\n2. max_val(['Python', 15, 20, 25])==25\n3. max_val(['Python', 30, 20, 40, 50, 'version'])==50\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_val(lst):\r\n    result = lst[0]\r\n    for i in range(1, len(lst)):\r\n        if lst[i] > result:\r\n            result = lst[i]\r\n    return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 199,
        "prompt_tokens": 166,
        "completion_tokens": 40
      }
    },
    "timestamp": 1752256418.6730194
  },
  {
    "mbpp_id": 295,
    "problem": {
      "task_id": 295,
      "text": "Write a function to return the sum of all divisors of a number.",
      "code": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
      "test_list": [
        "assert sum_div(8)==7",
        "assert sum_div(12)==16",
        "assert sum_div(7)==1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to return the sum of all divisors of a number.\n\nTask ID: 295\n\nExpected behavior (test cases):\n1. sum_div(8)==7\n2. sum_div(12)==16\n3. sum_div(7)==1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_div(n):\r\n    res = 0\r\n    for i in range(1, n + 1):\r\n        if (n % i == 0):\r\n            res += i\r\n    return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 155,
        "prompt_tokens": 119,
        "completion_tokens": 43
      }
    },
    "timestamp": 1752256422.4464903
  },
  {
    "mbpp_id": 296,
    "problem": {
      "task_id": 296,
      "text": "Write a python function to count inversions in an array.",
      "code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ",
      "test_list": [
        "assert get_Inv_Count([1,20,6,4,5],5) == 5",
        "assert get_Inv_Count([1,2,1],3) == 1",
        "assert get_Inv_Count([1,2,5,6,1],5) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count inversions in an array.\n\nTask ID: 296\n\nExpected behavior (test cases):\n1. get_Inv_Count([1,20,6,4,5],5) should return 5\n2. get_Inv_Count([1,2,1],3) should return 1\n3. get_Inv_Count([1,2,5,6,1],5) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_inv_count(arr,n):\r\n    res = 0\r\n    for i in range(n): \r\n        for j in range(i + 1, n): \r\n            if arr[i] > arr[j]: \r\n                res += 1  \r\n    return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 203,
        "prompt_tokens": 156,
        "completion_tokens": 54
      }
    },
    "timestamp": 1752256427.0768979
  },
  {
    "mbpp_id": 297,
    "problem": {
      "task_id": 297,
      "text": "Write a function to flatten a given nested list structure.",
      "code": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ",
      "test_list": [
        "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
        "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to flatten a given nested list structure.\n\nTask ID: 297\n\nExpected behavior (test cases):\n1. flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n2. flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n3. flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def flatten_list(nestedList):\r\n    result = []\r\n    for item in nestedList:\r\n        if type(item) == int:\r\n            result.append(item)\r\n        else:\r\n            result.extend(flatten_list(item))\r\n    return result "
          }
        }
      ],
      "usage": {
        "total_tokens": 398,
        "prompt_tokens": 359,
        "completion_tokens": 46
      }
    },
    "timestamp": 1752256431.27233
  },
  {
    "mbpp_id": 298,
    "problem": {
      "task_id": 298,
      "text": "Write a function to find the nested list elements which are present in another list.",
      "code": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result",
      "test_list": [
        "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
        "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
        "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the nested list elements which are present in another list.\n\nTask ID: 298\n\nExpected behavior (test cases):\n1. intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n2. intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\n3. intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def intersection_nested_lists(list_1,list_2):\r\n    result = []\r\n    for sublist_1 in list_1:\r\n        if set(sublist_1).issubset(set(list_2)):\r\n            result.append(sublist_1)\r\n    return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 359,
        "prompt_tokens": 314,
        "completion_tokens": 52
      }
    },
    "timestamp": 1752256435.871174
  },
  {
    "mbpp_id": 299,
    "problem": {
      "task_id": 299,
      "text": "Write a function to calculate the maximum aggregate from the list of tuples.",
      "code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
      "test_list": [
        "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
        "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
        "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the maximum aggregate from the list of tuples.\n\nTask ID: 299\n\nExpected behavior (test cases):\n1. max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n2. max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n3. max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_aggregate(lst):\r\n    lst = sorted(lst, key=lambda x: -x[1])\r\n    return lst[0] "
          }
        }
      ],
      "usage": {
        "total_tokens": 280,
        "prompt_tokens": 259,
        "completion_tokens": 28
      }
    },
    "timestamp": 1752256438.6701396
  },
  {
    "mbpp_id": 300,
    "problem": {
      "task_id": 300,
      "text": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
      "code": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ",
      "test_list": [
        "assert count_binary_seq(1) == 2.0",
        "assert count_binary_seq(2) == 6.0",
        "assert count_binary_seq(3) == 20.0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\nTask ID: 300\n\nExpected behavior (test cases):\n1. count_binary_seq(1) should return 2.0\n2. count_binary_seq(2) should return 6.0\n3. count_binary_seq(3) should return 20.0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_binary_seq(n):\r\n    if (n % 2 == 0):\r\n        return pow(2, n)\r\n    else:\r\n        return 0"
          }
        }
      ],
      "usage": {
        "total_tokens": 178,
        "prompt_tokens": 153,
        "completion_tokens": 32
      }
    },
    "timestamp": 1752256441.7777588
  },
  {
    "mbpp_id": 301,
    "problem": {
      "task_id": 301,
      "text": "Write a function to find the depth of a dictionary.",
      "code": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0",
      "test_list": [
        "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
        "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
        "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the depth of a dictionary.\n\nTask ID: 301\n\nExpected behavior (test cases):\n1. dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n2. dict_depth({'a':1, 'b': {'c':'python'}})==2\n3. dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def dict_depth(d):\r\n  return max(map(dict_depth, d.values()), default=1) + 1 if isinstance(d, dict) else 1"
          }
        }
      ],
      "usage": {
        "total_tokens": 179,
        "prompt_tokens": 155,
        "completion_tokens": 31
      }
    },
    "timestamp": 1752256444.600259
  },
  {
    "mbpp_id": 302,
    "problem": {
      "task_id": 302,
      "text": "Write a python function to find the most significant bit number which is also a set bit.",
      "code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
      "test_list": [
        "assert set_Bit_Number(6) == 4",
        "assert set_Bit_Number(10) == 8",
        "assert set_Bit_Number(18) == 16"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the most significant bit number which is also a set bit.\n\nTask ID: 302\n\nExpected behavior (test cases):\n1. set_Bit_Number(6) should return 4\n2. set_Bit_Number(10) should return 8\n3. set_Bit_Number(18) should return 16\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def set_Bit_Number(n):\r\n    # Initialize count of bits set in binary form\r\n    c = 1\r\n\r\n    # Loop until n becomes zero\r\n    while (n != 0):\r\n\r\n        # Find the least significant bit set in binary representation\r\n        lsb_set_bit = ((n & -n))\r\n\r\n        # If found, add it to count\r\n        if (lsb_set_bit == c):\r\n            return c\r\n\r\n        # Move to next set bit and increment count\r\n        n -= lsb_set_bit\r\n        c += 1\r\n\r\n    # Return count after loop ends (all bits have been checked)\r\n    return c"
          }
        }
      ],
      "usage": {
        "total_tokens": 261,
        "prompt_tokens": 138,
        "completion_tokens": 130
      }
    },
    "timestamp": 1752256454.8763957
  },
  {
    "mbpp_id": 303,
    "problem": {
      "task_id": 303,
      "text": "Write a python function to check whether the count of inversion of two types are same or not.",
      "code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
      "test_list": [
        "assert solve([1,0,2],3) == True",
        "assert solve([1,2,0],3) == False",
        "assert solve([1,2,1],3) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the count of inversion of two types are same or not.\n\nTask ID: 303\n\nExpected behavior (test cases):\n1. solve([1,0,2],3) should return True\n2. solve([1,2,0],3) should return False\n3. solve([1,2,1],3) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def solve(arr,n):\r\n    if n == 0:\r\n        return False\r\n    i = j = 0\r\n    cnt1, cnt2 = 0, 0\r\n    while(i < n and j < n):\r\n        if arr[i] > arr[j]:\r\n            cnt1 += 1\r\n        elif arr[i] < arr[j]:\r\n            cnt2 += 1\r\n        i += 1\r\n        j += 1\r\n    if(cnt1 == cnt2):\r\n        return True\r\n    else:\r\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 244,
        "prompt_tokens": 142,
        "completion_tokens": 109
      }
    },
    "timestamp": 1752256463.6112525
  },
  {
    "mbpp_id": 304,
    "problem": {
      "task_id": 304,
      "text": "Write a python function to find element at a given index after number of rotations.",
      "code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ",
      "test_list": [
        "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
        "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
        "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find element at a given index after number of rotations.\n\nTask ID: 304\n\nExpected behavior (test cases):\n1. find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) should return 3\n2. find_Element([1,2,3,4],[[0,1],[0,2]],1,2) should return 3\n3. find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Element(nums,target,index):\r\n    if(index>=len(nums)):\r\n        index%=len(nums)\r\n    count=0\r\n    for i in range(len(nums)):\r\n        if(count==index and nums[i]==target):\r\n            return i\r\n        else:\r\n            count+=1\r\n    return -1"
          }
        }
      ],
      "usage": {
        "total_tokens": 243,
        "prompt_tokens": 190,
        "completion_tokens": 60
      }
    },
    "timestamp": 1752256468.844802
  },
  {
    "mbpp_id": 305,
    "problem": {
      "task_id": 305,
      "text": "Write a function to match two words from a list of words starting with letter 'p'.",
      "code": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()",
      "test_list": [
        "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
        "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
        "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to match two words from a list of words starting with letter 'p'.\n\nTask ID: 305\n\nExpected behavior (test cases):\n1. start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n2. start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n3. start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef start_withp(word_list):\r\n    pattern = r'p\\w+'\r\n    matches = []\r\n    for word in word_list:\r\n        if re.search(pattern,word) is not None:\r\n            matches.append((word,re.search(pattern,word).group()))\r\n    return matches[0] if len(matches)>0 else ('Not found')"
          }
        }
      ],
      "usage": {
        "total_tokens": 223,
        "prompt_tokens": 158,
        "completion_tokens": 72
      }
    },
    "timestamp": 1752256474.8673637
  },
  {
    "mbpp_id": 306,
    "problem": {
      "task_id": 306,
      "text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
      "code": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
      "test_list": [
        "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
        "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
        "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\nTask ID: 306\n\nExpected behavior (test cases):\n1. max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) should return 11\n2. max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) should return 7\n3. max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) should return 71\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_sum_increasing_subseq(arr,n,k,j):\r\n    for i in range(n+1):\r\n        dp = [arr[i] if i < j else 0]\r\n        for val in arr[:i]:\r\n            if not dp:\r\n                break\r\n            if val >= arr[i]:\r\n                dp.append(dp[-1]+val)\r\n        # print('dp', dp)\r\n\r\n        result = -float(\"inf\")\r\n        for idx,val in enumerate(dp[1:]):\r\n            if val == 0:\r\n                continue\r\n\r\n            temp = dp[idx-1] + dp[-1]\r\n            result = max(result,temp)\r\n        # print(result, end=\" \")\r\n        if result <= arr[k] and k <= n:\r\n            return arr[k]\r\n        elif len(dp) == n + 1:\r\n            return 0\r\n        else:\r\n            arr.pop(0)\r\n            arr.insert(i, arr.pop(k))\r\n            # print(arr, 'after pop')\r\n    return 0"
          }
        }
      ],
      "usage": {
        "total_tokens": 448,
        "prompt_tokens": 258,
        "completion_tokens": 197
      }
    },
    "timestamp": 1752256490.373326
  },
  {
    "mbpp_id": 307,
    "problem": {
      "task_id": 307,
      "text": "Write a function to get a colon of a tuple.",
      "code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
      "test_list": [
        "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
        "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
        "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to get a colon of a tuple.\n\nTask ID: 307\n\nExpected behavior (test cases):\n1. colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n2. colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\n3. colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def colon_tuplex(t,n,val):\r\n    t=tuple(list(t)[n-1:n]+[val]+list(t)[n::])\r\n    return t"
          }
        }
      ],
      "usage": {
        "total_tokens": 222,
        "prompt_tokens": 196,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752256493.4646518
  },
  {
    "mbpp_id": 308,
    "problem": {
      "task_id": 308,
      "text": "Write a function to find the specified number of largest products from two given lists.",
      "code": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result",
      "test_list": [
        "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
        "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
        "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the specified number of largest products from two given lists.\n\nTask ID: 308\n\nExpected behavior (test cases):\n1. large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n2. large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n3. large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def large_product(l1,l2,n):\r\n    l=[]\r\n    for i in range(len(l1)):\r\n        if n==len(l2):\r\n            break\r\n        temp = l1[i]*l2[n]\r\n        l.append(temp)\r\n    return (sorted(l))[:n]"
          }
        }
      ],
      "usage": {
        "total_tokens": 315,
        "prompt_tokens": 265,
        "completion_tokens": 57
      }
    },
    "timestamp": 1752256498.3497815
  },
  {
    "mbpp_id": 309,
    "problem": {
      "task_id": 309,
      "text": "Write a python function to find the maximum of two numbers.",
      "code": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ",
      "test_list": [
        "assert maximum(5,10) == 10",
        "assert maximum(-1,-2) == -1",
        "assert maximum(9,7) == 9"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the maximum of two numbers.\n\nTask ID: 309\n\nExpected behavior (test cases):\n1. maximum(5,10) should return 10\n2. maximum(-1,-2) should return -1\n3. maximum(9,7) should return 9\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def maximum(x,y):\r\n    if x>y:\r\n        return x\r\n    else:\r\n        return y"
          }
        }
      ],
      "usage": {
        "total_tokens": 141,
        "prompt_tokens": 128,
        "completion_tokens": 20
      }
    },
    "timestamp": 1752256500.5178897
  },
  {
    "mbpp_id": 310,
    "problem": {
      "task_id": 310,
      "text": "Write a function to convert a given string to a tuple.",
      "code": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result",
      "test_list": [
        "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
        "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
        "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert a given string to a tuple.\n\nTask ID: 310\n\nExpected behavior (test cases):\n1. string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n2. string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\n3. string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def string_to_tuple(string):\r\n  return tuple(list(string))"
          }
        }
      ],
      "usage": {
        "total_tokens": 178,
        "prompt_tokens": 173,
        "completion_tokens": 12
      }
    },
    "timestamp": 1752256502.151783
  },
  {
    "mbpp_id": 311,
    "problem": {
      "task_id": 311,
      "text": "Write a python function to set the left most unset bit.",
      "code": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ",
      "test_list": [
        "assert set_left_most_unset_bit(10) == 14",
        "assert set_left_most_unset_bit(12) == 14",
        "assert set_left_most_unset_bit(15) == 15"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to set the left most unset bit.\n\nTask ID: 311\n\nExpected behavior (test cases):\n1. set_left_most_unset_bit(10) should return 14\n2. set_left_most_unset_bit(12) should return 14\n3. set_left_most_unset_bit(15) should return 15\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def set_left_most_unset_bit(n): \r\n\treturn n | (n - ((n >> 1) & n))"
          }
        }
      ],
      "usage": {
        "total_tokens": 155,
        "prompt_tokens": 138,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752256504.814687
  },
  {
    "mbpp_id": 312,
    "problem": {
      "task_id": 312,
      "text": "Write a function to find the volume of a cone.",
      "code": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
      "test_list": [
        "assert volume_cone(5,12)==314.15926535897927",
        "assert volume_cone(10,15)==1570.7963267948965",
        "assert volume_cone(19,17)==6426.651371693521"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the volume of a cone.\n\nTask ID: 312\n\nExpected behavior (test cases):\n1. volume_cone(5,12)==314.15926535897927\n2. volume_cone(10,15)==1570.7963267948965\n3. volume_cone(19,17)==6426.651371693521\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef volume_cone(radius,height):\r\n    return 1/3*math.pi*radius**2*height"
          }
        }
      ],
      "usage": {
        "total_tokens": 194,
        "prompt_tokens": 177,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752256507.3678916
  },
  {
    "mbpp_id": 313,
    "problem": {
      "task_id": 313,
      "text": "Write a python function to print positive numbers in a list.",
      "code": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ",
      "test_list": [
        "assert pos_nos([-1,-2,1,2]) == 1,2",
        "assert pos_nos([3,4,-5]) == 3,4",
        "assert pos_nos([-2,-3,1]) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to print positive numbers in a list.\n\nTask ID: 313\n\nExpected behavior (test cases):\n1. pos_nos([-1,-2,1,2]) should return 1,2\n2. pos_nos([3,4,-5]) should return 3,4\n3. pos_nos([-2,-3,1]) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def pos_nos(arr): \r\n    l = [x for x in arr if x > 0]  \r\n    return l "
          }
        }
      ],
      "usage": {
        "total_tokens": 164,
        "prompt_tokens": 144,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752256510.1261346
  },
  {
    "mbpp_id": 314,
    "problem": {
      "task_id": 314,
      "text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
      "code": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)",
      "test_list": [
        "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
        "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
        "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\nTask ID: 314\n\nExpected behavior (test cases):\n1. max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) should return 7\n2. max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) should return 24\n3. max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) should return 81\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_sum_rectangular_grid(arr,n): \r\n    # Initializing variables with first row elements \r\n    temp = [[arr[0][j] if j != 0 else 0\r\n             for j in range(n + 1)] for i in range(2)]\r\n    res = -float(\"inf\")\r\n    \r\n    # Computing max sum subarray ending at each column index from left to right\r\n    for col in range(1, n + 1):\r\n        for k in range(2):\r\n            for j in range(col):\r\n                temp[k][col] += max(temp[(k ^ 1)][j],\r\n                                   temp[(k ^ 1)][j + 1])\r\n                res = max(res, temp[k][col]) \r\n    return (res) "
          }
        }
      ],
      "usage": {
        "total_tokens": 396,
        "prompt_tokens": 246,
        "completion_tokens": 157
      }
    },
    "timestamp": 1752256522.9460404
  },
  {
    "mbpp_id": 315,
    "problem": {
      "task_id": 315,
      "text": "Write a python function to find the first maximum length of even word.",
      "code": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ",
      "test_list": [
        "assert find_Max_Len_Even(\"python language\") == \"language\"",
        "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
        "assert find_Max_Len_Even(\"eve\") == \"-1\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the first maximum length of even word.\n\nTask ID: 315\n\nExpected behavior (test cases):\n1. find_Max_Len_Even(\"python language\") should return \"language\"\n2. find_Max_Len_Even(\"maximum even length\") should return \"length\"\n3. find_Max_Len_Even(\"eve\") should return \"-1\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Max_Len_Even(str): \r\n    for i in str.split(): \r\n        if (i[-1] == 'e' and int(i) % 2 == 0): \r\n            return i\r\n    return -1"
          }
        }
      ],
      "usage": {
        "total_tokens": 182,
        "prompt_tokens": 140,
        "completion_tokens": 49
      }
    },
    "timestamp": 1752256527.37723
  },
  {
    "mbpp_id": 316,
    "problem": {
      "task_id": 316,
      "text": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
      "code": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ",
      "test_list": [
        "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
        "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
        "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the index of the last occurrence of a given number in a sorted array.\n\nTask ID: 316\n\nExpected behavior (test cases):\n1. find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) should return 3\n2. find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) should return 9\n3. find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) should return 6\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_last_occurrence(arr, x):\r\n  result = -1\r\n  for i in range(len(arr)-1,-1,-1):  \r\n    if arr[i] == x:\r\n      result = i\r\n  return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 266,
        "prompt_tokens": 227,
        "completion_tokens": 46
      }
    },
    "timestamp": 1752256531.4947731
  },
  {
    "mbpp_id": 317,
    "problem": {
      "task_id": 317,
      "text": "Write a function to reflect the modified run-length encoding from a list.",
      "code": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]",
      "test_list": [
        "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
        "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
        "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to reflect the modified run-length encoding from a list.\n\nTask ID: 317\n\nExpected behavior (test cases):\n1. modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n2. modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n3. modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def modified_encode(list):\r\n  newlist=[]\r\n  for i in range(len(list)):\r\n    if type(list[i]) == int:\r\n      while True:\r\n        newlist.append([list[i]])\r\n        break\r\n    else:\r\n      newlist[-1].append(list[i])\r\n  return newlist"
          }
        }
      ],
      "usage": {
        "total_tokens": 258,
        "prompt_tokens": 206,
        "completion_tokens": 59
      }
    },
    "timestamp": 1752256536.496602
  },
  {
    "mbpp_id": 318,
    "problem": {
      "task_id": 318,
      "text": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
      "code": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ",
      "test_list": [
        "assert max_volume(8) == 18",
        "assert max_volume(4) == 2",
        "assert max_volume(1) == 0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the maximum volume of a cuboid with given sum of sides.\n\nTask ID: 318\n\nExpected behavior (test cases):\n1. max_volume(8) should return 18\n2. max_volume(4) should return 2\n3. max_volume(1) should return 0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_volume(a,b,c):\r\n  res= ((a*b*c)+(a+b+c)) / 3\r\n  if (res > 9) :\r\n    return 18 \r\n  elif (res < 3 ):\r\n    return 2    \r\n  else :    \r\n   return 6"
          }
        }
      ],
      "usage": {
        "total_tokens": 184,
        "prompt_tokens": 131,
        "completion_tokens": 60
      }
    },
    "timestamp": 1752256541.6180522
  },
  {
    "mbpp_id": 319,
    "problem": {
      "task_id": 319,
      "text": "Write a function to find all five characters long word in the given string by using regex.",
      "code": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))",
      "test_list": [
        "assert find_long_word('Please move back to strem') == ['strem']",
        "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
        "assert find_long_word('Streaming Media Player') == ['Media']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find all five characters long word in the given string by using regex.\n\nTask ID: 319\n\nExpected behavior (test cases):\n1. find_long_word('Please move back to strem') should return ['strem']\n2. find_long_word('4K Ultra HD streaming player') should return ['Ultra']\n3. find_long_word('Streaming Media Player') should return ['Media']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef find_long_word(str):\r\n    res = []\r\n    ptn = r'\\b[a-zA-Z]{5}\\b'\r\n    for ele in re.findall(ptn, str):\r\n        if len(ele) == 5:\r\n            res.append(ele)\r\n    return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 195,
        "prompt_tokens": 145,
        "completion_tokens": 57
      }
    },
    "timestamp": 1752256546.4605086
  },
  {
    "mbpp_id": 320,
    "problem": {
      "task_id": 320,
      "text": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
      "code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares",
      "test_list": [
        "assert sum_difference(12)==5434",
        "assert sum_difference(20)==41230",
        "assert sum_difference(54)==2151270"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\nTask ID: 320\n\nExpected behavior (test cases):\n1. sum_difference(12)==5434\n2. sum_difference(20)==41230\n3. sum_difference(54)==2151270\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_square_diff(n):\r\n    sum_n = (n * (n + 1) / 2)\r\n    square_sum = ((n+1)**2 - 1)/6\r\n    return int(square_sum - sum_n)"
          }
        }
      ],
      "usage": {
        "total_tokens": 185,
        "prompt_tokens": 144,
        "completion_tokens": 48
      }
    },
    "timestamp": 1752256550.9341533
  },
  {
    "mbpp_id": 321,
    "problem": {
      "task_id": 321,
      "text": "Write a function to find the demlo number for the given number.",
      "code": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t",
      "test_list": [
        "assert find_demlo(\"111111\") == '12345654321'",
        "assert find_demlo(\"1111\") == '1234321'",
        "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the demlo number for the given number.\n\nTask ID: 321\n\nExpected behavior (test cases):\n1. find_demlo(\"111111\") should return '12345654321'\n2. find_demlo(\"1111\") should return '1234321'\n3. find_demlo(\"13333122222\") should return '123456789101110987654321'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_demlo(number):\r\n    demlo_number = ''\r\n    if len(number) % 2 == 0:\r\n        for i in range(len(number)//2):\r\n            demlo_number += str(int(number[i]) + int(number[len(number) - i - 1]))\r\n    else:\r\n        for i in range(len(number) // 2):\r\n            demlo_number += str(int(number[i]) + int(number[len(number) - i - 1])) \r\n        demlo_number += str(int(number[-1]))\r\n    return demlo_number"
          }
        }
      ],
      "usage": {
        "total_tokens": 288,
        "prompt_tokens": 185,
        "completion_tokens": 110
      }
    },
    "timestamp": 1752256559.5405233
  },
  {
    "mbpp_id": 322,
    "problem": {
      "task_id": 322,
      "text": "Write a function to find all index positions of the minimum values in a given list.",
      "code": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result",
      "test_list": [
        "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
        "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
        "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find all index positions of the minimum values in a given list.\n\nTask ID: 322\n\nExpected behavior (test cases):\n1. position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n2. position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\n3. position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def position_min(a):\r\n    l=len(a)\r\n    min=a.index(min(a))\r\n    return min,l-min-1"
          }
        }
      ],
      "usage": {
        "total_tokens": 225,
        "prompt_tokens": 208,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752256562.0475187
  },
  {
    "mbpp_id": 323,
    "problem": {
      "task_id": 323,
      "text": "Write a function to re-arrange the given array in alternating positive and negative items.",
      "code": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr",
      "test_list": [
        "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
        "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
        "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to re-arrange the given array in alternating positive and negative items.\n\nTask ID: 323\n\nExpected behavior (test cases):\n1. re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) should return [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n2. re_arrange([1, 2, 3, -4, -1, 4], 6) should return [-4, 1, -1, 2, 3, 4]\n3. re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) should return [-4, 4, -3, 7, -9, 9, 77, 5]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def re_arrange(nums, n): \r\n\tarr = [0] * (n) \r\n\ti = 0\r\n\tj = n - 1\r\n\tpos = 0\r\n\twhile (pos <= j): \r\n\t\tif (i == pos or i > j): \r\n\t\t\tarr[pos] = nums[i] \r\n\t\t\ti += 1\r\n\t\telse: \r\n\t\t\tarr[pos] = nums[j] \r\n\t\t\tj -= 1\r\n\t\tpos += 1\r\n\treturn arr"
          }
        }
      ],
      "usage": {
        "total_tokens": 360,
        "prompt_tokens": 270,
        "completion_tokens": 97
      }
    },
    "timestamp": 1752256569.605989
  },
  {
    "mbpp_id": 324,
    "problem": {
      "task_id": 324,
      "text": "Write a function to extract the sum of alternate chains of tuples.",
      "code": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ",
      "test_list": [
        "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
        "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
        "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract the sum of alternate chains of tuples.\n\nTask ID: 324\n\nExpected behavior (test cases):\n1. sum_of_alternates((5, 6, 3, 6, 10, 34)) should return (46, 18)\n2. sum_of_alternates((1, 2, 3, 4, 5)) should return (6, 9)\n3. sum_of_alternates((6, 7, 8, 9, 4, 5)) should return (21, 18)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_of_alternates(test_list):\r\n  # list comprehension\r\n  res = [(x + y) for i in range(0, len(test_list), 2)]\r\n  # zip two lists together \r\n  final_res = [sum(test_list[i:i+2]) for i in range(0,len(test_list),2)]\r\n  return final_res, res "
          }
        }
      ],
      "usage": {
        "total_tokens": 254,
        "prompt_tokens": 187,
        "completion_tokens": 74
      }
    },
    "timestamp": 1752256575.9450793
  },
  {
    "mbpp_id": 325,
    "problem": {
      "task_id": 325,
      "text": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
      "code": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;",
      "test_list": [
        "assert get_Min_Squares(6) == 3",
        "assert get_Min_Squares(2) == 2",
        "assert get_Min_Squares(4) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the minimum number of squares whose sum is equal to a given number.\n\nTask ID: 325\n\nExpected behavior (test cases):\n1. get_Min_Squares(6) should return 3\n2. get_Min_Squares(2) should return 2\n3. get_Min_Squares(4) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef get_Min_Squares(n):\r\n    res = n - 1 + int(math.log((n+1), 2))\r\n    if ((math.factorial(res)) / (math.factorial(int(res / 2))) == (res % 2)):\r\n        return int(math.sqrt(n))+int(math.floor(math.sqrt(n)))\r\n    else:\r\n        return int(math.sqrt(n))"
          }
        }
      ],
      "usage": {
        "total_tokens": 209,
        "prompt_tokens": 137,
        "completion_tokens": 79
      }
    },
    "timestamp": 1752256582.522776
  },
  {
    "mbpp_id": 326,
    "problem": {
      "task_id": 326,
      "text": "Write a function to get the word with most number of occurrences in the given strings list.",
      "code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ",
      "test_list": [
        "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
        "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
        "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to get the word with most number of occurrences in the given strings list.\n\nTask ID: 326\n\nExpected behavior (test cases):\n1. most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) should return 'UTS'\n2. most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) should return 'year'\n3. most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) should return 'can'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def most_occurrences(list): \r\n    count = 0\r\n    num_words = [\"for\",\"in\",\"the\"]\r\n    string_list = []\r\n    \r\n    # Get rid of words that are not part of our set of words\r\n    for i in range(len(list)):\r\n        for j in range(4):\r\n            if (list[i].count(num_words[j]) > 0):\r\n                string_list.append(list[i])\r\n            else:\r\n                continue\r\n    \r\n    # Now find the longest word\r\n    temp_string = \"\"\r\n    length_of_longest_word = len(string_list[0])\r\n    for k in range(len(string_list)):\r\n        if (len(string_list[k]) >= length_of_longest_word):\r\n            temp_string = string_list[k]\r\n            length_of_longest_word = len(temp_string)\r\n      \r\n    # Return the longest word found \r\n    return temp_string"
          }
        }
      ],
      "usage": {
        "total_tokens": 353,
        "prompt_tokens": 188,
        "completion_tokens": 172
      }
    },
    "timestamp": 1752256595.778184
  },
  {
    "mbpp_id": 327,
    "problem": {
      "task_id": 327,
      "text": "Write a function to print check if the triangle is isosceles or not.",
      "code": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False",
      "test_list": [
        "assert check_isosceles(6,8,12)==False ",
        "assert check_isosceles(6,6,12)==True",
        "assert check_isosceles(6,16,20)==False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to print check if the triangle is isosceles or not.\n\nTask ID: 327\n\nExpected behavior (test cases):\n1. check_isosceles(6,8,12)==False \n2. check_isosceles(6,6,12)==True\n3. check_isosceles(6,16,20)==False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_isosceles(a,b,c):\r\n    if (a==b) and (c!=a):\r\n        return(True)\r\n    elif (a==c) and (b!=a):\r\n        return(True)\r\n    else:\r\n        return(False)"
          }
        }
      ],
      "usage": {
        "total_tokens": 188,
        "prompt_tokens": 144,
        "completion_tokens": 51
      }
    },
    "timestamp": 1752256600.1333623
  },
  {
    "mbpp_id": 328,
    "problem": {
      "task_id": 328,
      "text": "Write a function to rotate a given list by specified number of items to the left direction.",
      "code": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result",
      "test_list": [
        "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
        "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
        "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to rotate a given list by specified number of items to the left direction.\n\nTask ID: 328\n\nExpected behavior (test cases):\n1. rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n2. rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n3. rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def rotate_left(arr,n,k): \r\n    k = k % n\r\n    if(k == 0):\r\n        return arr \r\n    l = n - k\r\n    temp = arr[l:n]\r\n    for i in range(l-1,-1,-1):\r\n        arr[i + k] = arr[i] \r\n    for i in range(0,l):\r\n        arr[i] = temp[i] \r\n    return arr"
          }
        }
      ],
      "usage": {
        "total_tokens": 375,
        "prompt_tokens": 297,
        "completion_tokens": 85
      }
    },
    "timestamp": 1752256606.9980068
  },
  {
    "mbpp_id": 329,
    "problem": {
      "task_id": 329,
      "text": "Write a python function to count negative numbers in a list.",
      "code": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ",
      "test_list": [
        "assert neg_count([-1,-2,3,-4,-5]) == 4",
        "assert neg_count([1,2,3]) == 0",
        "assert neg_count([1,2,-3,-10,20]) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count negative numbers in a list.\n\nTask ID: 329\n\nExpected behavior (test cases):\n1. neg_count([-1,-2,3,-4,-5]) should return 4\n2. neg_count([1,2,3]) should return 0\n3. neg_count([1,2,-3,-10,20]) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def neg_count(arr):\r\n    counter = 0\r\n    for i in arr:\r\n        if(i<0):\r\n            counter += 1 \r\n    return counter "
          }
        }
      ],
      "usage": {
        "total_tokens": 171,
        "prompt_tokens": 145,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752256610.1692667
  },
  {
    "mbpp_id": 330,
    "problem": {
      "task_id": 330,
      "text": "Write a function to find all three, four, five characters long words in the given string by using regex.",
      "code": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))",
      "test_list": [
        "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
        "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
        "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find all three, four, five characters long words in the given string by using regex.\n\nTask ID: 330\n\nExpected behavior (test cases):\n1. find_char('For the four consumer complaints contact manager AKR reddy') should return ['For', 'the', 'four', 'AKR', 'reddy']\n2. find_char('Certain service are subject to change MSR') should return ['are', 'MSR']\n3. find_char('Third party legal desclaimers') should return ['Third', 'party', 'legal']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef find_char(string):\r\n    res = [i for i in string.split() if len(i) == 3 or len(i)==4 or len(i)==5]\r\n    return (res) "
          }
        }
      ],
      "usage": {
        "total_tokens": 214,
        "prompt_tokens": 178,
        "completion_tokens": 43
      }
    },
    "timestamp": 1752256613.852983
  },
  {
    "mbpp_id": 331,
    "problem": {
      "task_id": 331,
      "text": "Write a python function to count unset bits of a given number.",
      "code": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ",
      "test_list": [
        "assert count_unset_bits(2) == 1",
        "assert count_unset_bits(4) == 2",
        "assert count_unset_bits(6) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count unset bits of a given number.\n\nTask ID: 331\n\nExpected behavior (test cases):\n1. count_unset_bits(2) should return 1\n2. count_unset_bits(4) should return 2\n3. count_unset_bits(6) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_unset_bits(n): \r\n    count = 0\r\n    while n != 0:  \r\n        if n & 1 == 0: \r\n            count += 1 \r\n        n >>= 1\r\n    return count"
          }
        }
      ],
      "usage": {
        "total_tokens": 167,
        "prompt_tokens": 127,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752256618.0155008
  },
  {
    "mbpp_id": 332,
    "problem": {
      "task_id": 332,
      "text": "Write a function to count character frequency of a given string.",
      "code": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict",
      "test_list": [
        "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
        "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
        "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count character frequency of a given string.\n\nTask ID: 332\n\nExpected behavior (test cases):\n1. char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n2. char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n3. char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def char_frequency(str1): \r\n    d=dict() \r\n    for n in str1: \r\n        keys = d.keys() \r\n        if n in keys: \r\n            d[n] += 1\r\n        else: \r\n            d[n] = 1\r\n    return d"
          }
        }
      ],
      "usage": {
        "total_tokens": 266,
        "prompt_tokens": 216,
        "completion_tokens": 57
      }
    },
    "timestamp": 1752256622.6652238
  },
  {
    "mbpp_id": 333,
    "problem": {
      "task_id": 333,
      "text": "Write a python function to sort a list according to the second element in sublist.",
      "code": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ",
      "test_list": [
        "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
        "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
        "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to sort a list according to the second element in sublist.\n\nTask ID: 333\n\nExpected behavior (test cases):\n1. Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) should return [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n2. Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) should return [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n3. Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) should return [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sortlist(lst):\r\n    res = sorted(lst)\r\n    res.sort(key=lambda x : int(x[1]))\r\n    return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 316,
        "prompt_tokens": 296,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752256625.6523592
  },
  {
    "mbpp_id": 334,
    "problem": {
      "task_id": 334,
      "text": "Write a python function to check whether the triangle is valid or not if sides are given.",
      "code": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ",
      "test_list": [
        "assert check_Validity(1,2,3) == False",
        "assert check_Validity(2,3,5) == False",
        "assert check_Validity(7,10,5) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the triangle is valid or not if sides are given.\n\nTask ID: 334\n\nExpected behavior (test cases):\n1. check_Validity(1,2,3) should return False\n2. check_Validity(2,3,5) should return False\n3. check_Validity(7,10,5) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_Validity(a,b,c):\r\n    res = ((a + b <= c))\r\n    if(res == True):\r\n        return(False)\r\n    else:\r\n        return(True)"
          }
        }
      ],
      "usage": {
        "total_tokens": 170,
        "prompt_tokens": 142,
        "completion_tokens": 35
      }
    },
    "timestamp": 1752256628.9496672
  },
  {
    "mbpp_id": 335,
    "problem": {
      "task_id": 335,
      "text": "Write a function to find the sum of arithmetic progression.",
      "code": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total",
      "test_list": [
        "assert ap_sum(1,5,2)==25",
        "assert ap_sum(2,6,4)==72",
        "assert ap_sum(1,4,5)==34"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the sum of arithmetic progression.\n\nTask ID: 335\n\nExpected behavior (test cases):\n1. ap_sum(1,5,2)==25\n2. ap_sum(2,6,4)==72\n3. ap_sum(1,4,5)==34\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def ap_sum(first_term , common_diffrence , no_of_terms): \r\n    # calculate sum using formula\r\n    return int((no_of_terms / 2) * ((first_term + first_term + (no_of_terms - 1) * common_diffrence)))"
          }
        }
      ],
      "usage": {
        "total_tokens": 175,
        "prompt_tokens": 128,
        "completion_tokens": 54
      }
    },
    "timestamp": 1752256633.3710856
  },
  {
    "mbpp_id": 336,
    "problem": {
      "task_id": 336,
      "text": "Write a function to check whether the given month name contains 28 days or not.",
      "code": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False",
      "test_list": [
        "assert check_monthnum(\"February\")==True",
        "assert check_monthnum(\"January\")==False",
        "assert check_monthnum(\"March\")==False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given month name contains 28 days or not.\n\nTask ID: 336\n\nExpected behavior (test cases):\n1. check_monthnum(\"February\")==True\n2. check_monthnum(\"January\")==False\n3. check_monthnum(\"March\")==False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_monthname(month):\r\n    if month==\"January\" or month == \"March\" or month== \"May\" or month==\"July\"or month==\"August\" or month==\"October\" or month==\"December\":\r\n        return False\r\n    elif month in [\"April\",\"June\",\"September\",\"November\"]:\r\n        return True\r\n    else:\r\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 188,
        "prompt_tokens": 123,
        "completion_tokens": 72
      }
    },
    "timestamp": 1752256639.2841702
  },
  {
    "mbpp_id": 337,
    "problem": {
      "task_id": 337,
      "text": "Write a function that matches a word at the end of a string, with optional punctuation.",
      "code": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
      "test_list": [
        "assert text_match_word(\"python.\")==('Found a match!')",
        "assert text_match_word(\"python.\")==('Found a match!')",
        "assert text_match_word(\"  lang  .\")==('Not matched!')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function that matches a word at the end of a string, with optional punctuation.\n\nTask ID: 337\n\nExpected behavior (test cases):\n1. text_match_word(\"python.\")==('Found a match!')\n2. text_match_word(\"python.\")==('Found a match!')\n3. text_match_word(\"  lang  .\")==('Not matched!')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef text_match_word(text):\r\n  pattern = r'\\w+word\\b'\r\n  if(re.search(pattern,text)):\r\n    return ('Found a match')\r\n  else:\r\n    return('Not matched!')"
          }
        }
      ],
      "usage": {
        "total_tokens": 173,
        "prompt_tokens": 137,
        "completion_tokens": 43
      }
    },
    "timestamp": 1752256643.244431
  },
  {
    "mbpp_id": 338,
    "problem": {
      "task_id": 338,
      "text": "Write a python function to count the number of substrings with same first and last characters.",
      "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
      "test_list": [
        "assert count_Substring_With_Equal_Ends('aba') == 4",
        "assert count_Substring_With_Equal_Ends('abcab') == 7",
        "assert count_Substring_With_Equal_Ends('abc') == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the number of substrings with same first and last characters.\n\nTask ID: 338\n\nExpected behavior (test cases):\n1. count_Substring_With_Equal_Ends('aba') should return 4\n2. count_Substring_With_Equal_Ends('abcab') should return 7\n3. count_Substring_With_Equal_Ends('abc') should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_Substring_With_Equal_Ends(string):\r\n    result = 0\r\n    for i in range(0,len(string)):\r\n        left = right = string[i]\r\n        for j in range(i+1,len(string)):\r\n            if(left==right): \r\n                result += 1\r\n                left = string[j]  \r\n                right = string[j] \r\n            else:\r\n                break;\r\n    return(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 228,
        "prompt_tokens": 151,
        "completion_tokens": 84
      }
    },
    "timestamp": 1752256650.2661288
  },
  {
    "mbpp_id": 339,
    "problem": {
      "task_id": 339,
      "text": "Write a python function to find the maximum occuring divisor in an interval.",
      "code": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2",
      "test_list": [
        "assert find_Divisor(2,2) == 2",
        "assert find_Divisor(2,5) == 2",
        "assert find_Divisor(5,10) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the maximum occuring divisor in an interval.\n\nTask ID: 339\n\nExpected behavior (test cases):\n1. find_Divisor(2,2) should return 2\n2. find_Divisor(2,5) should return 2\n3. find_Divisor(5,10) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Divisor(low,high): \r\n    maxdivisor = 1\r\n    for i in range(high, low - 1 , -1): \r\n        if ((low % i == 0) and (i % low == 0)): \r\n            maxdivisor = i \r\n            break\r\n    return maxdivisor"
          }
        }
      ],
      "usage": {
        "total_tokens": 201,
        "prompt_tokens": 139,
        "completion_tokens": 69
      }
    },
    "timestamp": 1752256656.403802
  },
  {
    "mbpp_id": 340,
    "problem": {
      "task_id": 340,
      "text": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
      "code": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
      "test_list": [
        "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
        "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
        "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\nTask ID: 340\n\nExpected behavior (test cases):\n1. sum_three_smallest_nums([10,20,30,40,50,60,7]) should return 37\n2. sum_three_smallest_nums([1,2,3,4,5]) should return 6\n3. sum_three_smallest_nums([0,1,2,3,4,5]) should return 6\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_three_smallest_nums(nums):\r\n    nums = sorted(nums)\r\n    result = 0\r\n    for i in range(0, len(nums)):\r\n        if nums[i] <= 0:\r\n            continue\r\n        else:\r\n            result += nums[i]\r\n    return(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 227,
        "prompt_tokens": 178,
        "completion_tokens": 56
      }
    },
    "timestamp": 1752256661.4761295
  },
  {
    "mbpp_id": 341,
    "problem": {
      "task_id": 341,
      "text": "Write a function to convert the given set into ordered tuples.",
      "code": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)",
      "test_list": [
        "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
        "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
        "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert the given set into ordered tuples.\n\nTask ID: 341\n\nExpected behavior (test cases):\n1. set_to_tuple({1, 2, 3, 4, 5}) should return (1, 2, 3, 4, 5)\n2. set_to_tuple({6, 7, 8, 9, 10, 11}) should return (6, 7, 8, 9, 10, 11)\n3. set_to_tuple({12, 13, 14, 15, 16}) should return (12, 13, 14, 15, 16)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def set_to_tuple(test_set):\r\n    test_tup = tuple(test_set)\r\n    return (test_tup) "
          }
        }
      ],
      "usage": {
        "total_tokens": 235,
        "prompt_tokens": 218,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752256663.9669151
  },
  {
    "mbpp_id": 342,
    "problem": {
      "task_id": 342,
      "text": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
      "code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])",
      "test_list": [
        "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
        "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
        "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n\nTask ID: 342\n\nExpected behavior (test cases):\n1. find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) should return (4, 6)\n2. find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) should return (4, 7)\n3. find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) should return (5, 7)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_minimum_range(nums):\r\n    min_element = [float(\"inf\")] * len(nums)\r\n    max_element = [-float(\"inf\")] * len(nums)\r\n    res_start_index = 0\r\n    res_end_index = 0\r\n    for i in range(len(nums)):\r\n        min_element[i] = nums[i][0]\r\n        max_element[i] = nums[i][-1]\r\n\r\n    while True:\r\n        start_index = None\r\n        end_index = None\r\n\r\n        # Finding minimum and maximum value in current row.\r\n        min_val = float(\"inf\")\r\n        max_val = -float(\"inf\")\r\n\r\n        for i in range(len(nums)):\r\n            if min_element[i] < min_val:\r\n                min_val = min_element[i]\r\n                start_index = i\r\n            if max_element[i] > max_val:\r\n                max_val = max_element[i]\r\n                end_index = i\r\n\r\n        # If we found all elements then break the loop.\r\n        if not start_index or not end_index:\r\n            break\r\n\r\n        # Update the starting index of the subarray.\r\n        if min_val <= max_val:\r\n            res_start_index = start_index\r\n            res_end_index = end_index\r\n\r\n        # Updating the values of minimum and maximum in rows.\r\n        for i in range(len(nums)):\r\n            if i == start_index:\r\n                min_element[i] += 1\r\n            elif i == end_index:\r\n                max_element[i] -= 1\r\n            else:\r\n                min_element[i] = min(min_element[i], min_val)\r\n                max_element[i] = max(max_element[i], max_val)\r\n\r\n    return (res_start_index, res_end_index)"
          }
        }
      ],
      "usage": {
        "total_tokens": 606,
        "prompt_tokens": 281,
        "completion_tokens": 332
      }
    },
    "timestamp": 1752256690.3333623
  },
  {
    "mbpp_id": 343,
    "problem": {
      "task_id": 343,
      "text": "Write a function to calculate the number of digits and letters in a string.",
      "code": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)",
      "test_list": [
        "assert dig_let(\"python\")==(6,0)",
        "assert dig_let(\"program\")==(7,0)",
        "assert dig_let(\"python3.0\")==(6,2)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the number of digits and letters in a string.\n\nTask ID: 343\n\nExpected behavior (test cases):\n1. dig_let(\"python\")==(6,0)\n2. dig_let(\"program\")==(7,0)\n3. dig_let(\"python3.0\")==(6,2)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def dig_let(str1):\r\n    d,l=0,0\r\n    for i in str1:\r\n        if(i.isdigit()):\r\n            d=d+1\r\n        elif(i.isalpha()):\r\n            l=l+1\r\n        else:\r\n            continue\r\n    return(d,l)"
          }
        }
      ],
      "usage": {
        "total_tokens": 183,
        "prompt_tokens": 132,
        "completion_tokens": 58
      }
    },
    "timestamp": 1752256695.0578458
  },
  {
    "mbpp_id": 344,
    "problem": {
      "task_id": 344,
      "text": "Write a python function to find number of elements with odd factors in a given range.",
      "code": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ",
      "test_list": [
        "assert count_Odd_Squares(5,100) == 8",
        "assert count_Odd_Squares(8,65) == 6",
        "assert count_Odd_Squares(2,5) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find number of elements with odd factors in a given range.\n\nTask ID: 344\n\nExpected behavior (test cases):\n1. count_Odd_Squares(5,100) should return 8\n2. count_Odd_Squares(8,65) should return 6\n3. count_Odd_Squares(2,5) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_Odd_Squares(a,b):\r\n    count = 0\r\n    for i in range(a,b+1):\r\n        square = int(i**0.5)\r\n        if (square* square == i and square % 2 != 0): \r\n            count += 1 \r\n    return count"
          }
        }
      ],
      "usage": {
        "total_tokens": 201,
        "prompt_tokens": 146,
        "completion_tokens": 62
      }
    },
    "timestamp": 1752256700.4036982
  },
  {
    "mbpp_id": 345,
    "problem": {
      "task_id": 345,
      "text": "Write a function to find the difference between two consecutive numbers in a given list.",
      "code": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
      "test_list": [
        "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
        "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
        "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the difference between two consecutive numbers in a given list.\n\nTask ID: 345\n\nExpected behavior (test cases):\n1. diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n2. diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\n3. diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def diff_consecutivenums(nums):\r\n    result = []\r\n    for i in range(1, len(nums)):\r\n        if nums[i] == nums[i-1]:\r\n            continue\r\n        else:\r\n            result.append(nums[i] - nums[i-1])\r\n    return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 300,
        "prompt_tokens": 251,
        "completion_tokens": 56
      }
    },
    "timestamp": 1752256705.3671613
  },
  {
    "mbpp_id": 346,
    "problem": {
      "task_id": 346,
      "text": "Write a function to find entringer number e(n, k).",
      "code": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
      "test_list": [
        "assert zigzag(4, 3) == 5",
        "assert zigzag(4, 2) == 4",
        "assert zigzag(3, 1) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find entringer number e(n, k).\n\nTask ID: 346\n\nExpected behavior (test cases):\n1. zigzag(4, 3) should return 5\n2. zigzag(4, 2) should return 4\n3. zigzag(3, 1) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def isprime(num): \r\n\tif num > 1: \r\n\t\tfor i in range(2,num): \r\n\t\t\tif (num % i) == 0: \r\n\t\t\t\treturn False\r\n\t\telse : \r\n\t\t\treturn True\r\n\treturn False\r\n\r\ndef zigzag(k , n):\r\n\tif n%2==0:\r\n\t\tn=n//2\r\n\t\tk=k*2\r\n\telse :\r\n\t\tn=n-1\r\n\t\tk=2*k+1\r\n\treturn int((k**n)/math.factorial(n))\r\n\r\nif __name__=='__main__':\r\n    print(zigzag(4, 3))\r\n    print(zigzag(4, 2))\r\n    print(zigzag(3, 1))"
          }
        }
      ],
      "usage": {
        "total_tokens": 271,
        "prompt_tokens": 133,
        "completion_tokens": 145
      }
    },
    "timestamp": 1752256716.8407853
  },
  {
    "mbpp_id": 347,
    "problem": {
      "task_id": 347,
      "text": "Write a python function to count the number of squares in a rectangle.",
      "code": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6",
      "test_list": [
        "assert count_Squares(4,3) == 20",
        "assert count_Squares(1,2) == 2",
        "assert count_Squares(2,2) == 5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the number of squares in a rectangle.\n\nTask ID: 347\n\nExpected behavior (test cases):\n1. count_Squares(4,3) should return 20\n2. count_Squares(1,2) should return 2\n3. count_Squares(2,2) should return 5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_Squares(x,y):\r\n    sum = ((x + 1)*(y + 1))\r\n    for i in range(2,x):\r\n        for j in range(2,y):\r\n            if(i**2 == j**2 and y != x):\r\n                k = (i+j)\r\n                l = ((i - j)**2) / 2\r\n                sum += k+l\r\n            elif(j**2 == i**2 and x != y):    \r\n                k = (j+i)\r\n                l = (((k-j)**2)/2)+((l+j)**2)/2\r\n                sum += k+l   \r\n    return int(sum)"
          }
        }
      ],
      "usage": {
        "total_tokens": 260,
        "prompt_tokens": 135,
        "completion_tokens": 132
      }
    },
    "timestamp": 1752256727.3594906
  },
  {
    "mbpp_id": 348,
    "problem": {
      "task_id": 348,
      "text": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
      "code": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ",
      "test_list": [
        "assert find_ways(4) == 2",
        "assert find_ways(6) == 5",
        "assert find_ways(8) == 14"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\nTask ID: 348\n\nExpected behavior (test cases):\n1. find_ways(4) should return 2\n2. find_ways(6) should return 5\n3. find_ways(8) should return 14\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_ways(n):\r\n    res = 0\r\n    for i in range(int(n/2)+1):\r\n        j = n - 2*i \r\n        if (j % 2 == 0 and j <= int(n/2)):\r\n            res += pow(2, (i))\r\n        elif(j < int(n/2)):\r\n            break\r\n    return (res+1) "
          }
        }
      ],
      "usage": {
        "total_tokens": 211,
        "prompt_tokens": 137,
        "completion_tokens": 81
      }
    },
    "timestamp": 1752256734.0739093
  },
  {
    "mbpp_id": 349,
    "problem": {
      "task_id": 349,
      "text": "Write a python function to check whether the given string is a binary string or not.",
      "code": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ",
      "test_list": [
        "assert check(\"01010101010\") == \"Yes\"",
        "assert check(\"name0\") == \"No\"",
        "assert check(\"101\") == \"Yes\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given string is a binary string or not.\n\nTask ID: 349\n\nExpected behavior (test cases):\n1. check(\"01010101010\") should return \"Yes\"\n2. check(\"name0\") should return \"No\"\n3. check(\"101\") should return \"Yes\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check(str):\r\n  if str[0] == '0' and len(str) >= 8:\r\n    return \"Yes\"\r\n  else:\r\n    return \"No\""
          }
        }
      ],
      "usage": {
        "total_tokens": 166,
        "prompt_tokens": 138,
        "completion_tokens": 35
      }
    },
    "timestamp": 1752256737.429175
  },
  {
    "mbpp_id": 350,
    "problem": {
      "task_id": 350,
      "text": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
      "code": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ",
      "test_list": [
        "assert minimum_Length(\"mnm\") == 1",
        "assert minimum_Length(\"abcda\") == 3",
        "assert minimum_Length(\"abcb\") == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to minimize the length of the string by removing occurrence of only one character.\n\nTask ID: 350\n\nExpected behavior (test cases):\n1. minimum_Length(\"mnm\") should return 1\n2. minimum_Length(\"abcda\") should return 3\n3. minimum_Length(\"abcb\") should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def minimum_Length(str): \r\n    res = \"\" \r\n      \r\n    for i in str :  \r\n        if i not in res : \r\n            res += i\r\n    return len(res) "
          }
        }
      ],
      "usage": {
        "total_tokens": 164,
        "prompt_tokens": 133,
        "completion_tokens": 38
      }
    },
    "timestamp": 1752256740.8401678
  },
  {
    "mbpp_id": 351,
    "problem": {
      "task_id": 351,
      "text": "Write a python function to find the first element occurring k times in a given array.",
      "code": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1",
      "test_list": [
        "assert first_Element([0,1,2,3,4,5],6,1) == 0",
        "assert first_Element([1,2,1,3,4],5,2) == 1",
        "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the first element occurring k times in a given array.\n\nTask ID: 351\n\nExpected behavior (test cases):\n1. first_Element([0,1,2,3,4,5],6,1) should return 0\n2. first_Element([1,2,1,3,4],5,2) should return 1\n3. first_Element([2,3,4,3,5,7,1,2,3,5],10,2) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def first_Element(arr,k):\r\n    count = {}\r\n    for i in arr:\r\n        if i not in count.keys():\r\n            count[i] = 1\r\n        else:\r\n            count[i] += 1\r\n    for i in range(len(arr)):\r\n        if count[arr[i]] == k:\r\n            return arr[i]\r\n    return \"No such element exists\""
          }
        }
      ],
      "usage": {
        "total_tokens": 243,
        "prompt_tokens": 177,
        "completion_tokens": 73
      }
    },
    "timestamp": 1752256746.8576348
  },
  {
    "mbpp_id": 352,
    "problem": {
      "task_id": 352,
      "text": "Write a python function to check whether all the characters in a given string are unique.",
      "code": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;",
      "test_list": [
        "assert unique_Characters('aba') == False",
        "assert unique_Characters('abc') == True",
        "assert unique_Characters('abab') == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether all the characters in a given string are unique.\n\nTask ID: 352\n\nExpected behavior (test cases):\n1. unique_Characters('aba') should return False\n2. unique_Characters('abc') should return True\n3. unique_Characters('abab') should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def isUnique(str): \r\n    char_order = [0] * 128 # assuming ASCII character set \r\n    for ch in str: \r\n        val = ord(ch) \r\n        if char_order[val] > 0 : \r\n            return False\r\n        char_order[val] += 1 \r\n    return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 187,
        "prompt_tokens": 129,
        "completion_tokens": 65
      }
    },
    "timestamp": 1752256752.353949
  },
  {
    "mbpp_id": 353,
    "problem": {
      "task_id": 353,
      "text": "Write a function to remove a specified column from a given nested list.",
      "code": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1",
      "test_list": [
        "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
        "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
        "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove a specified column from a given nested list.\n\nTask ID: 353\n\nExpected behavior (test cases):\n1. remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n2. remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\n3. remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_column(list_of_lists,col):\r\n    res = []\r\n    for row in list_of_lists:\r\n        if col != 0:\r\n            new_row = []\r\n            del(row[col])\r\n            new_row = row\r\n            res.append(new_row)\r\n        else:\r\n            continue\r\n    return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 317,
        "prompt_tokens": 265,
        "completion_tokens": 59
      }
    },
    "timestamp": 1752256757.611093
  },
  {
    "mbpp_id": 354,
    "problem": {
      "task_id": 354,
      "text": "Write a function to find t-nth term of arithemetic progression.",
      "code": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn",
      "test_list": [
        "assert tn_ap(1,5,2)==9",
        "assert tn_ap(2,6,4)==22",
        "assert tn_ap(1,4,5)==16"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find t-nth term of arithemetic progression.\n\nTask ID: 354\n\nExpected behavior (test cases):\n1. tn_ap(1,5,2)==9\n2. tn_ap(2,6,4)==22\n3. tn_ap(1,4,5)==16\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def tn_ap(a,n,d):\r\n    t=n*a+(n*(n-1)/2)*d\r\n    return(t)"
          }
        }
      ],
      "usage": {
        "total_tokens": 151,
        "prompt_tokens": 132,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752256760.1689959
  },
  {
    "mbpp_id": 355,
    "problem": {
      "task_id": 355,
      "text": "Write a python function to count the number of rectangles in a circle of radius r.",
      "code": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ",
      "test_list": [
        "assert count_Rectangles(2) == 8",
        "assert count_Rectangles(1) == 1",
        "assert count_Rectangles(0) == 0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the number of rectangles in a circle of radius r.\n\nTask ID: 355\n\nExpected behavior (test cases):\n1. count_Rectangles(2) should return 8\n2. count_Rectangles(1) should return 1\n3. count_Rectangles(0) should return 0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_Rectangles(radius):\r\n        res = 0\r\n        for dx in range(-radius, radius + 1): \r\n            for dy in range(-radius, radius + 1): \r\n                if dx == 0 and dy != 0:\r\n                    continue\r\n                elif dx != 0 and dy == 0:\r\n                    continue\r\n                else:\r\n                    dist_from_center = dx ** 2 + dy ** 2\r\n                    if (dist_from_center <= radius ** 2):\r\n                        res += 1\r\n        return (res) "
          }
        }
      ],
      "usage": {
        "total_tokens": 236,
        "prompt_tokens": 131,
        "completion_tokens": 112
      }
    },
    "timestamp": 1752256769.1271787
  },
  {
    "mbpp_id": 356,
    "problem": {
      "task_id": 356,
      "text": "Write a function to find the third angle of a triangle using two angles.",
      "code": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n",
      "test_list": [
        "assert find_angle(47,89)==44",
        "assert find_angle(45,95)==40",
        "assert find_angle(50,40)==90"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the third angle of a triangle using two angles.\n\nTask ID: 356\n\nExpected behavior (test cases):\n1. find_angle(47,89)==44\n2. find_angle(45,95)==40\n3. find_angle(50,40)==90\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_angle(a,b):\r\n    c=180-(a+b)\r\n    return(c)"
          }
        }
      ],
      "usage": {
        "total_tokens": 145,
        "prompt_tokens": 132,
        "completion_tokens": 20
      }
    },
    "timestamp": 1752256771.2156444
  },
  {
    "mbpp_id": 357,
    "problem": {
      "task_id": 357,
      "text": "Write a function to find the maximum element of all the given tuple records.",
      "code": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ",
      "test_list": [
        "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
        "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
        "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum element of all the given tuple records.\n\nTask ID: 357\n\nExpected behavior (test cases):\n1. find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) should return 10\n2. find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) should return 11\n3. find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) should return 12\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_max(tup):\r\n    n = max(map(max, tup))\r\n    return(n)"
          }
        }
      ],
      "usage": {
        "total_tokens": 226,
        "prompt_tokens": 214,
        "completion_tokens": 19
      }
    },
    "timestamp": 1752256773.1695285
  },
  {
    "mbpp_id": 358,
    "problem": {
      "task_id": 358,
      "text": "Write a function to find modulo division of two lists using map and lambda function.",
      "code": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)",
      "test_list": [
        "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
        "assert moddiv_list([3,2],[1,4])==[0, 2]",
        "assert moddiv_list([90,120],[50,70])==[40, 50]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find modulo division of two lists using map and lambda function.\n\nTask ID: 358\n\nExpected behavior (test cases):\n1. moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n2. moddiv_list([3,2],[1,4])==[0, 2]\n3. moddiv_list([90,120],[50,70])==[40, 50]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def moddiv_list(arr1,arr2):\r\n    res = list(map(lambda x,y : x % y , arr1,arr2))\r\n    return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 191,
        "prompt_tokens": 167,
        "completion_tokens": 31
      }
    },
    "timestamp": 1752256775.989961
  },
  {
    "mbpp_id": 359,
    "problem": {
      "task_id": 359,
      "text": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
      "code": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
      "test_list": [
        "assert Check_Solution(1,3,2) == \"Yes\"",
        "assert Check_Solution(1,2,3) == \"No\"",
        "assert Check_Solution(1,-5,6) == \"No\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n\nTask ID: 359\n\nExpected behavior (test cases):\n1. Check_Solution(1,3,2) should return \"Yes\"\n2. Check_Solution(1,2,3) should return \"No\"\n3. Check_Solution(1,-5,6) should return \"No\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def Check_Solution(a,b,c): \r\n    if ((-b + sqrt((b*b - 4*a*c))) / (2 * a)) == (-b + sqrt((b*b - 4*a*c))) / (4 * a): \r\n        print (\"Yes\")\r\n    else:\r\n        print(\"No\") "
          }
        }
      ],
      "usage": {
        "total_tokens": 206,
        "prompt_tokens": 147,
        "completion_tokens": 66
      }
    },
    "timestamp": 1752256781.620096
  },
  {
    "mbpp_id": 360,
    "problem": {
      "task_id": 360,
      "text": "Write a function to find the n’th carol number.",
      "code": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2",
      "test_list": [
        "assert get_carol(2) == 7",
        "assert get_carol(4) == 223",
        "assert get_carol(5) == 959"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the n’th carol number.\n\nTask ID: 360\n\nExpected behavior (test cases):\n1. get_carol(2) should return 7\n2. get_carol(4) should return 223\n3. get_carol(5) should return 959\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_carol(n): \r\n   for i in range(n): \r\n      temp = 0\r\n      for j in str(i * 8): \r\n         temp += int(j)\r\n      if(temp == n + 1):\r\n          return (i * 8)"
          }
        }
      ],
      "usage": {
        "total_tokens": 179,
        "prompt_tokens": 131,
        "completion_tokens": 55
      }
    },
    "timestamp": 1752256786.5194223
  },
  {
    "mbpp_id": 361,
    "problem": {
      "task_id": 361,
      "text": "Write a function to remove empty lists from a given list of lists.",
      "code": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty",
      "test_list": [
        "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
        "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
        "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove empty lists from a given list of lists.\n\nTask ID: 361\n\nExpected behavior (test cases):\n1. remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n2. remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\n3. remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_empty(list_):\r\n  output = [i for i in list_ if len(i)>0]\r\n  return(output)"
          }
        }
      ],
      "usage": {
        "total_tokens": 219,
        "prompt_tokens": 200,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752256789.117082
  },
  {
    "mbpp_id": 362,
    "problem": {
      "task_id": 362,
      "text": "Write a python function to find the item with maximum occurrences in a given list.",
      "code": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
      "test_list": [
        "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
        "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
        "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the item with maximum occurrences in a given list.\n\nTask ID: 362\n\nExpected behavior (test cases):\n1. max_occurrences([1,2,3,1,2,3,12,4,2]) should return  2\n2. max_occurrences([1,2,6,7,0,1,0,1,0]) should return 1,0\n3. max_occurrences([1,2,3,1,2,4,1]) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_occurrences(arr):\r\n    count_dict = {}\r\n    for i in arr:\r\n        if i not in count_dict:\r\n            count_dict[i] = 1\r\n        else:\r\n            count_dict[i] += 1\r\n\r\n    max_value = -float(\"inf\")\r\n    for k,v in count_dict.items():\r\n        if v > max_value:\r\n            max_value = v\r\n            ans = int(k)\r\n            \r\n    return(ans)"
          }
        }
      ],
      "usage": {
        "total_tokens": 259,
        "prompt_tokens": 178,
        "completion_tokens": 88
      }
    },
    "timestamp": 1752256796.376921
  },
  {
    "mbpp_id": 363,
    "problem": {
      "task_id": 363,
      "text": "Write a function to add the k elements to each element in the tuple.",
      "code": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ",
      "test_list": [
        "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
        "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
        "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to add the k elements to each element in the tuple.\n\nTask ID: 363\n\nExpected behavior (test cases):\n1. add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) should return [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n2. add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) should return [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n3. add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) should return [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def add_K_element(test_tuple, K):\r\n  res = []\r\n  for test_tup in test_tuple:\r\n    temp_list = [ele + K for ele in test_tup]\r\n    res.append(tuple(temp_list))\r\n  return res"
          }
        }
      ],
      "usage": {
        "total_tokens": 351,
        "prompt_tokens": 311,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752256800.4966588
  },
  {
    "mbpp_id": 364,
    "problem": {
      "task_id": 364,
      "text": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
      "code": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",
      "test_list": [
        "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
        "assert min_flip_to_make_string_alternate(\"001\") == 1",
        "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\nTask ID: 364\n\nExpected behavior (test cases):\n1. min_flip_to_make_string_alternate(\"0001010111\") should return 2\n2. min_flip_to_make_string_alternate(\"001\") should return 1\n3. min_flip_to_make_string_alternate(\"010111011\") should return 2 \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def min_flip_to_make_string_alternate(string):\r\n    count = 0\r\n    prev_char = string[0]\r\n    for char in string:\r\n        if char != prev_char and (char == '0' and prev_char == '1') or (char == '1' and prev_char == '0'):\r\n            count += 1\r\n        prev_char = char\r\n    return count "
          }
        }
      ],
      "usage": {
        "total_tokens": 240,
        "prompt_tokens": 167,
        "completion_tokens": 80
      }
    },
    "timestamp": 1752256806.7272635
  },
  {
    "mbpp_id": 365,
    "problem": {
      "task_id": 365,
      "text": "Write a python function to count the number of digits of a given number.",
      "code": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count",
      "test_list": [
        "assert count_Digit(12345) == 5",
        "assert count_Digit(11223305) == 8",
        "assert count_Digit(4123459) == 7"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the number of digits of a given number.\n\nTask ID: 365\n\nExpected behavior (test cases):\n1. count_Digit(12345) should return 5\n2. count_Digit(11223305) should return 8\n3. count_Digit(4123459) should return 7\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_Digit(n):\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return len(str(abs(n)))"
          }
        }
      ],
      "usage": {
        "total_tokens": 167,
        "prompt_tokens": 146,
        "completion_tokens": 28
      }
    },
    "timestamp": 1752256809.5890498
  },
  {
    "mbpp_id": 366,
    "problem": {
      "task_id": 366,
      "text": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
      "code": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",
      "test_list": [
        "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
        "assert adjacent_num_product([1,2,3,4,5]) == 20",
        "assert adjacent_num_product([2,3]) == 6"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\nTask ID: 366\n\nExpected behavior (test cases):\n1. adjacent_num_product([1,2,3,4,5,6]) should return 30\n2. adjacent_num_product([1,2,3,4,5]) should return 20\n3. adjacent_num_product([2,3]) should return 6\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def adjacent_num_product(nums): \r\n\tn = len(nums) \r\n\tmaxi = -float(\"inf\") \r\n\tfor i in range(0,n-1): \r\n\t\tif nums[i] * nums[i+1] > maxi: \r\n\t\t\tmaxi = nums[i] * nums[i+1] \r\n\treturn maxi"
          }
        }
      ],
      "usage": {
        "total_tokens": 215,
        "prompt_tokens": 158,
        "completion_tokens": 64
      }
    },
    "timestamp": 1752256815.1490438
  },
  {
    "mbpp_id": 367,
    "problem": {
      "task_id": 367,
      "text": "Write a function to check if a binary tree is balanced or not.",
      "code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False",
      "test_list": [
        "assert is_tree_balanced(root) == False",
        "assert is_tree_balanced(root1) == True",
        "assert is_tree_balanced(root2) == False "
      ],
      "test_setup_code": "root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot.left.left.left = Node(8) \r\nroot1 = Node(1) \r\nroot1.left = Node(2) \r\nroot1.right = Node(3) \r\nroot1.left.left = Node(4) \r\nroot1.left.right = Node(5) \r\nroot1.right.left = Node(6) \r\nroot1.left.left.left = Node(7)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(7)",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if a binary tree is balanced or not.\n\nTask ID: 367\n\nExpected behavior (test cases):\n1. is_tree_balanced(root) should return False\n2. is_tree_balanced(root1) should return True\n3. is_tree_balanced(root2) should return False \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_tree_balanced(self, root):\r\n        def helper(node): #Helper Function\r\n            if node == None:\r\n                return [True ,0]\r\n            else :\r\n                left = helper(node.left)\r\n                right = helper(node.right)\r\n                condition = abs(left[1] - right[1]) <= 1 and all([left[0],right[0]])\r\n                height = max(left[1], right[1]) + 1\r\n                return [condition,height]\r\n        \r\n        return helper(root)[0]"
          }
        }
      ],
      "usage": {
        "total_tokens": 226,
        "prompt_tokens": 127,
        "completion_tokens": 106
      }
    },
    "timestamp": 1752256824.061035
  },
  {
    "mbpp_id": 368,
    "problem": {
      "task_id": 368,
      "text": "Write a function to repeat the given tuple n times.",
      "code": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ",
      "test_list": [
        "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
        "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
        "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to repeat the given tuple n times.\n\nTask ID: 368\n\nExpected behavior (test cases):\n1. repeat_tuples((1, 3), 4) should return ((1, 3), (1, 3), (1, 3), (1, 3))\n2. repeat_tuples((1, 2), 3) should return ((1, 2), (1, 2), (1, 2))\n3. repeat_tuples((3, 4), 5) should return ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def repeat_tuples(test_tup ,n):\r\n    res = test_tup * n\r\n    return (res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 219,
        "prompt_tokens": 203,
        "completion_tokens": 23
      }
    },
    "timestamp": 1752256826.4798667
  },
  {
    "mbpp_id": 369,
    "problem": {
      "task_id": 369,
      "text": "Write a function to find the lateral surface area of cuboid",
      "code": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA",
      "test_list": [
        "assert lateralsurface_cuboid(8,5,6)==156",
        "assert lateralsurface_cuboid(7,9,10)==320",
        "assert lateralsurface_cuboid(10,20,30)==1800"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the lateral surface area of cuboid\n\nTask ID: 369\n\nExpected behavior (test cases):\n1. lateralsurface_cuboid(8,5,6)==156\n2. lateralsurface_cuboid(7,9,10)==320\n3. lateralsurface_cuboid(10,20,30)==1800\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def lateralsurface_cuboid(length,breadth,height):\r\n    return ((length*breadth)+(breadth*height)+(length*height))"
          }
        }
      ],
      "usage": {
        "total_tokens": 173,
        "prompt_tokens": 150,
        "completion_tokens": 30
      }
    },
    "timestamp": 1752256829.3846943
  },
  {
    "mbpp_id": 370,
    "problem": {
      "task_id": 370,
      "text": "Write a function to sort a tuple by its float element.",
      "code": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort",
      "test_list": [
        "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
        "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
        "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a tuple by its float element.\n\nTask ID: 370\n\nExpected behavior (test cases):\n1. float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n2. float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \n3. float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def float_sort(tuples):\r\n  return sorted(tuples, key=lambda x:x[1])"
          }
        }
      ],
      "usage": {
        "total_tokens": 278,
        "prompt_tokens": 266,
        "completion_tokens": 19
      }
    },
    "timestamp": 1752256831.452514
  },
  {
    "mbpp_id": 371,
    "problem": {
      "task_id": 371,
      "text": "Write a function to find the smallest missing element in a sorted array.",
      "code": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)",
      "test_list": [
        "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
        "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
        "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the smallest missing element in a sorted array.\n\nTask ID: 371\n\nExpected behavior (test cases):\n1. smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) should return 7\n2. smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) should return 3\n3. smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) should return 0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def smallest_missing(arr,start,end):\r\n    if arr[0] != start:\r\n        return start\r\n    while(start <= end and start < len(arr)):\r\n        if arr[start] == start+1 :\r\n            start += 1\r\n        else:\r\n            break\r\n    if start >= len(arr):\r\n        return start\r\n    elif arr[start-1]+1 != start:\r\n        return start \r\n    else:\r\n        return smallest_missing(arr,1,arr[-1]) + 1 "
          }
        }
      ],
      "usage": {
        "total_tokens": 294,
        "prompt_tokens": 204,
        "completion_tokens": 97
      }
    },
    "timestamp": 1752256839.7878826
  },
  {
    "mbpp_id": 372,
    "problem": {
      "task_id": 372,
      "text": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
      "code": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result",
      "test_list": [
        "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
        "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
        "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n\nTask ID: 372\n\nExpected behavior (test cases):\n1. heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n2. heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n3. heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import heapq\r\ndef heap_assending(arr):\r\n  sorted_arr = heapq.nsmallest(len(arr), arr)\r\n  return(sorted_arr)"
          }
        }
      ],
      "usage": {
        "total_tokens": 332,
        "prompt_tokens": 312,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752256842.678222
  },
  {
    "mbpp_id": 373,
    "problem": {
      "task_id": 373,
      "text": "Write a function to find the volume of a cuboid.",
      "code": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume",
      "test_list": [
        "assert volume_cuboid(1,2,3)==6",
        "assert volume_cuboid(5,7,9)==315",
        "assert volume_cuboid(10,15,21)==3150"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the volume of a cuboid.\n\nTask ID: 373\n\nExpected behavior (test cases):\n1. volume_cuboid(1,2,3)==6\n2. volume_cuboid(5,7,9)==315\n3. volume_cuboid(10,15,21)==3150\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def volume_cuboid(l,b,h):\r\n   return l * b * h"
          }
        }
      ],
      "usage": {
        "total_tokens": 149,
        "prompt_tokens": 140,
        "completion_tokens": 16
      }
    },
    "timestamp": 1752256844.4683294
  },
  {
    "mbpp_id": 374,
    "problem": {
      "task_id": 374,
      "text": "Write a function to print all permutations of a given string including duplicates.",
      "code": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list",
      "test_list": [
        "assert permute_string('ab')==['ab', 'ba']",
        "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
        "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to print all permutations of a given string including duplicates.\n\nTask ID: 374\n\nExpected behavior (test cases):\n1. permute_string('ab')==['ab', 'ba']\n2. permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n3. permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def permute_string(str): \r\n    result = []  \r\n    if len(str) == 0: \r\n        return [''] \r\n    \r\n    for i in range(0, len(str)):      \r\n        m = str[i] \r\n        remaining_str = str[:i] + str[i+1:] \r\n        temp = permute_string(remaining_str) \r\n\r\n        for j in range(0, len(temp)):         \r\n            result.append(m + temp[j]) \r\n        # result.extend([m + t for t in temp])  \r\n        \r\n    return result "
          }
        }
      ],
      "usage": {
        "total_tokens": 339,
        "prompt_tokens": 233,
        "completion_tokens": 113
      }
    },
    "timestamp": 1752256853.847316
  },
  {
    "mbpp_id": 375,
    "problem": {
      "task_id": 375,
      "text": "Write a function to round the given number to the nearest multiple of a specific number.",
      "code": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
      "test_list": [
        "assert round_num(4722,10)==4720",
        "assert round_num(1111,5)==1110",
        "assert round_num(219,2)==218"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to round the given number to the nearest multiple of a specific number.\n\nTask ID: 375\n\nExpected behavior (test cases):\n1. round_num(4722,10)==4720\n2. round_num(1111,5)==1110\n3. round_num(219,2)==218\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def round_num(num,multiple):\r\n   if num % multiple == 0:\r\n       return int(num)\r\n   else:\r\n       return (num + multiple) - (multiple * ((num + multiple) % multiple))"
          }
        }
      ],
      "usage": {
        "total_tokens": 178,
        "prompt_tokens": 142,
        "completion_tokens": 43
      }
    },
    "timestamp": 1752256857.677092
  },
  {
    "mbpp_id": 376,
    "problem": {
      "task_id": 376,
      "text": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
      "code": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)",
      "test_list": [
        "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
        "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
        "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\nTask ID: 376\n\nExpected behavior (test cases):\n1. remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) should return (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n2. remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) should return (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n3. remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) should return (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_replica(lst):\r\n    dic = {}\r\n    for i in lst:\r\n        if i not in dic:\r\n            dic[i] = \"MSP\"\r\n        else:\r\n            dic[i] = 'MSP'\r\n    res = []\r\n    for j in lst:\r\n        if dic[j] == \"MSP\":\r\n            res.append(j)\r\n        else:\r\n            res.append(dic[j])\r\n    return tuple(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 392,
        "prompt_tokens": 316,
        "completion_tokens": 83
      }
    },
    "timestamp": 1752256864.7183352
  },
  {
    "mbpp_id": 377,
    "problem": {
      "task_id": 377,
      "text": "Write a python function to remove all occurrences of a character in a given string.",
      "code": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ",
      "test_list": [
        "assert remove_Char(\"aba\",'a') == \"b\"",
        "assert remove_Char(\"toggle\",'g') == \"tole\"",
        "assert remove_Char(\"aabbc\",'b') == \"aac\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to remove all occurrences of a character in a given string.\n\nTask ID: 377\n\nExpected behavior (test cases):\n1. remove_Char(\"aba\",'a') should return \"b\"\n2. remove_Char(\"toggle\",'g') should return \"tole\"\n3. remove_Char(\"aabbc\",'b') should return \"aac\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_Char(str, char):\r\n  result = ''\r\n  for ele in str:\r\n    if(ele != char):\r\n      result += ele\r\n  return(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 160,
        "prompt_tokens": 135,
        "completion_tokens": 32
      }
    },
    "timestamp": 1752256867.9490607
  },
  {
    "mbpp_id": 378,
    "problem": {
      "task_id": 378,
      "text": "Write a python function to shift last element to first position in the given list.",
      "code": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list",
      "test_list": [
        "assert move_first([1,2,3,4]) == [4,1,2,3]",
        "assert move_first([0,1,2,3]) == [3,0,1,2]",
        "assert move_first([9,8,7,1]) == [1,9,8,7]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to shift last element to first position in the given list.\n\nTask ID: 378\n\nExpected behavior (test cases):\n1. move_first([1,2,3,4]) should return [4,1,2,3]\n2. move_first([0,1,2,3]) should return [3,0,1,2]\n3. move_first([9,8,7,1]) should return [1,9,8,7]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def move_first(nums):\r\n    nums.append(nums.pop()) \r\n    return nums "
          }
        }
      ],
      "usage": {
        "total_tokens": 172,
        "prompt_tokens": 163,
        "completion_tokens": 16
      }
    },
    "timestamp": 1752256869.6732137
  },
  {
    "mbpp_id": 379,
    "problem": {
      "task_id": 379,
      "text": "Write a function to find the surface area of a cuboid.",
      "code": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA",
      "test_list": [
        "assert surfacearea_cuboid(1,2,3)==22",
        "assert surfacearea_cuboid(5,7,9)==286",
        "assert surfacearea_cuboid(10,15,21)==1350"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the surface area of a cuboid.\n\nTask ID: 379\n\nExpected behavior (test cases):\n1. surfacearea_cuboid(1,2,3)==22\n2. surfacearea_cuboid(5,7,9)==286\n3. surfacearea_cuboid(10,15,21)==1350\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def surfacearea_cuboid(length,breadth,height):\r\n return 2*(length*breadth + breadth*height + height*length)"
          }
        }
      ],
      "usage": {
        "total_tokens": 167,
        "prompt_tokens": 145,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752256872.485549
  },
  {
    "mbpp_id": 380,
    "problem": {
      "task_id": 380,
      "text": "Write a function to generate a two-dimensional array.",
      "code": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n",
      "test_list": [
        "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
        "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
        "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to generate a two-dimensional array.\n\nTask ID: 380\n\nExpected behavior (test cases):\n1. multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n2. multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n3. multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def multi_list(n,m):\r\n  arr = [[j for j in range(i, i+m)] for i in range(m*n)]\r\n  return(arr)"
          }
        }
      ],
      "usage": {
        "total_tokens": 848,
        "prompt_tokens": 824,
        "completion_tokens": 31
      }
    },
    "timestamp": 1752256875.5068383
  },
  {
    "mbpp_id": 381,
    "problem": {
      "task_id": 381,
      "text": "Write a function to sort a list of lists by a given index of the inner list.",
      "code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result",
      "test_list": [
        "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
        "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
        "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a list of lists by a given index of the inner list.\n\nTask ID: 381\n\nExpected behavior (test cases):\n1. index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n2. index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n3. index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def index_on_inner_list(test_list,index):\r\n    return sorted(test_list,key=lambda x: x[index])"
          }
        }
      ],
      "usage": {
        "total_tokens": 456,
        "prompt_tokens": 442,
        "completion_tokens": 21
      }
    },
    "timestamp": 1752256877.52821
  },
  {
    "mbpp_id": 382,
    "problem": {
      "task_id": 382,
      "text": "Write a function to find the number of rotations in a circularly sorted array.",
      "code": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1",
      "test_list": [
        "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
        "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
        "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the number of rotations in a circularly sorted array.\n\nTask ID: 382\n\nExpected behavior (test cases):\n1. find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) should return 3\n2. find_rotation_count([8, 9, 10,2, 5, 6]) should return 3\n3. find_rotation_count([2, 5, 6, 8, 9, 10]) should return 0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_rotation_count(arr):\r\n    n = len(arr)\r\n    low = 0\r\n    high = n - 1\r\n\r\n    while low <= high:\r\n        if arr[low] <= arr[high]:\r\n            return low + 1\r\n\r\n        mid = int((low + high) / 2)\r\n\r\n        next_element = (mid + 1) % n\r\n        prev_element = (mid - 1 + n) % n\r\n\r\n        if arr[mid] <= arr[next_element] and arr[mid] <= arr[prev_element]:\r\n            return mid + 1\r\n\r\n        elif arr[mid] <= arr[high]:\r\n            high = mid - 1\r\n        else:\r\n            low = mid + 1\r\n\r\nfind_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])"
          }
        }
      ],
      "usage": {
        "total_tokens": 363,
        "prompt_tokens": 189,
        "completion_tokens": 181
      }
    },
    "timestamp": 1752256889.9467087
  },
  {
    "mbpp_id": 383,
    "problem": {
      "task_id": 383,
      "text": "Write a python function to toggle all odd bits of a given number.",
      "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
      "test_list": [
        "assert even_bit_toggle_number(10) == 15",
        "assert even_bit_toggle_number(20) == 1",
        "assert even_bit_toggle_number(30) == 11"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to toggle all odd bits of a given number.\n\nTask ID: 383\n\nExpected behavior (test cases):\n1. even_bit_toggle_number(10) should return 15\n2. even_bit_toggle_number(20) should return 1\n3. even_bit_toggle_number(30) should return 11\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def even_bit_toggle_number(num):\r\n    res = num\r\n    for i in range(len(bin(num)[2:])):\r\n        if i % 2 == 0:\r\n            temp = 0\r\n        else:\r\n            temp = 1\r\n        res = res ^ ((temp << i))\r\n    return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 193,
        "prompt_tokens": 136,
        "completion_tokens": 64
      }
    },
    "timestamp": 1752256894.6895154
  },
  {
    "mbpp_id": 384,
    "problem": {
      "task_id": 384,
      "text": "Write a python function to find the frequency of the smallest value in a given array.",
      "code": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
      "test_list": [
        "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
        "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
        "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the frequency of the smallest value in a given array.\n\nTask ID: 384\n\nExpected behavior (test cases):\n1. frequency_Of_Smallest(5,[1,2,3,4,3]) should return 1\n2. frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) should return 1\n3. frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def frequency_Of_Smallest(n,arr): \r\n    m = min(arr)  \r\n    count = arr.count(m)  \r\n    print(count)"
          }
        }
      ],
      "usage": {
        "total_tokens": 197,
        "prompt_tokens": 175,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752256897.1122482
  },
  {
    "mbpp_id": 385,
    "problem": {
      "task_id": 385,
      "text": "Write a function to find the n'th perrin number using recursion.",
      "code": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)",
      "test_list": [
        "assert get_perrin(9) == 12",
        "assert get_perrin(4) == 2",
        "assert get_perrin(6) == 5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the n'th perrin number using recursion.\n\nTask ID: 385\n\nExpected behavior (test cases):\n1. get_perrin(9) should return 12\n2. get_perrin(4) should return 2\n3. get_perrin(6) should return 5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_perrin(n): \r\n    if (n <= 0): \r\n        raise Exception('Number must be positive')\r\n    elif (n == 1 or n == 2): \r\n        return 3\r\n    else: \r\n        if (get_perrin(n - 2) < get_perrin(n - 1)): \r\n            return (get_perrin(n - 2)) + (get_perrin(n - 1))\r\n        else: \r\n            return (get_perrin(n - 1)) + (get_perrin(n - 2))"
          }
        }
      ],
      "usage": {
        "total_tokens": 249,
        "prompt_tokens": 134,
        "completion_tokens": 122
      }
    },
    "timestamp": 1752256905.5738132
  },
  {
    "mbpp_id": 386,
    "problem": {
      "task_id": 386,
      "text": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
      "code": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap",
      "test_list": [
        "assert swap_count(\"[]][][\") == 2",
        "assert swap_count(\"[[][]]\") == 0",
        "assert swap_count(\"[[][]]][\") == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\nTask ID: 386\n\nExpected behavior (test cases):\n1. swap_count(\"[]][][\") should return 2\n2. swap_count(\"[[][]]\") should return 0\n3. swap_count(\"[[][]]][\") should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def swap_count(test_string): \r\n    stack = [] \r\n    res = [0] \r\n    count = 0\r\n    for char in test_string: \r\n        if char == '[':  \r\n            stack.append(char) \r\n            res[count] += 1\r\n        elif char == ']':   \r\n            if not stack:\r\n                res[count] += 1\r\n                stack.append('')\r\n            else: \r\n                tmp = stack.pop()\r\n                if tmp == '[':    \r\n                    res[count] += 1\r\n                    count += 1 \r\n                else:     \r\n                    res[count] -= 1\r\n\r\n    return sum(res) // 2"
          }
        }
      ],
      "usage": {
        "total_tokens": 257,
        "prompt_tokens": 134,
        "completion_tokens": 130
      }
    },
    "timestamp": 1752256914.475263
  },
  {
    "mbpp_id": 387,
    "problem": {
      "task_id": 387,
      "text": "Write a python function to check whether the hexadecimal number is even or odd.",
      "code": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ",
      "test_list": [
        "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
        "assert even_or_odd(\"ABC\") == \"Even\"",
        "assert even_or_odd(\"AAD\") == \"Odd\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the hexadecimal number is even or odd.\n\nTask ID: 387\n\nExpected behavior (test cases):\n1. even_or_odd(\"AB3454D\") ==\"Odd\"\n2. even_or_odd(\"ABC\") should return \"Even\"\n3. even_or_odd(\"AAD\") should return \"Odd\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def even_or_odd(hex_number): \r\n        if hex_number[-1] in '02468': \r\n            return('Even') \r\n        else: \r\n            return('Odd')"
          }
        }
      ],
      "usage": {
        "total_tokens": 164,
        "prompt_tokens": 132,
        "completion_tokens": 39
      }
    },
    "timestamp": 1752256917.5777082
  },
  {
    "mbpp_id": 388,
    "problem": {
      "task_id": 388,
      "text": "Write a python function to find the highest power of 2 that is less than or equal to n.",
      "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ",
      "test_list": [
        "assert highest_Power_of_2(10) == 8",
        "assert highest_Power_of_2(19) == 16",
        "assert highest_Power_of_2(32) == 32"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the highest power of 2 that is less than or equal to n.\n\nTask ID: 388\n\nExpected behavior (test cases):\n1. highest_Power_of_2(10) should return 8\n2. highest_Power_of_2(19) should return 16\n3. highest_Power_of_2(32) should return 32\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def highest_Power_of_2(n):\r\n   # Base case\r\n   if (n <= 1):\r\n      return 1\r\n\r\n   # Compute result using recursion\r\n   return int(n * 0.5 + 0.5)"
          }
        }
      ],
      "usage": {
        "total_tokens": 191,
        "prompt_tokens": 149,
        "completion_tokens": 49
      }
    },
    "timestamp": 1752256921.3585842
  },
  {
    "mbpp_id": 389,
    "problem": {
      "task_id": 389,
      "text": "Write a function to find the n'th lucas number.",
      "code": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
      "test_list": [
        "assert find_lucas(9) == 76",
        "assert find_lucas(4) == 7",
        "assert find_lucas(3) == 4"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the n'th lucas number.\n\nTask ID: 389\n\nExpected behavior (test cases):\n1. find_lucas(9) should return 76\n2. find_lucas(4) should return 7\n3. find_lucas(3) should return 4\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_lucas(n):\r\n    if n==0:\r\n        return 2\r\n    elif n==1:\r\n        return 1\r\n    else:\r\n        return find_lucas(n-1)+find_lucas(n-2)"
          }
        }
      ],
      "usage": {
        "total_tokens": 168,
        "prompt_tokens": 128,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752256925.0772264
  },
  {
    "mbpp_id": 390,
    "problem": {
      "task_id": 390,
      "text": "Write a function to insert a given string at the beginning of all items in a list.",
      "code": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string",
      "test_list": [
        "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
        "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
        "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to insert a given string at the beginning of all items in a list.\n\nTask ID: 390\n\nExpected behavior (test cases):\n1. add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n2. add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n3. add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def add_string(l,string):\r\n    for i in range(len(l)):\r\n        l[i]=string+str(l[i])\r\n    return l"
          }
        }
      ],
      "usage": {
        "total_tokens": 218,
        "prompt_tokens": 198,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752256927.4479795
  },
  {
    "mbpp_id": 391,
    "problem": {
      "task_id": 391,
      "text": "Write a function to convert more than one list to nested dictionary.",
      "code": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result",
      "test_list": [
        "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
        "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
        "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert more than one list to nested dictionary.\n\nTask ID: 391\n\nExpected behavior (test cases):\n1. convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n2. convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n3. convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def convert_list_dictionary(list1,list2):\r\n    result = []\r\n    for i in range(len(list1)):\r\n        dic = {}\r\n        for j in range(len(list2)):\r\n            dic[list1[i]] = list2[j]\r\n        result.append(dic)\r\n    return result "
          }
        }
      ],
      "usage": {
        "total_tokens": 424,
        "prompt_tokens": 376,
        "completion_tokens": 55
      }
    },
    "timestamp": 1752256931.6374097
  },
  {
    "mbpp_id": 392,
    "problem": {
      "task_id": 392,
      "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
      "code": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]",
      "test_list": [
        "assert get_max_sum(60) == 106",
        "assert get_max_sum(10) == 12",
        "assert get_max_sum(2) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\nTask ID: 392\n\nExpected behavior (test cases):\n1. get_max_sum(60) should return 106\n2. get_max_sum(10) should return 12\n3. get_max_sum(2) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_max_sum(n):\r\n    if (n <= 4): \r\n        return n; \r\n    else:\r\n        x = 4 * n // 5;  \r\n        y = 5 * n // 6;  \r\n        return max(x, y) + n % 5"
          }
        }
      ],
      "usage": {
        "total_tokens": 217,
        "prompt_tokens": 165,
        "completion_tokens": 59
      }
    },
    "timestamp": 1752256936.0142639
  },
  {
    "mbpp_id": 393,
    "problem": {
      "task_id": 393,
      "text": "Write a function to find the list with maximum length using lambda function.",
      "code": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)",
      "test_list": [
        "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
        "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
        "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the list with maximum length using lambda function.\n\nTask ID: 393\n\nExpected behavior (test cases):\n1. max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n2. max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n3. max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_length_list(test):\r\n  return(max(enumerate(test), key=len))"
          }
        }
      ],
      "usage": {
        "total_tokens": 241,
        "prompt_tokens": 232,
        "completion_tokens": 16
      }
    },
    "timestamp": 1752256937.6300151
  },
  {
    "mbpp_id": 394,
    "problem": {
      "task_id": 394,
      "text": "Write a function to check if given tuple is distinct or not.",
      "code": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ",
      "test_list": [
        "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
        "assert check_distinct((1, 4, 5, 6)) == True",
        "assert check_distinct((2, 3, 4, 5, 6)) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if given tuple is distinct or not.\n\nTask ID: 394\n\nExpected behavior (test cases):\n1. check_distinct((1, 4, 5, 6, 1, 4)) should return False\n2. check_distinct((1, 4, 5, 6)) should return True\n3. check_distinct((2, 3, 4, 5, 6)) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_distinct(test_tup):\r\n    return len(set(test_tup)) == len(test_tup)"
          }
        }
      ],
      "usage": {
        "total_tokens": 175,
        "prompt_tokens": 160,
        "completion_tokens": 22
      }
    },
    "timestamp": 1752256939.6803555
  },
  {
    "mbpp_id": 395,
    "problem": {
      "task_id": 395,
      "text": "Write a python function to find the first non-repeated character in a given string.",
      "code": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None",
      "test_list": [
        "assert first_non_repeating_character(\"abcabc\") == None",
        "assert first_non_repeating_character(\"abc\") == \"a\"",
        "assert first_non_repeating_character(\"ababc\") == \"c\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the first non-repeated character in a given string.\n\nTask ID: 395\n\nExpected behavior (test cases):\n1. first_non_repeating_character(\"abcabc\") should return None\n2. first_non_repeating_character(\"abc\") should return \"a\"\n3. first_non_repeating_character(\"ababc\") should return \"c\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def first_non_repeating_character(string):\r\n    for char in string:\r\n        if string.count(char) == 1:\r\n            return char\r\n    return None"
          }
        }
      ],
      "usage": {
        "total_tokens": 162,
        "prompt_tokens": 138,
        "completion_tokens": 31
      }
    },
    "timestamp": 1752256942.302226
  },
  {
    "mbpp_id": 396,
    "problem": {
      "task_id": 396,
      "text": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
      "code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ",
      "test_list": [
        "assert check_char(\"abba\") == \"Valid\"",
        "assert check_char(\"a\") == \"Valid\"",
        "assert check_char(\"abcd\") == \"Invalid\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given string starts and ends with the same character or not using regex.\n\nTask ID: 396\n\nExpected behavior (test cases):\n1. check_char(\"abba\") should return \"Valid\"\n2. check_char(\"a\") should return \"Valid\"\n3. check_char(\"abcd\") should return \"Invalid\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef check_char(text):\r\n  if (re.match('(.).*\\1', text)):\r\n    print(\"Valid\")\r\n  else :\r\n    print(\"Invalid\")"
          }
        }
      ],
      "usage": {
        "total_tokens": 160,
        "prompt_tokens": 133,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752256945.17229
  },
  {
    "mbpp_id": 397,
    "problem": {
      "task_id": 397,
      "text": "Write a function to find the median of three specific numbers.",
      "code": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median",
      "test_list": [
        "assert median_numbers(25,55,65)==55.0",
        "assert median_numbers(20,10,30)==20.0",
        "assert median_numbers(15,45,75)==45.0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the median of three specific numbers.\n\nTask ID: 397\n\nExpected behavior (test cases):\n1. median_numbers(25,55,65)==55.0\n2. median_numbers(20,10,30)==20.0\n3. median_numbers(15,45,75)==45.0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def median_numbers(a,b,c):\r\n    if a<=b and b>=c:\r\n        return(b)\r\n    elif c<=a and a>=b:\r\n        return(a)\r\n    else:\r\n        return(c)"
          }
        }
      ],
      "usage": {
        "total_tokens": 179,
        "prompt_tokens": 144,
        "completion_tokens": 42
      }
    },
    "timestamp": 1752256948.5659509
  },
  {
    "mbpp_id": 398,
    "problem": {
      "task_id": 398,
      "text": "Write a function to compute the sum of digits of each number of a given list.",
      "code": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
      "test_list": [
        "assert sum_of_digits([10,2,56])==14",
        "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
        "assert sum_of_digits([10,20,-4,5,-70])==19"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to compute the sum of digits of each number of a given list.\n\nTask ID: 398\n\nExpected behavior (test cases):\n1. sum_of_digits([10,2,56])==14\n2. sum_of_digits([[10,20,4,5,'b',70,'a']])==19\n3. sum_of_digits([10,20,-4,5,-70])==19\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_of_digits(numbers):\r\n    result = []\r\n    for num in numbers:\r\n        if isinstance(num, int):\r\n            temp = [int(x) for x in str(num)]\r\n            res = sum(temp)\r\n            result.append(res)\r\n        else:\r\n            result.append('not an integer')\r\n    return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 212,
        "prompt_tokens": 158,
        "completion_tokens": 61
      }
    },
    "timestamp": 1752256953.1054401
  },
  {
    "mbpp_id": 399,
    "problem": {
      "task_id": 399,
      "text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
      "code": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "test_list": [
        "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
        "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
        "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\nTask ID: 399\n\nExpected behavior (test cases):\n1. bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) should return (15, 6, 5, 10)\n2. bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) should return (13, 6, 3, 14)\n3. bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) should return (11, 2, 13, 13)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def bitwise_xor(x, y):\r\n    z = [bin(x[i] ^ y[i])[2:] for i in range(len(x))] \r\n    return tuple(int(z[i], base=2) for i in range(len(z)))"
          }
        }
      ],
      "usage": {
        "total_tokens": 268,
        "prompt_tokens": 228,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752256956.6998687
  },
  {
    "mbpp_id": 400,
    "problem": {
      "task_id": 400,
      "text": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
      "code": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)",
      "test_list": [
        "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
        "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
        "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract the frequency of unique tuples in the given list order irrespective.\n\nTask ID: 400\n\nExpected behavior (test cases):\n1. extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) should return 3\n2. extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) should return 4\n3. extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) should return 4\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "from itertools import groupby\r\ndef extract_freq(list_):\r\n    result = [len(list(group)) for key, group in groupby(enumerate(sorted(list_(be)), -1), lambda i_x:i_x[1])]\r\n    return sum(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 240,
        "prompt_tokens": 196,
        "completion_tokens": 51
      }
    },
    "timestamp": 1752256960.5245488
  },
  {
    "mbpp_id": 401,
    "problem": {
      "task_id": 401,
      "text": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
      "code": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "test_list": [
        "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
        "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
        "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n\nTask ID: 401\n\nExpected behavior (test cases):\n1. add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) should return ((7, 10), (7, 14), (3, 10), (8, 13))\n2. add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) should return ((9, 12), (9, 16), (5, 12), (10, 15))\n3. add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) should return ((11, 14), (11, 18), (7, 14), (12, 17))\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def add_nested_tuples(a, b):\r\n  result = [tuple(map(sum, zip(*pair))) for pair in zip(a, b)]\r\n  return result "
          }
        }
      ],
      "usage": {
        "total_tokens": 378,
        "prompt_tokens": 353,
        "completion_tokens": 32
      }
    },
    "timestamp": 1752256963.1915574
  },
  {
    "mbpp_id": 402,
    "problem": {
      "task_id": 402,
      "text": "Write a function to compute the value of ncr%p.",
      "code": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ",
      "test_list": [
        "assert ncr_modp(10,2,13)==6",
        "assert ncr_modp(15,12,43)==25",
        "assert ncr_modp(17,9,18)==10"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to compute the value of ncr%p.\n\nTask ID: 402\n\nExpected behavior (test cases):\n1. ncr_modp(10,2,13)==6\n2. ncr_modp(15,12,43)==25\n3. ncr_modp(17,9,18)==10\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def ncr_modp(n,r,p):\r\n    q=p\r\n    while r>0:\r\n        q=q*(n-r+1)//r\r\n        n=n-1\r\n    return(q)"
          }
        }
      ],
      "usage": {
        "total_tokens": 174,
        "prompt_tokens": 141,
        "completion_tokens": 40
      }
    },
    "timestamp": 1752256966.3914285
  },
  {
    "mbpp_id": 403,
    "problem": {
      "task_id": 403,
      "text": "Write a function to check if a url is valid or not using regex.",
      "code": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False",
      "test_list": [
        "assert is_valid_URL(\"https://www.google.com\") == True",
        "assert is_valid_URL(\"https:/www.gmail.com\") == False",
        "assert is_valid_URL(\"https:// www.redit.com\") == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if a url is valid or not using regex.\n\nTask ID: 403\n\nExpected behavior (test cases):\n1. is_valid_URL(\"https://www.google.com\") should return True\n2. is_valid_URL(\"https:/www.gmail.com\") should return False\n3. is_valid_URL(\"https:// www.redit.com\") should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef is_valid_URL(url):\r\n    reg_ex = '^(http://|https://)?[a-zA-Z]+\\w*@?(\\.[a-z]+)+/[\\w-._%+-]+'\r\n    result = re.match(reg_ex, url)\r\n    if result == None:\r\n        print (\"Invalid URL\")\r\n        return False\r\n    else:\r\n        print (\"Valid URL\")\r\n        return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 214,
        "prompt_tokens": 139,
        "completion_tokens": 82
      }
    },
    "timestamp": 1752256972.2885287
  },
  {
    "mbpp_id": 404,
    "problem": {
      "task_id": 404,
      "text": "Write a python function to find the minimum of two numbers.",
      "code": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ",
      "test_list": [
        "assert minimum(1,2) == 1",
        "assert minimum(-5,-4) == -5",
        "assert minimum(0,0) == 0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the minimum of two numbers.\n\nTask ID: 404\n\nExpected behavior (test cases):\n1. minimum(1,2) should return 1\n2. minimum(-5,-4) should return -5\n3. minimum(0,0) should return 0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def minimum(x,y):\r\n  if x < y:\r\n    return x\r\n  else:\r\n    return y"
          }
        }
      ],
      "usage": {
        "total_tokens": 140,
        "prompt_tokens": 126,
        "completion_tokens": 21
      }
    },
    "timestamp": 1752256974.217224
  },
  {
    "mbpp_id": 405,
    "problem": {
      "task_id": 405,
      "text": "Write a function to check whether an element exists within a tuple.",
      "code": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False",
      "test_list": [
        "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
        "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
        "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether an element exists within a tuple.\n\nTask ID: 405\n\nExpected behavior (test cases):\n1. check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n2. check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n3. check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_tuplex(tup,x):\r\n    if x in tup:\r\n        return True\r\n    else:\r\n        return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 227,
        "prompt_tokens": 209,
        "completion_tokens": 25
      }
    },
    "timestamp": 1752256976.4383519
  },
  {
    "mbpp_id": 406,
    "problem": {
      "task_id": 406,
      "text": "Write a python function to find the parity of a given number.",
      "code": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ",
      "test_list": [
        "assert find_Parity(12) == \"Even Parity\"",
        "assert find_Parity(7) == \"Odd Parity\"",
        "assert find_Parity(10) == \"Even Parity\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the parity of a given number.\n\nTask ID: 406\n\nExpected behavior (test cases):\n1. find_Parity(12) should return \"Even Parity\"\n2. find_Parity(7) should return \"Odd Parity\"\n3. find_Parity(10) should return \"Even Parity\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Parity(num):\r\n  if num % 2 == 0:\r\n    print (\"even\")\r\n  else:\r\n    print(\"odd\")"
          }
        }
      ],
      "usage": {
        "total_tokens": 157,
        "prompt_tokens": 135,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752256978.9020884
  },
  {
    "mbpp_id": 407,
    "problem": {
      "task_id": 407,
      "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
      "code": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
      "test_list": [
        "assert rearrange_bigger(12)==21",
        "assert rearrange_bigger(10)==False",
        "assert rearrange_bigger(102)==120"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to create the next bigger number by rearranging the digits of a given number.\n\nTask ID: 407\n\nExpected behavior (test cases):\n1. rearrange_bigger(12)==21\n2. rearrange_bigger(10)==False\n3. rearrange_bigger(102)==120\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import itertools\r\ndef find_next_greater(num):\r\n    temp = list(str(num))\r\n    l = len(temp)\r\n    for i in range(l-1,-1,-1):\r\n        if (temp[i] < str(i+1)):\r\n            break\r\n    else:\r\n        return False\r\n    \r\n    j = -1\r\n    for i in reversed(range(l)):\r\n        if (temp[i] > temp[i-1]):\r\n            j = i\r\n            break\r\n    temp[j], temp[i-1] = temp[i-1], temp[j]\r\n    \r\n    left = temp[:i][::-1]\r\n    right = ''.join(sorted(temp[i:], reverse=True))\r\n    new_num = int(''.join([left,right]))\r\n    return new_num "
          }
        }
      ],
      "usage": {
        "total_tokens": 276,
        "prompt_tokens": 134,
        "completion_tokens": 149
      }
    },
    "timestamp": 1752256988.975648
  },
  {
    "mbpp_id": 408,
    "problem": {
      "task_id": 408,
      "text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
      "code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
      "test_list": [
        "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
        "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
        "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\nTask ID: 408\n\nExpected behavior (test cases):\n1. k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n2. k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\n3. k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def k_smallest_pairs(A, B, k):\r\n    ans = []\r\n    for i in range(len(A)):\r\n        for j in range(len(B)):\r\n            if len(ans) < k:\r\n                ans.append([A[i], B[j]])\r\n    return sorted(ans)[:k]"
          }
        }
      ],
      "usage": {
        "total_tokens": 275,
        "prompt_tokens": 225,
        "completion_tokens": 57
      }
    },
    "timestamp": 1752256993.247369
  },
  {
    "mbpp_id": 409,
    "problem": {
      "task_id": 409,
      "text": "Write a function to find the minimum product from the pairs of tuples within a given list.",
      "code": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min",
      "test_list": [
        "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
        "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
        "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the minimum product from the pairs of tuples within a given list.\n\nTask ID: 409\n\nExpected behavior (test cases):\n1. min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n2. min_product_tuple([(10,20), (15,2), (5,10)] )==30\n3. min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def min_product_tuple(tuples):\r\n    # sorting tuple based on first number in ascending order\r\n    res = sorted(tuples, key=lambda x: x[0])\r\n    \r\n    # initializing the value with the minimum element in the first tuple\r\n    ans = res[0][0] * res[0][1]\r\n    \r\n    # iterate through the remaining tuples and calculate their product\r\n    for i in range(1, len(res)):\r\n        curr_prod = res[i][0] * res[i][1]\r\n        if curr_prod < ans:\r\n            ans = curr_prod\r\n            \r\n    return ans"
          }
        }
      ],
      "usage": {
        "total_tokens": 306,
        "prompt_tokens": 193,
        "completion_tokens": 120
      }
    },
    "timestamp": 1752257001.5588696
  },
  {
    "mbpp_id": 410,
    "problem": {
      "task_id": 410,
      "text": "Write a function to find the minimum value in a given heterogeneous list.",
      "code": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val",
      "test_list": [
        "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
        "assert min_val(['Python', 15, 20, 25])==15",
        "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the minimum value in a given heterogeneous list.\n\nTask ID: 410\n\nExpected behavior (test cases):\n1. min_val(['Python', 3, 2, 4, 5, 'version'])==2\n2. min_val(['Python', 15, 20, 25])==15\n3. min_val(['Python', 30, 20, 40, 50, 'version'])==20\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def min_val(list):\r\n    for i in range(len(list)):\r\n        if type(list[i]) is not int:\r\n            return \"The input should be of integer values\"\r\n        else:\r\n            temp = list[i]\r\n    return min(temp)"
          }
        }
      ],
      "usage": {
        "total_tokens": 207,
        "prompt_tokens": 166,
        "completion_tokens": 48
      }
    },
    "timestamp": 1752257005.1813626
  },
  {
    "mbpp_id": 411,
    "problem": {
      "task_id": 411,
      "text": "Write a function to convert the given snake case string to camel case string by using regex.",
      "code": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
      "test_list": [
        "assert snake_to_camel('android_tv') == 'AndroidTv'",
        "assert snake_to_camel('google_pixel') == 'GooglePixel'",
        "assert snake_to_camel('apple_watch') == 'AppleWatch'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert the given snake case string to camel case string by using regex.\n\nTask ID: 411\n\nExpected behavior (test cases):\n1. snake_to_camel('android_tv') should return 'AndroidTv'\n2. snake_to_camel('google_pixel') should return 'GooglePixel'\n3. snake_to_camel('apple_watch') should return 'AppleWatch'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef snake_to_camel(string):\r\n  res = ''.join(x for x in string.title() if not x.isspace())\r\n  pattern = re.compile('[^a-zA-Z]')\r\n  res = pattern.sub('', res)\r\n  return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 186,
        "prompt_tokens": 141,
        "completion_tokens": 52
      }
    },
    "timestamp": 1752257009.0900576
  },
  {
    "mbpp_id": 412,
    "problem": {
      "task_id": 412,
      "text": "Write a python function to remove odd numbers from a given list.",
      "code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l",
      "test_list": [
        "assert remove_odd([1,2,3]) == [2]",
        "assert remove_odd([2,4,6]) == [2,4,6]",
        "assert remove_odd([10,20,3]) == [10,20]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to remove odd numbers from a given list.\n\nTask ID: 412\n\nExpected behavior (test cases):\n1. remove_odd([1,2,3]) should return [2]\n2. remove_odd([2,4,6]) should return [2,4,6]\n3. remove_odd([10,20,3]) should return [10,20]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_odd(arr):\r\n    output = []\r\n    for i in arr:\r\n        if(i%2 == 0):\r\n            output.append(i)\r\n    return(output)"
          }
        }
      ],
      "usage": {
        "total_tokens": 172,
        "prompt_tokens": 146,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752257011.8028228
  },
  {
    "mbpp_id": 413,
    "problem": {
      "task_id": 413,
      "text": "Write a function to extract the nth element from a given list of tuples.",
      "code": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result",
      "test_list": [
        "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
        "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
        "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract the nth element from a given list of tuples.\n\nTask ID: 413\n\nExpected behavior (test cases):\n1. extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n2. extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n3. extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def extract_nth_element(test_list,n):\r\n    result = []\r\n    for ele in test_list:\r\n        if n <= len(ele) - 1 and n >= 0:\r\n            result.append(str(ele[n]))\r\n    return(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 364,
        "prompt_tokens": 325,
        "completion_tokens": 46
      }
    },
    "timestamp": 1752257015.4106147
  },
  {
    "mbpp_id": 414,
    "problem": {
      "task_id": 414,
      "text": "Write a python function to check whether the value exists in a sequence or not.",
      "code": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0",
      "test_list": [
        "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
        "assert overlapping([1,2,3],[4,5,6]) == False",
        "assert overlapping([1,4,5],[1,4,5]) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the value exists in a sequence or not.\n\nTask ID: 414\n\nExpected behavior (test cases):\n1. overlapping([1,2,3,4,5],[6,7,8,9]) should return False\n2. overlapping([1,2,3],[4,5,6]) should return False\n3. overlapping([1,4,5],[1,4,5]) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def overlapping(test_list1,test_list2):\r\n    result = [item for item in test_list1 if item in test_list2]\r\n    if len(result) == 0:\r\n        return False\r\n    else:\r\n        return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 196,
        "prompt_tokens": 157,
        "completion_tokens": 46
      }
    },
    "timestamp": 1752257019.0379279
  },
  {
    "mbpp_id": 415,
    "problem": {
      "task_id": 415,
      "text": "Write a python function to find a pair with highest product from a given array of integers.",
      "code": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ",
      "test_list": [
        "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
        "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
        "assert max_Product([1,2,3]) == (2,3)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find a pair with highest product from a given array of integers.\n\nTask ID: 415\n\nExpected behavior (test cases):\n1. max_Product([1,2,3,4,7,0,8,4]) should return (7,8)\n2. max_Product([0,-1,-2,-4,5,0,-6]) should return (-4,-6)\n3. max_Product([1,2,3]) should return (2,3)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_Product(nums): \r\n\tn = len(nums) \r\n\tmax_product = float(\"-inf\")  \r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tproduct = nums[i] * nums[j] \r\n\t\t\tif (product > max_product): \r\n\t\t\t\tmax_product = product\r\n\treturn (max_product, i+1,j+1)"
          }
        }
      ],
      "usage": {
        "total_tokens": 236,
        "prompt_tokens": 165,
        "completion_tokens": 78
      }
    },
    "timestamp": 1752257024.7317355
  },
  {
    "mbpp_id": 416,
    "problem": {
      "task_id": 416,
      "text": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
      "code": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
      "test_list": [
        "assert breakSum(12) == 13",
        "assert breakSum(24) == 27",
        "assert breakSum(23) == 23"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\nTask ID: 416\n\nExpected behavior (test cases):\n1. breakSum(12) should return 13\n2. breakSum(24) should return 27\n3. breakSum(23) should return 23\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def breakSum(n):\r\n   if n==0:\r\n       return 0\r\n   elif n%2 == 0:\r\n       x = int(n/2)\r\n       res=2*breakSum(x)+x\r\n   else:\r\n       res=n-1+breakSum(n-1)\r\n   return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 202,
        "prompt_tokens": 146,
        "completion_tokens": 63
      }
    },
    "timestamp": 1752257029.3163412
  },
  {
    "mbpp_id": 417,
    "problem": {
      "task_id": 417,
      "text": "Write a function to find common first element in given list of tuple.",
      "code": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ",
      "test_list": [
        "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
        "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
        "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find common first element in given list of tuple.\n\nTask ID: 417\n\nExpected behavior (test cases):\n1. group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) should return [('x', 'y', 'z'), ('w', 't')]\n2. group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) should return [('a', 'b', 'c'), ('d', 'e')]\n3. group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) should return [('f', 'g', 'g'), ('h', 'i')]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def group_tuples(lst):\r\n    lst.sort()\r\n    res = []\r\n    for i in range(len(lst)):\r\n        if i == len(lst) - 1:\r\n            temp = lst[i][0]\r\n            tup = (temp, *lst[i])\r\n            res.append(tup)\r\n        else:\r\n            if lst[i][0] == lst[i + 1][0]:\r\n                temp = lst[i][0]\r\n                tup = (temp, *lst[i], *lst[i + 1])\r\n                res.append(tup)\r\n                res.remove((lst[i][0], *lst[i + 1]))\r\n                i += 1\r\n    return res "
          }
        }
      ],
      "usage": {
        "total_tokens": 335,
        "prompt_tokens": 210,
        "completion_tokens": 132
      }
    },
    "timestamp": 1752257038.4956002
  },
  {
    "mbpp_id": 418,
    "problem": {
      "task_id": 418,
      "text": "Write a python function to find the sublist having maximum length.",
      "code": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList",
      "test_list": [
        "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
        "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
        "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sublist having maximum length.\n\nTask ID: 418\n\nExpected behavior (test cases):\n1. Find_Max([['A'],['A','B'],['A','B','C']]) should return ['A','B','C']\n2. Find_Max([[1],[1,2],[1,2,3]]) should return [1,2,3]\n3. Find_Max([[1,1],[1,2,3],[1,5,6,1]]) should return [1,5,6,1]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def Find_Max(test_list):\r\n    res = test_list[0]\r\n    for i in range(len(test_list)):\r\n        if len(res) < len(test_list[i]):\r\n            res = test_list[i]\r\n    return res"
          }
        }
      ],
      "usage": {
        "total_tokens": 212,
        "prompt_tokens": 175,
        "completion_tokens": 44
      }
    },
    "timestamp": 1752257041.9157948
  },
  {
    "mbpp_id": 419,
    "problem": {
      "task_id": 419,
      "text": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
      "code": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum",
      "test_list": [
        "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
        "assert round_and_sum([5,2,9,24.3,29])==345",
        "assert round_and_sum([25.0,56.7,89.2])==513"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\nTask ID: 419\n\nExpected behavior (test cases):\n1. round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n2. round_and_sum([5,2,9,24.3,29])==345\n3. round_and_sum([25.0,56.7,89.2])==513\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def round_and_sum(numbers):\r\n    sum = 0\r\n    for i in range(len(numbers)):\r\n        if type(numbers[i]) == float:\r\n            numbers[i] = int(round(numbers[i]))\r\n            sum += numbers[i]\r\n    return (sum * len(numbers))"
          }
        }
      ],
      "usage": {
        "total_tokens": 263,
        "prompt_tokens": 217,
        "completion_tokens": 53
      }
    },
    "timestamp": 1752257045.9165308
  },
  {
    "mbpp_id": 420,
    "problem": {
      "task_id": 420,
      "text": "Write a python function to find the cube sum of first n even natural numbers.",
      "code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
      "test_list": [
        "assert cube_Sum(2) == 72",
        "assert cube_Sum(3) == 288",
        "assert cube_Sum(4) == 800"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the cube sum of first n even natural numbers.\n\nTask ID: 420\n\nExpected behavior (test cases):\n1. cube_Sum(2) should return 72\n2. cube_Sum(3) should return 288\n3. cube_Sum(4) should return 800\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def cube_Sum(n): \r\n    total = 0\r\n    for i in range(1,n+1):\r\n        num = 2 * i * i\r\n        total += num ** 3\r\n    return int(total)"
          }
        }
      ],
      "usage": {
        "total_tokens": 175,
        "prompt_tokens": 135,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752257049.5203118
  },
  {
    "mbpp_id": 421,
    "problem": {
      "task_id": 421,
      "text": "Write a function to concatenate each element of tuple by the delimiter.",
      "code": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ",
      "test_list": [
        "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
        "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
        "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to concatenate each element of tuple by the delimiter.\n\nTask ID: 421\n\nExpected behavior (test cases):\n1. concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) should return 'ID-is-4-UTS'\n2. concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) should return 'QWE-is-4-RTY'\n3. concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) should return 'ZEN-is-4-OP'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def concatenate_tuple(test_tup):\r\n    string = \"\"\r\n    for item in test_tup:\r\n        if type(item) == int:\r\n            continue\r\n        else:\r\n            string += str(item)\r\n    return(string)"
          }
        }
      ],
      "usage": {
        "total_tokens": 213,
        "prompt_tokens": 177,
        "completion_tokens": 43
      }
    },
    "timestamp": 1752257052.8660367
  },
  {
    "mbpp_id": 422,
    "problem": {
      "task_id": 422,
      "text": "Write a python function to find the average of cubes of first n natural numbers.",
      "code": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ",
      "test_list": [
        "assert find_Average_Of_Cube(2) == 4.5",
        "assert find_Average_Of_Cube(3) == 12",
        "assert find_Average_Of_Cube(1) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the average of cubes of first n natural numbers.\n\nTask ID: 422\n\nExpected behavior (test cases):\n1. find_Average_Of_Cube(2) should return 4.5\n2. find_Average_Of_Cube(3) should return 12\n3. find_Average_Of_Cube(1) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_Average_Of_Cube(n):\r\n  sum=0\r\n  for i in range(1,n+1):\r\n    sum=sum+(i**3)\r\n  average=sum/n\r\n  return average"
          }
        }
      ],
      "usage": {
        "total_tokens": 176,
        "prompt_tokens": 142,
        "completion_tokens": 41
      }
    },
    "timestamp": 1752257056.1360204
  },
  {
    "mbpp_id": 423,
    "problem": {
      "task_id": 423,
      "text": "Write a function to solve gold mine problem.",
      "code": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ",
      "test_list": [
        "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
        "assert get_maxgold([[10,20],[30,40]],2,2)==70",
        "assert get_maxgold([[4,9],[3,7]],2,2)==13"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to solve gold mine problem.\n\nTask ID: 423\n\nExpected behavior (test cases):\n1. get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n2. get_maxgold([[10,20],[30,40]],2,2)==70\n3. get_maxgold([[4,9],[3,7]],2,2)==13\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_maxgold(goldMine,n,m):\r\n    maxGold = [[-1 for i in range(m)] for j in range(n)]\r\n    maxGold[0][0] = goldMine[0][0]\r\n    \r\n    # row and column with zero elements\r\n    col_with_zero_element = [0]*n \r\n    row_with_zero_element = [0]*m\r\n    \r\n    for i in range(1,n):  \r\n        if (goldMine[i][0] == 0) :   \r\n            row_with_zero_element[i] = 1\r\n    \r\n    for j in range(1,m):     \r\n        if (goldMine[0][j] == 0): \r\n            col_with_zero_element[j] = 1\r\n             \r\n        \r\n    for i in range(1,n):    \r\n        for j in range(1,m):          \r\n            if (goldMine[i][j]==0):         \r\n                maxGold[i][j] = max(maxGold[i][j - 1],maxGold[i - 1][j])      \r\n            else:\r\n                maxGold[i][j] = goldMine[i][j] + max(maxGold[i - 1][j], maxGold[i][j - 1])\r\n               \r\n    return maxGold[n - 1][m - 1]"
          }
        }
      ],
      "usage": {
        "total_tokens": 443,
        "prompt_tokens": 187,
        "completion_tokens": 263
      }
    },
    "timestamp": 1752257073.5745163
  },
  {
    "mbpp_id": 424,
    "problem": {
      "task_id": 424,
      "text": "Write a function to extract only the rear index element of each string in the given tuple.",
      "code": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ",
      "test_list": [
        "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
        "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
        "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract only the rear index element of each string in the given tuple.\n\nTask ID: 424\n\nExpected behavior (test cases):\n1. extract_rear(('Mers', 'for', 'Vers') ) should return ['s', 'r', 's']\n2. extract_rear(('Avenge', 'for', 'People') ) should return ['e', 'r', 'e']\n3. extract_rear(('Gotta', 'get', 'go') ) should return ['a', 't', 'o']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def extract_rear(test_tuple):\r\n    output = [i[-1] for i in test_tuple]\r\n    return(output)"
          }
        }
      ],
      "usage": {
        "total_tokens": 192,
        "prompt_tokens": 174,
        "completion_tokens": 25
      }
    },
    "timestamp": 1752257075.776954
  },
  {
    "mbpp_id": 425,
    "problem": {
      "task_id": 425,
      "text": "Write a function to count the number of sublists containing a particular element.",
      "code": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
      "test_list": [
        "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
        "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
        "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count the number of sublists containing a particular element.\n\nTask ID: 425\n\nExpected behavior (test cases):\n1. count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n2. count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n3. count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_element_in_list(list_1,e): \r\n    count = 0\r\n    for i in list_1:\r\n        if e in i:  \r\n            count += 1\r\n    \r\n    return count"
          }
        }
      ],
      "usage": {
        "total_tokens": 247,
        "prompt_tokens": 213,
        "completion_tokens": 41
      }
    },
    "timestamp": 1752257079.0239162
  },
  {
    "mbpp_id": 426,
    "problem": {
      "task_id": 426,
      "text": "Write a function to filter odd numbers using lambda function.",
      "code": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums",
      "test_list": [
        "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
        "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to filter odd numbers using lambda function.\n\nTask ID: 426\n\nExpected behavior (test cases):\n1. filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n2. filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\n3. filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def filter_oddnumbers(numbers):\r\n    return list(filter(lambda x : x % 2 != 0 ,numbers)) "
          }
        }
      ],
      "usage": {
        "total_tokens": 213,
        "prompt_tokens": 196,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752257081.1696234
  },
  {
    "mbpp_id": 427,
    "problem": {
      "task_id": 427,
      "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
      "code": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
      "test_list": [
        "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
        "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
        "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\nTask ID: 427\n\nExpected behavior (test cases):\n1. change_date_format(\"2026-01-02\") should return '02-01-2026'\n2. change_date_format(\"2020-11-13\") should return '13-11-2020'\n3. change_date_format(\"2021-04-26\") should return '26-04-2021'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef change_date_format(date_string):\r\n    new_date = re.sub(r'\\D', '', date_string)\r\n    return f\"{new_date[-2:]}-{new_date[5:7]}-{new_date[:4]}\""
          }
        }
      ],
      "usage": {
        "total_tokens": 230,
        "prompt_tokens": 189,
        "completion_tokens": 48
      }
    },
    "timestamp": 1752257084.7563336
  },
  {
    "mbpp_id": 428,
    "problem": {
      "task_id": 428,
      "text": "Write a function to sort the given array by using shell sort.",
      "code": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
      "test_list": [
        "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
        "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
        "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort the given array by using shell sort.\n\nTask ID: 428\n\nExpected behavior (test cases):\n1. shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) should return [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n2. shell_sort([24, 22, 39, 34, 87, 73, 68]) should return [22, 24, 34, 39, 68, 73, 87]\n3. shell_sort([32, 30, 16, 96, 82, 83, 74]) should return [16, 30, 32, 74, 82, 83, 96]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def shell_sort(arr): \r\n    n = len(arr)  \r\n    gap = int(n / 2)    \r\n    while(gap > 0): \r\n        for i in range(gap,n):   \r\n            temp = arr[i]    \r\n            j = i \r\n            while  j >= gap and arr[j - gap] >temp : \r\n                arr[j] = arr[j - gap]     \r\n                j -= gap        \r\n            arr[j] = temp\r\n        gap = int(gap/2)  \r\n    return arr"
          }
        }
      ],
      "usage": {
        "total_tokens": 389,
        "prompt_tokens": 290,
        "completion_tokens": 106
      }
    },
    "timestamp": 1752257092.1487021
  },
  {
    "mbpp_id": 429,
    "problem": {
      "task_id": 429,
      "text": "Write a function to extract the elementwise and tuples from the given two tuples.",
      "code": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "test_list": [
        "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
        "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
        "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract the elementwise and tuples from the given two tuples.\n\nTask ID: 429\n\nExpected behavior (test cases):\n1. and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) should return (0, 0, 2, 1)\n2. and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) should return (1, 2, 3, 0)\n3. and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) should return (0, 9, 10, 0)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def and_tuples(x, y):\r\n    return tuple(map(lambda x, y : x & y , x ,y ))"
          }
        }
      ],
      "usage": {
        "total_tokens": 241,
        "prompt_tokens": 224,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752257094.2555027
  },
  {
    "mbpp_id": 430,
    "problem": {
      "task_id": 430,
      "text": "Write a function to find the directrix of a parabola.",
      "code": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix",
      "test_list": [
        "assert parabola_directrix(5,3,2)==-198",
        "assert parabola_directrix(9,8,4)==-2336",
        "assert parabola_directrix(2,4,6)==-130"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the directrix of a parabola.\n\nTask ID: 430\n\nExpected behavior (test cases):\n1. parabola_directrix(5,3,2)==-198\n2. parabola_directrix(9,8,4)==-2336\n3. parabola_directrix(2,4,6)==-130\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef parabola_directrix(a,b,c):\r\n    return(-b-(math.sqrt(b**2-4*a*c)))/2*a+math.inf"
          }
        }
      ],
      "usage": {
        "total_tokens": 174,
        "prompt_tokens": 147,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752257097.0412297
  },
  {
    "mbpp_id": 431,
    "problem": {
      "task_id": 431,
      "text": "Write a function that takes two lists and returns true if they have at least one common element.",
      "code": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
      "test_list": [
        "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
        "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
        "assert common_element(['a','b','c'], ['d','b','e'])==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function that takes two lists and returns true if they have at least one common element.\n\nTask ID: 431\n\nExpected behavior (test cases):\n1. common_element([1,2,3,4,5], [5,6,7,8,9])==True\n2. common_element([1,2,3,4,5], [6,7,8,9])==None\n3. common_element(['a','b','c'], ['d','b','e'])==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def common_element(list1,list2):\r\n    for i in list1:\r\n        if i in list2:\r\n            return True\r\n    return False"
          }
        }
      ],
      "usage": {
        "total_tokens": 191,
        "prompt_tokens": 169,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752257099.510291
  },
  {
    "mbpp_id": 432,
    "problem": {
      "task_id": 432,
      "text": "Write a function to find the median of a trapezium.",
      "code": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median",
      "test_list": [
        "assert median_trapezium(15,25,35)==20",
        "assert median_trapezium(10,20,30)==15",
        "assert median_trapezium(6,9,4)==7.5"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the median of a trapezium.\n\nTask ID: 432\n\nExpected behavior (test cases):\n1. median_trapezium(15,25,35)==20\n2. median_trapezium(10,20,30)==15\n3. median_trapezium(6,9,4)==7.5\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def median_trapezium(a,b,c):\r\n    m=(a+b)/2\r\n    h=abs(c-m)\r\n    return c-(h/2)"
          }
        }
      ],
      "usage": {
        "total_tokens": 173,
        "prompt_tokens": 147,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752257102.1594224
  },
  {
    "mbpp_id": 433,
    "problem": {
      "task_id": 433,
      "text": "Write a function to check whether the entered number is greater than the elements of the given array.",
      "code": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')",
      "test_list": [
        "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
        "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
        "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the entered number is greater than the elements of the given array.\n\nTask ID: 433\n\nExpected behavior (test cases):\n1. check_greater([1, 2, 3, 4, 5], 4) should return 'No, entered number is less than those in the array'\n2. check_greater([2, 3, 4, 5, 6], 8) should return 'Yes, the entered number is greater than those in the array'\n3. check_greater([9, 7, 4, 8, 6, 1], 11) should return 'Yes, the entered number is greater than those in the array'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_greater(test_list, num):\r\n    for i in range(len(test_list)):\r\n        if test_list[i] < num:\r\n            return 'Yes, entered number is greater than those in the array'\r\n    else:\r\n        return 'No, entered number is less than those in the array'"
          }
        }
      ],
      "usage": {
        "total_tokens": 263,
        "prompt_tokens": 211,
        "completion_tokens": 59
      }
    },
    "timestamp": 1752257106.5466835
  },
  {
    "mbpp_id": 434,
    "problem": {
      "task_id": 434,
      "text": "Write a function that matches a string that has an a followed by one or more b's.",
      "code": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n",
      "test_list": [
        "assert text_match_one(\"ac\")==('Not matched!')",
        "assert text_match_one(\"dc\")==('Not matched!')",
        "assert text_match_one(\"abba\")==('Found a match!')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function that matches a string that has an a followed by one or more b's.\n\nTask ID: 434\n\nExpected behavior (test cases):\n1. text_match_one(\"ac\")==('Not matched!')\n2. text_match_one(\"dc\")==('Not matched!')\n3. text_match_one(\"abba\")==('Found a match!')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef text_match_one(text):\r\n    patterns = '[ab]+b'\r\n    if re.search(patterns,text):    \r\n        return ('Found a match!')\r\n    else:\r\n        return ('Not matched!')"
          }
        }
      ],
      "usage": {
        "total_tokens": 170,
        "prompt_tokens": 133,
        "completion_tokens": 44
      }
    },
    "timestamp": 1752257109.9843998
  },
  {
    "mbpp_id": 435,
    "problem": {
      "task_id": 435,
      "text": "Write a python function to find the last digit of a given number.",
      "code": "def last_Digit(n) :\r\n    return (n % 10) ",
      "test_list": [
        "assert last_Digit(123) == 3",
        "assert last_Digit(25) == 5",
        "assert last_Digit(30) == 0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the last digit of a given number.\n\nTask ID: 435\n\nExpected behavior (test cases):\n1. last_Digit(123) should return 3\n2. last_Digit(25) should return 5\n3. last_Digit(30) should return 0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def last_Digit(n):\r\n    if n > 9:\r\n        r = str(abs(int((n ** (1 / 2)) - int((n ** (1 / 2))))))\r\n        d = abs(int(r[-1]) % 10)\r\n    else:\r\n        d = abs(n) % 10\r\n    return(d)"
          }
        }
      ],
      "usage": {
        "total_tokens": 197,
        "prompt_tokens": 132,
        "completion_tokens": 72
      }
    },
    "timestamp": 1752257115.1864836
  },
  {
    "mbpp_id": 436,
    "problem": {
      "task_id": 436,
      "text": "Write a python function to print negative numbers in a list.",
      "code": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ",
      "test_list": [
        "assert neg_nos([-1,4,5,-6]) == -1,-6",
        "assert neg_nos([-1,-2,3,4]) == -1,-2",
        "assert neg_nos([-7,-6,8,9]) == -7,-6"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to print negative numbers in a list.\n\nTask ID: 436\n\nExpected behavior (test cases):\n1. neg_nos([-1,4,5,-6]) should return -1,-6\n2. neg_nos([-1,-2,3,4]) should return -1,-2\n3. neg_nos([-7,-6,8,9]) should return -7,-6\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def neg_nos(lst):\r\n  for num in lst:\r\n    if num < 0:\r\n      print(num,end=\" \") "
          }
        }
      ],
      "usage": {
        "total_tokens": 169,
        "prompt_tokens": 150,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752257117.4756768
  },
  {
    "mbpp_id": 437,
    "problem": {
      "task_id": 437,
      "text": "Write a function to remove odd characters in a string.",
      "code": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
      "test_list": [
        "assert remove_odd(\"python\")==(\"yhn\")",
        "assert remove_odd(\"program\")==(\"rga\")",
        "assert remove_odd(\"language\")==(\"agae\")"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove odd characters in a string.\n\nTask ID: 437\n\nExpected behavior (test cases):\n1. remove_odd(\"python\")==(\"yhn\")\n2. remove_odd(\"program\")==(\"rga\")\n3. remove_odd(\"language\")==(\"agae\")\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_odd(string): \r\n\tresult = '' \r\n\tfor char in string:\r\n\t\tif ord(char)%2==0: \r\n\t\t\tresult += char\r\n\treturn result"
          }
        }
      ],
      "usage": {
        "total_tokens": 144,
        "prompt_tokens": 119,
        "completion_tokens": 32
      }
    },
    "timestamp": 1752257120.1446238
  },
  {
    "mbpp_id": 438,
    "problem": {
      "task_id": 438,
      "text": "Write a function to count bidirectional tuple pairs.",
      "code": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ",
      "test_list": [
        "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
        "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
        "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to count bidirectional tuple pairs.\n\nTask ID: 438\n\nExpected behavior (test cases):\n1. count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) should return '3'\n2. count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) should return '2'\n3. count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) should return '4'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_bidirectional(lst):\r\n    d = {}\r\n    for i in lst:\r\n        if i[0] not in d:\r\n            d[i[0]] = {i[1]:1}\r\n        else:\r\n            d[i[0]][i[1]] += 1\r\n        if i[1] not in d:\r\n            d[i[1]] = {i[0]:1}\r\n        else:\r\n            d[i[1]][i[0]] += 1\r\n    ans = 0\r\n    for key in d.keys():\r\n        tmp = len(d[key])\r\n        for val in d[key].values():\r\n            ans += ((tmp - val) * val) // 2\r\n    return ans + len(lst)"
          }
        }
      ],
      "usage": {
        "total_tokens": 368,
        "prompt_tokens": 226,
        "completion_tokens": 149
      }
    },
    "timestamp": 1752257130.4217794
  },
  {
    "mbpp_id": 439,
    "problem": {
      "task_id": 439,
      "text": "Write a function to convert a list of multiple integers into a single integer.",
      "code": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x",
      "test_list": [
        "assert multiple_to_single([11, 33, 50])==113350",
        "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
        "assert multiple_to_single([10,15,20,25])==10152025"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert a list of multiple integers into a single integer.\n\nTask ID: 439\n\nExpected behavior (test cases):\n1. multiple_to_single([11, 33, 50])==113350\n2. multiple_to_single([-1,2,3,4,5,6])==-123456\n3. multiple_to_single([10,15,20,25])==10152025\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def multiple_to_single(lst):\r\n  num = int(''.join(map(str,lst)))\r\n  return str(num) "
          }
        }
      ],
      "usage": {
        "total_tokens": 184,
        "prompt_tokens": 167,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752257132.5668616
  },
  {
    "mbpp_id": 440,
    "problem": {
      "task_id": 440,
      "text": "Write a function to find all adverbs and their positions in a given sentence.",
      "code": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))",
      "test_list": [
        "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
        "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
        "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find all adverbs and their positions in a given sentence.\n\nTask ID: 440\n\nExpected behavior (test cases):\n1. find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n2. find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n3. find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef find_adverb_position(sentence):\r\n    words = sentence.split()\r\n    pattern = r\"(?i)adverb.*\\b\"\r\n    res = [match.start() for match in re.finditer(pattern, \" \".join(words))]\r\n    return tuple(zip(res, [(match.start(), len(match.group())) for match in re.finditer(r\"\\b(adverb)(.*?)\\b\", \" \".join(words))] ))"
          }
        }
      ],
      "usage": {
        "total_tokens": 250,
        "prompt_tokens": 170,
        "completion_tokens": 87
      }
    },
    "timestamp": 1752257138.6961539
  },
  {
    "mbpp_id": 441,
    "problem": {
      "task_id": 441,
      "text": "Write a function to find the surface area of a cube.",
      "code": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea",
      "test_list": [
        "assert surfacearea_cube(5)==150",
        "assert surfacearea_cube(3)==54",
        "assert surfacearea_cube(10)==600"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the surface area of a cube.\n\nTask ID: 441\n\nExpected behavior (test cases):\n1. surfacearea_cube(5)==150\n2. surfacearea_cube(3)==54\n3. surfacearea_cube(10)==600\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def surfacearea_cube(side):\r\n    s = 6 * pow(side, 2)\r\n    return s"
          }
        }
      ],
      "usage": {
        "total_tokens": 137,
        "prompt_tokens": 123,
        "completion_tokens": 21
      }
    },
    "timestamp": 1752257140.6217291
  },
  {
    "mbpp_id": 442,
    "problem": {
      "task_id": 442,
      "text": "Write a function to find the ration of positive numbers in an array of integers.",
      "code": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
      "test_list": [
        "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
        "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
        "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the ration of positive numbers in an array of integers.\n\nTask ID: 442\n\nExpected behavior (test cases):\n1. positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n2. positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n3. positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def positive_count(arr):\r\n    count = sum(1 for i in arr if i > 0)\r\n    return count/len(arr)"
          }
        }
      ],
      "usage": {
        "total_tokens": 248,
        "prompt_tokens": 227,
        "completion_tokens": 28
      }
    },
    "timestamp": 1752257142.997275
  },
  {
    "mbpp_id": 443,
    "problem": {
      "task_id": 443,
      "text": "Write a python function to find the largest negative number from the given list.",
      "code": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max",
      "test_list": [
        "assert largest_neg([1,2,3,-4,-6]) == -6",
        "assert largest_neg([1,2,3,-8,-9]) == -9",
        "assert largest_neg([1,2,3,4,-1]) == -1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the largest negative number from the given list.\n\nTask ID: 443\n\nExpected behavior (test cases):\n1. largest_neg([1,2,3,-4,-6]) should return -6\n2. largest_neg([1,2,3,-8,-9]) should return -9\n3. largest_neg([1,2,3,4,-1]) should return -1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def largest_neg(nums):\r\n    max_neg = None\r\n    for num in nums:\r\n        if num < 0 and (max_neg is None or num > max_neg):\r\n            max_neg = num\r\n    return max_neg"
          }
        }
      ],
      "usage": {
        "total_tokens": 188,
        "prompt_tokens": 150,
        "completion_tokens": 45
      }
    },
    "timestamp": 1752257146.4809818
  },
  {
    "mbpp_id": 444,
    "problem": {
      "task_id": 444,
      "text": "Write a function to trim each tuple by k in the given tuple list.",
      "code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ",
      "test_list": [
        "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
        "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
        "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to trim each tuple by k in the given tuple list.\n\nTask ID: 444\n\nExpected behavior (test cases):\n1. trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) should return '[(2,), (9,), (2,), (2,)]'\n2. trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) should return '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n3. trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) should return '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def trim_tuple(test_list,k):\r\n    res = [tuple(x[k:] for x in test_list)]\r\n    return str(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 384,
        "prompt_tokens": 365,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752257148.7788103
  },
  {
    "mbpp_id": 445,
    "problem": {
      "task_id": 445,
      "text": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
      "code": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "test_list": [
        "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
        "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
        "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\nTask ID: 445\n\nExpected behavior (test cases):\n1. index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) should return ((6, 21), (12, 45), (2, 9), (7, 30))\n2. index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) should return ((14, 32), (20, 60), (6, 20), (16, 44))\n3. index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) should return ((24, 45), (30, 77), (12, 33), (27, 60))\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def index_multiplication(tup1,tup2):\r\n  result = zip(*[itertools.starmap(lambda x,y:x*y ,zip(tup1,tup2))])\r\n  return tuple(map(list, result))"
          }
        }
      ],
      "usage": {
        "total_tokens": 396,
        "prompt_tokens": 358,
        "completion_tokens": 45
      }
    },
    "timestamp": 1752257152.3042808
  },
  {
    "mbpp_id": 446,
    "problem": {
      "task_id": 446,
      "text": "Write a python function to count the occurence of all elements of list in a tuple.",
      "code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ",
      "test_list": [
        "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
        "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
        "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the occurence of all elements of list in a tuple.\n\nTask ID: 446\n\nExpected behavior (test cases):\n1. count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) should return 3\n2. count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) should return 6\n3. count_Occurrence((1,2,3,4,5,6),[1,2]) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def count_Occurrence(test_tup, test_list): \r\n    res = dict() \r\n      \r\n    for ele in test_list : \r\n        if (ele not in res) : \r\n            res[ele] = 0\r\n        res[ele] += 1\r\n    count = 0\r\n    result = []\r\n    for item in test_tup : \r\n        if (item in res) : \r\n            count = res[item] \r\n        else : \r\n            count = 0\r\n        result.append(count) \r\n      \r\n    return result "
          }
        }
      ],
      "usage": {
        "total_tokens": 307,
        "prompt_tokens": 202,
        "completion_tokens": 112
      }
    },
    "timestamp": 1752257160.1371117
  },
  {
    "mbpp_id": 447,
    "problem": {
      "task_id": 447,
      "text": "Write a function to find cubes of individual elements in a list using lambda function.",
      "code": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums",
      "test_list": [
        "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
        "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
        "assert cube_nums([12,15])==([1728, 3375])"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find cubes of individual elements in a list using lambda function.\n\nTask ID: 447\n\nExpected behavior (test cases):\n1. cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n2. cube_nums([10,20,30])==([1000, 8000, 27000])\n3. cube_nums([12,15])==([1728, 3375])\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "cube_nums = lambda nums : map(lambda num : num**3 , nums)"
          }
        }
      ],
      "usage": {
        "total_tokens": 236,
        "prompt_tokens": 227,
        "completion_tokens": 16
      }
    },
    "timestamp": 1752257161.769727
  },
  {
    "mbpp_id": 448,
    "problem": {
      "task_id": 448,
      "text": "Write a function to calculate the sum of perrin numbers.",
      "code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
      "test_list": [
        "assert cal_sum(9) == 49",
        "assert cal_sum(10) == 66",
        "assert cal_sum(11) == 88"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the sum of perrin numbers.\n\nTask ID: 448\n\nExpected behavior (test cases):\n1. cal_sum(9) should return 49\n2. cal_sum(10) should return 66\n3. cal_sum(11) should return 88\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def cal_sum(n):\r\n    if n == 0:\r\n        return 3\r\n    elif n == 1:\r\n        return 5\r\n    else:\r\n        a = 3\r\n        b = 5\r\n        for i in range(n - 1):\r\n            c = a + b\r\n            a = b\r\n            b = c\r\n        return b"
          }
        }
      ],
      "usage": {
        "total_tokens": 196,
        "prompt_tokens": 129,
        "completion_tokens": 74
      }
    },
    "timestamp": 1752257167.1931002
  },
  {
    "mbpp_id": 449,
    "problem": {
      "task_id": 449,
      "text": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
      "code": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ",
      "test_list": [
        "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
        "assert check_Triangle(1,1,1,4,1,5) == 'No'",
        "assert check_Triangle(1,1,1,1,1,1) == 'No'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the triangle is valid or not if 3 points are given.\n\nTask ID: 449\n\nExpected behavior (test cases):\n1. check_Triangle(1,5,2,5,4,6) should return 'Yes'\n2. check_Triangle(1,1,1,4,1,5) should return 'No'\n3. check_Triangle(1,1,1,1,1,1) should return 'No'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_Triangle(x,y,a,b,c):\r\n  if x == a or y == b:\r\n    print(\"Yes\")\r\n  else:\r\n    print(\"No\")"
          }
        }
      ],
      "usage": {
        "total_tokens": 190,
        "prompt_tokens": 164,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752257169.914333
  },
  {
    "mbpp_id": 450,
    "problem": {
      "task_id": 450,
      "text": "Write a function to extract specified size of strings from a give list of string values.",
      "code": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result",
      "test_list": [
        "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
        "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
        "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract specified size of strings from a give list of string values.\n\nTask ID: 450\n\nExpected behavior (test cases):\n1. extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n2. extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n3. extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def extract_string(str_list,size):\r\n  res = [str for str in str_list if len(str) >=size]\r\n  return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 195,
        "prompt_tokens": 174,
        "completion_tokens": 28
      }
    },
    "timestamp": 1752257172.3094578
  },
  {
    "mbpp_id": 451,
    "problem": {
      "task_id": 451,
      "text": "Write a function to remove all whitespaces from the given string using regex.",
      "code": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))",
      "test_list": [
        "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
        "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
        "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove all whitespaces from the given string using regex.\n\nTask ID: 451\n\nExpected behavior (test cases):\n1. remove_whitespaces(' Google    Flutter ') should return 'GoogleFlutter'\n2. remove_whitespaces(' Google    Dart ') should return 'GoogleDart'\n3. remove_whitespaces(' iOS    Swift ') should return 'iOSSwift'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef remove_whitespaces(text):\r\n      text =re.sub(r'\\s+', '', text) \r\n      return text "
          }
        }
      ],
      "usage": {
        "total_tokens": 165,
        "prompt_tokens": 145,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752257174.5974534
  },
  {
    "mbpp_id": 452,
    "problem": {
      "task_id": 452,
      "text": "Write a function that gives loss amount if the given amount has loss else return none.",
      "code": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None",
      "test_list": [
        "assert loss_amount(1500,1200)==None",
        "assert loss_amount(100,200)==100",
        "assert loss_amount(2000,5000)==3000"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function that gives loss amount if the given amount has loss else return none.\n\nTask ID: 452\n\nExpected behavior (test cases):\n1. loss_amount(1500,1200)==None\n2. loss_amount(100,200)==100\n3. loss_amount(2000,5000)==3000\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def loss_amount(amount, base): \r\n    loss = abs(base - amount) \r\n    if (loss > 0): \r\n        print(loss)\r\n    else: \r\n        return None"
          }
        }
      ],
      "usage": {
        "total_tokens": 176,
        "prompt_tokens": 146,
        "completion_tokens": 37
      }
    },
    "timestamp": 1752257177.5764778
  },
  {
    "mbpp_id": 453,
    "problem": {
      "task_id": 453,
      "text": "Write a python function to find the sum of even factors of a number.",
      "code": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ",
      "test_list": [
        "assert sumofFactors(18) == 26",
        "assert sumofFactors(30) == 48",
        "assert sumofFactors(6) == 8"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of even factors of a number.\n\nTask ID: 453\n\nExpected behavior (test cases):\n1. sumofFactors(18) should return 26\n2. sumofFactors(30) should return 48\n3. sumofFactors(6) should return 8\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sumOfFactors(n): \r\n\tsum = 1\r\n\tfor i in range(2, n + 1): \r\n\t\tif (n % i == 0 and n != i): \r\n\t\t\tsum += n // i * i\r\n\treturn sum"
          }
        }
      ],
      "usage": {
        "total_tokens": 177,
        "prompt_tokens": 133,
        "completion_tokens": 51
      }
    },
    "timestamp": 1752257181.4687037
  },
  {
    "mbpp_id": 454,
    "problem": {
      "task_id": 454,
      "text": "Write a function that matches a word containing 'z'.",
      "code": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
      "test_list": [
        "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
        "assert text_match_wordz(\"xyz.\")==('Found a match!')",
        "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function that matches a word containing 'z'.\n\nTask ID: 454\n\nExpected behavior (test cases):\n1. text_match_wordz(\"pythonz.\")==('Found a match!')\n2. text_match_wordz(\"xyz.\")==('Found a match!')\n3. text_match_wordz(\"  lang  .\")==('Not matched!')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef test(text):\r\n    if re.search(r'\\b[ze]xt\\b',text,re.IGNORECASE) is not None:\r\n        return ('Found a match')\r\n    else:\r\n        return ('Not matched')"
          }
        }
      ],
      "usage": {
        "total_tokens": 172,
        "prompt_tokens": 134,
        "completion_tokens": 45
      }
    },
    "timestamp": 1752257184.983286
  },
  {
    "mbpp_id": 455,
    "problem": {
      "task_id": 455,
      "text": "Write a function to check whether the given month number contains 31 days or not.",
      "code": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False",
      "test_list": [
        "assert check_monthnumb_number(5)==True",
        "assert check_monthnumb_number(2)==False",
        "assert check_monthnumb_number(6)==False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given month number contains 31 days or not.\n\nTask ID: 455\n\nExpected behavior (test cases):\n1. check_monthnumb_number(5)==True\n2. check_monthnumb_number(2)==False\n3. check_monthnumb_number(6)==False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_monthnumb(month):\r\n    if ((month==1)or(month==3)or(month==5)or(month==7)or(month==8)or(month==10)):\r\n        return True\r\n    else:\r\n        return False "
          }
        }
      ],
      "usage": {
        "total_tokens": 173,
        "prompt_tokens": 129,
        "completion_tokens": 51
      }
    },
    "timestamp": 1752257188.8618348
  },
  {
    "mbpp_id": 456,
    "problem": {
      "task_id": 456,
      "text": "Write a function to reverse strings in a given list of string values.",
      "code": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result",
      "test_list": [
        "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
        "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
        "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to reverse strings in a given list of string values.\n\nTask ID: 456\n\nExpected behavior (test cases):\n1. reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n2. reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n3. reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def reverse_string_list(list): \r\n    return [i[::-1] for i in list] "
          }
        }
      ],
      "usage": {
        "total_tokens": 204,
        "prompt_tokens": 191,
        "completion_tokens": 20
      }
    },
    "timestamp": 1752257190.7714036
  },
  {
    "mbpp_id": 457,
    "problem": {
      "task_id": 457,
      "text": "Write a python function to find the sublist having minimum length.",
      "code": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList",
      "test_list": [
        "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
        "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
        "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sublist having minimum length.\n\nTask ID: 457\n\nExpected behavior (test cases):\n1. Find_Min([[1],[1,2],[1,2,3]]) should return [1]\n2. Find_Min([[1,1],[1,1,1],[1,2,7,8]]) should return [1,1]\n3. Find_Min([['x'],['x','y'],['x','y','z']]) should return ['x']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def Find_Min(test_list):\r\n    min = len(test_list[0])\r\n    res = []\r\n    for i in test_list:\r\n        if(min > len(i)):\r\n            min = len(i)\r\n            res.clear()\r\n            res.append(i)\r\n        elif(len(i) == min):\r\n            res.append(i)\r\n            \r\n    return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 222,
        "prompt_tokens": 163,
        "completion_tokens": 66
      }
    },
    "timestamp": 1752257195.5453184
  },
  {
    "mbpp_id": 458,
    "problem": {
      "task_id": 458,
      "text": "Write a function to find the area of a rectangle.",
      "code": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area",
      "test_list": [
        "assert rectangle_area(10,20)==200",
        "assert rectangle_area(10,5)==50",
        "assert rectangle_area(4,2)==8"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the area of a rectangle.\n\nTask ID: 458\n\nExpected behavior (test cases):\n1. rectangle_area(10,20)==200\n2. rectangle_area(10,5)==50\n3. rectangle_area(4,2)==8\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def rectangle_area(l,b): \r\n\treturn l*b"
          }
        }
      ],
      "usage": {
        "total_tokens": 128,
        "prompt_tokens": 125,
        "completion_tokens": 10
      }
    },
    "timestamp": 1752257196.781924
  },
  {
    "mbpp_id": 459,
    "problem": {
      "task_id": 459,
      "text": "Write a function to remove uppercase substrings from a given string by using regex.",
      "code": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)",
      "test_list": [
        "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
        "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
        "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove uppercase substrings from a given string by using regex.\n\nTask ID: 459\n\nExpected behavior (test cases):\n1. remove_uppercase('cAstyoUrFavoRitETVshoWs') should return 'cstyoravoitshos'\n2. remove_uppercase('wAtchTheinTernEtrAdIo') should return 'wtchheinerntrdo'\n3. remove_uppercase('VoicESeaRchAndreComMendaTionS') should return 'oiceachndreomendaion'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef remove_uppercase(text):\r\n    result = re.sub('[A-Z]', '', text)\r\n    return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 199,
        "prompt_tokens": 182,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752257198.9556746
  },
  {
    "mbpp_id": 460,
    "problem": {
      "task_id": 460,
      "text": "Write a python function to get the first element of each sublist.",
      "code": "def Extract(lst): \r\n    return [item[0] for item in lst] ",
      "test_list": [
        "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
        "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
        "assert Extract([[9,8,1],[1,2]]) == [9,1]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to get the first element of each sublist.\n\nTask ID: 460\n\nExpected behavior (test cases):\n1. Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) should return [1, 3, 6]\n2. Extract([[1,2,3],[4, 5]]) should return [1,4]\n3. Extract([[9,8,1],[1,2]]) should return [9,1]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def extract(lst):\r\n    output = []\r\n    for sublist in lst:\r\n        if len(sublist) != 0:\r\n            output.append(sublist[0])\r\n    return(output) "
          }
        }
      ],
      "usage": {
        "total_tokens": 202,
        "prompt_tokens": 172,
        "completion_tokens": 37
      }
    },
    "timestamp": 1752257201.9344885
  },
  {
    "mbpp_id": 461,
    "problem": {
      "task_id": 461,
      "text": "Write a python function to count the upper case characters in a given string.",
      "code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr",
      "test_list": [
        "assert upper_ctr('PYthon') == 1",
        "assert upper_ctr('BigData') == 1",
        "assert upper_ctr('program') == 0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the upper case characters in a given string.\n\nTask ID: 461\n\nExpected behavior (test cases):\n1. upper_ctr('PYthon') should return 1\n2. upper_ctr('BigData') should return 1\n3. upper_ctr('program') should return 0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def upper_ctr(str): \r\n    count = sum([1 for i in str if i.isupper()]) \r\n    return (count) "
          }
        }
      ],
      "usage": {
        "total_tokens": 150,
        "prompt_tokens": 128,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752257204.3694136
  },
  {
    "mbpp_id": 462,
    "problem": {
      "task_id": 462,
      "text": "Write a function to find all possible combinations of the elements of a given list.",
      "code": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result",
      "test_list": [
        "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
        "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
        "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find all possible combinations of the elements of a given list.\n\nTask ID: 462\n\nExpected behavior (test cases):\n1. combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n2. combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n3. combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def combinations_list(list): \r\n\tresult = [[]] \r\n\tfor elem in list : \r\n\t\tfor subset in result[:] : \r\n\t\t\tresult += [subset + [elem]] \r\n\treturn result"
          }
        }
      ],
      "usage": {
        "total_tokens": 953,
        "prompt_tokens": 923,
        "completion_tokens": 37
      }
    },
    "timestamp": 1752257207.3600936
  },
  {
    "mbpp_id": 463,
    "problem": {
      "task_id": 463,
      "text": "Write a function to find the maximum product subarray of the given array.",
      "code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
      "test_list": [
        "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
        "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
        "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum product subarray of the given array.\n\nTask ID: 463\n\nExpected behavior (test cases):\n1. max_subarray_product([1, -2, -3, 0, 7, -8, -2]) should return 112\n2. max_subarray_product([6, -3, -10, 0, 2]) should return 180 \n3. max_subarray_product([-2, -40, 0, -2, -3]) should return 80\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_subarray_product(nums):\r\n    max_so_far = nums[0]\r\n    curr_max = nums[0] \r\n    for num in nums[1:]:\r\n        if curr_max == 0:\r\n            curr_max = num\r\n        else:\r\n            curr_max *= num\r\n        \r\n        if curr_max > max_so_far:\r\n            max_so_far = curr_max\r\n\r\n    curr_min = nums[0]\r\n    min_so_far = nums[0]\r\n    for num in nums[1:]:\r\n        if curr_min == 0:\r\n            curr_min = num\r\n        else:\r\n            curr_min *= num\r\n            \r\n        if curr_min < min_so_far:\r\n            min_so_far = curr_min\r\n    \r\n    return max_so_far * min_so_far"
          }
        }
      ],
      "usage": {
        "total_tokens": 323,
        "prompt_tokens": 181,
        "completion_tokens": 149
      }
    },
    "timestamp": 1752257217.0642812
  },
  {
    "mbpp_id": 464,
    "problem": {
      "task_id": 464,
      "text": "Write a function to check if all values are same in a dictionary.",
      "code": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result",
      "test_list": [
        "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
        "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
        "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if all values are same in a dictionary.\n\nTask ID: 464\n\nExpected behavior (test cases):\n1. check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n2. check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n3. check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_value(dic , key):\r\n    for i in dic.values():\r\n        if(i != key):\r\n            return False\r\n    return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 252,
        "prompt_tokens": 232,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752257219.3002653
  },
  {
    "mbpp_id": 465,
    "problem": {
      "task_id": 465,
      "text": "Write a function to drop empty items from a given dictionary.",
      "code": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1",
      "test_list": [
        "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
        "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
        "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to drop empty items from a given dictionary.\n\nTask ID: 465\n\nExpected behavior (test cases):\n1. drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n2. drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n3. drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def drop_empty(dictionary):\r\n    for key in list(dictionary.keys()):\r\n        if dictionary[key] == None:\r\n            del dictionary[key]\r\n    return dictionary"
          }
        }
      ],
      "usage": {
        "total_tokens": 213,
        "prompt_tokens": 190,
        "completion_tokens": 30
      }
    },
    "timestamp": 1752257221.7162309
  },
  {
    "mbpp_id": 466,
    "problem": {
      "task_id": 466,
      "text": "Write a function to find the peak element in the given array.",
      "code": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ",
      "test_list": [
        "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
        "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
        "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the peak element in the given array.\n\nTask ID: 466\n\nExpected behavior (test cases):\n1. find_peak([1, 3, 20, 4, 1, 0], 6) should return 2\n2. find_peak([2, 3, 4, 5, 6], 5) should return 4\n3. find_peak([8, 9, 11, 12, 14, 15], 6) should return 5 \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_peak(arr,n): \r\n    max = arr[0]  \r\n    for i in range(1,n-1):\r\n        if (arr[i]>max): \r\n            max = arr[i]  \r\n    return(max) "
          }
        }
      ],
      "usage": {
        "total_tokens": 220,
        "prompt_tokens": 180,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752257225.2307405
  },
  {
    "mbpp_id": 467,
    "problem": {
      "task_id": 467,
      "text": "Write a python function to convert decimal number to octal number.",
      "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
      "test_list": [
        "assert decimal_to_Octal(10) == 12",
        "assert decimal_to_Octal(2) == 2",
        "assert decimal_to_Octal(33) == 41"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to convert decimal number to octal number.\n\nTask ID: 467\n\nExpected behavior (test cases):\n1. decimal_to_Octal(10) should return 12\n2. decimal_to_Octal(2) should return 2\n3. decimal_to_Octal(33) should return 41\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def decimal_to_octal(n):\r\n   temp = n\r\n   oct_num = ''\r\n   while temp > 0:\r\n       oct_num = str((temp % 8)) + oct_num\r\n       temp //= 8\r\n   if (n < 0):\r\n       oct_num = '-' + oct_num\r\n   return int(oct_num)\r\n"
          }
        }
      ],
      "usage": {
        "total_tokens": 196,
        "prompt_tokens": 134,
        "completion_tokens": 69
      }
    },
    "timestamp": 1752257230.076308
  },
  {
    "mbpp_id": 468,
    "problem": {
      "task_id": 468,
      "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
      "code": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
      "test_list": [
        "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
        "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
        "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\nTask ID: 468\n\nExpected behavior (test cases):\n1. max_product([3, 100, 4, 5, 150, 6], 6) should return 45000 \n2. max_product([4, 42, 55, 68, 80], 5) should return 50265600\n3. max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) should return 21780000 \n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def max_product(nums, n): \r\n    # Initialize the DP table with negative infinity\r\n    dp = [-float('inf') for i in range(n + 1)] \r\n  \r\n    # Iterate through all elements of nums[] and update the dp[]\r\n    for i in range(1, len(dp)): \r\n        for j in range(i): \r\n            dp[i] = max((dp[j] * nums[i]) if (nums[i] > nums[j]) else min(dp[j] * nums[i]), dp[i])\r\n  \r\n    # Return last element of the array which contains the result\r\n    return (max(dp))"
          }
        }
      ],
      "usage": {
        "total_tokens": 341,
        "prompt_tokens": 222,
        "completion_tokens": 126
      }
    },
    "timestamp": 1752257238.2877972
  },
  {
    "mbpp_id": 469,
    "problem": {
      "task_id": 469,
      "text": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
      "code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
      "test_list": [
        "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
        "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
        "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum profit earned from a maximum of k stock transactions\n\nTask ID: 469\n\nExpected behavior (test cases):\n1. max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) should return 10\n2. max_profit([2, 4, 7, 5, 4, 3, 5], 2) should return 7\n3. max_profit([10, 6, 8, 4, 2], 2) should return 2\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def maxProfit(prices,k):\r\n    dp = [[[-1 for _ in range(len(prices))] for __ in range(k+1)]for ** in range(2)]\r\n    def rec(i,cash,amount):\r\n        if i == len(prices):\r\n            if amount != 0:\r\n                return -float('inf')\r\n            else:\r\n                return 0\r\n        res = 0 \r\n        # Buy stocks now\r\n        if (dp[i][cash][amount] != -1):\r\n            return dp[i][cash][amount]\r\n        if cash == 0:\r\n            res = max(-prices[i]+rec(i+1,1,amount),rec(i+1,cash,amount))\r\n        else:\r\n            if(amount == 0 and cash > 0):\r\n                res = max(rec(i+1,1,amount)+prices[i],rec(i+1,cash-1,amount)+prices[i])\r\n            elif(cash == 0):\r\n                res = max(rec(i+1,1,amount),rec(i+1,cash-1,amount)+prices[i])\r\n            else:\r\n                res = max(rec(i+1,1,amount)+prices[i]-prices[i]*c,rec(i+1,cash-1,amount)-prices[i]*c)\r\n        dp[i][cash][amount] = res\r\n        return res\r\n    ans = rec(0,0,k)\r\n    return ans if ans >= 0 else 0"
          }
        }
      ],
      "usage": {
        "total_tokens": 482,
        "prompt_tokens": 190,
        "completion_tokens": 299
      }
    },
    "timestamp": 1752257257.0875258
  },
  {
    "mbpp_id": 470,
    "problem": {
      "task_id": 470,
      "text": "Write a function to find the pairwise addition of the elements of the given tuples.",
      "code": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
      "test_list": [
        "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
        "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
        "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the pairwise addition of the elements of the given tuples.\n\nTask ID: 470\n\nExpected behavior (test cases):\n1. add_pairwise((1, 5, 7, 8, 10)) should return (6, 12, 15, 18)\n2. add_pairwise((2, 6, 8, 9, 11)) should return (8, 14, 17, 20)\n3. add_pairwise((3, 7, 9, 10, 12)) should return (10, 16, 19, 22)\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def add_pairwise(lst):\r\n    res = []\r\n    for i in range(len(lst)):\r\n        x = lst[i]\r\n        y = lst[(i+1)%len(lst)]\r\n        res.append(x + y)\r\n    return tuple(res) "
          }
        }
      ],
      "usage": {
        "total_tokens": 249,
        "prompt_tokens": 207,
        "completion_tokens": 49
      }
    },
    "timestamp": 1752257260.6720314
  },
  {
    "mbpp_id": 471,
    "problem": {
      "task_id": 471,
      "text": "Write a python function to find remainder of array multiplication divided by n.",
      "code": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ",
      "test_list": [
        "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
        "assert find_remainder([1,1,1],3,1) == 0",
        "assert find_remainder([1,2,1],3,2) == 0"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find remainder of array multiplication divided by n.\n\nTask ID: 471\n\nExpected behavior (test cases):\n1. find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n2. find_remainder([1,1,1],3,1) should return 0\n3. find_remainder([1,2,1],3,2) should return 0\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find_remainder(arr,n,m):\r\n    result = 1\r\n    for x in arr:\r\n        result = (result * x)%n \r\n    return (result%m) "
          }
        }
      ],
      "usage": {
        "total_tokens": 199,
        "prompt_tokens": 169,
        "completion_tokens": 37
      }
    },
    "timestamp": 1752257263.5366023
  },
  {
    "mbpp_id": 472,
    "problem": {
      "task_id": 472,
      "text": "Write a python function to check whether the given list contains consecutive numbers or not.",
      "code": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ",
      "test_list": [
        "assert check_Consecutive([1,2,3,4,5]) == True",
        "assert check_Consecutive([1,2,3,5,6]) == False",
        "assert check_Consecutive([1,2,1]) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given list contains consecutive numbers or not.\n\nTask ID: 472\n\nExpected behavior (test cases):\n1. check_Consecutive([1,2,3,4,5]) should return True\n2. check_Consecutive([1,2,3,5,6]) should return False\n3. check_Consecutive([1,2,1]) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def check_Consecutive(list):\r\n   n = len(list)\r\n   for i in range(n-1):\r\n      if list[i+1]-list[i] != 1:\r\n         return False\r\n   return True"
          }
        }
      ],
      "usage": {
        "total_tokens": 182,
        "prompt_tokens": 147,
        "completion_tokens": 42
      }
    },
    "timestamp": 1752257266.6790626
  },
  {
    "mbpp_id": 473,
    "problem": {
      "task_id": 473,
      "text": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
      "code": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)",
      "test_list": [
        "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
        "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
        "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\nTask ID: 473\n\nExpected behavior (test cases):\n1. tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) should return {(4, 5), (3, 4), (5, 6)}\n2. tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) should return {(4, 7), (1, 4)}\n3. tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) should return {(1, 3), (2, 3)}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def tuple_intersection(test_list): \r\n  l = set(tuple(i) for i in test_list[0]) \r\n  for j in range(1,len(test_list)): \r\n    l.intersection_update(set(tuple(i) for i in test_list[j])) \r\n  final_result = [tuple(x) for x in l] \r\n  return (final_result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 378,
        "prompt_tokens": 314,
        "completion_tokens": 71
      }
    },
    "timestamp": 1752257271.6415634
  },
  {
    "mbpp_id": 474,
    "problem": {
      "task_id": 474,
      "text": "Write a function to replace characters in a string.",
      "code": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2",
      "test_list": [
        "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
        "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
        "assert replace_char(\"python\",'l','a')==(\"python\")"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to replace characters in a string.\n\nTask ID: 474\n\nExpected behavior (test cases):\n1. replace_char(\"polygon\",'y','l')==(\"pollgon\")\n2. replace_char(\"character\",'c','a')==(\"aharaater\")\n3. replace_char(\"python\",'l','a')==(\"python\")\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def replace_char(str,n,m):\r\n    str=str.replace(m,n)\r\n    return (str) "
          }
        }
      ],
      "usage": {
        "total_tokens": 143,
        "prompt_tokens": 130,
        "completion_tokens": 20
      }
    },
    "timestamp": 1752257273.4333901
  },
  {
    "mbpp_id": 475,
    "problem": {
      "task_id": 475,
      "text": "Write a function to sort counter by value.",
      "code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
      "test_list": [
        "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
        "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
        "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort counter by value.\n\nTask ID: 475\n\nExpected behavior (test cases):\n1. sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n2. sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n3. sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "from collections import Counter\r\ndef sort_counter(test):\r\n    return sorted(test.items(), key=lambda kv:(kv[1], kv[0])) "
          }
        }
      ],
      "usage": {
        "total_tokens": 264,
        "prompt_tokens": 242,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752257275.7848759
  },
  {
    "mbpp_id": 476,
    "problem": {
      "task_id": 476,
      "text": "Write a python function to find the sum of the largest and smallest value in a given array.",
      "code": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum",
      "test_list": [
        "assert big_sum([1,2,3]) == 4",
        "assert big_sum([-1,2,3,4]) == 3",
        "assert big_sum([2,3,6]) == 8"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of the largest and smallest value in a given array.\n\nTask ID: 476\n\nExpected behavior (test cases):\n1. big_sum([1,2,3]) should return 4\n2. big_sum([-1,2,3,4]) should return 3\n3. big_sum([2,3,6]) should return 8\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def big_sum(arr):\r\n    # sort the list\r\n    arr.sort()\r\n    # find max number in the list\r\n    maximum = max(arr)\r\n    # find min number in the list\r\n    minimum = min(arr)\r\n    # add up both numbers and return result\r\n    return (maximum + minimum) "
          }
        }
      ],
      "usage": {
        "total_tokens": 200,
        "prompt_tokens": 144,
        "completion_tokens": 63
      }
    },
    "timestamp": 1752257280.185816
  },
  {
    "mbpp_id": 477,
    "problem": {
      "task_id": 477,
      "text": "Write a python function to convert the given string to lower case.",
      "code": "def is_lower(string):\r\n  return (string.lower())",
      "test_list": [
        "assert is_lower(\"InValid\") == \"invalid\"",
        "assert is_lower(\"TruE\") == \"true\"",
        "assert is_lower(\"SenTenCE\") == \"sentence\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to convert the given string to lower case.\n\nTask ID: 477\n\nExpected behavior (test cases):\n1. is_lower(\"InValid\") should return \"invalid\"\n2. is_lower(\"TruE\") should return \"true\"\n3. is_lower(\"SenTenCE\") should return \"sentence\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def is_lower(str): \r\n    new = \"\" \r\n    for i in str : \r\n        if(i.islower()):\r\n            new += i\r\n    return new"
          }
        }
      ],
      "usage": {
        "total_tokens": 155,
        "prompt_tokens": 129,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752257282.8154364
  },
  {
    "mbpp_id": 478,
    "problem": {
      "task_id": 478,
      "text": "Write a function to remove lowercase substrings from a given string.",
      "code": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result",
      "test_list": [
        "assert remove_lowercase(\"PYTHon\")==('PYTH')",
        "assert remove_lowercase(\"FInD\")==('FID')",
        "assert remove_lowercase(\"STRinG\")==('STRG')"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove lowercase substrings from a given string.\n\nTask ID: 478\n\nExpected behavior (test cases):\n1. remove_lowercase(\"PYTHon\")==('PYTH')\n2. remove_lowercase(\"FInD\")==('FID')\n3. remove_lowercase(\"STRinG\")==('STRG')\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_lowercase(str):\r\n  new_str = ''.join([char for char in str if not char.islower()])\r\n  return(new_str)"
          }
        }
      ],
      "usage": {
        "total_tokens": 149,
        "prompt_tokens": 127,
        "completion_tokens": 29
      }
    },
    "timestamp": 1752257285.1410263
  },
  {
    "mbpp_id": 479,
    "problem": {
      "task_id": 479,
      "text": "Write a python function to find the first digit of a given number.",
      "code": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ",
      "test_list": [
        "assert first_Digit(123) == 1",
        "assert first_Digit(456) == 4",
        "assert first_Digit(12) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the first digit of a given number.\n\nTask ID: 479\n\nExpected behavior (test cases):\n1. first_Digit(123) should return 1\n2. first_Digit(456) should return 4\n3. first_Digit(12) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def first_Digit(num):\r\n    num = abs(num)\r\n    while num >= 10:\r\n        num = int(str(num)[1:])\r\n    if num == 0:\r\n        raise ValueError('First Digit cannot be zero')\r\n    else:\r\n        return int(str(num)[0])"
          }
        }
      ],
      "usage": {
        "total_tokens": 184,
        "prompt_tokens": 133,
        "completion_tokens": 58
      }
    },
    "timestamp": 1752257289.2750099
  },
  {
    "mbpp_id": 480,
    "problem": {
      "task_id": 480,
      "text": "Write a python function to find the maximum occurring character in a given string.",
      "code": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
      "test_list": [
        "assert get_max_occuring_char(\"data\") == \"a\"",
        "assert get_max_occuring_char(\"create\") == \"e\"",
        "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the maximum occurring character in a given string.\n\nTask ID: 480\n\nExpected behavior (test cases):\n1. get_max_occuring_char(\"data\") should return \"a\"\n2. get_max_occuring_char(\"create\") should return \"e\"\n3. get_max_occuring_char(\"brilliant girl\") should return \"i\"\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def get_max_occuring_char(str):\r\n    res = ''\r\n    max_count = 0\r\n    for char in str:\r\n        count = str.count(char)\r\n        if count > max_count:\r\n            res = char\r\n            max_count = count\r\n    return res"
          }
        }
      ],
      "usage": {
        "total_tokens": 184,
        "prompt_tokens": 138,
        "completion_tokens": 53
      }
    },
    "timestamp": 1752257293.1008344
  },
  {
    "mbpp_id": 481,
    "problem": {
      "task_id": 481,
      "text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
      "code": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
      "test_list": [
        "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
        "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
        "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n\nTask ID: 481\n\nExpected behavior (test cases):\n1. is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) should return True\n2. is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) should return False\n3. is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) should return True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "from itertools import combinations\r\ndef is_subset_sum(arr , n , sum): \r\n    for i in range(1 << n): \r\n        temp = [x for j,x in enumerate(arr) if (i & (1 << j))] \r\n        #print(temp)\r\n        if sum == sum(temp): \r\n            print(\"True\") \r\n            return \r\n    print(\"False\")\r\n    return 0"
          }
        }
      ],
      "usage": {
        "total_tokens": 277,
        "prompt_tokens": 204,
        "completion_tokens": 80
      }
    },
    "timestamp": 1752257298.6516547
  },
  {
    "mbpp_id": 482,
    "problem": {
      "task_id": 482,
      "text": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
      "code": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ",
      "test_list": [
        "assert match(\"Geeks\") == 'Yes'",
        "assert match(\"geeksforGeeks\") == 'Yes'",
        "assert match(\"geeks\") == 'No'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\nTask ID: 482\n\nExpected behavior (test cases):\n1. match(\"Geeks\") should return 'Yes'\n2. match(\"geeksforGeeks\") should return 'Yes'\n3. match(\"geeks\") should return 'No'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef match(str):\r\n    x = re.findall(r'[A-Z][a-z]+', str)\r\n    if(x == []):\r\n        return \"No\"\r\n    else:\r\n        return \"Yes\""
          }
        }
      ],
      "usage": {
        "total_tokens": 173,
        "prompt_tokens": 138,
        "completion_tokens": 42
      }
    },
    "timestamp": 1752257301.7742288
  },
  {
    "mbpp_id": 483,
    "problem": {
      "task_id": 483,
      "text": "Write a python function to find the first natural number whose factorial is divisible by x.",
      "code": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ",
      "test_list": [
        "assert first_Factorial_Divisible_Number(10) == 5",
        "assert first_Factorial_Divisible_Number(15) == 5",
        "assert first_Factorial_Divisible_Number(5) == 4"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the first natural number whose factorial is divisible by x.\n\nTask ID: 483\n\nExpected behavior (test cases):\n1. first_Factorial_Divisible_Number(10) should return 5\n2. first_Factorial_Divisible_Number(15) should return 5\n3. first_Factorial_Divisible_Number(5) should return 4\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def first_Factorial_Divisible_Number(x): \r\n    i = 1\r\n    while True:\r\n        if i%x == 0 :  \r\n            return(i)\r\n        i += 1 "
          }
        }
      ],
      "usage": {
        "total_tokens": 182,
        "prompt_tokens": 148,
        "completion_tokens": 41
      }
    },
    "timestamp": 1752257304.906956
  },
  {
    "mbpp_id": 484,
    "problem": {
      "task_id": 484,
      "text": "Write a function to remove the matching tuples from the given two tuples.",
      "code": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ",
      "test_list": [
        "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
        "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
        "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove the matching tuples from the given two tuples.\n\nTask ID: 484\n\nExpected behavior (test cases):\n1. remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) should return [('you', '?')]\n2. remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) should return [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n3. remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) should return [('Its', 'been'), ('day', 'without')]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_matching_tuple(test_tup_1, test_tup_2):\r\n  # create list with first tuple\r\n  lst = []\r\n  for i in range(len(test_tup_1)):\r\n    if not(test_tup_1[i] in test_tup_2):\r\n      lst.append(test_tup_1[i])\r\n  # convert back to tuple and return it\r\n  return(tuple(lst))"
          }
        }
      ],
      "usage": {
        "total_tokens": 321,
        "prompt_tokens": 246,
        "completion_tokens": 82
      }
    },
    "timestamp": 1752257310.4505773
  },
  {
    "mbpp_id": 485,
    "problem": {
      "task_id": 485,
      "text": "Write a function to find the largest palindromic number in the given array.",
      "code": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
      "test_list": [
        "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
        "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
        "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the largest palindromic number in the given array.\n\nTask ID: 485\n\nExpected behavior (test cases):\n1. largest_palindrome([1, 232, 54545, 999991], 4) should return 54545\n2. largest_palindrome([1, 2, 3, 4, 5, 50], 6) should return 5\n3. largest_palindrome([1, 3, 7, 9, 45], 5)  should return 9\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def largest_palindrome(arr, n): \r\n    for i in range(n-1): \r\n        if arr[i] == arr[n-i-1]: \r\n            return arr[i] \r\n    else: \r\n        return -1"
          }
        }
      ],
      "usage": {
        "total_tokens": 233,
        "prompt_tokens": 194,
        "completion_tokens": 46
      }
    },
    "timestamp": 1752257313.7829378
  },
  {
    "mbpp_id": 486,
    "problem": {
      "task_id": 486,
      "text": "Write a function to compute binomial probability for the given number.",
      "code": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
      "test_list": [
        "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
        "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
        "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to compute binomial probability for the given number.\n\nTask ID: 486\n\nExpected behavior (test cases):\n1. binomial_probability(10, 5, 1.0/3) should return 0.13656454808718185\n2. binomial_probability(11, 6, 2.0/4) should return 0.2255859375\n3. binomial_probability(12, 7, 3.0/5) should return 0.227030335488\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "from math import factorial \r\ndef binomial_probability(n,k,p):\r\n    q = 1 - p\r\n    result = factorial(n) * (p**k) * ((q)**(n-k))\r\n    if n == k:\r\n        result *= (factorial(k)/factorial(0)) # This will handle case of exact matches.\r\n    elif n > k:\r\n        result /= factorial(n-k)\r\n    else:\r\n        result /= factorial(n+k)\r\n    return round(result, 5)"
          }
        }
      ],
      "usage": {
        "total_tokens": 295,
        "prompt_tokens": 202,
        "completion_tokens": 100
      }
    },
    "timestamp": 1752257320.4769094
  },
  {
    "mbpp_id": 487,
    "problem": {
      "task_id": 487,
      "text": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
      "code": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup",
      "test_list": [
        "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
        "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
        "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n\nTask ID: 487\n\nExpected behavior (test cases):\n1. sort_tuple([(1, 3), (3, 2), (2, 1)] ) should return [(2, 1), (3, 2), (1, 3)]\n2. sort_tuple([(2, 4), (3, 3), (1, 1)] ) should return [(1, 1), (3, 3), (2, 4)]\n3. sort_tuple([(3, 9), (6, 7), (4, 3)] ) should return [(4, 3), (6, 7), (3, 9)]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sort_tuple(test_list): \r\n    test_list.sort(key = lambda x :x[1]) \r\n    return test_list "
          }
        }
      ],
      "usage": {
        "total_tokens": 244,
        "prompt_tokens": 225,
        "completion_tokens": 26
      }
    },
    "timestamp": 1752257322.6890152
  },
  {
    "mbpp_id": 488,
    "problem": {
      "task_id": 488,
      "text": "Write a function to find the area of a pentagon.",
      "code": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area",
      "test_list": [
        "assert area_pentagon(5)==43.01193501472417",
        "assert area_pentagon(10)==172.0477400588967",
        "assert area_pentagon(15)==387.10741513251753"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the area of a pentagon.\n\nTask ID: 488\n\nExpected behavior (test cases):\n1. area_pentagon(5)==43.01193501472417\n2. area_pentagon(10)==172.0477400588967\n3. area_pentagon(15)==387.10741513251753\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def area_pentagon(n):\r\n  return ((5*(n**2)) / (2 * math.tan(math.pi/n)))"
          }
        }
      ],
      "usage": {
        "total_tokens": 191,
        "prompt_tokens": 171,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752257324.9314137
  },
  {
    "mbpp_id": 489,
    "problem": {
      "task_id": 489,
      "text": "Write a python function to find the frequency of the largest value in a given array.",
      "code": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
      "test_list": [
        "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
        "assert frequency_Of_Largest(3,[5,6,5]) == 1",
        "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the frequency of the largest value in a given array.\n\nTask ID: 489\n\nExpected behavior (test cases):\n1. frequency_Of_Largest(5,[1,2,3,4,4]) should return 2\n2. frequency_Of_Largest(3,[5,6,5]) should return 1\n3. frequency_Of_Largest(4,[2,7,7,7]) should return 3\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def frequency_Of_Largest(n,arr): \r\n    max = arr[0]  \r\n    count = 1\r\n      \r\n    for i in range(1,n):  \r\n        if (arr[i] == max): \r\n            count += 1\r\n        else: \r\n            break\r\n    return(count)"
          }
        }
      ],
      "usage": {
        "total_tokens": 212,
        "prompt_tokens": 158,
        "completion_tokens": 61
      }
    },
    "timestamp": 1752257329.258558
  },
  {
    "mbpp_id": 490,
    "problem": {
      "task_id": 490,
      "text": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
      "code": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ",
      "test_list": [
        "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
        "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
        "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract all the pairs which are symmetric in the given tuple list.\n\nTask ID: 490\n\nExpected behavior (test cases):\n1. extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) should return {(8, 9), (6, 7)}\n2. extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) should return {(9, 10), (7, 8)}\n3. extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) should return {(8, 9), (10, 11)}\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def extract_symmetric(tuples):\r\n    result = set()\r\n    for i in tuples:\r\n        if i[0] == i[1]:\r\n            result.add(i)\r\n    return result"
          }
        }
      ],
      "usage": {
        "total_tokens": 303,
        "prompt_tokens": 273,
        "completion_tokens": 37
      }
    },
    "timestamp": 1752257332.1356514
  },
  {
    "mbpp_id": 491,
    "problem": {
      "task_id": 491,
      "text": "Write a function to find the sum of geometric progression series.",
      "code": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total",
      "test_list": [
        "assert sum_gp(1,5,2)==31",
        "assert sum_gp(1,5,4)==341",
        "assert sum_gp(2,6,3)==728"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the sum of geometric progression series.\n\nTask ID: 491\n\nExpected behavior (test cases):\n1. sum_gp(1,5,2)==31\n2. sum_gp(1,5,4)==341\n3. sum_gp(2,6,3)==728\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_gp(a,n,r):\r\n    s = ((a * ((r ** n) - 1)) // (r - 1))\r\n    return s "
          }
        }
      ],
      "usage": {
        "total_tokens": 157,
        "prompt_tokens": 131,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752257334.7550707
  },
  {
    "mbpp_id": 492,
    "problem": {
      "task_id": 492,
      "text": "Write a function to search an element in the given array by using binary search.",
      "code": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found",
      "test_list": [
        "assert binary_search([1,2,3,5,8], 6) == False",
        "assert binary_search([7, 8, 9, 10, 13], 10) == True",
        "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to search an element in the given array by using binary search.\n\nTask ID: 492\n\nExpected behavior (test cases):\n1. binary_search([1,2,3,5,8], 6) should return False\n2. binary_search([7, 8, 9, 10, 13], 10) should return True\n3. binary_search([11, 13, 14, 19, 22, 36], 23) should return False\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def binary_search(arr, x):\r\n    n = len(arr)\r\n    first = 0\r\n    last = n - 1\r\n    found = False\r\n\r\n    while first <= last and not found:\r\n        mid = int((first + last)/2)\r\n        if arr[mid] == x:\r\n            found = True\r\n        else:\r\n            if x < arr[mid]:\r\n                last = mid - 1\r\n            else:\r\n                first = mid + 1\r\n    return found"
          }
        }
      ],
      "usage": {
        "total_tokens": 268,
        "prompt_tokens": 178,
        "completion_tokens": 97
      }
    },
    "timestamp": 1752257341.2580218
  },
  {
    "mbpp_id": 493,
    "problem": {
      "task_id": 493,
      "text": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
      "code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons",
      "test_list": [
        "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
        "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
        "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\nTask ID: 493\n\nExpected behavior (test cases):\n1. calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n2. calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\n3. calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def calculate_hexagons(x_min, y_min, Nx, Ny, r):\r\n    # Function definition starts here\r\n    points = [[0 for i in range(6)]\r\n              for j in range(Ny * Nx)]\r\n    step = 2 * np.pi / Nx\r\n    theta = np.arange(y_min, y_min + Ny, step)\r\n    phi = np.arange(theta.min() - step/2, theta.max(), step)\r\n\r\n    for n_theta in range(len(phi)):\r\n        phi_n_theta = phi[n_theta]\r\n        for m_phi in range(len(theta)):\r\n            if (m_phi % 2 == 0):\r\n                x = np.cos(np.radians(m_phi)) * np.sin(np.radians(n_theta))\r\n                y = np.cos(np.radians(m_phi)) * np.cos(np.radians(n_theta)) + r\r\n                z = np.sin(np.radians(m_phi)) * np.sin(np.radians(n_theta))\r\n                points[m_phi][n_theta] = (x,y,z)\r\n            else:\r\n                x = -np.cos(np.radians(m_phi)) * np.sin(np.radians(n_theta))\r\n                y = -np.cos(np.radians(m_phi)) * np.cos(np.radians(n_theta)) + r\r\n                z = -np.sin(np.radians(m_phi)) * np.sin(np.radians(n_theta))\r\n\r\n                points[m_phi][n_theta] = (x, y, z)\r\n    return(points) "
          }
        }
      ],
      "usage": {
        "total_tokens": 4049,
        "prompt_tokens": 3772,
        "completion_tokens": 284
      }
    },
    "timestamp": 1752257359.6537516
  },
  {
    "mbpp_id": 494,
    "problem": {
      "task_id": 494,
      "text": "Write a function to convert the given binary tuple to integer.",
      "code": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ",
      "test_list": [
        "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
        "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
        "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert the given binary tuple to integer.\n\nTask ID: 494\n\nExpected behavior (test cases):\n1. binary_to_integer((1, 1, 0, 1, 0, 0, 1)) should return '105'\n2. binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) should return '101'\n3. binary_to_integer((1, 1, 0, 1, 0, 1)) should return '53'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def binary_to_integer(binary_tuple):\r\n    binary = ''.join(str(b) for b in binary_tuple)\r\n    num = int(binary, 2)\r\n    return str(num)"
          }
        }
      ],
      "usage": {
        "total_tokens": 213,
        "prompt_tokens": 185,
        "completion_tokens": 35
      }
    },
    "timestamp": 1752257362.3767173
  },
  {
    "mbpp_id": 495,
    "problem": {
      "task_id": 495,
      "text": "Write a function to remove lowercase substrings from a given string by using regex.",
      "code": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)",
      "test_list": [
        "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
        "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
        "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove lowercase substrings from a given string by using regex.\n\nTask ID: 495\n\nExpected behavior (test cases):\n1. remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') should return 'KDALOOOHLAJSI'\n2. remove_lowercase('ProducTnamEstreAmIngMediAplAYer') should return 'PTEAIMAAY'\n3. remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') should return 'NTYSZTNOGI'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import re\r\ndef remove_lowercase(string):\r\n    pattern = '[a-z]'\r\n    replaced_string = re.sub(pattern,'',string)\r\n    return replaced_string "
          }
        }
      ],
      "usage": {
        "total_tokens": 212,
        "prompt_tokens": 187,
        "completion_tokens": 32
      }
    },
    "timestamp": 1752257364.892849
  },
  {
    "mbpp_id": 496,
    "problem": {
      "task_id": 496,
      "text": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
      "code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums",
      "test_list": [
        "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
        "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
        "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\nTask ID: 496\n\nExpected behavior (test cases):\n1. heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n2. heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\n3. heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import heapq\r\ndef heap_queue_smallest(lst,num):\r\n    res=heapq.nsmallest(num,lst)\r\n    return(res)"
          }
        }
      ],
      "usage": {
        "total_tokens": 290,
        "prompt_tokens": 270,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752257367.1249545
  },
  {
    "mbpp_id": 497,
    "problem": {
      "task_id": 497,
      "text": "Write a function to find the surface area of a cone.",
      "code": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA",
      "test_list": [
        "assert surfacearea_cone(5,12)==282.7433388230814",
        "assert surfacearea_cone(10,15)==880.5179353159282",
        "assert surfacearea_cone(19,17)==2655.923961165254"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the surface area of a cone.\n\nTask ID: 497\n\nExpected behavior (test cases):\n1. surfacearea_cone(5,12)==282.7433388230814\n2. surfacearea_cone(10,15)==880.5179353159282\n3. surfacearea_cone(19,17)==2655.923961165254\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef surface_area_cone(radius,height):\r\n    # calculate the slant height of the cone\r\n    l = math.sqrt(radius ** 2 + height ** 2)\r\n    # calculate and return the surface area of the cone\r\n    return ((math.pi) * radius * (radius + l)) / 2"
          }
        }
      ],
      "usage": {
        "total_tokens": 238,
        "prompt_tokens": 179,
        "completion_tokens": 66
      }
    },
    "timestamp": 1752257371.6946485
  },
  {
    "mbpp_id": 498,
    "problem": {
      "task_id": 498,
      "text": "Write a python function to find gcd of two positive integers.",
      "code": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd",
      "test_list": [
        "assert gcd(12, 17) == 1",
        "assert gcd(4,6) == 2",
        "assert gcd(2,9) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find gcd of two positive integers.\n\nTask ID: 498\n\nExpected behavior (test cases):\n1. gcd(12, 17) should return 1\n2. gcd(4,6) should return 2\n3. gcd(2,9) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def gcd(a,b):\r\n    if b == 0:\r\n        return a\r\n    else:\r\n        return gcd(b,a%b)"
          }
        }
      ],
      "usage": {
        "total_tokens": 149,
        "prompt_tokens": 129,
        "completion_tokens": 27
      }
    },
    "timestamp": 1752257373.921084
  },
  {
    "mbpp_id": 499,
    "problem": {
      "task_id": 499,
      "text": "Write a function to find the diameter of a circle.",
      "code": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter",
      "test_list": [
        "assert diameter_circle(10)==20",
        "assert diameter_circle(40)==80",
        "assert diameter_circle(15)==30"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the diameter of a circle.\n\nTask ID: 499\n\nExpected behavior (test cases):\n1. diameter_circle(10)==20\n2. diameter_circle(40)==80\n3. diameter_circle(15)==30\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef diameter_circle(radius):\r\n    return radius*2*math.sqrt((radius)**2+(radius)**2)"
          }
        }
      ],
      "usage": {
        "total_tokens": 136,
        "prompt_tokens": 119,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752257376.044825
  },
  {
    "mbpp_id": 500,
    "problem": {
      "task_id": 500,
      "text": "Write a function to concatenate all elements of the given list into a string.",
      "code": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ",
      "test_list": [
        "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
        "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
        "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to concatenate all elements of the given list into a string.\n\nTask ID: 500\n\nExpected behavior (test cases):\n1. concatenate_elements(['hello','there','have','a','rocky','day'] ) should return '  hello there have a rocky day'\n2. concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) should return '  Hi there How are you'\n3. concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) should return '  Part of the journey is end'\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def concatenate_elements(test_list):\r\n    result = \" \".join(str(e) for e in test_list)\r\n    return(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 203,
        "prompt_tokens": 185,
        "completion_tokens": 25
      }
    },
    "timestamp": 1752257378.1565638
  },
  {
    "mbpp_id": 501,
    "problem": {
      "task_id": 501,
      "text": "Write a python function to find common divisor between two numbers in a given pair.",
      "code": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result",
      "test_list": [
        "assert num_comm_div(2,4) == 2",
        "assert num_comm_div(2,8) == 2",
        "assert num_comm_div(12,24) == 6"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find common divisor between two numbers in a given pair.\n\nTask ID: 501\n\nExpected behavior (test cases):\n1. num_comm_div(2,4) should return 2\n2. num_comm_div(2,8) should return 2\n3. num_comm_div(12,24) should return 6\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def num_comm_div(x,y):\r\n    i = min(x, y)\r\n    while(i > 0):\r\n        if x % i == 0 and y % i == 0:\r\n            break\r\n        else:\r\n            i -= 1\r\n    return i"
          }
        }
      ],
      "usage": {
        "total_tokens": 184,
        "prompt_tokens": 138,
        "completion_tokens": 53
      }
    },
    "timestamp": 1752257381.960034
  },
  {
    "mbpp_id": 502,
    "problem": {
      "task_id": 502,
      "text": "Write a python function to find remainder of two numbers.",
      "code": "def find(n,m):\r\n  r = n%m\r\n  return (r)",
      "test_list": [
        "assert find(3,3) == 0",
        "assert find(10,3) == 1",
        "assert find(16,5) == 1"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find remainder of two numbers.\n\nTask ID: 502\n\nExpected behavior (test cases):\n1. find(3,3) should return 0\n2. find(10,3) should return 1\n3. find(16,5) should return 1\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def find(x,y):\r\n    return x%y"
          }
        }
      ],
      "usage": {
        "total_tokens": 130,
        "prompt_tokens": 127,
        "completion_tokens": 10
      }
    },
    "timestamp": 1752257383.147415
  },
  {
    "mbpp_id": 503,
    "problem": {
      "task_id": 503,
      "text": "Write a function to add consecutive numbers of a given list.",
      "code": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
      "test_list": [
        "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
        "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
        "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to add consecutive numbers of a given list.\n\nTask ID: 503\n\nExpected behavior (test cases):\n1. add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n2. add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\n3. add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def add_consecutive_nums(nums):\r\n  output = []\r\n  for i in range(1, len(nums) + 1):\r\n    if i <= len(nums):\r\n      nums[i] += nums[i-1]\r\n      output.append(nums[i])\r\n  return output"
          }
        }
      ],
      "usage": {
        "total_tokens": 298,
        "prompt_tokens": 253,
        "completion_tokens": 52
      }
    },
    "timestamp": 1752257386.8928955
  },
  {
    "mbpp_id": 504,
    "problem": {
      "task_id": 504,
      "text": "Write a python function to find the cube sum of first n natural numbers.",
      "code": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum",
      "test_list": [
        "assert sum_Of_Series(5) == 225",
        "assert sum_Of_Series(2) == 9",
        "assert sum_Of_Series(3) == 36"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the cube sum of first n natural numbers.\n\nTask ID: 504\n\nExpected behavior (test cases):\n1. sum_Of_Series(5) should return 225\n2. sum_Of_Series(2) should return 9\n3. sum_Of_Series(3) should return 36\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def sum_Of_Series(n):\r\n   return (n * (n + 1) / 2)**2 "
          }
        }
      ],
      "usage": {
        "total_tokens": 152,
        "prompt_tokens": 135,
        "completion_tokens": 24
      }
    },
    "timestamp": 1752257388.942182
  },
  {
    "mbpp_id": 505,
    "problem": {
      "task_id": 505,
      "text": "Write a function to move all zeroes to the end of the given array.",
      "code": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A",
      "test_list": [
        "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
        "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
        "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to move all zeroes to the end of the given array.\n\nTask ID: 505\n\nExpected behavior (test cases):\n1. re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) should return [6, 8, 2, 3, 4, 1, 0, 0, 0]\n2. re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) should return [4, 2, 7, 9, 12, 0, 0, 0, 0]\n3. re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) should return [3, 11, 74, 14, 1, 2, 0, 0, 0]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def re_order(array):\r\n  result = []\r\n  zeros = 0\r\n  for i in range(len(array)):\r\n    if array[i] != 0:\r\n      result.append(array[i])\r\n    else:\r\n      zeros += 1\r\n\r\n  while(zeros > 0):\r\n    result.append(0)\r\n    zeros -= 1\r\n  return(result)"
          }
        }
      ],
      "usage": {
        "total_tokens": 342,
        "prompt_tokens": 278,
        "completion_tokens": 71
      }
    },
    "timestamp": 1752257393.9195678
  },
  {
    "mbpp_id": 506,
    "problem": {
      "task_id": 506,
      "text": "Write a function to calculate the permutation coefficient of given p(n, k).",
      "code": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ",
      "test_list": [
        "assert permutation_coefficient(10, 2) == 90",
        "assert permutation_coefficient(10, 3) == 720",
        "assert permutation_coefficient(10, 1) == 10"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the permutation coefficient of given p(n, k).\n\nTask ID: 506\n\nExpected behavior (test cases):\n1. permutation_coefficient(10, 2) should return 90\n2. permutation_coefficient(10, 3) should return 720\n3. permutation_coefficient(10, 1) should return 10\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "import math\r\ndef permutation_coefficient(p, n):\r\n    r = math.factorial(n) / math.factorial(n - p)\r\n    return int(r) "
          }
        }
      ],
      "usage": {
        "total_tokens": 171,
        "prompt_tokens": 145,
        "completion_tokens": 33
      }
    },
    "timestamp": 1752257396.5367632
  },
  {
    "mbpp_id": 507,
    "problem": {
      "task_id": 507,
      "text": "Write a function to remove specific words from a given list.",
      "code": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ",
      "test_list": [
        "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
        "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
        "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove specific words from a given list.\n\nTask ID: 507\n\nExpected behavior (test cases):\n1. remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n2. remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\n3. remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def remove_words(test_list,test_word):\r\n    for word in test_word:\r\n        if word not in test_list:\r\n            test_list.remove(word)\r\n    return(test_list)"
          }
        }
      ],
      "usage": {
        "total_tokens": 234,
        "prompt_tokens": 207,
        "completion_tokens": 34
      }
    },
    "timestamp": 1752257399.164414
  },
  {
    "mbpp_id": 508,
    "problem": {
      "task_id": 508,
      "text": "Write a function to check if the common elements between two given lists are in the same order or not.",
      "code": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2",
      "test_list": [
        "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
        "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the common elements between two given lists are in the same order or not.\n\nTask ID: 508\n\nExpected behavior (test cases):\n1. same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n2. same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\n3. same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def same_order(list1, list2):\r\n  # If size of both list is not equal then they cannot be same\r\n  if len(list1) != len(list2): \r\n    return False\r\n    \r\n  res = sorted(list1)\r\n  result = sorted(list2)\r\n  \r\n  for i in range(len(res)): \r\n      if (res[i] == result[i]): \r\n          continue \r\n      else:\r\n          break\r\n\r\n  return (i == len(result)) "
          }
        }
      ],
      "usage": {
        "total_tokens": 261,
        "prompt_tokens": 174,
        "completion_tokens": 94
      }
    },
    "timestamp": 1752257405.473183
  },
  {
    "mbpp_id": 509,
    "problem": {
      "task_id": 509,
      "text": "Write a python function to find the average of odd numbers till a given odd number.",
      "code": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ",
      "test_list": [
        "assert average_Odd(9) == 5",
        "assert average_Odd(5) == 3",
        "assert average_Odd(11) == 6"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the average of odd numbers till a given odd number.\n\nTask ID: 509\n\nExpected behavior (test cases):\n1. average_Odd(9) should return 5\n2. average_Odd(5) should return 3\n3. average_Odd(11) should return 6\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def average_Odd(n):\r\n    if n <= 0:\r\n        raise ValueError('n is less than or equal to zero')\r\n    result = sum(range(1,n+1,2))/n\r\n    return int(result) "
          }
        }
      ],
      "usage": {
        "total_tokens": 172,
        "prompt_tokens": 132,
        "completion_tokens": 47
      }
    },
    "timestamp": 1752257408.908404
  },
  {
    "mbpp_id": 510,
    "problem": {
      "task_id": 510,
      "text": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
      "code": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]",
      "test_list": [
        "assert no_of_subsequences([1,2,3,4], 10) == 11",
        "assert no_of_subsequences([4,8,7,2], 50) == 9",
        "assert no_of_subsequences([5,6,7,8], 15) == 4"
      ],
      "test_setup_code": "",
      "challenge_test_list": []
    },
    "prompt": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n\nTask ID: 510\n\nExpected behavior (test cases):\n1. no_of_subsequences([1,2,3,4], 10) should return 11\n2. no_of_subsequences([4,8,7,2], 50) should return 9\n3. no_of_subsequences([5,6,7,8], 15) should return 4\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.",
    "model_response": {
      "choices": [
        {
          "message": {
            "content": "def no_of_subsequences(arr,k):\r\n    count = sum(i <= k for i in arr)\r\n    total = len(arr)\r\n    return int(count ** 0.5 * total / 2)"
          }
        }
      ],
      "usage": {
        "total_tokens": 204,
        "prompt_tokens": 170,
        "completion_tokens": 41
      }
    },
    "timestamp": 1752257412.0184686
  }
]