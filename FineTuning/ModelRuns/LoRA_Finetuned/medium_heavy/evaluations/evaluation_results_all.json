[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'remove_Occ' is not defined",
      "Test 2: FAIL - name 'remove_Occ' is not defined",
      "Test 3: FAIL - name 'remove_Occ' is not defined"
    ],
    "generated_code": "def remove_occ(text,c):\r\n    text_list = list(text)\r\n    count=text.count(c)\r\n    for i in range(count+1):\r\n        if(text[i-1]==c):\r\n            del text_list[i]\r\n    for i in range(0,count):\r\n        if(text[-i-1]==c):\r\n            del text_list[-i-1] \r\n    \r\n    result=\"\"\r\n    for ele in text_list:\r\n        result+=ele\r\n    return result\r",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_matrix(matrix):\r\n  matrix.sort(key = lambda x : sum(x))\r\n  return matrix",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_common(lst):\r\n    # Create a list of tuples where each tuple contains word and its frequency.\r\n    freq = [(word, lst.count(word)) for word in set(lst)]\r\n    \r\n    # Sort the list based on the second element (frequency).\r\n    sorted_freq = sorted(freq, key=lambda x: x[1], reverse=True)\r\n    \r\n    # Get top k elements from the sorted list.\r\n    result = dict(sorted_freq[:5])\r\n    \r\n    return result.items()",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Volume(l,w,h):\r\n    vol = l*w*h\r\n    print(\"Volume:\",vol)\r\n    return(vol)",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_lowerstring(test_string):\r\n  result = []\r\n  for i in range(len(test_string)):\r\n    if test_string[i].islower():\r\n      if len(result) == 0:\r\n        start_index = i\r\n      else:\r\n        end_index = i - 1\r\n        substring = test_string[start_index:end_index]\r\n        result.append(substring)\r\n        start_index = i + 1\r\n  return result + [test_string[start_index:]] if len(result) != 0 and start_index < len(test_string) else result",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'text_lowercase_underscore' is not defined",
      "Test 2: FAIL - name 'text_lowercase_underscore' is not defined",
      "Test 3: FAIL - name 'text_lowercase_underscore' is not defined"
    ],
    "generated_code": "def test_lowercase_underscore(text):\r\n    if re.search(r'[a-z]+_[a-z]+',text) is not None:\r\n        return 'Found a match!'\r\n    else:\r\n        return 'Not matched!'",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side): \r\n\treturn 4 * side;",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - string index out of range",
      "Test 2: FAIL - string index out of range",
      "Test 3: FAIL - string index out of range"
    ],
    "generated_code": "def remove_dirty_chars(str_1, str_2):\r\n    for i in range(len(str_1)):\r\n        if str_1[i] in str_2:\r\n            str_1 = str_1.replace(str_1[i], \"\")\r\n    return str_1",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_duplicate(arr):\r\n    s = set()\r\n    for i in arr:\r\n        if i not in s:\r\n            s.add(i)\r\n        else:\r\n            return True\r\n    return False",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_woodall(num):\r\n    # If num is a perfect square\r\n    if int(num ** 0.5) == num ** 0.5:\r\n        return True\r\n    else:\r\n        return False",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multiples_of_num(n,m): \r\n    result = []\r\n    for i in range(1, m+1):\r\n        if ((i % n) == 0):  \r\n            result.append(i) \r\n    return(result)",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_duplicate(arr):\r\n    i = 0\r\n    while(i < len(arr)):\r\n        j = arr[i] - 1\r\n        if(j != i and arr[j] == arr[i]):\r\n            return arr[i]\r\n        else:\r\n            i += 1\r\n    return -1",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def maximum_Sum(lists):\r\n  maxsum=0\r\n  for i in range(len(lists)):\r\n    for j in range(len(lists[i])):\r\n      if(maxsum<sum(lists[i][j])):\r\n        maxsum=sum(lists[i][j])\r\n  return(maxsum)",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def binary_to_decimal(binary): \r\n    dec_value = int(binary, 2)\r\n    return dec_value",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'find_Product' is not defined",
      "Test 2: FAIL - name 'find_Product' is not defined",
      "Test 3: FAIL - name 'find_Product' is not defined"
    ],
    "generated_code": "def find_product(A,N): \r\n    res = 1\r\n    for i in range(N):\r\n        if A[i] != 1:\r\n            res *= A[i]\r\n    \r\n    return res",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_k_elements(tuples, k):\r\n    count = 0\r\n    for tup in tuples:\r\n        if len(set(tup)) == k and len(tup) >= k:\r\n            count += 1\r\n    if count > 0:\r\n        print(\"There is at least one element that contains\",k,\"elements.\")\r\n        return(True)\r\n    else:\r\n        return(False)",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def remove(list_of_strings):\r\n    newlist=[]\r\n    for i in range(0,len(list_of_strings)):\r\n        str1=re.sub('\\d+','',list_of_strings[i])\r\n        newlist.append(str1)\r\n    return(newlist)",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndentationError: unexpected indent"
    ],
    "generated_code": "def binomial_Coeff(n,k): \r\n   res = 1; \r\n    if k > n-k :  \r\n        k = n - k;\r\n    for i in range(1 , k+1 ): \r\n        res = res * (n-i + 1 ) / i ; \r\n    return int(res);",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Odd_Occurrence(arr,n):\r\n    res = arr[0]\r\n    for i in range(1, n):\r\n        if arr[i] == res:\r\n            return arr[i]\r\n    else:\r\n        return -1",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def countSubstring(text): \r\n    count = 0\r\n    for i in range(0,len(text)): \r\n        if text[i] == text[len(text) - 1-i]: \r\n            count += 1  \r\n    return count",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'heapq' is not defined",
      "Test 2: FAIL - name 'heapq' is not defined",
      "Test 3: FAIL - name 'heapq' is not defined"
    ],
    "generated_code": "def func(lists,k):\r\n    res=[0]*k \r\n    for i in range(len(lists)):\r\n        h=lists[i]\r\n        for j in h:\r\n            heapq.heappush(res,j)\r\n        while len(res)>k:\r\n            heapq.heappop(res)    \r\n    return res",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_Prime_Factors(n): \r\n    i = 2\r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            j = 0\r\n            while (n % i == 0): \r\n                n = int(n / i)\r\n                j += 1\r\n            return i ** j \r\n\r\n        i = i + 1\r\n    return n ",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_To_Binary(num):\r\n    bin_num = \"\"\r\n    while num > 0:\r\n        rem = num % 2\r\n        bin_num += str(rem)\r\n        num //= 2\r\n    # Convert binary number to string and reverse it.\r\n    bin_num = bin_num[::-1]\r\n    print(bin_num)\r\n\r",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_missing() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_missing() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_missing() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def find_missing(nums): \r\n    n = len(nums)\r\n    low = 0\r\n    high = n - 1\r\n\r\n    while(low <= high):\r\n        mid = (low + high)//2\r\n        \r\n        if((nums[mid] > mid+1 and nums[mid-1] < mid) or ((mid == n-1 or nums[mid] != nums[mid+1])and nums[high] != nums[high-1])):\r\n            return mid+1\r\n            \r\n        elif(mid >= 0 and nums[mid] < mid):\r\n            high = mid-1\r\n        \r\n        else:\r\n            low = mid+1\r\n    \r\n    return None ",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_rect_num(n): \r\n    return int((n * (n + 1)) / 2)",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Nth_Digit(m,n,x): \r\n    num = str((m * 9 + x)) \r\n    if len(num)<x+1: \r\n        return -1\r\n    else:\r\n        num= int(num[x-1])\r\n        print(num)\r\n        return num",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 2: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 3: FAIL - '<' not supported between instances of 'str' and 'int'"
    ],
    "generated_code": "def sort_mixed_list(testlist):\r\n    testlist.sort()\r\n    return testlist",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def div_even_odd(arr): \r\n\treturn arr[0]//arr[-1]",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rearange_string(str):\r\n    n=len(str)\r\n    temp = list(str)\r\n    for i in range(0,n-1): \r\n        if (str[i] == str[i+1]): \r\n            for j in range(i + 1, n):  \r\n                if (temp[j] != str[i]) : \r\n                    temp[i], temp[j] = temp[j], temp[i]\r\n                    break\r\n    return ''.join(temp) \r\n ",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'defaultdict' is not defined",
      "Test 2: FAIL - name 'defaultdict' is not defined",
      "Test 3: FAIL - name 'defaultdict' is not defined"
    ],
    "generated_code": "def freq_element(l):\r\n    return defaultdict(int, {x: l.count(x) for l in l})",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_evennumbers(lst):\r\n    return list(filter(lambda x: (x % 2 == 0), lst))",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Sum(nums,k):\r\n    temp_dict = {}\r\n    for num in nums:\r\n        if num not in temp_dict.keys():\r\n            temp_dict[num] = 0\r\n        else:\r\n            if temp_dict[num] == k-1 :\r\n                return \"Yes\"\r\n            else:\r\n                temp_dict[num]+=1 \r\n    return \"No\"",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_match(text):\r\n    x = re.findall('[a-z]+_[a-z]+', text)\r\n    if x:\r\n        return('Found a match')\r\n    else:\r\n        return('Not matched!')",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_match_string(text):\r\n    if re.match(r\"^python\",text):\r\n        return 'Found a match!'\r\n    else:\r\n        return ('Not matched!')",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_gcd(arr):\r\n    max_num = max(arr)\r\n    while True:\r\n        if all(num % max_num == 0 for num in arr):\r\n            break\r\n        else:\r\n            max_num -= 1\r\n    return max_num",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_distinct(test_list):\r\n  new_set = set(test_list)\r\n  if len(new_set) == len(test_list):\r\n    return True\r\n  else:\r\n    return False",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - maximum recursion depth exceeded in comparison",
      "Test 2: FAIL - maximum recursion depth exceeded in comparison",
      "Test 3: FAIL - maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def compute_Last_Digit(a,b):\r\n    if(b==0): \r\n        return 1\r\n    elif(a<=b): \r\n        return compute_Last_Digit(a-1,b)\r\n    else:\r\n        c = (a-b)+1\r\n        d = int((c*(c+1))/2)\r\n        f = (d*(d+1))/2 %10\r\n        h = (int(((a+b)*a)/2))%10\r\n        i= min(f,h)\r\n        j = max(f,h)\r\n        x = pow(i,a)\r\n        y = pow(j,b)\r\n        z = x//y\r\n        return (z*10)%10",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(num):\r\n    # Convert the number to binary string\r\n    bin_num = bin(num)\r\n    \r\n    # Remove the '0b' prefix and split into list elements based on space (' ')\r\n    binary_list = [x for x in str(bin_num)[2:].split(' ')]\r\n    \r\n    # Change odd index positions to '1'\r\n    binary_list[::2] = ['1'] * len(binary_list[::2])\r\n    \r\n    # Join the list back together to form new binary string \r\n    result_bin = ''.join(binary_list)\r\n    \r\n    # Convert from binary to decimal\r\n    result_dec = int(result_bin, 2)\r\n\r\n    return result_dec ",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def specified_element(lists,x):\r\n    lis=[]\r\n    for i in range(len(lists)):\r\n        if x==i:\r\n            continue\r\n        else:\r\n            for j in range(0,len(lists[i])):\r\n                if j!=x and lists[i][j]!=2:\r\n                    lis.append(lists[i][j])\r\n    return(lis)",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'List' is not defined. Did you mean: 'list'?"
    ],
    "generated_code": "def min_length_list(test_lists:List[List[int]]) -> int:\r\n  return len(min(test_lists,key=lambda x:len(x)))",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a,b,c): \r\n\tif (a == b and b==c): \r\n\t\treturn True\r\n\telse : \r\n\t\treturn False",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base,height): \r\n\treturn base*height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Equality(str):\r\n    if str[0] == str[-1]:\r\n        print('Equal')\r\n    else:\r\n        print('Not Equal')",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def counting_sort(arr):\r\n    # Find the maximum value in the list\r\n    max_value = max(arr)\r\n    \r\n    # Create an auxiliary list with size equal to the number of elements in arr + 1\r\n    count_list = [0] * (max_value+1)\r\n    \r\n    # Populate the count list\r\n    for num in arr:\r\n        count_list[num] += 1\r\n    \r\n    # Calculate the cumulative sum of the count list\r\n    cum_sum = 0\r\n    for i in range(max_value+1):\r\n        count_list[i], cum_sum = cum_sum, count_list[i]+cum_sum\r\n    \r\n    # Generate the sorted array using the count list\r\n    sorted_arr = [0] * len(arr)\r\n    for i in range(len(arr)):\r\n        sorted_arr[count_list[arr[i]]-1] = arr[i]\r\n        count_list[arr[i]] -= 1\r\n    \r\n    return sorted_arr",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_gp(n,a,r):\r\n    return a*(r**(n-1))",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(num):\r\n    num = str(num)\r\n    n=len(num)\r\n    rev = int(num[n-1])\r\n    sum=rev\r\n    for i in range(n-2,-1,-1):\r\n        sum+=int(num[i])*(10**i)\r\n    if sum+rev==num:\r\n        return(True)\r\n    else:\r\n        return(False)",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max_Num(digits,n):\r\n    s = sorted(set(digits))\r\n    max_num = \"\"\r\n    for i in range(0,n):\r\n        if(len(s)>i):\r\n            max_num += str(s[i])\r\n    return int(max_num)",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def opposite_Signs(x,y):\r\n    if ((x < 0 and y > 0) or (x > 0 and y < 0)):\r\n        return True\r\n    else:\r\n        return False",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_octagonal(n):\r\n   if n == 1:\r\n      return True\r\n   k = int(((1 + (2 * n) ** .5) / 2) - .5)\r\n   if ((n**.5) % 1 != 0 and (k % 1 != 0)):\r\n      return False\r\n   else:\r\n      return True",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_len_sub(arr, n):\r\n    result = []\r\n    temp_sum = arr[0]\r\n    min_diff = float(\"inf\")\r\n    current_length = 0\r\n\r\n    # Calculate minimum possible value for first element\r\n    if n == 1:\r\n        return len(result)\r\n\r\n    for i in range(1, n):\r\n        # Calculate the sum and difference between consecutive elements\r\n        curr_sum = arr[i] + arr[i-1]\r\n        diff = abs(curr_sum - arr[i])\r\n\r\n        # If the calculated difference is less than the current minimum difference,\r\n        # update the result.\r\n        if diff < min_diff:\r\n            result.clear()\r\n            min_diff = diff\r\n            result.append(i)\r\n            current_length = 1\r\n\r\n        # Otherwise add it into result.\r\n        elif diff == min_diff:\r\n            result.append(i)\r\n            current_length += 1\r\n\r\n    return current_length ",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_Substrings() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - count_Substrings() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - count_Substrings() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def count_Substrings(n): \r\n\tcount = 0\r\n\t# iterate through every starting point \r\n\tfor i in range(len(n)): \r\n\t\tsum_so_far = 0\r\n\t\tcount += 1\r\n\t\t# for each iteration add one to the sum and increment the index until we get n[i] \r\n\t\twhile(sum_so_far < len(n)) and (n[sum_so_far] == '1'): \r\n\t\t\tsum_so_far += 1\r\n\t\tif(sum_so_far == len(n)): \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\t# if there is a carry over then increase count again \r\n\t\t\twhile(n[sum_so_far] != '1'): \r\n\t\t\t\tsum_so_far += 1\r\n\t\t\tcount += 1\r\n\treturn count",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(list_):\r\n    n = len(list_)\r\n    minn = list_[0]\r\n    for i in range(1,n):\r\n        if list_[i] < minn:\r\n            minn = list_[i]\r\n    return(minn)",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_difference(tuples):\r\n    temp = 0\r\n    for i in range(0, len(tuples)):\r\n        if(i+1 < len(tuples)):\r\n            if((tuples[i + 1][1] - tuples[i][0]) > temp):\r\n                temp = tuples[i + 1][1] - tuples[i][0]\r\n    print(temp)",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def subject_marks(student): \r\n    return sorted(student, key = lambda x : x[1])",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recursive_list_sum(list_of_numbers):\r\n    total = 0\r\n    for i in range(len(list_of_numbers)):\r\n        if type(list_of_numbers[i]) == int:\r\n            total += list_of_numbers[i]\r\n        elif isinstance(list_of_numbers[i], list):\r\n            total += recursive_list_sum(list_of_numbers[i])\r\n    return total",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(arr):\r\n    count = 0\r\n    for i in range(len(arr)):\r\n        if arr[i] > 0:\r\n            count += 1\r\n    return count",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def bell_number(n):\r\n  # Initialize an array for storing Bell numbers\r\n  arr = [0] * n\r\n\r\n  # The first bell number is always equal to 1\r\n  arr[0] = 1\r\n\r\n  # Fill in the rest of the array using dynamic programming\r\n  for i in range(1, n):\r\n    for j in range(i, -1, -1):\r\n      if j > 0:\r\n        arr[i] += arr[j-1]\r\n    arr[i] += 1\r\n\r\n  return arr[n-1]",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(arr): \r\n    n = len(arr) \r\n  \r\n    if ((n == 0) or\r\n        (n == 1)): \r\n        return True \r\n  \r\n    flag1 = False; \r\n    for i in range(1, n-1): \r\n          \r\n        # Check for increasing order. \r\n        if (arr[i] > arr[i+1]): \r\n            flag1 = True; \r\n\r\n    # If we reach here then it is not an increasing sequence. \r\n    if(flag1==True): \r\n        return False\r\n    \r\n    flag2 = False; \r\n    for i in range(1, n-1): \r\n              \r\n        # Check for decreasing order. \r\n        if (arr[i] < arr[i+1]): \r\n            flag2 = True; \r\n    \r\n    # If we reach here then it is not a decreasing sequence. \r\n    if(flag2==True):\r\n        return False\r\n    else:\r\n        return True ",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_sublist(lst,sublist):\r\n    return sublist in lst",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - get_equal() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - get_equal() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - get_equal() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def get_equal(tuples):\r\n    if len(set([len(i) for i in tuples])) != 1:\r\n        return \"All tuples do not have same length\"\r\n    else:\r\n        return \"All tuples have same length\"",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def comb_sort(list_):\r\n    gap = len(list_)\r\n    swapped = True\r\n    while gap > 1 or swapped == True:\r\n        gap = max(1, int(gap / 1.3))\r\n        swapped = False\r\n        for i in range(len(list_) - gap):\r\n            if list_[i] > list_[i + gap]:\r\n                list_[i], list_[i + gap] = list_[i + gap], list_[i]\r\n                swapped = True\r\n\r\n    return list_\r",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sqrt' is not defined",
      "Test 2: FAIL - name 'sqrt' is not defined",
      "Test 3: FAIL - name 'sqrt' is not defined"
    ],
    "generated_code": "def dif_Square(x):\r\n    # Code here\r\n    if x < 0:\r\n        return \"Input is Negative\"\r\n    else:\r\n        y = int(sqrt(x))\r\n        if(y*y == x):   # checking for perfect square\r\n            z = x % 4 == 0\r\n            if z==True:\r\n                return \"It cannot be represented as sum of two squares\"        \r\n            else:\r\n                return 'Yes'\r\n        else:\r\n            return \"Input has no such representation\"",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multiple_split(str):\r\n    list_ = []\r\n    for i in str.split(\" \"):\r\n        if \"*\" in i:\r\n            list_.append(i)\r\n        else:\r\n            continue\r\n    print(list_)\r",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_samepatterns(patt, patt1):\r\n    if len(set(patt)) == len(set(patt1)):\r\n        return True\r\n    else:\r\n        return False;",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_tuples(lst, k):\r\n    new = []\r\n    for i in lst:\r\n        if sum(i)%k == 0:\r\n            new.append(tuple(i))\r\n    return(new)",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(length,width):\r\n    if length==width:\r\n        return pow(length+1,2)\r\n    else:\r\n        x=1\r\n        y=length-1\r\n        while(x<=length and y>=1):\r\n            ans=(pow((x+y),2))\r\n            x=x+1\r\n            y=y-1\r\n        return(ans)",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [],
    "generated_code": "def is_Diff(num):\r\n    s = str(num)\r\n    c=0\r\n    o=0\r\n    for i in range(len(s)):\r\n        if int(s[i])%2==0:\r\n            c+=int(s[i])\r\n        else:\r\n            o+=int(s[i])\r\n    print(o-c,end=\" \")\r\n    if o<c:\r\n        return \"True\"\r\n    elif o>c:\r\n        return \"False\" \r\n    else:\r\n        return \"Equal\"",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_With_Odd_SetBits(num): \r\n    result = num.bit_count() // 2 + 1\r\n    return result if num & (num - 1) == 0 else 0",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\r\n    if len(word)%2!=0:\r\n        return(True)\r\n    else:\r\n        return(False)",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tetrahedral_number(n): \r\n\treturn int(((n*(n+1)*(n+2))/6))",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - tuple index out of range",
      "Test 2: FAIL - tuple index out of range",
      "Test 3: FAIL - tuple index out of range"
    ],
    "generated_code": "def zip_tuples(tuple_a, tuple_b):\r\n  zipped = []\r\n  for i in range(len(tuple_a)):\r\n    zipped.append((tuple_a[i], tuple_b[i]))\r\n  return(zipped)",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def volume_sphere(r):\r\n    return (4/3)*math.pi*(r*r*r)",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - string index out of range"
    ],
    "generated_code": "def get_Char(s): \r\n\treturn ((s[0]+s[1]+s[2]))[0]",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequence(n): \r\n    if n == 1: \r\n        return 1\r\n    elif n == 2: \r\n        return 1\r\n    else: \r\n        return (sequence(n - 1) + sequence(n - 2))",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def surfacearea_sphere(radius):\r\n    area = 4 * radius ** 2 * math.pi\r\n    volume = 4 / 3 * radius ** 3 * math.pi\r\n    return round(area)",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'centered_hexagonal_number' is not defined",
      "Test 2: FAIL - name 'centered_hexagonal_number' is not defined",
      "Test 3: FAIL - name 'centered_hexagonal_number' is not defined"
    ],
    "generated_code": "def center_hexagon(n): \r\n    h = ((n * 3) - n) / 2\r\n    h = int(h)\r\n    if(n % 2 != 0):\r\n        h += 1  \r\n    return h**2 + (n-1)*(h-n+1)//2 + (n-1)**2 //4  # formula for the sum of consecutive squares and odd numbers",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict1, dict2,dict3):\r\n    return dict1 | dict2 | dict3;",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Counter' is not defined",
      "Test 2: FAIL - name 'Counter' is not defined",
      "Test 3: FAIL - name 'Counter' is not defined"
    ],
    "generated_code": "def freq_count(list):\r\n    return(Counter(list))",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def closest_num(n):\r\n    i = 0\r\n    while True:\r\n        if n - 1 > max(i+1,n-1):\r\n            return n-1\r\n        else:\r\n            i += 1",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(a):\r\n    return max([len(i) for i in a])",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_substring(list1,sub):\r\n  for x in range(0,len(list1)):\r\n    for y in range(x+1,len(list1)+1):\r\n      if sub==list1[x:y]:\r\n        return True\r\n  return False",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_undulating(num):\r\n    num_str = str(num)\r\n    if len(num_str) == 0:\r\n        return \"Invalid input\"\r\n    elif len(num_str) == 1:\r\n        return \"Undulating\"\r\n    else:\r\n        for i in range(len(num_str)):\r\n            if num_str[i] != num_str[-(i+1)] and num_str[i] != num_str[1+i]:\r\n                return \"Not Undulating\"\r\n        return \"Undulating\"",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - local variable 'e' referenced before assignment",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def power(a,b):\r\n    c=0\r\n    for i in range(b):\r\n        if b%2==0:\r\n            d=a**c\r\n            c=c+1\r\n        else:\r\n            e=(a*c)\r\n            c=c+1\r\n    print(e) \r\n    return(c)",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_minimum(test_tup):\r\n    return min(test_tup)[0]",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Min_Length(List_of_Lists):\r\n    min_length = float('inf')\r\n    for i in range(len(List_of_Lists)):\r\n        if len(List_of_Lists[i]) < min_length:\r\n            min_length = len(List_of_Lists[i])\r\n    return min_length",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\r\n    count = 0\r\n    for i in range(1,n+1): \r\n        if n % i == 0: \r\n            count+=1\r\n        \r\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_lists(lists): \r\n    d = {}  \r\n    for sublist in lists:    \r\n        for item in sublist:            \r\n            if (item in d):\r\n                d[item] += 1\r\n            else:\r\n                d[item] = 1\r\n    return d",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multiply_num(numbers):\r\n    num = 1\r\n    for x in range(0, len(numbers)):\r\n        if numbers[x] > 0:\r\n            num *= numbers[x]\r\n        else:\r\n            num /= numbers[x]\r\n    return round(num)",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(num):\r\n    bin = \"\"\r\n    while num > 0:\r\n        bin += str(num % 2)\r\n        num //= 2\r\n    bin = bin[::-1]\r\n    return bin ",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "def next_smallest_palindrome(n):\r\n    n = str(n)\r\n    if n[::] == n[::-1]:\r\n        return int(''.join(['0'] + list(n)))\r\n    else:\r\n        i = len(n) // 2\r\n        while True:\r\n            for j in range(i - 1, -1, -1):\r\n                if int(n[j]) < int(n[i]):\r\n                    n = ''.join([n[:j], n[j+1:i][::-1], n[i+1]])\r\n                    break\r\n            else:\r\n                i -= 1\r\n            else:\r\n                return int(n)",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def kth_element(arr, n, k):\r\n    res = 0\r\n    for i in range(k):\r\n        res = max(res,arr[i])\r\n    return res ",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def snake_to_camel(snake_str):\r\n  components = snake_str.split('_')\r\n  # If there's at least one component and it's not empty\r\n  if len(components) > 1:\r\n    return ''.join(x.title() for x in components[1:]) + components[0]\r\n  else:\r\n    return components[0]",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def factorial(x):\r\n    res = 1\r\n    for i in range(1, x + 1):\r\n        res *= i\r\n    return res\r\n\r\ndef eulerian_num(n, k):\r\n    f_nk = 0\r\n    pwr = 1\r\n    while n > 0:\r\n        if n % 2 == 0 and n != k:\r\n            # print(k)\r\n            f_nk += 1 * pow(f_nk, pwr - 1) * factorial(pwr)\r\n        else:\r\n            f_nk += 1 * pow(f_nk, pwr - 1) * factorial(pwr)\r\n            # print(f_nk)\r\n        n -= 1\r\n        pwr += 1\r\n    return int(f_nk)",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst): \r\n    return [sorted(sublist) for sublist in lst]",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(l):\r\n    count=0\r\n    for i in l:\r\n        if i==True:\r\n            count=count+1\r\n    return(count)",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_lists(lst, tup):\r\n   x = tuple(lst)\r\n   return tup + x",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 2: '12'",
      "Test 2: FAIL - string index out of range",
      "Test 3: FAIL - invalid literal for int() with base 2: '17'"
    ],
    "generated_code": "def count_Hexadecimal(lb,ub):\r\n    hexa = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\r\n    ans=0\r\n    for i in range(lb,ub+1):\r\n        s = \"{0:o}\".format(i)\r\n        if(s[0] != \"1\" and s[1] == \"1\"):\r\n            continue\r\n        elif(int(s,base=2)>9):\r\n            for j in range(len(hexa)):\r\n                if(str(hexa[j]) not in s):\r\n                    break\r\n            else:\r\n                ans+=1\r\n        else:\r\n            for k in range(len(s)-1):\r\n                if(int(s[k+1]-s[k]) > 1):\r\n                    break\r\n            else:\r\n                ans+=1\r\n    return(ans)",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given",
      "Test 2: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given",
      "Test 3: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given"
    ],
    "generated_code": "def merge_sorted_list(arrays):\r\n    result = []\r\n    min_heap = [(arrays[i][0], i, 0) for i in range(len(arrays))]\r\n    heappush(result, min_heap)\r\n    \r\n    while len(min_heap) > 0:\r\n        value, array_index, item_index = heappop(min_heap)\r\n        if len(arrays[array_index]) == item_index + 1:\r\n            next_value = arrays[array_index][item_index+1]\r\n            heappush(min_heap, (next_value, array_index, item_index+1))\r\n        else:\r\n            break\r\n    return result[:]",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'bool' object has no attribute 'count'",
      "Test 2: FAIL - 'bool' object has no attribute 'count'",
      "Test 3: FAIL - 'bool' object has no attribute 'count'"
    ],
    "generated_code": "def odd_Equivalent(bin_string,n):\r\n    # Initialize result\r\n    r = len(bin_string)\r\n\r\n    # Check if n is even and not divisible by r,\r\n    # then n will be equivalent of zero.\r\n    while n % r == 0:\r\n        n //= r\r\n\r\n    if n == 1:\r\n        # If no further division possible,\r\n        # i.e., when 'n' becomes one.\r\n        n = -1\r\n\r\n    # Count number of set bits in each iteration\r\n    for j in range(r):\r\n\r\n        # If there is an equal number of zeros\r\n        # at both left and right side of current bit,\r\n        # then increment counter variable by two times.\r\n        if bin_string[j] == \"1\":\r\n            k = (bin_string[~j:j+1] == \"1\" * r).count(True)\r\n            if n < 0 and k > 0:\r\n                break\r\n            elif n > 0 and k < 0:\r\n                continue\r\n\r\n            if k > 0 and n != 0:\r\n\r\n                # Incrementing counter variable\r\n                # by two times as we need to\r\n                # make sure both left and right side have same amount of ones.\r\n                n += 2\r\n\r\n    return abs(n) // 2 + r - len(bin_string) // 2  # Returning final answer",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_missing(list_of_ranges, start_range, end_range): \r\n  # Initialize variables\r\n  current_min = None\r\n  result = []\r\n  for i in list_of_ranges:\r\n    if (current_min is None):\r\n      current_min = i[0]\r\n    elif (i[0] <= current_min + 1): \r\n      current_min = max(current_min, i[0])\r\n    else:\r\n      current_min = min(i[1], current_min)\r\n      result.append((current_min, min(end_range, i[1])))\r\n      current_min = max(i[1], end_range - 1)\r\n  if (current_min != end_range):\r\n    result.append((current_min, end_range))\r\n  return result",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_in_nested_lists(lists):\r\n    set_of_items = {item for sublist in lists for item in sublist}\r\n    return list(set_of_items) if set_of_items else []",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perimeter(radius,height):\r\n    return (2*3.14*radius)+(2*3.14*height)",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(str):\r\n    return str.isdigit()",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_freq(lst):\r\n  dict = {}\r\n  for i in lst:\r\n    count = 0\r\n    for j in i:\r\n      if j not in dict:\r\n        dict[j] = 1\r\n      else:\r\n        count += dict[j]\r\n        dict[j] += 1\r\n    print(i)\r\n    print(count) \r\n  return(list(dict.items()))  # Convert dictionary items into tuples and then back into a list before returning it.",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def empty_dit(arr):\r\n    for i in arr:\r\n        if len(i) !=0 :\r\n            return False\r\n    return True",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup): \r\n    return int(''.join(map(str,tup)))",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def list_to_float(list1):\r\n    result = []\r\n    for i in range(len(list1)):\r\n        if len(str(list1[i][0]).split(\".\")) != 2:\r\n            firstnum = str(int(float(list1[i][0]))) + \".\" + \"\"\r\n            secnum = str(int((float(list1[i][1]))))\r\n            secondnum = secnum.split(\".\")[1]\r\n            result.append([firstnum, secondnum])\r\n        else:\r\n            result.append(list1[i])\r\n    return result\r\n\r",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def string_to_list(test_string):\r\n    l=[]\r\n    for i in test_string:\r\n        if(i==' '):\r\n            continue\r\n        else:\r\n            l.append(i)\r\n    return(l)",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - search() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - search() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - search() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def search(nums): \r\n    # Your Code Here\r\n    i = 0  \r\n    j = len(nums) - 1    \r\n    while(i < j):\r\n        if(nums[i] == nums[j]):\r\n            i += 1\r\n            j -= 1\r\n        else:\r\n            return(nums[i])\r\n    return(nums[j])",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_product_tuple(test):\r\n    result = sorted([i for i in test], key=lambda x:(-x[1], -x[0]))\r\n    return int(result[-1][0] * result[-1][1])  # sort on decreasing order based on the value and then the index ",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - check_triplet() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def check_triplet(arr, n, s): \r\n    for i in range(0, n - 2): \r\n        for j in range(i + 1, n - 1): \r\n            for k in range(j + 1, n): \r\n                if ((arr[i] + arr[j] + arr[k]) == s): \r\n                    print (\"Triplet is\", arr[i], \",\", \r\n                           arr[j], \",\", arr[k]); \r\n                    return(True); \r\n    print(\"No such triplet exists\")\r\n    return(False)\r",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def smartNumber(n): \r\n    i = 1\r\n    num = 0\r\n    while True:\r\n        if (num == n):\r\n            break;\r\n        else:\r\n            temp = num + ((i * 2) ** 2)\r\n            i += 1\r\n            num = temp\r\n    return num",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def amicable_numbers_sum(n):\r\n    def is_amicable(a, b): \r\n        s = sum(d for d in range(1, int((a + b) / 2)) if not a % d and not b % d)\r\n        return s == a + b \r\n\r\n    res = 0\r\n    for i in range(1, n+1): \r\n        j = is_amicable(i, i+1)\r\n        if j != 0:\r\n            res += i\r\n\r\n    return res",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - angle_complex() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - angle_complex() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - angle_complex() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def angle_complex(c):\r\n  x = c.real \r\n  y = c.imag  \r\n  return (radians((y/(x+0.0))))",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_length(bin_str, k):\r\n    n = len(bin_str)\r\n    max_diff = float('-inf')\r\n    left = right = 0\r\n\r\n    count_0s = bin_str.count('0')\r\n    count_1s = n - count_0s\r\n    \r\n    if abs(count_0s - count_1s) > 1:\r\n        return 0\r\n \r\n    while right < n:\r\n        diff = right-left + 1\r\n        right += 1\r\n        \r\n        if bin_str[right] == '1':\r\n            count_1s -= 1\r\n            \r\n        elif bin_str[right] == '0':\r\n            count_0s -= 1\r\n        \r\n        if abs(count_0s - count_1s) <= 1:\r\n            current_diff = diff\r\n            max_diff = max(max_diff, current_diff)\r\n\r\n        if right - left + 1 == k + 1:\r\n            break\r\n   \r\n    return max_diff ",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_divisors(n):\r\n    ans = []\r\n    for i in range(1, n // 2 + 1):\r\n        if n % i == 0:\r\n            ans.append(i)\r\n    print(sum(ans))",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_int(x,y): \r\n   if y == 0: \r\n      return 0\r\n   elif y > 0:\r\n       return x + multiply_int(x , y-1) \r\n   else: \r\n       return -(x + multiply_int(-x , -y-1))",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, words):\r\n    return [w for w in words if len(w) > n]",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def magic_square_test(square):\r\n    if len(set(map(sum, zip(*square)))) == 1 and sum(list(map(lambda x:x[0]+x[1],zip(*square)))+[sum(x) for x in square])%len(square)==0:\r\n        return True\r\n    else:\r\n        return False",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Counter' is not defined",
      "Test 2: FAIL - name 'Counter' is not defined",
      "Test 3: FAIL - name 'Counter' is not defined"
    ],
    "generated_code": "def max_occurrences(list_): \r\n\tmaxi = -1\r\n\tcounts = Counter()\r\n\tfor i in list_:  \r\n\t\tcounts[i] += 1\r\n\tfor key,val in counts.items():  \r\n\t\tif val > maxi:\r\n\t\t\tmaxi = val\r\n\treturn(key,maxi)",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_vowels(S):\r\n  S = list(S)\r\n  i, j = 0, len(S) - 1\r\n  while(i < j): \r\n    if (S[i].lower() not in 'aeiou' and S[j].lower() not in 'aeiou'):\r\n      i += 1\r\n    elif (S[i].lower() == S[j].lower()):\r\n      temp = S[i]\r\n      S[i] = S[j]\r\n      S[j] = temp\r\n      i += 1\r\n      j -= 1\r\n    else:\r\n      break\r\n\r\n  res = \"\"\r\n  for k in range(len(S)):\r\n    res = res + S[k]\r\n\r\n  return(res)",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\r\n    result = ''.join(tup)\r\n    return result",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_negativenum(l):\r\n    return sum(map(lambda x:x if x<0 else 0,l))",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_last(A,p,k):\r\n    for i in range(k-1):\r\n        A.pop()\r\n    if len(A)==0:\r\n        A.append(0)\r\n    elif (A[-1]%2==0):\r\n        return 'EVEN'\r\n    else:\r\n        return 'ODD'",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hexagonal_num(n): \r\n    return n*(2*n-1)",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_electbill(kwh):\r\n    if kwh <= 100:\r\n        return 18*kwh\r\n    elif kwh > 100 and kwh < 250:\r\n        return 18*100 + 0.9*(kwh-100)\r\n    else:\r\n        return 1800+18*(kwh-250) + 0.9*(kwh-250) ",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def zero_count(arr):\r\n    return arr.count(0)/len(arr) if len(arr)>0 else 0.00",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(n): \r\n\tif (n <= 0): \r\n\t\treturn False\r\n\tif (n == 1): \r\n\t\treturn True\r\n\r\n\tfor i in range(1, n + 1): \r\n\t\tx = 1 << i; \r\n\t\ty = x - 1\r\n\t\tif (y != 0 and (x & y) > 0): \r\n\t\t\tcontinue;\r\n\t\tz = ((n ^ (x-1))) & (~((n^(n >> 1)) & ~(((n^y) & ~(n^n))))); \r\n\t\tif (z < n): \r\n\t\t\treturn True; \r\n\r\n\treturn False; ",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def circle_circumference(radius):\r\n   return (2 * math.pi * radius)",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_singly(tupl):\r\n    temp = set()\r\n    for t in tupl:\r\n        temp.update(set(t))\r\n    result = []\r\n    for t in temp:\r\n        if t == 0:\r\n            result.append(1)\r\n        else:\r\n            result.append(t)\r\n    return result[:: -1]",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 5 is not in list",
      "Test 2: FAIL - 5 is not in list",
      "Test 3: FAIL - 5 is not in list"
    ],
    "generated_code": "def flip_list(L):\r\n    mid = len(L) // 2\r\n    L[:mid], L[mid:] = L[mid:], L[:mid]\r\n\r\ndef reverse(L):\r\n    left = 0\r\n    right = len(L)-1\r\n\r\n    while left < right:\r\n        L[left], L[right] = L[right], L[left]\r\n        left += 1\r\n        right -= 1\r\n\r\ndef pancake_sort(L):\r\n    n = len(L)\r\n    \r\n    for i in range(n-1, -1, -1): \r\n        if L[i] != i+1:  \r\n            max_index = L.index(i+1)\r\n\r\n            if max_index > i:  # Flip first part to make element at max index as last\r\n                flip_list(L, max_index + 1)\r\n\r\n            flip_list(L, i + 1)   # Flip second part to place the current max element at its position\r\n    return L",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'zip_longest' is not defined",
      "Test 2: FAIL - name 'zip_longest' is not defined",
      "Test 3: FAIL - name 'zip_longest' is not defined"
    ],
    "generated_code": "def count_samepair(arr1,arr2,arr3):\r\n    count=0\r\n    for x,y,z in zip_longest(arr1,arr2,arr3):\r\n        if x==y and y==z:\r\n            count+=1\r\n    return count",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_lists(test):\r\n    num = len(list(filter(lambda x : type(x) == list , test)))\r\n    print(num)\r\n    return num",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_Pairs(arr,k):\r\n    n = len(arr)\r\n    dp=[0 for i in range(n)]\r\n    res=0\r\n    # Iterate through every element\r\n    for i in range(1,n+1):\r\n        j = 0\r\n        # Check if the required value exists in an index less than i\r\n        while arr[j] + k < i:\r\n            j+=1\r\n        dp[i-1]=dp[i-j-1]+arr[j]\r\n        if i ==j+1:\r\n            dp[0]=-arr[0]\r\n        else:\r\n            res += abs(dp[i-1]-dp[i-j-1])\r\n    return res",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def max_Abs_Diff(arr, n): \r\n    arr.sort() \r\n    ans = abs(arr[n-1] - arr[0]) \r\n    for i in range(1, n): \r\n        ans = min(ans, abs(arr[i]-arr[i-1])) \r\n    return ans ",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ascii_value_string(string): \r\n    # Initialize ASCII sum\r\n    asci_sum = 0\r\n\r\n    # Iterate over each character and calculate its ASCII value.\r\n    for char in string:\r\n        asci_sum += ord(char)\r\n\r\n    return asci_sum ",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def max_path_sum(triangle, n, m):\r\n    dp = [[-1 for i in range(n)]for j in range(m)]\r\n    dp[0][0] = triangle[0][0]\r\n    if len(triangle)==m:\r\n        ans = triangle[len(triangle)-1][len(triangle[0])-1]\r\n    else:\r\n        ans = -1\r\n    for i in range(1,n+1):\r\n        for j in range(i+1):\r\n            if j==i and i<n:\r\n                temp = dp[i-1][j-1]+triangle[i][j]\r\n                ans = max(temp,ans)\r\n                dp[i][j] = temp \r\n            elif j>0 and j<len(dp[i-1]):\r\n                temp = triangle[i][j]+dp[i-1][j-1]\r\n                ans = max(temp,ans)\r\n                dp[i][j] = temp  \r\n            elif j<1 and i>1 :\r\n                temp = triangle[i][j]+dp[i-1][j+1]\r\n                ans = max(temp,ans)\r\n                dp[i][j] = temp        \r\n    print(dp[n-1])\r\n    return ans\r\n\r",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_digits_twoparts(num):\r\n    # Get individual digits from number\r\n    num_list = [int(x) for x in str(num)]\r\n    print('individual digit',num_list)\r\n    \r\n    max_sum = 0\r\n    \r\n    # Check all possible combinations of numbers and calculate their sums.\r\n    # Add them to 'maxsum' if they have higher sum compared to current max sum.\r\n    for i in range(len(num_list)):\r\n        temp_num = int(\"\".join([str(j) for j in num_list]))\r\n        temp_sum = temp_num - num_list[i]\r\n        if temp_sum > max_sum:\r\n            max_sum = temp_sum\r\n\r\n    return max_sum",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def longest_subseq_with_diff_one(arr, n): \r\n    dp = [[-1 for i in range(n)] for j in range(n)] \r\n    result = [0] * (n - 1) \r\n  \r\n    # Calculate length of all subsequences with their index as starting point \r\n    for i in range(1, n + 1): \r\n        l = 1; \r\n        for j in range(i + 1, n + 1): \r\n            if abs((arr[i - 1] - arr[j - 1])) == 1 and dp[i - 1][j - 1] != -1: \r\n                l += dp[i - 1][j - 1] \r\n            dp[i - 1][j - 1] = l; \r\n            result[l - 1] = max(result[l - 1], i - j); \r\n\r\n    return sum(result) + 1;",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def does_Contain_B(n,a,b):  #function will take n as input and checks if it belongs to infinite sequence\r\n\tif ((a+b)%n==0):\r\n\t\treturn \"True\"\r\n\telse:\r\n\t\treturn \"False\"",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_coprime' is not defined",
      "Test 2: FAIL - name 'is_coprime' is not defined",
      "Test 3: FAIL - name 'is_coprime' is not defined"
    ],
    "generated_code": "def gcd(a,b): \r\n    if b == 0 : \r\n        return a \r\n    else : \r\n        return gcd(b,a % b) \r\n  \r",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\r\n    if len(arr) > 1:\r\n        mid = len(arr)//2\r\n        left = arr[:mid]\r\n        right = arr[mid:]\r\n\r\n        merge_sort(left)\r\n        merge_sort(right)\r\n\r\n        i = j = k = 0\r\n        \r\n        while i < len(left) and j < len(right):\r\n            if left[i] < right[j]:\r\n                arr[k] = left[i]\r\n                i += 1\r\n            else:\r\n                arr[k] = right[j]\r\n                j += 1\r\n            k += 1\r\n        \r\n        while i < len(left):\r\n            arr[k] = left[i]\r\n            i += 1\r\n            k += 1\r\n        \r\n        while j < len(right):\r\n            arr[k] = right[j]\r\n            j += 1\r\n            k += 1 \r\n    return arr\r",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parabola_vertex(a,b,c):\r\n    x = -b/(2*a)\r\n    y = a*(x**2) + b*x + c \r\n    return(x,y)",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(l,x):\r\n    return[l[i][x] for i in range(len(l))]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(num):\r\n    result = num ^ (num >> 1)\r\n    return(result)",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_int_str(test_tup):\r\n    test_tup_list = list(test_tup)\r\n    test_tup_new = []\r\n    for i in range(len(test_tup)):\r\n        temp_test_tup_list = list(test_tup[i])\r\n        test_tup_new.append(tuple(map(int, temp_test_tup_list)))\r\n    return test_tup_new",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'encode_list' is not defined",
      "Test 2: FAIL - name 'encode_list' is not defined",
      "Test 3: FAIL - name 'encode_list' is not defined"
    ],
    "generated_code": "def decode_run_length(l):\r\n    if not l:\r\n        return []\r\n\r\n    decoded = []\r\n    i = 0\r\n\r\n    while i < len(l):\r\n        char, count = l[i]\r\n        decoded.append(char * int(count))\r\n\r\n        i += 1 + (count > 1)\r\n\r\n    return decoded",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Ops(nums,k,m):\r\n    n=len(nums)\r\n    nums.sort()\r\n    i=0\r\n    j=n-1\r\n    while i<=j:\r\n        if nums[i]-nums[j]<m:\r\n            i+=1\r\n        else:\r\n            x=(nums[j]-k)//(m+1)\r\n            y=k-x*(m+1)+x*m-(m+1)*((n-j)-x)\r\n            z=abs(y-k)+z\r\n            return z\r\n    return 0",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - string index out of range",
      "Test 2: FAIL - unsupported operand type(s) for +: 'NoneType' and 'str'",
      "Test 3: FAIL - string index out of range"
    ],
    "generated_code": "def month_season(month_name,days):\r\n    months = {'January': 'winter', 'February': 'winter',\r\n              'March': 'spring', 'April': 'spring',\r\n              'May': 'spring', 'June': 'summer',\r\n              'July': 'summer', 'August': 'summer',\r\n              'September': 'fall', 'October': 'fall',\r\n              'November': 'fall', 'December': 'winter'}\r\n    return months.get(month_name.lower(), None) + str(days)[-2] == '6'\r\n \r",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def solution(a,b,n):  # Solution Function\r\n    if a == b:\r\n        return \"No solution\"\r\n    elif a < b:\r\n        m = b/a\r\n        if int(m) * m == b:\r\n            r = ((n-b)/a)\r\n            q = (n-b)%a\r\n            if r > 0 and q <= 0:\r\n                x = (m*r)+(q+b)*(-b)\r\n                y = (-b*q)\r\n                s = str(x)+', '+str(y)\r\n            else:\r\n                return(\"Solution doesn't exist\")\r\n        else:\r\n            return (\"Solution doesn't exist\")\r\n    elif a > b:\r\n        c = n/b-a*int(n/b)\r\n        d = ((c - int(c)) / (a - int(b)))\r\n        if d != 0:\r\n            k = int(n/d) - int(d*b)\r\n            l = int((k+d*(a-int(d))))/b\r\n            m = int((k+1)-d*(a-(int(k+d*(a-int(d))))) ) % b\r\n            s = str(int(l))+','+str(m)\r\n        else:\r\n            return('Solution doesn\\'t exist')\r\n        if int(s[1]) > 9 :\r\n            t = s[1]\r\n            e = int(t) - 9 \r\n            p = str(e)\r\n            q = str(t) + p \r\n            s = s.replace(q,'p')\r\n        return s\r\n\r",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(list_1, list_2):\r\n    return [i for i in list_1 if i not in list_2]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_series(n):\r\n    total=0\r\n    while n>=0:\r\n        if n%2==0:\r\n            total+=n\r\n        else:\r\n            total-=n\r\n        n=n-2\r\n    return total",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def area_polygon(n,s):\r\n    return ((n * pow(s , 2)) / (4 * math.tan(math.pi/n)))",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def areEquivalent(x,y): \r\n    if x == y : \r\n        return True\r\n    elif (sum(list(map(int,list(str(x))))))==(sum(list(map(int,list(str(y)))))):\r\n        return True \r\n    else :\r\n        return False",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_char_position(test_str):\r\n    dict = {chr(97+i):i for i in range(26)}\r\n    output=0\r\n    for letter in test_str:\r\n        if 'a'<=letter<='z':\r\n            output+=dict[letter]\r\n        elif 'A'<=letter<='Z':\r\n            output+=(ord(letter)-ord('A')-1)\r\n        else:\r\n            continue\r\n    return(output)",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_even_Pair(a,b):\r\n    c = []\r\n    for i in range(0,len(a)):\r\n        if((a[i] & b)==b):\r\n            c.append(b)\r\n        else:\r\n            c.append((b-a[i]))\r\n            \r\n    print(c)\r\n    d = [c.count(i) for i in set(c)]\r\n    return(sum(d))",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def next_Power_Of_2(n):\r\n  if n <= 0:\r\n    return 1\r\n  while n % 2 == 0:\r\n    n = n // 2\r\n  return n*2",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr,num):\r\n    count = 0\r\n    for i in range(len(arr)):\r\n        if arr[i] == num:\r\n            count += 1\r\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pell(n):\r\n    if n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 2\r\n    else:\r\n        return get_pell(n-1)+get_pell(n-2)*2",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_range_list(numbers ,start,end):\r\n    total=0\r\n    for i in range(start-1,end):\r\n        total+=numbers[i]\r\n    return total ",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_pentagon(length):\r\n    return length*5",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - string index out of range"
    ],
    "generated_code": "def count_occurance(string):\r\n    str = string.split()\r\n    result_list = []\r\n    for i in range(len(str)):\r\n        temp_list = []\r\n        word = str[i]\r\n        for j in range(len(word)):\r\n            if ((word[j] == \"t\" and word[j + 1] == \"r\") or\r\n                (word[j] == \"a\" and word[j + 1] == \"m\")):\r\n                temp_list.append(word)\r\n                # print(word) \r\n        result_list.extend(temp_list)\r\n        \r\n    return len(result_list) - 1  # subtracting 1 as we counted duplicate instances in our final list, hence it needs to be deducted. ",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def remove_splchar(s):\r\n  return ''.join(re.findall(r'\\w', s))",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def group_keyvalue(listofpairs):\r\n    listofkey,value = zip(*listofpairs)\r\n    dictoflists = {}\r\n    for i in set(listofkey):\r\n        dictoflists[i] = []\r\n    for j in listofkey:\r\n        dictoflists[j].append(value[listofkey.index(j)])\r\n    return(dictoflists)",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def is_valid_parenthese(str_):\r\n    return bool(re.match(r\"^(?:\\[[^\\[\\]]*\\]|\\{\\[{}\\]\\})*$\", str_))",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_triangle(side1,side2, side3):\r\n    return int(side1+side2+side3)",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'gcd' is not defined",
      "Test 2: FAIL - name 'gcd' is not defined",
      "Test 3: FAIL - name 'gcd' is not defined"
    ],
    "generated_code": "def answer(a,b):\r\n    x = [a*b // g for g in list(set([gcd(i,j) for i in range(a+1,b)]))]\r\n    res = max(x)\r\n    return tuple(map(lambda y: a if (res % y ==0 and y != res) else y,x))",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_literals(test_list,test_string):\r\n    if test_string.find(\" \".join(test_list)) != -1:\r\n        return 'Matched!'\r\n    else:\r\n        return 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for +=: 'int' and 'str'",
      "Test 2: FAIL - unsupported operand type(s) for +=: 'int' and 'str'",
      "Test 3: FAIL - unsupported operand type(s) for +=: 'int' and 'str'"
    ],
    "generated_code": "def is_num_keith(num):\r\n    def generate_sums(number):\r\n        s = []\r\n        for i in range(len(str(number)) + 1):\r\n            temp_number = number\r\n            for j in range(i):\r\n                temp_number //= 10\r\n            for j in range(i, len(str(number)) + 1):\r\n                temp_number *= 10\r\n                temp_number += str(number)[j]\r\n            if int(temp_number) != 0:\r\n                yield int(temp_number)\r\n            else:\r\n                break\r\n        while True:\r\n            num1 = sum(generate_sums(number))\r\n            yield num1\r\n\r\n    k = set([num])\r\n    while True:\r\n        new_k = set()\r\n        for n in list(k):\r\n            if n > 1 and sum(generate_sums(n)) == 1:\r\n                return True\r\n            elif n <= 1:\r\n                continue\r\n            elif sum(generate_sums(n)) > 1:\r\n                new_k.add(sum(generate_sums(n)))\r\n        k = new_k\r\n        if len(new_k) == 0:\r\n            return False",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def distance_lat_long(lat1,longt1,lat2,longt2):\r\n  dLat = (lat2-lat1)*math.pi/180;\r\n  dLong = (longt2-longt1)*math.pi/180; \r\n  a=math.sin(dLat/2) * math.sin(dLat/2)+ math.cos(math.pi/180*(lat1)) * math.cos(math.pi/180*(lat2))*math.sin(dLong/2) * math.sin(dLong/2); \r\n  c=2*math.atan2(math.sqrt(a),math.sqrt(1-a)); \r\n  return round(c*6371);",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - common_prefix() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - common_prefix() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - common_prefix() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def common_prefix(strs):\r\n    res = list(starmap(lambda x,y: ''.join(x[:len(y)]), enumerate(strs)))\r\n    return reduce(lambda x, y: ''.join([a for i,a in enumerate(x+y) if not (i<len(x) and a==y[i])]), strs) if len(set(res)) == 1 else ''",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'find_character' is not defined",
      "Test 2: FAIL - name 'find_character' is not defined",
      "Test 3: FAIL - name 'find_character' is not defined"
    ],
    "generated_code": "def find_characters(text):\r\n    upper=lower=special=numeric=[]\r\n    #regex for each type of characters\r\n    upper=re.findall(\"[A-Z]\", text)\r\n    lower=re.findall(\"[a-z]\", text)\r\n    special=re.findall(\"[!@#$%^&*()]\", text)\r\n    numeric=re.findall(\"[0-9]\", text)\r\n    #returning all results in list\r\n    return(upper,lower,special,numeric)",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_pairs(arr, k, n): \r\n    count = 0\r\n    i, j = 0, 1\r\n  \r\n    # Run while end of the first loop hasn't reached \r\n    # end of the second loop. \r\n    while (j < n and i < n - 1):\r\n        if ((arr[j] - arr[i]) == k):\r\n            count += 1\r\n            i = j + 1\r\n        elif ((arr[j] - arr[i]) > k):\r\n            i += 1\r\n        else:\r\n            j += 1\r\n  \r\n    # Add remaining elements one by one \r\n    while (i < n - 1): \r\n        if (count >= 0): \r\n            break\r\n        i += 1\r\n        count -= 1\r\n  \r\n    # Add remaining elements one by one \r\n    while (j < n): \r\n        if (count >= 0): \r\n            break\r\n        j += 1\r\n        count += 1\r\n        \r\n    return count \r\n   # Driver Code \r",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def greater_specificnum(lst,num):\r\n  return all(num<item for item in lst)",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_focus(a,b,c):\r\n  return((-b)/(a*2),-c/(a))",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def check_literals(text,literals):\r\n  for literal in literals:\r\n    if re.search(literal,text,re.IGNORECASE): #re.IGNORECASE is used to ignore case sensitivity.\r\n      return f'Matched!'\r\n  return 'Not Matched!'\r\n\r",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - longest_common_subsequence() takes 2 positional arguments but 4 were given",
      "Test 2: FAIL - longest_common_subsequence() takes 2 positional arguments but 4 were given",
      "Test 3: FAIL - longest_common_subsequence() takes 2 positional arguments but 4 were given"
    ],
    "generated_code": "def longest_common_subsequence(s1, s2):\r\n    n,m=len(s1),len(s2)\r\n    dp=[[0 for x in range(m+1)]for x in range(n+1)]\r\n    result=0\r\n    # Filling up the table in bottom-up manner \r\n    for i in range(1,n+1): \r\n        for j in range(1,m+1): \r\n            if s1[i-1]==s2[j-1]: \r\n                dp[i][j]=1+dp[i-1][j-1] \r\n                result=max(result,dp[i][j]) \r\n            else: \r\n                dp[i][j]=max(dp[i][j-1],dp[i-1][j])\r\n                \r\n    print(dp)\r\n    return result",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def prod_Square(n): \r\n    i = 1\r\n    while(i * i <= n): \r\n        if ((n % i == 0) and (i*i != n)): \r\n            j = int(n/i) \r\n            if (j*j != n): \r\n                return False\r\n        i += 1\r\n    return True",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def first_Missing_Positive(nums):\r\n    nums = list(set(nums))\r\n    if len(nums) == 0:\r\n        return 1\r\n    else:\r\n        for i in range(1,len(nums)+2):\r\n            if i not in nums:\r\n                return i\r\n    return None",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Intgral_Points(a,b,c,d):\r\n  n = c - a + 1\r\n  m = d - b + 1\r\n  if (n == 1 and m == 1): \r\n        return 1;\r\n  else:  \r\n        return int(n * m / 2);",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_monthnumber' is not defined",
      "Test 2: FAIL - name 'check_monthnumber' is not defined",
      "Test 3: FAIL - name 'check_monthnumber' is not defined"
    ],
    "generated_code": "def check_monthname(month_name):\r\n    if (month_name == \"April\" or month_name == \"June\" or\r\n            month_name == \"September\" or month_name == \"November\"):\r\n        return False\r\n    else:\r\n        return True",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_String' is not defined",
      "Test 2: FAIL - name 'check_String' is not defined",
      "Test 3: FAIL - name 'check_String' is not defined"
    ],
    "generated_code": "def check_string(string): \r\n    flag = 0\r\n    for i in range(0, len(string)): \r\n        if (ord(string[i]) >= 48 and ord(string[i]) <= 57): \r\n            flag = 1\r\n        elif(ord(string[i]) >= 65 and ord(string[i]) <= 90) or (ord(string[i]) >= 97 and ord(string[i]) <= 122):\r\n            flag = 1\r\n    if(flag == 1): \r\n        return True\r\n    else:\r\n        return False ",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'remove_tuple' is not defined",
      "Test 2: FAIL - name 'remove_tuple' is not defined",
      "Test 3: FAIL - name 'remove_tuple' is not defined"
    ],
    "generated_code": "def remove_duplicates(x):\r\n    unique = []\r\n    for i in x:\r\n        if i not in unique:\r\n            unique.append(i)\r\n    return tuple(unique)",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def octal_To_Decimal(n):\r\n    decimal = int(str(n),8)\r\n    return(decimal)",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first(A,n,x): \r\n    # Base case \r\n    if n == 0 : \r\n        return -1\r\n\r\n    # If current element is x, then return index\r\n    elif A[n-1] == x : \r\n        return n-1\r\n    \r\n    # Recur for remaining elements \r\n    else:\r\n        i = first(A[n-1:],n-1,x) \r\n\r\n        # Check if found earlier\r\n        if(i >= 0):\r\n            return i\r\n        \r\n        # Return index of first occurrence\r\n        return -1 if i < 0 else i + 1",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_tuples(tuples_list,k):\r\n    for i in range(k):\r\n        try:\r\n            tuples_list.remove((0))\r\n        except:\r\n            continue\r\n    return tuples_list",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_exponentio(tup1, tup2):\r\n    l = []\r\n    for i in range(len(tup1)):\r\n        l.append(tup1[i] ** tup2[i])\r\n    return tuple(l)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def area(a,b):\r\n    return math.sqrt((a**2)*(b**2)/(a+b))\r\ndef largest_triangle(a,b):\r\n    c=area(math.log(a),math.log(b))\r\n    d=(c**(2/3))*(((a*b)**2)/4)\r\n    e=math.atan(d/a)\r\n    f=c*d*e\r\n    g=f/(d+d+a)\r\n    h=area(g,a)\r\n    i=h/g\r\n    j=i*(a**2)\r\n    k=j/math.sqrt(i*i+1)\r\n    l=k*j\r\n    m=l/k\r\n    n=m*k\r\n    o=area(n,j)\r\n    p=math.pow(k,3)\r\n    q=p/3\r\n    r=q+p-n\r\n    s=r/2\r\n    t=s*r\r\n    u=t/s\r\n    v=u*s\r\n    w=v/u\r\n    x=w/v\r\n    y=x+w\r\n    z=y+x\r\n    print(z)",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'highest_Power_of_2' is not defined",
      "Test 2: FAIL - name 'highest_Power_of_2' is not defined",
      "Test 3: FAIL - name 'highest_Power_of_2' is not defined"
    ],
    "generated_code": "def highest_power_of_2(n):\r\n    i = 0\r\n    while n > 0:\r\n        if ((n & (n-1)) == 0):  # checks if n is a power of 2 \r\n            break;\r\n        else:   \r\n            i += 1\r\n            n = n >> 1    \r\n    return int(2 ** i)",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def position_max(L):\r\n  m=-1\r\n  r=[]\r\n  for i in range(len(L)):\r\n    if L[i]>m:\r\n      m=L[i]\r\n      c=i+1\r\n  return c-1 ",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(list): \r\n\tif len(set(list)) == 1: \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_even(test_string): \r\n\tresult = \"\" \r\n\tfor char in test_string: \r\n\t\tif ord(char) % 2 == 0: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\tresult += char \r\n\treturn result \r\n\r",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hamming_Distance(x,y):\r\n    count = 0\r\n    for i in range(0,32):\r\n        if((x>>i)&1) != ((y>>i)&1):\r\n            count += 1\r\n    return count",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(s,t):\r\n    cnt = s.count(t)\r\n    return(cnt)",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def inversion_elements(lst):\r\n    result = []\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst)):\r\n            if lst[i] > lst[j]:\r\n                result.append(lst[j] - lst[i])\r\n    return tuple(result)",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tup):\r\n    result = ()\r\n    for i in range(len(tup)):\r\n        if i % 2 == 0:\r\n            temp = str(tup[i]) + ' '\r\n        else:\r\n            temp = str(tup[i])\r\n        result += (temp,)\r\n    return result[:-1]  # remove trailing space after last word.",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_longest_repeating_subseq(s):\r\n    n = len(s)\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n    max_len = 0\r\n\r\n    for gap in range(1,n+1):\r\n        i = 0\r\n        while i < n-gap + 1:\r\n            if s[i] == s[i+gap-1]:\r\n                if gap == 1:\r\n                    dp[i][i+gap-1] = 1\r\n                else:\r\n                    dp[i][i+gap-1] = 1 + dp[i+1][i+gap-2]\r\n                max_len = max(max_len ,dp[i][i+gap-1])\r\n            i += 1\r\n    return max_len - 1;",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def is_decimal(s):\r\n    # Regular expression to match if string s contains exactly two digits after decimal point and no other digits.\r\n    pattern = r'^(?!.*\\.)(\\d)\\.(?=.*?\\.)(\\d)\\.$'\r\n    return bool(re.match(pattern, s))",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def heap_replace(heap, item):\r\n    heap.append(item)\r\n    i=len(heap)-1\r\n    j=int((i-1)/2)\r\n    while(j>=0)and(heap[j]>heap[i]):\r\n        t=heap[j]\r\n        heap[j]=heap[i]\r\n        heap[i]=t\r\n        i=j\r\n        j=int((j-1)/2)\r\n\r\n    return heap[:]",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def is_allowed_specific_char(string):\r\n    # Use regex to match the allowed characters in the string.\r\n    if(re.search(r'^[a-zA-Z0-9]+$',string)):\r\n        return True\r\n    else:\r\n        return False",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Num(n):\r\n    cnt = 0\r\n    for i in range(1,n+1):\r\n        if ((i & n )== n): \r\n            cnt += 1\r\n    return cnt",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\r\n    Sum = 0\r\n    for i in range(1,n+1):\r\n        Sum += i ** 4 \r\n    return Sum ",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_strings(str_tuple1,str_tuple2):\r\n    result = str_tuple1+str_tuple2\r\n    return(result)",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def degree_radian(x):\r\n    y = x*180/float(math.pi)\r\n    return(y)",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'list' object cannot be interpreted as an integer",
      "Test 2: FAIL - 'str' object cannot be interpreted as an integer",
      "Test 3: FAIL - 'str' object cannot be interpreted as an integer"
    ],
    "generated_code": "def decode_list(lst):\r\n    output = []\r\n    for i in range(0, len(lst), 2):\r\n        num = lst[i]\r\n        ch = str(lst[i + 1])\r\n        for j in range(num):\r\n            output.append(ch)\r\n    return \"\".join(output)",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_subset_list(list_1, list_2):\r\n  return all(element in list_1 for element in list_2)",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Repeated_Char(s):\r\n  char_map = {}\r\n  for i in s:\r\n    if i not in char_map:\r\n      char_map[i] = 1\r\n    else:\r\n      return(i)",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_Operations(x,y): \r\n    z = abs(x-y)\r\n    if x < y:\r\n        while(z>0):\r\n            z = z - 2\r\n    else:\r\n        while(z>0):\r\n            z = z-2\r\n    \r\n    if (z == 0):\r\n        return ((x+y)//2)\r\n    else:\r\n        return ((x+y)//2 + 1)",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_min_max(arr : list, k : int) -> list:\r\n    maxs = sorted(arr)[-k:]\r\n    mins = sorted(arr)[:k]\r\n    return list(mins + maxs)",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def replace_max_specialchar(s,n):\r\n    return(re.sub(\"[,.]\",\":\",s,n))",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(lst): \r\n    for i in lst:\r\n        if(i % 2 == 0):\r\n            return i\r",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_type(lst):\r\n    s = set()\r\n    for x in lst:\r\n        if type(x) != int and type(x) != float:\r\n            return False\r\n        else:\r\n            s.add(type(x))\r\n    return len(s) == 1 ",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_majority(nums, n, k):\r\n    count = 0\r\n    max_count = 0\r\n\r\n    for i in range(n):\r\n\r\n        if nums[i] == k:\r\n            count += 1\r\n\r\n            if count > max_count:\r\n                max_count = count\r\n            elif count < 0:\r\n                count = 0\r\n\r\n    return count >= (n // 2)",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Set_Bits' is not defined",
      "Test 2: FAIL - name 'count_Set_Bits' is not defined",
      "Test 3: FAIL - name 'count_Set_Bits' is not defined"
    ],
    "generated_code": "def count_set_bits(n):\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return (n & 1) + count_set_bits(n >> 1)",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Min(a,b,e):\r\n    if b >= e:\r\n        return a[b]\r\n    mid = int((b+e)/2)\r\n    if a[mid] < a[mid-1]:\r\n        return a[mid]\r\n    elif a[mid] > a[e-1]:\r\n        return min(find_Min(a,b,mid),find_Min(a,mid+1,e))\r\n    else:\r\n        return min(find_Min(a,b,mid),find_Min(a,mid+1,e))",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(str):\r\n   res = \"\"\r\n   for i in range(len(str)):\r\n       if i % 2 == 0:\r\n           res = res + str[i]\r\n   return(res)",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(x,y,z):\r\n    if x<=y and x<=z:\r\n        return x\r\n    elif y<=x and y<=z:\r\n        return y\r\n    else:\r\n        return z",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'all_Bits_Set_In_The_Given_Range' is not defined",
      "Test 2: FAIL - name 'all_Bits_Set_In_The_Given_Range' is not defined",
      "Test 3: FAIL - name 'all_Bits_Set_In_The_Given_Range' is not defined"
    ],
    "generated_code": "def is_all_bits_unset(start,end):\r\n    while(end>0 and end<=start):\r\n        if((end%2==1)):\r\n            return False\r\n        else:\r\n            end=int(end/2)\r\n    return True",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_arrange_array(arr, n):\r\n    neg = []\r\n    pos = []\r\n    for i in range(0, n):\r\n        if arr[i] < 0:\r\n            neg.append(arr[i])\r\n        else:\r\n            pos.append(arr[i])\r\n\r\n    result = neg + pos\r\n    return(result)",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(s,char):\r\n    newstr = \"\"\r\n    for c in s:\r\n        if c == \" \":  \r\n            newstr += char\r\n        else: \r\n            newstr += c\r\n\r\n    return newstr;",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'list'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'list'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'list'"
    ],
    "generated_code": "def max_sum(arr,n):\r\n    for i in range(1, n):\r\n        arr[i] = arr[i] + max(arr[i - 1], 0)\r\n    return max(arr[:n])",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def larg_nnum(list_1,n):\r\n    return sorted(list_1,reverse=True)[:n]",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def lateralsuface_cylinder(h,r):\r\n    return 2* math.pi*r*h",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(x): \r\n\treturn x * x * x",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_set_number(n): \r\n    for i in range(len(bin(n)) - 2): \r\n        if (n & 1 << i): \r\n            n = n ^ 1 << i; \r\n    return n;",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - maximum recursion depth exceeded in comparison",
      "Test 2: FAIL - maximum recursion depth exceeded in comparison",
      "Test 3: FAIL - maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def No_of_Triangle(n, k):\r\n    if(k == n + 1): \r\n        return 0\r\n  \r\n    ans = 0\r\n    for i in range(k):   \r\n        x = No_of_Triangle(n-1-i,k-i)\r\n        y = No_of_Triangle(i,n-k+i)\r\n        z = No_of_Triangle(n-k,i+k)\r\n        # print(x,y,z)\r\n        ans += x * y * z\r\n    return ans\r\n \r\n\r",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_occurences(test):\r\n    count = {}\r\n    for i in test:\r\n        if (i[0], i[1]) not in count.keys():\r\n            count[i] = 1\r\n        else:\r\n            count[(i[0], i[1])] += 1\r\n    ans = {k : v for k, v in sorted(count.items(), key=lambda item:item[1], reverse=True)}\r\n    return(ans)",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def number_of_substrings(s): \r\n    n = len(s) \r\n    ans = n * (n + 1)//2 \r\n    for i in range(n - 1): \r\n        if s[i] != s[i + 1]: \r\n            ans += (n - i) \r\n    return ans ",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_total_number_of_sequences(n, m):\r\n    if m <= 1:\r\n        return 0\r\n    res = 1\r\n    for i in range(m-1,n+1):\r\n        if i >= 2 and (i - 2 > 0):\r\n            res *= (n-i+1)\r\n    return res/2",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'replace_list' is not defined",
      "Test 2: FAIL - name 'replace_list' is not defined",
      "Test 3: FAIL - name 'replace_list' is not defined"
    ],
    "generated_code": "def replace_last_element(input_list, replacement):\r\n    input_list.append(replacement)\r\n    return input_list[-2:]",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def array_3d(nrow,ncol,nclm):\r\n    return([[['*' for j in range(ncol)]for i in range(nclm)]for k in range(nrow)])",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(x): \r\n    return len(x)",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - '<' not supported between instances of 'str' and 'int'"
    ],
    "generated_code": "def sort_on_occurence(lst):\r\n    temp = []\r\n    for x in lst:\r\n        for y in range(0,len(x)):\r\n            temp.append([x[y],x[0]])\r\n    return sorted(temp)",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def next_Perfect_Square(n):\r\n    if n < 0:\r\n        raise ValueError(\"n must be non-negative.\")\r\n    i = int(n**0.5)\r\n    while True:\r\n        i += 1\r\n        if i * i > n:\r\n            break\r\n    return i * i",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum(arr, n):\r\n    left = [0]*n\r\n    right = [0]*n\r\n \r\n    # Fill the left side array\r\n    left[0] = arr[0]\r\n    for i in range(1, n):\r\n        left[i] = max(left[i-1], arr[i])\r\n \r\n    # Fill the right side array\r\n    right[n-1] = arr[n-1]\r\n    for i in reversed(range(n-1)):\r\n        if right[i+1] < right[i]:\r\n            right[i] = right[i+1]\r\n        else:\r\n            right[i] = right[i + 1] - 1\r\n \r\n    total = -float(\"inf\")\r\n    for i in range(n):\r\n        temp = left[i] + right[i] + arr[i]\r\n        if temp > total:\r\n            total = temp\r\n \r\n    return total",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def babylonian_squareroot(num):\r\n    if num == 0:\r\n        return \"The input number must be greater than zero.\"\r\n    x = float(input(\"Enter a positive integer:\"))\r\n    guess = x / 2.0\r\n    epsilon = 0.0000001\r\n    while abs(guess * guess - x) >= epsilon:\r\n        guess = (guess + x/guess)/2.0\r\n    return \"%.5f\" % guess",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lps(str):\r\n    n = len(str)\r\n    dp = [[0 for x in range(n+1)] for y in range(n+1)]\r\n \r\n    # Strings of length 1 are palindrome of length 1\r\n    for i in range(n + 1):\r\n        dp[i][i] = 1\r\n \r\n    # Build the table. Note that the lower diagonal values of table are useless and hence not filled in.\r\n    for cln in range(2,n+1):\r\n        for i in range(n-cln+1):\r\n            j = i + cln - 1\r\n            if str[i] == str[j] and cln == 2:\r\n                dp[i][j] = 2\r\n            elif str[i] == str[j]:\r\n                dp[i][j] = dp[i+1][j-1] + 2\r\n            else:\r\n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\r\n \r\n    return dp[0][n-1]",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def harmonic_sum(n): \r\n    result = 0\r\n    for i in range(1,n+1):\r\n        result += 1/i\r\n    return result",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def intersection_array(arr1,arr2):\r\n    return list(set(arr1) & set(arr2))",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(t, X):\r\n    count = 0\r\n    for x in t:\r\n        if x == X:\r\n            count += 1\r\n    return count",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def insert_element(list , x):  return [x]+list  #inserts x in front of every item in the input list[list]",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'cmath' is not defined",
      "Test 2: FAIL - name 'cmath' is not defined",
      "Test 3: FAIL - name 'cmath' is not defined"
    ],
    "generated_code": "def convert(x):\r\n   y = abs(x)\r\n   z = cmath.phase(x)\r\n   return (y,z)",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(list):\r\n    counter = 0\r\n    for i in range(0,len(list)):\r\n        if isinstance(list[i],int) == True:\r\n            counter += 1\r\n    return(counter)",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def words_ae(text):\r\n    # Define regex pattern to match word starting with 'a' or 'e'\r\n    patt = r'\\b[a,e]+\\w+'\r\n    res = re.findall(patt,text)\r\n    return(res)",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'itertools' is not defined",
      "Test 2: FAIL - name 'itertools' is not defined",
      "Test 3: FAIL - name 'itertools' is not defined"
    ],
    "generated_code": "def combinations_colors(colours,n):\r\n    return list(itertools.combinations_with_replacement(colours, n))",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_prime(n):\r\n    if n == 1:\r\n        return False\r\n    for i in range(2,n):\r\n        if n % i == 0:\r\n            return False\r\n    else:\r\n        return True\r\n\r\ndef count_Primes_nums(x):\r\n    num = 0\r\n    for i in range(2,x+1):\r\n        if(is_prime(i)):\r\n            num+=1\r\n    return num",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(a,b):\r\n    temp=a\r\n    a=b\r\n    b=temp\r\n    return (a,b)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_odd(list_):\r\n  return sum(map(lambda x : True if(x%2!=0) else False ,list_))",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for +: 'int' and 'tuple'",
      "Test 2: FAIL - unsupported operand type(s) for +: 'int' and 'tuple'",
      "Test 3: FAIL - unsupported operand type(s) for +: 'int' and 'tuple'"
    ],
    "generated_code": "def maximize_elements(tuple_a, tuple_b):\r\n    return max((tuple_a, tuple_b), key=lambda x : sum(x))",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'newman_prime' is not defined",
      "Test 2: FAIL - name 'newman_prime' is not defined",
      "Test 3: FAIL - name 'newman_prime' is not defined"
    ],
    "generated_code": "def is_prime(n):\r\n    for i in range(2,int(n**0.5)+1):\r\n        if n % i == 0:\r\n            return False\r\n    else:\r\n        return True\r\n\r\ndef get_newman_number(num):\r\n    temp = num \r\n    while not is_prime(temp):\r\n        temp += 1\r\n    #print(\"newman number\",temp)\r\n    return temp\r\n\r\ndef newman_shanks_williamson():\r\n    count = 1\r\n    x=0\r\n    y=get_newman_number(x)\r\n    print(y)\r\n\r",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def division_elements(lst1, lst2):\r\n    res = []\r\n    for i in range(len(lst1)):\r\n        if len(lst1) > len(lst2):\r\n            div = int(lst1[i] / lst2[i])\r\n            res.append(div)\r\n        else:\r\n            res.append(\"NaN\")\r\n    return tuple(res)",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_two_parts(list_input, number_of_items): \r\n    # Splitting the list\r\n    return (list_input[:number_of_items], list_input[number_of_items:]) ",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1,dict2):\r\n    return {**dict1,**dict2}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dog_age(years):\r\n    return 2*(years**2) - 30*years + 80.5",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def list_split(lst,n):\r\n    lst = [[x] if isinstance(x,list) else x for x in lst]\r\n    new_lst=[]\r\n    i=0\r\n    while len(lst)>0:\r\n        l=len(lst)\r\n        s=l%n \r\n        if s==0 and i>0:\r\n            new_lst.append([])\r\n        j=0\r\n        while j < s:\r\n            t=tuple()\r\n            try:\r\n                t += tuple(lst.pop(0))\r\n            except IndexError as e:\r\n                break\r\n            new_lst[i].append(t)\r\n            j += 1\r\n        \r\n        if n == l% n :\r\n            new_lst.append([])\r\n        i+=1\r\n    return(new_lst)",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side): \r\n    return side * side * 4",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'square_Sum' is not defined",
      "Test 2: FAIL - name 'square_Sum' is not defined",
      "Test 3: FAIL - name 'square_Sum' is not defined"
    ],
    "generated_code": "def square_sum(n): \r\n    s = 0\r\n    for i in range(1,n+1):\r\n        if(i%2!=0):\r\n            s+=i**2\r\n    return s",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_star_num(n): \r\n    result = int((3*n**2 - n)/2) \r\n    return(result)",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char): \r\n    return ord(char)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_even_and_even_index(arr,n): \r\n\tsum = 0\r\n\tfor i in range(0,n,2): \r\n\t\tif arr[i] % 2 == 0: \r\n\t\t\tsum += arr[i] \r\n\r\n\treturn(sum)",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_Power_Sum(n): \r\n    Sum = ((n * (n + 1)) // 2)**2\r\n    return (Sum ** 2 * pow(3, 5)) - (Sum**4)//9",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rear_extract(list_):\r\n  return sorted([x[2] for x in list_], reverse=True)",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tuple_a,tuple_b):\r\n    res = []\r\n    for i in range(len(tuple_a)):\r\n        res.append(tuple_a[i]-tuple_b[i])\r\n    return tuple(res)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'comb' is not defined",
      "Test 2: FAIL - name 'comb' is not defined",
      "Test 3: FAIL - name 'comb' is not defined"
    ],
    "generated_code": "def even_binomial_Coeff_Sum(n): \r\n    res = 0\r\n    for i in range(n + 1):\r\n        if i % 2 == 0:\r\n            res += comb(n, i)\r\n    return res \r\n\r",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Position(array,n,k):\r\n    l = -1\r\n    r = n-1\r\n    while(l+1 < r):\r\n        mid = (l+r)//2\r\n        if(k > array[mid]):\r\n            l = mid\r\n        else:\r\n            r = mid\r\n\r\n    return l+1;",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def volume_cylinder(radius,height): \r\n    return 3.14 * radius**2 * height",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_filter(my_dict, num): \r\n    return {k:v for k,v in my_dict.items() if v>=num}",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_first_elements(t):\r\n    first_element = t[0]\r\n    if isinstance(first_element, tuple):\r\n        first_element = len(first_element)\r\n    else:\r\n        first_element -= 1\r\n    return first_element",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_num_decagonal(n):\r\n    if n<1:\r\n        return False\r\n    return int(((5*n**2 - n)/2)) ",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - sequential_search() missing 1 required positional argument: 'x'",
      "Test 2: FAIL - sequential_search() missing 1 required positional argument: 'x'",
      "Test 3: FAIL - sequential_search() missing 1 required positional argument: 'x'"
    ],
    "generated_code": "def sequential_search(array,n,x): \r\n    for i in range(0, n):         \r\n        if (array[i] == x): \r\n            return True,i\r\n    return False,-1 \r\n  \r",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_unique(l):\r\n    s = set()\r\n    for i in l:\r\n        if i in s:\r\n            return False\r\n        else:\r\n            s.add(i)\r\n    return True",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sub_list(list1,list2):\r\n    result = []\r\n    for i in range(len(list1)):\r\n        res = list(map(lambda x,y:x-y ,list1[i],list2[i]))\r\n        result.append(res)\r\n    return result\r",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def validate(number):\r\n    num=str(number)\r\n    l=list(num)\r\n    for i in range(len(l)):\r\n        if int(l[i])>int(l.count(str(l[i]))):\r\n            return False\r\n    else:\r\n        return True",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(liste , x):\r\n    if len(set(liste)) == 1:\r\n        return True\r\n    else:\r\n        return False",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_match_two_three(text):\r\n    if re.search(r'^a.b{2,3}$', text) is None:\r\n        return ('Not matched!')\r\n    else:\r\n        return ('Found a match!')",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sub_array_sum_repeated(arr, n, k): \r\n    m = len(arr) \r\n      \r\n    # Create an empty dp table and initialize all entries as 0\r\n    dp = [[0 for x in range(k + 1)] for y in range(m+1)]\r\n  \r\n    # Initialize first row of dp[][] with prefix sums of arr[] itself\r\n    for i in range(0, m): \r\n        dp[i][1] = arr[i] \r\n  \r\n    # Build rest of Dp Table in bottom up manner\r\n    for j in range(2, k + 1):\r\n        for i in range(j): \r\n            if(dp[i][j-1] > dp[i-1][j-1]): \r\n                dp[i][j] = dp[i][j-1]\r\n            else: \r\n                dp[i][j] = dp[i-1][j-1] + arr[i] \r\n\r\n    # Return maximum element from last column of dp[]\r\n    return max(dp[j][k] for j in range(0, m))",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def square_Sum(n): \r\n\treturn (n * (n + 1) / 2) ** 2 * 4\r",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'modular_inverse' is not defined",
      "Test 2: FAIL - name 'modular_inverse' is not defined",
      "Test 3: FAIL - name 'modular_inverse' is not defined"
    ],
    "generated_code": "def modInverse(x, p):\r\n   # x is supposed to be non-zero\r\n   if(x == 0):\r\n      raise Exception(\"x can't be zero in modInverse()\")\r\n \r\n   res = -1\r\n   inv = pow(x, p-2, p)\r\n \r\n   # If x and p are co-prime then res will give result of x^-1 % p\r\n   # else raise exception.\r\n   if(res == inv):\r\n       return res\r\n   else:\r\n       raise Exception('modInverse does not exist')\r\n   \r",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Days(year):\r\n   # Initialize variables\r\n   day = 0\r\n   odd_day=0\r\n\r\n   for i in range(1,year+1): \r\n      if(i%4==0 and i%100!=0): \r\n         day += 366  \r\n      else:\r\n         day += 365   \r\n\r\n   # Calculate odd days   \r\n   while(day>0): \r\n      if((day-2)%7>=3): \r\n         odd_day+=1 \r\n         \r\n      day = int((day - 2)/7) \r\n\r\n   return odd_day",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_length(l):\r\n    return (len(max(l,key=len)),max(l,key=len))",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_no_of_ways(n, k): \r\n    dp = [0] * (n + 1)\r\n    dp[0] = 1\r\n    dp[1] = k\r\n    \r\n    for i in range(2, n + 1):\r\n        dp[i] = (dp[i - 1] * k) + (k - 1) * (i - 1)\r\n    \r\n    return int(dp[n])% 1000000007 ",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find(dividend,divisor): \r\n   if divisor==0:\r\n      raise Exception(\"Invalid operation\")\r\n   elif (dividend == divisor):\r\n       return dividend\r\n   else:\r\n       temp = dividend - divisor;    \r\n   while temp >= divisor :  \r\n        temp = temp-divisor;   \r\n   return temp+1;",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def otherside_rightangle(a,b):\r\n return round(math.sqrt((a*a)+(b*b)),2)",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def max_val(L): \r\n    x = L[0] \r\n  \r\n    for i in range(1,len(L)): \r\n        if L[i]>x: \r\n            x = L[i]\r\n    return x ",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_div(n):\r\n    s=0\r\n    for i in range(1,n+1):\r\n        if n%i==0:\r\n            s+=i\r\n    return(s)",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'get_Inv_Count' is not defined",
      "Test 2: FAIL - name 'get_Inv_Count' is not defined",
      "Test 3: FAIL - name 'get_Inv_Count' is not defined"
    ],
    "generated_code": "def merge_sort(arr):\r\n    if len(arr) <= 1:\r\n        return arr\r\n\r\n    mid = len(arr) // 2\r\n    left_half = merge_sort(arr[:mid])\r\n    right_half = merge_sort(arr[mid:])\r\n\r\n    i, j = 0, 0\r\n    result = []\r\n    while i < len(left_half) and j < len(right_half):\r\n        if left_half[i] > right_half[j]:\r\n            result.append(right_half[j])\r\n            j += 1\r\n        else:\r\n            result.append(left_half[i])\r\n            i += 1\r\n    result.extend(left_half[i:])\r\n    result.extend(right_half[j:])\r\n\r\n    return result\r\n\r\ndef get_Inversions(A): \r\n    N = len(A)\r\n    inv_count = 0\r\n\r\n    # Perform merge sort on every element of input array\r\n    for i in range(1,N):\r\n        temp = A[::]\r\n        for k in range(len(temp)):\r\n            start_index = max(0,k-i)\r\n            end_index = min(k,i-1)\r\n            if(end_index >= start_index):\r\n                m = int((start_index+end_index)/2)\r\n                merge_sort(A[start_index:end_index+1])\r\n\r\n\r\n    for i in range(N-1):\r\n        for j in range(i + 1, N):\r\n            if A[i] > A[j]:\r\n                inv_count += 1\r\n    \r\n    return inv_count\r",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_list(x):\r\n    y=[]\r\n    for i in x:\r\n        if isinstance(i,list):\r\n            for j in i:\r\n                y.append(j)\r\n        else:\r\n            y.append(i) \r\n    return(y)",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def intersection_nested_lists(list1,list2):\r\n    result = []\r\n    for i in range(len(list1)):\r\n        if type(list1[i]) is list:\r\n            flag=0\r\n            for j in range(len(list2)):\r\n                if type(list2[j]) is list:\r\n                    for k in range(len(list2[j])):\r\n                        if list2[j][k] == list1[i]:\r\n                            flag+=1\r\n                            break\r\n                else:\r\n                    if list2[j] == list1[i]:\r\n                        flag += 1\r\n                        break\r\n            if flag > 0 :\r\n                result.append(list1[i])\r\n    return result\r\n\r",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_aggregate(lst):\r\n    return sorted(lst, key = lambda x: -x[1])[0]",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_binary_seq' is not defined",
      "Test 2: FAIL - name 'count_binary_seq' is not defined",
      "Test 3: FAIL - name 'count_binary_seq' is not defined"
    ],
    "generated_code": "def count(n):\r\n    if n == 0:\r\n        return 1\r\n    elif n % 2 != 0:\r\n        return -sys.maxsize\r\n    else:\r\n        result = count(n // 2) * ((4 ** n - 2) / (3 ** (n + 1)))\r\n        return result\r\n\r\ndef main():\r\n    n = int(input())\r\n    print(count(n))\r\n\r",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dict_depth(d):\r\n    return max([dict_depth(x) for x in d.values()], default=0) + 1 if type(d) is dict else 1",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_Bit_Number(num):\r\n    if num == 0:\r\n        return 0\r\n    else:\r\n        return int((num & -num).bit_length())-1",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - solve() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - solve() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - solve() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def solve(nums):\r\n    if len(nums)==3:\r\n        return nums[0] + nums[1] == nums[2]\r\n    else:\r\n        n = len(nums)\r\n        temp=sorted(nums)\r\n        c1,c2,count=0,0,0\r\n        for i in range(1,n):\r\n            if nums[i-1]<nums[i]:\r\n                count+=1\r\n            elif temp[i]<=temp[i-1]:\r\n                c1 +=count;count=c2=0\r\n            elif temp[i]>temp[i-1]:\r\n                c2 +=count;count=0 \r\n            #print(i,temp,i-temp[i])\r\n        return c1==c2",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'find_Element' is not defined",
      "Test 2: FAIL - name 'find_Element' is not defined",
      "Test 3: FAIL - name 'find_Element' is not defined"
    ],
    "generated_code": "def find_element(arr,lst,n):\r\n    k=len(lst)\r\n    for i in range(k):\r\n        if lst[i][0]==n:\r\n            p=lst[i][1]\r\n        elif lst[i][1]==n:\r\n            q=lst[i][0]\r\n    l=p\r\n    h=q-1\r\n    m=(l+h)//2\r\n    while (l<=h and m>=0):\r\n        if arr[m]==n:\r\n            return m+1\r\n        else:\r\n            if arr[m]>n:\r\n                h=m-1\r\n            else:\r\n                l=m+1\r\n            m=(l+h)//2\r\n    return -1",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(words):\r\n    p=[]\r\n    for i in range(len(words)):\r\n        if words[i][0] == \"P\":\r\n            p.append(words[i])\r\n    return(p)",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sum_increasing_subseq() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - max_sum_increasing_subseq() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - max_sum_increasing_subseq() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def max_sum_increasing_subseq(nums, n ,k):\r\n    dp = [[-1 for x in range(n)]for y in range(k+1)]\r\n    ans = [nums[0]]\r\n    #print(dp)\r\n    for j in range(1,n):\r\n        #print(j,k)\r\n        if k<=j:\r\n            # print(j)\r\n            # print(len(ans))\r\n            dp[k][j] = nums[j]\r\n            ans.append(nums[j])\r\n            continue\r\n        mval = -float(\"inf\")\r\n        for l in range(1,j-k+1):\r\n            #print(l,mval)\r\n            mval = max(mval,dp[l][j-l-1]+nums[j])    \r\n        dp[k][j] = mval\r\n        ans.append(mval)\r\n    return dp[k][-1]",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def colon_tuplex(tuplex,tupley,n):\r\n    tuplex= list(tuplex)\r\n    tuplex[tupley-1]=n\r\n    return (tuple(tuplex))",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max() arg is an empty sequence",
      "Test 2: FAIL - max() arg is an empty sequence",
      "Test 3: FAIL - max() arg is an empty sequence"
    ],
    "generated_code": "def large_product(a,b,n):\r\n    # Initialize the list\r\n    p = []\r\n    # Traverse through all elements in both arrays and multiply each element with every other element.\r\n    for i in range(0, len(a)):\r\n        for j in range(0, len(b)):\r\n            x = int(a[i]*b[j])\r\n            if(x > max(p)): \r\n                p.append(int(x)) \r\n    return sorted(p)[len(p)-n:]",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(a,b):\r\n    if a>b:\r\n        return a\r\n    else:\r\n        return b;",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_tuple(s):\r\n    return tuple(s)",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_left_most_unset_bit(n):\r\n    while n:\r\n        n = n & (n-1)\r\n    return n+1",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def volume_cone(r,h):\r\n  return ((math.pi * r**2) * h)/3",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(lst):\r\n    for i in lst:\r\n        if i > 0:\r\n            yield(i)  # use generator instead of return to save space and time. Yield is a keyword which makes a function into generator.\r\n            \r",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "def max_sum_rectangular_grid(arr,n):\r\n    row = len(arr)\r\n    col = len(arr[0])\r\n    if (n % 2 == 1): # odd number\r\n        dp = [[-1 for i in range(col)] for j in range(row)]\r\n        temp=arr[n//2]\r\n        l=0; r=n//2\r\n        dp[r][l]=temp[l]+temp[r+1]\r\n        for k in range(n):\r\n            dp[k%col][k//2]=dp[(k)%col][(k)//2]+max(temp[k%col],temp[k//2+k%col]) if ((k+1)%col<row and (k+1)//2<=n//2 else -1)\r\n        print(dp)\r\n        return dp[n//2][n//2]\r\n    else:\r\n        dp=[[0 for i in range(col)]for j in range(row)]\r\n        dp[0][0]=arr[0][0]\r\n        for i in range(1,col):\r\n            dp[0][i]=dp[0][i-1]+arr[0][i]\r\n        for i in range(1,row):\r\n            dp[i][0]=dp[i-1][0]+arr[i][0]\r\n        for i in range(1,row):\r\n            for j in range(1,col):\r\n                dp[i][j]=max(dp[i-1][j]+arr[i][j],dp[i][j-1]+arr[i][j])\r\n        return max(dp[-1][-1],max(max(dp[i][-1]) for i in range(row)),-max(dp[row-1]))\r\n\r",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'find_Max_Len_Even' is not defined",
      "Test 2: FAIL - name 'find_Max_Len_Even' is not defined",
      "Test 3: FAIL - name 'find_Max_Len_Even' is not defined"
    ],
    "generated_code": "def find_max_len_even(s):\r\n    l = len(s)\r\n    for i in range(l - 1):\r\n        if ((s[i].isupper() and s[i + 1].islower()) or\r\n            (s[i].islower() and s[i + 1].isupper())):\r\n            k = s[i]\r\n            return k\r\n    else:\r\n        return '-1'",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def find_last_occurrence(nums, target):  # Define your solution here.\r\n    left = 0\r\n    right = len(nums) - 1\r\n\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if nums[mid] == target:\r\n            left_index = mid\r\n            while left_index >= 0 and nums[left_index] == target:\r\n                left_index -= 1\r\n            left = left_index + 1\r\n        elif nums[mid] > target:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return left - 1",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def modified_encode(lst):\r\n  if len(lst) == 0:\r\n    return lst\r\n  else:\r\n    temp = []\r\n    count = 1\r\n    for i in range(1, len(lst)):\r\n      if lst[i] != lst[i-1]:\r\n        temp.append([count,lst[i-1]])\r\n        count = 1\r\n      else:\r\n        count += 1\r\n    temp.append([count, lst[-1]])\r\n    return(temp)",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_volume(a):\r\n    if (a % 2 != 0):\r\n        x = int(a / 2)\r\n        y = int((x * x * x))\r\n        z = int(((y + 1) * y) * y)\r\n        return ((z - 1) // 3)\r\n    else:\r\n        return ((a // 2)**3)",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def find_long_word(string):\r\n    list1 = []\r\n    pattern = r'\\b\\w{5}\\b'\r\n    res = re.findall(pattern, string)\r\n    for x in res:\r\n        if len(x) == 5:\r\n            list1.append(x)\r\n    return list1",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_difference(n):\r\n    sqsum = sum([i**2 for i in range(1,n+1)])\r\n    square = sum(range(1,n+1))\r\n    return int(sqsum-square)",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ord() expected string of length 1, but int found",
      "Test 2: FAIL - ord() expected string of length 1, but int found",
      "Test 3: FAIL - ord() expected string of length 1, but int found"
    ],
    "generated_code": "def find_demlo(n): \r\n    # Initializing list with characters from n string\r\n    l = [i for i in n] \r\n  \r\n    # Iterating through each character of the string \r\n    for i in range(len(l)): \r\n        if(i % 2 == 0): \r\n            l[i],l[~i]=int(l[i]), int(l[~i]) \r\n        else: \r\n            l[i],l[~i]=ord(l[i]), ord(l[~i]) \r\n      \r\n    # Returning the result as strings after converting integers back into characters \r\n    s=\"\".join(str(x) for x in l)\r\n    return(s[::-1])",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_min(lst):\r\n    return [i for i,v in enumerate(lst) if v == min(lst)]",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [],
    "generated_code": "def re_arrange(arr , n): \r\n    arr.sort() \r\n    temp = [None] * n; \r\n    j = 0; \r\n    k = 0; \r\n  \r\n    for i in range(n): \r\n        if ((i % 2 == 0)): \r\n            temp[j] = arr[i]; \r\n            j += 1; \r\n        else: \r\n            temp[k] = arr[i]; \r\n            k += 1; \r\n          \r\n    for i in range(0, n): \r\n        print(temp[i], end=\" \"); \r\n      \r",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_of_alternates(lst):\r\n    odd_sum = []\r\n    even_sum = []\r\n    for i in range(1, len(lst), 2):\r\n        odd_sum.append(sum(lst[i]))\r\n    for j in range(0, len(lst), 2):\r\n        even_sum.append(sum(lst[j]))\r\n    output = (odd_sum, even_sum)\r\n    return(output)",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def get_Min_Squares(n):\r\n    # Initialize variables for storing maximum and minimum values in an array\r\n    Max = -math.inf \r\n    Min = math.inf\r\n  \r\n    # Iterate through all integers from 0 to n-1.\r\n    for i in range(n): \r\n        if ((n // i) * i == n):\r\n            # Update maximum value in the array\r\n            Max = max(Max, i)\r\n            # Update minimum value in the array\r\n            Min = min(Min, i)\r\n    # Check whether n is square of integer or not\r\n    # If true then it will be counted as one square number\r\n    flag = True\r\n    if (int(math.sqrt(n))**2 != n):\r\n        flag = False\r\n    # Return sum of maximum number with total count of such numbers\r\n    return (Max + int((flag)*Min))\r\n    \r",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Counter' is not defined",
      "Test 2: FAIL - name 'Counter' is not defined",
      "Test 3: FAIL - name 'Counter' is not defined"
    ],
    "generated_code": "def most_occurrences(strings):\r\n    result = Counter(strings).most_common(1)\r\n    if len(result) == 0:\r\n        return None \r\n    else:\r\n        max_value = result[0][1]\r\n        for i in range(len(result)):\r\n            value = result[i][1]    \r\n            if(value > max_value):   \r\n                max_value = value\r\n        for x,y in result:\r\n            if y == max_value:\r\n                return(x)",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a,b,c):\r\n    if a==b or b==c or c==a:\r\n        return True\r\n    else:\r\n        return False",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(a, n, k): \r\n    temp = [] \r\n    for i in range(k): \r\n        temp.append(a[i]) \r\n    a[:] = a[k:] \r\n    a[:]=a+temp\r\n    return a ",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(lst):\r\n  neg = 0\r\n  for num in lst:\r\n    if(num < 0):\r\n      neg += 1\r\n  return(neg)",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def find_char(txt):\r\n    txt = txt.lower()\r\n    res = []\r\n    for i in range(len(txt)):\r\n        if i+4 <= len(txt):\r\n            word1 = re.findall(r'\\w{'+str(i+1)+r'}\\w+',txt)\r\n            res.append(word1[0])\r\n        elif i+5 <= len(txt):\r\n            word1 = re.findall(r'\\w{'+str(i+1)+r'}\\w+\\w{'+str(5-i-1)+r'}\\w+',txt)\r\n            res.append(word1[0])\r\n    print(res)",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_unset_bits(n): \r\n    c = 0\r\n    while n != 0: \r\n        if n & 1 == 0:\r\n            c += 1  \r\n        n >>= 1 \r\n    return(c)",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(string):\r\n    result={}\r\n    for letter in string:\r\n        if letter not in result.keys():\r\n            result[letter]=string.count(letter)\r\n    return(result)",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def sort_by_second_item(list_of_tuples):\r\n    list_of_tuples.sort(key=lambda x: x[1])\r\n    return list_of_tuples",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Validity(a,b,c): \r\n   if((a + b > c and\r\n       a + c > b and \r\n       b + c > a)): \r\n       return True\r\n   else:\r\n       return False",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ap_sum(start,num,diff):\r\n    return num*(start+start+(num-1)*diff)/2",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_monthnum(monthname): \r\n\tif monthname == 'April' or monthname == 'June' or monthname == 'September' or monthname == 'November': \r\n\t\treturn False\r\n\telif monthname in ('February',): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn True",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_match_word(text):\r\n    if not isinstance(text,str):\r\n        return \"Error: Input must be a string\"\r\n    if len(re.findall('\\W*$',text))>0:\r\n        return 'Not matched!'\r\n    else:\r\n        return 'Found a match!'",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(S):\r\n    l = len(S)\r\n    res = 0\r\n    for i in range(l):\r\n        count=0\r\n        j=i-1\r\n        while(j>=0 and S[i] == S[j]):\r\n            j=j-1\r\n            count=count+1\r\n        k=i+1\r\n        while(k<l and S[i]==S[k]):\r\n            k=k+1\r\n            count=count+1\r\n        res=res + count*(count+1)//2\r\n    return(res)",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndentationError: unexpected indent"
    ],
    "generated_code": "def find_Divisor(start,end): \r\n    # Your Code Here\r\n   i = start; \r\n    while(i<=end and i !=0): \r\n        if((start % i == 0) and (end % i == 0)): \r\n            print(\"Maximum Divisor is : \",i); \r\n        i=i+1 ",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_three_smallest_nums(nums):\r\n    nums.sort()\r\n    total = sum(nums[:3])\r\n    return total ",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_to_tuple(test_set):\r\n  result = tuple(test_set)\r\n  return(result)",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>=' not supported between instances of 'int' and 'list'",
      "Test 2: FAIL - '>=' not supported between instances of 'int' and 'list'",
      "Test 3: FAIL - '>=' not supported between instances of 'int' and 'list'"
    ],
    "generated_code": "def find_minimum_range(arrays):\r\n  minimum = float(\"inf\")\r\n  maximum = -float(\"inf\")\r\n\r\n  # Finding min and max for every subarray\r\n  for array in arrays:\r\n    minimum = min(minimum, min(array))\r\n    maximum = max(maximum, max(array))\r\n\r\n  low = high = sum(1 for _ in range(min(len(arrays), 100)))  # To avoid infinite loop\r\n\r\n  while True:\r\n    if minimum > high:\r\n      break\r\n\r\n    count = sum(map(lambda x: 1 if maximum >= x else 0, arrays))\r\n\r\n    if count == len(arrays):\r\n      break\r\n\r\n    minimum = min(map(lambda x: x + high, arrays))\r\n\r\n    high += low\r\n    low += 1\r\n\r\n  return (minimum, high)",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dig_let(s):\r\n    c = len(str(len(s)))\r\n    x = s.count(' ')\r\n    return (c,x)",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 1",
      "Test 2: FAIL - 1",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def prime_factorize(n):\r\n    d = n\r\n    i = 2\r\n    res = []\r\n    while i * i <= n:\r\n        if n % i == 0:\r\n            res.append(i)\r\n            n //= i\r\n        else:\r\n            i += 1\r\n    if n > 1:\r\n        res.append(int(n))\r\n    pfac = {res[0]:1}\r\n    for i in res:\r\n        pfac[i] = 1 + sum([pfac[j]*i**j for j in range(1,i+1)])\r\n    # print(pfac)\r\n    primes = set(range(2,pfac[max(pfac.keys())]+2))\r\n    return list(filter(lambda x : x in primes, [d for i in range(1,d//max(primes)+1)]))\r\n\r\ndef count_Odd_Squares(low,high):\r\n  num_odd_factors=0\r\n  for x in range(low-1,high):\r\n    pfactors = sorted(prime_factorize(x))\r\n    for y in pfactors:\r\n      z=x/y\r\n      q,yo,qy,zs = y,z/y,math.sqrt(y),z*math.sqrt(y)/x\r\n      #print(\"yo \",yo,\"zs\",zs,\"q\",q,\"y\",y,\"x\",x,\"z\",z)\r\n      if yo%2==0 and zs%2!=0 and q<=1.01:\r\n        num_odd_factors+=1\r\n  return num_odd_factors",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_consecutivenums(nums):\r\n    # Use a nested for loop\r\n    l = len(nums)\r\n    out = [0] * l\r\n    \r\n    for i in range(0, l-1):\r\n        if nums[i] == nums[i+1]:\r\n            out[i] = 0\r\n        elif nums[i] > nums[i + 1]:\r\n            out[i] = 1\r\n            \r\n    return(out)",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'zigzag' is not defined",
      "Test 2: FAIL - name 'zigzag' is not defined",
      "Test 3: FAIL - name 'zigzag' is not defined"
    ],
    "generated_code": "def ziggurat(n,k):\r\n  count = 0\r\n  for i in range(k+1,n-1):\r\n    if (i%k == 0 and i != n-1) or (i//k %k== 0 and i!=n-1):\r\n      count += 1 \r\n  return count+1",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TabError: inconsistent use of tabs and spaces in indentation"
    ],
    "generated_code": "def count_Squares(length,width):\r\n    total = length*width*(width+1)*(width+2)//6\r\n    print(total)\r\n\tcount=total\r\n\treturn count;",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - integer division or modulo by zero",
      "Test 2: FAIL - integer division or modulo by zero",
      "Test 3: FAIL - integer division or modulo by zero"
    ],
    "generated_code": "def find_ways(n): \r\n    # if n is not valid, then return -1\r\n    if (n <= 0 or type(n) != int): \r\n        return (-1) \r\n      \r\n    res = 0;\r\n      \r\n    # If there is no way to get the required sum for 'i'\r\n    # in the range from [0,n]\r\n    for i in range(0, n + 1): \r\n        if ((n % i == 0)): \r\n            res += pow(2, (n / i)) \r\n              \r\n    return (res); \r\n",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def check(s):\r\n  pattern = '^[0-1]+$'\r\n  if(re.search(pattern,s)):\r\n    return\"yes\"\r\n  else:\r\n    return\"No\"",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def minimum_Length(str):\r\n    min_len = len(str)\r\n    for i in range(1,len(str)):\r\n        if len(set(str[i:len(str)+1]))==1:\r\n            new_str = str[:(len(str)-i)]\r\n            min_len=min(min_len,len(new_str))\r\n    return min_len\r\n  # test cases    \r",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - first_Element() takes 2 positional arguments but 3 were given",
      "Test 2: FAIL - first_Element() takes 2 positional arguments but 3 were given",
      "Test 3: FAIL - first_Element() takes 2 positional arguments but 3 were given"
    ],
    "generated_code": "def first_Element(arr,k):\r\n    count=0\r\n    for i in arr:\r\n        if(count==k):\r\n            return i\r\n        else:\r\n            count=count+1\r\n            continue\r\n    return -1",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def unique_Characters(string): \r\n    s = set() \r\n    for x in string: \r\n        if x in s: \r\n            return False\r\n        else: \r\n            s.add(x) \r\n    return True",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_column(nested_list,index):\r\n    return [[i[index] for i in nested_list if i!=[] ] for index in range(len(nested_list[0])) if index != index]\r",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_ap(a,d,n):\r\n    return (n * a + ((n - 1) * d) / 2) * n // 2 ",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Rectangles(r): \r\n    if r <= 0: \r\n        return 0\r\n    return int((r * 2 + 1)*(r * 2 + 1) - ((r-1) * 2)**2) * 4/3",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(x,y):\r\n    z=180-x-y\r\n    return(z)",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_max(tuples):\r\n    max_element = tuples[0][0]\r\n    for t in tuples:\r\n        if t[0] > max_element:\r\n            max_element = t[0]\r\n    return(max_element)",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def moddiv_list(list1, list2):\r\n    return [i % j for i,j in zip(list1, list2)]",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - pow() missing required argument 'exp' (pos 2)",
      "Test 2: FAIL - pow() missing required argument 'exp' (pos 2)",
      "Test 3: FAIL - pow() missing required argument 'exp' (pos 2)"
    ],
    "generated_code": "def Check_Solution(a,b,c):\r\n   if(((-b+pow(b**2-4*a*c)**0.5)/a)==( -b-pow(b**2-4*a*c)**0.5/2/a)):\r\n       print(\"Yes\")\r\n   else:\r\n       print(\"No\")",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_carol(n): \r\n    # Initialize variables\r\n    total = 1; \r\n    for i in range(1,n+1):\r\n        if i%2==1:\r\n            total += int(i*(i**2-1)/2)\r\n        else:\r\n            total += i*(i**2-1)\r\n    return str(total)[::-1]",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lists):\r\n  new = []\r\n  for i in range(len(lists)):\r\n    if lists[i] != []:\r\n      new.append(lists[i])\r\n  return new",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Counter' is not defined",
      "Test 2: FAIL - name 'Counter' is not defined",
      "Test 3: FAIL - name 'Counter' is not defined"
    ],
    "generated_code": "def max_occurrences(arr):\r\n    arr.sort()\r\n    counter = []\r\n    c=Counter(arr)\r\n    for i in c:\r\n        if c[i] > len(arr)//2 :\r\n            counter.append(i)\r\n    return max(counter) if counter else -1",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_K_element(l, k):\r\n  res = []\r\n  for x in l:\r\n    res.append(tuple(i + k for i in x))\r\n  return res",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'min_flip_to_make_string_alternate' is not defined",
      "Test 2: FAIL - name 'min_flip_to_make_string_alternate' is not defined",
      "Test 3: FAIL - name 'min_flip_to_make_string_alternate' is not defined"
    ],
    "generated_code": "def flip_count(binary_str): \r\n\tcount = 0\r\n\tfor i in range(0, len(binary_str) - 1): \r\n\t\tif ((binary_str[i] == '0' and binary_str[i + 1] == '1') or (binary_str[i] == '1' and binary_str[i + 1] == '0')) : \r\n\t\t\tcount += 1\r\n\treturn count + 1  # one extra flip is needed for last character if it doesn't match its next character.",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(n):\r\n    cnt=0\r\n    while n>0:\r\n        cnt+=1\r\n        n=n//10\r\n    return(cnt)",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def adjacent_num_product(arr):\r\n    # Sort the array in descending order\r\n    arr.sort(reverse=True)\r\n    \r\n    # Multiply the last two elements and return the result\r\n    return int(arr[0] * arr[1])",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndentationError: unexpected indent"
    ],
    "generated_code": "    def __init__(self, val=0, left=None, right=None):\r\n        self.val = val\r\n        self.left = left\r\n        self.right = right\r\n\r\n\r\ndef is_tree_balanced(root):\r\n    # Your implementation goes here.\r\n    pass ",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def repeat_tuples(test_tuple, n):\r\n    result = ()\r\n    for i in range(n):\r\n        result += test_tuple\r\n    return result",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lateralsurface_cuboid(length,width,height):\r\n    return 2*(length*width+width*height+height*length)",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object does not support item assignment",
      "Test 2: FAIL - 'tuple' object does not support item assignment",
      "Test 3: FAIL - 'tuple' object does not support item assignment"
    ],
    "generated_code": "def float_sort(test):\r\n    sorted_list = []\r\n    for item in test:\r\n        if type(item[1]) is str:\r\n            item[1] = float(item[1])\r\n        else:\r\n            pass\r\n        sorted_list.append(item)\r\n    return sorted(sorted_list,key=lambda x:(x[1]))",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_missing(A , B , N): \r\n    if A[0] > 0 : \r\n        return 0\r\n    l = 1\r\n    r = len(A) - 1\r\n    while l <= r : \r\n        mid = int(l + (r-l)/2)\r\n        if ((A[mid]-mid) < (B-N)) and \\\r\n           (A[mid-1]-mid+1 == (B-N)):  \r\n            return mid+N\r\n        elif A[mid] >= N :  \r\n            r = mid - 1\r\n        else : \r\n            l = mid + 1\r\n    return N + 1;",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'heapq' is not defined",
      "Test 2: FAIL - name 'heapq' is not defined",
      "Test 3: FAIL - name 'heapq' is not defined"
    ],
    "generated_code": "def heap_assending(l):\r\n    heapq.heapify(l)\r\n    return l[:len(l):][::-1]",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length,width,height):\r\n  return length*width*height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'itertools' is not defined",
      "Test 2: FAIL - name 'itertools' is not defined",
      "Test 3: FAIL - name 'itertools' is not defined"
    ],
    "generated_code": "def permute_string(s):\r\n  return [''.join(x) for x in list(itertools.permutations(list(s)))]",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def round_num(num , base):\r\n    if num%base>0:\r\n        return ((num//base)+1)*base\r\n    else:\r\n        return (num//base)*base",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_replica(lst):\r\n    lst = list(dict.fromkeys(lst))\r\n    result = []\r\n    for i in range(len(lst)):\r\n        if lst.count(lst[i]) > 1:\r\n            temp = str(lst[i])\r\n        else:\r\n            temp = \"MSP\"\r\n        result.append(temp)\r\n    return tuple(result)",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Char(str1,ch): \r\n    str1 = list(str1) \r\n    index = 0\r\n    for i in range(len(str1)): \r\n        if str1[i] != ch: \r\n            str1[index]=str1[i] \r\n            index += 1\r\n    str1 = ''.join(str1[:index]) \r\n    return str1\r\n\r",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_first(lst):\r\n    return lst[-1:] + lst[:-1]",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(l,b,h):\r\n    # calculate the surface area\r\n    sa = 2 * (l*b + l*h + b*h)\r\n    return sa",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'multi_list' is not defined",
      "Test 2: FAIL - name 'multi_list' is not defined",
      "Test 3: FAIL - name 'multi_list' is not defined"
    ],
    "generated_code": "def multilist(nrows, ncols):\r\n    res = []\r\n    for i in range(nrows):\r\n        temp=[]\r\n        for j in range(ncols):\r\n            temp.append(i*j)\r\n        res.append(temp)\r\n    return res",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(lst, i):\r\n  return sorted(lst, key=lambda x: x[i])",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rotation_count(arr):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    while low <= high:\r\n        if arr[low] <= arr[high]:\r\n            return low\r\n\r\n        mid = int((low + high) / 2)\r\n        next = (mid + 1) % len(arr)\r\n        prev = (mid - 1 + len(arr)) % len(arr)\r\n\r\n        # If current element is greater than the previous one,\r\n        # then it means there will be at least one rotation.\r\n        if arr[mid] > arr[prev] and arr[mid] > arr[next]:\r\n            return mid\r\n        elif arr[mid] >= arr[low]:\r\n            # If mid is left half's part\r\n            low = mid + 1\r\n        else:\r\n            # If mid is right half's part\r\n            high = mid - 1\r\n    return -1",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(num): \r\n\treturn num ^ ((num & (-num)) - 1)",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Smallest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Smallest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Smallest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Smallest(arr):\r\n    mini = min(arr)\r\n    c=0\r\n    for i in range(len(arr)):\r\n        if arr[i] == mini:\r\n            c=c+1\r\n    return(c)",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - maximum recursion depth exceeded in comparison",
      "Test 2: FAIL - maximum recursion depth exceeded in comparison",
      "Test 3: FAIL - maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_perrin(n): \r\n    if n == 0 : \r\n        return 3\r\n    elif n == 1: \r\n        return 2\r\n    else: \r\n        return get_perrin(n - 2) + get_perrin(n - 3)",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'str' object has no attribute 'pop'",
      "Test 2: FAIL - 'str' object has no attribute 'pop'",
      "Test 3: FAIL - 'str' object has no attribute 'pop'"
    ],
    "generated_code": "def swap_count(brackets):\r\n    s = []\r\n    cnt=0\r\n    while brackets:\r\n        c = brackets.pop()\r\n        if not s and c == \"]\":\r\n            cnt += 1\r\n        elif not s and c == \"[\":\r\n            continue\r\n        elif s and s[-1] == \"[\" and c == \"]\" :\r\n            del s[-1]\r\n            cnt+=1\r\n        else:\r\n            s.append(c)\r\n    print(s)\r\n    return cnt ",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_or_odd(hexadecimal):\r\n    decimal = int(hexadecimal, 16)\r\n    if(decimal % 2 == 0): \r\n        print('Even')\r\n    else:\r\n        print('Odd')",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'highest_Power_of_2' is not defined",
      "Test 2: FAIL - name 'highest_Power_of_2' is not defined",
      "Test 3: FAIL - name 'highest_Power_of_2' is not defined"
    ],
    "generated_code": "def highest_power_of_2(n):\r\n    if(n==1):\r\n        return 1\r\n    elif(n<=4):\r\n        return 2\r\n    else:\r\n        i=0;\r\n        while((2**i)<=n):\r\n            i=i+1\r\n        return 2**i-1",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_lucas(n): \r\n    if (n == 0): \r\n        return 2\r\n    elif (n == 1): \r\n        return 1\r\n    else: \r\n        return find_lucas(n - 1) + find_lucas(n - 2)",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate str (not \"int\") to str",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - can only concatenate str (not \"int\") to str"
    ],
    "generated_code": "def add_string(my_list,string):\r\n    for i in range(len(my_list)):\r\n        my_list[i]=string+my_list[i]\r\n    return my_list ",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - convert_list_dictionary() takes 2 positional arguments but 3 were given",
      "Test 2: FAIL - convert_list_dictionary() takes 2 positional arguments but 3 were given",
      "Test 3: FAIL - convert_list_dictionary() takes 2 positional arguments but 3 were given"
    ],
    "generated_code": "def convert_list_dictionary(lst_1,lst_2):\r\n    d = {}\r\n    for i in range(len(lst_1)):\r\n        if lst_1[i] not in d:\r\n            d[lst_1[i]] = dict()\r\n        d[lst_1[i]][lst_2[i]] = int(input(\"enter value :\"))\r\n    return d.values()",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_max_sum(number):\r\n    # Initialize array for memoization\r\n    dp = [float('-inf')] * (number+1)\r\n    dp[0] = 0\r\n    \r\n    for i in range(1,number+1):        \r\n        # Iterate over each factor of i\r\n        for j in range(i//2,i//5+1):\r\n            if(j == 0):\r\n                continue\r\n            \r\n            else:\r\n                # Add the value obtained from dividing the number with j\r\n                dp[i] = max(dp[j]+dp[i-j],dp[i])\r\n            \r\n            # Return the maximum value found \r\n            return dp[number]",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length_list(lists): \r\n    return(max(lists,key=len))",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(test_tup):\r\n    return len(test_tup) == len(set(test_tup))",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - min() arg is an empty sequence",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(string): \r\n\tcount = {} \r\n\tfor i in string: \r\n\t\tif i in count:\r\n\t\t\tcount[i] += 1\r\n\t\telse: \r\n\t\t\tcount[i] = 1\r\n\treturn min([(k,v) for k,v in count.items() if v == 1])[0]",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def check_char(string):\r\n    if re.match(\"^([a-zA-Z])\\1$\",string) == None:\r\n        return (\"Invalid\")\r\n    else:\r\n        return(\"Valid\")",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def median_numbers(x,y,z):\r\n    m = min(x,y,z)\r\n    if x==m:\r\n        n= y\r\n        o=z\r\n    elif y==m:\r\n        n=x\r\n        o=z\r\n    else :\r\n        n=y\r\n        o=x\r\n        \r\n    return ((n+o)/2)",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - invalid literal for int() with base 10: \"[10, 20, 4, 5, 'b', 70, 'a']\"",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_digits(l):\r\n    l1=[int(i) for i in str(abs(int(str(min(l)))+min(l)))]\r\n    return(sum(map(int,l1)))",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def bitwise_xor(tup1, tup2):\r\n   result = []\r\n   for i in range(len(tup1)):\r\n      temp = tup1[i] ^ tup2[i]\r\n      result.append(temp)\r\n   return tuple(result)",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_freq(lst):\r\n    freq = []\r\n    for i in lst:\r\n        if not i in freq:\r\n            freq.append(i)\r\n    return len(freq)",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_nested_tuples(t1, t2):\r\n  result = []\r\n  for i,j in zip(t1,t2):\tresult.append(i+j)\r\n  return tuple(result)",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ncr_modp(n, r, p): \r\n    return pow(factorialModInverse(int(n-r), p), int(r), p) * factorialModInv(int(r), p)%p\r\n \r\ndef factorialModInv(x,p):\r\n    if x == 0:\r\n        return 1\r\n    elif x % 2 == 0:\r\n        t = (x/2)*factorialModInv(int(x / 2), p)\r\n        return t % p\r\n    else:\r\n        t = x*factorialModInv(int(x - 1), p)\r\n        return t% p\r\n\r\ndef factorialModInverse(x, p):  \r\n    m = p-2\r\n    e = 1\r\n    while(m != 0):\r\n        q = m // p\r\n        t = e\r\n        e = ((m-q*e)) % p\r\n        m = q\r\n    return (e+2*p)%p ",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def is_valid_URL(url):\r\n    regex = '^(http|https)://' + \\\r\n            '[a-zA-Z0-9\\.-]+(\\.[a-zA-Z]{2,3})*' + \\\r\n            '(\\/[^\\s]*)?$'\r\n    pattern = re.compile(regex)\r\n    match = re.search(pattern, url)\r\n    if (match == None):\r\n        print(False)\r\n        return False\r\n    else:\r\n        print(True)\r\n        return True",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(a,b):\r\n    if(a<=b):\r\n        return a\r\n    else:\r\n        return b",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_tuplex' is not defined",
      "Test 2: FAIL - name 'check_tuplex' is not defined",
      "Test 3: FAIL - name 'check_tuplex' is not defined"
    ],
    "generated_code": "def check_tuple(test_tup,item):\r\n    if item in test_tup:\r\n        return True\r\n    else:\r\n        return False",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(x):\r\n    # Use modulo operator (%)\r\n    if x % 2 == 0:\r\n        return 'Even Parity'\r\n    else:\r\n        return 'Odd Parity'",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rearrange_bigger(num):\r\n    arr = [int(x) for x in str(num)]\r\n    n = len(arr)\r\n    if n == 1:\r\n        return False\r\n    i = 0 \r\n    j = n-1\r\n    flag=0\r\n    while(i<j):\r\n        while(flag!=1 and arr[i]==arr[j]):\r\n            j -= 1\r\n            if j-i==1:\r\n                break\r\n            if j < n - 1:\r\n                arr[j] += arr[j + 1]\r\n                arr[j+1]=arr[j]-arr[j+1]\r\n                arr[j]-=arr[j+1]\r\n        if arr[i]>arr[j]:\r\n            temp = arr[i]\r\n            arr[i] = arr[j]\r\n            arr[j] = temp\r\n            flag = 1\r\n        else:\r\n            j-=1\r\n        if(j<i):\r\n            break\r\n    if flag==0:\r\n        return False\r\n    elif(n==j):\r\n        return True\r\n    else:\r\n        new_str = ''.join(str(x) for x in arr)\r\n        num=int(new_str)\r\n        return num",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def k_smallest_pairs(nums1, nums2,k):\r\n  ans=[]\r\n  for i in range(min(len(nums1),len(nums2))):\r\n    for j in range(1,k+1):\r\n      if(i+j<len(nums1)and i-j>=0 and j+i<len(nums2)):\r\n        ans.append([nums1[i],nums2[j]])\r\n  return ans[:k]",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_product_tuple(l):\r\n    l.sort(key=lambda x: -x[0]*x[1])\r\n    return l[0][0]*l[0][1]",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 2: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 3: FAIL - '<' not supported between instances of 'str' and 'int'"
    ],
    "generated_code": "def min_val(l):\r\n    if l == []:\r\n        return None\r\n    else:\r\n        l = sorted(list(set(l)))\r\n        if not l:\r\n            return None\r\n        elif len(l) == 1:\r\n            return l[0]\r\n        else:\r\n            return l[1]",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def snake_to_camel(snake_str):\r\n    # Use regular expression to find all words after '_'\r\n    words = re.findall(r'_([a-z])', snake_str)\r\n    # Iterate over found words and capitalize them before adding them together with previous capitalised letters in result\r\n    for word in words:\r\n        res += word.capitalize()\r\n    return ''.join(res)",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(nums):\r\n    newlist = []\r\n    for i in nums:\r\n        if (i % 2 == 0):\r\n            newlist.append(i)\r\n    return newlist",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_nth_element(lst,n):\r\n    return [i[n] for i in lst]",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(seq1, seq2):\r\n    for i in range(len(seq1)):\r\n        if seq1[i] in seq2:\r\n            return True\r\n    return False",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_Product(nums):\r\n    if len(nums) < 2:\r\n        return None\r\n    nums.sort()\r\n    return (nums[-1]*nums[-2], nums[0]*nums[1])",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - maximum recursion depth exceeded in comparison",
      "Test 2: FAIL - maximum recursion depth exceeded in comparison",
      "Test 3: FAIL - maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def breakSum(n):\r\n    if n < 3:\r\n        return n\r\n    else:\r\n        l = list(range(0,n+1))\r\n        m = max([l[i] + min(breakSum(i),breakSum(n-i)) for i in range(0,n)])\r\n        return m",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - 'tuple' object has no attribute 'append'"
    ],
    "generated_code": "def group_tuples(tuples):\r\n    res = []\r\n    for i in range(len(tuples)):\r\n        temp = tuples[i]\r\n        j = i + 1\r\n        while j < len(tuples):\r\n            if set(temp) == set(tuples[j]):\r\n                temp.append(tuples[j][0])\r\n                res.append(tuple(temp))\r\n            else:\r\n                break\r\n            j += 1\r\n    return res",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max' is not defined",
      "Test 2: FAIL - name 'Find_Max' is not defined",
      "Test 3: FAIL - name 'Find_Max' is not defined"
    ],
    "generated_code": "def find_max(lst):\r\n    max_len = 0\r\n    max_sublst = []\r\n    \r\n    for sublst in lst:\r\n        if len(sublst) > max_len:\r\n            max_len = len(sublst)\r\n            max_sublst = sublst\r\n    \r\n    return max_sublst",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'np' is not defined",
      "Test 2: FAIL - name 'np' is not defined",
      "Test 3: FAIL - name 'np' is not defined"
    ],
    "generated_code": "def round_and_sum(l):\r\n    x = np.array(l)\r\n    y= np.around(x)\r\n    return sum(y)*len(y)",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        num=(i*(i+1)*(2*i+1))/6\r\n        sum += num\r\n        \r\n    return int(sum)",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_tuple(tup):\r\n    string = ''\r\n    for i in tup:\r\n        string += str(i)\r\n    result = ''.join(string.split())\r\n    return(result)",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\r\n    result = (n*(n+1)/2)**2\r\n    return round(result/3)",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def get_maxgold(mat,n,m): \r\n    for i in range(n-1,-1,-1):\r\n        for j in range(m-1,-1,-1): \r\n            if(i==n-1 and j == m-1): \r\n                mat[i][j] = mat[i][j] + max(mat[i+1][j],mat[i][j+1])\r\n            elif(i==n-1): \r\n                mat[i][j] = mat[i][j]+max(mat[i][j+1],0) \r\n            elif(j==m-1): \r\n                mat[i][j] = mat[i][j]+max(mat[i+1][j],0)\r\n            else: \r\n                mat[i][j] = mat[i][j] + max(mat[i+1][j],mat[i][j+1]) \r\n                temp = [i,j]\r\n                mat[i][j] += mat[temp[0]][temp[1]]\r\n                del temp \r\n    return(max(mat[0]))",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_rear(test):\r\n    test = [i[-1] for i in test]\r\n    return test ",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_in_list(list_of_lists, ele):  #function to count number of occurrences of an element in a list\r\n    return sum(ele in sublist for sublist in list_of_lists)  #using generator expression with count() method. It will count how many times the given element is found and returns its total count as output.",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_oddnumbers(numbers):\r\n    return list(filter(lambda x: x % 2 != 0, numbers))",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def change_date_format(date): \r\n    # Regular expression pattern to match and extract year-month-day format.\r\n    pattern = r'(\\d{4})-(\\d{1,2})-(\\d{1,2})'\r\n    # Replace the matched group with corresponding values in descending order.\r\n    result = re.sub(pattern, r'\\3-\\2-\\1', date) \r\n    # Return the formatted string after replacement.\r\n    return result ",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def shell_sort(a):\r\n    h = len(a)//2\r\n    while h > 0:\r\n        for i in range(h,len(a)):\r\n            j=i-h\r\n            temp=a[i]\r\n            while j>=0 and a[j]>temp:\r\n                a[j+h]=a[j]\r\n                j-=h\r\n            a[j+h]=temp\r\n        h=h//2\r\n    return a",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def and_tuples(x, y): \r\n\tresult = [] \r\n\tfor i in range(len(x)): \r\n\t\tif x[i] != y[i]: \r\n\t\t\tresult.append(0) \r\n\t\telse: \r\n\t\t\tresult.append(y[i]) \r\n\treturn tuple(result)",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_directrix(a,b,c):\r\n    return -a*(b**2)/(4*c)+c",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_element(list_1,list_2):\r\n    for i in list_1:\r\n        if(i in list_2):\r\n            return True\r\n    return False",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def median_trapezium(x1,x2,x3):\r\n    return ((x1+x3)/2) - ((x2-x1)/(x3-x2)) * abs((x2-x1)) / 2.0 ",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(arr, n): \r\n    flag = 0\r\n    for i in range(len(arr)): \r\n        if (n > arr[i]): \r\n            flag = 1;  \r\n            break\r\n    if (flag == 0): \r\n        print('No, entered number is less than those in the array') \r\n    else: \r\n        print('Yes, the entered number is greater than those in the array') \r",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_match_one(text):\r\n  patterns = 'a(?=b*)'\r\n  if re.search(patterns,text): return 'Found a match!'\r\n  else: return ('Not matched!')",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'last_Digit' is not defined",
      "Test 2: FAIL - name 'last_Digit' is not defined",
      "Test 3: FAIL - name 'last_Digit' is not defined"
    ],
    "generated_code": "def last_digit(number):\r\n    return abs(number) % 10  # This line will always give you the last digit of the given number.",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [],
    "generated_code": "def neg_nos(list): \r\n    for i in range(len(list)): \r\n        if list[i] < 0 : \r\n            print(list[i], end = \" \")  # This is not a comment, it is part of the function.",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(string): \r\n    s = \"\" \r\n    for i in range(0, len(string)): \r\n        if(i%2 == 0):\r\n            s = s + string[i] \r\n    return s;",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unhashable type: 'set'",
      "Test 2: FAIL - unhashable type: 'set'",
      "Test 3: FAIL - unhashable type: 'set'"
    ],
    "generated_code": "def count_bidirectional(lst):\r\n    d = {}\r\n    res = 0\r\n    for i in lst:\r\n        if (i[0], i[1]) not in d.keys():\r\n            d[i] = []\r\n            d[(i[0], i[1])] = [i]\r\n        else:\r\n            d[(i[0], i[1])].append(i)\r\n        if (i[1], i[0]) not in d.keys():\r\n            d[i] = []\r\n            d[(i[1], i[0])] = [i]\r\n        else:\r\n            d[(i[1], i[0])].append(i)\r\n\r\n    for i in d.items():\r\n        l = len(d[i[0]]) - 1\r\n        while(l >= 0):\r\n            m = d[i[0]][l][0]\r\n            n = d[i[0]][l][-1]\r\n            t = set([m,n])\r\n            c = d[t]\r\n            f = 0\r\n            p = 0\r\n            for j in c.items():\r\n                if ((j[1][0],j[1][1])) != (n,m) and (j[1][0],j[1][1]) != (m,j[1][0]):\r\n                    f = f + 1\r\n                elif ((j[1][0],j[1][1])) == (n,m) or ((j[1][0],j[1][1])) == (m,j[1][0]):\r\n                    p = p + 1\r\n            g = 0\r\n            h = 0\r\n            for k in c.items():\r\n                if (k[1][0],k[1][1]) != (m,n):\r\n                    g = g + 1\r\n                elif (k[1][0],k[1][1]) == (m,n) or (k[1][0],k[1][1]) == (n,m):\r\n                    h = h + 1\r\n\r\n            # print(c)\r\n            res = res + (f*p)/(g+h)\r\n\r\n            l -= 1\r\n\r\n    return(res)",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(lst): \r\n    return int(''.join(str(x) for x in lst))",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_adverb_position(sentence):\r\n    regex = re.compile(r\"\\b\\w+ly\\b\")\r\n    matches = regex.finditer(sentence)\r\n    for match in matches:\r\n        yield (match.start(), match.end()-1, match.group())",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(side):\r\n    return 6 * pow(side , 2)",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def positive_count(arr):\r\n  positive = len(list(filter(lambda x : x > 0 , arr)))\r\n  return (positive/len(arr))",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_neg(lst):\r\n    result = min(lst)\r\n    if result < 0:\r\n        return result\r\n    else:\r\n        return None",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def trim_tuple(test_list,k):\r\n  output = []\r\n  for i in test_list:\r\n    temp =[]\r\n    for j in range(len(i)):\r\n      if(j<k):\r\n        temp.append(i[j])\r\n    output.append(tuple(temp))\r\n  return(output)",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - tuple index out of range",
      "Test 2: FAIL - tuple index out of range",
      "Test 3: FAIL - tuple index out of range"
    ],
    "generated_code": "def index_multiplication(tuple1,tuple2):\r\n    result=[]\r\n    for i in range(len(tuple1)):\r\n        temp=[]\r\n        for j in range(len(tuple1[i])):\r\n            temp.append(tuple1[i][j]*tuple2[j][i])\r\n        result.append(temp)\r\n    return tuple(result)",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Occurrence(a,b):\r\n    c = 0\r\n    for i in range(len(b)):\r\n        if b[i] == a:\r\n            c += 1\r\n    return(c)",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cube_nums(l):\r\n    return(list(map(lambda x:x**3,l)))",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_sum(n): \r\n    p = [0] * n\r\n    if (n == 0):\r\n        p[0] = 3\r\n    else:\r\n        p[0] = 3\r\n        p[1] = 0\r\n        p[2] = 2\r\n        for i in range(3, n): \r\n            p[i] = p[i - 2] + p[i - 3]\r\n    \r\n    print(p)\r\n    s = 0 \r\n    for j in range(n-1): \r\n        if ((j % 2 != 0)): \r\n            s += p[j] \r\n    \r\n    return(s)",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - float division by zero"
    ],
    "generated_code": "def check_Triangle(x1,y1,x2,y2,x3,y3):\r\n    A = x1 * y2 + x2 * y3 + x3 * y1 - x2 * y1 - x3 * y2 - x1 * y3;\r\n    B = ((x2-x1)**2 + (y2-y1)**2)**0.5\r\n    C = ((x3-x2)**2 + (y3-y2)**2)**0.5\r\n    D = ((x3-x1)**2 + (y3-y1)**2)**0.5\r\n    E = (A/B/C/D)\r\n    F = math.sqrt((B+C-D)*(C+D-B)*(D+B-C)*(E-A))\r\n    G = math.sqrt((C+D-E)*(E+A-D)*(D+E-A)*(F-B))\r\n    H = math.sqrt((D+E-F)*(F+B-D)*(E+F-B)*(G-A))\r\n    I = math.sqrt(((x1-x3)**2 + (y1-y3)**2)**0.5)\r\n    J = math.sqrt(((x2-x3)**2 + (y2-y3)**2)**0.5)\r\n    K = math.sqrt(((x1-x2)**2 + (y1-y2)**2)**0.5)\r\n    M = ((K*J)/(I*(I+M)))\r\n    N = (((I+M)*N)-(K*N))/(I+M)\r\n    O = (I*N-M*K)/(I+M)\r\n    P = ((O*M)/N)\r\n    Q = (((P-1)/Q)-I)\r\n    R = math.sqrt((P+1-Q)**2)\r\n    S = R*I/(R+Q)\r\n    T = ((R-I*S)/T)\r\n    U = ((R+Q-S)/U)\r\n    V = math.sqrt((X1-U)**2+(Y1-U)**2)\r\n    W = math.sqrt((V-V)**2+Y1**2)\r\n    X = math.sqrt(W-W)\r\n    Y = (X/X)+math.cos(X)\r\n    Z = Y*math.sin(Y)\r\n\r",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_string(arr, num): \r\n    return [arr[i] for i in range(0,len(arr),num)]",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'remove_whitespaces' is not defined",
      "Test 2: FAIL - name 'remove_whitespaces' is not defined",
      "Test 3: FAIL - name 'remove_whitespaces' is not defined"
    ],
    "generated_code": "def remove_whitespace(text):\r\n  return(re.sub(r'\\s+', '', text))",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def loss_amount(a,b):\r\n    l=a-b\r\n    if(l<0): \r\n        return l \r\n    else: \r\n        return None ",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sumofFactors(n):\r\n    total = 0;\r\n    for i in range(1,n+1):\r\n        if n % i == 0:\r\n            total += i\r\n    return int(total/2)\r",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_match_wordz(text):\r\n    if re.search(\"^.*z$\",text): \r\n        return ('Found a match')\r\n    else: \r\n        return ('Not matched!')",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_monthnumb_number' is not defined",
      "Test 2: FAIL - name 'check_monthnumb_number' is not defined",
      "Test 3: FAIL - name 'check_monthnumb_number' is not defined"
    ],
    "generated_code": "def check_monthnumb(month):\r\n    if month in (4,6,9,11):\r\n        return True\r\n    else:\r\n        return False",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def reverse_string_list(l):\r\n    for i in range(0,len(l)):\r\n        l[i]=l[i][::-1]\r\n    return l[::-1]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Min(l):\r\n    min_len = float('inf')\r\n    ans_list = []\r\n    for i in l:\r\n        if len(i) < min_len:\r\n            ans_list = i\r\n            min_len = len(ans_list)\r\n    return ans_list",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length,width):\r\n    return length*width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def remove_uppercase(string):\r\n  res = re.sub(r'([A-Z])', '', string)\r\n  return res.upper()",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(test):\r\n    res = []\r\n    for i in test:\r\n        res.append(i[0])\r\n    return res ",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(string):\r\n    c = 0\r\n    for i in range(len(string)):\r\n        if string[i] == string[i].upper():\r\n            c += 1\r\n    return(c)",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'combinations' is not defined",
      "Test 2: FAIL - name 'combinations' is not defined",
      "Test 3: FAIL - name 'combinations' is not defined"
    ],
    "generated_code": "def combinations_list(test_list):\r\n    result = []\r\n    for i in range(len(test_list) + 1):\r\n        rcombs = combinations(test_list, i)\r\n        for comb in rcombs:\r\n            result.append(list(comb))\r\n    return result\r\n\r",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_subarray_product(arr):\r\n    if len(arr) == 0:\r\n        return None\r\n \r\n    n = len(arr)\r\n    max_so_far = arr[0]\r\n    curr_max = arr[0]\r\n \r\n    for i in range(1, n):\r\n        temp = curr_max * arr[i]\r\n        curr_max = max(arr[i], temp)\r\n        max_so_far = max(max_so_far, curr_max)\r\n \r\n    return max_so_far",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_value(my_dict,value):\r\n    for key,val in my_dict.items():\r\n        if val != value:\r\n            return False\r\n    else:\r\n        return True",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(my_dict):\r\n    return {k:v for k,v in my_dict.items() if v is not None}",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_peak() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_peak() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_peak() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def find_peak(A):\r\n    for i in range(1, len(A)):\r\n        if A[i] > A[i-1]:\r\n            continue\r\n        else:\r\n            break\r\n    return A[i]",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_Octal(decimal): \r\n   res = 0\r\n   i = 0\r\n   rem=0\r\n   while (decimal != 0): \r\n      rem = decimal % 8\r\n      res += pow(10,i) * rem \r\n      i+=1\r\n      decimal //= 8\r\n   return(res)",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def max_product(arr, n): \r\n    dp = [[-1 for i in range(0)] for j in range(n)]\r\n    res = [arr[0]]\r\n    for i in range(1, n):\r\n        curr = arr[i]\r\n        left = 1\r\n        right = 1\r\n        for j in range(i - 1, -1, -1):\r\n            if dp[j][0] == -1:\r\n                continue\r\n            else:\r\n                left = max(left, dp[j][0]) * arr[j]\r\n            if dp[j][1] == -1:\r\n                continue\r\n            else:\r\n                right = max(right, dp[j][1]) * arr[j]\r\n            if left > right:\r\n                temp = left\r\n                left = right\r\n                right = temp\r\n        dp[i][0] = left\r\n        dp[i][1] = right\r\n        res.append(max(res[-1], left))\r\n    return res[n - 1]",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: Generator expression must be parenthesized"
    ],
    "generated_code": "def max_profit(prices, k):\r\n    if len(prices)<2:\r\n        return 0\r\n    elif k>=len(prices)//2+1:\r\n        return sum(max(0,i-j for i,j in zip(prices[1:],prices)))\r\n    else:\r\n        # initialize the first round's profits array with the values \r\n        # obtained using one transaction on each day.\r\n        profits = [max(0, prices[i]-prices[i-1]) for i in range(1,len(prices))]\r\n        # then update them according to the rules mentioned above.\r\n        for _ in range(k-1):    \r\n            for i in range(len(profits)-1):\r\n                profits[i] += max(0,profits[i+1]+prices[i+1]-prices[i])\r\n        return profits[-1] + prices[len(prices)-1] - prices[0] ",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_pairwise(tup):\r\n    output = []\r\n    for i in range(len(tup)):\r\n        sum = tup[i] + tup[(i+1)%len(tup)]\r\n        output.append(sum)\r\n    return tuple(output)",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "def find_remainder(A,n,p):\r\n    s = reduce((lambda x,y : ((x % p)*(y % p))%p),A)\r\n    if len(set(A))==n:\r\n        return(1)%p\r\n    else:\r\n        return(s)%p ",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Consecutive(list1):\r\n    x = sorted(list1)\r\n    y = set(x)\r\n    if len(y) == len(list1):\r\n        return False\r\n    else:\r\n        return True",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - tuple_intersection() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - tuple_intersection() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - tuple_intersection() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def tuple_intersection(test_list):\r\n    test_set = set()\r\n    for t in test_list:\r\n        if len(t) != 0:\r\n            test_set.add(tuple(sorted(set(t))))\r\n    result = []\r\n    for i in range(len(test_set)):\r\n        flag = True\r\n        for j in range(i + 1, len(test_set)):\r\n            if sorted(test_set[i]) == sorted(test_set[j]):\r\n                flag = False\r\n                break\r\n        if flag:\r\n            result.append(test_set[i])\r\n    return set(result)",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(string , char_to_replace , new_char):\r\n    if char_to_replace in string:\r\n        for index in range(0,len(string)):\r\n            if string[index] == char_to_replace :\r\n                string = string[:index] + new_char +string[(index+1):]\r\n    return string",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_counter(c):\r\n  return sorted([(k,v) for k,v in c.items()], key = lambda x :x [1])",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\r\n    max = arr[0]\r\n    min = arr[0]\r\n\r\n    for i in range(0,len(arr)):\r\n        if arr[i] > max:\r\n            max = arr[i]\r\n        elif arr[i] < min:\r\n            min = arr[i]\r\n    \r\n    total = max + min\r\n\r\n    return total",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_lower(s):\r\n  s=s.lower()\r\n  return s",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_lowercase(string):\r\n    new_string = ''\r\n    for i in range(len(string)):\r\n        if not string[i].islower():\r\n            new_string += string[i]\r\n    return(new_string)",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def first_Digit(num):  # Define the function \"first_Digit\" taking an argument \"num\"\r\n    if num < 0:\r\n        num = -num\r\n    while True:\r\n        try:\r\n            num //= 10\r\n        except ZeroDivisionError:\r\n            break\r\n    return num",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(str): \r\n    dict = {} \r\n      \r\n    # Traverse the list and update counts \r\n    for i in str : \r\n        if i in dict : \r\n            dict[i] += 1\r\n        else : \r\n            dict[i] = 1\r\n    \r\n    # Find max value in dictionary  \r\n    mx = -1; \r\n    keymx = ''\r\n    for k,v in dict.items(): \r\n        if v > mx : \r\n            mx = v; \r\n            keymx = k \r\n    \r\n    return keymx;",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for +: 'int' and 'list'",
      "Test 2: FAIL - unsupported operand type(s) for +: 'int' and 'list'",
      "Test 3: FAIL - unsupported operand type(s) for +: 'int' and 'list'"
    ],
    "generated_code": "def is_subset_sum(set_data, target, sub_set=None):\r\n    for element in set_data:\r\n        if (element == target):\r\n            return True\r\n        else:\r\n            new_subset = sub_set + [element]\r\n            result = is_subset_sum(set_data, target - element, new_subet)\r\n            if (result == True):\r\n                return True\r\n    return False",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def match(string):\r\n    if bool(re.search('[A-Z][a-z]*',string)):\r\n        return \"Yes\"\r\n    else:\r\n        return \"No\"",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\r\n    n = 1\r\n    while True:\r\n        if factorial(n) % x == 0:\r\n            return n \r\n        n += 1\r\n        \r\ndef factorial(num):    \r\n   # Base case \r\n   if num == 0:  \r\n       return 1\r\n   else:  \r\n      return (num * factorial(num - 1)) ",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_matching_tuple(tup1, tup2):\r\n    x = set(tup1)\r\n    y = set(tup2)\r\n    z = list(x.difference(y))\r\n    l = []\r\n    for i in range(0, len(z)):\r\n        l.append(tuple(z[i]))\r\n    return(l)",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ispalindrome(num):\r\n    temp = num\r\n    rev = 0\r\n    while (num != 0): \r\n        dig = num % 10\r\n        rev = rev * 10 + dig \r\n        num //= 10\r\n        \r\n    if (temp == rev): \r\n        return True; \r\n    else : \r\n        return False;\r\n        \r\ndef largest_palindrome(arr, n): \r\n\r\n   for i in range(n): \r\n       for j in range(i+1, n): \r\n           if arr[i] == arr[j]: \r\n               if(isPalindrome(int(str(arr[i]) + str(arr[j])))): \r\n                   return int(str(arr[i])+str(arr[j]))\r\n   return -1; ",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def binomial_probability(n,k,p):\r\n    prob = 0.0\r\n    fact_nk = math.factorial(n-k)\r\n    fact_k = math.factorial(k)\r\n    fact_n = math.factorial(n)\r\n    numerator = pow(p,n)\r\n    denominator = (fact_n/fact_k/fact_nk)\r\n    if(denominator==0):\r\n        return -1\r\n    else:\r\n        prob = numeator/denominator\r\n        return prob",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(test_tup):\r\n    test_tup.sort(key = lambda x : x[1])\r\n    return(test_tup)",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def area_pentagon(side):\r\n    return (side * side) * ((5/2)**0.5)",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Largest(arr):\r\n  max_element=max(arr)\r\n  count=0\r\n  for i in range(len(arr)):\r\n    if(max_element==arr[i]):\r\n      count=count+1\r\n  print(count) \r",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_symmetric(lst):\r\n    res = set()\r\n    for i in range(len(lst)):\r\n        if lst[i] == lst[len(lst)-i-1]:\r\n            res.add(tuple(sorted(lst[i])))\r\n    return res",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_gp(a,r,n):\r\n   s = int((a * ((r ** n) - 1)/(r-1)))\r\n   return s",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def binary_search(arr , x): \r\n\tn = len(arr) \r\n\tlow = 0\r\n\thigh = n - 1\r\n\r\n\twhile low <= high:\r\n\t\tmid = (low + high) // 2\r\n\t\tif arr[mid] < x:\r\n\t\t\tlow = mid + 1\r\n\t\telif arr[mid] > x:\r\n\t\t\thigh = mid - 1\r\n\t\telse :\r\n\t\t\treturn mid\r\n\t\t\t\r\n\treturn -1 \r\n\r",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'calculate_polygons' is not defined",
      "Test 2: FAIL - name 'calculate_polygons' is not defined",
      "Test 3: FAIL - name 'calculate_polygons' is not defined"
    ],
    "generated_code": "def calculate_hexagons(nrows, ncols, start_row, start_col, step):\r\n    points = []\r\n    for i in range(ncols * 2 + 1):\r\n        row = start_row - (i // ncols) * step\r\n        col = i % ncols\r\n        if col == 0:\r\n            row += step / 2\r\n        elif col == ncols - 1:\r\n            row -= step / 2\r\n        points.append((row, start_col + (i - 2 * ncols) // 2))\r\n    return [[points[i], points[j]] for i in range(len(points)) for j in range(i+1, len(points))]",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_to_integer(binary): \r\n\tresult = 0\r\n\tfor digit in binary:\r\n\t\tresult = result * 2 + int(digit) \r\n\treturn str(result)",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def remove_lowercase(str):\r\n  return re.sub(r'[a-z]', '', str)",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'nlargest' is not defined",
      "Test 2: FAIL - name 'nlargest' is not defined",
      "Test 3: FAIL - name 'nlargest' is not defined"
    ],
    "generated_code": "def heap_queue_smallest(arr,n):\r\n    res = nlargest(n,arr)\r\n    return res[:n]",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def surfacearea_cone(radius,height):\r\n\treturn math.pi*radius*(math.sqrt(height**2+radius**2)+radius)",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def gcd(a,b):\r\n   while(b): \r\n       t=b \r\n       b=a%b \r\n       a=t \r\n   return a ",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def diameter_circle(radius):\r\n\treturn 2 * radius * math.sqrt(2)",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(elements):\r\n    result = \"\"\r\n    for i in range(len(elements)):\r\n        result += str(elements[i]) + \" \"\r\n    return result[:-1] ",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def num_comm_div(num1, num2):\r\n   i = 1\r\n   while i <= max(num1,num2):\r\n      if ((num1 % i == 0) and (num2 % i == 0)):\r\n         result = i \r\n      i += 1\r\n   return result",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(x,y): \r\n    return x % y \r\n  \r",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def add_consecutive_nums(list): \r\n    result = [] \r\n      \r\n    # Traverse through all array elements \r\n    for i in range(0, len(list)): \r\n        sum = 0\r\n        temp_sum = 0\r\n          \r\n        # Check if current element is last element  \r\n        # in the iteration loop \r\n        if(i == len(list) - 1): \r\n            sum += list[i] \r\n             \r\n        else:\r\n            temp_sum = sum + list[i] + list[i+1]\r\n            while(temp_sum != sum and sum <= 100):\r\n                sum += list[i+1]\r\n                temp_sum += list[i+2]\r\n                \r\n            sum += list[i+1]\r\n            \r\n        result.append(sum)\r\n    \r\n    return(result) ",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Of_Series(n):\r\n  total_sum = 0\r\n  for i in range(1,n+1):\r\n    total_sum += i**3\r\n\r\n  return(total_sum)",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_order(arr): \r\n  i = 0\r\n  for j in range(len(arr)): \r\n    if arr[j] != 0 : \r\n      arr[i], arr[j] = arr[j], arr[i] \r\n      i += 1\r\n  return arr[:i] + [0]* (len(arr) - i) ",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def permutation_coefficient(p, n):\r\n   if p > n:\r\n      return -1\r\n   else:\r\n      return int(factorial(n)/(factorial(p)*factorial(n-p)))",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(word_list, remove_word_list):\r\n    word_set = set(remove_word_list)\r\n    new_list = [word for word in word_list if word not in word_set]\r\n    return new_list",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def same_order(l1,l2):\r\n    # your code here\r\n    return sorted(list(set(l1) & set(l2))) == l1[::] and l2[::]==sorted(list(set(l1) & set(l2)))\r\n \r",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'average_Odd' is not defined",
      "Test 2: FAIL - name 'average_Odd' is not defined",
      "Test 3: FAIL - name 'average_Odd' is not defined"
    ],
    "generated_code": "def average_odd(n):\r\n  s = sum([i for i in range(1,n+1) if(i%2!=0)]) # calculate sum of all odd numbers up to n\r\n  return int(s/n) # returns average of all odd numbers from 1 to n ",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'no_of_subsequences' is not defined",
      "Test 2: FAIL - name 'no_of_subsequences' is not defined",
      "Test 3: FAIL - name 'no_of_subsequences' is not defined"
    ],
    "generated_code": "def is_prime(n):\r\n    if n==1:\r\n        return False\r\n    elif n>1:\r\n        for i in range(2,n):\r\n            if n % i == 0:\r\n                return False\r\n        else:\r\n            return True\r\n\r\ndef get_combinations(arr,k):\r\n    res=[]\r\n    c = [item for item in combinations(arr, len(arr))]\r\n    for x in c:\r\n        prod = 1\r\n        for y in x:\r\n            prod *= y\r\n        if prod < k and not(is_prime(prod)):\r\n            res.append(x)\r\n    print(res)\r\n    \r",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def find_Min_Sum(n):\r\n    sum = n * (n + 1)//2 #Sum of all numbers from 1 to n\r\n    x=math.ceil(math.sqrt(n)) #Finding square root of n\r\n    y= int(x*x)\r\n    if(y == n):\r\n        z = (x-1)*(x+1)//2 #Sum of all perfect squares smaller than n\r\n        r = z - ((y-n))\r\n    else:\r\n        r=n-x+x+1 #Subtracting the difference between n and its nearest square\r\n    return sum - r // x  # subtracting it with x*sum/2 which is sum of factors of n itself.",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_element_freq(tup):\r\n    d = dict()\r\n    for i in tup:\r\n        if type(i)==tuple:\r\n            d.update(count_element_freq(i))\r\n        else:\r\n            if i in d.keys():\r\n                d[i] += 1\r\n            else:\r\n                d[i] = 1\r\n    return(d)",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_str(tup,str):\r\n    lst=[]\r\n    for i in tup:\r\n        lst.append(i)\r\n        lst.append(str)\r\n    return(lst)",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_elements(test_list):\r\n    # Initialize variable for total_sum\r\n    total_sum = 0\r\n\r\n    # Iterate through each element in test_list\r\n    for i in range(len(test_list)):\r\n        # Add the current element to total_sum\r\n        total_sum += test_list[i]\r\n    return total_sum",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def modular_sum(arr, n, m):\r\n    mod = [0] * (m + 1)\r\n    for i in range(n):\r\n        temp = mod.copy()\r\n        for j in range(m, -1, -1):\r\n            if (j == 0): \r\n                temp[j] = arr[i]\r\n                continue\r\n            else:\r\n                temp[j] = (temp[j % m] + temp[(j - 1) % m]) % m\r\n\r\n    return ((mod[0] != 0 and arr[n-1] > 0) or (mod[m-1] == 0 and arr[n-1] <= 0)) or (temp[m-1] == 0 and (arr[n-1] >= 0 or (n - 1) < m))",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list indices must be integers or slices, not float",
      "Test 2: FAIL - list indices must be integers or slices, not float",
      "Test 3: FAIL - list indices must be integers or slices, not float"
    ],
    "generated_code": "def radix_sort(arr): \r\n    # Find maximum number to know number of digits \r\n    max1 = max(arr) \r\n  \r\n    # Do counting sort for every digit. Note that instead \r\n    # of passing digit number, exp is passed. exp is 10^i \r\n    # where i is current digit number\r\n    exp = 1\r\n    while(max1 / exp > 0):\r\n        count_arr = [0] * 10 \r\n        output = [0] * len(arr) \r\n  \r\n        # Store count of occurrences in count_array[] \r\n        for i in arr: \r\n            index = (i / exp) % 10\r\n            count_arr[index] += 1\r\n      \r\n        # Change count_arr[i] so that count_array now contains actual position of this digit from right side \r\n        for i in range(1, 10): \r\n            count_arr[i] += count_arr[i - 1]\r\n          \r\n        # Build the output array \r\n        i = len(arr) - 1\r\n        while(i >= 0): \r\n            index = (arr[i] / exp) % 10\r\n            output[count_arr[index] - 1] = arr[i] \r\n            count_arr[index] -= 1\r\n            i -= 1\r\n      \r\n        # Copy the output array to arr, so that arr now contains sorted numbers according to current digit \r\n        for i in range(len(arr)): \r\n            arr[i] = output[i] \r\n        exp *= 10\r\n    return arr",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(arr):\r\n    pos = arr[0]\r\n    for i in range(len(arr)):\r\n        if pos < arr[i]:\r\n            pos = arr[i]\r\n    print(pos) \r\n    return(pos)",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sqrt_root(n):\r\n   x = n\r\n   y = 1\r\n\r\n   while(y*y < n):\r\n       y += 1\r\n   return y-1 if ((y*y) == n) else x/y",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def volume_tetrahedron(s):\r\n  return (math.sqrt(2)/12)*s**3",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'get_lcm' is not defined",
      "Test 2: FAIL - name 'get_lcm' is not defined",
      "Test 3: FAIL - name 'get_lcm' is not defined"
    ],
    "generated_code": "def gcd(a, b): \r\n    if (a == 0) : \r\n        return b; \r\n    return gcd(b % a , a); \r\n\r",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_isosceles(a,b,c):  #a<b<c\r\n    if(a == b and b==c):\r\n        return True\r\n    else:\r\n        return False",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lbs(a):\r\n    m = len(a)\r\n    dpL = [0] * m\r\n    dpR = [0] * m\r\n\r\n    # Calculate lengths of max length increasing subsequence on left and right side\r\n    l = r = -float(\"inf\")\r\n    for i in range(0,m):\r\n        if a[i]>r:\r\n            r=a[i]\r\n        dpL[i]=l+1\r\n        l=max(l,dpL[i])\r\n    \r\n    # Calculate lengths of max length decreasing subsequence on right side.\r\n    l = r = float('inf')\r\n    for i in reversed(range(m)):\r\n        if a[i]<l:\r\n            l=a[i]\r\n        dpR[i]=r-1\r\n        r=min(r,dpR[i])\r\n\r\n    ans=0\r\n    for i in range(0,m):\r\n        x=(dpL[i]+dpR[i]-1)+1\r\n        ans=max(ans,x)\r\n\r\n    return ans+1",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_string(string):\r\n    def checkUpper(char): \r\n        return char.isupper() \r\n\r\n    def checkLower(char): \r\n        return char.islower()  \r\n\r\n    def checkNum(num): \r\n        return num.isdigit()\r\n\r\n    def minLength(len_): \r\n        if len == None: \r\n            raise TypeError(\"Length is not defined.\")\r\n  \r\n    result = [ ]\r\n    if not isinstance(string, str): \r\n        result.append('Input is not a valid string.') \r\n    elif not all([checkUpper(c) for c in string]): \r\n        result.append('String must have 1 upper case character.') \r\n    elif not all([checkLower(c) for c in string]):\r\n        result.append('String must have 1 lower case character.') \r\n    elif not all([checkNum(c) for c in string]):\r\n        result.append('String must have 1 digit.')\r\n    else:\r\n        result.append('Valid string.')\r\n\r\n    return [''.join(result)]*len(result)",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_increasing_subsequence(arr, n): \r\n    dp = [0 for i in range(n)] \r\n    dp[0] = arr[0] \r\n  \r\n    for i in range(1,n): \r\n        dp[i] = arr[i] \r\n        for j in range(i): \r\n            if (arr[j] < arr[i]) and (dp[i]< dp[j] + arr[i]): \r\n                dp[i] = dp[j] + arr[i] \r\n                \r\n    return dp[n-1] ",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'parallel_lines' is not defined",
      "Test 2: FAIL - name 'parallel_lines' is not defined",
      "Test 3: FAIL - name 'parallel_lines' is not defined"
    ],
    "generated_code": "def is_parallel(line_1,line_2):\r\n    # if slope of both lines are equal then they are parallel\r\n    x1 = line_1[0]\r\n    y1 = line_1[1]\r\n    x2 = line_1[2]\r\n    y2 = line_1[3]\r\n\r\n    m1 = (y2 - y1) / (x2 - x1)\r\n    x1 = line_2[0]\r\n    y1 = line_2[1]\r\n    x2 = line_2[2]\r\n    y2 = line_2[3]\r\n    m2 = (y2 - y1) / (x2 - x1)\r\n\r\n    return (abs(m1-m2)) <= math.pow(10,-7);",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def capitalize_first_last_letters(s):\r\n  return ' '.join([re.sub(r'^|\\s', lambda x: x.group().upper(), i) for i in s.split()])",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not subscriptable",
      "Test 2: FAIL - 'int' object is not subscriptable",
      "Test 3: FAIL - 'int' object is not subscriptable"
    ],
    "generated_code": "def get_pairs_count(arr, target_sum, count):\r\n  seen = set()\r\n  for i in range(len(arr)):\r\n    complement = target_sum - arr[i]\r\n    if complement in seen:\r\n      count[0] += 1\r\n    else:\r\n      seen.add(arr[i])\r\n  return count[0]",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length(lst):\r\n    n=len(min(lst,key=lambda x:len(x))) \r\n    res=[]\r\n    for i in lst:\r\n        if len(i)==n:\r\n            res.append(i)\r\n    return(res)",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def jacobsthal_lucas(n):\r\n  l = [0, 2]\r\n  for i in range(2,n+1): \r\n    l.append((l[i-1] + l[i-2]) * 2)\r\n  print(l[n])\r\n  return l[n]",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def negative_count(nums):\r\n    n=len(nums)\r\n    neg=nums.count(-1)\r\n    pos=n-neg\r\n    return round((neg/n),2)",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_coins(coins, n, S): \r\n    dp = [0 for i in range(S + 1)] \r\n    for s in range(1, S + 1): \r\n        for coin in coins: \r\n            if coin <= s and dp[s - coin] != float('inf'): \r\n                temp = 1 + dp[s-coin] \r\n                if dp[s] == float('inf') or dp[s] > temp : \r\n                    dp[s] = temp\r\n    return dp[S]\r\ndef min_coins1(n,S): \r\n    m = [[0 for x in range(S+1)]for y in range(len(coins)+1)] \r\n  \r\n    for i in range(m[0]): \r\n        m[i][0] = True \r\n    for j in range(m[1]):\r\n        m[0][j] = False\r\n    for i in range(1,len(m)):\r\n        for j in range(1,len(m[0])):\r\n            if (coins[i-1] > j):\r\n                m[i][j] = m[i-1][j]\r\n            else:\r\n                m[i][j] = m[i-1][j] or m[i-1][j-coins[i-1]]\r\n    for i in range(len(m)):\r\n        print(m[i])\r\n    for j in range(len(m[0])):\r\n        print(\"index=\",i,\"|\",\"value=\",(S-j),\" | \",m[len(m)-1][j]) \r\n    index=len(m)-1   \r\n    while(index>=0): \r\n        flag=False \r\n        for i in range(len(m[0])): \r\n            if m[index][i]==True:\r\n                index=i \r\n                break\r\n        print(index)\r\n        flag=True \r\n        if(flag==False):\r\n            break \r\n        for i in range(index-1,-1,-1): \r\n            if (coins[i] == index):\r\n                index=i\r\n                break\r\n    #print(index) \r\n    if (not m[index][S]):\r\n        return -1 \r\n    else:\r\n        return len(m)-1-index+1 \r\n\r",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'str' object has no attribute 'sort'",
      "Test 2: FAIL - 'str' object has no attribute 'sort'",
      "Test 3: FAIL - 'str' object has no attribute 'sort'"
    ],
    "generated_code": "def check_permutation(str1,str2): \r\n    # Sort both string and compare them \r\n    s = str1.sort() \r\n    t = str2.sort()\r\n    return(s == t)",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_datatype(tuple_input, datatype):\r\n    new_tuple = ()\r\n    for i in tuple_input:\r\n        if not isinstance(i, datatype):\r\n            new_tuple += (i,)\r\n    return new_tuple\r\n\r",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search_literal(pattern, text):\r\n    return (text.find(pattern), len(pattern)) if pattern in text else -1  # If pattern not found, then return (-1,-1)",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'pi' is not defined",
      "Test 2: FAIL - name 'pi' is not defined",
      "Test 3: FAIL - name 'pi' is not defined"
    ],
    "generated_code": "def topbottom_surfacearea(r):\r\n  return (pi*r**2)*2+2*pi*r*(r*2)",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(arr,n):\r\n    return arr[n-1:]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_repeated_word(s):\r\n  s=s.lower()\r\n  l = [x for x in s.split() if x not in (\"the\", \"is\", \"at\", \"in\", \"on\")]\r\n  return l[0] if len(l) > 0 else None",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\r\n    result = tuple(string_list)\r\n    return(result)",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "def basesnum_correspondingnum(bases,numbers):\r\n    return [int(i**j) for i,j in zip(map(int,bases),numbers)]",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Diff(arr,n):\r\n    freq = []\r\n    for i in range(0,n): \r\n        flag=1\r\n        for j in range(i+1,n): \r\n            if arr[i] == arr[j]: \r\n                flag = 0\r\n                break\r\n        if flag==1:\r\n            freq.append(arr[i])      \r\n    print(freq)\r\n    ans = max(freq) - min(freq)\r\n    return ans\r",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_abundant(number):\r\n    sum = 0\r\n    for i in range(1, number // 2 + 1):\r\n        if number % i == 0:\r\n            sum += i\r\n    return sum > number",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def fill_spaces(input_string):\r\n    output = re.sub(r\"[ ,\\.]\",\":\",input_string)\r\n    return(output)",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_digits(x,y):\r\n    z=x+y\r\n    return len(str(z))",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def flatten_tuple(lst):\r\n    res = ''\r\n    for i in lst:\r\n        res += str(i) + ' '\r\n    print(res)\r",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_F_and_L_bits(x):\r\n  x=x^((x>>1)|(~x<<1)) \r\n  return x",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_occurence_char(string,char):\r\n    l=len(string)\r\n    for i in range(l-1,-1,-1):\r\n        if string[i]==char:\r\n            return(i+1)    \r\n    else:\r\n        return(None)",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Total_Hamming_Distance(n):\r\n    # Hamming distance is the number of differing bits between two binary strings.\r\n    # To find out the total hamming distance for all the binary representation of integers\r\n    # in range [0, n] we just have to count the total no. of ones and zeros in their binary form.\r\n\r\n    count = bin(n).count('1') - int(bin(n)[1:] == '0')\r\n\r\n    return count * 2 + (n+1)//2 * ((n+1)//2)\r\n\r",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'bisect' is not defined",
      "Test 2: FAIL - name 'bisect' is not defined",
      "Test 3: FAIL - name 'bisect' is not defined"
    ],
    "generated_code": "def longest_increasing_subsequence(nums):\r\n    lis = [nums[0]]\r\n    for i in range(1, len(nums)):\r\n        if nums[i] > lis[-1]:\r\n            lis.append(nums[i])\r\n        else:\r\n            index = bisect.bisect_left(lis, nums[i])\r\n            lis[index] = nums[i]\r\n    return len(lis)",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n): \r\n    ans =0;  \r\n    for i in range(1,n+1):  \r\n        ans += (2*i - 1)**5  # Summation formula is (2*n-1)^5.  \n    return ans  # Return final result.",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'find_Max' is not defined",
      "Test 2: FAIL - name 'find_Max' is not defined",
      "Test 3: FAIL - name 'find_Max' is not defined"
    ],
    "generated_code": "def find_max(arr,start,end):\r\n    if start == end:\r\n        return arr[start]\r\n    mid = int((start + end)/2)\r\n    max_left = find_max(arr,start,mid)\r\n    max_right = find_max(arr,mid+1,end)\r\n\r\n    if arr[mid] > max_left and arr[mid] > max_right:\r\n        return arr[mid]\r\n    elif arr[start] > arr[end]:\r\n        return arr[0]\r\n    else:\r\n        return arr[-1]",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_column(l,column):\r\n    col=[]\r\n    for x in l:\r\n        col.append(x[column])\r\n    return col",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Seq_Linear' is not defined",
      "Test 2: FAIL - name 'Seq_Linear' is not defined",
      "Test 3: FAIL - name 'Seq_Linear' is not defined"
    ],
    "generated_code": "def seq_linear(a):\r\n    if(len(a)>2 and len(set(a))==len(a)):\r\n        print(\"Linear Sequence\")\r\n    else:\r\n        print(\"Non Linear Sequence\")",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for +: 'int' and 'str'",
      "Test 2: FAIL - unsupported operand type(s) for +: 'int' and 'str'",
      "Test 3: FAIL - unsupported operand type(s) for +: 'int' and 'str'"
    ],
    "generated_code": "def tuple_to_float(tup):\r\n    if len(tup) != 2:\r\n        raise ValueError(\"The input must be of length 2\")\r\n    else:\r\n        float_val = float(tup[0] + str(tup[1]))\r\n        return float_val",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(list_):\r\n    res = []\r\n    for i in range(0,len(list_),2):\r\n        res.append(int(list_[i]))\r\n    return res",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def difference(n): \r\n    res = ((n * (n + 1)) / 2) ** 2 - (n * (n + 1) * (2*n + 1)) / 6\r\n    return int(res)",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Odd_Pair(arr,N): \r\n    res = 0\r\n    for i in range(N-1):\r\n        for j in range(i+1, N):\r\n            if ((arr[i] ^ arr[j]) % 2 != 0):  \r\n                res += 1\r\n\r\n    return res",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(str):\r\n    str = \"\".join([i.swapcase() for i in list(str)])\r\n    return str",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'digit_distance_nums' is not defined",
      "Test 2: FAIL - name 'digit_distance_nums' is not defined",
      "Test 3: FAIL - name 'digit_distance_nums' is not defined"
    ],
    "generated_code": "def digit_distance(nums):\r\n    sum = 0\r\n    while nums != 0:\r\n        sum += abs((nums % 10)-(nums // 10))\r\n        nums //= 10\r\n    return(sum)",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def max_sub_array_sum(A):\r\n    global_max = float(\"-inf\")\r\n    local_max = 0\r\n    for x in A:\r\n        local_max += x\r\n        if local_max < 0 :\r\n            local_max = 0\r\n        elif local_max > global_max : \r\n            global_max = local_max\r\n        \r\n    return global_max",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - union_elements() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - union_elements() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - union_elements() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def union_elements(test_tuple):\r\n    new_list = set(test_tuple[0]) | set(test_tuple[1])\r\n    res = list(new_list)\r\n    res.sort()\r\n    return tuple(res)",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_elements(test_tuple):\r\n    d = {}\r\n    for t in test_tuple:\r\n        if t[0] not in d.keys():\r\n            d[t[0]] = [t[1]]\r\n        else:\r\n            d[t[0]].append(t[1])\r\n        if t[1] not in d.keys():\r\n            d[t[1]] = [t[0]]\r\n        else:\r\n            d[t[1]].append(t[0])\r\n\r\n    res = []\r\n    for key, value in d.items():\r\n        temp = list(value)\r\n        if len(temp) > 1:\r\n            temp.sort()\r\n            res.append({key: temp})\r\n\r\n    return(res)",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Find_Max_Length(arr):\r\n    max_len = 0\r\n    for i in range(len(arr)):\r\n        temp_max = 0\r\n        sub_arr = arr[i]\r\n        for j in range(i + 1 , len(arr)):\r\n            if all(isinstance(item,int) for item in sub_arr): \r\n                temp_max += 1 \r\n                sub_arr.append(arr[j])\r\n            else:\r\n                break\r\n        if temp_max > max_len:\r\n            max_len = temp_max \r\n    return(max_len)",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def extract_values(strng):\r\n    result = []\r\n    i=0\r\n    while True:\r\n        if strng[i] == '\"':\r\n            start = i\r\n            end = len(strng)\r\n            for j in range(len(strng)):\r\n                if strng[j] == '\"':\r\n                    start += 1\r\n                    break\r\n            if end != start:\r\n                result.append(strng[start:end])\r\n        else:\r\n            i+=1\r\n        if i > len(strng) - 4:\r\n            return result[:]\r\n    return result[:]",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Pairs(A,n): \r\n    # Counting pairs with same numbers \r\n    c = 0\r\n    for i in range(0, n-1):\r\n        for j in range(i+1, n): \r\n            if A[i] == A[j]: \r\n                c += 1\r\n\r\n    # Calculating total number of possible pairs \r\n    total = n * (n - 1) // 2\r\n  \r\n    # Subtracting pairs having same elements \r\n    return (total - c) // 2",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(s): \r\n    l = list(s) \r\n    return(l)",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(n):\r\n    return sum(int(i) for i in str(n))",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(l):\r\n    for i in range(0,len(l)-1): \r\n        if l[i] > l[i+1]: \r\n            return False\r\n    else: \r\n        return True",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def empty_list(n):\r\n    return [{}, {}, {}, {}, {}] * n  # use repetition operator (*) to repeat the same value 'n' times and assign it to the variable\r\n    # return [{'key': None} for _ in range(n)]  # alternative solution using list comprehension to achieve the desired output.",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(l):\r\n    for i in range(len(l)):\r\n        l[i] = sorted(l[i])\r\n    return l",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(list1,list2):\r\n    res = []\r\n    for i in list1:\r\n        temp = [x for x in i.split() if x not in list2]\r\n        if len(temp) != 0:\r\n            res.append(\" \".join(temp))\r\n    return(res)",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TabError: inconsistent use of tabs and spaces in indentation"
    ],
    "generated_code": "def max_sum_pair_diff_lessthan_K(arr,k,N):\r\n  arr.sort()\r\n  ans = []\r\n  i,j = 0, N-1\r\n  while(i<j):\r\n    if abs(arr[i]-arr[j]) <= k:\r\n      ans.append((arr[i], arr[j]))\r\n      i+=1; j-=1\r\n    elif arr[i] - arr[j] > k:\r\n      j-=1\r\n    else:\r\n      i+=1\r\n  ans.append( (arr[i], arr[j])) \r\n  print(max(ans,key=lambda x:x[1])[1])\r\n  return max(sum(x)for x in ans)\r\n\tmax_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4)",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def two_unique_nums(lists):  # input is a list containing multiple integers\r\n    result = []\r\n    for i in range(len(lists)):\r\n        for j in range(i+1, len(lists)):  # loop through each element and check if it exists already in another array\r\n            if lists[i] == lists[j]:\r\n                continue  # skip duplicates\r\n            else:\r\n                result.append(lists[i])\r\n                break\r\n    return result",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def unique_product(arr):\r\n    res = 1\r\n    for i in arr:\r\n        if i not in [x for x in arr if x != i]:\r\n            res *= i\r\n    return res",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def surfacearea_cylinder(r,h):\r\n  return round(math.pi*(r*r + h*h)*2) + r*h*2;",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_no(x,y,n,m):\r\n    c=0\r\n    for i in range(n,m+1):\r\n        if(i%x!=0 and i%y!=0):\r\n            c=c+1\r\n    return(c)",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Sub_Array' is not defined",
      "Test 2: FAIL - name 'is_Sub_Array' is not defined",
      "Test 3: FAIL - name 'is_Sub_Array' is not defined"
    ],
    "generated_code": "def is_sub_array(arr1,arr2,m,n): \r\n    for i in range(0, m - n + 1): \r\n        sum = 0\r\n        for j in range(i, i + n):\r\n            sum += arr2[j]  \r\n        if sum == arr1[i]: \r\n            return True\r\n    return False ",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit_Factorial(n): \r\n    fact = n \r\n    res = 1\r\n    for i in range(2,n+1): \r\n        res = ((res * fact)%10) \r\n        fact = (fact*(i))%10\r\n    return(res)",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def interleave_lists(list_a,list_b,list_c):\r\n    return list(zip(*[(list_a[i], list_b[i], list_c[i]) for i in range(min(len(list_a), len(list_b), len(list_c)))]))",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_dissimilar(tup_1, tup_2): \r\n\treturn set(tup_1) ^ set(tup_2)",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_even(mixed_tuple):\r\n  list_of_evens = []\r\n  for element in mixed_tuple:\r\n    if type(element) is int and element % 2 == 0:\r\n      list_of_evens.append(element)\r\n    elif isinstance(element, tuple):\r\n      list_of_evens.extend(extract_even(element))\r\n  return tuple(list_of_evens)",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surface_Area(x,y):\r\n    a = x*y\r\n    s = 0\r\n    for i in range(x):\r\n        s += (y+1)\r\n    return  a + s * y/2.0",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def my_dict(d):\r\n    return bool(d)",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def catalan_number(n): \r\n\tif n==1: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn ((2 * (n - 1)) * \r\n\t\t\tcatalan_number(n-1))/n ",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def find_adverbs(sentence):\r\n    pattern = r'\\b\\w+ly\\b'\r\n    matches = [match.start() for match in re.finditer(pattern, sentence)]\r\n    result = []\r\n    i = 0\r\n    while(i < len(matches)):\r\n        if i == len(matches)-1:\r\n            result.append(sentence[matches[i]:])\r\n        else:\r\n            start = matches[i]\r\n            end = matches[i + 1]\r\n            result.append(sentence[start:end])\r\n        i += 2\r\n    return(result)",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'push' is not defined",
      "Test 2: FAIL - name 'push' is not defined",
      "Test 3: FAIL - name 'push' is not defined"
    ],
    "generated_code": "def expensive_items(dataset,n):\r\n  h = []\r\n  for item in dataset:\r\n    if len(h) < n:\r\n      push(h,item)\r\n    else:\r\n      cur_max = pop(h)\r\n      if item['price'] > cur_max['price']:\r\n        push(h,item)\r\n  return [pop(h) for _ in range(n)]",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_Arr(arr,n,m):\r\n  for i in range(0, m):\r\n    arr.append(arr[0])\r\n    del arr[0]\r\n  return arr \r",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(l): \r\n    return tuple(l)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(nums):\r\n    nums.sort()\r\n    diff = nums[-1] - nums[0]\r\n    return diff",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perfect_squares(a,b): \r\n    arr = [i**2 for i in range(a, b+1)]  \r\n    return arr\r",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def polar_rect(r, theta): \r\n    x = r * math.cos(theta)  \r\n    y = r * math.sin(theta)\r\n    return(x,y)",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(List): \r\n\treturn List[-1:] + List[1:-1] + List[:1] ",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_Of_product(n): \r\n    result = pow(2,n)-pow(2,(n//2)) +1\r\n    if n%2 == 0 : \r\n        result -= 1 \r\n    return result",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def removezero_ip(ip):\r\n    pattern = r'^(0+).*'\r\n    res = re.sub(pattern,'\\\\g<1>',ip)\r\n    return(res)",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_even_odd(lst):\r\n    even=lst.count(2*int(x) for x in lst)\r\n    odd=len(lst)-even\r\n    return abs(even-odd)",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(s1,s2):\r\n    s1=s1.lower()\r\n    s2=s2.lower()\r\n    if len(s1) !=len(s2):\r\n        print (\"Not Possible\")\r\n        return\r\n    else:\r\n        c=0 \r\n        for i in range(len(s1)):\r\n            if (s1[i] == '0' and s2[i] =='1')or(s1[i]=='1'and s2[i] == '0'):\r\n                continue\r\n            elif (s1[i] == '1' and s2[i] =='1'):\r\n                c=c+1\r\n            elif (s1[i] == '0' and s2[i] =='0'):\r\n                c=c+1\r\n            else:\r\n                break\r\n        if(c==len(s1)-1):\r\n            print(0)\r\n        else:\r\n            print(c)",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sys' is not defined",
      "Test 2: FAIL - name 'sys' is not defined",
      "Test 3: FAIL - name 'sys' is not defined"
    ],
    "generated_code": "def tuple_size(tup):\r\n    return sys.getsizeof(tup)",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_kth() takes 3 positional arguments but 5 were given",
      "Test 2: FAIL - find_kth() takes 3 positional arguments but 5 were given",
      "Test 3: FAIL - find_kth() takes 3 positional arguments but 5 were given"
    ],
    "generated_code": "def find_kth(a, b, k):\r\n    i = len(a)\r\n    j = len(b)\r\n\r\n    while(i != 0 and j != 0):\r\n\r\n        if(len(a[:i]) < len(b)):\r\n            a.append(0)\r\n\r\n        if(len(b[:j]) < len(a)):\r\n            b.append(0)\r\n\r\n        m = min(len(a[:i]),len(b[:j]))\r\n\r\n        if(m == 0): \r\n            return b[j-1]\r\n\r\n        if(a[i-1] > b[j-1]):\r\n            a.remove(a[i-1])\r\n        else:\r\n            b.remove(b[j-1])\r\n\r\n        i -= 1\r\n        j -= 1\r\n    \r\n    return a[k-i+j-1] if len(a) >= k+i-1 else b[k-j+i-1] if len(b) >= k+j-1 else None",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def armstrong_number(n):\r\n    temp=n\r\n    sum=0\r\n    while temp>0:\r\n        r=temp%10\r\n        sum=sum+(r**3)\r\n        temp=int(temp/10)\r\n    if n==sum:\r\n        return True\r\n    else:\r\n        return False ",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n): \r\n    # sum=0\r\n    sum = 0 \r\n    for i in range(1,n+1):\r\n        sum +=i\r\n    avg=sum/n    \r\n    return (sum ,avg)",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Even' is not defined",
      "Test 2: FAIL - name 'is_Even' is not defined",
      "Test 3: FAIL - name 'is_Even' is not defined"
    ],
    "generated_code": "def is_even(n): \r\n    if (n & 1 == 0): \r\n        return True\r\n    else: \r\n        return False",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]