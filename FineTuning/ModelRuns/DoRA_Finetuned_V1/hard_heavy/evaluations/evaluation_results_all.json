[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Occ(strng, char_to_remove):\n    # Removing the first occurrence of the character\n    strng = strng.replace(char_to_remove, \"\", 1)\n    \n    # Checking if the modified string still contains the original character to be removed\n    while char_to_remove in strng:\n        strng = strng.replace(char_to_remove, \"\", 1)  # Removing the second occurrence\n    \n    return strng\n\n# Test cases\nprint(remove_Occ(\"hello\", \"l\"))  # Expected output: \"heo\"\nprint(remove_Occ(\"abcda\", \"a\"))  # Expected output: \"bcd\"\nprint(remove_Occ(\"PHP\", \"P\"))   # Expected output: \"H\"",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_matrix(matrix):\n    # Sort the rows based on their sums\n    sorted_rows = sorted(matrix, key=sum)\n    return sorted_rows",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\nimport re\n\ndef count_common(lst):\n    # Remove punctuation from each word and split into individual elements\n    words = [re.sub(r'[^\\w\\s]', '', word) for word in lst]\n    \n    # Count occurrences of each word using Counter\n    counts = Counter(words)\n    \n    # Find the maximum occurrence value\n    max_occurrence = max(counts.values(), default=0)\n    \n    # Filter words that have the maximum occurrence\n    most_common_words = [(word, count) for word, count in counts.items() if count == max_occurrence]\n    \n    return most_common_words\n\n# Test cases\nprint(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']))",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Volume(a, b, c):\n    # calculate the area of the base triangle using Heron's formula\n    s = (a + b + c) / 2\n    area_base_triangle = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    # calculate the volume of the triangular prism\n    volume_triangular_prism = area_base_triangle * c\n    \n    return volume_triangular_prism",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_lowerstring(s):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Split the string into characters\n    for char in s:\n        # If the character is not a lowercase letter, add it to the result and move on\n        if not char.islower():\n            result.append(char)\n        else:\n            # If it's a lowercase letter, continue checking the rest of the string\n            for i in range(len(result) - 1, -1, -1):\n                # If the current letter in the result matches the lowercase letter, join them together and break out of the loop\n                if result[i].islower() == char.islower():\n                    result[i] += char\n                    break\n    \n    return ''.join(result)\n\n# Test cases\nprint(split_lowerstring(\"AbCd\"))  # Expected output: \"bC\"\nprint(split_lowerstring(\"Python\"))  # Expected output: \"ytHno\"\nprint(split_lowerstring(\"Programming\"))  # Expected output: \"rorgramming\"",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the regular expression pattern to match lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for matches in the given text using the defined pattern\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the function\nprint(text_lowercase_underscore(\"aab_cbbbc\"))   # Expected output: Found a match!\nprint(text_lowercase_underscore(\"aab_Abbbc\"))   # Expected output: Not matched!\nprint(text_lowercase_underscore(\"Aaab_abbbc\"))  # Expected output: Not matched!",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side_length):\n    return 4 * side_length",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_dirty_chars(str1, str2):\n    dirty_chars = \"\"\n    for char in str1:\n        if char not in str2:\n            dirty_chars += char\n    return dirty_chars\n\n# Test cases\nprint(remove_dirty_chars(\"probasscurve\", \"pros\"))  # Expected output: 'bacuve'\nprint(remove_dirty_chars(\"digitalindia\", \"talent\"))  # Expected output: 'digiidi'\nprint(remove_dirty_chars(\"exoticmiles\", \"toxic\"))  # Expected output: 'emles'",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_duplicate(arr):\n    \"\"\"\n    Check if the input list contains duplicates.\n    \n    Args:\n        arr (list): The list of integers to check for duplicates.\n        \n    Returns:\n        bool: True if there is at least one duplicate, False otherwise.\n    \"\"\"\n    return len(set(arr)) != len(arr)\n\n# Test cases to verify the correctness of the solution\nassert test_duplicate([1,2,3,4,5]) == False, \"Test case 1 failed\"\nassert test_duplicate([1,2,3,4, 4]) == True, \"Test case 2 failed\"\nassert test_duplicate([1,1,2,2,3,3,4,4,5]) == True, \"Test case 3 failed\"\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_woodall(n):\n    # Check if n is divisible by 9 and its square root rounded down to the nearest integer equals n divided by 9\n    return n % 9 == 0 and int((n**0.5)) ** 2 == n\n\n# Test cases\nprint(is_woodall(383))  # Expected output: True\nprint(is_woodall(254))  # Expected output: False\nprint(is_woodall(200))  # Expected output: False",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiples_of_num(m, n):\n    result = []\n    for i in range(n, n*m + 1, n):\n        result.append(i)\n    return result",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_duplicate(arr):\n    duplicates = set()\n    for num in arr:\n        if num in duplicates:\n            return num\n        duplicates.add(num)\n    return -1",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_Sum(list_of_lists):\n    max_sum = float('-inf')\n    for lst in list_of_lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def binary_to_decimal(binary_num):\n    # Convert binary string to decimal integer using int() with base 2 and negative sign check\n    return -int(binary_num, 2)\n\n# Test cases to verify the correctness of the function\nassert binary_to_decimal(\"100\") == 4\nassert binary_to_decimal(\"1011\") == 11\nassert binary_to_decimal(\"1101101\") == 109\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def find_Product(arr, target_sum):\n    total_product = 1\n    has_seen = set()\n    \n    for num in arr:\n        if num in has_seen:\n            continue\n        if sum(num) == target_sum:\n            total_product *= num\n            break\n        has_seen.add(target_sum - num)\n    \n    return total_product",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_k_elements(tuple_list, k):\n    # Check if every element in tuple_list appears exactly k times\n    from collections import Counter\n    count = Counter(element for inner_list in tuple_list for element in inner_list)\n    for key, value in count.items():\n        if value != k:\n            return False\n    return True\n\n# Test cases\nprint(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4))  # Expected output: True\nprint(check_k_elements([(7, 7, 7), (7, 7)], 7))  # Expected output: True\nprint(check_k_elements([(9, 9), (9, 9, 9, 9)], 7))  # Expected output: False",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'remove' is not defined",
      "Test 2: FAIL - name 'remove' is not defined",
      "Test 3: FAIL - name 'remove' is not defined"
    ],
    "generated_code": "def remove_digits(lst):\n    return [s for s in lst if not any(c.isdigit() for c in s)]",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the binomial coefficient C(n, k), also known as \"n choose k\".\n    \n    Args:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n    \n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    # Calculate the binomial coefficient using the formula: n! / (k! * (n-k)!)\n    numerator = math.prod(range(n, n - k, -1))\n    denominator = math.prod(range(1, k + 1))\n    return numerator // denominator",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Odd_Occurrence(arr, n):\n    count = [0] * (n + 1)\n    \n    for i in range(n):\n        count[arr[i]] += 1\n    \n    for j in range(1, n + 1):\n        if count[j] % 2 != 0:\n            return j\n    \n    return -1",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Count all substrings in string s that start and end with the same character.\n    \n    :param s: A string consisting of lowercase English letters.\n    :return: An integer representing the number of substrings where the first and last characters are equal.\n    \"\"\"\n    result = 0\n    for i in range(len(s)):\n        if i == 0:\n            char_count = [1] * 26\n        else:\n            char_count = list(map(lambda x: x + 1, map(lambda y: ord(y) - ord('a'), list(s[i-1:i+1]))))\n        \n        if min(char_count) > 0:\n            result += sum(char_count)\n    return result",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "from heapq import nlargest\nimport bisect\n\ndef func(lists, k):\n    def count_elements(nums):\n        counts = {}\n        for num in nums:\n            if num not in counts:\n                counts[num] = 0\n            counts[num] += 1\n        return counts\n    \n    total_counts = []\n    \n    # Flatten the list of lists into a single list\n    all_nums = [num for sublist in lists for num in sublist]\n    \n    # Count the occurrences of each number\n    counts = count_elements(all_nums)\n    \n    # Create a sorted list of tuples where each tuple is (count, number)\n    sorted_counts = sorted(counts.items())\n    \n    # Use the first k elements to form the heap\n    top_k_heap = sorted_counts[:k]\n    \n    # Add elements with frequency greater than or equal to the largest element in top_k_heap to the heap\n    for _, num in sorted_counts[k:]:\n        while top_k_heap and num >= top_k_heap[-1][0]:\n            bisect.insort(top_k_heap, (-top_k_heap.pop()[0], -num))\n        \n        if len(top_k_heap) > k:\n            top_k_heap.pop()\n    \n    # Extract the numbers from the heap as per their negative values\n    result = [-num for (_, num) in top_k_heap]\n    \n    return result[:-1]  # Return the result excluding the last element which might be None",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef max_Prime_Factors(n):\n    # Initialize the smallest prime divisor as 2\n    d = 2\n    \n    # Divide n by d until it is no longer divisible by d\n    while n % d == 0:\n        n //= d\n    \n    # Increment d and repeat the process until n becomes 1\n    while n != 1:\n        d += 1\n        \n        # Check if d divides n\n        while n % d == 0:\n            n //= d\n    \n    # If n is now 1, then the last value of d was the largest prime factor\n    return n",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_To_Binary(decimal_num):\n    \"\"\"\n    Converts a given decimal number to its binary representation.\n    \n    Args:\n    decimal_num (int): The decimal number to be converted.\n    \n    Returns:\n    str: The binary representation of the input decimal number.\n    \"\"\"\n    return bin(decimal_num)[2:]\n\n# Check function with provided data points\nassert decimal_To_Binary(10) == '1010', \"Test case 1 failed\"\nassert decimal_To_Binary(1) == '1', \"Test case 2 failed\"\nassert decimal_To_Binary(20) == '10100', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_missing(arr, n):\n    # Calculate the expected sum of numbers from 0 to n using the formula for the sum of an arithmetic series.\n    expected_sum = n * (n + 1) // 2\n    \n    # Calculate the actual sum of numbers in the array.\n    actual_sum = sum(arr)\n    \n    # The difference between the expected and actual sums is the missing number.\n    return expected_sum - actual_sum\n\n# Test cases\nprint(find_missing([1,2,3,5], 4))   # Output should be 4\nprint(find_missing([1,3,4,5], 4))   # Output should be 2\nprint(find_missing([1,2,3,5,6,7], 5)) # Output should be 4",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rect_num(n):\n    \"\"\"\n    Calculate the nth rectangular number.\n    \n    Parameters:\n    n (int): The position in the sequence of rectangular numbers\n    \n    Returns:\n    int: The nth rectangular number\n    \"\"\"\n    return n * (n + 1)\n\n# Test cases to verify the correctness of the function\nassert find_rect_num(4) == 20, \"Test case 1 failed\"\nassert find_rect_num(5) == 30, \"Test case 2 failed\"\nassert find_rect_num(6) == 42, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_Nth_Digit(m, n, k):\n    \"\"\"\n    Finds the k-th digit in the decimal representation of m/n.\n    \n    Parameters:\n        m (int): The numerator.\n        n (int): The denominator.\n        k (int): The position of the digit to be found starting from 0.\n        \n    Returns:\n        int: The k-th digit.\n    \"\"\"\n    def is_integer(numerator, denominator):\n        return int(numerator / denominator) == float(numerator / denominator)\n    \n    current_value = m / n\n    while not is_integer(current_value, 10):\n        if k < len(str(int(current_value))):\n            return str(int(current_value))[k]\n        current_value *= 10\n    \n    return str(int(current_value))[-k-1]\n\n# Check function with provided data points\nassert find_Nth_Digit(1, 2, 1) == 5, \"Test case 1 failed\"\nassert find_Nth_Digit(3, 5, 1) == 6, \"Test case 2 failed\"\nassert find_Nth_Digit(5, 6, 5) == 3, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 2: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 3: FAIL - '<' not supported between instances of 'str' and 'int'"
    ],
    "generated_code": "def sort_mixed_list(lst):\n    return sorted(lst)",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def div_even_odd(lst):\n    # Find the first even and odd numbers in the list\n    even = min(x for x in lst if x % 2 == 0)\n    odd = max(x for x in lst if x % 2 != 0)\n    \n    # Return their division result\n    return even / odd",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'rearange_string' is not defined",
      "Test 2: FAIL - name 'rearange_string' is not defined",
      "Test 3: FAIL - name 'rearange_string' is not defined"
    ],
    "generated_code": "from collections import Counter\n\ndef rearrange_string(s):\n    char_count = Counter(s)\n    \n    # Find the maximum frequency character in the string\n    max_char_freq = max(char_count.values())\n    \n    # Check if all occurrences of the most frequent character can form valid pairs\n    return 'YES' if max_char_freq <= len(s) // 2 else 'NO'",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef freq_element(lists):\n    result = []\n    for sublist in lists:\n        temp_counter = Counter(sublist)\n        result.append(temp_counter)\n    return result",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - KeyError: 0"
    ],
    "generated_code": "def find_Sum(arr, target_sum):\n    element_count = {}\n    for num in arr:\n        if num not in element_count:\n            element_count[num] = 0\n        element_count[num] += 1\n    \n    total_sum = 0\n    for key in element_count:\n        total_sum += min(element_count[key], target_sum // key)\n    \n    return total_sum * element_count[target_sum % len(arr)]\n\n# Test cases\nprint(find_Sum([1,2,3,1,1,4,5,6], 8))  # Expected output: 3\nprint(find_Sum([1,2,3,1,1], 5))         # Expected output: 3\nprint(find_Sum([1,1,2], 3))             # Expected output: 2",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Regular expression pattern to find sequences of lowercase letters joined with an underscore\n    pattern = '[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_string(text):\n    # Define the regex pattern to match words at the start of a string\n    pattern = '^\\\\w+'\n    \n    # Use the search method to find the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "def get_gcd(arr):\n    from math import gcd\n    return reduce(gcd, arr)",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_distinct(nums):\n    \"\"\"\n    This function checks if all elements in the given list of integers are distinct.\n    \n    Parameters:\n    nums (list): A list of integers.\n    \n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True\n\n# Test cases\nprint(test_distinct([1,5,7,9]))  # Expected output: True\nprint(test_distinct([2,4,5,5,7,9]))  # Expected output: False\nprint(test_distinct([1,2,3]))  # Expected output: True",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'factorial' is not defined",
      "Test 2: FAIL - name 'factorial' is not defined",
      "Test 3: FAIL - name 'factorial' is not defined"
    ],
    "generated_code": "def compute_Last_Digit(a, b):\n    # Calculate factorials of both numbers and get their last digits\n    fa = abs(int(str(factorial(a))[-1]))\n    fb = abs(int(str(factorial(b))[-1]))\n    \n    # If b is less than a, swap them to ensure b is always greater or equal to a\n    if b < a:\n        temp = a\n        a = b\n        b = temp\n    \n    # Calculate factorial difference between b and a\n    fd = abs(int(str(factorial(b - a))[0]) % 10)\n    \n    # Return the last digit of the division result\n    return fa * fb // fd",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(n):\n    # Convert the number to binary and remove the '0b' prefix\n    bin_num = format(n, 'b')\n    \n    # Iterate through each bit in the binary representation\n    for i in range(len(bin_num)):\n        if int(bin_num[i]) % 2 != 0:\n            # If the current bit is odd, flip it from '0' to '1'\n            bin_num = bin_num[:i] + '1' + bin_num[i+1:]\n    \n    # Return the resulting number as an integer\n    return int(bin_num, 2)",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def specified_element(lst, index):\n    return lst[index]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length_list(lst):\n    return min(range(len(lst)), key=lambda x: len(lst[x]))",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a, b, c):\n    # Check if all sides of the triangle are equal\n    return a == b and b == c\n\n# Test cases\nprint(check_equilateral(6, 8, 12))  # Output: False\nprint(check_equilateral(6, 6, 12))  # Output: False\nprint(check_equilateral(6, 6, 6))   # Output: True",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Equality(string_input):\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n    \n    Parameters:\n    - string_input (str): The input string to be checked.\n    \n    Returns:\n    - str: 'Equal' if the first and last characters are the same; otherwise, 'Not Equal'.\n    \"\"\"\n    # Ensure the input is indeed a string for safety\n    if type(string_input) != str:\n        raise ValueError('Input must be a string.')\n    \n    # Convert the string to lowercase for case-insensitive comparison\n    lower_string = string_input.lower()\n    \n    # Compare the first character with the last one\n    if lower_string[0] == lower_string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Test cases provided in the instruction can now be used to verify the correctness of the solution",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def counting_sort(arr):\n    count = [0] * 100\n    sorted_arr = [0] * len(arr)\n    \n    # Count each element's frequency\n    for num in arr:\n        count[num] += 1\n    \n    # Reconstruct the sorted array\n    index = 0\n    for i in range(100):\n        while count[i] > 0:\n            sorted_arr[index] = i\n            index += 1\n            count[i] -= 1\n    \n    return sorted_arr",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_gp(n, r, k):\n    return n**k * r**(n-k)\n\n# Test cases\nprint(tn_gp(1,5,2))  # Expected output: 16\nprint(tn_gp(1,5,4))  # Expected output: 256\nprint(tn_gp(2,6,3))  # Expected output: 486",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(n):\n    # Calculate the reverse of n\n    reversed_n = int(str(n)[::-1])\n    \n    # Check if n is one less than twice its reverse\n    if n == 2 * reversed_n - 1:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - local variable 'i' referenced before assignment",
      "Test 2: FAIL - local variable 'i' referenced before assignment",
      "Test 3: FAIL - local variable 'i' referenced before assignment"
    ],
    "generated_code": "def find_Max_Num(digits, length):\n    # Convert list of digits into a single string and sort it in descending order.\n    sorted_str = ''.join(sorted(str(i), reverse=True))\n    \n    # Initialize an empty string to build the result.\n    result = ''\n    \n    # Add each digit from the sorted string back into the result string.\n    for i in range(length):\n        result += str(sorted_str[i])\n    \n    return int(result)",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def opposite_Signs(num1, num2):\n    # Check if both numbers have different signs\n    return num1 * num2 < 0",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_octagonal(n):\n    # The formula to calculate the nth octagonal number\n    # Given n as input, it returns the nth octagonal number.\n    return int(((2*n**2 - n)/3))\n\n# Test cases to verify the correctness of the function\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_len_sub(arr, k):\n    dp = [1] * len(arr)\n    max_length = 0\n    \n    for i in range(1, len(arr)):\n        if abs(arr[i-1] - arr[i]) <= k:\n            dp[i] = dp[i-1] + 1\n            \n        max_length = max(max_length, dp[i])\n    \n    return max_length\n\n# Test cases\nprint(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8))  # Expected output: 5\nprint(max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7))  # Expected output: 4\nprint(max_len_sub([9, 11, 13, 15, 18], 5))  # Expected output: 1",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substrings' is not defined",
      "Test 2: FAIL - name 'count_Substrings' is not defined",
      "Test 3: FAIL - name 'count_Substrings' is not defined"
    ],
    "generated_code": "def count_substrings(s, k):\n    \"\"\"\n    This function takes in a string s and an integer k, and returns the number of substrings where the sum of its digits equals k.\n    \n    :param s: String representing the input sequence\n    :param k: Integer representing the target sum for substrings\n    :return: Count of substrings satisfying the condition\n    \"\"\"\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring_sum = sum(int(digit) for digit in s[i:j])\n            if substring_sum == k:\n                count += 1\n    return count\n\n# Check function with provided data points\nprint(count_substrings('112112', 6))  # Expected output: 6\nprint(count_substrings('111', 3))     # Expected output: 6\nprint(count_substrings('1101112', 7)) # Expected output: 12",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(lst):\n    if not lst:\n        raise ValueError(\"List is empty\")\n    \n    min_val = lst[0]\n    for num in lst:\n        if num < min_val:\n            min_val = num\n    return min_val",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def max_difference(tuples_list):\n    # Initialize variables to store the maximum and minimum values found so far\n    max_val = float('-inf')\n    min_val = float('inf')\n    \n    for tup in tuples_list:\n        current_val = tup[1] - tup[0]\n        \n        if current_val > max_val:\n            max_val = current_val\n        \n        if current_val < min_val:\n            min_val = current_val\n    \n    # Return the difference between the maximum value and the minimum value\n    return max_val - min_val\n\n# Test cases to verify the correctness of the function\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def subject_marks(subjects):\n    return sorted(subjects, key=lambda x: x[1])",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recursive_list_sum(lst):\n    if not lst:\n        return 0\n    else:\n        head = lst[0]\n        rest = lst[1:]\n        if isinstance(head, int):\n            return head + recursive_list_sum(rest)\n        elif isinstance(head, list):\n            return recursive_list_sum(head) + recursive_list_sum(rest)",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(numbers):\n    # Initialize a counter for positive numbers\n    positive_count = 0\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        # If the number is greater than zero, increment the counter\n        if num > 0:\n            positive_count += 1\n            \n    # Return the total count of positive numbers\n    return positive_count\n\n# Test case 1\nassert pos_count([1,-2,3,-4]) == 2, \"Test case 1 failed\"\n# Test case 2\nassert pos_count([3,4,5,-1]) == 3, \"Test case 2 failed\"\n# Test case 3\nassert pos_count([1,2,3,4]) == 4, \"Test case 3 failed\"\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'comb' is not defined"
    ],
    "generated_code": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number.\n    \n    Parameters:\n    n (int): The index of the Bell number to calculate.\n    \n    Returns:\n    int: The nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        total = 0\n        for k in range(n + 1):\n            total += bell_number(k - 1) * comb(n, k)\n        return total\n\n# Check function to verify the correctness of the solution\ndef check():\n    assert bell_number(2) == 2\n    assert bell_number(10) == 115975\n    assert bell_number(56) == 6775685320645824322581483068371419745979053216268760300\n    print(\"All test cases passed.\")\n\ncheck()",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(A):\n    # Check if the sequence is either non-decreasing or non-increasing\n    return A == sorted(A) or A == list(reversed(sorted(A)))",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_sublist(main_list, sub_list):\n    if len(sub_list) > len(main_list): \n        return False\n    for i in range(len(main_list)):\n        if main_list[i:i+len(sub_list)] == sub_list:\n            return True\n    return False",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_equal(tuples_list, expected_length):\n    \"\"\"\n    Checks if all tuples in the list have the same length.\n    \n    Parameters:\n    - tuples_list: List of tuples to be checked.\n    - expected_length: The expected length of each tuple.\n    \n    Returns:\n    A string indicating whether all tuples have the same length ('All tuples have same length'),\n    or if they don't ('All tuples do not have same length').\n    \"\"\"\n    lengths = [len(tup) for tup in tuples_list]\n    if len(set(lengths)) == 1:\n        return \"All tuples have same length\"\n    else:\n        return \"All tuples do not have same length\"\n\n# Test cases\nprint(get_equal([(11, 22, 33), (44, 55, 66)], 3)) # Expected output: All tuples have same length\nprint(get_equal([(1, 2, 3), (4, 5, 6, 7)], 3))     # Expected output: All tuples do not have same length\nprint(get_equal([(1, 2), (3, 4)], 2))              # Expected output: All tuples have same length",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True  # If gap is 1, we don't need to check again\n\n        # A new gap will be formed\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n# Test the function with provided data points\nprint(comb_sort([5, 15, 37, 25, 79]))  # Expected output: [5, 15, 25, 37, 79]\nprint(comb_sort([41, 32, 15, 19, 22]))  # Expected output: [15, 19, 22, 32, 41]\nprint(comb_sort([99, 15, 13, 47]))  # Expected output: [13, 15, 47, 99]",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dif_Square(n):\n    # Check if n is odd and greater than 1, then it cannot be represented as a difference of two squares.\n    if n > 1 and n % 2 == 1:\n        return False\n    \n    # For even numbers >=4, they can always be expressed as a difference of two squares.\n    if n >= 4:\n        return True\n    \n    # If the square root of n is an integer, subtracting its square from n will result in another perfect square.\n    sqrt_n = int(n**0.5)\n    return sqrt_n * sqrt_n == n",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef multiple_split(input_string):\n    # Use regex to replace each delimiter with an empty space\n    cleaned_string = re.sub(r'[\\s]+', ' ', input_string)\n    # Split the string by spaces\n    result_list = cleaned_string.split()\n    return result_list",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: string index out of range"
    ],
    "generated_code": "def is_samepatterns(patterns, sequences):\n    \"\"\"\n    Check if all provided sequences match the pattern.\n    \n    :param patterns: List of strings representing the pattern.\n    :param sequences: List of lists where each sublist represents a sequence.\n    :return: True if all sequences match the corresponding pattern, False otherwise.\n    \"\"\"\n    for i, seq in enumerate(sequences):\n        found = []\n        for p in patterns:\n            found.extend([j for j in range(len(p)) if p[j] == seq[i][j]])\n        if len(found) != len(seq[0]):\n            return False\n    return True\n\n# Test cases\nprint(is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])) # True\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])) # False\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])) # False",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_tuples(test_list, divisor):\n    # Initialize an empty list to store valid tuples\n    valid_tup = []\n    \n    # Iterate through each tuple in the test list\n    for tup in test_list:\n        # Check if every element in the current tuple is divisible by the divisor\n        if all(item % divisor == 0 for item in tup):\n            # If yes, add it to the valid_tup list\n            valid_tup.append(tup)\n    \n    # Return the list of tuples that meet the criteria\n    return valid_tup",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Squares(m, n):\n    # Calculate total possible horizontal lines and vertical lines\n    horizontals = m + 1\n    verticals = n + 1\n    \n    # The formula to calculate the number of squares is given by:\n    # (horizontals * verticals - horizontal_lines - vertical_lines + 1)\n    \n    # Subtracting 1 from each because the line between cells (i.e., i, j) \n    # will not form part of a square.\n    result = horizontals * verticals - horizontals - verticals + 1\n    \n    return int(result)",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Diff(n):\n    \"\"\"\n    Function to check if the difference between the sum of even and odd digits in an integer n is greater than zero.\n    \n    Parameters:\n    - n (int): An integer whose even and odd digit sums will be compared\n    \n    Returns:\n    - bool: True if the difference between the sum of even and odd digits is greater than zero, False otherwise\n    \"\"\"\n    # Convert number to string for easier processing of individual digits\n    num_str = str(abs(n))  # Using abs to ensure negative numbers work as well\n    \n    even_sum = 0\n    odd_sum = 0\n    \n    for char in num_str:\n        # Handling negative numbers\n        num = int(char)\n        \n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n            \n    # Check if the difference between even and odd sum is greater than zero\n    return even_sum > odd_sum",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_With_Odd_SetBits(n):\n    def set_bits_count(k):\n        # Function to calculate number of set bits in k\n        count = 0\n        while k:\n            if k & 1 == 1:\n                count += 1\n            k >>= 1\n        return count\n    \n    result = 0\n    for i in range(1, n + 1):\n        if set_bits_count(i) % 2 != 0:\n            result += 1\n    return result",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    # Check if the length of the input string is even\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    Args:\n    n : int\n        The position in the sequence of tetrahedral numbers.\n        \n    Returns:\n    float\n        The value of the nth tetrahedral number.\n    \"\"\"\n    # Formula for calculating the nth tetrahedral number: n*(n+1)*(n+2)/6\n    result = n * (n + 1) * (n + 2) / 6.0\n    return result",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Input tuples must be of equal length",
      "Test 2: FAIL - Input tuples must be of equal length",
      "Test 3: FAIL - Input tuples must be of equal length"
    ],
    "generated_code": "def zip_tuples(tup1, tup2):\n    # Ensure both input tuples have the same length\n    if len(tup1) != len(tup2):\n        raise ValueError(\"Input tuples must be of equal length\")\n    \n    # Zip the two tuples and return the result as a list of tuples\n    return list(zip(tup1, tup2))",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Char(s):\n    # Initialize result with an empty string\n    res = \"\"\n    # Iterate over each character in the input string\n    for char in s:\n        # Append the current character to the result\n        res += char\n    # Return the final result which is the sum of ASCII values of all characters in the string\n    return chr(sum(ord(char) for char in s))",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        x, y = 1, 1\n        for _ in range(3, n + 1):\n            x, y = y, x + y\n        return y\n\n# Test the function with provided data points\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    # Calculate the surface area of a sphere using the formula: 4 * pi * r^2\n    return round(4 * math.pi * radius**2, 3)",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def centered_hexagonal_number(n):\n    # Calculate the nth centered hexagonal number using the formula\n    return n * (2*n - 1)\n\n# Test cases to verify the correctness of the solution\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_count(arr):\n    from collections import Counter\n    return dict(Counter(arr))",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef closest_num(n):\n    \"\"\"\n    Finds the largest integer less than n.\n    \n    Parameters:\n    - n (int): The target value\n    \n    Returns:\n    int: The largest integer less than n.\n    \"\"\"\n    # Subtract 1 from n and then divide by 2 to get half of the difference between n and its nearest lower integer\n    return n // 2 + 1 if n % 2 == 0 else n // 2",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Find the maximum length of words in the list\n    max_length = max(len(word) for word in words)\n    return max_length",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_substring(lst, sub):\n    # Check each element in the list to see if it contains the substring\n    return any(sub in item for item in lst)",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_undulating(num_str):\n    \"\"\"\n    This function checks if the input string 'num_str' represents an undulating number.\n    A number is considered undulating if each digit in it appears at least twice consecutively.\n    \n    Parameters:\n    num_str (str): The number as a string for checking.\n    \n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    # Convert the string of digits back into a list for easier manipulation\n    digits = [int(d) for d in num_str]\n    \n    # Check if all digits are either 0-8 and repeat at least once\n    allowed_digits = {'1', '2', '3', '4', '5', '6', '7', '8'}\n    if set(digits).issubset(allowed_digits):\n        # Sort the digits first to make sure they appear in increasing order\n        sorted_digits = sorted(digits)\n        \n        # Iterate through the digits to find the longest streaks\n        max_streak_length = 1\n        current_streak_length = 1\n        \n        for i in range(len(sorted_digits)-1):\n            if sorted_digits[i] == sorted_digits[i+1]:\n                current_streak_length += 1\n                max_streak_length = max(max_streak_length, current_streak_length)\n            else:\n                current_streak_length = 1\n                \n        # If there's more than one maximum streak length, then it's undulating\n        return max_streak_length > 1\n    else:\n        return False",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_minimum(tuples_list):\n    min_index = -1\n    min_value = float('inf')\n    \n    for i in range(len(tuples_list)):\n        if isinstance(tuples_list[i], tuple) and len(tuples_list[i]) == 2:\n            name, age = tuples_list[i]\n            if age < min_value:\n                min_value = age\n                min_index = i\n                \n    return name if min_index != -1 else \"Not found\"",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min_Length' is not defined",
      "Test 2: FAIL - name 'Find_Min_Length' is not defined",
      "Test 3: FAIL - name 'Find_Min_Length' is not defined"
    ],
    "generated_code": "def find_min_length(sublists):\n    \"\"\"\n    Finds the minimum length among all sublists within a list of lists.\n    \n    :param sublists: List of lists where each sublist contains elements.\n    :return: The minimum length among all sublists.\n    \"\"\"\n    # Convert each sublist into an iterable and get its length using len()\n    lengths = [len(lst) for lst in sublists]\n    # Return the minimum length found\n    return min(lengths)",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_lists(lst):\n    freq_dict = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(decimal_num):\n    \"\"\"\n    Convert a given decimal number to its binary equivalent.\n    \n    Parameters:\n    decimal_num (int): The decimal number to be converted.\n    \n    Returns:\n    str: The binary representation of the given decimal number.\n    \"\"\"\n    if decimal_num == 0:\n        return '0'\n    binary = ''\n    while decimal_num > 0:\n        binary = str(decimal_num % 2) + binary\n        decimal_num //= 2\n    return binary\n\n# Test Cases\nprint(decimal_to_binary(8))   # Expected output: '1000'\nprint(decimal_to_binary(18))  # Expected output: '10010'\nprint(decimal_to_binary(7))   # Expected output: '111'",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def next_smallest_palindrome(n):\n    \"\"\"\n    Finds and returns the next smallest palindrome greater than the given integer n.\n    \n    Parameters:\n    n (int): The integer to find the next smaller palindrome for.\n    \n    Returns:\n    int: The next smallest palindrome after n.\n    \"\"\"\n    while True:\n        if str(int(str(n)[::-1])) == str(n):\n            return n + 1\n        else:\n            n += 1\n\n# Example checks\nprint(next_smallest_palindrome(99))  # Expected output: 101\nprint(next_smallest_palindrome(1221))  # Expected output: 1331\nprint(next_smallest_palindrome(120))  # Expected output: 121",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def kth_element(arr, k, index):\n    \"\"\"\n    Finds and returns the k-th element from an array arr starting at index.\n    \n    :param arr: List of integers representing the array.\n    :param k: Integer representing the position we want to find.\n    :param index: Integer indicating the starting point within the array for traversal.\n    :return: The value of the k-th element starting from index.\n    \"\"\"\n    # Calculate the actual starting index after adjusting for zero-based indexing\n    adjusted_index = index - 1\n    \n    # Adjusting negative index by adding the length of the array if it is negative\n    while adjusted_index < 0:\n        adjusted_index += len(arr)\n    \n    # Traverse through the adjusted index till k reaches 1\n    for _ in range(1, k + 1):\n        try:\n            next_value = arr[adjusted_index]\n            adjusted_index += 1\n        except IndexError:\n            break\n        \n    return next_value\n\n# Test cases to verify the correctness of the solution\nprint(kth_element([12,3,5,7,19], 5, 2))  # Expected output: 3\nprint(kth_element([17,24,8,23], 4, 3))   # Expected output: 8\nprint(kth_element([16,21,25,36,4], 5, 4)) # Expected output: 36",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def snake_to_camel(snake_str):\n    # Split the snake_case string into parts based on underscore\n    parts = snake_str.split('_')\n    # Convert each part to title case and join them back together\n    return ''.join(parts)\n\n# Test the function with provided data points\nassert snake_to_camel('python_program') == 'PythonProgram', \"Test case 1 failed\"\nassert snake_to_camel('python_language') == 'PythonLanguage', \"Test case 2 failed\"\nassert snake_to_camel('programming_language') == 'ProgrammingLanguage', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for +: 'int' and 'list'"
    ],
    "generated_code": "def eulerian_num(n, m):\n    if n < m:\n        return 0\n    \n    # Base case for small values of n and m\n    base_cases = {0: [1], 1: [[1]]}\n    \n    # If the result is not already calculated, calculate it\n    memoization_cache = base_cases.copy()\n    \n    def _eulerian(n, m, cache=memoization_cache):\n        if n in cache:\n            return cache[n]\n        \n        total = 0\n        \n        # Calculate all combinations of choosing k elements from m elements where k <= n\n        for i in range(m + 1):\n            remaining_elements = min(i, n)\n            subproblem_result = sum(_eulerian(k, remaining_elements, cache=cache) for k in range(max(i - n, 0), min(i, n) + 1))\n            \n            # Adjusting for different orders due to the nature of permutations\n            subproblem_result *= factorial(i - max(i - n, 0)) // factorial(min(i, n) - max(i - n, 0))\n            \n            total += subproblem_result\n        \n        cache[n] = total\n        return total\n    \n    # Helper function to compute factorial using recursion\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    # Starting point with initial parameters n=0, m=0\n    return _eulerian(n, m)\n\n# Function call test cases\nprint(eulerian_num(3, 1))  # Expected output: 4\nprint(eulerian_num(4, 1))  # Expected output: 11\nprint(eulerian_num(5, 3))  # Expected output: 26",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_sublists(lst_of_lsts):\n    return [[sublist[i] for sublist in lst_of_lsts if i < len(sublist)] for i in range(len(lst_of_lsts[0]))]",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(booleans_list):\n    \"\"\"\n    This function takes a list of boolean values and returns the count of True values in the list.\n    \n    Parameters:\n    booleans_list (list): A list containing boolean values.\n    \n    Returns:\n    int: The number of True values in the list.\n    \"\"\"\n    # Initialize a counter for counting True values\n    true_count = 0\n    \n    # Iterate through each element in the list\n    for value in booleans_list:\n        if value:\n            true_count += 1\n            \n    return true_count",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_lists(lst, tpl):\n    # Convert the tuple into a list and append elements from the list at the end\n    lst.append(tpl[-1])\n    for i in range(len(tpl) - 1):\n        lst.append(tpl[i])\n    return tuple(lst)\n\n# Test cases\nprint(add_lists([5, 6, 7], (9, 10)))  # Expected output: (9, 10, 5, 6, 7)\nprint(add_lists([6, 7, 8], (10, 11)))  # Expected output: (10, 11, 6, 7, 8)\nprint(add_lists([7, 8, 9], (11, 12)))  # Expected output: (11, 12, 7, 8, 9)",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object has no attribute 'startswith'",
      "Test 2: FAIL - 'int' object has no attribute 'startswith'",
      "Test 3: FAIL - 'int' object has no attribute 'startswith'"
    ],
    "generated_code": "def count_Hexadecimal(start_num, end_num):\n    count = 0\n    hex_chars = '0123456789ABCDEF'\n    \n    def is_valid_hex(num_str):\n        if num_str.startswith('0x') and len(num_str) == 3:\n            return True\n        elif num_str in hex_chars[:2] + hex_chars[6:]:\n            return True\n        else:\n            return False\n    \n    for i in range(start_num, end_num + 1):\n        if is_valid_hex(i):\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from heapq import heappush, heappop\nfrom typing import List\n\ndef merge_sorted_lists(lists):\n    \"\"\"\n    Merges n sorted lists into one sorted list.\n    \n    Args:\n    lists: A list of k sorted lists\n    \n    Returns:\n    A generator for merged sorted elements\n    \"\"\"\n    heap = []\n    for i in range(len(lists)):\n        if lists[i]:\n            heappush(heap, (lists[i].pop(0), i))\n            \n    while heap:\n        value, index = heappop(heap)\n        yield value\n        \n        if lists[index]:\n            new_value = lists[index].pop(0) if lists[index] else float('inf')\n            if new_value < value:\n                heappush(heap, (new_value, index))\n\n# Test cases\nassert list(merge_sorted_lists([[1,2,3],[4,5,6],[7,8,9]])) == [1,2,3,4,5,6,7,8,9]\nassert list(merge_sorted_lists([[1,2],[4,5,6],[10,11,12]])) == [1,2,4,5,6,10,11,12]\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Equivalent(binary_string, rotation_count):\n    # Convert the binary string into an integer\n    num = int(binary_string, 2)\n    \n    # Calculate the number of bits needed for rotation based on remainder\n    bit_length = len(binary_string)\n    if bit_length % 2 == 0:\n        extra_bits = 1\n    else:\n        extra_bits = 0\n    \n    # Perform bitwise right shift operation until we get an even length binary number\n    while bit_length % 2 == 0:\n        num >>= 1\n        bit_length >>= 1\n    \n    # Now perform the actual rotation and check if it's odd\n    rotated_num = bin(num)[2:]\n    if rotated_num[-rotation_count:] != \"1\" * rotation_count:\n        return 0\n    else:\n        return rotation_count\n\n# Test cases\nprint(odd_Equivalent(\"011001\", 6))  # Expected output: 3\nprint(odd_Equivalent(\"11011\", 5))   # Expected output: 4\nprint(odd_Equivalent(\"1010\", 4))    # Expected output: 2",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_missing(ranges, start_range, end_range):\n    result = []\n    for i in range(len(ranges)):\n        if i == 0:\n            current_start = start_range\n            current_end = min(end_range, ranges[i][1])\n        elif ranges[i-1][1] + 1 < ranges[i][0]:\n            # If there's no overlap between the previous range and the current one\n            current_start = max(start_range, ranges[i-1][0])  # Start of the next segment\n            current_end = min(end_range, ranges[i][1])       # End of the current segment\n        else:\n            current_start = max(start_range, ranges[i-1][0])  # Start of the current segment\n            current_end = min(end_range, ranges[i][1])       # End of the current segment\n        \n        if current_start <= current_end:\n            result.append((current_start, current_end))\n    \n    # Add the remaining segment after the last range\n    if start_range <= end_range:\n        result.append((start_range, end_range))\n    \n    return result\n\nprint(extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)) # Expected output: [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nprint(extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60))   # Expected output: [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nprint(extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52))   # Expected output: [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_in_nested_lists(lists):\n    # Flatten the list of lists and remove duplicates\n    flat_list = set(item for sublist in lists for item in sublist)\n    \n    # Convert back to a list of integers\n    return [int(x) for x in flat_list]\n\n# Test cases\nprint(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))  # Output: [12, 18, 23]\nprint(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))  # Output: [5, 23]\nprint(common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]]))  # Output: [4, 5, 6]",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'perimeter' is not defined",
      "Test 2: FAIL - name 'perimeter' is not defined",
      "Test 3: FAIL - name 'perimeter' is not defined"
    ],
    "generated_code": "def calculate_perimeter(radius, height):\n    # Calculate and return the perimeter of a cylinder\n    return 2 * radius * height + 2 * radius * 2 * 3.14159\n\n# Test cases\nprint(calculate_perimeter(2, 4))  # Expected output: 12\nprint(calculate_perimeter(1, 2))  # Expected output: 6\nprint(calculate_perimeter(3, 1))  # Expected output: 8",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_freq(tuple_list):\n    # Sort tuples based on their frequencies and create an array of counters for frequencies\n    sorted_tuples = sorted(tuple_list, key=lambda x: len(set(x)))\n    freq_counter = [len(set(t)) for t in sorted_tuples]\n    \n    # Create the result list where each element is a tuple with its corresponding frequency\n    result = []\n    for i, t in enumerate(sorted_tuples):\n        result.append(tuple(freq_counter[i] * t))\n    \n    return result\n\n# Example usage:\nprint(assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]))  # Output: [(6, 5, 8, 3), (2, 7, 2), (9, 1)]",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'empty_dit' is not defined",
      "Test 2: FAIL - name 'empty_dit' is not defined",
      "Test 3: FAIL - name 'empty_dit' is not defined"
    ],
    "generated_code": "def empty_dictionaries(dicts_list):\n    # Check if all dictionaries in the list are empty\n    return len([d for d in dicts_list if not bool(d)]) == 0",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup):\n    # Convert each element in the tuple to its corresponding digit and concatenate them\n    return int(''.join(str(i) for i in tup))\n\n# Test cases\nprint(tuple_to_int((1, 2, 3)))  # Expected output: 123\nprint(tuple_to_int((4, 5, 6)))  # Expected output: 456\nprint(tuple_to_int((5, 6, 7)))  # Expected output: 567",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_to_float(lst):\n    new_lst = []\n    for pair in lst:\n        try:\n            first_val = float(pair[0])\n            second_val = float(pair[1])\n            new_lst.append((first_val, second_val))\n        except ValueError:\n            new_lst.append(pair)\n    return new_lst",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_list(s):\n    return s.split()",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search(arr, n): \n    low = 0\n    high = len(arr) - 1\n  \n    while(low <= high): \n        mid = (low + high) // 2\n  \n        # If mid is at start and value at mid == value before it,\n        # then we know that duplicate lies somewhere between mid+1 and end.\n        if(mid > 0 and arr[mid] == arr[mid-1]): \n            low = mid + 1\n          \n        # Else check left half for duplicates\n        elif(arr[low] == arr[mid]): \n            low = mid + 1\n          \n        else: \n            high = mid - 1\n  \n    # At this point low will be equal to n\n    return arr[low]",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: too many values to unpack (expected 2)"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef max_product_tuple(tuples_list: List[Tuple[int]]) -> int:\n    \"\"\"\n    Finds and returns the maximum product from each pair of elements in a given list of tuples.\n    \n    Args:\n    tuples_list (List[Tuple[int]]): A list of tuples containing integers.\n    \n    Returns:\n    int: The maximum product found between two elements from different tuples.\n    \"\"\"\n    return max(a * b for a, b in zip(*tuples_list))\n\n# Test cases to verify the correctness of the function\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\nassert max_product_tuple([(10, 20), (15, 2), (5, 10)]) == 200\nassert max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]) == 484\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - check_triplet() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def check_triplet(arr, target_sum, num_to_find):\n    arr.sort()\n    n = len(arr)\n    \n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            \n            if current_sum == target_sum and arr[left] != num_to_find and arr[right] != num_to_find:\n                return True\n            \n            if current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    \n    return False",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'smartNumber' is not defined",
      "Test 2: FAIL - name 'smartNumber' is not defined",
      "Test 3: FAIL - name 'smartNumber' is not defined"
    ],
    "generated_code": "def smart_number(n):\n    result = sum([i**2 for i in range(1, int((n - 1)**0.5) + 1)])\n    return result",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - local variable 'j' referenced before assignment",
      "Test 2: FAIL - local variable 'j' referenced before assignment",
      "Test 3: FAIL - local variable 'j' referenced before assignment"
    ],
    "generated_code": "def is_amicable(num1, num2):\n    def find_divisor(n):\n        divisor = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisor.add(i)\n                divisor.add(n // i)\n        return divisor\n\n    divisors_set1 = find_divisor(num1)\n    divisors_set2 = find_divisor(num2)\n\n    # If both sets have the same elements as each other's but in reverse order, they are amicable\n    return sorted(divisors_set1) == sorted(divisors_set2[::-1])\n\ndef amicable_numbers_sum(limit):\n    sum_amicable = 0\n    for i in range(2, limit):\n        j = sum([d for d in [i//j] * 2 if not i % j and j != i])\n        if is_amicable(i, j) and i < j:\n            sum_amicable += i + j\n    return sum_amicable",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef angle_complex(x,y):\n    return cmath.phase(complex(x,y))",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_length(binary_string, n):\n    left = 0\n    max_diff = 0\n    \n    for right in range(len(binary_string)):\n        if binary_string[right] == '1':\n            # Decrease count as we move from 0 to 1\n            n -= 1\n        \n        while n == 0:\n            if binary_string[left] == '1':\n                # Increase count as we move from 1 to 0\n                n += 1\n            \n            left += 1\n        \n        max_diff = max(max_diff, right - left + 1)\n    \n    return max_diff",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_of_common_divisors(num1, num2):\n    # Initialize variables to store the result and factors\n    result = 0\n    factor1 = 1\n    \n    # Iterate through all possible factors from 1 to the minimum of num1 and num2\n    while factor1 <= min(num1, num2):\n        if num1 % factor1 == 0 and num2 % factor1 == 0:\n            result += factor1  # Add common divisor to the result\n        factor1 += 1  # Increment the factor\n    \n    return result",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_int(a, b):\n    result = 0\n    for _ in range(b):\n        result += a\n    return result",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, words):\n    # Use filter and lambda function to keep words longer than 'n' \n    return list(filter(lambda x: len(x) > n, words))",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unhashable type: 'list'",
      "Test 2: FAIL - unhashable type: 'list'",
      "Test 3: FAIL - unhashable type: 'list'"
    ],
    "generated_code": "def magic_square_test(grid):\n    n = len(grid)\n    \n    # Calculate the sum of each row and column\n    sums_row = [[grid[i][j] for i in range(n)] for j in range(n)]\n    sums_col = [[sums_row[j][i] for j in range(n)] for i in range(n)]\n    \n    # Check if all rows and columns have the same sum\n    return len(set(sums_row)) == 1 and len(set(sums_col)) == 1 and sum(sums_row[0]) == n * (n ** 2 + 1) // 2",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(lst):\n    from collections import Counter\n    return Counter(lst).most_common(1)[0]",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_vowels(s):\n    # Convert the input string into a list for easier manipulation\n    s_list = list(s)\n    \n    # Initialize pointers for the first and last characters\n    left, right = 0, len(s) - 1\n    \n    # Define a set of vowel characters for quick lookup\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    \n    # Loop until the two pointers meet in the middle\n    while left < right:\n        # Move the left pointer forward if it's not a vowel\n        while left < right and s_list[left] not in vowels:\n            left += 1\n        # Move the right pointer backward if it's not a vowel\n        while left < right and s_list[right] not in vowels:\n            right -= 1\n        \n        # Swap the vowels found at the current positions\n        s_list[left], s_list[right] = s_list[right], s_list[left]\n        \n        # Move both pointers inward\n        left += 1\n        right -= 1\n    \n    # Join the list back into a string and return\n    return ''.join(s_list)\n\n# Test cases\nprint(reverse_vowels(\"Python\"))  # Expected output: \"Python\"\nprint(reverse_vowels(\"USA\"))     # Expected output: \"ASU\"\nprint(reverse_vowels(\"ab\"))      # Expected output: \"ab\"",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "def sum_negativenum(numbers):\n    return reduce(lambda x, y: x + y if y < 0 else x, numbers, 0)",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_last(arr, p, q):\n    # Perform the operation 'p' times on the array elements and then check if the last element is even or odd.\n    arr = [i**q for i in arr]  # Example operation could be raising each number to the power of 'q'\n    if len(arr) == 0:\n        return \"ARRAY IS EMPTY\"  # Check for empty array\n    else:\n        return [\"ODD\", \"EVEN\"][arr[-1]%2]\n\n# Test Cases\nprint(check_last([5,7,10],3,1))  # Should return \"ODD\"\nprint(check_last([2,3],2,3))     # Should return \"EVEN\"\nprint(check_last([1,2,3],3,1))  # Should return \"ODD\"",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hexagonal_num(n):\n    # The formula for finding the n-th hexagonal number is:\n    # H_n = n(2n−1)\n    return n * (2 * n - 1)\n\n# Test cases to verify the correctness of the function\nassert hexagonal_num(10) == 190, \"Test case 1 failed\"\nassert hexagonal_num(5) == 45, \"Test case 2 failed\"\nassert hexagonal_num(7) == 91, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_electbill(hours):\n    # Define electricity rates per unit\n    rate = {\n        'A': 4.8,\n        'B': 5.95,\n        'C': 7.95,\n        'D': 8.75,\n        'E': 9.95,\n        'F': 11.95,\n        'G': 13.95,\n        'H': 14.95,\n        'I': 15.95,\n        'J': 16.95,\n        'K': 17.95,\n        'L': 19.95,\n        'M': 20.95,\n        'N': 21.95,\n        'O': 23.95,\n        'P': 24.95,\n        'Q': 25.95,\n        'R': 26.95,\n        'S': 27.95,\n        'T': 28.95,\n        'U': 29.95,\n        'V': 30.95,\n        'W': 31.95,\n        'X': 32.95,\n        'Y': 33.95,\n        'Z': 35.95\n    }\n\n    # Calculate total cost based on hours and electricity type\n    if hours <= 50:\n        return round(hours * 4.8, 2)\n    elif hours > 50 and hours < 150:\n        return round((hours - 50) * 5.95 + 24.00, 2)\n    else:\n        return round((150 - 50) * 5.95 + ((hours - 150) * 7.95), 2)\n\n# Test cases\nprint(cal_electbill(75))  # Expected output: 246.25\nprint(cal_electbill(265))  # Expected output: 1442.75\nprint(cal_electbill(100))  # Expected output: 327.5",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def zero_count(arr):\n    # Initialize count of zeroes and length of array\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n    # Calculate ratio of zeroes\n    return count / len(arr)",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if n can be expressed as the sum of distinct powers of two.\n    \n    Args:\n    - n: An integer\n    \n    Returns:\n    - A boolean value indicating whether n can be represented as sum of non-zero powers of two.\n    \"\"\"\n    # Initialize the set with power of 2 up to the largest possible one less than n\n    powers_of_two = {1}\n    while True:\n        next_power = 2 * max(powers_of_two)\n        if next_power > n:\n            break\n        powers_of_two.add(next_power)\n        \n    return n in powers_of_two",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_singly(tuple_list):\n    result = []\n    for t in tuple_list:\n        for item in t:\n            if t.count(item) == 1 and item not in result:\n                result.append(item)\n    return result",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pancake_sort(arr):\n    n = len(arr)\n    while n > 0:\n        # Find the index of the maximum element in arr[0:n] and move it to the end if it's not already there\n        for i in range(n-1):\n            if arr[i] < arr[n-1]:\n                arr.insert(i+1, arr.pop(n-1))\n        n -= 1\n    return arr",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_samepair(list1, list2, list3):\n    # Initialize a counter for pairs with at least two elements in common\n    count = 0\n    \n    # Iterate through each element in list1 and list2\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] != list3[i]:\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def find_lists(lst):\n    # Count the number of sublists in the input list\n    count = len([item for sublist in lst for item in sublist if isinstance(item, list)])\n    return count",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Pairs(nums, n):\n    total = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            total += abs(nums[i] - nums[j])\n    return total\n\n# Test cases\nprint(sum_Pairs([1,8,9,15,16],5)) # Expected output: 74\nprint(sum_Pairs([1,2,3,4],4)) # Expected output: 10\nprint(sum_Pairs([1,2,3,4,5,7,9,11,14],9)) # Expected output: 188",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_Abs_Diff(arr,n):\n    # Initialize the maximum absolute difference with the first pair of adjacent numbers\n    max_diff = abs(arr[0] - arr[1])\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, n):\n        # Calculate the absolute difference and update max_diff if it's greater\n        max_diff = max(max_diff, abs(arr[i] - arr[i-1]))\n    \n    return max_diff",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ascii_value_string(s):\n    # Calculate and return the sum of ASCII values of all characters in the string\n    return sum(ord(char) for char in s)",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_path_sum(triangle, row_index, col_index):\n    # Base case: if we're at the last row of the triangle\n    if row_index == len(triangle)-1:\n        return triangle[row_index][col_index]\n    \n    # Recursively calculate the maximum path sum for the current cell\n    left_max = max_path_sum(triangle, row_index+1, col_index)\n    right_max = max_path_sum(triangle, row_index+1, col_index+1)\n    \n    # Return the maximum value between moving down and diagonally down-left\n    return triangle[row_index][col_index] + max(left_max, right_max)\n\n# Example usage:\ntriangle_1 = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]\nprint(max_path_sum(triangle_1, 0, 0))  # Output: 14",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef sum_digits_twoparts(number: int) -> int:\n    \"\"\"\n    Divides a given integer into two parts in such a way that their sum of digits is maximized.\n    \n    Args:\n    number (int): The input number to be divided.\n    \n    Returns:\n    int: The maximum possible sum of digits from dividing the input number into two parts.\n    \"\"\"\n    max_sum = 0\n    for i in range(1, 10):  # Iterate through possible lengths of division (excluding 1)\n        left_part = number // 10**i\n        right_part = number % 10**i\n        current_sum = sum(int(digit) for digit in str(left_part)) + sum(int(digit) for digit in str(right_part))\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def longest_subseq_with_diff_one(arr, k):\n    n = len(arr)\n    dp = [[-1] * n for _ in range(k)]\n    \n    def helper(index, prev_diff):\n        if index == n:\n            return 0\n        \n        if dp[prev_diff][index] != -1:\n            return dp[prev_diff][index]\n        \n        take = 0\n        next_index = index + 1\n        while next_index < n and abs(arr[next_index] - arr[index]) <= prev_diff:\n            next_index += 1\n        \n        nonlocal max_length\n        max_length = max(max_length, helper(next_index, arr[index] - arr[index - 1]) + 1)\n        \n        dp[prev_diff][index] = max_length - 1\n        return dp[prev_diff][index]\n\n    max_length = 0\n    for i in range(n):\n        helper(i, arr[i])\n    \n    return max_length\n\n# Test cases\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7))  # Output: 6\nprint(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7))  # Output: 3\nprint(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8))  # Output: 7",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'does_Contain_B' is not defined",
      "Test 2: FAIL - name 'does_Contain_B' is not defined",
      "Test 3: FAIL - name 'does_Contain_B' is not defined"
    ],
    "generated_code": "def does_contain_b(a, b, c):\n    # Check if the absolute difference between 'a' and 'b' is less than or equal to 'c'\n    return abs(a - b) <= c\n\n# Test cases\nprint(does_contain_b(1, 7, 3))  # Expected output: True\nprint(does_contain_b(1, -3, 5))  # Expected output: False\nprint(does_contain_b(3, 2, 5))   # Expected output: False",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_coprime(x, y):\n    \"\"\"\n    Check if two numbers x and y are coprime.\n    \n    Two numbers are considered coprime if their greatest common divisor (GCD)\n    is 1. This means they have no common factors other than 1.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    \n    Returns:\n    bool: True if x and y are coprime, False otherwise\n    \"\"\"\n    from math import gcd\n    return gcd(x, y) == 1\n\n# Test cases\nprint(is_coprime(17, 13)) # Expected output: True\nprint(is_coprime(15, 21)) # Expected output: False\nprint(is_coprime(25, 45)) # Expected output: False",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    merge_sort(left_half)\n    merge_sort(right_half)\n    \n    i = j = k = 0\n    \n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] < right_half[j]:\n            arr[k] = left_half[i]\n            i += 1\n        else:\n            arr[k] = right_half[j]\n            j += 1\n        k += 1\n    \n    while i < len(left_half):\n        arr[k] = left_half[i]\n        i += 1\n        k += 1\n    \n    while j < len(right_half):\n        arr[k] = right_half[j]\n        j += 1\n        k += 1\n    \n    return arr\n\n# Test cases\nprint(merge_sort([3, 4, 2, 6, 5, 7, 1, 9])) # Should print [1, 2, 3, 4, 5, 6, 7, 9]\nprint(merge_sort([7, 25, 45, 78, 11, 33, 19])) # Should print [7, 11, 19, 25, 33, 45, 78]\nprint(merge_sort([3, 1, 4, 9, 8])) # Should print [1, 3, 4, 8, 9]",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_vertex(a, b, c):\n    # Calculate the x-coordinate of the vertex using the formula -b/(2a)\n    x = -(b) / (2 * a)\n    \n    # Substitute the x-coordinate back into the equation to find y-coordinate\n    y = (-a*x**2 - b*x + c)/(2*a)\n    \n    return (x, y)\n\n# Test cases to verify the correctness of the function\nprint(parabola_vertex(5, 3, 2))  # Expected output: (-0.3, 1.55)\nprint(parabola_vertex(9, 8, 4))  # Expected output: (-0.4444444444444444, 2.2222222222222223)\nprint(parabola_vertex(2, 4, 6))  # Expected output: (-1.0, 4.0)",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, n):\n    result = []\n    for row in matrix:\n        if len(row) > n:\n            result.append(row[n])\n    return result",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    # Toggle even bits using bitwise operations\n    result = n ^ ((n >> 1) & 0xAAAAAAAA)\n    return result",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() argument must be a string, a bytes-like object or a real number, not 'tuple'",
      "Test 2: FAIL - int() argument must be a string, a bytes-like object or a real number, not 'tuple'",
      "Test 3: FAIL - int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def tuple_int_str(tup):\n    return tuple(map(int, tup))",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def encode_list(lst):\n    \"\"\"\n    This function takes a list of integers and strings, where some elements may be repeated consecutively.\n    It returns a list of lists representing run-length encoded values with the repetition count followed by the element.\n    \n    Example:\n    lst = [1,1,2,3,4,4.3,5,1]\n    encode_list(lst) == [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    \"\"\"\n    encoded_list = []\n    i = 0\n    \n    while i < len(lst):\n        count = 1\n        \n        # Count consecutive occurrences\n        while i + 1 < len(lst) and lst[i] == lst[i+1]:\n            i += 1\n            count += 1\n            \n        # Append the count and element to the encoded list\n        if count > 1:\n            encoded_list.append([count, lst[i]])\n        else:\n            encoded_list.append([1, lst[i]])\n        \n        i += 1\n    \n    return encoded_list",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Ops(nums, k, n):\n    if len(set(nums)) == 1:\n        return 0\n    else:\n        diff = [abs(num - nums[0]) for num in nums]\n        max_diff = max(diff)\n        count = 0\n        \n        while sum(diff[:k-1]) < max_diff * (n // k) and k <= n:\n            count += 1\n            if count >= n // k + 1:\n                break\n            for i in range(k-1):\n                if diff[i] != max_diff:\n                    diff[i] -= 1\n                    diff[i+1] += 1\n            \n        return sum(diff) - sum(diff[:count])\n\n# Test cases\nprint(min_Ops([2,2,2,2], 4, 3))  # Output: 0\nprint(min_Ops([4,2,6,8], 4, 3))  # Output: -1\nprint(min_Ops([21,33,9,45,63], 5, 6))  # Output: 24",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def month_season(month, day):\n    seasons = {\n        'winter': [12, 1, 2],\n        'spring': [3, 4, 5],\n        'summer': [6, 7, 8],\n        'fall': [9, 10, 11]\n    }\n    \n    if month in seasons['winter'] and day >= len(seasons['winter']):\n        return 'winter'\n    elif month in seasons['spring'] and day >= len(seasons['spring']) - 1:\n        return 'spring'\n    elif month in seasons['summer'] and day >= len(seasons['summer']):\n        return 'summer'\n    else:\n        return 'fall'",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def solution(a, b, n):\n    if a * b > n:\n        return 'No solution'\n    elif n % a == 0:\n        return f'x = {n // a}, y = 0'\n    else:\n        for i in range(1, int(n / a)):\n            if (a * i) + b * (i - n // a) == n:\n                return f'x = {i}, y = {(n - a * i) // b}'",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n\n# Test Cases\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10], [2,4,6,8]))  # Expected output: [1, 3, 5, 7, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]))  # Expected output: [2, 4, 6, 8, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5,7]))  # Expected output: [1, 2, 3, 4, 6, 8, 9, 10]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    total_sum = 0\n    x = n\n    \n    while x >= 0:\n        if x > 0:\n            total_sum += x\n        x -= 2\n    return total_sum",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef area_polygon(sides, length):\n    return (sides * length**2) / (4 * math.tan(math.pi / sides))",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def areEquivalent(num1, num2):\n    # Calculate the sum of divisors for each number\n    divisor_sum_num1 = sum(i for i in range(1, num1 + 1) if num1 % i == 0)\n    divisor_sum_num2 = sum(i for i in range(1, num2 + 1) if num2 % i == 0)\n\n    # Check if both sums are equal\n    return divisor_sum_num1 == divisor_sum_num2",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_char_position(s):\n    char_positions = {}\n    \n    for index, char in enumerate(s.lower()):\n        if char.isalpha():\n            if char not in char_positions:\n                char_positions[char] = []\n            char_positions[char].append(index)\n    \n    total_positions = sum([len(group) for group in char_positions.values()])\n    \n    return total_positions",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_even_Pair(nums, n):\n    # Initialize result counter\n    res = 0\n    \n    # Iterate through each element in nums\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            # Check if XOR of two elements is even\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                res += 1\n                \n    return res",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def next_Power_Of_2(n):\n    # If n is less than 1, the smallest power of 2 greater than or equal to n is 2^0 which is 1.\n    if n < 1:\n        return 1\n    \n    # Use bit manipulation to find the smallest power of 2 greater than or equal to n.\n    return 1 << (n - 1).bit_length()",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr, num):\n    count = arr.count(num)\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n# Test cases\nassert get_pell(4) == 12, \"Test case 1 failed\"\nassert get_pell(7) == 169, \"Test case 2 failed\"\nassert get_pell(8) == 408, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_range_list(lst, start_index, end_index):\n    return sum(lst[start_index:end_index+1])",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_pentagon(side_length):\n    return 5 * side_length",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - object of type 'int' has no len()",
      "Test 2: FAIL - object of type 'int' has no len()",
      "Test 3: FAIL - object of type 'int' has no len()"
    ],
    "generated_code": "def count_occurance(s):\n    # Initialize counter for occurrences of 'std'\n    std_count = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        if char == \"s\" and len(std_count) < 2:\n            std_count += 1\n            \n    return std_count",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_splchar(s):\n    return re.sub('[\\W_]+', '', s)",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_keyvalue(key_value_pairs):\n    result = {}\n    for key, value in key_value_pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_valid_parenthese(parentheses_string):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in parentheses_string:\n        if char not in mapping:\n            stack.append(char)\n        elif not stack or stack.pop() != mapping[char]:\n            return False\n            \n    return len(stack) == 0\n\n# Test cases\nprint(is_valid_parenthese(\"(){}[]\"))  # Expected output: True\nprint(is_valid_parenthese(\"()[{)}\"))  # Expected output: False\nprint(is_valid_parenthese(\"()\"))      # Expected output: True",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_triangle(side_a, side_b, side_c):\n    return side_a + side_b + side_c",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of a and b.\n    \"\"\"\n    while(b):\n        a, b = b, a % b\n    return a\n\ndef answer(lcm_range_start, lcm_range_end):\n    for i in range(1, lcm_range_end+1):\n        if lcm_range_start <= ((lcm_range_end // i) * i) <= lcm_range_end:\n            first_num = i\n            second_num = (lcm_range_end // i) * i\n            return first_num, second_num\n    return None\n\n# Test cases\nprint(answer(3, 8))  # Expected output: (3, 6)\nprint(answer(2, 6))  # Expected output: (2, 4)\nprint(answer(1, 3))  # Expected output: (1, 2)",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef string_literals(input_list, pattern_string):\n    for literal in input_list:\n        if re.search(literal, pattern_string):\n            return f'Matched! {literal}'\n    return 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_num_keith(num):\n    # Initialize sum of proper divisors\n    total = 0\n    \n    # Find all proper divisors and add their absolute values\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            total += abs(i)\n    \n    # Check if the result equals the original number\n    return total == num",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # Convert latitude and longitude from degrees to radians\n    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])\n    \n    # Haversine formula\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371  # Radius of Earth in kilometers\n    return c * r\n\n# Test cases\nprint(distance_lat_long(23.5,67.5,25.5,69.5))  # Expected output: 12179.372041317429\nprint(distance_lat_long(10.5,20.5,30.5,40.5))  # Expected output: 6069.397933300514\nprint(distance_lat_long(10,20,30,40))          # Expected output: 6783.751974994595",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_prefix(words, length):\n    if not words:\n        return ''\n    \n    # Find the minimum length among all strings for comparison.\n    min_length = min(len(word) for word in words)\n    \n    # Check each possible prefix of the shortest string against the others.\n    for i in range(length):\n        if len(set(w[i] for w in words)) != 1:\n            return words[0][0:i]\n    return words[0][:length]\n\n# Example usage and expected output\nprint(common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4))  # Expected output: 'ta'\nprint(common_prefix([\"apples\", \"ape\", \"april\"], 3))  # Expected output: 'ap'\nprint(common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3))  # Expected output: 'teen'",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_character(text):\n    upper = [char for char in text if char.isupper()]\n    lower = [char for char in text if char.islower()]\n    special = [char for char in text if not char.isalnum() and not char.isspace()]\n    numeric = [char for char in text if char.isdigit()]\n\n    return (upper, lower, special, numeric)",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef count_pairs(arr: List[int], diff_k: int, target_diff: int) -> int:\n    \"\"\"\n    Counts the number of unique pairs in the given array whose elements differ by 'target_diff'.\n    \n    Parameters:\n    arr (List[int]): The input array of integers.\n    diff_k (int): The value by which the two elements must differ.\n    target_diff (int): The target difference between the pair of numbers.\n    \n    Returns:\n    int: The number of unique pairs with differences equal to 'target_diff'.\n    \"\"\"\n    unique_pairs = set()\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == target_diff and (arr[i], arr[j]) not in unique_pairs and (arr[j], arr[i]) not in unique_pairs:\n                unique_pairs.add((min(arr[i], arr[j]), max(arr[i], arr[j])))\n    return len(unique_pairs)\n\n# Check function with provided data points\nprint(count_pairs([1, 5, 3, 4, 2], 5, 3))  # Expected output: 2\nprint(count_pairs([8, 12, 16, 4, 0, 20], 6, 4))  # Expected output: 5\nprint(count_pairs([2, 4, 1, 3, 4], 5, 2))  # Expected output: 3",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def greater_specificnum(nums, num_to_check):\n    # Check if each element in nums is greater than num_to_check\n    for num in nums:\n        if num > num_to_check:\n            return True\n    # If no element is found to be greater, return False\n    return False",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def parabola_focus(a,b,c):\n    # Calculate the x-coordinate of the focus using the formula -b / (2 * a)\n    x = -b / (2 * a)\n    # Calculate the y-coordinate of the focus by substituting x back into the original equation ax^2 + bx + c = 0 and solving for y\n    y = (-b**2 / (4*a) + math.sqrt(b**2 / (4*a)**2 - 4*c/a)) / 2\n    return (x, y)\n\n# Test cases\nprint(parabola_focus(5,3,2))\nprint(parabola_focus(9,8,4))\nprint(parabola_focus(2,4,6))",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef check_literals(text, patterns):\n    # Check each pattern against the text\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return f'Matched!\\n'\n    else:\n        return 'Not Matched!'\n\n# Test cases\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['fox']))\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['horse']))\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['lazy']))",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_common_subsequence(str1, str2, l, m):\n    if l == 0 or m == 0:\n        return 0\n    elif str1[l-1] == str2[m-1]:\n        return 1 + longest_common_subsequence(str1, str2, l-1, m-1)\n    else:\n        return max(longest_common_subsequence(str1, str2, l-1, m), \n                   longest_common_subsequence(str1, str2, l, m-1))",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef prod_Square(n):\n    # Calculate the square root of n and round it down to the nearest integer.\n    sqrt_n = int(math.sqrt(n))\n    \n    # Check if sqrt_n * sqrt_n equals n. If they do, then n is a perfect square.\n    return sqrt_n * sqrt_n == n",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'first_Missing_Positive' is not defined",
      "Test 2: FAIL - name 'first_Missing_Positive' is not defined",
      "Test 3: FAIL - name 'first_Missing_Positive' is not defined"
    ],
    "generated_code": "def first_missing_positive(numbers):\n    \"\"\"\n    Finds the smallest positive integer that is not present in the given list of integers.\n    \n    :param numbers: List[int] - A list of integers.\n    :return: int - The smallest positive integer not in the list.\n    \"\"\"\n    # Remove duplicates and negative numbers from the list\n    valid_numbers = set()\n    for num in numbers:\n        if num > 0:\n            valid_numbers.add(num)\n    \n    # Check each positive number starting from 1\n    i = 1\n    while True:\n        if i not in valid_numbers:\n            return i\n        i += 1\n\n# Example usage\nprint(first_missing_positive([1,2,3,-1,5]))  # Output: 4\nprint(first_missing_positive([0,-1,-2,1,5,8]))  # Output: 2\nprint(first_missing_positive([0,1,2,5,-8]))  # Output: 3",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    # Initialize counter for integral points within the range\n    integral_points = 0\n    \n    # Iterate through all possible integer values for x in the range [x1, x2]\n    for x in range(max(x1, -x2), min(x1, x2) + 1):\n        # Iterate through all possible integer values for y in the range [y1, y2]\n        for y in range(max(y1, -y2), min(y1, y2) + 1):\n            # Increment the counter if both x and y are non-negative integers\n            if x >= 0 and y >= 0:\n                integral_points += 1\n                \n    return integral_points",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumber(month_name):\n    \"\"\"\n    This function checks if the input month name has 30 days.\n    \n    Parameters:\n        month_name (str): The name of the month to check.\n        \n    Returns:\n        bool: True if the month has 30 days, False otherwise.\n    \"\"\"\n    # Dictionary mapping months to their number of days\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    \n    return month_name in month_days and month_days[month_name] == 30\n\n# Test cases\nprint(check_monthnumber(\"February\"))  # Expected output: False\nprint(check_monthnumber(\"June\"))      # Expected output: True\nprint(check_monthnumber(\"April\"))     # Expected output: True",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def check_String(s):\n    # Check if the string contains at least one character and one digit\n    has_char = bool(re.search(r'[a-zA-Z]', s))\n    has_digit = bool(re.search(r'\\d', s))\n\n    # Return True if both conditions are met, otherwise return False\n    return has_char and has_digit",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'remove_tuple' is not defined",
      "Test 2: FAIL - name 'remove_tuple' is not defined",
      "Test 3: FAIL - name 'remove_tuple' is not defined"
    ],
    "generated_code": "def remove_duplicates(test_tuple):\n    # Convert the tuple to a set to automatically remove duplicate elements.\n    unique_elements = set(test_tuple)\n    # Convert the set back to a tuple and return it.\n    return tuple(unique_elements)\n\n# Test cases\nprint(remove_duplicates((1, 3, 5, 2, 3, 5, 1, 1, 3)))  # Expected output: (1, 2, 3, 5)\nprint(remove_duplicates((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)))  # Expected output: (2, 3, 4, 5, 6, 7, 8)\nprint(remove_duplicates((11, 12, 13, 11, 11, 12, 14, 13)))  # Expected output: (11, 12, 13, 14)",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def octal_To_Decimal(octal_number):\n    # Convert the octal number to decimal and return the result.\n    decimal_value = int(str(octal_number), 8)\n    return decimal_value",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from bisect import bisect_left\n\ndef first(arr, x, n):\n    # Find the index of the first occurrence of x using binary search\n    i = bisect_left(arr, x)\n    \n    # Check if the element at the found index is equal to x\n    if i != len(arr) and arr[i] == x:\n        return i\n    else:\n        return -1\n\n# Test cases\nprint(first([1,2,3,4,5,6,6],6,6))   # Output: 5\nprint(first([1,2,2,2,3,2,2,4,2],2,9))   # Output: 1\nprint(first([1,2,3],1,3))   # Output: 0",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_tuples(lst, k):\n    # Filter out tuples of length less than k\n    filtered_list = [tup for tup in lst if len(tup) >= k]\n    return filtered_list",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_exponentio(tup1, tup2):\n    result = tuple(x ** y for x, y in zip(tup1, tup2))\n    return result\n\n# Test cases\nprint(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))) # Expected output: (100000, 4096, 78125, 7776)\nprint(find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))) # Expected output: (1771561, 78125, 1679616, 117649)\nprint(find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))) # Expected output: (35831808, 1679616, 40353607, 2097152)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef calculate_largest_triangle(a, b, n):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in an ellipse with semi-major axis 'a'\n    and semi-minor axis 'b', where the sides of the triangle lie along the major and minor axes.\n    \n    Parameters:\n        a (float): Semi-major axis length of the ellipse.\n        b (float): Semi-minor axis length of the ellipse.\n        n (int): Number of segments for approximation using Buffon's needle method.\n        \n    Returns:\n        float: Area of the largest triangle that can be inscribed in the ellipse.\n    \"\"\"\n    # Using the formula derived from Buffon's needle experiment to approximate the area\n    return ((math.pi * a * b) / 2) / n\n\n# Check function to verify the correctness of the solution\ndef check_largest_triangle():\n    assert abs(calculate_largest_triangle(4, 2, 10**6) - 10.392304845413264) < 1e-5\n    assert abs(calculate_largest_triangle(5, 7, 10**6)) - 4.639421805988064 < 1e-5\n    assert abs(calculate_largest_triangle(9, 1, 10**6)) - 105.2220865598093 < 1e-5\n    print(\"All test cases passed.\")\n\ncheck_largest_triangle()",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return (1 << (i - 1))\n\n# Test cases\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_max(lst):\n    max_value = max(lst)\n    return [index for index, value in enumerate(lst) if value == max_value]\n\n# Test cases\nprint(position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])) # Should output [7]\nprint(position_max([1,2,2,2,4,4,4,5,5,5,5])) # Should output [7,8,9,10]\nprint(position_max([2,1,5,6,8,3,4,9,10,11,8,12])) # Should output [11]",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(lst):\n    # Check if all elements in the list are identical\n    return len(set(lst)) <= 1",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_even(s):\n    return ''.join([char for char in s if char not in '02468'])",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'hamming_Distance' is not defined",
      "Test 2: FAIL - name 'hamming_Distance' is not defined",
      "Test 3: FAIL - name 'hamming_Distance' is not defined"
    ],
    "generated_code": "def hamming_distance(x: int, y: int) -> int:\n    xor_result = x ^ y\n    distance = 0\n    while xor_result > 0:\n        distance += xor_result & 1\n        xor_result >>= 1\n    return distance",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count' is not defined",
      "Test 2: FAIL - name 'count' is not defined",
      "Test 3: FAIL - name 'count' is not defined"
    ],
    "generated_code": "def count_char(s, c):\n    \"\"\"\n    Counts the number of occurrences of a specified character in a given string.\n    \n    Args:\n    s (str): The input string.\n    c (char): The character to count in the string.\n    \n    Returns:\n    int: The number of times the character appears in the string.\n    \"\"\"\n    return sum(1 for char in s if char == c)\n\n# Check function with provided data points\nprint(count_char(\"abcc\", \"c\"))  # Expected output: 2\nprint(count_char(\"ababca\", \"a\"))  # Expected output: 3\nprint(count_char(\"mnmm0pm\", \"m\"))  # Expected output: 4",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def inversion_elements(tuples_list):\n    # Convert tuples into lists for easier manipulation\n    transformed_list = [tuple(map(lambda x: -(x if isinstance(x, int) and x < 0 else x), t)) for t in tuples_list]\n    \n    return transformed_list\n\n# Test cases\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)\n\nprint(\"All test cases passed successfully.\")",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tuples_list):\n    result = []\n    for i in range(len(tuples_list) - 1):\n        result.append(''.join(tuples_list[i:i+2]))\n    return result\n\n# Test cases\nprint(concatenate_elements([\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"]))\nprint(concatenate_elements([\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"]))\nprint(concatenate_elements([\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"]))",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    max_length = 0\n    \n    for gap in range(1, n + 1):\n        for i in range(n - gap + 1):\n            j = i + gap - 1\n            if s[i] == s[j]:\n                if gap == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n            \n            max_length = max(max_length, dp[i][j])\n    \n    return max_length",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(s):\n    \"\"\"\n    Check if the string s represents a valid number with exactly two digits after the decimal point.\n    \n    Args:\n    s (str): The string to be checked.\n    \n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    # Regular expression for matching a decimal number with up to two digits after the decimal point\n    decimal_pattern = r'^[+-]?(\\d+\\.\\d{1,2})$'\n    return bool(re.match(decimal_pattern, s))\n\n# Test cases\nprint(is_decimal('123.11'))  # Expected output: True\nprint(is_decimal('0.21'))    # Expected output: True\nprint(is_decimal('123.1214'))# Expected output: False",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def heap_replace(heap, value_to_insert):\n    # Replace the smallest element with the new value and maintain the heap property\n    min_idx = 0\n    while True:\n        left_child = 2 * min_idx + 1\n        right_child = 2 * min_idx + 2\n        \n        # Find the index of the smallest node\n        if left_child < len(heap) and heap[left_child] < heap[min_idx]:\n            min_idx = left_child\n        if right_child < len(heap) and heap[right_child] < heap[min_idx]:\n            min_idx = right_child\n        # If the current index is not the minimum, swap it with the actual minimum and continue checking\n        if min_idx != min_idx:\n            heap[min_idx], heap[min_idx // 2] = heap[min_idx // 2], heap[min_idx]\n            min_idx //= 2\n        else:\n            break\n    # Insert the new value at the end of the list\n    heap.append(value_to_insert)\n    return heap\n\n# Test cases\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 21))\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 110))\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 500))",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_allowed_specific_char(string_to_test):\n    # Define the pattern for allowed characters\n    pattern = r\"^[a-zA-Z0-9]+$\"\n    \n    # Use regex to match the string against the pattern\n    if re.match(pattern, string_to_test):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_Num() missing 1 required positional argument: 'nth'",
      "Test 2: FAIL - count_Num() missing 1 required positional argument: 'nth'",
      "Test 3: FAIL - count_Num() missing 1 required positional argument: 'nth'"
    ],
    "generated_code": "def count_Num(oth, nth):\n    # Initialize counter\n    count = 0\n    \n    # Check if either of the bits is set\n    if ((oth & 1) == 1) or ((nth & 1) == 1):\n        count += 1\n    \n    return count",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\n    # Calculate the sum of fourth powers of the first n natural numbers\n    result = sum(i**4 for i in range(1, n+1))\n    return result",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_strings(tuple1, tuple2):\n    # Concatenate the tuples element-wise\n    result = [f\"{item1} {item2}\" for item1, item2 in zip(tuple1, tuple2)]\n    return tuple(result)",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef degree_radian(rad):\n    return rad * (180 / math.pi)",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def decode_list(encoded_data):\n    result = []\n    i = 0\n    while i < len(encoded_data):\n        count = 0\n        value = None\n        \n        # Count and get value for the first time of a sequence\n        if isinstance(encoded_data[i], int):\n            value = encoded_data[i + 1]\n            while encoded_data[i] == encoded_data[i - 1]:\n                count += 1\n                i += 1\n            i -= 1\n        \n        # Append decoded values to the result array\n        while count > 0:\n            result.append(value)\n            count -= 1\n    \n    return result",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'itertools' is not defined",
      "Test 2: FAIL - name 'itertools' is not defined",
      "Test 3: FAIL - name 'itertools' is not defined"
    ],
    "generated_code": "def check_subset_list(nested_list_1, nested_list_2):\n    \"\"\"\n    Check if all elements in the first nested list can be found in the second nested list.\n    \n    :param nested_list_1: A list containing other lists (can be one-dimensional or multi-dimensional)\n    :param nested_list_2: A list containing other lists (can be one-dimensional or multi-dimensional)\n    :return: True if every element in nested_list_1 is also an element in nested_list_2, otherwise False\n    \"\"\"\n    return set(itertools.chain.from_iterable(nested_list_1)) <= set(itertools.chain.from_iterable(nested_list_2))",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Repeated_Char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return '\\0'",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 2 failed"
    ],
    "generated_code": "def min_Operations(x, y):\n    \"\"\"\n    Calculate the minimum number of steps needed to make x and y equal.\n    \n    Parameters:\n    - x (int): The first number.\n    - y (int): The second number.\n    \n    Returns:\n    int: The minimum number of steps required.\n    \"\"\"\n    if x > y:\n        x, y = y, x  # Ensure x is always less than or equal to y\n    \n    diff = abs(y - x)\n    return diff // 2 + max(0, diff % 2)\n\n# Check function with provided data points\nassert min_Operations(2, 4) == 1, \"Test case 1 failed\"\nassert min_Operations(4, 10) == 4, \"Test case 2 failed\"\nassert min_Operations(1, 4) == 3, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_min_max(tup, k):\n    \"\"\"\n    Extracts the min and max k elements from the given tuple.\n    \n    Parameters:\n        tup (tuple): The input tuple containing integers.\n        k (int): Number of minimum and maximum elements to be extracted.\n        \n    Returns:\n        list: A list containing the minimum k elements followed by the maximum k elements.\n    \"\"\"\n    # Sort the tuple and take the first k elements for min and last k elements for max\n    sorted_tup = sorted(tup)[:k] + sorted(tup)[-k:]\n    return [sorted_tup[::2], sorted_tup[1::2]]\n\n\n# Test cases\nprint(extract_min_max((5, 20, 3, 7, 6, 8), 2))  # Expected output: [(3, 5, 8, 20)]\nprint(extract_min_max((4, 5, 6, 1, 2, 7), 3))    # Expected output: [(1, 2, 4, 5, 6, 7)]\nprint(extract_min_max((2, 3, 4, 8, 9, 11, 7), 4))  # Expected output: [(2, 3, 4, 7, 8, 9, 11)]",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\ndef replace_max_specialchar(s,n):\n    # Replace multiple special characters with a single one.\n    s = re.sub(r'[ ,.]{' + str(n) + '}',':',s)\n    return s",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_type(tup):\n    types = [type(i) for i in tup]\n    return len(set(types)) == 1",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_majority(arr, n, target):\n    count = 0\n    for num in arr:\n        if num == target:\n            count += 1\n    return count > n // 2",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: Invalid range"
    ],
    "generated_code": "def find_Min(arr, low, high):\n    if low > high:\n        raise ValueError(\"Invalid range\")\n    mid = (low + high) // 2\n    \n    # If the middle element is greater than its next element, then it is the smallest element.\n    if mid < len(arr) - 1 and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    \n    # If the middle element is smaller than its previous element, then it is the smallest element.\n    if mid > 0 and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    \n    # If none of the above conditions are met, recursively search in the left half.\n    if arr[high] >= arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    else:\n        return find_Min(arr, mid + 1, high)\n\n# Test cases\nprint(find_Min([1,2,3,4,5], 0, 4))  # Output: 1\nprint(find_Min([4,6,8], 0, 2))      # Output: 4\nprint(find_Min([2,3,5,7,9], 0, 4))  # Output: 2",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(a, b, c):\n    # Initialize the variable with the smallest number among a, b, and c\n    min_num = a if a < b else b\n    # Update min_num if c is smaller than the current min_num\n    min_num = c if c < min_num else min_num\n    return min_num",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(n, start_bit, end_bit):\n    # Convert n into binary string with appropriate bit length for end_bit+1\n    binary_str = bin((n >> start_bit) & ((1 << (end_bit + 1)) - 1))[2:].zfill(end_bit + 1)\n    \n    # Check if each character is '0'\n    return all(bit == '0' for bit in binary_str)\n\n# Test Cases\nprint(all_Bits_Set_In_The_Given_Range(4,1,2))  # Expected output: True\nprint(all_Bits_Set_In_The_Given_Range(17,2,4))  # Expected output: True\nprint(all_Bits_Set_In_The_Given_Range(39,4,6))  # Expected output: False",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_arrange_array(arr, n):\n    # Separate negative and positive numbers\n    negative = [num for num in arr if num < 0]\n    positive = [num for num in arr if num >= 0]\n\n    # Concatenate negative and positive arrays\n    result = negative + positive\n\n    return result[:n]  # Return first n elements as required\n\n# Test cases\nprint(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))  # Expected output: [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nprint(re_arrange_array([12, -14, -26, 13, 15], 5))          # Expected output: [-14, -26, 12, 13, 15]\nprint(re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)) # Expected output: [-42, -39, -78, 10, 24, 36, 85]",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(s, c):\n    return s.replace(' ', c)",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum(arrays, level):\n    if not arrays:\n        return 0\n    \n    for i in range(len(arrays)):\n        arrays[i] = [x + y for x, y in zip(arrays[i][:level - 1], arrays[i][level:])]\n\n    result = arrays[0]\n    for array in arrays:\n        if sum(array) > sum(result):\n            result = array\n            \n    return sum(result)\n\n# Example usage and test cases\nprint(max_sum([[1], [2,1], [3,3,2]], 3))  # Expected output: 6\nprint(max_sum([[1], [1, 2], [4, 1, 12]], 3))  # Expected output: 15\nprint(max_sum([[2], [3,2], [13,23,12]], 3))  # Expected output: 28",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def larg_nnum(arr, n):\n    return sorted(arr)[-n:]\n\n# Test cases\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2))  # Expected output: [100, 90]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5))  # Expected output: [100, 90, 80, 70, 60]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3))  # Expected output: [100, 90, 80]",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsuface_cylinder(radius,height):\n    return 2 * 3.1415 * radius * height",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(side_length):\n    return side_length ** 3",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_set_number(n):\n    # Mask out all odd bits using a bitwise AND with 111111 (2^5 - 1)\n    n = n & 0b111111\n    \n    # XOR the result with itself shifted left by 1 bit (to flip all odd bits)\n    n ^= n << 1\n    \n    # Return the final result\n    return n",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'No_of_Triangle' is not defined",
      "Test 2: FAIL - name 'No_of_Triangle' is not defined",
      "Test 3: FAIL - name 'No_of_Triangle' is not defined"
    ],
    "generated_code": "def no_of_triangle(n, m):\n    if n < 3 or m < 3:\n        return -1\n    \n    # Calculate possible positions for each side of the triangles\n    x = min(m // 2 + 1, n)\n    \n    # Initialize result counter\n    res = 0\n    \n    # Iterate through possible lengths for the sides\n    while x > 0:\n        res += 1\n        x -= 1\n        \n    return res",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_occurences(tuples_list):\n    count_dict = {}\n    for tup in tuples_list:\n        key = tuple(sorted(tup))\n        if key not in count_dict:\n            count_dict[key] = 0\n        count_dict[key] += 1\n    result_dict = {}\n    for k in count_dict:\n        if count_dict[k] > 1:\n            result_dict[k] = count_dict[k]\n    return result_dict\n\nprint(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]))  # Should print: {('1', '3'): 2, ('2', '5'): 2, ('3', '6'): 1}\nprint(check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]))   # Should print: {('2', '4'): 2, ('3', '6'): 2, ('4', '7'): 1}\nprint(check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]))  # Should print: {('2', '13'): 1, ('11', '23'): 1, ('12', '25'): 2, ('16', '23'): 1}",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def number_of_substrings(s):\n    n = len(s)\n    result = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            result += 1\n            \n    return result",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_total_number_of_sequences(n, m):\n    total_sequences = 0\n    for i in range(1, min(m + 1, n // 2) + 1): \n        if (n - i) % 2 == 0:\n            total_sequences += pow((m // 2), i)\n    return int(total_sequences)\n\n# Test cases\nprint(get_total_number_of_sequences(10, 4)) # Expected output: 4\nprint(get_total_number_of_sequences(5, 2)) # Expected output: 6\nprint(get_total_number_of_sequences(16, 3)) # Expected output: 84",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_list(old_list, new_list):\n    # Replace the last element of old_list with new_list and return the modified list.\n    old_list[-1:] = new_list\n    return old_list",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def array_3d(x, y, z):\n    return [[[('*') for _ in range(y)] for _ in range(z)] for __ in range(x)]\n\nassert array_3d(6, 4, 3) == [[[('*', '*', '*', '*', '*', '*'), ('*', '*', '*', '*', '*', '*'), ('*', '*', '*', '*', '*', '*'), ('*', '*', '*', '*', '*', '*')], ...]]\nassert array_3d(5, 3, 4) == [[[('*', '*', '*', '*', '*'), ('*', '*', '*', '*', '*'), ('*', '*', '*', '*', '*'), ('*', '*', '*', '*', '*')], ...]]\nassert array_3d(1, 2, 3) == [[['*', '*'], ['*', '*']], [['*', '*'], ['*', '*']], [['*', '*'], ['*', '*']]]",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(input_string):\n    # Initialize a counter for character count\n    char_count = 0\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Increment the counter if the character is not a space\n        if char != ' ':\n            char_count += 1\n            \n    return char_count",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'sort_on_occurrence' is not defined. Did you mean: 'sort_on_occurence'?"
    ],
    "generated_code": "from collections import defaultdict\n\ndef sort_on_occurence(lst):\n    \"\"\"\n    Sorts a list of tuples based on the frequency of their first elements.\n    \n    :param lst: List of tuples where each tuple contains at least one element.\n    :return: A new list sorted such that tuples with higher occurrences come first,\n             followed by those with lower occurrences. Ties are broken by lexicographical order.\n    \"\"\"\n    # Count occurrences of each first element in the list\n    count_dict = defaultdict(int)\n    for item in lst:\n        key = item[0]\n        if isinstance(key, tuple):  # If it's a nested tuple, flatten it and count\n            key = ''.join(map(str, key))\n        count_dict[key] += 1\n    \n    # Define a lambda function to create sorting key\n    def sorting_key(tup):\n        return (-count_dict[tup[0]], tup)  # Descending order of counts, then lexicographical order\n    \n    # Sort the list using the defined sorting key\n    return sorted(lst, key=sorting_key)\n\n# Test cases\nprint(sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]))  # Expected output: [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nprint(sort_on_occurrence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]))  # Expected output: [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nprint(sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]))  # Expected output: [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 3 failed"
    ],
    "generated_code": "import math\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    Finds the smallest integer x such that x^2 is greater than num.\n    \n    Args:\n    num (int): The number from which to start searching for the next perfect square.\n    \n    Returns:\n    int: The next perfect square greater than num.\n    \"\"\"\n    root = math.ceil(math.sqrt(num))\n    next_square = root**2\n    return next_square\n\n# Check function with provided data points\nassert next_Perfect_Square(35) == 36, \"Test case 1 failed\"\nassert next_Perfect_Square(6) == 9, \"Test case 2 failed\"\nassert next_Perfect_Square(9) == 16, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum(nums, n):\n    if not nums:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    \n    dp = [0] * n\n    prev_max = [0] * n\n    current_max = [-float('inf')] * n\n    \n    for i in range(n):\n        for j in range(i + 1):\n            if nums[j] >= nums[i]:\n                prev_max[i] = max(prev_max[i - 1], current_max[j])\n        if prev_max[i] < 0:\n            prev_max[i] = 0\n        \n        current_max[i] = max(current_max[i - 1], prev_max[i]) + nums[i]\n        \n        dp[i] = max(dp[i - 1], current_max[i])\n    \n    return dp[-1]\n\n# Test cases\nprint(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)) # Expected output: 194\nprint(max_sum([80, 60, 30, 40, 20, 10], 6)) # Expected output: 210\nprint(max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8)) # Expected output: 138",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def babylonian_squareroot(n):\n    x = n / 2.0\n    while True:\n        y = (x + n/x) / 2.0\n        if abs(y - x) < 1e-10: \n            return y\n        x = y",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lps(s):\n    \"\"\"\n    Finds the length of the longest palindromic subsequence in the given string s.\n    \n    Args:\n    s (str): The input string\n    \n    Returns:\n    int: Length of the longest palindromic subsequence\n    \"\"\"\n    n = len(s)\n    # Initialize a DP table where dp[i][j] will hold the length of the LPS between substring s[i:j+1]\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Fill dp table from shortest substrings to longest ones\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n                \n    # Return the maximum value in the last row of dp which represents the length of LPS\n    return dp[0][n-1]\n\n# Example usage\nprint(lps(\"TENS FOR TENS\"))  # Expected output: 5\nprint(lps(\"CARDIO FOR CARDS\"))  # Expected output: 7\nprint(lps(\"PART OF THE JOURNEY IS PART\"))  # Expected output: 9",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef harmonic_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += 1 / i\n    return total",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(tup, elem):\n    count = 0\n    for item in tup:\n        if item == elem:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def insert_element(lst, element):\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def convert(complex_number):\n    \"\"\"\n    Convert a complex number into its polar representation.\n    \n    Parameters:\n        complex_number (complex): The complex number to be converted.\n        \n    Returns:\n        tuple: A tuple containing the magnitude and angle of the complex number in radians.\n    \"\"\"\n    import cmath\n    mag, ang = abs(complex_number), cmath.phase(complex_number)\n    return (mag, ang)\n\n# Test cases\nprint(convert(1))   # Expected output: (1.0, 0.0)\nprint(convert(4))   # Expected output: (4.0, 0.0)\nprint(convert(5))   # Expected output: (5.0, 0.0)",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(numbers):\n    return len([num for num in numbers if isinstance(num, int)])",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef words_ae(input_string):\n    # Using regex to find words starting with 'a' or 'e'\n    pattern = r'\\b[a-e]\\w+'\n    result = re.findall(pattern, input_string)\n    return result\n\n# Test cases\nprint(words_ae(\"python programe\"))       # Expected output: ['ame']\nprint(words_ae(\"python programe language\"))   # Expected output: ['ame', 'anguage']\nprint(words_ae(\"statement\"))              # Expected output: ['assert', 'atement']",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import product\n\ndef combinations_colors(colors, k):\n    \"\"\"\n    Generate all possible combinations with repetitions of choosing k colors \n    from given list of colors.\n    \n    :param colors: List of available colors as strings\n    :param k: Number of colors to choose\n    :return: A list containing tuples representing each combination\n    \n    Example usage:\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n    [('Red',), ('Green',), ('Blue',)]\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)\n    [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 3)\n    [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n    \"\"\"\n    return [''.join(comb) for comb in product(*([colors] * k))]\n\n# Test cases to verify the correctness of the solution\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],1))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],2))\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],3))",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Primes_nums(n):\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n)\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime[2:])",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(x, y):\n    return y, x\n\nassert swap_numbers(10, 20) == (20, 10), \"Test case 1 failed\"\nassert swap_numbers(15, 17) == (17, 15), \"Test case 2 failed\"\nassert swap_numbers(100, 200) == (200, 100), \"Test case 3 failed\"",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "count_odd = lambda l: sum(1 for x in l if x % 2 != 0)",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximize_elements(tuple1, tuple2):\n    # Sort both tuples based on their elements in descending order\n    sorted_tuple1 = sorted(tuple1, key=lambda x: (-x[0], -x[1]))\n    sorted_tuple2 = sorted(tuple2, key=lambda x: (-x[0], -x[1]))\n\n    result = []\n    i, j = 0, 0\n\n    while i < len(sorted_tuple1) and j < len(sorted_tuple2):\n        if sorted_tuple1[i][1] >= sorted_tuple2[j][1]:\n            result.append(sorted_tuple1[i])\n            i += 1\n        else:\n            result.append(sorted_tuple2[j])\n            j += 1\n\n    # Append remaining elements of the longer list\n    while i < len(sorted_tuple1):\n        result.append(sorted_tuple1[i])\n        i += 1\n\n    while j < len(sorted_tuple2):\n        result.append(sorted_tuple2[j])\n        j += 1\n\n    return tuple(result)\n\n# Test Cases\nprint(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\nprint(maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))))\nprint(maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))))",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def is_newman_shanks_williams(n):\n    def next_number(num):\n        digits = [int(d) for d in str(num)]\n        max_digit_index = len(digits)\n        while True:\n            if all(digit == 9 or digit % 2 != 0 for digit in digits):\n                return num + sum([digit * 8 if digit % 2 else digit * 2 for digit in digits])\n            num += 1\n            digits.append(int(str(num)[-1]))\n            digits.insert(0, int(str(num)[0]))\n\n    start_num = 9\n    while not is_prime(next_number(start_num)):\n        start_num += 1\n\n    return next_number(start_num)\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    return is_newman_shanks_williams(n)",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def division_elements(tup1, tup2):\n    # Initialize an empty list for storing results\n    result = []\n    # Iterate through each element in tuple1 and divide it by the corresponding element in tuple2\n    for i in range(len(tup1)):\n        if tup2[i] != 0:\n            result.append(tup1[i] / tup2[i])\n        else:\n            # Handle division by zero\n            result.append(float('nan'))  # Using 'nan' for not-a-number to represent undefined division\n    return tuple(result)",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_two_parts(lst, n):\n    return lst[:n], lst[n:]",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1, dict2):\n    # Merging two dictionaries into one.\n    return {**dict1, **dict2}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dog_age(years_human):\n    # Calculate the equivalent number of human years for dogs over 7 years old.\n    if years_human <= 7:\n        return 7 + (years_human - 1) * 4\n    else:\n        # The first 7 years multiply by 7 and then add the additional years multiplied by 4.\n        return 7 * 7 + ((years_human - 7) * 4)",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_split(lst,n):\n    return [lst[i::n] for i in range(n)]",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side_length):\n    # The formula for the lateral surface area of a cube is 4 * side_length^2\n    return 4 * pow(side_length, 2)",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):  # Generate and sum the squares of the first n odd natural numbers\n        total_sum += i**2\n    return total_sum",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_star_num(n):\n    # Calculate the n-th star number using the formula\n    result = ((n * (n + 1)) // 2) ** 2 + (n * (n + 1))\n    return result\n\n# Test cases\nprint(find_star_num(3))  # Expected output: 37\nprint(find_star_num(4))  # Expected output: 73\nprint(find_star_num(5))  # Expected output: 121",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char):\n    return ord(char)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - sum_even_and_even_index() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - sum_even_and_even_index() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - sum_even_and_even_index() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def sum_even_and_even_index(numbers_list):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all even numbers found at even indices in the list.\n    \"\"\"\n\n    total = 0\n    for index in range(0, len(numbers_list), 2): # Iterate through every second element starting from index 0\n        if numbers_list[index] % 2 == 0:\n            total += numbers_list[index]\n    \n    return total",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += (2 * i)**5\n    return total",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rear_extract(records):\n    # Extracts the last elements from each tuple in the given list of tuples.\n    return [t[-1] for t in records]\n\n# Test cases to verify the correctness of the function\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19], \"Test case 1 failed\"\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45], \"Test case 2 failed\"\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        if len(tuple2) > i:\n            result.append(tuple1[i] - tuple2[i])\n        else:\n            result.append(tuple1[i])\n    return tuple(result)\n\n# Test cases\nprint(substract_elements((10, 4, 5), (2, 5, 18)))  # Expected output: (8, -1, -13)\nprint(substract_elements((11, 2, 3), (24, 45 ,16)))  # Expected output: (-13, -43, -13)\nprint(substract_elements((7, 18, 9), (10, 11, 12)))  # Expected output: (-3, 7, -3)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            total_sum += comb(n, i)\n    return total_sum",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Position(arr, x, y):\n    arr.sort()  # Sort the array in ascending order\n    n = len(arr)\n    \n    if arr[n-1] == x:\n        # If the last element is equal to x, find its index\n        for i in range(n - 1, y - 1, -1):\n            if arr[i] != x:\n                return i + 1  # Return the position after the last occurrence of x\n    \n    return \"Invalid input\"  # If the input does not meet the requirements",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n    \n    Parameters:\n        radius (float): The radius of the cylinder.\n        height (float): The height of the cylinder.\n        \n    Returns:\n        float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius**2 * height\n\n# Test cases\nprint(volume_cylinder(10, 5)) # Expected output: 1570.7500000000002\nprint(volume_cylinder(4, 5)) # Expected output: 251.32000000000002\nprint(volume_cylinder(4, 10)) # Expected output: 502.64000000000004",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_filter(data_dict, threshold):\n    \"\"\"\n    Filter a dictionary where values are greater than or equal to the given threshold.\n    \n    Args:\n    data_dict (dict): The input dictionary with items of interest and their corresponding measurements.\n    threshold (int): The minimum value for filtering the dictionary.\n    \n    Returns:\n    dict: A new dictionary containing only those entries from the original dictionary whose values meet or exceed the threshold.\n    \"\"\"\n    return {key:value for key,value in data_dict.items() if value >= threshold}\n\n# Test cases to verify the correctness of the function\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180) == {'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190) == {'Pierre Cox': 190}",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_first_elements(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, int): \n            break  \n        else: \n            result.append(item)\n    \n    return len(result)\n\n# Test cases\nprint(count_first_elements((1, 5, 7, (4, 6), 10))) # Output: 3\nprint(count_first_elements((2, 9, (5, 7), 11))) # Output: 2\nprint(count_first_elements((11, 15, 5, 8, (2, 3), 8))) # Output: 4",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_num_decagonal' is not defined",
      "Test 2: FAIL - name 'is_num_decagonal' is not defined",
      "Test 3: FAIL - name 'is_num_decagonal' is not defined"
    ],
    "generated_code": "def num_decagonal(n):\n    # Calculate the n-th decagonal number using the formula\n    return n * ((3*n**2 - n) // 2)",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True, i\n    return False, -1",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'all_unique' is not defined",
      "Test 2: FAIL - name 'all_unique' is not defined",
      "Test 3: FAIL - name 'all_unique' is not defined"
    ],
    "generated_code": "def is_all_unique(elements):\n    # Check if there are duplicates in the list\n    for i in range(len(elements)):\n        if elements.count(elements[i]) > 1:\n            return False\n    return True",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from functools import reduce\nimport operator\n\ndef sub_list(list_a, list_b):\n    return [a - b for a, b in zip(list_a, list_b)]\n\n# Check function with provided data points\nassert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3], \"Test case 1 failed\"\nassert sub_list([1, 2], [3, 4]) == [-2, -2], \"Test case 2 failed\"\nassert sub_list([90, 120], [50, 70]) == [40, 50], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def validate(n):\n    # Convert number to string to easily access each digit\n    num_str = str(n)\n    \n    # Iterate through each digit in the number\n    for i in range(len(num_str)):\n        # Check if the frequency of the current digit is greater than the digit itself\n        if int(num_str[i]) != len(num_str.replace(str(i), '')):\n            return False\n    \n    return True",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(lst, target):\n    # Check if all elements in the list match the target string\n    return len(set(lst)) == 1 and lst[0] == target",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_match_two_three(text):\n    pattern = r\"ab{2,3}\"\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sub_array_sum_repeated(arr, k, n):\n    # Calculate the maximum subarray sum for one repetition\n    def kadane(arr):\n        cur_max = global_max = arr[0]\n        for i in range(1, len(arr)):\n            cur_max = max(arr[i], cur_max + arr[i])\n            global_max = max(global_max, cur_max)\n        return global_max\n    \n    # Calculate the result using the formula derived from Kadane's algorithm and properties of repeated arrays\n    res = k * kadane(arr)\n    if k > 1:\n        for _ in range(k-1):\n            res += kadane(arr)\n    return res",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n    \n    Parameters:\n    - n: An integer representing the number of even natural numbers to consider.\n    \n    Returns:\n    - The sum of squares of the first n even natural numbers as an integer.\n    \"\"\"\n    # Since every second number in even series is even,\n    # we can calculate the sum directly using the formula for the sum of squares of first k even numbers.\n    return int((n * (n + 1) * (2*n + 1)) / 3)\n\n# Test cases\nprint(square_Sum(2))  # Expected output: 20\nprint(square_Sum(3))  # Expected output: 56\nprint(square_Sum(4))  # Expected output: 120",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - p must be equal to mod_prime",
      "Test 2: FAIL - p must be equal to mod_prime",
      "Test 3: FAIL - p must be equal to mod_prime"
    ],
    "generated_code": "from math import gcd\n\ndef modular_inverse(a_list, mod_prime, p=7): \n    if p == mod_prime:\n        result = len([x for x in a_list if gcd(x, mod_prime) == 1])  \n    else:\n        raise ValueError(\"p must be equal to mod_prime\")\n    return result",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def odd_Days(year):\n    \"\"\"\n    Calculates the number of odd days in a given year.\n    \n    An odd day is defined as one more than a multiple of 7 days.\n    This function calculates the remainder when the year plus half of its length is divided by 7,\n    which gives us the number of odd days for that particular year.\n    \n    Args:\n        year (int): The year to calculate the odd days for.\n        \n    Returns:\n        int: The number of odd days in the specified year.\n    \"\"\"\n    return (year + (year // 4)) % 7 - 1 if year % 4 else year % 7 - 1\n\n# Test cases to verify the correctness of the function\nassert odd_Days(100) == 5\nassert odd_Days(50) == 6\nassert odd_Days(75) == 2\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef max_length(lst: List[List[int]]) -> tuple:\n    \"\"\"\n    Finds the longest sublist within the given list of lists.\n    \n    Parameters:\n    lst (List[List[int]]): A list containing sublists whose lengths need to be compared.\n    \n    Returns:\n    tuple: The length of the longest sublist and the sublist itself.\n    \"\"\"\n    if not lst:\n        return (0, [])\n    max_len = -1\n    for i in range(len(lst)):\n        current_len = len(lst[i])\n        if current_len > max_len:\n            max_len = current_len\n            max_lst = lst[i]\n    return (max_len, max_lst)",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "from functools import lru_cache\n\ndef count_no_of_ways(n, k):\n    \"\"\"\n    Calculate the total number of ways to paint the first 'n' posts on a fence using 'k' colors.\n    At each post, you can choose to either use the same color as the previous one,\n    or use a different color if possible. The result is returned modulo 10^9 + 7.\n    \n    :param n: Number of posts on the fence.\n    :param k: Number of available colors.\n    :return: Total number of ways to paint the fence, modulo 10^9 + 7.\n    \"\"\"\n    @lru_cache(maxsize=None)\n    def dp(post_num, last_color):\n        if post_num == 0:\n            return 1  # Base case: no posts painted means 1 way\n        \n        ways = 0\n        for new_color in range(k):\n            if new_color != last_color:\n                ways += dp(post_num - 1, new_color)\n        \n        return ways % (10**9 + 7)\n    \n    return dp(n-1, 0)\n\n# Check function with provided data points\nassert count_no_of_ways(2, 4) == 16, \"Test case 1 failed\"\nassert count_no_of_ways(3, 2) == 6, \"Test case 2 failed\"\nassert count_no_of_ways(4, 4) == 228, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(dividend, divisor):\n    result = dividend // divisor\n    return result",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef otherside_rightangle(a, b):\n    c = math.sqrt(a**2 + b**2)\n    return c",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def max_val(lst):\n    return max(lst)",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_div(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Inv_Count(arr, n):\n    # Initialize inversion counter\n    inv_count = 0\n    \n    # Iterate through all pairs of elements in the array\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # If current pair is out of order (i.e., arr[i] > arr[j]), it's an inversion\n            if arr[i] > arr[j]:\n                inv_count += 1\n                \n    return inv_count",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_list(nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            # If the item is a list, recursively call flatten_list on it and add the flattened results.\n            result.extend(flatten_list(item))\n        else:\n            # Otherwise, simply add the non-list item to the result.\n            result.append(item)\n    return result",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def intersection_nested_lists(lst1, lst2):\n    return [item for sublist in lst2 for item in sublist if item in lst1]\n\n# Test cases\nprint(intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n                                [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]))\nprint(intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]]))\nprint(intersection_nested_lists(['john', 'amal', 'joel', 'george'], [['john'], ['jack', 'john', 'mary'], ['howard', 'john'], ['jude']]))",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_aggregate(lst):\n    # Initialize variables to store the name with highest score and its total points\n    best_name = \"\"\n    total_points = 0\n    \n    for person in lst:\n        if total_points < person[1]:\n            best_name = person[0]\n            total_points = person[1]\n    \n    return (best_name, total_points)",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from math import comb\n\ndef count_binary_seq(n):\n    # Calculate the number of ways to split a sequence into two halves where both halves have an equal number of '1's and '0's.\n    return comb(2 * n, n)",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def dict_depth(d):\n    \"\"\"\n    Function to calculate the depth of a dictionary.\n    \n    Args:\n    d (dict): The dictionary for which the depth is to be calculated.\n    \n    Returns:\n    int: The depth of the dictionary.\n    \"\"\"\n    max_depth = -1\n    for key in d.keys():\n        if type(d[key]) == dict:\n            current_depth = 1 + dict_depth(d[key])\n            if current_depth > max_depth:\n                max_depth = current_depth\n                \n    return max_depth\n\n# Test case 1\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4\n# Test case 2\nassert dict_depth({'a':1, 'b': {'c':'python'}}) == 2\n# Test case 3\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_Bit_Number(n):\n    # Shift n right until it becomes 0 and keep track of how many shifts were made\n    shift_count = 0\n    while n > 0:\n        n >>= 1\n        shift_count += 1\n    \n    # The most significant bit position is the same as the shift count\n    return 1 << (shift_count - 1)",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - solve() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - solve() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - solve() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def solve(arr):\n    \"\"\"\n    Check if the number of inversions where both elements are positive and negative \n    is equal to the number of inversions where both elements are zero.\n    \n    Parameters:\n    arr (list): The input array containing integers.\n    \n    Returns:\n    bool: True if the counts are equal, False otherwise.\n    \"\"\"\n    pos_neg_inversions = 0\n    zero_inversions = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] > 0 and arr[j] < 0) or (arr[i] < 0 and arr[j] > 0):\n                pos_neg_inversions += 1\n                \n    for k in range(len(arr)):\n        if arr[k] == 0:\n            zero_inversions += 1\n            \n    return pos_neg_inversions == zero_inversions",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def find_Element(rotated_list, rotation_indices, target_index, length=0):\n    if not rotated_list:\n        raise ValueError(\"Rotated list cannot be empty\")\n    \n    if length == 0:\n        for indices in rotation_indices:\n            if indices[0] >= len(rotated_list) or indices[1] >= len(rotated_list):\n                raise IndexError(f\"Rotation indices {indices} exceed list length\")\n        length = len(rotated_list)\n    \n    if length % 2 != 0 and target_index < length // 2:\n        target_index += length // 2\n    \n    while True:\n        if target_index < 0 or target_index >= length:\n            raise IndexError(\"Target index out of bounds\")\n        \n        for indices in rotation_indices:\n            start, end = max(0, indices[0]), min(length - 1, indices[1])\n            \n            if start <= target_index < end:\n                return rotated_list[target_index]\n        \n        # Rotate left\n        temp = rotated_list[0]\n        for i in range(length - 1):\n            rotated_list[i] = rotated_list[i + 1]\n        rotated_list[length - 1] = temp\n        \n        for indices in rotation_indices:\n            indices[0] -= 1\n            if indices[0] < 0:\n                indices[0] = length - 1\n        length = len(rotated_list)\n\n# Test cases\nassert find_Element([1,2,3,4,5], [[0,2],[0,3]], 2) == 3\nassert find_Element([1,2,3,4], [[0,1],[0,2]], 1) == 3\nassert find_Element([1,2,3,4,5,6], [[0,1],[0,2]], 1) == 1\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(words_list):\n    for word in words_list:\n        if len(word) >= 3 and word[0] == 'p':\n            return word.split()[0], word.split()[1]\n    return None",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'nums' is not defined"
    ],
    "generated_code": "def max_sum_increasing_subseq(nums, i, k, j=nums[-1]):\n    dp = [[j] * len(nums)] + [[j] + [0] * n for n in nums[:i+1]]\n    \n    for x in range(1, i+1):\n        for y in range(len(dp[x])):\n            if nums[x-1] <= dp[x][y]:\n                continue\n            dp[x][y] = dp[x-1][y]\n        for y in reversed(range(max(0, k-x), min(j, k-x))):\n            if nums[k-x-1] >= dp[x][y]:\n                continue\n            dp[x][max(y, k - x)] = dp[x - 1][y] + nums[k - x - 1]\n\n    return dp[i][j]\n\n# Test cases\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4)) # Should return 11\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2)) # Should return 7\nprint(max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2)) # Should return 71",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 2: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 3: FAIL - can only concatenate tuple (not \"list\") to tuple"
    ],
    "generated_code": "def colon_tuplex(t, start_index, end_index):\n    return t[:start_index] + [(end_index)] + t[end_index+1:]",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport heapq\n\ndef large_product(list1: List[int], list2: List[int], n: int) -> List[int]:\n    # Calculate pairwise products and push them into a max heap with negative values for sorting in descending order\n    product_list = [(a * b, i, j) for i, a in enumerate(list1) for j, b in enumerate(list2)]\n    heapq.heapify(product_list)\n    \n    # Extract the top 'n' elements from the heap, convert back to positive, and sort them\n    result = sorted(heapq.nlargest(n, [a for a, _, _ in product_list]))\n    \n    return [abs(a) for a in result]\n\n# Test cases\nprint(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3))  # Output should be [60, 54, 50]\nprint(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4))  # Output should be [60, 54, 50, 48]\nprint(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5))  # Output should be [60, 54, 50, 48, 45]",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def string_to_tuple(s):\n    # Convert each character in the string into a tuple with its corresponding ASCII value and append it to the result list.\n    return [(ord(char),) for char in s]\n\n# Test cases\nprint(string_to_tuple(\"python 3.0\"))  # Expected output: ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nprint(string_to_tuple(\"item1\"))       # Expected output: ('i', 't', 'e', 'm', '1')\nprint(string_to_tuple(\"15.10\"))       # Expected output: ('1', '5', '.', '1', '0')",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_left_most_unset_bit(num):\n    # Loop until we find an unset bit in the binary representation of num\n    while (num & (num - 1)) != 0:\n        num ^= (num - 1)\n    return num + 1\n\n# Test cases\nprint(set_left_most_unset_bit(10))  # Expected output: 14\nprint(set_left_most_unset_bit(12))  # Expected output: 14\nprint(set_left_most_unset_bit(15))  # Expected output: 15",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    This function calculates the volume of a cone using its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n    \n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * radius**2 * height\n\n# Test cases to verify the correctness of the function\nassert abs(volume_cone(5, 12) - 314.15926535897927) < 0.0001\nassert abs(volume_cone(10, 15) - 1570.7963267948965) < 0.0001\nassert abs(volume_cone(19, 17) - 6426.651371693521) < 0.0001",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list containing only the positive numbers from the original list.\n    \n    Example usage:\n    >>> pos_nos([-1,-2,1,2])\n    [1, 2]\n    >>> pos_nos([3,4,-5])\n    [3, 4]\n    >>> pos_nos([-2,-3,1])\n    [1]\n    \"\"\"\n    # Initialize an empty list to store positive numbers\n    result = []\n    # Iterate through each number in the input list\n    for num in lst:\n        if num > 0:\n            # Append the positive number to the result list\n            result.append(num)\n    # Return the list of positive numbers\n    return result",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_rectangular_grid(grid, k):\n    # Initialize DP table with zeros and extra row at bottom\n    dp = [[0]*(k+1) for _ in range(len(grid)+1)]\n    \n    # Iterate over each cell in the grid\n    for i in range(1, len(dp)):\n        for j in range(k + 1):\n            # Add current element to top cell if it is less than equal to top cell value plus one\n            dp[i][j] += grid[i-1][j-1] if j > 0 else grid[i-1][j-1] - float('inf')\n            # Take maximum from left and diagonal elements\n            dp[i][j] = max(dp[i][j], dp[i-1][j-1] + grid[i-1][j-1])\n            # If there are still elements to be considered, add current element minus previous row\n            if i < len(dp)-1:\n                dp[i][j] = max(dp[i][j], dp[i+1][j] + grid[i-1][j-1])\n\n    # Return last cell's value which holds the maximum sum\n    return dp[-1][-1]\n\n# Test cases\nprint(max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3))  # Expected output: 7\nprint(max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5))  # Expected output: 24\nprint(max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5))  # Expected output: 81",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max_Len_Even(s):\n    \"\"\"\n    Find the longest even word in the given string s.\n    \n    :param s: Input string containing words separated by spaces.\n    :return: The longest even word found in the input string. If no even word exists, returns '-1'.\n    \"\"\"\n    max_len_even = -1\n    for word in s.split():\n        if len(word) % 2 == 0 and len(word) > max_len_even:\n            max_len_even = len(word)\n    return ' '.join([word for word in s.split() if len(word) == max_len_even])",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_last_occurrence(arr, target):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        \n        if arr[mid] < target:\n            low = mid + 1\n        else:\n            if mid == len(arr) - 1 or arr[mid + 1] > target:\n                return mid\n            else:\n                low = mid + 1\n                \n    return -1\n\n# Test cases\nprint(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 3\nprint(find_last_occurrence([2, 3, 5, 8, 6, 6, 6, 9, 9, 9], 9))  # Output: 9\nprint(find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6))  # Output: 6",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def modified_encode(lst):\n    result = []\n    current_val = lst[0]\n    count = 0\n    for item in lst:\n        if item == current_val:\n            count += 1\n        else:\n            result.append([current_val, count])\n            current_val = item\n            count = 1\n    result.append([current_val, count])\n    return result",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "from itertools import combinations_with_replacement\n\ndef max_volume(sides):\n    # Generate all possible combinations of three sides\n    for length, width, height in combinations_with_replacement(sides, 3):\n        # Calculate the volume of each combination\n        volume = length * width * height\n        # Return the maximum volume found\n        if volume > 0:\n            return volume\n    # If no valid dimensions were found, return 0\n    return 0\n\n# Test cases\nprint(max_volume([8]))  # Expected output: 18\nprint(max_volume([4]))  # Expected output: 2\nprint(max_volume([1]))  # Expected output: 0",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_long_word(input_string):\n    pattern = r'\\b\\w{5}\\b'\n    result = re.findall(pattern, input_string)\n    return result",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_difference(n):\n    def square_sum(num):\n        \"\"\"Calculate the sum of squares of first num natural numbers.\"\"\"\n        return int((num * (num + 1) * (2 * num + 1)) / 6)\n\n    def sum_square(num):\n        \"\"\"Calculate the sum of squares of first num natural numbers.\"\"\"\n        return int((num * (num + 1) * (2 * num + 1)) / 3)\n\n    return square_sum(n) - sum_square(n)",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: can only concatenate str (not \"int\") to str"
    ],
    "generated_code": "def find_demlo(number):\n    result = ''\n    length = len(str(number))\n    if length % 2 == 0:\n        half_length = int(length / 2)\n        first_half = str(int(str(number)[:half_length]))\n        second_half = str(int(str(number)[half_length:]) + int(str(number)[half_length:][::-1]))\n    else:\n        half_length = int((length - 1) / 2)\n        first_half = str(int(str(number)[:half_length]) * 2)\n        second_half = str(int(str(number)[half_length:] + int(str(number)[half_length-1] + str(number)[-2])))\n    \n    for i in range(0, half_length):\n        result += first_half[i]\n    result += second_half[::-1]\n    \n    return result\n\n# Test cases\nprint(find_demlo(\"111111\")) # Expected output: \"12345654321\"\nprint(find_demlo(\"1111\"))   # Expected output: \"1234321\"\nprint(find_demlo(\"13333122222\")) # Expected output: \"123456789101110987654321\"",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_min(lst):\n    # Initialize variables to store the minimum value and its first occurrence index\n    min_value = float('inf')\n    min_index = -1\n    \n    # Iterate through the list to find the minimum value and its index\n    for i in range(len(lst)):\n        if lst[i] < min_value:\n            min_value = lst[i]\n            min_index = i\n            \n    # Return a list containing all indices where the minimum value occurs\n    return [min_index + i for i in range(min_value)]",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange(arr, n):\n    arr.sort()\n    result = []\n    pos, neg = 0, 0\n    while pos < len(arr) and neg < len(arr):\n        if pos % 2 == 0:\n            result.append(arr[pos])\n            pos += 1\n        else:\n            result.append(arr[neg])\n            neg += 1\n    while pos < len(arr):\n        result.append(arr[pos])\n        pos += 1\n    while neg < len(arr):\n        result.append(arr[neg])\n        neg += 1\n    return result[:n]\n\n# Test cases\nprint(re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)) # Expected output: [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nprint(re_arrange([1, 2, 3, -4, -1, 4], 6))               # Expected output: [-4, 1, -1, 2, 3, 4]\nprint(re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8))       # Expected output: [-4, 4, -3, 7, -9, 9, 77, 5]",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: tuple index out of range"
    ],
    "generated_code": "def sum_of_alternates(input_list):\n    # Extracting first and third elements as per the requirement\n    result = [(input_list[i], input_list[i+2]) for i in range(0, len(input_list), 2)]\n    # Calculating sums of each pair\n    final_result = [sum(pair) for pair in result]\n    return tuple(final_result)\n\n# Example usage:\nprint(sum_of_alternates((5, 6, 3, 6, 10, 34)))  # Expected output: ((46,), (18,))\nprint(sum_of_alternates((1, 2, 3, 4, 5)))        # Expected output: ((6,), (9,))\nprint(sum_of_alternates((6, 7, 8, 9, 4, 5)))     # Expected output: ((21,), (18,))",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() argument must be a string, a bytes-like object or a real number, not 'complex'",
      "Test 2: FAIL - int() argument must be a string, a bytes-like object or a real number, not 'complex'",
      "Test 3: FAIL - int() argument must be a string, a bytes-like object or a real number, not 'complex'"
    ],
    "generated_code": "def get_Min_Squares(n):\n    min_squares = n  # Initialize with the input value as it's at least one square\n    \n    while n >= 0:\n        for i in range(int((n - 1) ** 0.5) + 1):  # Loop until sqrt(n)\n            if (i * i == n):\n                min_squares = i  # Update min_squares if found a perfect square\n                break\n        n -= min_squares  # Subtract the smallest square from n\n    \n    return min_squares  # Return the count of squares used",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from collections import Counter\n\ndef most_occurrences(string_list):\n    \"\"\"\n    Finds and returns the string with the maximum occurrence in a list of strings.\n    \n    Parameters:\n    string_list (list): A list of strings.\n    \n    Returns:\n    str: The string with the highest occurrence in the input list.\n    \"\"\"\n    # Using Counter to count occurrences of each string\n    occurrences = Counter(string_list)\n    # Finding the key(s) associated with the max value\n    max_string = [key for key, val in occurrences.items() if val == occurrences.most_common(1)[0][1]]\n    # Returning the first element as all values are equal\n    return max_string[0]\n\n# Test Cases\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]) == \"UTS\"\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"]) == \"year\"\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved\"]) == \"can\"",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if all sides are equal and return True for an isosceles triangle, False otherwise.\n    return a == b or b == c or a == c",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(lst, n, k):\n    lst[:k] = lst[-(n-k):-(n-1)] + lst[-(n-1):]\n    return lst\n\n# Test cases\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)) # Expected output: [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2))   # Expected output: [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))  # Expected output: [6, 7, 8, 9, 10, 1, 2]",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(lst):\n    # Initialize counter for negative numbers\n    neg_count = 0\n    \n    # Iterate through each number in the list\n    for num in lst:\n        # If the number is less than zero, increment the counter\n        if num < 0:\n            neg_count += 1\n            \n    # Return the total count of negative numbers\n    return neg_count",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_char(text):\n    pattern = r'\\b\\w{3,5}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Test cases\nprint(find_char('For the four consumer complaints contact manager AKR reddy'))  # Output: ['For', 'the', 'four', 'AKR', 'reddy']\nprint(find_char('Certain service are subject to change MSR'))  # Output: ['are', 'MSR']\nprint(find_char('Third party legal desclaimers'))  # Output: ['Third', 'party', 'legal']",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_unset_bits(number):\n    # Initialize count to 0\n    count = 0\n    \n    # Loop until number becomes 0\n    while number > 0:\n        # Increment count if least significant bit is not set\n        if number & 1 == 0:\n            count += 1\n        # Right shift number to process next bit\n        number >>= 1\n    \n    return count\n\n# Test cases\nprint(count_unset_bits(2))  # Output: 1\nprint(count_unset_bits(4))  # Output: 2\nprint(count_unset_bits(6))  # Output: 1",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(s):\n    freq = {}\n    for c in s:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    return freq\n\nprint(char_frequency('python'))  # {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nprint(char_frequency('program'))  # {'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nprint(char_frequency('language'))  # {'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def sortBySecondElement(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n# Test cases\nprint(sortBySecondElement([['a', 10], ['b', 5], ['c', 20], ['d', 15]])) # Output: [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nprint(sortBySecondElement([['452', 10], ['256', 5], ['100', 20], ['135', 15]])) # Output: [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nprint(sortBySecondElement([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])) # Output: [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Validity(a, b, c):\n    # Check if all sides are positive numbers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Sort the sides for simplicity of comparison\n    sides = sorted([a, b, c])\n    \n    # Check the triangle inequality theorem\n    return sides[0] + sides[1] > sides[2]",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ap_sum(first_term, last_term, step_size):\n    # Calculate the number of terms in the sequence\n    num_terms = ((last_term - first_term) // step_size) + 1\n    \n    # Use the formula for the sum of an arithmetic series\n    total_sum = num_terms * (first_term + last_term) // 2\n    \n    return total_sum",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum(month_name):\n    months = {\n        \"January\": False,\n        \"February\": True,\n        \"March\": False,\n        \"April\": False,\n        \"May\": False,\n        \"June\": False,\n        \"July\": False,\n        \"August\": False,\n        \"September\": False,\n        \"October\": False,\n        \"November\": False,\n        \"December\": False\n    }\n    \n    return months.get(month_name.lower(), False)",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_word(text):\n    # Use regex to check if 'python' is at the end of the string and ends with '.', ignoring case.\n    pattern = r'\\bpython\\.\\b'\n    result = re.search(pattern, text.lower())\n    \n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def count_substring_with_equal_ends(s):\n    n = len(s)\n    res = 0\n    for i in range(n):\n        j = i + 1\n        while j < n and s[i] == s[j]:\n            j += 1\n        if j - i > 1:\n            res += (j - i) * (j - i - 1) // 2\n        i += 1\n    return res",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Divisor(start, end):\n    \"\"\"\n    Finds and returns the maximum occurring divisor within the given interval [start, end].\n    \n    Parameters:\n    start (int): The starting index of the interval.\n    end (int): The ending index of the interval.\n    \n    Returns:\n    int: The maximum occurring divisor within the interval.\n    \"\"\"\n    max_div = None\n    current_max_count = 0\n    \n    for i in range(start, end + 1):\n        count = 0\n        for j in range(1, i + 1):\n            if i % j == 0:\n                count += 1\n        if count > current_max_count:\n            max_div = i\n            current_max_count = count\n            \n    return max_div\n\n# Test cases\nprint(find_Divisor(2, 2))   # Expected output: 2\nprint(find_Divisor(2, 5))   # Expected output: 2\nprint(find_Divisor(5, 10))  # Expected output: 2",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def sum_three_smallest_nums(nums):\n    # Remove duplicates and sort in ascending order\n    sorted_unique_nums = sorted(set(nums))\n    \n    # Calculate the sum of the first three elements\n    total_sum = sum(sorted_unique_nums[:3])\n    \n    return total_sum\n\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_to_tuple(input_set):\n    \"\"\"\n    Converts a given set into a tuple.\n    \n    Args:\n    input_set (set): The set to be converted into a tuple.\n    \n    Returns:\n    tuple: A tuple containing all elements from the input set in the same order as they appear.\n    \"\"\"\n    return tuple(sorted(input_set))\n\n# Test Cases\nprint(set_to_tuple({1, 2, 3, 4, 5})) # Should print: (1, 2, 3, 4, 5)\nprint(set_to_tuple({6, 7, 8, 9, 10, 11})) # Should print: (6, 7, 8, 9, 10, 11)\nprint(set_to_tuple({12, 13, 14, 15, 16})) # Should print: (12, 13, 14, 15, 16)",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef find_minimum_range(arrays):\n    \"\"\"\n    Finds the smallest range that includes at least one element from each of the given lists.\n    \n    :param arrays: List of integer lists representing the input arrays.\n    :return: A tuple containing two integers (start, end) denoting the smallest range.\n    \"\"\"\n    import heapq\n    \n    # Initialize min heap and sort the arrays based on their first elements\n    heap = [[arrays[i][0], i] for i in range(len(arrays))]\n    heapq.heapify(heap)\n    result_start, result_end = float('inf'), -float('inf')\n    current_max = heap[0][0]\n    start_index, end_index = 0, 0\n    \n    while len(heap):\n        _, idx = heapq.heappop(heap)\n        if end_index == 0:\n            current_min = arrs[idx][0]\n        else:\n            current_min = arrs[idx][0]\n        \n        # Update the minimum value seen so far\n        if current_min > current_max:\n            current_max = current_min\n        \n        # Check if we have found a new valid range\n        if current_min >= result_start:\n            result_start = current_min\n            result_end = max(result_end, end_index + arrs[idx].index(current_max))\n        \n        # Move to the next element in the list with the smallest element\n        if idx < len(arrs) - 1 and arrs[idx + 1]:\n            heapq.heappush(heap, [arrs[idx + 1][0], idx + 1])\n            current_max = heapq.nsmallest(1, arrs[idx + 1])[0]\n        elif not arrs[end_index]:\n            break\n        end_index += 1\n        \n    return (result_start, result_end)\n\n# Test cases\nprint(find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])) # Expected output: (4, 6)\nprint(find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) ) # Expected output: (4, 7)\nprint(find_minimum_range([[4,",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dig_let(s):\n    # Initialize counters for digits and letters\n    digit_count = 0\n    letter_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char.isdigit():\n            digit_count += 1\n        elif char.isalpha():\n            letter_count += 1\n            \n    return (digit_count, letter_count)",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Odd_Squares(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if sum(j % 2 == 1 for j in divisors(i)) > 0:\n            count += 1\n    return count\n\ndef divisors(n):\n    divs = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divs.append(i)\n            if i != n // i:\n                divs.append(n//i)\n    return sorted(divs)\n\nprint(count_Odd_Squares(5,100))\n# Output: 8\nprint(count_Odd_Squares(8,65))\n# Output: 6\nprint(count_Odd_Squares(2,5))\n# Output: 1",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_consecutivenums(lst):\n    # Initialize the result list with the first element's difference from itself\n    res = [lst[0] - lst[0]]\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(lst)):\n        # Calculate the difference and append it to the result list\n        res.append(lst[i] - lst[i-1])\n    \n    return res",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def calculate_entringer_number(n, k):\n    # Calculate the sum of first n natural numbers and subtracting the combination formula C(n-1, k-1)\n    result = ((n * (n + 1)) // 2) - comb(n - 1, k - 1)\n    return result\n\nfrom math import comb\n\n# Test cases to verify the correctness of the function\nassert calculate_entringer_number(4, 3) == 5, \"Test case 1 failed\"\nassert calculate_entringer_number(4, 2) == 4, \"Test case 2 failed\"\nassert calculate_entringer_number(3, 1) == 1, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(x, y):\n    # Initialize counters for top and bottom rows and left and right columns\n    total = x * (x + 1) // 2\n    extra_top_bottom = max(0, x - 1)\n    extra_left_right = max(0, y - 1)\n    \n    # Calculate the number of additional squares due to edges\n    total += (extra_top_bottom + 1) * ((y - 1) * (y - 1)) + \\\n             (extra_left_right + 1) * ((x - 1) * (x - 1))\n    \n    return total",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "from collections import deque\n\ndef find_ways(n):\n    \"\"\"\n    Given an integer n, returns the number of ways to partition n such that all parts are distinct and their sum is less than or equal to n.\n    \n    Parameters:\n    n (int): The target sum for the partitions.\n    \n    Returns:\n    int: The number of valid partitions.\n    \"\"\"\n    if n < 0:\n        return 0\n    \n    # Initialize DP array where dp[i] will store the count of partitions with sum i\n    dp = [0] * (n + 1)\n    dp[0] = 1  # Base case: one way to partition sum 0\n    \n    # Iterate over each possible partition size\n    for i in range(1, n + 1):\n        for j in range(i - 1, min(i // 2 + 1, n), -1):\n            dp[i] += dp[j]\n    \n    return dp[n]\n\n# Check function with provided data points\nassert find_ways(4) == 2, \"Test case 1 failed\"\nassert find_ways(6) == 5, \"Test case 2 failed\"\nassert find_ways(8) == 14, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(s):\n    # Check if all characters in the string are either '0' or '1'\n    if all(c == '0' or c == '1' for c in s):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test cases\nprint(check(\"01010101010\"))  # Expected output: Yes\nprint(check(\"name0\"))       # Expected output: No\nprint(check(\"101\"))         # Expected output: Yes",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def minimum_Length(s):\n    i = 0\n    min_length = len(s)\n    \n    while i < len(s) - 1:\n        if s[i] == s[i + 1]:\n            j = i + 1\n            while j < len(s) and s[j] == s[i]:\n                j += 1\n            \n            min_length = min(min_length, len(s[:i]) + len(s[j:]))\n            \n            i = j\n        \n        i += 1\n    \n    return min_length\n\n# Test cases\nprint(minimum_Length(\"mnm\"))  # Output: 1\nprint(minimum_Length(\"abcda\"))  # Output: 3\nprint(minimum_Length(\"abcb\"))  # Output: 2",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Element(arr, n, k):\n    for i in range(len(arr)):\n        if arr[i] == arr[k + i]:\n            return arr[i]\n    return -1",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def unique_Characters(input_str):\n    char_set = set()\n    for char in input_str:\n        if char in char_set:\n            return False\n        char_set.add(char)\n    return True",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_column(matrix, col_index):\n    return [[row[i] for i in range(len(row)) if i != col_index] for row in matrix]",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_ap(t,n,a):\n    return a + (t - 1) * n",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import math\n\ndef count_Rectangles(r):\n    \"\"\"\n    This function counts the number of rectangles with side lengths between 1 and r (inclusive)\n    that can fit inside a circle of radius r.\n    \n    :param r: Radius of the circle\n    :return: Number of rectangles that can be formed\n    \"\"\"\n    # The maximum number of squares that can fit along one diameter of the circle is 2*r + 1\n    max_squares = 2 * r + 1\n    \n    # Each square can form multiple rectangles when rotated at different angles,\n    # so we need to multiply by the factor which accounts for all possible rotations\n    return max_squares ** 2 // 4\n\n# Test the function with provided data points\nassert count_Rectangles(2) == 8, \"Test case 1 failed\"\nassert count_Rectangles(1) == 1, \"Test case 2 failed\"\nassert count_Rectangles(0) == 0, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(angle1, angle2):\n    # Calculate the third angle in degrees\n    return 180 - angle1 - angle2",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_max(tuples_list):\n    max_value = tuples_list[0][0]\n    for tup in tuples_list:\n        if tup[0] > max_value:\n            max_value = tup[0]\n    return max_value",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef moddiv_list(a: List[int], b: List[int]) -> List[int]:\n    return list(map(lambda x, y: x % y if y else None, a, b))\n\nprint(moddiv_list([4,5,6],[1, 2, 3]))  # Output: [0, 1, 0]\nprint(moddiv_list([3,2],[1,4]))       # Output: [0, 2]\nprint(moddiv_list([90,120],[50,70]))  # Output: [40, 50]",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'sqrt' is not defined"
    ],
    "generated_code": "def Check_Solution(a,b,c):\n    # Calculate the discriminant\n    D = b**2 - 4*a*c\n    \n    # Check if one root is twice the other and calculate roots\n    root_1 = (-b + sqrt(D)) / (2 * a)\n    root_2 = (-b - sqrt(D)) / (2 * a)\n    \n    # Check conditions for one root being twice the other\n    condition_met = abs(root_1 - 2 * root_2) < 0.0001\n    \n    # Return result based on conditions\n    if condition_met:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test cases\nprint(Check_Solution(1,3,2))  # Expected output: \"Yes\"\nprint(Check_Solution(1,2,3))  # Expected output: \"No\"\nprint(Check_Solution(1,-5,6)) # Expected output: \"No\"",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_carol(n):\n    \"\"\"\n    Calculate the Carol number for the given n.\n    \n    Args:\n        n (int): The position in the sequence of Carol numbers.\n        \n    Returns:\n        int: The Carol number at the specified position.\n    \"\"\"\n    # Implementing the recursive formula for Carol numbers\n    if n == 1:\n        return 1\n    else:\n        return ((n - 1) * pow(2, n - 1)) + get_carol(n - 1)",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lst):\n    return [i for i in lst if i]",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef max_occurrences(lst):\n    # Use Counter to count occurrences of each element in the list\n    counts = Counter(lst)\n    # Find the key with the highest value (most occurrences) and return it as a tuple\n    most_common_item = counts.most_common(1)[0][0]\n    return most_common_item\n\n# Test cases\nprint(max_occurrences([1,2,3,1,2,3,12,4,2]))  # Expected output: 2\nprint(max_occurrences([1,2,6,7,0,1,0,1,0]))  # Expected output: 1,0\nprint(max_occurrences([1,2,3,1,2,4,1]))       # Expected output: 1",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_K_element(tuples_list, k):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through each tuple in the input list\n    for tup in tuples_list:\n        # Create a new tuple with added value\n        new_tuple = [x + k for x in tup]\n        # Append the new tuple to the result list\n        result.append(new_tuple)\n    \n    return result\n\n# Test cases\nprint(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4))  # Expected output: [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nprint(add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8))  # Expected output: [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nprint(add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9))  # Expected output: [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_flip_to_make_string_alternate(binary_str):\n    count = 0\n    previous_char = None\n    \n    for char in binary_str:\n        if previous_char is not None and previous_char != char:\n            count += 1\n        previous_char = char\n    \n    # If the last character is different from the first character, it needs one more flip.\n    return max(0, count + int(previous_char) ^ bool(count))\n\n# Test cases\nprint(min_flip_to_make_string_alternate(\"0001010111\"))  # Expected output: 2\nprint(min_flip_to_make_string_alternate(\"001\"))          # Expected output: 1\nprint(min_flip_to_make_string_alternate(\"010111011\"))   # Expected output: 2",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(n):\n    # Initialize counter for digit count\n    digit_count = 0\n    \n    # Loop through each character in the string representation of n\n    while n > 0:\n        # Remove the last digit from n and increment digit count\n        n //= 10\n        digit_count += 1\n    \n    # Return the total count of digits\n    return digit_count\n\n# Test the function with provided data points\nassert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def adjacent_num_product(lst):\n    # Initialize variables to store the maximum product and the current product\n    max_product = lst[0] * lst[1]\n    curr_product = lst[0] * lst[1]\n\n    # Iterate through the list starting from the second element\n    for i in range(1, len(lst)-1):\n        # Update the current product if it is greater than the previous one\n        curr_product = max(lst[i], lst[i]*curr_product)\n        # Update the maximum product if the current product is larger\n        max_product = max(max_product, curr_product)\n\n    # Return the maximum product found\n    return max_product",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    \"\"\"\n    Check if the binary tree is balanced.\n    \n    A binary tree is considered balanced if for each node in the tree,\n    the height difference between its left and right subtrees is no more than one.\n    \n    Args:\n    root: The root of the binary tree\n    \n    Returns:\n    True if the binary tree is balanced, False otherwise\n    \"\"\"\n\n    def get_height(node):\n        if not node:\n            return 0\n        else:\n            left_height = get_height(node.left)\n            right_height = get_height(node.right)\n            if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n                return -1\n            return max(left_height, right_height) + 1\n    \n    return get_height(root) != -1",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def repeat_tuples(tup, n):\n    # Repeat the tuple 'n' times and return the result as a list of tuples\n    return [tup] * n",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cuboid(length, width, height):\n    # Calculate the lateral surface area of a cuboid\n    return 2 * (length + width) * height",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def float_sort(tuples):\n    # Sort the tuples based on the second element (which is assumed to be a float)\n    return sorted(tuples, key=lambda x: float(x[1]))\n\n# Test cases\nprint(float_sort([(\"item1\", \"12.20\"), (\"item2\", \"15.10\"), (\"item3\", \"24.5\")]))  # [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\nprint(float_sort([(\"item1\", \"15\"), (\"item2\", \"10\"), (\"item3\", \"20\")]))         # [('item3', '20'), ('item1', '15'), ('item2', '10')]\nprint(float_sort([(\"item1\", \"5\"), (\"item2\", \"10\"), (\"item3\", \"14\")]))          # [('item3', '14'), ('item2', '10'), ('item1', '5')])",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_missing(arr, start, end):\n    if arr[start] != start:\n        return start\n    while start <= end and arr[start] == start:\n        start += 1\n    return start\n\n# Test Cases\nprint(smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)) # Output: 7\nprint(smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6)) # Output: 3\nprint(smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)) # Output: 0",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef heap_assending(lst):\n    return sorted(lst)",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 'ab' failed"
    ],
    "generated_code": "from itertools import permutations\n\ndef permute_string(input_string):\n    # Generate all permutations and filter out those with duplicates\n    unique_perms = {perm for perm in permutations(input_string)}\n    return list(unique_perms)\n\n# Test cases to verify the correctness of the solution\nassert permute_string('ab') == ['ab', 'ba'], \"Test case 'ab' failed\"\nassert permute_string('abc') == ['abc', 'bac', 'bca', 'acb', 'cab', 'cba'], \"Test case 'abc' failed\"\nassert permute_string('abcd') == [\n    'abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', \n    'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca',\n    'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba'\n], \"Test case 'abcd' failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def round_num(num, n):\n    return round(num / n) * n",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_replica(lst):\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    result_list = []\n    unique_count = 0\n    for item in lst:\n        if count_dict[item] > 1:\n            result_list.append('MSP')\n            unique_count += 1\n        else:\n            result_list.append(item)\n    while len(result_list) < len(lst):\n        result_list.append('MSP')\n    return tuple(result_list[:len(lst)-unique_count])",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def remove_Char(input_str, char_to_remove):\n    # Convert the input string into a list for easy manipulation\n    input_list = list(input_str)\n    \n    # Loop through the list and replace each occurrence of the specified character with an empty string\n    for i in range(len(input_list)):\n        if input_list[i] == char_to_remove:\n            del input_list[i]\n            \n    # Join the list back into a string and return it\n    return ''.join(input_list)\n\n# Test cases\nprint(remove_Char(\"aba\", 'a'))  # Expected output: \"b\"\nprint(remove_Char(\"toggle\", 'g'))  # Expected output: \"tole\"\nprint(remove_Char(\"aabbc\", 'b'))  # Expected output: \"aac\"",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_first(lst):\n    \"\"\"\n    Shifts the last element of the given list 'lst' to the first position.\n    \n    Parameters:\n    lst (list): The input list\n    \n    Returns:\n    list: The modified list with the last element moved to the front.\n    \"\"\"\n    if len(lst) > 1:\n        last_element = lst.pop()\n        lst.insert(0, last_element)\n    return lst",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    return 2 * (length*width + width*height + length*height)",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multi_list(rows, cols):\n    return [[str(i * j) for i in range(cols)] for j in range(rows)]",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(lst, index):\n    # Sort the list based on the specified index in each sublist\n    return sorted(lst, key=lambda x: x[index])",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_rotation_count(arr):\n    low = 0\n    high = len(arr) - 1\n    \n    while arr[low] >= arr[high]:\n        if high - low == 1:\n            return high\n        \n        mid = (low + high) // 2\n        prev_mid = (mid + high) % len(arr)\n        \n        # Check which part is sorted\n        if arr[mid] <= arr[prev_mid]:\n            high = mid\n        else:\n            low = mid\n            \n    return high",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(num):\n    # Convert the number to binary and split it into chunks of 4 characters each\n    binary = format(num, 'b').zfill((len(bin(num)) - bin(num).find('0b')) // 4 * 4)\n    \n    # Toggle the bits in the binary string and convert back to integer\n    toggled_binary = ''.join(['1' if bit == '0' else '0' for bit in binary])\n    result = int(toggled_binary, 2)\n    \n    return result",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_Of_Smallest(N,arr):\n    min_val = min(arr)\n    count = arr.count(min_val)\n    return count",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)\n\n# Test cases\nassert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_count(s):\n    balance = 0\n    swaps = 0\n    \n    for char in s:\n        if char == \"[\":\n            balance += 1\n        else:\n            balance -= 1\n        \n        # If balance is negative, it means we need to swap an opening bracket with a closing one.\n        if balance < 0:\n            swaps += abs(balance)\n            balance = 0  # Reset balance after swapping\n    \n    # After the loop ends, check again because there might be unmatched brackets at the end.\n    if balance < 0:\n        swaps += abs(balance)\n    \n    return swaps",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: invalid literal for int() with base 10: ''"
    ],
    "generated_code": "def even_or_odd(hex_num):\n    # Remove all letters from the string to get just the numeric value\n    numeric_value = ''.join([char for char in hex_num if char.isdigit()])\n    \n    # Convert the numeric string to an integer and then find its parity (odd/even)\n    if int(numeric_value) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test cases\nprint(even_or_odd(\"AB3454D\"))  # Output should be \"Odd\"\nprint(even_or_odd(\"ABC\"))     # Output should be \"Even\"\nprint(even_or_odd(\"AAD\"))     # Output should be \"Odd\"",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    Finds the highest power of 2 that is less than or equal to n.\n    \n    Parameters:\n    n (int): The number to check against powers of two.\n    \n    Returns:\n    int: The highest power of 2 less than or equal to n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be positive.\")\n    \n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    \n    return power - (n % power)\n\n# Test cases\nprint(highest_Power_of_2(10))  # Expected output: 8\nprint(highest_Power_of_2(19))  # Expected output: 16\nprint(highest_Power_of_2(32))  # Expected output: 32",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev, curr = 2, 1\n        for _ in range(2, n + 1):\n            prev, curr = curr, prev + curr\n        return curr",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_string(lst, s):\n    return [s + str(item) for item in lst]",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def convert_list_dictionary(list_keys, list_values, values_dict):\n    result = {}\n    for i in range(len(list_keys)):\n        key = list_keys[i]\n        value = list_values[i]\n        if key not in result:\n            result[key] = {value: values_dict[i]}\n        else:\n            result[key][value] = values_dict[i]\n    return [result]\n\n# Test cases\nprint(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],\n                              [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"],\n                              [85, 98, 89, 92])) # [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\nprint(convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],\n                              [\"python\",\"program\",\"language\",\"programs\"],\n                              [100,200,300,400])) # [{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n\nprint(convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],\n                              [\"java\",\"C\",\"C++\",\"DBMS\"],\n                              [10,20,30,40])) # [{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "import math\n\ndef get_max_sum(n):\n    \"\"\"\n    Given an integer n, returns the maximum sum of the values calculated as:\n    f(n) = max((f(n/2) + f(n/3) + f(n/4) + f(n/5)) , n)\n    \n    Args:\n    n : int - A positive integer\n    \n    Returns:\n    int - The maximum sum according to the formula above.\n    \"\"\"\n    # Initialize memoization table with base case values\n    memo = [math.inf] * (n+1)\n    memo[1] = 1  # Base case for single number\n    \n    def helper(current_number):\n        if current_number <= 0:\n            return 0\n        \n        if memo[current_number] != math.inf:\n            return memo[current_number]\n        \n        # Calculate maximum sum including all valid divisors\n        max_sum = 0\n        for i in range(2, min(current_number, 5)+1):\n            max_sum = max(max_sum, helper(int(current_number / i)) + helper(i))\n        \n        memo[current_number] = max_sum\n        return max_sum\n    \n    return helper(n)\n\n# Test cases\nprint(get_max_sum(60))  # Expected output: 106\nprint(get_max_sum(10))  # Expected output: 12\nprint(get_max_sum(2))   # Expected output: 2",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length_list(test_list):\n    return max(enumerate(test_list), key=lambda x: len(x[1]))[1]\n\n# Test cases\nprint(max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: ([13, 15, 17], 3)\nprint(max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]))      # Expected output: ([1, 2, 3, 4, 5], 5)\nprint(max_length_list([[3,4,5],[6,7,8,9],[10,11,12]]))                  # Expected output: ([6, 7, 8, 9], 4)",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(tup):\n    # Convert all elements in the tuple to strings and sort them.\n    sorted_str = ''.join(sorted(str(element) for element in tup))\n    \n    # Check if the sorted string contains any duplicate characters.\n    return len(set(sorted_str)) == len(tup)\n\n# Test cases\nprint(check_distinct((1, 4, 5, 6, 1, 4)))  # Expected output: False\nprint(check_distinct((1, 4, 5, 6)))         # Expected output: True\nprint(check_distinct((2, 3, 4, 5, 6)))      # Expected output: True",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(input_string):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char in input_string:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_char(s):\n    # Check if the string is empty or has one character, which trivially matches\n    if len(s) < 2:\n        return 'Valid'\n    \n    # Create regular expression pattern to match strings starting and ending with the same character\n    pattern = f'^.{s[0]}.*{s[0]}\\$'\n    \n    # Use re.match to find the first occurrence of the pattern in the input string\n    if re.match(pattern, s):\n        return 'Valid'\n    else:\n        return 'Invalid'",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_numbers(num1, num2, num3):\n    # First, sort the numbers in ascending order.\n    sorted_nums = sorted([num1, num2, num3])\n    \n    # The median is the middle number in an ordered list of numbers. \n    # For three numbers, it's the second one in the sorted list.\n    return float(sorted_nums[1])\n\n# Example check function to verify the correctness of the solution\ndef check_solution():\n    assert abs(median_numbers(25, 55, 65) - 55.0) < 0.01\n    assert abs(median_numbers(20, 10, 30) - 20.0) < 0.01\n    assert abs(median_numbers(15, 45, 75) - 45.0) < 0.01\n\ncheck_solution()",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_of_digits(numbers_list):\n    total_sum = 0\n    for i in numbers_list:\n        if isinstance(i, int) or isinstance(i, float):  # Check if the element is an integer or a float\n            total_sum += sum(int(digit) for digit in str(abs(i)))\n    return total_sum\n\n# Test cases\nprint(sum_of_digits([10, 2, 56]))  # Expected output: 14\nprint(sum_of_digits([[10, 20, 4, 5, 'b', 70, 'a']]))  # Expected output: 19\nprint(sum_of_digits([10, 20, -4, 5, -70]))  # Expected output: 19",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def bitwise_xor(tup1, tup2):\n    # Initialize an empty list to store the result of XOR operations for each pair of elements\n    result = []\n    \n    # Iterate over the indices of the tuples\n    for i in range(len(tup1)):\n        # Perform the bitwise XOR operation on the corresponding elements from both tuples and append the result to the result list\n        result.append(bin(tup1[i] ^ tup2[i])[2:].zfill(4))\n    \n    # Join the elements of the result list into a single string with spaces as separators\n    return ' '.join(result)\n\n# Test the function with provided data points\nprint(bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)))  # Expected output: \"111 011 110 100\"\nprint(bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)))  # Expected output: \"110 010 101 100\"\nprint(bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)))  # Expected output: \"110 010 101 101\"",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_freq(lst):\n    from collections import Counter\n    \n    # Count occurrences of each tuple\n    freq = Counter(t for tup in lst for t in set(tup))\n    \n    # Return sum of frequencies of unique tuples\n    return sum(freq[t] for t in freq)\n\n# Test cases\nprint(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]))  # Output: 3\nprint(extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)]))  # Output: 4\nprint(extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)]))  # Output: 4",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_nested_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tuple(a + b for a, b in zip(tup1[i], tup2[i])))\n    return tuple(result)",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ncr_modp(n, k, p):\n    def factorial(x):\n        fact = 1\n        for i in range(2, x + 1):\n            fact *= i\n        return fact\n    \n    result = 1\n    for i in range(k + 1, n + 1):\n        result = (result * (i % p)) % p\n    for j in range(1, k + 1):\n        result = (result * pow(factorial(j) % p, p-2, p)) % p\n    return result",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    pattern = r'^(http|ftp)s?://([\\w.-]+)?(\\.[\\w-]+)+(/[\\w.-]*)*'\n    match = re.match(pattern, url)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_valid_URL(\"https://www.google.com\"))  # Expected output: True\nprint(is_valid_URL(\"https:/www.gmail.com\"))    # Expected output: False\nprint(is_valid_URL(\"https:// www.redit.com\"))  # Expected output: False",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_tuplex(tup, elem):\n    return elem in tup",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(n):\n    # Initialize result variable with 'Even' as default value.\n    parity = 'Even'\n    \n    # Check if n is divisible by 2 and update parity accordingly.\n    if n % 2 == 0:\n        parity = 'Even Parity'\n    else:\n        parity = 'Odd Parity'\n    \n    return parity",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import permutations\n\ndef rearrange_bigger(n):\n    \"\"\"\n    Given an integer n, returns True if there is a way to arrange its digits into a larger integer.\n    Otherwise, returns False. The solution must not include leading zeros.\n    \n    >>> rearrange_bigger(12)\n    True\n    >>> rearrange_bigger(10)\n    False\n    >>> rearrange_bigger(102)\n    True\n    \"\"\"\n    # Convert the integer to a list of its digits\n    digits = [int(d) for d in str(n)]\n    \n    # Generate all possible permutations of the digits\n    perms = set(permutations(digits))\n    \n    # Try each permutation and check if it's greater than the original number\n    for perm in perms:\n        perm_num = int(''.join(map(str, perm)))\n        if perm_num > n and len(str(perm_num)) == len(str(n)):\n            return True\n    \n    return False\n\n# Check function with provided data points\nassert rearrange_bigger(12) == True, \"Test case 1 failed\"\nassert rearrange_bigger(10) == False, \"Test case 2 failed\"\nassert rearrange_bigger(102) == True, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "from typing import List\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    result = []\n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    \n    while k > 0 and len(heap) > 0:\n        current_sum, i, j = heapq.heappop(heap)\n        \n        if j == len(nums2):\n            continue\n        \n        result.append([nums1[i], nums2[j]])\n        \n        next_i = i + 1\n        next_j = j + 1\n        \n        heapq.heappush(heap, (current_sum + nums2[next_j], next_i, next_j))\n        \n        if next_i < len(nums1):\n            heapq.heappush(heap, (current_sum + nums1[next_i] + nums2[j], next_i, j))\n        \n        k -= 1\n    \n    return result[:k]",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_product_tuple(tuples_list):\n    # Calculate the product for each tuple and store in a list.\n    products = [x * y for x, y in tuples_list]\n    # Return the minimum value from the list of products.\n    return min(products)\n\n# Test cases\nprint(min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Expected output: 8\nprint(min_product_tuple([(10, 20), (15, 2), (5, 10)]))       # Expected output: 30\nprint(min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]))  # Expected output: 100",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '<' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '<' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def min_val(lst):\n    # Initialize min_value with the first element of the list\n    min_value = lst[0]\n    \n    # Iterate through each item in the list\n    for val in lst:\n        # Update min_value if the current item is smaller than the current min_value\n        if isinstance(val, int) and val < min_value:\n            min_value = val\n    \n    return min_value",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    Convert a string from snake_case format to CamelCase.\n    \n    Args:\n    snake_str (str): The string in snake_case format to be converted.\n    \n    Returns:\n    str: The converted string in CamelCase format.\n    \"\"\"\n    # Split the input string into words based on underscores and capitalize each word except for the first one.\n    return ''.join(word.capitalize() or '_' for word in re.split('_|/', snake_str))\n\n# Test cases\nassert snake_to_camel('android_tv') == 'AndroidTv', \"Test case 1 failed\"\nassert snake_to_camel('google_pixel') == 'GooglePixel', \"Test case 2 failed\"\nassert snake_to_camel('apple_watch') == 'AppleWatch', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(numbers):\n    # Use filter() with a lambda function to exclude odd numbers\n    return list(filter(lambda x: not x % 2, numbers))\n\n# Test cases\nprint(remove_odd([1, 2, 3]))  # Expected output: [2]\nprint(remove_odd([2, 4, 6]))  # Expected output: [2, 4, 6]\nprint(remove_odd([10, 20, 3]))  # Expected output: [10, 20]",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_nth_element(lst, n):\n    return [tup[n] for tup in lst]\n\n# Test cases\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1))",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(seq1, seq2):\n    # Check if there is any element common between two sequences\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False\n\n# Test cases\nprint(overlapping([1,2,3,4,5], [6,7,8,9]))  # Expected output: False\nprint(overlapping([1,2,3], [4,5,6]))       # Expected output: False\nprint(overlapping([1,4,5], [1,4,5]))       # Expected output: True",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_Product(nums):\n    if len(nums) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    min_val = float('inf')\n    max_val = -float('inf')\n    \n    for num in nums:\n        # To get the maximum product of two numbers, we need to consider both scenarios\n        # where either positive or negative values can lead to the maximum result.\n        current_max = max(num * max_val, num * min_val, num)\n        \n        # Updating the minimum and maximum values\n        min_val = min(num * min_val, num * max_val, num)\n        max_val = current_max\n        \n    # Since the maximum product can also be between two negatives,\n    # check again after swapping min_val and max_val to include the second scenario.\n    if min_val * max_val > max_val * min_val:\n        return [min_val, max_val]\n    else:\n        return [max_val, min_val]\n\n# Test cases\nprint(max_Product([1,2,3,4,7,0,8,4]))  # Expected output: [7, 8]\nprint(max_Product([0,-1,-2,-4,5,0,-6]))  # Expected output: [-4, -6]\nprint(max_Product([1,2,3]))  # Expected output: [2, 3]",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def breakSum(n):\n    if n == 0:\n        return 0\n    else:\n        return max((n // 3 + breakSum(n - 3)), (n // 2 + breakSum(n - 2)))\n\n# Test cases\nprint(breakSum(12))  # Expected output: 13\nprint(breakSum(24))  # Expected output: 27\nprint(breakSum(23))  # Expected output: 23",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def group_tuples(tuples_list):\n    # Sort each tuple and then combine them using itertools.zip_longest with fillvalue as None\n    return [tuple(sorted(x)) for x in tuples_list]\n\n# Test Cases\nprint(group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]))  # Output: [('x', 'y', 'z'), ('w', 't')]\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]))  # Output: [('a', 'b', 'c'), ('d', 'e')]\nprint(group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]))  # Output: [('f', 'g', 'g'), ('h', 'i')]",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max' is not defined",
      "Test 2: FAIL - name 'Find_Max' is not defined",
      "Test 3: FAIL - name 'Find_Max' is not defined"
    ],
    "generated_code": "def find_max(lst):\n    # Initialize variables to store the sublist with maximum length and its length\n    max_len = 0\n    result = []\n\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            result = sublist\n\n    return result",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef round_and_sum(numbers: List[float]) -> int:\n    \"\"\"\n    Round each number in the given list, calculate the total sum of these rounded values,\n    then multiply the result by the length of the list.\n    \n    :param numbers: A list of floating-point numbers.\n    :return: The product of the sum of the rounded numbers and their count.\n    \"\"\"\n    rounded_numbers = [round(num) for num in numbers]\n    return int(math.fsum(rounded_numbers) * len(numbers))\n\n# Test cases to verify the correctness of the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243\nassert round_and_sum([5,2,9,24.3,29]) == 345\nassert round_and_sum([25.0,56.7,89.2]) == 513\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cube_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            total += (i * i * i)\n    return total",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def concatenate_tuple(tup):\n    # Join all elements in the tuple with a space as the delimiter\n    return ''.join(map(str, tup))\n\n# Test cases to verify the correctness of the solution\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS', \"Test case 1 failed\"\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\")) == 'QWE-is-4-RTY', \"Test case 2 failed\"\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\")) == 'ZEN-is-4-OP', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\n    total = sum(i**3 for i in range(1, n+1))\n    return total / n",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "from typing import List\n\ndef get_maxgold(mine_map: List[List[int]], rows: int, cols: int) -> int:\n    \"\"\"\n    Solve the gold mine problem where you have an n x m grid of mines and want to maximize the total amount of gold collected.\n    \n    :param mine_map: A list of lists representing the mine field with integers indicating gold values at each cell.\n    :param rows: The number of rows in the mine map.\n    :param cols: The number of columns in the mine map.\n    :return: The maximum amount of gold that can be collected from the mine field starting from any cell.\n    \"\"\"\n    def dfs(row, col, visited):\n        if not (0 <= row < rows and 0 <= col < cols) or mine_map[row][col] == 0 or visited[row * cols + col]:\n            return 0\n        max_gold = mine_map[row][col]\n        visited[row * cols + col] = True\n        for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n            max_gold += dfs(r, c, visited)\n        return max_gold\n    \n    visited = [[False]*cols for _ in range(rows)]\n    return max(dfs(i, j, visited) for i in range(rows) for j in range(cols))\n\n# Test cases\nprint(get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)) # Expected output: 16\nprint(get_maxgold([[10,20],[30,40]],2,2)) # Expected output: 70\nprint(get_maxgold([[4,9],[3,7]],2,2)) # Expected output: 13",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_rear(tup):\n    # Extract the last character from each string in the tuple and return as a list\n    return [x[-1] for x in tup]\n\n# Test the function with provided data points\nassert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's'], \"Test case 1 failed\"\nassert extract_rear(('Avenge', 'for', 'People')) == ['e', 'r', 'e'], \"Test case 2 failed\"\nassert extract_rear(('Gotta', 'get', 'go')) == ['a', 't', 'o'], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_element_in_list(list_of_lists, target):\n    return sum(element in sublist for sublist in list_of_lists for element in sublist)\n\n# Example usage and test cases\nprint(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))  # Output: 3\nprint(count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A'))  # Output: 3\nprint(count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E'))  # Output: 1",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef change_date_format(date_str):\n    \"\"\"\n    This function takes a string representing a date in \"yyyy-mm-dd\" format and returns it in \"dd-mm-yyyy\" format.\n    \n    Args:\n        date_str (str): A string representing a date in \"yyyy-mm-dd\" format.\n        \n    Returns:\n        str: The formatted date string in \"dd-mm-yyyy\" format.\n    \"\"\"\n    # Using regular expression to find the month name\n    month_name = re.search(r'(\\d{4})-(\\d{1,2})', date_str).group(2)\n    \n    # Reconstructing the date with month name changed from full word to abbreviated form\n    formatted_date = re.sub(r'(\\d{4})-(\\d{1,2})', r'\\2-\\1', date_str)\n    \n    return f\"{month_name}-\\2-{formatted_date[5:]}\"\n\n# Test Cases\nprint(change_date_format(\"2026-01-02\"))  # Expected output: \"02-01-2026\"\nprint(change_date_format(\"2020-11-13\"))  # Expected output: \"13-11-2020\"\nprint(change_date_format(\"2021-04-26\"))  # Expected output: \"26-04-2021\"",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            arr[j] = temp\n        gap //= 2\n    \n    return arr\n\n# Test cases\nprint(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]))  # Output: [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nprint(shell_sort([24, 22, 39, 34, 87, 73, 68]))          # Output: [22, 24, 34, 39, 68, 73, 87]\nprint(shell_sort([32, 30, 16, 96, 82, 83, 74]))         # Output: [16, 30, 32, 74, 82, 83, 96]",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def and_tuples(t1, t2):\n    # Extracting elements based on the indices of both tuples\n    result = [min(i, j) for i, j in zip(t1, t2)]\n    return tuple(result)\n\n# Check function with provided data points to verify correctness\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_directrix(a,b,c):\n    return -c/a * b**2 + b*2*a*b/c + a*c/b",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_element(list1, list2):\n    # Convert both lists to sets for comparison\n    return len(set(list1) & set(list2)) > 0",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef median_trapezium(a, b, c):\n    return (a + b) / 2\n\n# Test cases\nprint(median_trapezium(15, 25, 35)) # Expected output: 20\nprint(median_trapezium(10, 20, 30)) # Expected output: 15\nprint(median_trapezium(6, 9, 4)) # Expected output: 7.5",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_greater(arr, num):\n    if arr[0] > num:\n        return 'Yes, entered number is greater than those in the array'\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] < num:\n                return 'Yes, the entered number is greater than those in the array'\n        return 'No, entered number is less than those in the array'",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def text_match_one(text):\n    if text.startswith(\"a\") and all([char == \"b\" for char in text[1:]]):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit(number):\n    # Taking the absolute value of the number to handle negative numbers and getting the remainder when divided by 10\n    return abs(number) % 10",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list of integers as input and prints all the negative numbers from the list.\n    \"\"\"\n    for num in lst:\n        if num < 0:\n            print(num)",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(s):\n    return ''.join([char for char in s if not ord(char) % 2])\n\n# Test cases\nprint(remove_odd(\"python\")) # \"yhn\"\nprint(remove_odd(\"program\")) # \"rga\"\nprint(remove_odd(\"language\")) # \"agae\"",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_bidirectional(pairs):\n    # Convert each pair into two tuples representing the start and end points of the pair\n    # Then count how many unique pairs have the same starting point and ending point\n    return len(set(tuple(pair) for pair in pairs))\n\n# Test cases\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]))  # Output: 3\nprint(count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]))   # Output: 2\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]))   # Output: 4",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(nums):\n    return int(''.join(map(str, nums)))",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Finds all adverbs and their starting positions in a given sentence.\n    \n    Parameters:\n        sentence (str): The input sentence containing words and possible adverbs.\n        \n    Returns:\n        tuple: A tuple where each element is a pair [start position, end position, word], \n               representing an adverb in the sentence. If no adverb found, returns None for start and end positions.\n    \"\"\"\n    pattern = r\"\\b(\\w+ly)\\b\"\n    matches = [(match.start(), match.end() - 1, match.group()) for match in re.finditer(pattern, sentence)]\n    return matches\n\n# Test cases to verify the correctness of the solution\nprint(find_adverb_position(\"clearly!! we can see the sky\"))  # Expected output: [(0, 7, 'clearly')]\nprint(find_adverb_position(\"seriously!! there are many roses\"))  # Expected output: [(0, 9, 'seriously')]\nprint(find_adverb_position(\"unfortunately!! sita is going to home\"))  # Expected output: [(0, 13, 'unfortunately')]",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(side_length):\n    \"\"\"\n    Calculate the surface area of a cube given its side length.\n    \n    Args:\n    side_length (float): The length of each side of the cube.\n    \n    Returns:\n    float: The total surface area of the cube.\n    \"\"\"\n    return 6 * side_length**2\n\n# Test cases to verify the correctness of the solution\nassert abs(surfacearea_cube(5) - 150) < 1e-9\nassert abs(surfacearea_cube(3) - 54) < 1e-9\nassert abs(surfacearea_cube(10) - 600) < 1e-9",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def positive_count(arr):\n    return sum(1 for x in arr if x > 0) / len(arr)",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def largest_neg(nums):\n    # Find the maximum of the absolute values in the list\n    max_negative = min(nums, key=abs)\n    return max_negative\n\n# Test cases\nprint(largest_neg([1,2,3,-4,-6]))  # Expected output: -6\nprint(largest_neg([1,2,3,-8,-9]))  # Expected output: -9\nprint(largest_neg([1,2,3,4,-1]))   # Expected output: -1",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - object of type 'int' has no len()",
      "Test 2: FAIL - object of type 'int' has no len()",
      "Test 3: FAIL - object of type 'int' has no len()"
    ],
    "generated_code": "def trim_tuple(tuples_list, k):\n    # Trim each tuple in the list by removing up to k elements from both ends\n    trimmed_tuples = [tuple(x[k:-k] if len(x) > 2*k else x for x in t) for t in tuples_list]\n    return trimmed_tuples",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - tuple index out of range",
      "Test 2: FAIL - tuple index out of range",
      "Test 3: FAIL - tuple index out of range"
    ],
    "generated_code": "def index_multiplication(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        product = 1\n        for j in range(len(tup1[i])):\n            product *= tup1[i][j] * tup2[j][i]\n        result.append(tuple([product]))\n    return tuple(result)",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Occurrence(lst, tuples):\n    result = {}\n    for tup in tuples:\n        count = sum(1 for item in lst if item == tup)\n        result[tup] = count\n    return result\n\n# Test cases\nprint(count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b'])) # Expected output: {'a': 3, 'b': 1}\nprint(count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7])) # Expected output: {1: 3, 4: 2, 7: 1}\nprint(count_Occurrence((1,2,3,4,5,6),[1,2])) # Expected output: {1: 2, 2: 1}",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "cube_nums = lambda nums: [num ** 3 for num in nums]",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_sum(n):\n    # Initialize arrays for storing previous two Perrin numbers\n    a = [3]\n    b = [0, 2]\n\n    # Calculate Perrin sequence up to n and store in arrays\n    while len(a) < n:\n        c = a[-1] + b[-1]\n        a.append(c)\n        b.append(b[-1])\n\n    # Sum the first n Perrin numbers\n    result = sum(a[:n])\n    \n    return result",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Function to determine if three given points can form a valid triangle.\n    \n    Parameters:\n    - x1, y1 : Coordinates of the first point\n    - x2, y2 : Coordinates of the second point\n    - x3, y3 : Coordinates of the third point\n    \n    Returns:\n    - A string indicating if the points can form a valid triangle ('Yes' or 'No').\n    \"\"\"\n    # Calculate the lengths of the sides of the triangle using the distance formula\n    side1 = ((x2-x1)**2 + (y2-y1)**2)**0.5\n    side2 = ((x3-x2)**2 + (y3-y2)**2)**0.5\n    side3 = ((x3-x1)**2 + (y3-y1)**2)**0.5\n    \n    # Check for positive values among the three sides; they must be greater than zero and different from each other for a valid triangle\n    if side1 > 0 and side2 > 0 and side3 > 0 and abs(side1-side2) > 0 and abs(side2-side3) > 0 and abs(side3-side1) > 0:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test Cases\nprint(check_Triangle(1,5,2,5,4,6))  # Expected output: Yes\nprint(check_Triangle(1,1,1,4,1,5))  # Expected output: No\nprint(check_Triangle(1,1,1,1,1,1))  # Expected output: No",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_string(lst, n):\n    return [s[:n] for s in lst]",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef remove_whitespaces(s):\n    # Remove multiple spaces and single space between words\n    s = re.sub(r'\\s+', ' ', s)\n    # Trim leading and trailing whitespace\n    s = s.strip()\n    return s",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def loss_amount(amount1, amount2):\n    if amount1 > amount2:\n        return amount1 - amount2\n    else:\n        return None",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef sumofFactors(num):\n    def isFactor(f):\n        if num % f == 0:\n            return True\n        else:\n            return False\n    \n    sum = 1\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if isFactor(i):\n            if num % i == 0:\n                sum += i\n                # Check if the quotient is also a factor\n                if i != num // i and not isFactor(num // i):\n                    sum += num // i\n    return sum\n\n# Test cases\nprint(sumofFactors(18))  # Output: 26\nprint(sumofFactors(30))  # Output: 48\nprint(sumofFactors(6))   # Output: 8",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_monthnumb_number(month_num):\n    # Check if the month number is either February in a non-leap year or April, June, September, November.\n    return month_num in [2, 4, 6, 9, 11]",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def reverse_string_list(lst):\n    return lst[::-1]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min' is not defined",
      "Test 2: FAIL - name 'Find_Min' is not defined",
      "Test 3: FAIL - name 'Find_Min' is not defined"
    ],
    "generated_code": "def find_min(lst):\n    min_length = float('inf')\n    result = []\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            result = sublist\n    \n    return result\n\n# Test cases\nprint(find_min([[1],[1,2],[1,2,3]]))  # Expected output: [1]\nprint(find_min([[1,1],[1,1,1],[1,2,7,8]]))  # Expected output: [1,1]\nprint(find_min(['x', 'x','y', 'x','y','z']))  # Expected output: ['x']",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length, width):\n    return length * width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_uppercase(input_string):\n    # Use regular expression to find and replace all upper case letters with an empty string\n    result = re.sub(r'[A-Z]', '', input_string)\n    return result",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lists):\n    # Use list comprehension to iterate through each sublist and select the first element\n    result = [sublist[0] for sublist in lists]\n    return result",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(s):\n    # Initialize counter for uppercase characters\n    up_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter and increment the counter\n        if 'A' <= char <= 'Z':\n            up_count += 1\n            \n    return up_count",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import permutations\n\ndef combinations_list(lst):\n    \"\"\"\n    Generate all possible combinations for each element in the input list.\n    \n    Parameters:\n        lst (list): The input list of elements.\n        \n    Returns:\n        list: A list containing tuples representing each combination.\n    \"\"\"\n    return [tuple(p) for p in map(list, set(permutations([l for l in lst])))]",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n    \n    result = float('-inf')\n    current_max = current_min = 1\n    \n    for num in nums:\n        temp = current_max * num\n        current_max = max(num, current_max * num, current_min * num)\n        current_min = min(temp, current_min * num, num)\n        \n        result = max(result, current_max)\n    \n    return result\n\n# Test cases\nprint(max_subarray_product([1, -2, -3, 0, 7, -8, -2])) # Expected output: 112\nprint(max_subarray_product([6, -3, -10, 0, 2])) # Expected output: 180\nprint(max_subarray_product([-2, -40, 0, -2, -3])) # Expected output: 80",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_value(dictionary, value_to_check):\n    # Check if all values in the dictionary are equal to the specified value\n    return len(set(dictionary.values())) == 1 and list(dictionary.values())[0] == value_to_check",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Test cases\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None}) == {'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None}) == {'c2': 'Green'}",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_peak(arr, n):\n    # Initialize start and end pointers for binary search\n    start = 0\n    end = len(arr) - 1\n    \n    while start < end:\n        mid = (start + end) // 2\n        \n        # Check if mid is a peak\n        if mid > 0 and arr[mid] >= arr[mid-1]:\n            if mid == len(arr)-1 or arr[mid+1] <= arr[mid]:\n                return mid\n            else:\n                start = mid + 1\n        else:\n            end = mid\n            \n    return -1\n\n# Test cases\nprint(find_peak([1, 3, 20, 4, 1, 0], 6))  # Expected output: 2\nprint(find_peak([2, 3, 4, 5, 6], 5))      # Expected output: 4\nprint(find_peak([8, 9, 11, 12, 14, 15], 6))  # Expected output: 5",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_to_Octal(decimal_number):\n    \"\"\"\n    Convert a given decimal number to its octal equivalent.\n    \n    Args:\n        decimal_number (int): The decimal number to be converted.\n        \n    Returns:\n        str: The octal representation of the input decimal number.\n    \"\"\"\n    octal = \"\"\n    while decimal_number > 0:\n        octal = str(decimal_number % 8) + octal\n        decimal_number //= 8\n    return octal\n\n# Test cases\nprint(decimal_to_Octal(10))  # Expected output: '12'\nprint(decimal_to_Octal(2))   # Expected output: '2'\nprint(decimal_to_Octal(33))  # Expected output: '41'",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport bisect\n\ndef max_product(nums: List[int], k: int) -> int:\n    # Convert list into a sorted set for efficient insertion and retrieval\n    nums = sorted(set(nums))\n    \n    # Generate all combinations of length 'k' from the set\n    for i in range(len(nums), k + 1):\n        index = bisect.bisect_left(nums, -float('inf'))  # Find the largest number less than -inf\n        yield reduce(lambda x, y: x * y, [nums[index - j] for j in range(1, i)])\n\n    # Return the product of the selected numbers\n    return reduce(lambda x, y: x * y, next(max_product(nums, k)))",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for +: 'int' and 'list'"
    ],
    "generated_code": "def max_profit(prices, k):\n    if not prices or k <= 0:\n        return 0\n    \n    n = len(prices)\n    dp = [[[float('-inf')] * (k + 1) for _ in range(n)] for __ in range(2)]\n    \n    for i in range(1, k + 1):\n        dp[0][i] = -prices[0]\n    \n    for j in range(1, n):\n        for i in range(k, 0, -1):\n            dp[j % 2][i] = max(dp[(j-1) % 2][i], prices[j] + dp[(j-1) % 2][i-1])\n            \n    return max(max(dp[(k-1) % 2]), dp[k % 2][-1])\n\n# Example usage\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3))  # Output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2))      # Output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2))           # Output: 2",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - object of type 'int' has no len()",
      "Test 2: FAIL - object of type 'int' has no len()",
      "Test 3: FAIL - object of type 'int' has no len()"
    ],
    "generated_code": "def add_pairwise(tuples_list):\n    result = []\n    for i in range(len(tuples_list[0])):\n        temp = sum([t[i] for t in tuples_list])\n        result.append(temp)\n    return tuple(result)\n\n# Test cases\nprint(add_pairwise([(1, 5, 7, 8, 10)]))  # Expected output: (6, 12, 15, 18)\nprint(add_pairwise([(2, 6, 8, 9, 11)]))  # Expected output: (8, 14, 17, 20)\nprint(add_pairwise([(3, 7, 9, 10, 12)]))  # Expected output: (10, 16, 19, 22)",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_remainder(arr, divisor, modulus):\n    total = 1\n    for num in arr:\n        total *= num % modulus\n    return total % modulus",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Consecutive(nums):\n    # Sort the array to bring all consecutive numbers together\n    nums.sort()\n    \n    # Check if there is at least one gap in the sorted array\n    for i in range(0, len(nums) - 1):\n        if nums[i] + 1 != nums[i+1]:\n            return False\n    \n    return True",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_intersection(tup_list1, tup_list2):\n    set1 = {tuple(sorted(sublist)) for sublist in tup_list1}\n    set2 = {tuple(sorted(sublist)) for sublist in tup_list2}\n    common_tuples = set1.intersection(set2)\n    result_set = {(min(first, second), max(first, second)) for first, second in common_tuples}\n    return result_set",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(s, old, new):\n    return s.replace(old, new)",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n# Test cases\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)], \"Test case 1 failed\"\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250}) == [('Math', 400), ('Physics', 300), ('Chemistry', 250)], \"Test case 2 failed\"\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250}) == [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\n    # Find the maximum element in the array\n    max_element = max(arr)\n    \n    # Find the minimum element in the array\n    min_element = min(arr)\n    \n    # Return the sum of the maximum and minimum elements\n    return max_element + min_element",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_lower(s):\n    # Convert each character in the string to lowercase and check if all characters are lowercase\n    return s.islower()\n\n# Test cases\nprint(is_lower(\"InValid\"))   # Expected output: False\nprint(is_lower(\"TruE\"))      # Expected output: True\nprint(is_lower(\"SenTenCE\"))  # Expected output: True",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_lowercase(s):\n    # Initialize an empty string for the result\n    res = ''\n    \n    # Iterate through each character in the input string\n    for i in s:\n        # Check if the current character is uppercase\n        if i.isupper():\n            # If it's not lowercase, add it to the result\n            res += i\n    \n    return res",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(num):\n    # Remove the last digit from the number\n    num = str(num)\n    num = int(num[:-1])\n    \n    # Return the last digit of the resulting number\n    return int(str(num)[-1])\n\n# Test cases\nprint(first_Digit(123))  # Expected output: 1\nprint(first_Digit(456))  # Expected output: 4\nprint(first_Digit(12))   # Expected output: 1",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(s):\n    # Dictionary to store character frequencies\n    char_count = {}\n    \n    # Counting characters in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Finding the maximum frequency and corresponding character\n    max_freq = -float('inf')\n    max_char = \"\"\n    for char, count in char_count.items():\n        if count > max_freq:\n            max_freq = count\n            max_char = char\n            \n    return max_char",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_subset_sum(nums, target, total):\n    dp = [False] * (total + 1)\n    dp[0] = True  # Base case: sum of 0 can always be achieved with an empty subset\n    \n    for num in nums:\n        for i in range(total, num - 1, -1):  # Start from total down to num-1\n            if dp[i - num]:\n                dp[i] = True\n                \n    return dp[target]\n\n# Test cases\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9))  # Output: True\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30))  # Output: False\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15))  # Output: True",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef match(s):\n    # Regex pattern to match one uppercase letter followed by lowercase letters\n    pattern = r'[A-Z][a-z]+'\n    \n    # Search for the pattern in the input string\n    if re.search(pattern, s):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(match('Geeks'))   # Expected output: Yes\nprint(match('geeksforGeeks'))   # Expected output: Yes\nprint(match('geeks'))   # Expected output: No",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        if len(str(factorial(i))) % x == 0:\n            return i\n        i += 1\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def remove_matching_tuple(tuples1, tuples2):\n    # Create sets of unique elements for each tuple\n    set1 = {item[0] for item in tuples1}\n    set2 = {item[0] for item in tuples2}\n    \n    # Find common elements and remove them from both lists\n    common_elements = set1.intersection(set2)\n    result_list1 = [item for item in tuples1 if item[0] not in common_elements]\n    result_list2 = [item for item in tuples2 if item[0] not in common_elements]\n    \n    # Combine the remaining elements back into tuples\n    final_result = []\n    for i in range(len(result_list1)):\n        final_result.append((result_list1[i][1:] + result_list2[i][1:]))\n    \n    return final_result\n\n# Test cases\nprint(remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]))  # Should print [('you', '?')]\nprint(remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is '), ('end')], [('Journey', 'the'), ('is', 'end')]))  # Should print [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nprint(remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]))  # Should print [('Its', 'been'), ('day', 'without')])",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def largest_palindrome(arr, n):\n    # Initialize the maximum palindrome found\n    max_palindrome = \"\"\n    \n    for num in arr:\n        str_num = str(num)\n        if len(str_num) > len(max_palindrome) and is_palindrome(str_num):\n            max_palindrome = str_num\n    \n    return int(max_palindrome)\n\n# Helper function to check if a string is a palindrome\ndef is_palindrome(s):\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n# Test cases\nprint(largest_palindrome([1, 232, 54545, 999991], 4))  # Output: 54545\nprint(largest_palindrome([1, 2, 3, 4, 5, 50], 6))     # Output: 5\nprint(largest_palindrome([1, 3, 7, 9, 45], 5))        # Output: 9",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef binomial_probability(n, k, p):\n    if n < k:\n        return 0\n    return int(math.comb(n, k) * pow(p, k) * pow(1 - p, n - k))\n\n# Test cases\nprint(binomial_probability(10, 5, 1.0/3))  # Expected output: 0.13656454808718185\nprint(binomial_probability(11, 6, 2.0/4))  # Expected output: 0.2255859375\nprint(binomial_probability(12, 7, 3.0/5))  # Expected output: 0.227030335488",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def area_pentagon(s):\n    return 5 * ((1/4) * (math.sqrt(5*(5+2*sqrt(5)))*s**2))",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Largest(arr):\n    # Find the maximum value in the array\n    max_value = max(arr)\n    \n    # Count how many times the maximum value appears in the array\n    count = arr.count(max_value)\n    \n    return count",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_symmetric(tuples_list):\n    result = set()\n    for i in range(len(tuples_list)):\n        pair1 = tuples_list[i]\n        if len(pair1) == 2 and pair1[0] != pair1[1]:\n            pair2 = tuple(sorted(pair1))\n            result.add(pair2)\n    return result\n\n# Test cases\nprint(extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]))  # Output: {((8, 9), (6, 7))}\nprint(extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)]))  # Output: {((9, 10), (7, 8))}\nprint(extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)]))  # Output: {((8, 9), (10, 11))}",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_gp(a, r, n):\n    return int((a * ((1 - pow(r, n)) / (1 - r)))) if r != 1 else int(n * a)",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_search(arr, target):\n    \"\"\"\n    Perform a binary search on the sorted list 'arr' to find the index of 'target'.\n    \n    :param arr: List[int] - A sorted list of integers.\n    :param target: int - The integer value to be searched for.\n    :return: bool - Returns True if 'target' is found in 'arr', otherwise returns False.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = arr[mid]\n        \n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'calculate_polygons' is not defined",
      "Test 2: FAIL - name 'calculate_polygons' is not defined",
      "Test 3: FAIL - name 'calculate_polygons' is not defined"
    ],
    "generated_code": "import math\n\ndef calculate_hexagons(x_0, y_0, n_0, n_1, n_2):\n    result = []\n    for i in range(n_0):\n        for j in range(n_1):\n            for k in range(n_2):\n                # Calculate center coordinate based on given formula\n                cx = x_0 + n_1 * (i + 0.5)\n                cy = y_0 + n_2 * (j + 0.5)\n                \n                # Calculate six side points based on given formula\n                pts = [\n                    (cx + n_1 * (k + 0.5), cy + n_2 * (math.sqrt(3)/2)),\n                    (cx - n_1 * (k + 0.5), cy + n_2 * (math.sqrt(3)/2)),\n                    (cx - n_1 * (k + 0.5), cy - n_2 * (math.sqrt(3)/2)),\n                    (cx + n_1 * (k + 0.5), cy - n_2 * (math.sqrt(3)/2)),\n                    (cx + n_1 * (k + 0.5), cy + n_2 * (1)),\n                    (cx - n_1 * (k + 0.5), cy + n_2 * (1))\n                ]\n                \n                result.append(pts)\n    \n    return result\n\n# Example usage:\nresult = calculate_hexagons(1, 1, 4, 4, 3)\nprint(result)",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_to_integer(binary_tuple):\n    # Convert the binary tuple to an integer using bin() and slicing.\n    result = int(''.join(map(str, binary_tuple)), 2)\n    return str(result)\n\n# Test cases\nprint(binary_to_integer((1, 1, 0, 1, 0, 0, 1)))  # Expected output: '105'\nprint(binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)))  # Expected output: '101'\nprint(binary_to_integer((1, 1, 0, 1, 0, 1)))  # Expected output: '53'",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(input_string):\n    # Define the pattern to match lowercase letters\n    pattern = '[a-z]'\n    \n    # Use regex sub() method to replace all occurrences of lowercase letters with an empty string\n    result = re.sub(pattern, '', input_string)\n    \n    return result\n\n# Test cases\nprint(remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf'))  # Expected output: KDALOOOHLAJSI\nprint(remove_lowercase('ProducTnamEstreAmIngMediAplAYer'))  # Expected output: PTEAIMAAY\nprint(remove_lowercase('maNufacTuredbYSheZenTechNolOGIes'))  # Expected output: NTYSZTNOGI",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    return heapq.nsmallest(k, nums)\n\n# Test cases\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)) # Expected output: [14, 22, 25]\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2))   # Expected output: [14, 22]\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5))  # Expected output: [14, 22, 22, 25, 35]",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\ndef surfacearea_cone(radius, slant_height):\n    base_area = math.pi * radius ** 2\n    lateral_surface_area = math.pi * radius * slant_height\n    total_surface_area = base_area + lateral_surface_area\n    return round(total_surface_area)",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n# Test cases\nprint(gcd(12, 17)) # Expected output: 1\nprint(gcd(4, 6))   # Expected output: 2\nprint(gcd(2, 9))   # Expected output: 1",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(lst):\n    # Join all elements in the list with spaces and convert to lowercase for uniformity\n    result = ' '.join(map(str.lower, lst))\n    return result.strip()",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def num_comm_div(num1, num2):\n    # Ensure the smaller number is assigned to 'num'\n    if num1 > num2:\n        num = num1\n        num1 = num2\n        num2 = num\n    \n    # Find the greatest common divisor (GCD)\n    while num1 != 0 and num2 != 0:\n        if num1 >= num2:\n            num1 %= num2\n        else:\n            num2 %= num1\n    \n    # The GCD will be the last non-zero remainder\n    return num1 + num2\n\n# Test cases to verify the correctness of the solution\nassert num_comm_div(2, 4) == 2\nassert num_comm_div(2, 8) == 2\nassert num_comm_div(12, 24) == 6",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(a, b):\n    return a % b",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_consecutive_nums(lst):\n    return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Series' is not defined",
      "Test 2: FAIL - name 'sum_Of_Series' is not defined",
      "Test 3: FAIL - name 'sum_Of_Series' is not defined"
    ],
    "generated_code": "def sum_of_series(n):\n    # Calculate the sum of cubes of first n natural numbers using the formula:\n    # Sum = [n * (n + 1) / 2] ** 2\n    return int((n * (n + 1) // 2) ** 2)",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_order(arr):\n    # Separate non-zero elements and zero elements in the list\n    non_zero = [num for num in arr if num != 0]\n    zero = [0 for _ in range(arr.count(0))]\n    \n    # Combine the two lists\n    result = non_zero + zero\n    \n    return result",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of n choose k.\n    \n    Args:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n        \n    Returns:\n        int: The value of permutation coefficient.\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        result = 1\n        for i in range(k):\n            result *= (n - i)\n            result //= (i + 1)\n        return result",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(word_list, delete_words):\n    \"\"\"\n    Remove specified words from a given list.\n    \n    Parameters:\n        word_list (list): A list of words to be filtered.\n        delete_words (list): A list of words to be removed from the first list.\n        \n    Returns:\n        list: The resulting list after removing the specified words.\n    \"\"\"\n    return [word for word in word_list if word not in delete_words]\n\n# Test cases to verify the correctness of the function\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange']) == ['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['black', 'orange']) == ['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['blue', 'white']) == ['red', 'green', 'black', 'orange']\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def same_order(list1, list2):\n    # Check if both lists have the same length and elements are present in the correct order\n    return sorted(list1) == sorted(list2)\n\n# Test cases\nprint(same_order([\"red\",\"green\",\"black\",\"orange\"], [\"red\",\"pink\",\"green\",\"white\",\"black\"])) # True\nprint(same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"], [\"white\",\"orange\",\"pink\",\"black\"])) # False\nprint(same_order([\"red\",\"green\",\"black\",\"orange\"], [\"red\",\"pink\",\"green\",\"white\",\"black\"])) # True",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'average_Odd' is not defined",
      "Test 2: FAIL - name 'average_Odd' is not defined",
      "Test 3: FAIL - name 'average_Odd' is not defined"
    ],
    "generated_code": "def average_odd(n):\n    total = sum(i for i in range(1, n + 1) if i % 2 != 0)\n    return total / len([i for i in range(1, n + 1) if i % 2 != 0])",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def no_of_subsequences(arr, target_sum):\n    arr.sort()\n    count = 0\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        if arr[left] * arr[right] < target_sum:\n            count += right - left + 1\n            left += 1\n        elif arr[left] * arr[right] >= target_sum:\n            right -= 1\n    \n    return count",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - object of type 'int' has no len()",
      "Test 2: FAIL - object of type 'int' has no len()",
      "Test 3: FAIL - object of type 'int' has no len()"
    ],
    "generated_code": "def find_Min_Sum(n):\n    # Initialize result with n and divide it step-by-step until it's fully divisible\n    result = int(str(n)[::-1])\n    while len(result) > 1:\n        temp = 0\n        for digit in str(result):\n            temp += int(digit)\n        result = temp\n    return result",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_freq(mixed_tuple):\n    freq_dict = {}\n    for item in mixed_tuple:\n        if isinstance(item, int):\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n        elif isinstance(item, tuple):\n            for sub_item in item:\n                freq_dict[sub_item] = freq_dict.get(sub_item, 0) + 1\n    return freq_dict\n\n# Test cases\nprint(count_element_freq((5, 6, (5, 6), 7, (8, 9), 9)))  # Should return {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nprint(count_element_freq((6, 7, (6, 7), 8, (9, 10), 10)))  # Should return {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nprint(count_element_freq((7, 8, (7, 8), 9, (10, 11), 11)))  # Should return {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_str(tup, strng):\n    result = []\n    for item in tup:\n        result.append(item)\n        result.append(strng)\n    return result[:-len(strng)]  # Remove the extra strings added at the end\n\n# Test Cases\nprint(add_str((5, 6, 7, 4, 9), \"FDF\"))  # Output: [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nprint(add_str((7, 8, 9, 10), \"PF\"))     # Output: [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nprint(add_str((11, 14, 12, 1, 4), \"JH\"))  # Output: [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_elements(tup):\n    total = sum(tup)\n    return total\n\n# Test Cases\nprint(sum_elements((7, 8, 9, 1, 10, 7))) # Output: 42\nprint(sum_elements((1, 2, 3, 4, 5, 6))) # Output: 21\nprint(sum_elements((11, 12, 13, 45, 14))) # Output: 95",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef modular_sum(numbers: List[int], m: int, target: int) -> bool:\n    \"\"\"\n    This function checks if there exists a subset of 'numbers' whose elements add up to a multiple of 'm'.\n    \n    Parameters:\n    numbers (List[int]): The list of integers.\n    m (int): The divisor used for checking multiples.\n    target (int): The target number which should be divisible by m.\n    \n    Returns:\n    bool: True if such a subset exists, otherwise False.\n    \"\"\"\n    prefix_sums = {0}  # To keep track of all possible sums we can get from subarrays ending at each index\n    current_sum = 0\n    \n    for num in numbers:\n        current_sum += num\n        required = (current_sum % m + m) % m  # Adjusting current sum modulo m\n        \n        if required == target:\n            return True\n        \n        if required in prefix_sums:\n            return True\n        \n        prefix_sums.add(required)\n        \n    return False",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def radix_sort(arr):\n    RADIX = 10\n    max_length = len(str(max(arr)))\n    \n    for place in range(max_length):\n        buckets = [[] for _ in range(RADIX)]\n        \n        # Place each number in the appropriate bucket based on the current digit.\n        for item in arr:\n            digit = (item // (10 ** place)) % 10\n            buckets[digit].append(item)\n            \n        # Flatten the array back into our array and move to next place value\n        arr = [item for bucket in buckets for item in bucket]\n    \n    return arr\n\n# Test cases\nprint(radix_sort([15, 79, 25, 68, 37]))  # Expected output: [15, 25, 37, 68, 79]\nprint(radix_sort([9, 11, 8, 7, 3, 2]))   # Expected output: [2, 3, 7, 8, 9, 11]\nprint(radix_sort([36, 12, 24, 26, 29]))  # Expected output: [12, 24, 26, 29, 36]",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(nums):\n    # Initialize max_num with the smallest possible integer value\n    max_num = -float('inf')\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n    \n    return max_num\n\n# Test cases\nprint(largest_pos([1,2,3,4,-1]))  # Expected output: 4\nprint(largest_pos([0,1,2,-5,-1,6]))  # Expected output: 6\nprint(largest_pos([0,0,1,0]))  # Expected output: 1",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sqrt_root(num):\n    \"\"\"\n    Calculate the square root of a given perfect number.\n    \n    Parameters:\n    num (int): The perfect number whose square root is to be calculated.\n    \n    Returns:\n    int: The square root of the input number.\n    \"\"\"\n    return int(math.sqrt(num))",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not subscriptable",
      "Test 2: FAIL - 'int' object is not subscriptable",
      "Test 3: FAIL - 'int' object is not subscriptable"
    ],
    "generated_code": "def volume_tetrahedron(sides):\n    # Calculate the square root of twice the product of sides and (s^2 + t^2 - u^2) divided by 16\n    return (sides[0] * sides[1] * sides[2]) ** 0.5 / 16",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef get_lcm(arr):\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = (result * arr[i]) // gcd(result, arr[i])\n    return result\n\n# Test cases\nprint(get_lcm([2, 7, 3, 9, 4]))  # Expected output: 252\nprint(get_lcm([1, 2, 8, 3]))     # Expected output: 24\nprint(get_lcm([3, 8, 4, 10, 5])) # Expected output: 120",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if all sides are different\n    return len({a, b, c}) == 3",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lbs(arr):\n    n = len(arr)\n    lis = [1] * n\n    lds = [1] * n\n\n    # Compute LIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j] + 1)\n\n    # Compute LDS values from right to left\n    temp = 1\n    for i in reversed(range(n)):\n        for j in reversed(range(i)):\n            if arr[i] > arr[j]:\n                lds[i] = max(lds[i], temp)\n                temp = max(temp, lds[j] + 1)\n\n    # Find the maximum value of length of LIS and LDS ending with an element\n    result = 0\n    for i in range(n):\n        result = max(result, lis[i] + lds[i] - 1)\n\n    return result",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef check_string(s):\n    return [\n        f'String must have 1 upper case character.',\n        f'String must have 1 number.',\n        f'String length should be atleast {len(s)}.'\n    ]",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_increasing_subsequence(nums, k):\n    # Initialize the list with first element\n    dp = [nums[0]]\n    \n    for i in range(1, len(nums)):\n        # If current number is greater than last added number in DP, add it directly\n        if nums[i] > dp[-1]:\n            dp.append(nums[i])\n        else:\n            # Find the position to replace existing item which gives more profit\n            pos = next((j for j in reversed(range(len(dp))) if dp[j] < nums[i]), -1)\n            \n            # Replace with better value and update its index \n            if pos != -1:\n                dp[pos] = nums[i]\n        \n    return sum(dp[:k])\n\n# Test cases\nprint(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7))  # Output: 106\nprint(max_sum_increasing_subsequence([3, 4, 5, 10], 4))  # Output: 22\nprint(max_sum_increasing_subsequence([10, 5, 4, 3], 4))  # Output: 10",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - division by zero",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - not enough values to unpack (expected 3, got 2)"
    ],
    "generated_code": "def parallel_lines(line1, line2):\n    # Extract coefficients from each line\n    x1, y1, _ = line1\n    x2, y2, _ = line2\n    \n    # Calculate slopes of both lines\n    slope1 = (y2 - y1) / (x2 - x1)\n    slope2 = (line2[0] - line1[0]) / (line2[1] - line1[1])\n    \n    # Check if slopes are equal for lines to be parallel\n    return slope1 == slope2",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def capitalize_first_last_letters(input_string):\n    # Split the input string into words\n    words = input_string.split()\n    \n    # Initialize an empty list to store the capitalized words\n    capitalized_words = []\n    \n    # Iterate over each word in the split string\n    for word in words:\n        # Capitalize the first letter and the last letter of the current word,\n        # then join them back with spaces between words\n        capitalized_word = word[0].upper() + word[1:-1] + word[-1].upper()\n        capitalized_words.append(capitalized_word)\n    \n    # Join all the capitalized words back together with spaces\n    result = ' '.join(capitalized_words)\n    \n    return result\n\n# Test cases\nprint(capitalize_first_last_letters(\"python\"))  # Expected output: \"PythoN\"\nprint(capitalize_first_last_letters(\"bigdata\"))  # Expected output: \"BigdatA\"\nprint(capitalize_first_last_letters(\"Hadoop\"))   # Expected output: \"HadooP\"",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef get_pairs_count(arr: List[int], target_sum: int, k: int) -> int:\n    \"\"\"\n    Finds all unique pairs of numbers in the given array 'arr' where their sum equals 'target_sum'.\n    \n    Parameters:\n    arr (List[int]): The input array of integers.\n    target_sum (int): The target sum for which we need to find pairs.\n    k (int): A parameter that might be used in some implementations but not here.\n    \n    Returns:\n    int: The count of unique pairs found that sum up to 'target_sum'.\n    \"\"\"\n    seen = set()\n    pairs_count = 0\n    \n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            # Add both indices to account for order and duplicates\n            pairs_count += 2\n        else:\n            seen.add(num)\n        \n    return pairs_count",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length(lst):\n    return min((len(x), x) for x in lst)[1]\n\n# Test cases\nprint(min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: ([0])\nprint(min_length([[1], [5, 7], [10, 12, 14,15]]))              # Expected output: ([1])\nprint(min_length([[5], [15,20,25]]))                           # Expected output: ([5])",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev = 2\n        curr = 1\n        for _ in range(2, n + 1):\n            temp = curr\n            curr += prev * 2\n            prev = temp\n        return curr",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<' not supported between instances of 'list' and 'int'",
      "Test 2: FAIL - '<' not supported between instances of 'list' and 'int'",
      "Test 3: FAIL - '<' not supported between instances of 'list' and 'int'"
    ],
    "generated_code": "import numpy as np\n\ndef negative_count(arr):\n    # Count the number of negative elements\n    neg_count = np.sum(arr < 0)\n    \n    # Total count of elements in the array\n    total_count = len(arr)\n    \n    # Calculate the ratio of negative numbers\n    ratio = neg_count / total_count\n    \n    return ratio",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_coins(coins, target, max_val):\n    dp = [float('inf')] * (max_val + 1)\n    dp[0] = 0\n    \n    for i in range(1, max_val + 1):\n        for coin in coins:\n            if i - coin >= 0 and dp[i - coin] != float('inf'):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[target]\n\n# Test cases\nprint(min_coins([9, 6, 5, 1], 4, 11))  # Output should be 2\nprint(min_coins([4, 5, 6, 7, 8, 9], 6, 9))  # Output should be 1\nprint(min_coins([1, 2, 3], 3, 4))  # Output should be 2",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_permutation' is not defined",
      "Test 2: FAIL - name 'check_permutation' is not defined",
      "Test 3: FAIL - name 'check_permutation' is not defined"
    ],
    "generated_code": "def is_permutation(s1, s2):\n    # Check if both strings have the same length\n    if len(s1) != len(s2):\n        return False\n    \n    # Sort both strings and compare them\n    return sorted(s1) == sorted(s2)",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_datatype(tup, datatype):\n    result = []\n    for item in tup:\n        if not isinstance(item, datatype):\n            result.append(item)\n    return result",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 2 failed"
    ],
    "generated_code": "from typing import Tuple\n\ndef search_literal(pattern: str, string: str) -> Tuple[int, int]:\n    \"\"\"\n    Searches for a literal pattern within a given string and returns its starting index and length.\n    \n    Parameters:\n    - pattern (str): The substring to be searched.\n    - string (str): The string in which to search for the pattern.\n    \n    Returns:\n    - A tuple containing the start index of the first occurrence of the pattern and the length of the matched part.\n      If the pattern is not found, it returns (-1, 0).\n    \"\"\"\n    # Find the starting index of the pattern in the string\n    start_index = string.find(pattern)\n    if start_index == -1:\n        return (-1, 0)  # Pattern not found\n    \n    # Calculate the length of the matched part\n    match_length = len(pattern)\n    \n    return (start_index, match_length)\n\n# Test cases to verify the correctness of the solution\nif __name__ == \"__main__\":\n    assert search_literal('python', 'python programming language') == (0, 6), \"Test case 1 failed\"\n    assert search_literal('programming', 'python programming language') == (7, 18), \"Test case 2 failed\"\n    assert search_literal('language', 'python programming language') == (19, 27), \"Test case 3 failed\"",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def topbottom_surfacearea(radius):\n    pi = 3.141592653589793\n    height = radius * 2\n    return 2*pi*radius**2 + 2*pi*radius*height",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(lst, n):\n    return lst[n::n]\n\n# Test cases\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)) # Expected output: [1, 3, 5, 7, 9]\nprint(nth_items([10,15,19,17,16,18], 3))         # Expected output: [10, 17]\nprint(nth_items([14,16,19,15,17], 4))            # Expected output: [14, 17]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n\n    return None",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\n    # Convert each character in the string to a single character and join them with commas\n    result = ','.join(string_list)\n    # Convert the resulting string back into a tuple of characters\n    return tuple(result)\n\n# Test cases\nprint(string_list_to_tuple([\"python 3.0\"]))  # Expected output: ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nprint(string_list_to_tuple([\"bigdata\"]))     # Expected output: ('b', 'i', 'g', 'd', 'a', 't', 'a')\nprint(string_list_to_tuple([\"language\"]))    # Expected output: ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "from functools import reduce\nimport operator\n\ndef basesnum_correspondingnum(basesnum, correspondingnum):\n    return [reduce(operator.pow, base, num) for base, num in zip(basesnum, correspondingnum)]",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Diff(arr, n):\n    # Calculate the frequency of each element in the array\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    max_freq = -float('inf')\n    min_freq = float('inf')\n    \n    # Find maximum and minimum frequencies\n    for k, v in freq.items():\n        if v > max_freq:\n            max_freq = v\n        if v < min_freq:\n            min_freq = v\n            \n    # Return the difference between maximum and minimum frequencies\n    return max_freq - min_freq\n\n# Test cases\nprint(find_Diff([1,1,2,2,7,8,4,5,1,4],10))  # Expected output: 2\nprint(find_Diff([1,7,9,2,3,3,1,3,3],9))      # Expected output: 3\nprint(find_Diff([1,2,1,2],4))                # Expected output: 0",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_abundant(number):\n    divisors = [i for i in range(1, number // 2 + 1) if number % i == 0]\n    sum_divisors = sum(divisors)\n    return sum_divisors > number\n\n# Example test cases\nprint(check_abundant(12))  # Expected output: True\nprint(check_abundant(15))  # Expected output: False\nprint(check_abundant(18))  # Expected output: True",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef fill_spaces(input_string):\n    # Replace spaces, commas, and dots with colons\n    modified_string = re.sub(r'[ ,\\.]+', ':', input_string)\n    return modified_string.strip(':')\n\n# Test cases to verify the correctness of the function\nassert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'\n\nprint(\"All test cases passed successfully.\")",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_digits(x, y):\n    \"\"\"\n    Function to add two numbers x and y and return the number of digits in their sum.\n    \n    Parameters:\n    x (int): First number.\n    y (int): Second number.\n    \n    Returns:\n    int: Number of digits in the sum of x and y.\n    \"\"\"\n    total = x + y\n    digit_count = len(str(total))\n    return digit_count",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def flatten_tuple(tup_list):\n    \"\"\"\n    Flattens a list of tuples into a single string with all elements separated by spaces.\n    \n    :param tup_list: List of tuples containing strings.\n    :return: A single string with all elements from the tuples concatenated.\n    \"\"\"\n    # Flatten the tuple list and join the elements with space as separator\n    result = ''.join(str(element) for inner_list in tup_list for element in inner_list)\n    return result\n\n# Test cases\nprint(flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]))  # Output: \"1 4 6 5 8 2 9 1 10\"\nprint(flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]))   # Output: \"2 3 4 6 9 3 2 2 11\"\nprint(flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')])) # Output: \"14 21 9 24 19 12 29 23 17\"",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: unmatched ')'"
    ],
    "generated_code": "def toggle_F_and_L_bits(n):\n    # Toggle the least significant bit (LSB)\n    n = n & ~(1 << (n & 0x0F))\n    \n    # Toggle the most significant bit (MSB)\n    msk = 0xFFFFFFFF >> (32 - 1 + int((n > 0) == (n & 1))))\n    n ^= msk\n    \n    return n\n\nprint(toggle_F_and_L_bits(10))  # Output: 3\nprint(toggle_F_and_L_bits(15))  # Output: 6\nprint(toggle_F_and_L_bits(20))  # Output: 5",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_occurence_char(s, char):\n    try:\n        return s.rindex(char)\n    except ValueError:\n        return None",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from itertools import accumulate\n\ndef total_hamming_distance(n):\n    \"\"\"\n    Calculate the sum of Hamming distances between all consecutive pairs up to n.\n    \n    Args:\n    n (int): The upper limit for calculating Hamming distance sums.\n    \n    Returns:\n    int: The sum of Hamming distances for all consecutive pairs up to n.\n    \"\"\"\n    # Convert each number from 0 to n into binary string and calculate length\n    lengths = [len(bin(i)) - 2 for i in range(n + 1)]\n    \n    # Accumulate the differences in lengths to get distances between numbers\n    accumulated_distances = list(accumulate(lengths, lambda x, y: x + y))\n    \n    # Sum the last element which represents the total Hamming distances for all consecutive pairs\n    return accumulated_distances[-1]\n\n# Test cases to verify the correctness of the function\nassert total_hamming_distance(4) == 7\nassert total_hamming_distance(2) == 3\nassert total_hamming_distance(5) == 8",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_increasing_subsequence(sequence):\n    dp = [1] * len(sequence)\n    \n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return max(dp)\n\n# Test Cases\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60])) # Expected output: 5\nprint(longest_increasing_subsequence([3, 10, 2, 1, 20])) # Expected output: 3\nprint(longest_increasing_subsequence([50, 3, 10, 7, 40, 80])) # Expected output: 4",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        # Calculate the fifth power of the current number\n        power_of_five = i ** 5\n        # Add it to the total sum\n        total_sum += power_of_five\n    return total_sum\n\nassert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def find_Max(arr, start, end):\n    if end < start:\n        return None\n    \n    mid = (start + end) // 2\n    left_max = find_Max(arr, start, mid)\n    right_max = find_Max(arr, mid + 1, end)\n    \n    if left_max is not None and right_max is not None:\n        if arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        else:\n            return max(left_max, right_max)\n    \n    return max(left_max, right_max)\n\n# Test cases\nprint(find_Max([2,3,5,6,9], 0, 4))  # Output: 9\nprint(find_Max([3,4,5,2,1], 0, 4))  # Output: 5\nprint(find_Max([1,2,3], 0, 2))      # Output: 3",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_column(matrix, col_index):\n    # Extracts and returns the specified column from the matrix.\n    return [row[col_index] for row in matrix]\n\n# Test cases to verify the correctness of the solution\nprint(extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0))  # Expected output: [1, 2, 1]\nprint(extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2))  # Expected output: [3, -5, 1]\nprint(extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0))  # Expected output: [1, 5, 1, 13, 5, 9]",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Seq_Linear' is not defined",
      "Test 2: FAIL - name 'Seq_Linear' is not defined",
      "Test 3: FAIL - name 'Seq_Linear' is not defined"
    ],
    "generated_code": "def seq_linear(sequence):\n    if len(set(sequence)) == len(sequence):\n        return \"Linear Sequence\"\n    else:\n        return \"Non Linear Sequence\"\n\n# Test cases\nprint(seq_linear([0,2,4,6,8,10]))  # Expected output: \"Linear Sequence\"\nprint(seq_linear([1,2,3]))         # Expected output: \"Linear Sequence\"\nprint(seq_linear([1,5,2]))         # Expected output: \"Non Linear Sequence\"",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_to_float(tup):\n    # Convert each element in the tuple to float and sum them up.\n    total = sum(map(float, tup))\n    return total",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(numbers):\n    result = []\n    for num in numbers:\n        if num % 2 != 0:\n            result.append(num)\n    return result",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def difference(n):\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    \n    # Calculate the sum of first n natural numbers\n    total_sum = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return sum_cubes - total_sum",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Odd_Pair(arr, target):\n    \"\"\"\n    This function takes in two parameters:\n    arr - A list of integers.\n    target - An integer used for calculating the XOR result.\n    \n    It returns the total count of unique pairs within 'arr' where their XOR value equals the 'target'.\n    \"\"\"\n    count = 0\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] ^ arr[j] == target:\n                count += 1\n    return count",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(s):\n    return s.swapcase()",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for -: 'str' and 'str'",
      "Test 2: FAIL - unsupported operand type(s) for -: 'str' and 'str'",
      "Test 3: FAIL - unsupported operand type(s) for -: 'str' and 'str'"
    ],
    "generated_code": "def digit_distance_nums(a, b):\n    # Calculate absolute difference of each corresponding digit\n    abs_diff = abs(str(a) - str(b))\n    # Sum up all digits in their absolute values\n    sum_of_abs_digits = sum(int(digit) for digit in abs_diff)\n    \n    return sum_of_abs_digits",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef max_sub_array_sum(arr: List[int]) -> int:\n    \"\"\"\n    Finds the maximum sum of contiguous subarray within a one-dimensional array of numbers.\n    \n    Args:\n    arr : List[int] -- The input list of integers.\n    \n    Returns:\n    int -- The maximum sum of contiguous subarray.\n    \"\"\"\n    current_max = global_max = arr[0]\n    for num in arr[1:]:\n        current_max = max(num, current_max + num)\n        global_max = max(global_max, current_max)\n    return global_max",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def union_elements(*args):\n    result = set()\n    for tup in args:\n        result.update(tup)\n    return tuple(result)\n\n# Test cases\nprint(union_elements((3, 4, 5, 6), (5, 7, 4, 10)))  # Should return (3, 4, 5, 6, 7, 10)\nprint(union_elements((1, 2, 3, 4), (3, 4, 5, 6)))   # Should return (1, 2, 3, 4, 5, 6)\nprint(union_elements((11, 12, 13, 14), (13, 15, 16, 17)))  # Should return (11, 12, 13, 14, 15, 16, 17)",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_elements(pairs):\n    # Dictionary comprehension to group elements based on their first occurrence\n    result = {pair[0]: [pair[1]] for pair in pairs if not set(pair).issubset({pair[0], pair[1]})}\n    \n    # Additional mapping of non-matching pairs to empty lists\n    for pair in pairs:\n        if set(pair) == {pair[0], pair[1]}:\n            if pair[0] not in result:\n                result[pair[0]] = []\n            if pair[1] not in result:\n                result[pair[1]] = []\n            \n    return result",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max_Length' is not defined",
      "Test 2: FAIL - name 'Find_Max_Length' is not defined",
      "Test 3: FAIL - name 'Find_Max_Length' is not defined"
    ],
    "generated_code": "def find_max_length(lst):\n    # Initialize max_len with -1 to handle empty list case\n    max_len = -1\n    \n    # Iterate through each sublist in the list\n    for sub_list in lst:\n        # Update max_len if current sublist's length is greater than max_len\n        max_len = max(max_len, len(sub_list))\n    \n    return max_len\n\n# Test cases\nprint(find_max_length([[1], [1, 4], [5, 6, 7, 8]]))  # Expected output: 4\nprint(find_max_length([[0, 1], [2, 2, ], [3, 2, 1]]))  # Expected output: 3\nprint(find_max_length([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]))  # Expected output: 5",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_values(s):\n    # Split the string into elements based on comma and double quotes\n    return [x.strip() for x in s.split(',') if '\"' in x]",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    # Initialize the counter for equal elements\n    count = sum(1 for i in range(n-1) if arr[i] == arr[i+1])\n    \n    # Calculate the number of unequal element pairs\n    result = n * (n - 1) // 2 - count\n    \n    return result",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(string_input):\n    \"\"\"\n    Splits a given string 'string_input' into its constituent characters and returns them as a list.\n    \n    :param string_input: A string of arbitrary length\n    :return: List containing each character from the input string\n    \n    Example:\n    >>> split('python')\n    ['p', 'y', 't', 'h', 'o', 'n']\n    >>> split('Name')\n    ['N', 'a', 'm', 'e']\n    >>> split('program')\n    ['p', 'r', 'o', 'g', 'r', 'a', 'm']\n    \"\"\"\n    return list(string_input)",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(lst):\n    # Check if lst is sorted in ascending order\n    return all(x <= y for x, y in zip(lst, lst[1:]))\n\n# Test cases\nprint(issort_list([1,2,4,6,8,10,12,14,16,17]))  # Expected output: True\nprint(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]))  # Expected output: False\nprint(issort_list([1, 2, 4, 6, 8, 10,15,14,20]))  # Expected output: False",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def empty_list(n):\n    return [{}] * n",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_words(words_list, chars_to_remove):\n    result = []\n    for word in words_list:\n        clean_word = ''.join([char for char in word if char not in chars_to_remove])\n        result.append(clean_word)\n    return result\n\n# Test cases\nprint(remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"], ['#', 'color', '@'])) # ['Red', '', 'Green', 'Orange', 'White']\nprint(remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['&', '+', '@'])) # ['Red', '', 'Green', 'Orange', 'White']\nprint(remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['@'])) # ['Red &', 'Orange+', 'Green', 'Orange', 'White']",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum_pair_diff_lessthan_K(arr, K, n):\n    arr.sort()\n    total = left = right = i = j = 0\n    \n    while left < n and right < n:\n        if abs(arr[left] - arr[right]) > K:\n            right += 1\n        else:\n            total += arr[left] + arr[right]\n            left += 1\n            right += 1\n        \n        i += 1\n        j += 1\n        \n    return total\n\n\n# Test Cases\nprint(max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4))  # Expected output: 62\nprint(max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12))         # Expected output: 25\nprint(max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6))        # Expected output: 21",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def two_unique_nums(nums):\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_product(lst):\n    import math\n    product = 1\n    for num in lst:\n        if num != 0 and lst.count(num) == 1:\n            product *= num\n    return product * math.factorial(len(lst))",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def surfacearea_cylinder(radius, height):\n    return 2 * 3.14159 * radius * (radius + height)",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - count_no() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def count_no(n, divisor, max_value):\n    count = 0\n    for i in range(1, max_value + 1):\n        if i % n != 0 and i % divisor == 0:\n            count += 1\n    return count\n\n# Test cases\nprint(count_no(2,3,10)) # Expected output: 5\nprint(count_no(3,6,20)) # Expected output: 11\nprint(count_no(5,10,20)) # Expected output: 16",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - KeyError: 2"
    ],
    "generated_code": "def is_Sub_Array(arr1, arr2, len1, len2):\n    if len2 > len1:\n        return False\n    \n    count = {}\n    \n    for i in range(len2):\n        if arr2[i] in count:\n            count[arr2[i]] += 1\n        else:\n            count[arr2[i]] = 1\n            \n    for i in range(len1 - len2 + 1):\n        match_count = {arr1[i]: 0}\n        \n        for j in range(len2):\n            if arr1[i + j] in match_count:\n                match_count[arr1[i + j]] += 1\n            else:\n                match_count[arr1[i + j]] = 1\n                \n        if all(match_count[key] <= value for key, value in count.items()):\n            return True\n    \n    return False\n\n# Test cases\nprint(is_Sub_Array([1,4,3,5], [1,2], 4, 2))  # Expected output: False\nprint(is_Sub_Array([1,2,1], [1,2,1], 3, 3))  # Expected output: True\nprint(is_Sub_Array([1,0,2,2], [2,2,0], 4, 3))  # Expected output: False",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit_Factorial(n):\n    # Initialize result with 1 as factorial starts from 0!\n    result = 1\n    # Iterate from 1 to n inclusive\n    for i in range(1, n + 1):\n        # Multiply result by current number and take modulo 10 at each step\n        result = (result * i) % 10\n    \n    # Return the last digit of the factorial\n    return result",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def interleave_lists(list1, list2, list3):\n    return [a + b + c for a, b, c in zip(list1, list2, list3)]",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_dissimilar(tuple1, tuple2):\n    # Convert both tuples into sets to remove duplicates and then back into lists\n    dissimilar_elements = list(set(tuple1) ^ set(tuple2))\n    return dissimilar_elements\n\n# Test cases\nprint(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))  # Expected output: [3, 6, 7, 10]\nprint(find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)))   # Expected output: [1, 4, 7, 9]\nprint(find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)))  # Expected output: [34, 36, 11, 25]",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_even(tup):\n    result = ()\n    for item in tup:\n        if isinstance(item, tuple) and len(item) > 0 and item[0] % 2 == 0:\n            result += (item,)\n    return result",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'surface_Area' is not defined",
      "Test 2: FAIL - name 'surface_Area' is not defined",
      "Test 3: FAIL - name 'surface_Area' is not defined"
    ],
    "generated_code": "def surface_area_square_pyramid(a, b):\n    base = 2 * (a**2)\n    lateral_surface_area = 2 * ((b / 2)**2 + a*b)\n    return base + lateral_surface_area\n\n# Test cases\nprint(surface_area_square_pyramid(3,4)) # Expected output: 33\nprint(surface_area_square_pyramid(4,5)) # Expected output: 56\nprint(surface_area_square_pyramid(1,2)) # Expected output: 5",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def my_dict(x):\n    return len(x) == 0",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n - i - 1)\n        return result\n\n# Test cases to verify the correctness of the solution\nprint(catalan_number(10)) # Expected output: 16796\nprint(catalan_number(9)) # Expected output: 4862\nprint(catalan_number(7)) # Expected output: 429",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_adverbs(sentence):\n    # Regular expression pattern to match words ending with \"ly\"\n    pattern = r\"\\b([A-Za-z]+ly)\\b\"\n    matches = re.findall(pattern, sentence)\n    \n    results = []\n    for match in matches:\n        start = sentence.find(match) + len(match[0])\n        end = start + len(match)\n        results.append(f\"{start}-{end}: {match}\")\n    \n    return \"\\n\".join(results)\n\n# Test cases\nprint(find_adverbs(\"Clearly, he has no excuse for such behavior.\"))  # Output: 0-7: Clearly\nprint(find_adverbs(\"Please handle the situation carefully\"))  # Output: 28-36: carefully\nprint(find_adverbs(\"Complete the task quickly\"))  # Output: 18-25: quickly",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from heapq import heappop, heappush, nlargest\n\ndef expensive_items(dataset, k):\n    # Initialize a max heap with negative prices for finding the min price efficiently\n    max_heap = []\n    \n    # Push all item prices into the max heap\n    for item in dataset:\n        heappush(max_heap, (-item['price'], item))\n    \n    # Extract the top k items based on their original price\n    result = [heappop(max_heap)[1] for _ in range(k)]\n    \n    return result",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_Arr(arr, n, k):\n    arr.insert(n-1, arr[:k])\n    del arr[k:]\n    return arr\n\n# Test cases\nprint(split_Arr([12,10,5,6,52,36],6,2)) # Expected output: [5,6,52,36,12,10]\nprint(split_Arr([1,2,3,4],4,1))         # Expected output: [2,3,4,1]\nprint(split_Arr([0,1,2,3,4,5,6,7],8,3))  # Expected output: [3,4,5,6,7,0,1,2]",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(nums):\n    # Find the maximum and minimum values in the list\n    max_value = max(nums)\n    min_value = min(nums)\n    \n    # Return the difference between the maximum and minimum values\n    return max_value - min_value",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef perfect_squares(start, end):\n    result = []\n    for i in range(start, end + 1):\n        sqrt = int(math.sqrt(i))\n        if sqrt * sqrt == i:\n            result.append(i)\n    return result\n\n# Test cases\nprint(perfect_squares(1,30))  # [1, 4, 9, 16, 25]\nprint(perfect_squares(50,100))  # [64, 81, 100]\nprint(perfect_squares(100,200))  # [100, 121, 144, 169, 196]",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    rho (float): The magnitude of the complex number in polar form.\n    theta (float): The angle in radians representing the phase angle of the complex number in polar form.\n    \n    Returns:\n    tuple: A tuple containing the real and imaginary parts of the converted complex number in rectangular form.\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x.real, y.imag)\n\n# Test cases\nprint(polar_rect(3, 4)) # Expected output: ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nprint(polar_rect(4, 7)) # Expected output: ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nprint(polar_rect(15, 17)) # Expected output: ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    # Interchange the first and last elements in the list\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef sum_of_product(n):\n    \"\"\"\n    Calculate the sum of products of binomial coefficients for n values.\n    \n    Args:\n    n (int): The number of terms in each binomial coefficient pair.\n    \n    Returns:\n    int: The sum of products of binomial coefficients.\n    \"\"\"\n    result = 0\n    for i in range(n + 1):\n        for j in range(i + 1):\n            # Calculate binomial coefficient and its power\n            coef = math.comb(i, j)\n            power = math.pow(coef, 2)\n            # Add to the result\n            result += power\n    return result\n\n# Check function with provided data points\nassert sum_of_product(3) == 15\nassert sum_of_product(4) == 56\nassert sum_of_product(1) == 1\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import re\n\ndef removezero_ip(ip_address):\n    # Remove leading zeros before dot characters in each octet of IP address\n    return re.sub(r'^(0+(\\d))|\\.(0+(\\d))', r'\\g<1>\\g<2>', ip_address)\n\n# Test cases to verify the correctness of the function\nassert removezero_ip(\"216.08.094.196\") == \"216.8.94.196\"\nassert removezero_ip(\"12.01.024\") == \"12.1.24\"\nassert removezero_ip(\"216.08.094.0196\") == \"216.8.94.196\"",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_even_odd(lst):\n    return lst[::2][-1] - lst[1::2][0]",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_Swaps(s1, s2):\n    # Initialize the count of swaps and find common prefix length\n    cnt = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            break\n        cnt += 1\n    \n    # If there is no common prefix, it's not possible to convert s1 to s2 with swaps\n    if i == len(s1) - 1:\n        return \"Not Possible\"\n    \n    # Calculate the number of swaps needed after removing common prefix\n    swap_needed = 0\n    for j in range(cnt + 1):\n        if s1[j] != s2[j]:\n            swap_needed += 1\n            \n    return swap_needed",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import sys\n\ndef tuple_size(tup):\n    \"\"\"\n    This function takes a tuple as input and returns the size of the tuple in bytes.\n    The size is obtained using the getsizeof method from the built-in module 'sys'.\n    \n    Args:\n    tup (tuple): A tuple for which we want to find the size.\n    \n    Returns:\n    int: Size of the tuple in bytes.\n    \"\"\"\n    return sys.getsizeof(tup)",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef find_kth(arr1, arr2, k, start1, end1, start2, end2):\n    if start1 > end1:\n        return None\n    \n    index1 = (start1 + end1) // 2\n    index2 = (start2 + end2) // 2\n    \n    # Find the maximum elements in the reduced subarrays\n    max_left = -float('inf')\n    if index1 < end1 and arr1[index1] > max_left:\n        max_left = arr1[index1]\n    \n    if index2 < end2 and arr2[index2] > max_left:\n        max_left = arr2[index2]\n    \n    if max_left == arr1[index1]:\n        left_sum = arr1[index1] * ((index1 - start1 + 1) * (end1 - index1 + 1) / 2)\n    else:\n        left_sum = arr2[index2] * ((index2 - start2 + 1) * (end2 - index2 + 1) / 2)\n    \n    right_sum = 0\n    if k <= len(arr1):\n        right_sum += sum(arr1[start1:index1+1])\n    else:\n        right_sum += sum(arr2[start2:k-index1-1])\n    \n    if k == 1:\n        return max_left\n    \n    mid_index = (start1 + end1) // 2\n    if max_left == min(arr1[mid_index], arr2[k-mid_index]):\n        return find_kth(arr1, arr2, k-(mid_index-start1), start1, mid_index-1, start2, end2)\n    elif max_left >= min(arr1[mid_index], arr2[k-mid_index]):\n        return find_kth(arr1, arr2, k-(mid_index-start1)+len(arr1)-(end1-mid_index+1), mid_index+1, end1, start2, end2)\n    else:\n        return find_kth(arr1, arr2, k-(mid_index-start1)+(len(arr1)-2*(mid_index-start1)), mid_index+1, end1, start2, end2)\n\n# Test cases\nprint(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5))  # Output: 6",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def armstrong_number(number):\n    # Convert the number to string and then calculate its length\n    num_str = str(number)\n    length = len(num_str)\n\n    # Initialize sum variable\n    total_sum = 0\n\n    # Calculate the sum of each digit raised to the power of the length of the number\n    for digit in num_str:\n        total_sum += int(digit) ** length\n\n    return total_sum == number",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    total_count = n\n    avg = total_sum / total_count\n    return total_sum, avg",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Even' is not defined",
      "Test 2: FAIL - name 'is_Even' is not defined",
      "Test 3: FAIL - name 'is_Even' is not defined"
    ],
    "generated_code": "def is_even(num):\n    \"\"\"\n    Check if the given number is even using bitwise operation.\n    \n    Args:\n    num (int): The number to be checked.\n    \n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    # Using bitwise AND with 1 to check the least significant bit\n    return num & 1 == 0",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]