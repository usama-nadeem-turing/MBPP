[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_Occ(s, c):\n    \"\"\"\n    Remove the first and last occurrences of a specified character in a string.\n    \n    Parameters:\n    s (str): The original string.\n    c (str): The character to be removed.\n    \n    Returns:\n    str: A new string with the first and last occurrences of the specified character removed.\n    \"\"\"\n    index = -1 if s.find(c) == 0 else s.find(c)\n    start = index + len(c) if index > -1 else 0\n    \n    index = s.rfind(c)\n    end = index if index >= 0 else len(s)\n    \n    # Join parts of the string excluding the found characters\n    result = ''.join([s[:start], s[end+1:]])\n    return result",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_matrix(matrix):\n    # Sort each row based on the sum of elements in descending order and then ascending order for ties\n    return [[row[i] for row in sorted(matrix, key=sum)] for i in range(len(matrix))]\n\n# Test cases to verify the correctness of the solution\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\nprint(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\nprint(sort_matrix([[5,8,9],[6,4,3],[2,1,4]]))",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef count_common(words):\n    \"\"\"\n    Counts the frequency of each word and returns the top n most frequent words.\n    \n    Parameters:\n    - words (list): A list of strings where each string is considered a word.\n    \n    Returns:\n    - list: A list of tuples, each containing a word and its frequency,\n            sorted in descending order based on the frequency of words.\n    \"\"\"\n    # Counting the frequency of each word using Counter\n    word_counts = Counter(words)\n    # Returning the most common words as a list of tuples\n    return word_counts.most_common()",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Volume(base, height, length):\n    return base * height * length / 2",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_lowerstring(s):\n    return [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1) if s[i-1].islower() and not s[j-1].isupper()]",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the pattern to search for lowercase letters joined with an underscore\n    pattern = '[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the given string\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with provided data points\nprint(text_lowercase_underscore(\"aab_cbbbc\"))  # Expected output: Found a match!\nprint(text_lowercase_underscore(\"aab_Abbbc\"))  # Expected output: Not matched!\nprint(text_lowercase_underscore(\"Aaab_abbbc\")) # Expected output: Not matched!",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side_length):\n    return 4 * side_length",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_dirty_chars(source_str, dirty_str):\n    # Create an empty list for the result\n    result = []\n    \n    # Iterate over each character in source_str\n    for char in source_str:\n        # If the character is not found in dirty_str, add it to the result\n        if char not in dirty_str:\n            result.append(char)\n    \n    # Join the result list into a single string and return it\n    return ''.join(result)\n\n# Test cases\nprint(remove_dirty_chars(\"probasscurve\", \"pros\"))  # Expected output: 'bacuve'\nprint(remove_dirty_chars(\"digitalindia\", \"talent\"))  # Expected output: 'digiidi'\nprint(remove_dirty_chars(\"exoticmiles\", \"toxic\"))  # Expected output: 'emles'",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'test_duplicate' is not defined",
      "Test 2: FAIL - name 'test_duplicate' is not defined",
      "Test 3: FAIL - name 'test_duplicate' is not defined"
    ],
    "generated_code": "def has_duplicates(arr):\n    return len(set(arr)) != len(arr)",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "def is_woodall(number):\n    # Check for evenness of the first two prime numbers after dividing the input number by 2\n    return all(prime_number % 2 == 1 and prime_number > number / 2 else False for prime_number in [3, 5])\n\n# Test cases\nprint(is_woodall(383))  # Expected output: True\nprint(is_woodall(254))  # Expected output: False\nprint(is_woodall(200))  # Expected output: False",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multiples_of_num(n, m):\n    return [i*n for i in range(m)]",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_duplicate(arr):\n    duplicates = set()\n    for num in arr:\n        if num in duplicates:\n            return num\n        duplicates.add(num)\n    return -1",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_Sum(list_of_lists):\n    # Initialize variables to keep track of max_sum and current_list\n    max_sum = float('-inf')\n    current_list = []\n    \n    for sublist in list_of_lists:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n            current_list = sublist\n    \n    return max_sum",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - object of type 'int' has no len()",
      "Test 2: FAIL - object of type 'int' has no len()",
      "Test 3: FAIL - object of type 'int' has no len()"
    ],
    "generated_code": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n    \n    Args:\n        binary_str (str): A string representing a binary number.\n        \n    Returns:\n        int: The decimal equivalent of the binary number.\n    \"\"\"\n    # Calculate the length of the binary string\n    length = len(binary_str)\n    \n    # Initialize the decimal value to 0\n    decimal_value = 0\n    \n    # Loop through each character in the binary string\n    for i in range(length):\n        # Extract the current bit and multiply it by 2 raised to the power of its position\n        decimal_value += int(binary_str[i]) * (2 ** (length - 1 - i))\n    \n    return decimal_value",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_Product() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_Product() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_Product() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef find_Product(arr: List[int]) -> int:\n    # Initialize the result variable\n    res = 1\n    \n    # Loop through each element in the array\n    for num in arr:\n        # If the current number is not equal to its previous occurrence,\n        # multiply it with the result and move to the next unique element\n        if num != res:\n            res *= num\n    \n    # Return the final result after all unique numbers have been multiplied\n    return res",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def check_k_elements(tup_list, k):\n    \"\"\"\n    Check if each tuple in the list contains exactly k elements.\n    \n    Parameters:\n    tup_list (list of tuples): The list of tuples to be checked.\n    k (int): The number of elements expected in each tuple.\n    \n    Returns:\n    bool: True if every tuple in the list contains exactly k elements, False otherwise.\n    \"\"\"\n    for tup in tup_list:\n        if len(tup) != k:\n            return False\n    return True\n\n# Test Cases\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove(string_list):\n    # Remove all digit characters ('0'-'9') from each string in the list\n    result = [char for string in string_list for char in string if not char.isdigit()]\n    return result\n\n# Test cases\nprint(remove(['4words', '3letters', '4digits']))  # Expected output: ['words', 'letters', 'digits']\nprint(remove(['28Jan', '12Jan', '11Jan']))        # Expected output: ['Jan', 'Jan', 'Jan']\nprint(remove(['wonder1', 'wonder2', 'wonder3']))  # Expected output: ['wonder', 'wonder', 'wonder']",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binomial_Coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k), which is defined as n! / (k! * (n - k)!).\n    \n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n    \n    Returns:\n    int: The value of C(n, k).\n    \"\"\"\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num-1)\n    \n    return factorial(n) // (factorial(k) * factorial(n-k))\n\n# Test cases\nprint(binomial_Coeff(5, 2)) # Expected output: 10\nprint(binomial_Coeff(4, 3)) # Expected output: 4\nprint(binomial_Coeff(3, 2)) # Expected output: 3",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - get_Odd_Occurrence() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - get_Odd_Occurrence() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - get_Odd_Occurrence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def get_Odd_Occurrence(arr):\n    # Using a dictionary to count occurrences of each element in the array\n    occurrence_count = {}\n    for num in arr:\n        if num in occurrence_count:\n            occurrence_count[num] += 1\n        else:\n            occurrence_count[num] = 1\n    \n    # Iterating through the dictionary to find elements with an odd count\n    for key, value in occurrence_count.items():\n        if value % 2 != 0:\n            return key\n\n# Test cases\nprint(get_Odd_Occurrence([1,2,3,1,2,3,1]))   # Expected output: 1\nprint(get_Odd_Occurrence([1,2,3,2,3,1,3]))   # Expected output: 3\nprint(get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2]))   # Expected output: 5",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def count_substring_with_equal_ends(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        # Check if the substring starting at index i ends with itself\n        if s[i] == s[-i-1]:\n            count += 1\n    \n    return count",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\n\ndef func(lists,k):\n    # Combine all sublists into one list\n    combined_list = []\n    for sublist in lists:\n        for num in sublist:\n            combined_list.append(num)\n    \n    # Use heapq.nlargest to get the k largest elements efficiently\n    return heapq.nlargest(k, combined_list)\n\n# Test cases to verify the correctness of the function\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3))  # Output should be [5, 7, 1]\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1))   # Output should be [1]\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5))   # Output should be [6, 5, 7, 8, 1]",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'max_Prime_Factors' is not defined",
      "Test 2: FAIL - name 'max_Prime_Factors' is not defined",
      "Test 3: FAIL - name 'max_Prime_Factors' is not defined"
    ],
    "generated_code": "def max_prime_factors(n):\n    i = 2\n    factors = []\n    \n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    \n    # The last element in 'factors' is the largest prime factor.\n    return factors[-1]\n\n# Test cases\nprint(max_prime_factors(15))  # Output: 5\nprint(max_prime_factors(6))   # Output: 3\nprint(max_prime_factors(2))   # Output: 2",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'decimal_To_Binary' is not defined",
      "Test 2: FAIL - name 'decimal_To_Binary' is not defined",
      "Test 3: FAIL - name 'decimal_To_Binary' is not defined"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert an integer to its binary representation as a string.\n    \n    :param decimal_number: Integer to be converted.\n    :return: Binary representation of the input number as a string.\n    \"\"\"\n    return bin(decimal_number)[2:] if decimal_number else '0'\n\n# Test cases\nassert decimal_to_binary(10) == '1010'\nassert decimal_to_binary(1) == '1'\nassert decimal_to_binary(20) == '10100'\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_missing(arr, n):\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == mid + 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return low + 1\n\n# Test cases\nprint(find_missing([1,2,3,5],4)) # Expected output: 4\nprint(find_missing([1,3,4,5],4)) # Expected output: 2\nprint(find_missing([1,2,3,5,6,7],5)) # Expected output: 4",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rect_num(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the nth rectangular number.\n    A rectangular number is defined as a positive integer that can be expressed as the product of two consecutive integers.\n    \n    Args:\n    - n: An integer representing the position in the sequence of rectangular numbers.\n    \n    Returns:\n    - The nth rectangular number.\n    \"\"\"\n    # Calculate the nth rectangular number using formula: rectangle = n * (n + 1)\n    rectangle = n * (n + 1)\n    return rectangle\n\n# Check function with provided data points\nassert find_rect_num(4) == 20, \"Test case 1 failed\"\nassert find_rect_num(5) == 30, \"Test case 2 failed\"\nassert find_rect_num(6) == 42, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_Nth_Digit(num1, num2, n):\n    \"\"\"\n    This function finds the nth digit in the decimal representation of the sum of two integers.\n    \n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n    n (int): The position of the digit in the decimal representation.\n    \n    Returns:\n    int: The nth digit.\n    \"\"\"\n    # Sum of num1 and num2\n    total = num1 + num2\n    \n    # Convert the number to string for easy access to each digit\n    str_total = str(total)\n    \n    # Find the index of the digit at position n-1 if it exists\n    try:\n        digit_index = str_total.index(str(n - 1)) + 1\n    except ValueError:\n        return None  # In case there's no such digit\n    \n    # If we've found the correct index, return the corresponding digit\n    if len(str_total) >= digit_index:\n        return int(str_total[digit_index - 1])\n    else:\n        return None  # Return None if n is out of range\n\n# Example check function to verify the correctness of the solution\ndef check_solution():\n    assert find_Nth_Digit(1, 2, 1) == 5, \"Test case 1 failed\"\n    assert find_Nth_Digit(3, 5, 1) == 6, \"Test case 2 failed\"\n    assert find_Nth_Digit(5, 6, 5) == 3, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_mixed_list(lst):\n    return sorted(lst, key=lambda x: isinstance(x, int))\n\n# Test cases\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))  # [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))  # [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nprint(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))  # [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def div_even_odd(arr):\n    # Check if there is at least one even and one odd number in the array\n    has_even = False\n    has_odd = False\n    \n    for num in arr:\n        if num % 2 == 0:\n            has_even = True\n        else:\n            has_odd = True\n            \n    if has_even and has_odd:\n        return arr[0] // arr[-1]\n    else:\n        return None\n\n# Test cases\nprint(div_even_odd([1,3,5,7,4,1,6,8]))   # Output: 4\nprint(div_even_odd([1,2,3,4,5,6,7,8,9,10])) # Output: 2\nprint(div_even_odd([1,5,7,9,10]))         # Output: 10",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef rearange_string(s):\n    char_count = Counter(s)\n    result = ''\n    for char in s:\n        if not char_count[char]:\n            continue\n        else:\n            result += char\n            del char_count[char]\n    return result + ''.join(sorted(char_count.elements()))\n\nprint(rearange_string(\"aab\"))\nprint(rearange_string(\"aabb\"))\nprint(rearange_string(\"abccdd\"))",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef freq_element(lists):\n    element_freq = defaultdict(int)\n    \n    # Flatten all sublists into a single list and count frequencies\n    for sublist in lists:\n        for item in sublist:\n            element_freq[item] += 1\n            \n    return dict(element_freq)\n\n# Test cases\nprint(freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]))\nprint(freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))\nprint(freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]]))",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "filter_evennumbers = lambda nums: list(filter(lambda x: x % 2 == 0, nums))",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Sum(arr, n):\n    # Count the occurrences of each element in the array\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    total_sum = 0\n    for key, value in count.items():\n        # If the occurrence is more than one and it's not zero\n        if value > 1 and key != 0:\n            total_sum += key * (value // 2)\n    \n    return total_sum\n\n# Test cases\nprint(find_Sum([1,2,3,1,1,4,5,6], 8))   # Expected output: 3\nprint(find_Sum([1,2,3,1,1], 5))         # Expected output: 3\nprint(find_Sum([1,1,2], 3))             # Expected output: 2",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define the pattern for finding sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match(\"aab_cbbbc\"))  # Expected output: \"Found a match!\"\nprint(text_match(\"aab_Abbbc\"))  # Expected output: \"Not matched!\"\nprint(text_match(\"Aaab_abbbc\"))  # Expected output: \"Not matched!\"",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_string(text):\n    pattern = '^python'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match_string(\" python\"))  # Expected output: Not matched!\nprint(text_match_string(\"python\"))   # Expected output: Found a match!\nprint(text_match_string(\"  lang\"))   # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef get_gcd(arr: List[int]) -> int:\n    if len(arr) == 0:\n        raise ValueError(\"Array is empty\")\n    \n    def gcd(a, b):\n        while(b):\n            t = b\n            b = a % b\n            a = t\n        return a\n    \n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n    return result",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'test_distinct' is not defined",
      "Test 2: FAIL - name 'test_distinct' is not defined",
      "Test 3: FAIL - name 'test_distinct' is not defined"
    ],
    "generated_code": "def is_all_numbers_unique(numbers):\n    # Check if the set of numbers contains more than one element.\n    # If it does, there must be at least two identical numbers in the list.\n    return len(set(numbers)) == len(numbers)",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ZeroDivisionError: integer division or modulo by zero"
    ],
    "generated_code": "def compute_Last_Digit(a, b):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    # Calculate the last digits of a! and b!\n    last_digit_a = str(factorial(a))[-1]\n    last_digit_b = str(factorial(b))[-1]\n    \n    # Return the last digit of the division result of a! by b!\n    return int(last_digit_a) % int(last_digit_b)\n\n# Test cases\nprint(compute_Last_Digit(2, 4))  # Output: 2\nprint(compute_Last_Digit(6, 8))  # Output: 6\nprint(compute_Last_Digit(1, 2))  # Output: 2",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(n):\n    # Create a mask with odd bits turned on\n    mask = n ^ ((n >> 1) | (n >> 2) | (n >> 3) | (n >> 4))\n    return mask",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    result = []\n    for sublist in matrix:\n        if len(sublist) > index:\n            result.append(sublist[index])\n    return result",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length_list(lst):\n    return min(lst, key=len)\n\n# Test cases\nprint(min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))  # Expected output: (1, [0])\nprint(min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]))   # Expected output: (1, [1])\nprint(min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]]))        # Expected output: (2, [1, 2])",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a, b, c):\n    # Check if all sides of the triangle are equal\n    return a == b and b == c",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'check_Eequality' is not defined. Did you mean: 'check_Equality'?"
    ],
    "generated_code": "def check_Equality(s):\n    # Check if the first character is the same as the last character\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Test cases\nprint(check_Eequality(\"abcda\"))  # Output: 'Equal'\nprint(check_Equality(\"ab\"))      # Output: 'Not Equal'\nprint(check_Eequality(\"mad\"))    # Output: 'Not Equal'",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def counting_sort(arr):\n    max_value = max(arr)\n    count_arr = [0] * (max_value + 1)\n\n    # Count occurrences of each value in arr\n    for num in arr:\n        count_arr[num] += 1\n\n    # Construct sorted array\n    sorted_arr = []\n    for index, count in enumerate(count_arr):\n        sorted_arr.extend([index] * count)\n\n    return sorted_arr\n\n# Test cases\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23], \"Test case 1 failed\"\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69], \"Test case 2 failed\"\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14], \"Test case 3 failed\"",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_gp(t,n,r):\n    return r ** (t-1) * n\n\n# Test cases\nprint(tn_gp(1,5,2)) # Expected output: 16\nprint(tn_gp(1,5,4)) # Expected output: 256\nprint(tn_gp(2,6,3)) # Expected output: 486",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(n):\n    \"\"\"\n    Check if n is equal to 2 * reverse of n - 1.\n    \n    :param n: integer, the number to be checked.\n    :return: bool, True if n equals 2 * reverse of n - 1, otherwise False.\n    \"\"\"\n    original = n\n    reversed_n = 0\n    while n > 0:\n        digit = n % 10\n        reversed_n = reversed_n * 10 + digit\n        n //= 10\n    \n    return original == 2 * reversed_n - 1",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Max_Num(digits_list, length):\n    # Sort the list in descending order based on the digits.\n    sorted_digits = sorted(digits_list, reverse=True)\n    # Join the sorted digits to form the maximum possible number.\n    max_number_str = ''.join(map(str, sorted_digits))\n    # Ensure the length of the string matches the required length.\n    if len(max_number_str) < length:\n        max_number_str += '0' * (length - len(max_number_str))\n    return int(max_number_str)\n\n# Example usage:\nprint(find_Max_Num([1, 2, 3], 3))  # Output: 321\nprint(find_Max_Num([4, 5, 6, 1], 4))  # Output: 6541\nprint(find_Max_Num([1, 2, 3, 9], 4))  # Output: 9321",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def opposite_Signs(a, b):\n    \"\"\"\n    This function takes in two integer parameters and returns True if their signs are opposite,\n    otherwise it returns False.\n    \n    :param a: First integer parameter\n    :type a: int\n    :param b: Second integer parameter\n    :type b: int\n    :return: Boolean indicating whether the signs of the two numbers are opposite.\n    :rtype: bool\n    \"\"\"\n    # Check if the product of the two numbers is negative\n    return (a * b < 0)",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_octagonal(n):\n    # The formula for calculating the nth octagonal number is:\n    # Oct(N) = N * (3N - 2)\n    return n * (3*n - 2)\n\n# Test the function with provided data points\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef max_len_sub(nums: List[int], k: int) -> int:\n    dp = [[0] * len(nums) for _ in range(len(nums))]\n    max_length = 0\n    \n    for i in range(len(nums)):\n        dp[i][i] = 1\n        \n        if i > 0:\n            diff = nums[i] - nums[i-1]\n            if abs(diff) <= k:\n                dp[i][i-1] = min(dp[i-1][i-1] + 1, 1)\n        \n        max_length = max(max_length, dp[i][i])\n    \n    return max_length",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_Substrings() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - count_Substrings() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - count_Substrings() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from collections import defaultdict\n\ndef count_Substrings(num):\n    # Initialize variables for counting and memoization\n    n = len(num)\n    prefix_sum_count = defaultdict(int)\n    prefix_sum_count[0] = 1  # Base case for substring starting at index 0\n    current_prefix_sum = 0\n    result = 0\n    \n    for i in range(n):\n        current_prefix_sum += int(num[i])\n        \n        if current_prefix_sum in prefix_sum_count:\n            result += prefix_sum_count[current_prefix_sum]\n            \n        if current_prefix_sum == i + 1:\n            prefix_sum_count[current_prefix_sum] += 1\n            \n        else:\n            prefix_sum_count[current_prefix_sum - i - 1] += 1\n                \n    return result",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(lst):\n    # Initialize min_value with the first element of the list\n    min_value = lst[0]\n    \n    # Iterate through each element in the list starting from the second element\n    for num in lst[1:]:\n        # Update min_value if a smaller number is found\n        if num < min_value:\n            min_value = num\n    \n    # Return the minimum value found\n    return min_value",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_difference(lst):\n    \"\"\"\n    Given a list of tuples representing ranges [start, end], finds the maximum difference\n    between available pairs and returns it.\n    \n    Parameters:\n    lst (list of tuples): A list where each tuple represents an interval [start, end].\n    \n    Returns:\n    int: The largest difference found among all possible intervals.\n    \"\"\"\n    # Sort the list based on the start of the range\n    sorted_lst = sorted(lst)\n    max_diff = float('-inf')\n    \n    for i in range(len(sorted_lst) - 1):\n        current_diff = sorted_lst[i+1][0] - sorted_lst[i][1]\n        if current_diff > max_diff:\n            max_diff = current_diff\n    \n    return max_diff\n\n# Test cases\nprint(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))  # Expected output: 7\nprint(max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]))  # Expected output: 15\nprint(max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]))  # Expected output: 23",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def subject_marks(subject_tuples):\n    return sorted(subject_tuples, key=lambda x: x[1])",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for +: 'int' and 'NoneType'",
      "Test 2: FAIL - unsupported operand type(s) for +: 'int' and 'NoneType'",
      "Test 3: FAIL - unsupported operand type(s) for +: 'int' and 'NoneType'"
    ],
    "generated_code": "def recursive_list_sum(lst):\n    if not lst:\n        return 0\n    else:\n        first = lst[0]\n        rest = lst[1:]\n        if isinstance(first, int) and isinstance(rest[0], int):\n            return first + recursive_list_sum(rest)\n        elif isinstance(first, int):\n            return first + recursive_list_sum(rest)\n        else:\n            for element in rest:\n                if isinstance(element, int):\n                    return recursive_list_sum([first] + rest)\n                else:\n                    continue",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(nums):\n    # Initialize a counter for positive numbers\n    positive_count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num > 0:\n            # Increment the counter if the number is positive\n            positive_count += 1\n            \n    # Return the total count of positive numbers found\n    return positive_count",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def bell_number(n):\n    # Initialize a list with n+1 elements, all initially set to 0.\n    b = [0] * (n + 1)\n    \n    # Base case: There's one way to form a sum of zero, which is to choose no elements from an empty set.\n    b[0] = 1\n    \n    for i in range(1, n + 1):\n        j = i - 1\n        while j >= 0:\n            if j == 0:\n                b[i] += 1\n            else:\n                b[i] += b[j]\n            j -= 1\n            \n    return b[n]\n\n# Test cases to verify the correctness of the function\nprint(bell_number(2))  # Expected output: 2\nprint(bell_number(10))  # Expected output: 115975\nprint(bell_number(56))  # Expected output: 6775685320645824322581483068371419745979053216268760300",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(array):\n    \"\"\"\n    Checks if an array is monotonic.\n    \n    Parameters:\n    array (list): The list of integers to be checked for monotonicity.\n    \n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    increasing = decreasing = True\n    \n    for i in range(1, len(array)):\n        if array[i] > array[i-1]:\n            decreasing = False\n        elif array[i] < array[i-1]:\n            increasing = False\n            \n    return increasing or decreasing\n\n# Test cases\nprint(is_Monotonic([6, 5, 4, 4]))  # Expected output: True\nprint(is_Monotonic([1, 2, 2, 3]))  # Expected output: True\nprint(is_Monotonic([1, 3, 2]))     # Expected output: False",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_sublist(lst, sublst):\n    return all(item in lst for item in sublst)\n\n# Test cases\nprint(is_sublist([2,4,3,5,7],[3,7]))  # Expected output: False\nprint(is_sublist([2,4,3,5,7],[4,3]))  # Expected output: True\nprint(is_sublist([2,4,3,5,7],[1,6]))  # Expected output: False",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_equal(tuples_list, expected_length):\n    # Check if all tuples in the list have the expected length\n    if all(len(tuple_item) == expected_length for tuple_item in tuples_list):\n        return \"All tuples have same length\"\n    else:\n        return \"All tuples do not have same length\"\n\n# Test cases\nprint(get_equal([(11, 22, 33), (44, 55, 66)], 3))  # Expected output: \"All tuples have same length\"\nprint(get_equal([(1, 2, 3), (4, 5, 6, 7)], 3))     # Expected output: \"All tuples do not have same length\"\nprint(get_equal([(1, 2), (3, 4)], 2))               # Expected output: \"All tuples have same length\"",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n    \n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        \n        # A single \"comb\" over the input array\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                # Swap elements\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n            \n    return arr\n\n# Test cases\nprint(comb_sort([5, 15, 37, 25, 79]))  # Expected output: [5, 15, 25, 37, 79]\nprint(comb_sort([41, 32, 15, 19, 22]))  # Expected output: [15, 19, 22, 32, 41]\nprint(comb_sort([99, 15, 13, 47]))  # Expected output: [13, 15, 47, 99]",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dif_Square(n):\n    # Check if n is negative or zero\n    if n <= 0:\n        return False\n    \n    # If n is odd, it cannot be written as a difference of two squares\n    if n % 2 == 0:\n        # For even numbers greater than 4, they can always be written as a difference of two squares\n        return n > 4\n    else:\n        # Odd numbers cannot be expressed as a difference of two squares\n        return False",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef multiple_split(text):\n    # Use regex to split the text at any sequence of one or more whitespace characters or asterisks\n    result = re.split(r'\\s+|\\*', text)\n    return result[:-1]  # Return all but the last element as it might be incomplete",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_samepatterns(patterns, test_patterns):\n    \"\"\"\n    Check if two lists of strings follow the same pattern where each string in 'pattern' list maps to exactly one string in 'test_patterns'.\n    \n    :param patterns: List of source strings.\n    :param test_patterns: List of target strings.\n    :return: True if the pattern matches the test_patterns, False otherwise.\n    \"\"\"\n    mapping = {}\n    for src, tgt in zip(patterns, test_patterns):\n        if src not in mapping:\n            mapping[src] = []\n        mapping[src].append(tgt)\n    \n    return len(mapping) == len(set(patterns)) and all(len(val) <= 1 for val in mapping.values())\n\n# Test cases\nprint(is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])) # True\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])) # False\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])) # False",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_tuples(tuples_list, divisor):\n    result = []\n    for tup in tuples_list:\n        if all(x % divisor == 0 for x in tup):\n            result.append(str(tup))\n    return '[' + ', '.join(result) + ']'\n\n# Test cases\nprint(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)) # Should print [(6, 24, 12)]\nprint(find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5))       # Should print [(5, 25, 30)]\nprint(find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4))   # Should print [(8, 16, 4)]",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(a, b):\n    # Initialize total squares counter\n    total_squares = 0\n    \n    # Iterate over possible lengths for one side of the square\n    for length in range(1, min(a, b) + 1):\n        # Calculate total squares based on current length and dimensions\n        if a % length == 0:\n            total_squares += ((a // length - 1) * (b // length))\n        elif b % length == 0:\n            total_squares += ((b // length - 1) * (a // length))\n    \n    return total_squares",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Diff(n):\n    # Initialize sums for even and odd numbers\n    even_sum = 0\n    odd_sum = 0\n    \n    # Convert number to string for iteration\n    num_str = str(abs(int(n)))\n    \n    # Iterate through each digit in the number\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    # Return the absolute difference between sums of even and odd digits\n    return abs(even_sum - odd_sum)\n\n# Test cases\nprint(is_Diff(12345))   # Output: 0\nprint(is_Diff(1212112)) # Output: 1\nprint(is_Diff(1212))    # Output: 0",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    while n:\n        if (n & 1) == 1:\n            count += 1\n        n >>= 1\n    return count\n\n# Test Cases\nprint(count_With_Odd_SetBits(5))  # Expected output: 3\nprint(count_With_Odd_SetBits(10))  # Expected output: 5\nprint(count_With_Odd_SetBits(15))  # Expected output: 8",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    \"\"\"\n    This function checks if the length of a given word is odd.\n    \n    Parameters:\n    - word (str): The word to be checked\n    \n    Returns:\n    - bool: True if the word's length is odd, False otherwise.\n    \"\"\"\n    # Calculate the length of the word\n    length = len(word)\n    # Check if the length is odd and return the result\n    return length % 2 != 0",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the n-th tetrahedral number.\n    \n    Parameters:\n    n (int): The order of the tetrahedral number to calculate.\n    \n    Returns:\n    float: The n-th tetrahedral number as a floating-point number.\n    \"\"\"\n    # The formula for the n-th tetrahedral number is n*(n+1)*(n+2)/6\n    return round((n * (n + 1) * (n + 2)) / 6, 2)\n\n# Test cases\nprint(tetrahedral_number(5))  # Expected output: 35.0\nprint(tetrahedral_number(6))  # Expected output: 56.0\nprint(tetrahedral_number(7))  # Expected output: 84.0",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Both tuples must be of equal length.",
      "Test 2: FAIL - Both tuples must be of equal length.",
      "Test 3: FAIL - Both tuples must be of equal length."
    ],
    "generated_code": "def zip_tuples(tuple1, tuple2):\n    # Ensure both tuples have the same length for zipping\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of equal length.\")\n    \n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i], tuple2[i]))\n    \n    return result",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius ** 3",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Char(s):\n    # Initialize result as an empty string\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Concatenate the current character with the result\n        result += char\n    \n    # Return the concatenated string which represents the sum of all characters in the original string\n    return result",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculates the surface area of a sphere given its radius.\n    \n    Parameters:\n    - radius (float): The radius of the sphere.\n    \n    Returns:\n    float: The calculated surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def centered_hexagonal_number(n):\n    \"\"\"\n    Returns the n-th centered hexagonal number.\n    \n    Parameters:\n    n (int): The order of the centered hexagonal number to be found.\n    \n    Returns:\n    int: The n-th centered hexagonal number.\n    \"\"\"\n    return n * (2*n - 1)\n\n# Test cases to verify the correctness of the function\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_count(lst):\n    from collections import Counter\n    return dict(Counter(lst))",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef closest_num(n):\n    \"\"\"\n    Finds and returns the largest integer less than the given positive integer n.\n    \n    Parameters:\n    - n: A positive integer\n    \n    Returns:\n    An integer representing the largest integer less than n.\n    \"\"\"\n    # Convert n to an int for comparison purposes in case it's float due to rounding issues\n    if isinstance(n, float):\n        n = int(math.floor(n))\n    return n-1",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Find the maximum length among all words in the list\n    max_length = max(len(word) for word in words)\n    return max_length",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_substring(string_list, substring):\n    for value in string_list:\n        if substring in value:\n            return True\n    return False",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_undulating(s):\n    # Check if all characters in the string are equal\n    return len(set(s)) == 1\n\n# Test cases\nprint(is_undulating(\"1212121\"))  # Expected output: True\nprint(is_undulating(\"1991\"))     # Expected output: False\nprint(is_undulating(\"121\"))      # Expected output: True",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power(a, b):\n    # Calculate the result using ** operator for better precision and performance.\n    result = a ** b\n    return result",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_minimum(lst):\n    # Extracting and returning the name of the person with the minimum age\n    return min(lst, key=lambda x: x[1])[0]",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min_Length' is not defined",
      "Test 2: FAIL - name 'Find_Min_Length' is not defined",
      "Test 3: FAIL - name 'Find_Min_Length' is not defined"
    ],
    "generated_code": "def find_min_length(lst):\n    # Find the maximum depth in the nested list structure\n    max_depth = max(len(sublist) for sublist in lst)\n    # The number of elements between max_depth and the total length gives the minimum length of sublist\n    min_length = len(lst[0]) - max_depth + 1\n    return min_length\n\n# Test cases\nprint(find_min_length([[1],[1,2]]))  # Output: 1\nprint(find_min_length([[1,2],[1,2,3],[1,2,3,4]]))  # Output: 2\nprint(find_min_length([[3,3,3],[4,4,4,4]]))  # Output: 3",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_lists(lst):\n    counts = {}\n    for sublist in lst:\n        for item in sublist:\n            if item not in counts:\n                counts[item] = 1\n            else:\n                counts[item] += 1\n    return counts",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_num(nums):\n    # Calculate the product of the list elements\n    product = 1\n    for num in nums:\n        product *= num\n    \n    # Return the product divided by the number of elements in the list\n    return float(product) / len(nums)",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return '0'\n    binary = ''\n    while decimal_number > 0:\n        binary = str(decimal_number % 2) + binary\n        decimal_number //= 2\n    return binary",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def next_smallest_palindrome(n):\n    def reverse(num):\n        return int(str(num)[::-1])\n\n    while True:\n        n += 1\n        if str(n) == str(n)[::-1]:\n            return n\n\n# Test cases\nprint(next_smallest_palindrome(99)) # Expected output: 101\nprint(next_smallest_palindrome(1221)) # Expected output: 1331\nprint(next_smallest_palindrome(120)) # Expected output: 121",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def kth_element(arr, index, k):\n    # Implementing the logic to get the kth element from an array using binary search.\n    def search(nums, start, end):\n        if start > end:\n            return -1\n        mid = (start + end) // 2\n        target = nums[mid]\n        if k < mid and k > target:\n            return search(nums, mid + 1, end)\n        elif k == target:\n            return target\n        else:\n            return search(nums, start, mid - 1)\n\n    return search(arr, 0, len(arr) - 1)\n\n\n# Test Cases\nassert kth_element([12, 3, 5, 7, 19], 5, 2) == 3\nassert kth_element([17, 24, 8, 23], 4, 3) == 8\nassert kth_element([16, 21, 25, 36, 4], 5, 4) == 36",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def snake_to_camel(snake_str):\n    # Split the string at underscores and capitalize each word except the first one\n    return ''.join(word.capitalize() for word in snake_str.split('_'))\n\n# Test cases\nassert snake_to_camel('python_program') == 'PythonProgram', \"Test case 1 failed\"\nassert snake_to_camel('python_language') == 'PythonLanguage', \"Test case 2 failed\"\nassert snake_to_camel('programming_language') == 'ProgrammingLanguage', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: object of type 'int' has no len()"
    ],
    "generated_code": "def eulerian_num(n, m):\n    \"\"\"\n    Find the value of Euler's number for n and m.\n\n    Parameters:\n    - n (int): The base parameter in the Euler's number formula.\n    - m (int): The exponent parameter in the Euler's number formula.\n\n    Returns:\n    int: The calculated value of Euler's number.\n    \"\"\"\n\n    def helper(k, l, p):\n        if k == 0:\n            return [1]\n        elif l == 0:\n            return []\n        else:\n            result = []\n            current_product = 1\n            previous_value = helper(k-1, l, p)\n            while len(previous_value) > 0:\n                current_value = previous_value.pop()\n                new_value = []\n                for i in range(len(current_value)+1):\n                    if i == 0 or i == len(current_value):\n                        new_value.append([i, p])\n                    else:\n                        temp = list(current_value[:i] + current_value[i+1:])\n                        temp.insert(i, [current_value[i][0]+p, current_value[i][1]])\n                        new_value.append(temp)\n                result.extend(new_value)\n            return result\n\n    res = helper(n, m, 0)[m]\n    return sum(x[1] for x in res)\n\n# Check function with provided data points\nprint(eulerian_num(3, 1))  # Expected output: 4\nprint(eulerian_num(4, 1))  # Expected output: 11\nprint(eulerian_num(5, 3))  # Expected output: 26",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(lst):\n    # Initialize a counter variable\n    count = 0\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # If the element is True, increment the counter\n        if item:\n            count += 1\n            \n    # Return the final count of True booleans\n    return count",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_lists(list_input, tuple_input):\n    result = []\n    for item in list_input:\n        result.append(item)\n    for value in tuple_input:\n        result.append(value)\n    return tuple(result)\n\n# Test cases\nprint(add_lists([5, 6, 7], (9, 10)))  # Expected output: (9, 10, 5, 6, 7)\nprint(add_lists([6, 7, 8], (10, 11)))  # Expected output: (10, 11, 6, 7, 8)\nprint(add_lists([7, 8, 9], (11, 12)))  # Expected output: (11, 12, 7, 8, 9)",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Hexadecimal(low, high):\n    # Calculate the number of valid Hexadecimal digits between low and high inclusive\n    count = 0\n    if low < 0 or high > 15:\n        return count\n    elif low == 0 and high != 0:\n        return 1\n    else:\n        for i in range(low, high + 1):\n            if str(i)[0] not in 'ABCDEFabcdef':\n                count += 1\n        return count",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given",
      "Test 2: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given",
      "Test 3: FAIL - merge_sorted_list() takes 1 positional argument but 3 were given"
    ],
    "generated_code": "from heapq import merge\n\ndef merge_sorted_list(sorted_lists):\n    \"\"\"\n    Merge all input sorted lists into a single sorted iterator.\n    \n    :param sorted_lists: A list of sorted lists to be merged.\n    :return: An iterator over the elements in the merged and sorted order.\n    \"\"\"\n    return iter(merge(*sorted_lists))\n\n# Example usage:\nprint(list(merge_sorted_list([[25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]])))",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Equivalent(binary_string, n):\n    # Convert binary string to integer\n    num = int(binary_string, 2)\n    \n    # Check if the number is odd\n    if num % 2 != 0:\n        # Calculate the rotation equivalent using bitwise operations\n        rotated_num = ((num & 1) << (n % len(bin(num))-1)) | ((num >> (len(bin(num))-1)) & ((1 << (n % len(bin(num)))) - 1))\n        \n        # Count the number of ones in the rotated number\n        return bin(rotated_num).count('1')\n    \n    return 0\n\n# Test cases\nprint(odd_Equivalent(\"011001\", 6))  # Expected output: 3\nprint(odd_Equivalent(\"11011\", 5))   # Expected output: 4\nprint(odd_Equivalent(\"1010\", 4))    # Expected output: 2",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_missing(ranges, start, end):\n    # Sort the ranges based on their start values\n    sorted_ranges = sorted([x for x in ranges if start <= x[0] <= end], key=lambda x: x[0])\n    \n    result = []\n    current_start, current_end = sorted_ranges[0][0], sorted_ranges[0][1]\n    \n    for i in range(1, len(sorted_ranges)):\n        next_start, next_end = sorted_ranges[i]\n        \n        # If there is no overlap between current and next range, add it to the result\n        if next_start > current_end + 1:\n            result.append((current_start, current_end))\n            current_start, current_end = next_start, next_end\n        \n        else:\n            # Update the current end value if necessary\n            current_end = max(current_end, next_end)\n            \n            # Check if we need to add an additional range at the end of the loop\n            if i == len(sorted_ranges) - 1 and current_start != next_start:\n                result.append((current_start, current_end))\n                \n    # Add the last range if not already included\n    if current_start != end:\n        result.append((current_start, end))\n    \n    return result",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_in_nested_lists(nested_list):\n    return list(set.intersection(*map(set, nested_list)))\n\n# Test cases\nprint(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) # Expected output: [18, 12]\nprint(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])) # Expected output: [5, 23]\nprint(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])) # Expected output: [4]",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perimeter(r, h):\n    # calculate and return the perimeter of the cylinder\n    return 2 * r * h + 2 * r**2",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(str_num):\n    try:\n        int(str_num)\n        return True\n    except ValueError:\n        return False",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_freq(tuples_list):\n    from collections import Counter\n    \n    # Count occurrences of each tuple\n    counts = Counter(tuples_list)\n    \n    # Sort tuples based on their count and store results\n    sorted_tuples = []\n    for tup, freq in counts.most_common():\n        sorted_tuples.append((tup,) * freq)\n    \n    return sorted_tuples\n\n\n# Test cases\nprint(assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)])) \nprint(assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)]))\nprint(assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)]))",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'empty_dit' is not defined",
      "Test 2: FAIL - name 'empty_dit' is not defined",
      "Test 3: FAIL - name 'empty_dit' is not defined"
    ],
    "generated_code": "def empty_dictionaries(dicts_list):\n    return len([d for d in dicts_list if not d]) == 0\n\n# Test cases\nprint(empty_dictionaries([{},{},{}])) # Expected output: True\nprint(empty_dictionaries([{1,2},{},{}])) # Expected output: False\nprint(empty_dictionaries({})) # Expected output: True",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n\n# Example usage:\nprint(tuple_to_int((1, 2, 3)))  # Output: 123\nprint(tuple_to_int((4, 5, 6)))  # Output: 456\nprint(tuple_to_int((5, 6, 7)))  # Output: 567",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_to_float(lst):\n    return [(float(x[0]), float(y)) for x, y in lst]",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_list(input_str):\n    return input_str.split()",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search(nums, target):\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if nums[mid] == target and (mid == 0 or nums[mid-1] != target):\n            return target\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    return None",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef max_product_tuple(tuples_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Given a list of tuples where each tuple contains two integers,\n    returns the maximum product obtained by multiplying two distinct tuples.\n    \n    :param tuples_list: List of tuples containing integer pairs.\n    :return: Maximum product as an integer.\n    \"\"\"\n    # Sorting the tuples based on their products in descending order\n    sorted_tuples = sorted(tuples_list, key=lambda x: x[0] * x[1], reverse=True)\n    return sorted_tuples[0][0] * sorted_tuples[0][1]",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - check_triplet() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def check_triplet(arr, target_sum, x):\n    n = len(arr)\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            \n            if current_sum == target_sum:\n                return True\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n                \n    return False",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef nth_smart_number(n):\n    # Calculate the total count of non-smart numbers up to a certain point\n    count = sum([math.factorial(i) for i in range(1, int(math.sqrt(n)) + 1)])\n    \n    # Adjust the formula to get the exact nth smart number\n    smart_count = count + n - 1\n    \n    # Calculate the exact position within the sequence of smart numbers\n    pos_in_sequence = (smart_count // ((n + 1) * (n + 2) / 2))\n    \n    # Find the actual value at the given position\n    result = (pos_in_sequence + 1) ** 3\n    \n    return result\n\n# Test cases\nassert nth_smart_number(1) == 30\nassert nth_smart_number(50) == 273\nassert nth_smart_number(1000) == 2664\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_amicable_number(a, b):\n    def get_divisors(n):\n        divisors = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n        return sorted(divisors)\n\n    d_a = get_divisors(a)[::-1]\n    d_b = get_divisors(b)[::-1]\n\n    return len(d_a) > 1 and sum(d_a) == b and len(d_b) > 1 and sum(d_b) == a\n\ndef amicable_numbers_sum(limit):\n    result = 0\n    for num in range(1, limit+1):\n        if is_amicable_number(num, limit - num):\n            result += limit\n    return result",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef angle_complex(x, y):\n    \"\"\"\n    Calculate the phase angle in radians of a complex number represented by x and y.\n    \n    Args:\n    x (float): The real part of the complex number.\n    y (float): The imaginary part of the complex number.\n    \n    Returns:\n    float: The phase angle of the complex number in radians.\n    \"\"\"\n    return cmath.phase(complex(x, y))\n\n# Test cases to verify the correctness of the solution\nassert abs(angle_complex(0,1) - 1.5707963267948966) < 1e-9\nassert abs(angle_complex(2,1) - 0.4636476090008061) < 1e-9\nassert abs(angle_complex(0,2) - 1.5707963267948966) < 1e-9\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_length(s, k):\n    max_diff = -1\n    count_ones = sum(int(digit) for digit in s[:k])\n    diff = count_ones\n    \n    for i in range(k, len(s)):\n        if int(s[i]) == 1:\n            count_ones += 1\n        else:\n            count_ones -= 1\n        \n        current_diff = abs(count_ones - (len(s) - i))\n        \n        if current_diff > max_diff:\n            max_diff = current_diff\n            \n    return max_diff",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_of_common_divisors(a, b):\n    # Initialize the result as 1 because every number is divisible by 1\n    result = 1\n    \n    # Loop from 2 to the minimum of a and b to check for common divisors\n    for i in range(2, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            result += i\n    \n    return result",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_int(x, y):\n    # Handle negative numbers and use absolute values for simplicity\n    sign = -1 if (x < 0) ^ (y < 0) else 1\n    \n    x = abs(x)\n    y = abs(y)\n\n    result = 0\n    while y > 0:\n        # If y is odd, add x to result\n        if y & 1:\n            result += x\n        # Double x before checking next bit of y\n        x <<= 1\n        y >>= 1\n\n    return result * sign",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, lst):\n    return [word for word in lst if len(word) > n]",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: unmatched ')'"
    ],
    "generated_code": "def magic_square_test(matrix):\n    \"\"\"\n    This function checks if the given matrix is a magic square.\n    A magic square is a square grid filled with distinct positive integers in the range from 1 to n^2 such that each cell contains a different integer and the sum of the integers in each row, column, and both main diagonals are equal.\n    \n    Args:\n    matrix (list): The input square matrix to be checked for being a magic square.\n    \n    Returns:\n    bool: True if the input matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    # Calculate the sum of the first row as the magic constant\n    magic_sum = sum(matrix[0])\n    \n    # Check rows\n    if sum(row) != magic_sum for row in matrix):\n        return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check diagonals\n    if not all(matrix[i][i] == magic_sum for i in range(n)):\n        return False\n    if not all(matrix[i][n-1-i] == magic_sum for i in range(n)):\n        return False\n    \n    return True",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef max_occurrences(lst):\n    \"\"\"\n    Finds the element with the highest occurrence in the given list.\n    \n    Parameters:\n    lst (list): The input list of integers.\n    \n    Returns:\n    tuple: A tuple containing the element with the highest occurrence and its count.\n    \"\"\"\n    # Counting occurrences of each element in the list\n    counts = Counter(lst)\n    # Finding the element with the highest occurrence\n    most_common_element, _ = counts.most_common(1)[0]\n    return (most_common_element, counts[most_common_element])\n\n# Check function with provided data points\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == (2, 5), \"Test case 1 failed\"\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18]) == (8, 2), \"Test case 2 failed\"\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10]) == (20, 3), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_vowels(s):\n    \"\"\"\n    Reverses the vowels in a given string.\n    \n    Parameters:\n    s (str): The input string containing uppercase and lowercase letters.\n    \n    Returns:\n    str: A new string with the vowels reversed from their original positions.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    li = list(s)\n    i, j = 0, len(li) - 1\n    \n    while i < j:\n        if li[i] not in vowels:\n            i += 1\n        elif li[j] not in vowels:\n            j -= 1\n        else:\n            li[i], li[j] = li[j], li[i]\n            i += 1\n            j -= 1\n            \n    return ''.join(li)\n\n# Check function with provided data points\nassert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\nassert reverse_vowels(\"USA\") == \"ASU\", \"Test case 2 failed\"\nassert reverse_vowels(\"ab\") == \"ab\", \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "def sum_negativenum(lst):\n    return reduce(lambda x,y : x+y if y < 0 else x, lst, 0)",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_last(arr, p, q):\n    # Perform operation q times on the entire array\n    arr = [i^q for i in arr]\n    \n    # Check if the last element is even or odd and compare it with p % 2\n    if arr[-1] % 2 == p % 2:\n        return \"EVEN\" \n    else:\n        return \"ODD\"\n\n# Test cases\nprint(check_last([5,7,10],3,1))  # Expected output: ODD\nprint(check_last([2,3],2,3))     # Expected output: EVEN\nprint(check_last([1,2,3],3,1))   # Expected output: ODD",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hexagonal_num(n):\n    # Formula to calculate the nth hexagonal number: n(2n−1)\n    return int(n * (2 * n - 1))",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_electbill(kilowatt_hours):\n    return 0.85 * kilowatt_hours + 120.00",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def zero_count(nums):\n    # Initialize counter for zeros and total elements in the list\n    count_zero = 0\n    len_nums = len(nums)\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n    \n    # Calculate the ratio of zeros and return it\n    return count_zero / len_nums if len_nums != 0 else 0",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(num):\n    \"\"\"\n    Check if the given number num can be represented as the sum of non-zero powers of 2.\n    \n    Args:\n        num (int): The number to check.\n        \n    Returns:\n        bool: True if num can be represented as the sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    while num > 0:\n        # If last bit is set and it's greater than the power of two, then number cannot be represented\n        if num & 1 == 1 and num >= 2:\n            return False\n        num >>= 1\n    return True",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_singly(tuples_list):\n    # Initialize an empty list to store unique singletons from tuples.\n    result = []\n    \n    # Iterate through each tuple in the input list.\n    for t in tuples_list:\n        # Check if the length of the current tuple is exactly 1.\n        if len(t) == 1:\n            # Append the singleton value to the result list.\n            result.append(t[0])\n    \n    return result\n\n# Test cases\nprint(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))  # Expected output: [3, 4, 5, 7, 1]\nprint(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]))  # Expected output: [1, 2, 3, 4, 7, 8]\nprint(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]))  # Expected output: [7, 8, 9, 10, 11, 12]",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def flip(lst, start_index, end_index):\n    \"\"\"\n    Flip the sublist from `start_index` to `end_index` in the given list.\n    \"\"\"\n    lst[start_index:end_index+1] = reversed(lst[start_index:end_index+1])\n    return lst\n\ndef pancake_sort(arr):\n    \"\"\"\n    Sorts an array 'arr' in ascending order using pancake sort algorithm.\n    \n    Returns:\n        List[int]: The sorted list.\n    \"\"\"\n    n = len(arr)\n    while n > 1:\n        max_index = arr.index(max(arr[:n]))\n        if max_index != n-1:\n            # Move it to its correct position\n            flip(arr, 0, max_index + 1)\n        else:\n            flip(arr, 0, n - 1)  # Already at its correct position\n        n -= 1\n    return arr",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_samepair(list1, list2, list3):\n    return len(set(zip(list1, list2)).intersection(set(zip(list2, list3))))",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_lists(lst_of_lsts):\n    # Count the number of lists in the given tuple-like structure\n    count = sum(isinstance(item, list) for item in lst_of_lsts)\n    return count\n\n# Test cases\nprint(find_lists(([1, 2, 3, 4], [5, 6, 7, 8])))  # Expected output: 2\nprint(find_lists(([1, 2], [3, 4], [5, 6])))      # Expected output: 3\nprint(find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1]))) # Expected output: 1",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Pairs(arr, n):\n    total = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            total += abs(arr[i] - arr[j])\n    return total\n\n# Test cases\nprint(sum_Pairs([1,8,9,15,16],5))  # Expected output: 74\nprint(sum_Pairs([1,2,3,4],4))      # Expected output: 10\nprint(sum_Pairs([1,2,3,4,5,7,9,11,14],9))  # Expected output: 188",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def max_Abs_Diff(arr, k):\n    # Sort the array first to make finding the closest element easier.\n    arr.sort()\n    max_diff = float('-inf')\n    n = len(arr)\n    \n    for i in range(n-1):\n        current_diff = abs(arr[i] - arr[i+1])\n        if current_diff <= k:\n            continue\n        \n        min_diff = min(abs(arr[i] + k - arr[i+1]), abs(arr[i] - k - arr[i+1]))\n        \n        # Update max_diff with the largest minimum difference found so far\n        max_diff = max(max_diff, min_diff)\n    \n    return max_diff",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ascii_value_string(s):\n    # Calculate the sum of ASCII values of all characters in the string and return it\n    return sum(ord(char) for char in s)",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_path_sum(triangle, n, m):\n    # Initialize a DP table with the same dimensions as the triangle\n    dp = [[float('-inf')] * len(triangle[i]) for i in range(len(triangle))]\n    \n    # Base case: if there's only one row in the triangle\n    if len(triangle) == 1:\n        return max(sum(triangle[0]), sum(dp[0][m-1]))\n    \n    # Fill the first column of the DP table\n    for i in range(1, len(triangle)):\n        dp[i][0] = dp[i-1][0] + triangle[i][0]\n    \n    # Fill the rest of the DP table\n    for j in range(1, len(triangle[0])):\n        for i in range(1, len(triangle)):\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n    \n    # Return the maximum value from the last row of the DP table\n    return max(dp[-1])",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def sum_digits_twoparts(num):\n    \"\"\"\n    Divides a number into two non-negative integer parts.\n    Returns the maximum sum of digits for those parts.\n    \n    Parameters:\n    num (int): The number to be divided.\n    \n    Returns:\n    int: Maximum sum of digits after division.\n    \"\"\"\n    # Initialize variables to store the maximum sum and corresponding divisions\n    max_sum = 0\n    left_part, right_part = 0, num\n    \n    while left_part < right_part:\n        if left_part == 0:\n            left_part += 1\n            right_part -= 1\n        \n        temp_left_part = left_part + (num // left_part)\n        temp_right_part = right_part - (right_part % left_part)\n        \n        if temp_left_part > temp_right_part or temp_left_part * left_part + temp_right_part >= num:\n            break\n        \n        max_sum = temp_left_part + temp_right_part\n        left_part += 1\n        right_part -= 1\n    \n    return max_sum\n\n# Check function with provided data points\nassert sum_digits_twoparts(35) == 17, \"Test case 1 failed\"\nassert sum_digits_twoparts(7) == 7, \"Test case 2 failed\"\nassert sum_digits_twoparts(100) == 19, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: list indices must be integers or slices, not float"
    ],
    "generated_code": "def longest_subseq_with_diff_one(arr, diff):\n    dp = [[-float('inf')] * len(arr) for _ in range(2)]\n    \n    for i in range(len(arr)):\n        prev_state = i % 2\n        current_state = not prev_state\n        \n        if arr[i] - arr[dp[current_state][i]] == diff:\n            dp[current_state][i] = i + 1\n        else:\n            dp[current_state][i] = max(dp[prev_state][i], dp[prev_state][(i + 1) // 2])\n    \n    ans = float('-inf')\n    for state in [True, False]:\n        ans = max(ans, dp[state][-1])\n    \n    return ans - 1 if ans != float('-inf') else -1\n\n# Test cases\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7)) # Output: 6\nprint(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7)) # Output: 3\nprint(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8)) # Output: 7",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def does_Contain_B(a, b, c):\n    # Generate an infinite sequence of numbers from 'a' to 'c'\n    num_seq = range(a, c+1)\n    \n    # Check if the target number 'b' is in the generated sequence\n    if b in num_seq:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef is_coprime(a, b):\n    \"\"\"\n    Check if two numbers 'a' and 'b' are coprime.\n    \n    Two numbers are coprime if their greatest common divisor (GCD) is 1.\n    This means they have no common positive integer factors other than 1.\n    \n    Parameters:\n    a (int): First number.\n    b (int): Second number.\n    \n    Returns:\n    bool: True if 'a' and 'b' are coprime, False otherwise.\n    \"\"\"\n    # Compute GCD using gcd function from math module\n    gcd_value = math.gcd(a, b)\n    return gcd_value == 1\n\n# Test cases to verify the correctness of the function\nassert is_coprime(17, 13) == True, \"Test case 1 failed\"\nassert is_coprime(15, 21) == False, \"Test case 2 failed\"\nassert is_coprime(25, 45) == False, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n    \n    return list(merge(left_half, right_half))\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = a * x ** 2 + b * x + c\n    return (x, y)",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    return [row[index] for row in matrix]\n\n# Test cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) # Output: [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) # Output: [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)) # Output: [2,2,5]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    \"\"\"\n    Toggles all even bits of a given number.\n    \n    Args:\n        n (int): The integer whose even bits will be toggled.\n        \n    Returns:\n        int: The new integer with all even bits toggled from the original number.\n    \"\"\"\n    result = 0\n    for i in range(32):\n        # Toggle the ith bit if it's an even position\n        if i % 2 == 0 and (n >> i) & 1:\n            result |= 1 << i\n    return result",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def tuple_int_str(tup):\n    return tuple(map(int, tup))\n\n# Test cases\nprint(tuple_int_str( (('333', '33'), ('1416', '55')))) # Expected output: ((333, 33), (1416, 55))\nprint(tuple_int_str(('999', '99'))) # Expected output: (999, 99)\nprint(tuple_int_str(('666', '66'), ('1500', '555'))) # Expected output: ((666, 66), (1500, 555))",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def encode_list(lst):\n    encoded = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            count += 1\n        else:\n            encoded.append([count, lst[i - 1]])\n            count = 1\n    encoded.append([count, lst[-1]])\n    return encoded",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Ops(arr, n, m):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Check if it's possible to make all elements equal with less than m operations\n    if sum(arr) % n > m:\n        return -1\n    \n    # Calculate the target value for each element\n    target = int((sum(arr) / n))\n    \n    # Initialize variables for calculation\n    ops = 0\n    diff_sum = 0\n    \n    # Iterate through the sorted array\n    for num in arr:\n        # Calculate difference between current and target values\n        diff = abs(num - target)\n        \n        # If difference is more than m, return -1\n        if diff > m:\n            return -1\n        \n        # Add calculated differences to total operations\n        ops += diff\n        diff_sum += diff\n    \n    # Return the minimum number of operations needed\n    return ops + diff_sum // m\n\n# Test cases\nprint(min_Ops([2,2,2,2], 4, 3))  # Expected output: 0\nprint(min_Ops([4,2,6,8], 4, 3))  # Expected output: -1\nprint(min_Ops([21,33,9,45,63], 5, 6))  # Expected output: 24",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - KeyError: ('January', '4')"
    ],
    "generated_code": "def month_season(month, day):\n    seasons = {\n        ('December', '31'): 'winter',\n        ('January', '1'): 'winter',\n        ('February', '1'): 'winter',\n        ('March', '1'): 'spring',\n        ('April', '1'): 'spring',\n        ('May', '1'): 'spring',\n        ('June', '1'): 'summer',\n        ('July', '1'): 'summer',\n        ('August', '1'): 'summer',\n        ('September', '1'): 'fall',\n        ('October', '1'): 'fall',\n        ('November', '1'): 'fall'\n    }\n    \n    return seasons[(month, str(day))]\n\n# Test cases\nprint(month_season('January', 4)) # Expected output: winter\nprint(month_season('October', 28)) # Expected output: autumn\nprint(month_season('June', 6)) # Expected output: spring",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'gcd' is not defined",
      "Test 2: FAIL - name 'gcd' is not defined",
      "Test 3: FAIL - name 'gcd' is not defined"
    ],
    "generated_code": "from math import gcd as greatest_common_divisor\n\ndef solution(a, b, n):\n    if gcd(a, b) != 1:\n        return \"No solution\"\n    \n    x = ((n * b - a) // (a * b))\n    y = (((n - x * a) * b) // a)\n    \n    return f\"x = {x}, y = {y}\"",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(list1, list2):\n    return [item for item in list1 if item not in list2]\n\n# Test cases\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])) # Output: [1, 3, 5, 7, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])) # Output: [2, 4, 6, 8, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5,7])) # Output: [1, 2, 3, 4, 6, 8, 9, 10]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n\n# Test cases\nprint(sum_series(6))   # Expected output: 12\nprint(sum_series(10))  # Expected output: 30\nprint(sum_series(9))   # Expected output: 25",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef area_polygon(n_sides, side_length):\n    \"\"\"\n    Calculate the area of a regular polygon with n_sides and side length side_length.\n    \n    Args:\n        n_sides (int): The number of sides of the polygon.\n        side_length (float): The length of each side of the polygon.\n        \n    Returns:\n        float: The area of the polygon.\n    \"\"\"\n    return 0.25 * n_sides * side_length**2 / math.tan(math.pi/n_sides)\n\n# Test cases\nprint(area_polygon(4,20))  # Expected output: 400.0\nprint(area_polygon(10,15)) # Expected output: 1731.1969896610804\nprint(area_polygon(9,7))   # Expected output: 302.90938549487214",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def areEquivalent(numerator, denominator):\n    def isSumOfDivisors(num):\n        total_sum = num\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                if i * i != num:\n                    total_sum += i + num // i\n                else:\n                    total_sum += i\n        return total_sum\n    \n    numerator_divisor_sum = isSumOfDivisors(numerator)\n    denominator_divisor_sum = isSumOfDivisors(denominator)\n    \n    return numerator_divisor_sum == denominator_divisor_sum",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            char_lower = s.lower()[i]\n            index = ord(char_lower) - ord('a')\n            count += min(index, 26 - index)\n    return count",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'find_even_Pair' is not defined",
      "Test 2: FAIL - name 'find_even_Pair' is not defined",
      "Test 3: FAIL - name 'find_even_Pair' is not defined"
    ],
    "generated_code": "from collections import Counter\n\ndef find_even_pair(arr, target):\n    \"\"\"\n    Count the number of pairs in 'arr' whose XOR value is equal to 'target'.\n    \n    :param arr: List[int] - A list of integers.\n    :param target: int - The target XOR value for the pairs.\n    :return: int - The number of pairs with XOR value equal to target.\n    \"\"\"\n    # Initialize counter for the difference between elements and target\n    diff_count = Counter()\n    pairs_count = 0\n    \n    for num in arr:\n        # Calculate the complement needed to reach target through XOR\n        comp_needed = target ^ num\n        \n        # If the complement exists in the counter, add its occurrences to pairs_count\n        if comp_needed in diff_count:\n            pairs_count += diff_count[comp_needed]\n        \n        # Increment the count for current element\n        diff_count[num] += 1\n    \n    return pairs_count\n\n# Test cases\nprint(find_even_pair([5,4,7,2,1], 5))  # Expected output: 4\nprint(find_even_pair([7,2,8,1,0,5,11], 7))  # Expected output: 9\nprint(find_even_pair([1,2,3], 3))  # Expected output: 1",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: Input must be a positive integer"
    ],
    "generated_code": "def next_Power_Of_2(n):\n    # Ensure n is positive\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # If n is already a power of 2, return it directly\n    if (n & (n - 1)) == 0:\n        return n\n    \n    result = 1\n    while result < n:\n        result <<= 1\n    return result\n\n# Check function with provided data points\nassert next_Power_Of_2(0) == 1\nassert next_Power_OF_2(5) == 8\nassert next_Power_OF_2(17) == 32",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr, num):\n    # Initialize counter for occurrences\n    count = 0\n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        if arr[i] == num:\n            count += 1\n    # Return the total count of occurrences\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev = 0\n        curr = 1\n        for _ in range(2, n + 1):\n            next_val = prev + curr\n            prev = curr\n            curr = next_val\n        return curr",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_range_list(nums, left_index, right_index):\n    # Calculate the sum using list slicing and built-in sum function\n    return sum(nums[left_index:right_index + 1])",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_pentagon(side_length):\n    return side_length * 5",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_occurance(s):\n    # Initialize counter for 'std'\n    std_counter = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        if char == 's':\n            # Increment counter every time an 's' is found after 't' and before 'd'\n            if s[s.find('s') - 1] == 't' and s[s.find('s') + 1] == 'd':\n                std_counter += 1\n                \n    return std_counter\n\n# Test cases\nprint(count_occurance(\"letstdlenstdporstd\"))  # Expected output: 3\nprint(count_occurance(\"truststdsolensporsd\"))  # Expected output: 1\nprint(count_occurance(\"makestdsostdworthit\"))  # Expected output: 2",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_splchar(s):\n    return ''.join(filter(lambda x: x.isalnum(), s))\n\n# Test cases\nprint(remove_splchar('python  @#&^%$*program123')) # Expected output: 'pythonprogram123'\nprint(remove_splchar('python %^$@!^&*()  programming24%$^^()    language')) # Expected output: 'pythonprogramming24language'\nprint(remove_splchar('python   ^%&^()(+_)(_^&67)                  program')) # Expected output: 'python67program'",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_valid_parenthese(s):\n    \"\"\"\n    This function checks if a given string of parentheses is valid.\n    \n    A string is considered valid if all types of parentheses are correctly closed and nested.\n    \n    Parameters:\n    s (str): The input string containing only '(', ')', '{', '}', '[' and ']'.\n    \n    Returns:\n    bool: True if the string is valid, False otherwise.\n    \"\"\"\n    # Dictionary to map closing parentheses to their corresponding opening ones\n    mapping = {')': '(', '}': '{', ']': '['}\n    stack = []\n    \n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    \n    return not stack",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - answer() missing 2 required positional arguments: 'target_lowest' and 'target_highest'",
      "Test 2: FAIL - answer() missing 2 required positional arguments: 'target_lowest' and 'target_highest'",
      "Test 3: FAIL - answer() missing 2 required positional arguments: 'target_lowest' and 'target_highest'"
    ],
    "generated_code": "def answer(a, b, target_lowest, target_highest):\n    from math import gcd\n    \n    def least_common_multiple(x, y):\n        return x * y // gcd(x, y)\n\n    while True:\n        if target_lowest <= least_common_multiple(a, b) <= target_highest:\n            break\n        else:\n            a += 1\n            b += 1\n            \n    return (a, b)",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef string_literals(patterns, text):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def is_num_keith(num):\n    \"\"\"\n    Check if num is a Keith number.\n    \n    A Keith number is an n-digit number such that when you start from the first digit and repeatedly add \n    up all contiguous sequences of digits from right to left until no more such sequences can be formed,\n    the sum equals the original number. If num meets these conditions, it's called a Keith number.\n    \n    Parameters:\n    - num (int): The number to check\n    \n    Returns:\n    - bool: True if num is a Keith number, otherwise False\n    \"\"\"\n    # Convert the number to a list for easy manipulation\n    lst = [int(digit) for digit in str(num)]\n    \n    while len(lst) > 0:\n        # Summing up all contiguous sequences of digits from right to left\n        new_lst = [sum(lst[-i:]) for i in range(len(lst)+1)]\n        \n        # Update the list with the next sums\n        lst = new_lst[1:]\n        \n        # Early exit condition\n        if max(new_lst) == num:\n            break\n    \n    return num == min(lst)\n\n# Test cases\nprint(is_num_keith(14))  # Expected output: True\nprint(is_num_keith(12))  # Expected output: False\nprint(is_num_keith(197)) # Expected output: True",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # Convert latitude and longitude from degrees to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    # Haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n\n    # Radius of Earth in kilometers is taken as 6371\n    radius_earth_km = 6371\n    return c * radius_earth_km",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef common_prefix(words: List[str], n: int) -> str:\n    \"\"\"\n    Finds the longest common prefix among a list of strings.\n    \n    Args:\n    words: A list of strings.\n    n: The number of elements to consider for finding the common prefix.\n    \n    Returns:\n    A string representing the longest common prefix among the first n strings in words.\n    \"\"\"\n    if not words or len(words) < n:\n        return \"\"\n    \n    # Initialize the prefix with the first string in the list\n    prefix = words[0][:n]\n    \n    # Iterate through the rest of the strings and update the prefix\n    for word in words[1:]:\n        while len(word) > 0 and word[:n] != prefix[:len(word)]:\n            prefix = prefix[:-1]\n            break\n    \n    return prefix",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_character(input_string):\n    upper = []\n    lower = []\n    spec = []\n    num = []\n\n    for char in input_string:\n        if char.isupper():\n            upper.append(char)\n        elif char.islower():\n            lower.append(char)\n        elif not char.isdigit() and not char.isalpha():\n            spec.append(char)\n        else:\n            num.append(int(char))\n\n    return (upper, lower, spec, num)\n\n# Test cases\nprint(find_character(\"ThisIsGeeksforGeeks\")) # Should return: ([u'T', u'I', u'G', u'S'], [u'h', u'i', u's', u'e', u'e', u'e', u's'], [], [])\nprint(find_character(\"Hithere2\"))             # Should return: ([u'H'], [u'i', u't', u'h', u'e', u'r', u'e', u'g', u'e', u'r', u's'], [u'2'], [])\nprint(find_character(\"HeyFolks32\"))           # Should return: ([u'H', u'F'], [u'e', u'y', u'o', u'l', u'k', u's'], [u'3', u'2'], [])",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 3",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - 4"
    ],
    "generated_code": "def count_pairs(arr, k, diff):\n    # Initialize a dictionary to keep track of counts for each number modulo k\n    mod_count = {}\n    \n    # Loop through the array to find valid pairs\n    for num in arr:\n        target = num - diff\n        if target in mod_count:\n            mod_count[num] += 1\n        else:\n            mod_count[num % k] = 1\n    \n    result = sum(1 for pair in mod_count.values() if pair >= 2)\n    \n    return result",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def greater_specificnum(lst, num):\n    # Use list comprehension to filter out elements greater than 'num'\n    return [x for x in lst if x > num]",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'sqrt' is not defined"
    ],
    "generated_code": "def parabola_focus(a,b,c):\n    x = -b / (2 * a)\n    y = (-c - b**2 / (4 * a)) / (sqrt(1 + (b/a)**2))\n    return (x, round(y, 5))\n\n# Example usage:\nprint(parabola_focus(5,3,2))  # Expected output: (-0.3, 1.6)\nprint(parabola_focus(9,8,4))  # Expected output: (-0.44444, 2.25)\nprint(parabola_focus(2,4,6))  # Expected output: (-1.0, 4.125)",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_literals(string, literal_list):\n    # Create a regular expression pattern with the given literals as possible matches\n    pattern = '|'.join(map(re.escape, literal_list))\n    \n    # Search for each literal in the input string\n    if all(re.search(pattern, s) for s in [string]):\n        return 'Matched!'\n    else:\n        return 'Not Matched!'",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_common_subsequence(seq1, seq2, length1, length2):\n    dp = [[0] * (length2 + 1) for _ in range(length1 + 1)]\n    \n    for i in range(1, length1 + 1):\n        for j in range(1, length2 + 1):\n            if seq1[i - 1] == seq2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                \n    return dp[length1][length2]",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def prod_Square(num):\n    import math\n    \n    # Calculate the square root of num and round it up to get the largest integer n such that n^2 <= num\n    n = int(math.sqrt(num)) + 1\n    \n    # Check if n * n is equal to num\n    return num == n ** 2",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def first_Missing_Positive(nums):\n    n = len(nums)\n    for i in range(n):\n        while nums[i] > 0 and nums[i] <= n and nums[nums[i]-1] != nums[i]:\n            temp = nums[nums[i]-1]\n            nums[nums[i]-1] = nums[i]\n            nums[i] = temp\n    for i in range(n):\n        if nums[i] != i+1:\n            return i + 1\n    return n + 1",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    # Calculate the total number of integer points in the rectangle defined by (x1, y1) and (x2, y2)\n    total_points = (x2 - x1 + 1) * (y2 - y1 + 1)\n    \n    # Check if there is at least one integer point on either axis\n    has_integer_on_x_axis = not all(x == x1 for x in range(x1, x2+1))\n    has_integer_on_y_axis = not all(y == y1 for y in range(y1, y2+1))\n    \n    # If both axes have at least one integer point, add them to the total\n    if has_integer_on_x_axis and has_integer_on_y_axis:\n        total_points += 1\n    \n    return total_points",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_monthnumber(month_name):\n    \"\"\"\n    Checks if the given month name has exactly 30 days.\n    \n    Args:\n        month_name (str): The name of the month to check.\n        \n    Returns:\n        bool: True if the month has exactly 30 days, False otherwise.\n    \"\"\"\n    months = {\n        \"January\": 31,\n        \"March\": 31,\n        \"May\": 31,\n        \"July\": 31,\n        \"August\": 31,\n        \"October\": 31,\n        \"December\": 31,\n        \"April\": 30,\n        \"June\": 30,\n        \"September\": 30,\n        \"November\": 30\n    }\n    return months.get(month_name.lower(), -1) == 30",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_String(s):\n    # Check if the string contains at least one letter and one number\n    return any(char.isalpha() for char in s) and any(char.isdigit() for char in s)",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuple(tup):\n    return tuple(set(tup))",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def octal_To_Decimal(octal_num):\n    # Convert octal number to decimal\n    decimal_value = int(str(octal_num), 8)\n    return decimal_value\n\n# Test cases\nprint(octal_To_Decimal(25))  # Expected output: 21\nprint(octal_To_Decimal(30))  # Expected output: 24\nprint(octal_To_Decimal(40))  # Expected output: 32",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            high = mid - 1  # Search for earlier occurrences\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_tuples(lst, k):\n    # Use list comprehension to filter out tuples of length less than k\n    result = [tup for tup in lst if len(tup) >= k]\n    return result",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_exponentio(a, b):\n    result = []\n    for i in range(len(a)):\n        result.append(pow(a[i], b[i]))\n    return tuple(result)\n\n# Test cases\nprint(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))) # Output: (100000, 4096, 78125, 7776)\nprint(find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))) # Output: (1771561, 78125, 1679616, 117649)\nprint(find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))) # Output: (35831808, 1679616, 40353607, 2097152)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from math import sqrt\n\ndef largest_triangle(a, b):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed within an ellipse with semi-major axis 'a' and semi-minor axis 'b'.\n    \n    Parameters:\n    a (float): Semi-major axis of the ellipse.\n    b (float): Semi-minor axis of the ellipse.\n    \n    Returns:\n    float: The area of the largest possible inscribed triangle.\n    \"\"\"\n    # The maximum height of the inscribed triangle for an ellipse is the semi-minor axis 'b'\n    max_height = b\n    \n    # The base of the triangle will be equal to the semi-major axis 'a'\n    base = a\n    \n    # The formula to calculate the area of an isosceles triangle given its base and height\n    area = 0.5 * base * max_height\n    \n    return area\n\n# Test cases to verify the correctness of the solution\nprint(largest_triangle(4,2))   # Expected output: approximately 10.392\nprint(largest_triangle(5,7))   # Expected output: approximately 4.639\nprint(largest_triangle(9,1))   # Expected output: approximately 105.222",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    i = 0\n    # Loop until we reach 1 or go below zero.\n    while n >= 2:\n        i += 1\n        n //= 2\n    return 2 ** i",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_max(nums):\n    \"\"\"\n    Finds and returns a list containing the indices of the maximum value in the given list.\n    \n    :param nums: List[int] - A list of integers.\n    :return: List[int] - A list of integers representing the indices of the maximum value in 'nums'.\n    \"\"\"\n    max_value = max(nums)\n    return [index for index, element in enumerate(nums) if element == max_value]\n\n# Test cases\nprint(position_max([12,33,23,10,67,89,45,667,23,12,11,10,54]))  # Expected output: [7]\nprint(position_max([1,2,2,2,4,4,4,5,5,5,5]))  # Expected output: [7,8,9,10]\nprint(position_max([2,1,5,6,8,3,4,9,10,11,8,12]))  # Expected output: [11]",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(lst):\n    # Check if all elements in the list are the same\n    return len(set(lst)) == 1",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'l'"
    ],
    "generated_code": "def remove_even(s):\n    result = \"\"\n    for char in s:\n        if int(char) % 2 != 0:\n            result += char\n    return result",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'xor' is not defined"
    ],
    "generated_code": "def hamming_distance(x, y):\n    # Convert numbers to binary strings and remove '0b' prefix\n    bin_x = bin(x)[2:]\n    bin_y = bin(y)[2:]\n    \n    # Make sure both binary strings have the same length by padding with zeros if necessary\n    max_len = max(len(bin_x), len(bin_y))\n    bin_x = bin_x.zfill(max_len)\n    bin_y = bin_y.zfill(max_len)\n    \n    # Calculate Hamming distance as the number of differing bits\n    dist = sum(chr != xor for chr in bin_x + bin_y)\n    \n    return dist\n\n# Test cases\nprint(hamming_distance(4, 8))  # Expected output: 2\nprint(hamming_distance(2, 4))  # Expected output: 2\nprint(hamming_distance(1, 2))  # Expected output: 2",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(string, char):\n    count = 0\n    for ch in string:\n        if ch == char:\n            count += 1\n    return count",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def inversion_elements(tup):\n    result = []\n    for i in range(len(tup)):\n        for j in range(i + 1, len(tup)):\n            if tup[i] > tup[j]:\n                result.append(-(tup[j]))\n    return tuple(result)\n\n# Test cases\nprint(inversion_elements((7, 8, 9, 1, 10, 7))) # Expected output: (-8, -9, -10, -2, -11, -8)\nprint(inversion_elements((2, 4, 5, 6, 1, 7)))   # Expected output: (-3, -5, -6, -7, -2, -8)\nprint(inversion_elements((8, 9, 11, 14, 12, 13))) # Expected output: (-9, -10, -12, -15, -13, -14)",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tuples_list):\n    result = []\n    for t in tuples_list:\n        temp = \"\"\n        for i in range(len(t) - 1):\n            temp += t[i] + t[i+1]\n        if len(t) % 2 != 0:\n            temp += t[-1]\n        result.append(temp)\n    return result",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n)]\n    \n    max_length = 0\n    \n    for i in range(1, n):\n        for j in range(i, -1, -1):\n            if s[i] == s[j]:\n                dp[i][j] = 1 + dp[i-1][j+1]\n            else:\n                dp[i][j] = 0\n            \n            max_length = max(max_length, dp[i][j])\n            \n    return max_length\n\n# Test cases\nprint(find_longest_repeating_subseq(\"AABEBCDD\"))  # Expected output: 3\nprint(find_longest_repeating_subseq(\"aabb\"))      # Expected output: 2\nprint(find_longest_repeating_subseq(\"aab\"))       # Expected output: 1",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(decimal_str):\n    # Check if the string has exactly two digits after the decimal point and starts with '0' followed by digits.\n    pattern = r'^0\\.?\\d{2}$'\n    return bool(re.match(pattern, decimal_str))",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef heap_replace(heap, target_value):\n    \"\"\"\n    This function takes a list representing a min-heap and replaces its minimum value with a new value.\n    \n    :param heap: List of integers representing the heap\n    :param target_value: Integer value to replace the heap's minimum value with\n    :return: Updated heap after replacing the minimum value\n    \n    Example usage:\n    >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 21)\n    [21, 25, 23, 44, 39, 68, 89]\n    >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 110)\n    [23, 25, 68, 44, 39, 110, 89]\n    >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 500)\n    [23, 25, 68, 44, 39, 500, 89]\n    \"\"\"\n    # Remove the root node (smallest element) from the heap\n    removed = heap.pop()\n    \n    # If there are no elements left in the heap, return it as is\n    if not heap:\n        return heap\n    \n    # Replace the removed node with the new value\n    heap.append(target_value)\n    \n    # Sift down the new last element to restore heap property\n    for i in range(len(heap) // 2 - 1, -1, -1):\n        siftdown(heap, i, len(heap))\n    \n    return heap\n\n# Helper function to simulate sifting down the last inserted element\ndef siftdown(heap, startpos, pos):\n    newitem = heap[pos]\n    while pos > startpos:\n        parentpos = (pos - 1) >> 1\n        parent = heap[parentpos]\n        if newitem < parent:\n            heap[pos] = parent\n            pos = parentpos\n            continue\n        break\n    heap[pos] = newitem\n\n# Test cases\nprint(heap_replace([25, 44, 68, 2",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_allowed_specific_char(s):\n    # Define the regular expression pattern to match the allowed characters\n    pattern = '^[a-zA-Z0-9]*$'\n    \n    # Use the re.fullmatch() method to check if the entire string matches the pattern\n    result = re.fullmatch(pattern, s)\n    \n    # If fullmatch returns None, it means the string does not match the pattern\n    return result is not None\n\n# Test cases\nprint(is_allowed_specific_char(\"ABCDEFabcdef123450\"))  # Expected output: True\nprint(is_allowed_specific_char(\"*&%@#!}{\"))           # Expected output: False\nprint(is_allowed_specific_char(\"HELLOhowareyou98765\")) # Expected output: True",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def count_Num(others, nths):\n    \"\"\"\n    This function counts how many numbers between 1 and 2^n have their 'others' bit and 'nths' bit set.\n    \n    Parameters:\n    others (int): The number of other bits we want to check for.\n    nths (int): The number of specific bits we want to ensure are set.\n    \n    Returns:\n    int: The count of numbers meeting the criteria.\n    \"\"\"\n    # Initialize the count of numbers with required properties\n    count = 0\n    \n    # Iterate through all numbers from 1 to 2^n - 1\n    for num in range(1, 2**others):\n        if bin(num).count('1') == others + nths:\n            count += 1\n            \n    return count\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    assert count_Num(2, 1) == 1, \"Test case 1 failed\"\n    assert count_Num(3, 2) == 2, \"Test case 2 failed\"\n    assert count_Num(1, 2) == 1, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Calculate the sum of the fourth powers of the first n natural numbers\n    for i in range(1, n + 1):\n        total_sum += i ** 4\n        \n    return total_sum",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_strings(tuple1, tuple2):\n    # Concatenating two strings in each corresponding position of the tuples\n    result = [a + b for a, b in zip(tuple1, tuple2)]\n    return result",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef degree_radian(radians):\n    return math.degrees(radians)",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decode_list(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        if isinstance(lst[i], int) and isinstance(lst[i+1], int):\n            count = lst.pop(i)\n            value = lst.pop(i)\n            for _ in range(count):\n                result.append(value)\n            i -= 1  # Adjust index after popping two elements\n        else:\n            result.append(lst[i])\n            i += 1\n    return result",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_subset_list(nested_sublist1, nested_sublist2):\n    \"\"\"\n    Check if all elements in nested_sublist1 are present in nested_sublist2.\n    \n    Args:\n    nested_sublist1: A list containing sublists or individual elements.\n    nested_sublist2: Another list which we need to compare against.\n    \n    Returns:\n    True if every element in nested_sublist1 exists in nested_sublist2; otherwise, False.\n    \"\"\"\n    for item in nested_sublist1:\n        if not isinstance(item, list) and item not in nested_sublist2:\n            return False\n        elif isinstance(item, list):\n            if not check_subset_list(item, nested_sublist2):\n                return False\n    return True\n\n# Test Cases\nprint(check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])) # Expected output: False\nprint(check_subset_list([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])) # Expected output: True\nprint(check_subset_list(['a', 'b', 'e'], ['g'])) # Expected output: False",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_Operations(a, b):\n    if a > b:\n        a, b = b, a\n    while True:\n        a //= 2\n        b -= 1\n        if a == 0:\n            break\n    return b\n\n# Test cases\nprint(min_Operations(2, 4))  # Output: 1\nprint(min_Operations(4, 10)) # Output: 4\nprint(min_Operations(1, 4))  # Output: 3",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - AttributeError: 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def extract_min_max(arr, k):\n    # Sort the array\n    arr.sort()\n    \n    # Extract the first k smallest elements\n    min_elements = arr[:k]\n    \n    # Remove the sorted part from the original list to get the remaining elements\n    for i in range(k):\n        del arr[i]\n    \n    # Now add back the sorted part to maintain the order of non-min elements before the sorted part\n    for j in range(k):\n        arr.insert(j, min_elements[j])\n    \n    return tuple(arr)\n\n# Test cases\nprint(extract_min_max((5, 20, 3, 7, 6, 8), 2))  # Expected output: (3, 5, 8, 20)\nprint(extract_min_max((4, 5, 6, 1, 2, 7), 3))   # Expected output: (1, 2, 4, 5, 6, 7)\nprint(extract_min_max((2, 3, 4, 8, 9, 11, 7), 4)) # Expected output: (2, 3, 4, 7, 8, 9, 11)",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\ndef replace_max_specialchar(s, n):\n    # Replace spaces, commas, and dots with a colon using regex\n    return re.sub(r'[ ,.]+', ':', s)[:n].replace(':', '', -n)",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_type(tup):\n    first_type = type(tup[0])\n    for item in tup:\n        if type(item) != first_type:\n            return False\n    return True",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_majority(arr, n, k):\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if arr[i] == k:\n            count += 1\n        else:\n            count -= 1\n        if count > max_count:\n            max_count = count\n        if count < 0:\n            break\n    return max_count >= (n // 2)",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    # Initialize counter for set bits\n    count = 0\n    \n    # Loop through each bit in the binary representation of n\n    while n > 0:\n        # Check if the least significant bit is set (equal to 1)\n        if n & 1 == 1:\n            count += 1\n        # Right shift n by one position to check the next bit\n        n >>= 1\n        \n    return count\n\n# Test cases\nprint(count_Set_Bits(2))  # Expected output: 1\nprint(count_Set_Bits(4))  # Expected output: 1\nprint(count_Set_Bits(6))  # Expected output: 2",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def find_Min(arr, left, right):\n    # Base case: if there is only one element\n    if left == right:\n        return arr[left]\n    \n    mid = (left + right) // 2\n    \n    # Check if the middle element is the smallest\n    if mid < right and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    elif mid > left and arr[mid - 1] > arr[mid]:\n        return arr[mid]\n    \n    # Decide whether to go to the left half or the right half\n    if arr[left] >= arr[mid]:\n        return find_Min(arr, left, mid - 1)\n    else:\n        return find_Min(arr, mid + 1, right)\n\n# Example usage\nprint(find_Min([1,2,3,4,5], 0, 4))  # Output: 1\nprint(find_Min([4,6,8], 0, 2))      # Output: 4\nprint(find_Min([2,3,5,7,9], 0, 4))  # Output: 2",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(s):\n    # Initialize an empty list to store characters at even indices\n    result = []\n    # Iterate through the string starting from the first character\n    for i in range(len(s)):\n        if i % 2 == 0:\n            # Append characters with even indices to the result list\n            result.append(s[i])\n    # Join the list into a single string and return it\n    return ''.join(result)",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(number, start_position, end_position):\n    # Calculate the bitmask for the range [start_position, end_position]\n    bitmask = (1 << (end_position + 1)) - 1 | ~((1 << start_position) - 1)\n    \n    # Check if number & bitmask is equal to zero\n    return bool(number & bitmask) == False",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange_array(arr, n):\n    # Initialize two pointers, one for iterating through the array and another for sorting.\n    i = 0\n    j = len(arr) - 1\n    \n    # Iterate from both ends towards the center until they meet in the middle.\n    while i < j:\n        # Move the left pointer right as long as it points to a negative number.\n        while arr[i] >= 0 and i < j:\n            i += 1\n        \n        # Move the right pointer left as long as it points to a positive number.\n        while arr[j] <= 0 and i < j:\n            j -= 1\n            \n        # Swap the elements at the left and right pointers if they are not already equal.\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    \n    return arr\n\n# Example usage:\nprint(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))  # Expected output: [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nprint(re_arrange_array([12, -14, -26, 13, 15], 5))  # Expected output: [-14, -26, 12, 13, 15]\nprint(re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7))  # Expected output: [-42, -39, -78, 10, 24, 36, 85]",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(input_str, char_to_replace):\n    return input_str.replace(' ', char_to_replace)\n\n# Test cases\nprint(replace_blank(\"hello people\", '@')) # Expected output: \"hello@people\"\nprint(replace_blank(\"python program language\", '$')) # Expected output: \"python$program$language\"\nprint(replace_blank(\"blank space\", \"-\")) # Expected output: \"blank-space\"",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum(triangle, k):\n    n = len(triangle)\n    dp = [[0] * n for _ in range(k)]\n    \n    for row in range(n-1, -1, -1):\n        for col in range(row+1):\n            if row == n-1:\n                dp[row][col] = triangle[row][col]\n            else:\n                dp[row][col] = max(dp[row+1][col], dp[row+1][col+1]) + triangle[row][col]\n                \n    return dp[0][0]\n\n# Example usage\ntriangle1 = [[1], [2, 1], [3, 3, 2]]\nprint(max_sum(triangle1, 3))  # Expected output: 6\n\ntriangle2 = [[1], [1, 2], [4, 1, 12]]\nprint(max_sum(triangle2, 3))  # Expected output: 15\n\ntriangle3 = [[2], [3, 2], [13, 23, 12]]\nprint(max_sum(triangle3, 3))  # Expected output: 28",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from heapq import nlargest\n\ndef larg_nnum(arr, n):\n    return nlargest(n, arr)",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsuface_cylinder(radius, height):\n    return 2 * 3.1415 * radius * height",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(side_length):\n    return side_length ** 3",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of the given integer n.\n    \n    Parameters:\n    - n (int): The input integer whose even bits are to be set.\n    \n    Returns:\n    - int: The resulting integer with all even bits set from the original input.\n    \"\"\"\n    # Initialize result as zero with same bit length as n\n    res = 0\n    \n    while n > 0:\n        # Check if least significant bit is odd\n        if n & 1 != 0:\n            # Add current bit value (1 for odd, 0 for even) to result\n            res += 1 << ((n >> 1) & 1)\n        else:\n            # Shift right to check next least significant bit\n            n >>= 1\n    \n    return res",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def No_of_Triangle(n,k):\n    if k > n*n or k == 0:\n        return -1\n    else:\n        return int((k * (k + 1)) / 2)\n\n# Test cases\nprint(No_of_Triangle(4,2))  # Output should be 7\nprint(No_of_Triangle(4,3))  # Output should be 3\nprint(No_of_Triangle(1,3))  # Output should be -1",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef check_occurences(tuples_list):\n    \"\"\"\n    This function takes a list of tuples and returns a dictionary where keys are the tuples occurring similarly,\n    and values are the count of such occurrences.\n    \n    :param tuples_list: List of tuples.\n    :return: Dictionary with similar tuple occurrences as keys and their counts as values.\n    \"\"\"\n    occurrence_dict = defaultdict(int)\n    for t in tuples_list:\n        occurrence_dict[t] += 1\n    \n    result_dict = {}\n    for key, value in occurrence_dict.items():\n        if value > 1:\n            result_dict[key] = value\n            \n    return result_dict\n\n# Test cases\nprint(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]))  # Expected output: {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nprint(check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]))   # Expected output: {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nprint(check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]))  # Expected output: {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def number_of_substrings(s):\n    n = len(s)\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            result += 1\n    return result",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_total_number_of_sequences(n, m):\n    \"\"\"\n    This function calculates the total number of possible sequences of length n where each element in the sequence\n    is an integer between 1 and m inclusive. The sequence must satisfy the condition that each element is at least double\n    the previous element.\n    \n    Parameters:\n    n (int): Length of the sequence\n    m (int): Maximum value for each element in the sequence\n    \n    Returns:\n    int: Total number of valid sequences\n    \"\"\"\n    # Base case: if the sequence length is 1, there's only one possible number from 1 to m\n    if n == 1:\n        return m\n    else:\n        # Calculate the sum of all possible values based on doubling effect up to m\n        return sum((m - i + 1) * pow(m / i, n-1) // pow(i, n-1) for i in range(1, m+1))",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_list(lst1, lst2):\n    if len(lst1) == 0:\n        return lst2\n    else:\n        lst1.pop() # Remove the last element from lst1\n        lst1.append(lst2[0]) # Add the first element of lst2 at the end of lst1\n        return lst1",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def array_3d(x, y, z):\n    result = []\n    for _ in range(z):\n        current_row = ['*' * x] * y\n        result.append(current_row)\n    return result",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(string):\n    return len(string)\n\n# Test cases\nprint(count_charac(\"python programming\")) # Expected output: 18\nprint(count_charac(\"language\"))           # Expected output: 8\nprint(count_charac(\"words\"))              # Expected output: 5",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def sort_on_occurence(lst):\n    # First, separate the tuple elements and their counts into two lists.\n    items = [item[0] for item in lst]\n    occurrences = [lst.count(item) for item in set(items)]\n    \n    # Combine the elements and their counts back into a sorted order.\n    sorted_list = []\n    i = 0\n    while i < len(items):\n        count = occurrences[i]\n        sorted_list.extend([items[i]] * count)\n        i += 1\n    \n    return sorted_list",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def next_Perfect_Square(n):\n    i = n + 1\n    while True:\n        if int(i ** 0.5) ** 2 == i:\n            break\n        else:\n            i += 1\n    return int(i ** 0.5) ** 2",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def max_sum(arr, n):\n    dp_positive = [arr[0]]\n    dp_negative = [-arr[0]]\n    \n    for i in range(1, n):\n        if arr[i] > 0:\n            dp_positive.append(max(dp_positive[-1] + arr[i], arr[i]))\n        else:\n            dp_negative.append(min(dp_negative[-1] + arr[i], -arr[i]))\n    \n    result = float('-inf')\n    for i in range(n):\n        result = max(result, dp_positive[i] + dp_negative[i])\n        \n    return result",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def babylonian_squareroot(n):\n    # Initialize guess to be n/2\n    x = n / 2\n    # Iterate until convergence\n    while True:\n        y = (x + n / x) / 2\n        if abs(y - x) < 0.000001:  # Check for convergence\n            break\n        x = y\n    return y\n\n# Test cases\nprint(babylonian_squareroot(10))  # Expected output: 3.162277660168379\nprint(babylonian_squareroot(2))   # Expected output: 1.414213562373095\nprint(babylonian_squareroot(9))   # Expected output: 3.0",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lps(s):\n    n = len(s)\n    \n    # Initialize DP table\n    dp = [[0] * (n+1) for _ in range(n)]\n    \n    # Fill dp table\n    for length in range(2, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if s[start] == s[end]:\n                dp[start][end] = dp[start+1][end-1] + 2\n            else:\n                dp[start][end] = max(dp[start+1][end], dp[start][end-1])\n    \n    # The result is stored in dp[0][n-1]\n    return dp[0][n-1]\n\n# Test cases\nprint(lps(\"TENS FOR TENS\"))   # Expected output: 5\nprint(lps(\"CARDIO FOR CARDS\"))  # Expected output: 7\nprint(lps(\"PART OF THE JOURNEY IS PART\"))  # Expected output: 9",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def harmonic_sum(n):\n    total = 0.0\n    for i in range(1, n+1):\n        total += 1 / float(i)\n    return total",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport operator\n\ndef intersection_array(arr1: List[int], arr2: List[int]) -> List[int]:\n    return list(set(arr1) & set(arr2))\n\n# Test cases\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9]))  # Expected output: [1, 2, 8, 9]\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9]))         # Expected output: [3, 5, 7, 9]\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40]))     # Expected output: [10]",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(tuple_element, target_value):\n    # Initialize counter for occurrences of the target value\n    count = 0\n    \n    # Iterate through each element in the tuple\n    for element in tuple_element:\n        # If the current element matches the target value, increment the counter\n        if element == target_value:\n            count += 1\n            \n    # Return the total number of occurrences\n    return count",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def insert_element(lst, elem):\n    result = [elem] * len(lst)\n    for i in range(len(result)):\n        result[i:i+1] += lst[i]\n    return result\n\n# Test cases\nprint(insert_element(['Red', 'Green', 'Black'], 'c')) # ['c', 'Red', 'c', 'Green', 'c', 'Black']\nprint(insert_element(['python', 'java'], 'program')) # ['program', 'python', 'program', 'java']\nprint(insert_element(['happy', 'sad'], 'laugh')) # ['laugh', 'happy', 'laugh', 'sad']",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def convert(complex_number):\n    # Extract real and imaginary parts from the complex number\n    real_part = abs(complex_number.real - complex_number.imag)\n    imag_part = abs(complex_number.real + complex_number.imag)\n\n    # Convert to polar form\n    magnitude = ((real_part ** 2) + (imag_part ** 2)) ** 0.5\n    angle_in_radians = math.atan2(imag_part, real_part)\n\n    # Convert angle to degrees\n    angle_in_degrees = math.degrees(angle_in_radians)\n\n    return (magnitude, angle_in_degrees)\n\n# Example usage:\nresult = convert(4+0j)\nprint(result)  # Output should be approximately (4.0, 0.0)",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(lst):\n    # Initialize a counter for counting integer elements\n    int_count = 0\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # Check if the current element is an integer using isinstance()\n        if isinstance(item, int):\n            # Increment the counter if it's an integer\n            int_count += 1\n            \n    # Return the total count of integer elements\n    return int_count",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef words_ae(text):\n    # Use regex to find words that start with 'a' or 'e'\n    return re.findall(r'\\b[a-e]\\w*', text)\n\n# Test cases\nprint(words_ae(\"python programe\")) # Expected output: ['ame']\nprint(words_ae(\"python programe language\")) # Expected output: ['ame', 'anguage']\nprint(words_ae(\"statement\")) # Expected output: ['assert', 'atement']",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import product\n\ndef combinations_colors(colors, num_combinations):\n    \"\"\"\n    Generate all possible combinations of specified length from given colors.\n    \n    Args:\n    colors (list): A list of color names.\n    num_combinations (int): The number of combinations to generate.\n    \n    Returns:\n    list: A list containing tuples representing each combination.\n    \"\"\"\n    return list(product(colors, repeat=num_combinations))\n\n# Test cases\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 1))\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 2))\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 3))",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    primes_count = 0\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            primes_count += 1\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n                \n    return primes_count + sum(is_prime[2:n])",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(a, b):\n    return(b, a)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_odd(lst):\n    return len(list(filter(lambda x: x % 2 != 0, lst)))\n\n# Test cases\nprint(count_odd([1, 2, 3, 5, 7, 8, 10])) # Expected output: 4\nprint(count_odd([10,15,14,13,-18,12,-20])) # Expected output: 2\nprint(count_odd([1, 2, 4, 8, 9])) # Expected output: 2",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximize_elements(tup1, tup2):\n    max_tup = sorted([(x[0], x[1]) for x in tup1 + tup2], reverse=True)\n    return tuple(max_tup[i:i+2] for i in range(0, len(max_tup), 2))\n\n# Test cases\nprint(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\nprint(maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))))\nprint(maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))))",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def is_newman_shanks_williams_prime(n):\n    # Generate numbers until finding the n-th Newman-Shanks-Williams prime\n    num = 2 * n + 3\n    while True:\n        if len(str(num)) == str(num).count('0'):\n            break\n        num += 2\n    \n    return num % (n+1)\n\n# Example check function to verify correctness with provided data points\ndef check_function():\n    assert is_newman_shanks_williams_prime(3) == 7, \"Test case 1 failed\"\n    assert is_newman_shanks_williams_prime(4) == 17, \"Test case 2 failed\"\n    assert is_newman_shanks_williams_prime(5) == 41, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_function()",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def division_elements(tuple1, tuple2):\n    result = []\n    for x, y in zip(tuple1, tuple2):\n        if y != 0:\n            result.append(x / y)\n        else:\n            result.append(\"Error\")\n    return tuple(result)\n\n# Test cases\nprint(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))  # Output: (2, 2, 2, 3)\nprint(division_elements((12, 6, 8, 16), (6, 3, 4, 4)))  # Output: (2, 2, 2, 4)\nprint(division_elements((20, 14, 36, 18), (5, 7, 6, 9)))  # Output: (4, 2, 6, 2)",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_two_parts(lst, n):\n    return (lst[:n], lst[n:])",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1, dict2):\n    return {**dict1, **dict2}\n\n# Test Cases\nprint(merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200}))  # Expected output: {'x': 300, 'y': 200, 'a': 100, 'b': 200}\nprint(merge_dict({'a':900,'b':900,'d':900}, {'a':900,'b':900,'d':900}))  # Expected output: {'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nprint(merge_dict({'a':10,'b':20}, {'x':30,'y':40}))  # Expected output: {'x':30,'y':40,'a':10,'b':20}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dog_age(dog_years):\n    # Convert human years to dog years\n    if dog_years <= 2:\n        return dog_years * 10.5\n    else:\n        return 21 + (dog_years - 2) * 4",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'square_Sum' is not defined",
      "Test 2: FAIL - name 'square_Sum' is not defined",
      "Test 3: FAIL - name 'square_Sum' is not defined"
    ],
    "generated_code": "def square_sum(n):\n    total = 0\n    for i in range(n):\n        # Calculate the i-th odd number and its square, then add it to total.\n        total += (2 * i + 1)**2\n    return total",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def find_star_num(n):\n    \"\"\"\n    Finds the n-th star number.\n    \n    A star number is defined as n * (3*n - 1)/2 for non-negative integers n.\n    \n    Parameters:\n    n (int): The order of the star number to be found.\n    \n    Returns:\n    int: The n-th star number.\n    \"\"\"\n    # Calculating the n-th star number using the formula\n    result = n * (3 * n - 1) // 2\n    return result\n\n# Test cases to verify the correctness of the function\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char):\n    return ord(char)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    # Initialize sum\n    total_sum = 0\n    \n    # Loop through the first n even numbers and calculate their fifth powers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        fifth_power = even_number ** 5\n        total_sum += fifth_power\n    \n    return total_sum",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rear_extract(tuples_list):\n    # Extract the last element of each tuple in the list and return as a new list\n    return [item[2] for item in tuples_list]\n\n# Test cases\nprint(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]))  # Should print [21, 20, 19]\nprint(rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]))  # Should print [36, 25, 45]\nprint(rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]))  # Should print [14, 36, 56]",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    return tuple(result)\n\n# Test cases\nprint(substract_elements((10, 4, 5), (2, 5, 18))) # Expected output: (8, -1, -13)\nprint(substract_elements((11, 2, 3), (24, 45, 16))) # Expected output: (-13, -43, -13)\nprint(substract_elements((7, 18, 9), (10, 11, 12))) # Expected output: (-3, 7, -3)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_binomial_Coeff_Sum(n):\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate through all odd indices up to n\n    for i in range(1, n + 1, 2):\n        # Calculate the binomial coefficient and add it to the total sum\n        total_sum += binomial_coefficient(i)\n    \n    return total_sum\n\n# Helper function to calculate binomial coefficient using math library\nfrom math import comb\n\ndef binomial_coefficient(k):\n    return comb(k, k // 2)\n\n# Test cases\nprint(even_binomial_Coeff_Sum(4))  # Expected output: 8\nprint(even_binomial_Coeff_Sum(6))  # Expected output: 32\nprint(even_binomial_Coeff_Sum(2))  # Expected output: 2",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Position(arr, num, pos):\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == num and i != pos:\n            return i + 1\n    return len(arr)",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the cylinder's base.\n    height (float): The height of the cylinder.\n    \n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius ** 2 * height",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_filter(dictionary, threshold):\n    # Filter dictionary items where value is greater than or equal to the threshold\n    filtered_dict = {key:value for key, value in dictionary.items() if value >= threshold}\n    return filtered_dict",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_first_elements(tuple_like_data):\n    \"\"\"\n    Counts the number of elements occurring before the first nested structure within a tuple-like object.\n    \n    Args:\n        tuple_like_data (tuple): A tuple containing mixed data types including tuples.\n        \n    Returns:\n        int: The count of elements that occur before the first nested structure in the tuple-like data.\n    \"\"\"\n    counter = 0\n    for element in tuple_like_data:\n        if isinstance(element, tuple):\n            break\n        else:\n            counter += 1\n    return counter\n\n# Test cases to verify the correctness of the function\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\nassert count_first_elements((2, 9, (5, 7), 11)) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8)) == 4\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_num_decagonal(n):\n    \"\"\"\n    Returns the n-th decagonal number.\n    \n    :param n: The position of the decagonal number in the sequence.\n    :return: The n-th decagonal number as an integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Formula to calculate the nth decagonal number\n    return 4 * n**2 - 3 * n\n\n# Test cases\nprint(is_num_decagonal(3))  # Expected output: 27\nprint(is_num_decagonal(7))  # Expected output: 175\nprint(is_num_decagonal(10)) # Expected output: 370",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return True, i\n    return False, -1",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_unique(lst):\n    # Convert the list to a set and compare its length with the original list's length\n    return len(set(lst)) == len(lst)",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from functools import reduce\n\ndef sub_list(list1, list2):\n    # Use map and lambda to subtract each element of list2 from corresponding elements of list1\n    result = list(map(lambda x, y: x - y, list1, list2))\n    return result\n\n# Test cases\nprint(sub_list([1, 2, 3], [4, 5, 6]))  # Output should be [-3, -3, -3]\nprint(sub_list([1, 2], [3, 4]))        # Output should be [-2, -2]\nprint(sub_list([90, 120], [50, 70]))   # Output should be [40, 50]",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def validate(num):\n    \"\"\"\n    Checks if each digit in the number has a frequency less than or equal to its value.\n    \n    Args:\n        num (int): The number to be checked.\n        \n    Returns:\n        bool: True if all digits' frequencies satisfy the condition, False otherwise.\n    \"\"\"\n    freq = {}\n    for d in str(num):\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    \n    for count in freq.values():\n        if count > int(d):\n            return False\n    return True\n\n# Test Cases\nprint(validate(1234))  # Expected output: True\nprint(validate(51241))  # Expected output: False\nprint(validate(321))   # Expected output: True",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(lst, target):\n    return len(set(lst)) == 1 and lst[0] == target",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_two_three(text):\n    if not (text.startswith(\"a\") and len([c for c in text[1:] if c == \"b\"]) >= 2 <= 3):\n        return 'Not matched!'\n    else:\n        return 'Found a match!'\n\n# Test cases\nprint(text_match_two_three(\"ac\")) # Expected output: 'Not matched!'\nprint(text_match_two_three(\"dc\")) # Expected output: 'Not matched!'\nprint(text_match_two_three(\"abbbba\")) # Expected output: 'Found a match!'",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sub_array_sum_repeated(arr, n, k):\n    arr.extend(arr * (k-1))\n    dp = [arr[i] for i in range(n)]\n    \n    # Calculate the maximum subarray sum ending at each index with size i\n    for i in range(1, len(dp)):\n        dp[i] += max(0, dp[i-1])\n    \n    # Find the overall maximum subarray sum\n    max_sum = max(dp)\n    \n    return max_sum\n\n# Test cases\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))  # Output: 30\nprint(max_sub_array_sum_repeated([-1, 10, 20], 3, 2))       # Output: 59\nprint(max_sub_array_sum_repeated([-1, -2, -3], 3, 3))       # Output: -1",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    # Initialize the sum of squares to 0\n    sum_of_squares = 0\n    \n    # Loop through the first n even numbers and add their squares to the sum\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    \n    return sum_of_squares",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: base is not invertible for the given modulus"
    ],
    "generated_code": "def modular_inverse(arr, mod, prime):\n    count = 0\n    for num in arr:\n        if pow(num, -1, mod) == num and mod % prime == 0:\n            count += 1\n    return count\n\n# Test cases\nprint(modular_inverse([ 1, 6, 4, 5 ], 4, 7))  # Expected output: 2\nprint(modular_inverse([1, 3, 8, 12, 12], 5, 13))  # Expected output: 3\nprint(modular_inverse([2, 3, 4, 5], 4, 6))  # Expected output: 1",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Days(year):\n    # Calculate the total number of years in a century\n    century_years = int(year / 100)\n    \n    # Number of centuries before the current year\n    num_centuries_before = year // 100\n    \n    # If the current year is not divisible by 400,\n    # subtract one from the number of centuries\n    if year % 400 != 0:\n        num_centuries_before -= 1\n    \n    # Total odd days up to the previous century\n    prev_odd_days = (num_centuries_before * 100 + 99) * 365 // 4 + 100\n    \n    # Total odd days in the current century\n    curr_1st_year = year % 100\n    odd_days_in_century = (curr_1st_year * 365) // 7 + 1\n    \n    # Adding odd days for the current year\n    odd_days_current_year = (year % 100) * 365 // 7 + (year % 100) >= 4\n    \n    # Return the sum of all these odd days\n    return prev_odd_days + odd_days_in_century + odd_days_current_year",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length(lst):\n    if not lst:\n        return (0, [])\n    \n    max_len = -1\n    result_list = []\n    \n    for sub_lst in lst:\n        if len(sub_lst) > max_len:\n            max_len = len(sub_lst)\n            result_list = [sub_lst]\n        elif len(sub_lst) == max_len:\n            result_list.append(sub_lst)\n    \n    return (max_len, result_list)\n\n# Test cases\nprint(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: (3, [[13, 15, 17]])\nprint(max_length([[1], [5, 7], [10, 12, 14,15]])) # Expected output: (4, [[10, 12, 14,15]])\nprint(max_length([[5], [15,20,25]])) # Expected output: (3, [[15,20,25]])",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from functools import lru_cache\n\ndef count_no_of_ways(n, k):\n    @lru_cache(maxsize=None)\n    def dp(i, prev_color):\n        if i == 0:\n            return 1\n        if i < 0:\n            return 0\n        \n        ans = 0\n        if prev_color != -1:\n            ans += dp(i-1, prev_color)\n        \n        # Color post with different color than previous one\n        ans += dp(i-1, -1)\n        \n        return ans % (10**9 + 7)\n    \n    return dp(n-1, -1)\n\n# Example usage\nprint(count_no_of_ways(2, 4))  # Expected output: 16\nprint(count_no_of_ways(3, 2))  # Expected output: 6\nprint(count_no_of_ways(4, 4))  # Expected output: 228",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(dividend, divisor):\n    result = dividend // divisor\n    return result",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\ndef otherside_rightangle(a, b):\n    return round(math.sqrt(a**2 + b**2), 5)",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def max_val(lst):\n    # Initialize max_value with the first element of the list.\n    max_value = lst[0]\n    # Iterate through all elements in the list starting from the second element.\n    for i in range(1, len(lst)):\n        # If current element is greater than max_value, update max_value.\n        if lst[i] > max_value:\n            max_value = lst[i]\n    return max_value",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_div(n):\n    \"\"\"\n    Returns the sum of all divisors of n.\n    \n    Parameters:\n    n (int): The number for which to find the sum of its divisors.\n    \n    Returns:\n    int: The sum of all divisors of n.\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Inv_Count(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                cnt += 1\n    return cnt",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def flatten_list(nested_list):\n    return [item for sublist in nested_list for item in sublist]\n\n# Test cases\nprint(flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])) # Should print: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nprint(flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])) # Should print: [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nprint(flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])) # Should print: [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def intersection_nested_lists(list_1, list_2):\n    return [item for sublist in list_1 for item in sublist if item in list_2]\n\n# Test cases\nprint(intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]))\nprint(intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]]))\nprint(intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']]))",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_aggregate(tuples_list):\n    return max(tuples_list, key=lambda x: x[1])[0]",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    This function calculates the number of binary sequences of length 2n where \n    the sum of the first n digits equals the sum of the last n digits.\n    \n    Args:\n        n (int): The length of each half of the sequence.\n        \n    Returns:\n        float: The total count of valid binary sequences.\n    \"\"\"\n    # Calculate the combinations for both halves being equal and not equal\n    combinations_equal = binomial_coefficient(2 * n, n)\n    combinations_not_equal = binomial_coefficient(2 * n - 2, n - 1)\n\n    # Since there are two ways each sequence can be either '0' or '1', multiply by 2\n    result = combinations_equal + combinations_not_equal * 2\n    return result / math.factorial(n)\n\n# Helper function to calculate binomial coefficient using factorial\ndef binomial_coefficient(n, k):\n    if k > n - k:\n        k = n - k\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\n# Test cases\nprint(count_binary_seq(1))  # Expected output: 2.0\nprint(count_binary_seq(2))  # Expected output: 6.0\nprint(count_binary_seq(3))  # Expected output: 20.0",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object has no attribute 'values'",
      "Test 2: FAIL - 'int' object has no attribute 'values'",
      "Test 3: FAIL - 'str' object has no attribute 'values'"
    ],
    "generated_code": "def dict_depth(d):\n    return max([len(list(d.values())) if isinstance(list(d.values())[0], dict) else 0] + [dict_depth(v) for v in d.values()] or [0])",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'set_Bit_Number' is not defined",
      "Test 2: FAIL - name 'set_Bit_Number' is not defined",
      "Test 3: FAIL - name 'set_Bit_Number' is not defined"
    ],
    "generated_code": "def set_bit_number(n):\n    # Initialize max_bit as 1 (the least significant bit)\n    max_bit = 1\n    \n    # Iterate while n is greater than zero\n    while n > 0:\n        # Right shift n by one position to get the next highest bit\n        n >>= 1\n        \n        # If the right-shifted value of n is not equal to max_bit, update max_bit\n        if n != max_bit:\n            max_bit <<= 1\n            \n    # Return max_bit - 1 as it represents the most significant set bit\n    return max_bit - 1",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def solve(arr, n):\n    # Calculate inversion for even positions and odd positions separately\n    even_inversions = sum(1 for i in range(n-1) if arr[i] > arr[i+1])\n    odd_inversions = sum(1 for i in range(1, n) if arr[i] > arr[i-1])\n\n    # Compare the counts and return the result\n    return even_inversions == odd_inversions\n\n# Test cases\nprint(solve([1,0,2], 3))  # Expected output: True\nprint(solve([1,2,0], 3))  # Expected output: False\nprint(solve([1,2,1], 3))  # Expected output: True",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not subscriptable"
    ],
    "generated_code": "def find_Element(nums, queries, index, n):\n    \"\"\"\n    Find the element at a given index after performing rotations in an array.\n    \n    Args:\n    nums (List[int]): The original array before rotations.\n    queries (List[List[int]]): A list of queries where each query is represented as [start_index, end_index].\n    index (int): The index to find the result for.\n    n (int): The length of the original array.\n    \n    Returns:\n    int: The element found at the specified index after all rotations.\n    \"\"\"\n    def perform_rotation(start, end, nums):\n        if start >= end:\n            return nums[start]\n        \n        mid = (start + end) // 2\n        \n        left_result = perform_rotation(start, mid, nums)\n        right_result = perform_rotation(mid + 1, end, nums)\n        \n        min_value = min(left_result, right_result)\n        max_value = max(left_result, right_result)\n        \n        rotated_value = left_result - (mid - start + 1)\n        rotation_value = min_value - ((n - len(nums)) % n * mid + start)\n        \n        if nums[mid] < rotation_value <= nums[rotation_value]:\n            return rotation_value\n        elif nums[min_value] <= nums[rotation_value] < nums[max_value]:\n            return min_value\n        else:\n            return max_value\n    \n    result = perform_rotation(0, n-1, nums)\n    return result[index]\n\n\n# Example check function\ndef check_solution():\n    assert find_Element([1,2,3,4,5], [[0,2],[0,3]], 2, 1) == 3\n    assert find_Element([1,2,3,4],[[0,1],[0,2]], 1, 2) == 3\n    assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]], 1, 1) == 1\n\ncheck_solution()",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(words_list):\n    p_words = []\n    for word in words_list:\n        if word.startswith('p'):\n            p_words.append(word)\n    return max(p_words) if p_words else None\n\n# Test cases\nprint(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])) # Expected output: ('Python', 'PHP')\nprint(start_withp([\"Python Programming\",\"Java Programming\"])) # Expected output: ('Python', 'Programming')\nprint(start_withp([\"Pqrst Pqr\",\"qrstuv\"])) # Expected output: ('Pqrst', 'Pqr')",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum_increasing_subseq(nums, n, m, k):\n    dp = [[0 for _ in range(n+1)] for _ in range(n)]\n    nums.append(float('inf'))  # Append an infinity value at the end\n    \n    for i in range(1, n + 1):\n        dp[i][i] = nums[i-1]\n        \n    for length in range(2, n + 1):  # Iterate over all lengths\n        for start in range(1, n - length + 2):  # Iterate over all starting indices\n            end = start + length - 1\n            for j in range(start, end):  # Iterate through the current length\n                if nums[j] < nums[start]:\n                    dp[start][end] = max(dp[start][end], dp[j][start] + nums[end])\n    \n    ans = float('-inf')\n    for i in range(m, min(k + 1, n)):\n        ans = max(ans, dp[i][k])\n    \n    return ans\n\n# Test cases\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6))  # Expected output: 11\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5))   # Expected output: 7\nprint(max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4))  # Expected output: 71",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 2: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 3: FAIL - can only concatenate tuple (not \"list\") to tuple"
    ],
    "generated_code": "def colon_tuplex(input_tuple, length, value):\n    return input_tuple[:length] + [(value,) * (len(input_tuple) - length)]",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef large_product(nums1: List[int], nums2: List[int], n: int) -> List[Tuple[int, int]]:\n    # Sort both lists in descending order and pair elements with indices\n    sorted_nums1 = sorted(zip(reversed(nums1), range(len(nums1))), reverse=True)\n    sorted_nums2 = sorted(zip(nums2, range(len(nums2))), reverse=True)\n\n    result = []\n    for i, j in zip(sorted_nums1, sorted_nums2):\n        if len(result) < n:\n            product = i[0] * j[0]\n            result.append((product, i[1], j[1]))\n        else:\n            break\n\n    return [p for p, _, _ in result]\n\n# Test cases\nprint(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3))\nprint(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4))\nprint(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5))",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_tuple(s):\n    return tuple(list(s))",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_left_most_unset_bit(n):\n    while n & (n - 1) != 0:\n        n ^= (n - 1)\n    return n",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone using its radius and height.\n    \n    Parameters:\n        radius (float): The radius of the base of the cone.\n        height (float): The height of the cone.\n        \n    Returns:\n        float: The volume of the cone.\n    \"\"\"\n    return (math.pi * radius ** 2) * height / 3\n\n# Test cases\nprint(volume_cone(5, 12))  # Expected output: 314.15926535897927\nprint(volume_cone(10, 15)) # Expected output: 1570.7963267948965\nprint(volume_cone(19, 17)) # Expected output: 6426.651371693521",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(lst):\n    # Use filter() with a lambda expression to get all positive numbers from the list\n    return list(filter(lambda x: x > 0, lst))",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_rectangular_grid(grid: List[List[int]], n: int) -> int:\n    if not grid or not grid[0]:\n        return 0\n    \n    dp = [[0] * (n + 1) for _ in range(2)]\n    \n    # Initialize with the first row values\n    for i in range(n):\n        dp[i % 2][i] = grid[0][i]\n    \n    ans = float('-inf')\n    \n    # Calculate sums considering both rows alternately\n    for k in range(2, n + 1):\n        for j in range(k // 2):\n            for i in range(j + 1, k - j):\n                left_sum = dp[j % 2][i] + dp[(j + 1) % 2][i - 1]\n                right_sum = dp[k - 1 - (k - j)] + dp[k - j % 2][j]\n                \n                dp[k % 2][j] = max(dp[k % 2][j - 1], left_sum, right_sum)\n                ans = max(ans, dp[k % 2][j])\n    \n    return ans",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_Max_Len_Even(word):\n    # Split the string into words and filter out odd-length words using regular expression\n    filtered_words = [word for word in re.findall(r'\\b\\w+\\b', word) if len(word) % 2 == 0]\n    \n    # If no even-length words were found, return -1\n    if not filtered_words:\n        return '-1'\n    \n    # Return the shortest even-length word\n    return min(filtered_words)",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_last_occurrence(sorted_list, target_number):\n    low = 0\n    high = len(sorted_list) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if sorted_list[mid] < target_number:\n            low = mid + 1\n        else:\n            if mid == len(sorted_list) - 1 or sorted_list[mid] > sorted_list[mid + 1]:\n                return mid\n            else:\n                low = mid + 1\n                \n    return None\n\n# Test cases\nprint(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)) # Expected output: 3\nprint(find_last_occurrence([2, 3, 5, 8, 6, 6, 6, 9, 9, 9], 9)) # Expected output: 9\nprint(find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)) # Expected output: 6",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def modified_encode(input_data):\n    result = []\n    i = 0\n    while i < len(input_data):\n        count = 1\n        char = input_data[i]\n        \n        # Check if it's not the last character and is part of a run\n        while i + 1 < len(input_data) and input_data[i] == input_data[i+1]:\n            i += 1\n            count += 1\n        \n        # Append the encoded data in chunks\n        for chunk in range(count):\n            result.append(char)\n        result.append(count)\n        i += 1\n    \n    return result\n\n# Test Cases\nprint(modified_encode([1,1,2,3,4,4,5,1]))  # Output: [[2, 1], 2, 3, [2, 4], 5, 1]\nprint(modified_encode('automatically'))  # Output: ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', [2, 'l'], 'y']\nprint(modified_encode('python'))  # Output: ['p', 'y', 't', 'h', 'o', 'n']",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def max_volume(sum_of_sides):\n    \"\"\"\n    This function takes an integer 'sum_of_sides' representing the total length of all three sides \n    of a cuboid and returns the maximum possible volume of such a cuboid.\n    \n    Example:\n    - max_volume(8) returns 18 because one way to achieve this is to have two sides as 6 and one side as 2,\n      giving us a cuboid dimension of 6x6x2 with a volume of 72/2 = 36 / 2 = 18.\n      \n    Constraints: 1 <= sum_of_sides <= 10^5\n    \"\"\"\n    # Start from half of the sum_of_sides and work backwards until you get a valid solution\n    for i in range(int(sum_of_sides // 2), 0, -1):\n        if sum_of_sides % i == 0:\n            j = sum_of_sides // i\n            k = int((sum_of_sides + i * j) / (i + 1))\n            return i * j * k\n    \n    return 0\n\n# Check function with provided data points\nassert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_long_word(input_string):\n    pattern = r'\\b\\w{5}\\b'\n    matches = re.findall(pattern, input_string)\n    return matches\n\n# Test cases\nprint(find_long_word('Please move back to strem'))  # Expected output: ['strem']\nprint(find_long_word('4K Ultra HD streaming player'))  # Expected output: ['Ultra']\nprint(find_long_word('Streaming Media Player'))  # Expected output: ['Media']",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_difference(n):\n    # Calculate the square of the sum of first n natural numbers\n    square_of_sum = sum(range(1, n+1)) ** 2\n    \n    # Calculate the sum of the squares of first n natural numbers\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    \n    # Return the difference\n    return square_of_sum - sum_of_squares",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: '\\x00\\x01\\x02\\x03\\x04\\x05\\x06'",
      "Test 2: FAIL - invalid literal for int() with base 10: '\\x00\\x01\\x02\\x03\\x04'",
      "Test 3: FAIL - invalid literal for int() with base 10: '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\x01\\x00\\x01\\x01'"
    ],
    "generated_code": "def find_demlo(number):\n    # Calculate the length of the number\n    length = len(str(number))\n    \n    # Create the demlo string\n    demlo_string = ''.join(map(str, range(length + 1)))\n    \n    # Replace each digit with its corresponding character in ASCII table\n    demlo_number = int(''.join(chr(int(digit)) for digit in demlo_string.replace(' ', '')))\n    \n    return str(demlo_number)",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def position_min(arr):\n    # Find the indices of the minimum value in the array.\n    min_value = min(range(len(arr)), key=arr.__getitem__)\n    return [min_value] + [i for i, x in enumerate(arr) if x == arr[min_value]]",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange(arr, n):\n    pos = []\n    neg = []\n    for num in arr:\n        if num >= 0:\n            pos.append(num)\n        else:\n            neg.append(num)\n\n    res = []\n    i, j = 0, 0\n    while i < len(pos) or j < len(neg):\n        if i < len(pos):\n            res.append(pos[i])\n            i += 1\n        if j < len(neg):\n            res.append(neg[j])\n            j += 1\n\n    return res[:n]\n\n# Test cases\nprint(re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10))  # Output: [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nprint(re_arrange([1, 2, 3, -4, -1, 4], 6))  # Output: [-4, 1, -1, 2, 3, 4]\nprint(re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8))  # Output: [-4, 4, -3, 7, -9, 9, 77, 5]",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_alternates(tuples):\n    # Extract elements at odd indices from the tuple\n    odds = [x for i, x in enumerate(tuples) if i % 2 == 0]\n    # Calculate sum of these elements and elements at even indices separately\n    result_odd = sum(odds[::2])\n    result_even = sum(odds[1::2]) + sum([x for i, x in enumerate(tuples) if i % 2 != 0][::-1])\n    return result_odd, result_even",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef get_Min_Squares(n):\n    # Base case: if n is less than 4, return n itself since it's already a square.\n    if n < 4:\n        return n\n    \n    # Calculate the largest perfect square less than or equal to n.\n    max_square = int(math.sqrt(n))\n    \n    # Initialize count and remainder variables.\n    count = 0\n    remainder = n - max_square**2\n    \n    # Iterate until we reach zero, incrementing count each time a square is used.\n    while remainder > 0:\n        # Add one for the current square.\n        count += 1\n        \n        # Subtract the square from the remainder and update it.\n        remainder -= max_square**2\n    \n    return count",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def most_occurrences(strings_list):\n    from collections import Counter\n    \n    # Count occurrences of each string and find the maximum count\n    max_count = max(Counter(strings_list).values())\n    \n    # Find all strings with the maximum occurrence\n    words_with_max_count = [word for word, count in Counter(strings_list).items() if count == max_count]\n    \n    return max(words_with_max_count)",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if any two sides are equal\n    return a == b or a == c or b == c",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(lst, n, k):\n    return lst[k:] + lst[:k]\n\n# Test cases\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)) # [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2))   # [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))  # [6, 7, 8, 9, 10, 1, 2]",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(lst):\n    # Initialize counter for negative numbers\n    count = 0\n    \n    # Iterate through each element in the list\n    for num in lst:\n        # If the number is less than 0, increment the counter\n        if num < 0:\n            count += 1\n            \n    # Return the total count of negative numbers\n    return count",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_char(text):\n    # Define a regex pattern for finding all words of length 4-6\n    pattern = r'\\b\\w{4,6}\\b'\n    result = re.findall(pattern, text)\n    return result",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_unset_bits(number):\n    # Initialize count of unset bits\n    unset_count = 0\n    \n    # Loop until number becomes zero\n    while number:\n        # Increment if least significant bit is not set\n        unset_count += not number & 1\n        # Right shift number by one position\n        number >>= 1\n    \n    return unset_count",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(s):\n    return {char: s.count(char) for char in set(s)}",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def sort_by_second_element(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n# Test cases\nprint(sort_by_second_element([['a', 10], ['b', 5], ['c', 20], ['d', 15]])) # [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nprint(sort_by_second_element([['452', 10], ['256', 5], ['100', 20], ['135', 15]])) # [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nprint(sort_by_second_element([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])) # [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]])",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Validity(a, b, c):\n    # Check for invalid triangles based on side lengths\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    else:\n        return True",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ap_sum(a, d, n):\n    return n * (2*a + (n-1)*d) // 2",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum(month_name):\n    # Define a dictionary containing months and their number of days\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    \n    # Check if the month is in the dictionary and return True if it has 28 days, otherwise False\n    return month_days.get(month_name) == 28",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_word(text):\n    # Define the regex pattern to match words at the end of a string with optional punctuation.\n    pattern = r'\\w+\\.'\n    \n    # Use the search method to find the pattern in the given text.\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the function\nprint(text_match_word(\"python.\"))   # Expected output: Found a match!\nprint(text_match_word(\"java.\"))     # Expected output: Not matched!\nprint(text_match_word(\"  java  \"))  # Expected output: Found a match!",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    \n    # Iterate through each character in the string\n    for i in range(n):\n        j = i + 1\n        while j < n:\n            if s[i] == s[j]:\n                count += 1\n            else:\n                break\n            j += 1\n    \n    return count",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Divisor(start, end):\n    \"\"\"\n    Finds the maximum occurring divisor within the given interval [start, end].\n\n    Args:\n    start (int): The starting index of the interval.\n    end (int): The ending index of the interval.\n\n    Returns:\n    int: The maximum occurring divisor within the interval.\n    \"\"\"\n    # Initialize the maximum frequency and corresponding value\n    max_frequency = 0\n    max_value = 0\n    \n    for i in range(start, end + 1):\n        divisors = set()\n        \n        # Find all divisors of the current number 'i'\n        for j in range(1, i // 2 + 1):\n            if i % j == 0:\n                divisors.add(j)\n                \n        # Update the maximum frequency and corresponding value\n        if len(divisors) > max_frequency:\n            max_frequency = len(divisors)\n            max_value = i\n            \n    return max_value",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])\n\n# Test cases\nprint(sum_three_smallest_nums([10,20,30,40,50,60,7]))  # Expected output: 37\nprint(sum_three_smallest_nums([1,2,3,4,5]))           # Expected output: 6\nprint(sum_three_smallest_nums([0,1,2,3,4,5]))         # Expected output: 6",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_to_tuple(input_set):\n    # Convert the set into an ordered tuple and return it.\n    return tuple(sorted(input_set))",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'int' and 'NoneType'"
    ],
    "generated_code": "def find_minimum_range(arrays):\n    import heapq\n    \n    # Initialize min heap with first elements and their indices\n    h = [(arrays[i][0], i, 0) for i in range(len(arrays))]\n    heapq.heapify(h)\n    \n    # Result variables\n    res_start, res_end, cur_min, prev_max = float('inf'), float('-inf'), None, 0\n    \n    while True:\n        num, arr_idx, ele_idx = heapq.heappop(h)\n        \n        if prev_max == -num:\n            break\n        \n        prev_max += num\n        \n        if ele_idx < len(arrays[arr_idx]) - 1:\n            new_num = arrays[arr_idx][ele_idx + 1]\n            heapq.heappush(h, (new_num, arr_idx, ele_idx + 1))\n            \n            if new_num < cur_min:\n                cur_min = new_num\n                \n        else:\n            res_start = min(res_start, num)\n            res_end = max(res_end, num)\n            \n    return (res_start, res_end)\n\n# Test cases\nprint(find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]))  # Expected output: (4, 6)\nprint(find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]]))  # Expected output: (4, 7)\nprint(find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]))  # Expected output: (5, 7)",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dig_let(s):\n    num_count = 0\n    let_count = 0\n    for char in s:\n        if char.isdigit():\n            num_count += 1\n        elif char.isalpha():\n            let_count += 1\n    return (num_count, let_count)\n\n# Test cases\nprint(dig_let(\"python\")) # Expected output: (6, 0)\nprint(dig_let(\"program\")) # Expected output: (7, 0)\nprint(dig_let(\"python3.0\")) # Expected output: (6, 2)",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - integer division or modulo by zero",
      "Test 2: FAIL - integer division or modulo by zero",
      "Test 3: FAIL - integer division or modulo by zero"
    ],
    "generated_code": "def count_Odd_Squares(lim, high):\n    # Initialize counter for numbers with odd factors\n    num_odd_factors = 0\n    \n    # Iterate over possible square roots up to half the limit\n    for i in range(int(pow(lim, 0.5)) + 1):\n        if lim % i == 0:\n            # If i is less than sqrt(lim), both i and lim/i will be factors\n            if i * i <= lim:\n                num_odd_factors += 2 - int(pow(i / i, 0.5))\n            else:\n                num_odd_factors += pow((lim // i) - ((i + 1) // 2), 2)\n    \n    # Add one more factor for the case where sqrt(lim) itself is an odd factor\n    num_odd_factors += int(pow(high / high, 0.5) > 0.5)\n    \n    return num_odd_factors",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diff_consecutivenums(nums):\n    diffs = []\n    for i in range(1, len(nums)):\n        diffs.append(nums[i] - nums[i-1])\n    return diffs",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_prime(x):\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef gcd(a, b):\n    while b != 0:\n        c = a % b\n        a = b\n        b = c\n    return a\n\ndef lcm(a, b):\n    return abs(a*b) // gcd(a, b)\n\ndef factorial(num):\n    result = 1\n    for i in range(2, num+1):\n        result *= i\n    return result\n\ndef binomial_coefficient(n, k):\n    if n < 0 or k < 0 or n < k:\n        return 0\n    else:\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef power_modulo(base, exponent, modulus):\n    result = 1\n    base = base % modulus\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        exponent = exponent >> 1\n        base = (base * base) % modulus\n    return result\n\ndef euler_phi_function(n):\n    phi = 1\n    for i in range(2, n):\n        if gcd(i, n) == 1:\n            phi += 1\n    return phi\n\ndef inverse_modular(exponent, modulo):\n    assert power_modulo(exponent, euler_phi_function(modulo), modulo) == 1\n    return pow(exponent, euler_phi_function(modulo) - 1, modulo)\n\ndef ziggurat_distribution(n, k):\n    p = ((k + 1) / n) ** k * (n - k) / n\n    return round(p * factorial(k) * factorial(n-k-1)) if p != 0 else 0\n\ndef zigzag(n, k):\n    return binomial_coefficient(n+k-1, k)",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Squares(m, n):\n    # Calculate the total number of unit squares in the rectangle\n    total_squares = m * n\n    \n    # The formula to calculate the number of squares is given by:\n    # total_squares + total_squares / (m + n - 1)\n    result = total_squares + total_squares // (m + n - 1)\n    \n    return result\n\n# Test cases\nprint(count_Squares(4, 3))  # Expected output: 20\nprint(count_Squares(1, 2))  # Expected output: 2\nprint(count_Squares(2, 2))  # Expected output: 5",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: find_ways() missing 1 required positional argument: 'numbers'"
    ],
    "generated_code": "from collections import defaultdict\n\ndef find_ways(length, numbers):\n    dp = [defaultdict(int) for _ in range(length)]\n    \n    # Base case initialization\n    dp[0][numbers[0]] += 1\n    \n    # Fill the DP table\n    for i in range(1, length):\n        for num in numbers:\n            dp[i][num] += sum(dp[j-1].get(num - val, 0) for j, val in enumerate(numbers[:i]))\n            \n    return max(dp[length-1].values()) if len(set(v for v in dp[-1].values())) == 1 else -1\n\n# Test cases\nprint(find_ways(4))  # Output: 2\nprint(find_ways(6))  # Output: 5\nprint(find_ways(8))  # Output: 14",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(binary_string):\n    if len(binary_string) > 0 and binary_string[0] == '0':\n        return \"No\"\n    else:\n        return \"Yes\"\n\n# Test cases\nprint(check(\"01010101010\")) # Expected output: Yes\nprint(check(\"name0\"))       # Expected output: No\nprint(check(\"101\"))         # Expected output: Yes",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def minimum_Length(s):\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    max_char_count = max(count.values())\n    \n    result = \"\"\n    for char, freq in count.items():\n        if freq == max_char_count - 1 and len(result) < len(s) // 2:\n            result += char\n        elif freq > max_char_count - 1:\n            break\n    \n    return len(s) - sum([freq - 1 for char, freq in count.items() if freq != max_char_count])\n\n# Test cases\nprint(minimum_Length(\"mnm\"))  # Output: 1\nprint(minimum_Length(\"abcda\"))  # Output: 3\nprint(minimum_Length(\"abcb\"))  # Output: 2",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Element(arr, n, k):\n    freq = {}\n    for i in range(n):\n        if arr[i] not in freq:\n            freq[arr[i]] = 0\n        freq[arr[i]] += 1\n    for key, value in freq.items():\n        if value == k:\n            return key\n    return -1",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'unique_Characters' is not defined",
      "Test 2: FAIL - name 'unique_Characters' is not defined",
      "Test 3: FAIL - name 'unique_Characters' is not defined"
    ],
    "generated_code": "def is_unique_chars(input_str):\n    # Your implementation of checking if all characters in the input string are unique goes here.\n    char_set = set()\n    for char in input_str:\n        if char in char_set:\n            return False\n        char_set.add(char)\n    return True",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_column(nested_list, index):\n    return [[sublist[i] for i in range(len(sublist)) if i != index] for sublist in nested_list]",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_ap(t,n,a):\n    return n*t + ((n-1)*a) * (t*(t-1)) / 2",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import math\n\ndef count_Rectangles(r):\n    \"\"\"\n    Given a radius r of a circle, returns the total number of rectangles with integer sides\n    that can be inscribed within or touching the boundary of the circle.\n    \n    Parameters:\n    r (float): The radius of the circle.\n    \n    Returns:\n    int: The total number of rectangles.\n    \"\"\"\n    # Calculate the area using the formula for the area of a circle\n    area = math.pi * r ** 2\n    \n    # Calculate the number of possible lengths and widths of the rectangle\n    # The minimum length and width is 1 (the side of the smallest square)\n    min_length, max_width = 1, int(math.sqrt(area))\n    \n    # Use an efficient approach to find the maximum width\n    for width in range(min_length, max_width + 1)[::-1]:\n        if area % width == 0:\n            height = area // width\n            length = min(width, height)\n            # Count all combinations of dimensions up to twice the size\n            yield from [length, width] * ((height - width + 1) // length)\n\n# Example check function to verify correctness\ndef check_solution():\n    assert len(list(count_Rectangles(2))) == 8, \"Test case 1 failed\"\n    assert len(list(count_Rectangles(1))) == 1, \"Test case 2 failed\"\n    assert len(list(count_Rectangles(0))) == 0, \"Test case 3 failed\"\n\ncheck_solution()",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_max(tuples_list):\n    max_value = tuples_list[0][0]\n    for tpl in tuples_list:\n        if tpl[0] > max_value:\n            max_value = tpl[0]\n    return max_value\n\n# Test cases\nprint(find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])) # Expected output: 10\nprint(find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)])) # Expected output: 11\nprint(find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)])) # Expected output: 12",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y if y else None, list1, list2))",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "def check_solution(a, b, c):\n    # Calculate discriminant\n    delta = (b**2) - (4*a*c)\n    \n    # If delta is negative, there are no real roots\n    if delta < 0:\n        return \"No\"\n    \n    # Solve for roots using the quadratic formula\n    root1 = (-b + delta**0.5) / (2 * a)\n    root2 = (-b - delta**0.5) / (2 * a)\n    \n    # Compare root1 with twice of root2 and vice versa\n    if root1 == 2 * root2 or root2 == 2 * root1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test cases\nprint(check_solution(1, 3, 2))  # Expected output: Yes\nprint(check_solution(1, 2, 3))  # Expected output: No\nprint(check_solution(1, -5, 6)) # Expected output: No",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_carol(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    c = [0] * (n + 1)\n    for i in range(1, n + 1):\n        j = i\n        while j > 0 and c[j] != 0:\n            j -= 1\n        k = i - j\n        d = factorial(i) // (factorial(j) * factorial(k))\n        c[i] = d\n    \n    return sum([d * pow(i, d, 10**i) % (10**i) for i, d in enumerate(c)])",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lst):\n    return [item for item in lst if item != []]",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return max(count_dict, key=count_dict.get)",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object does not support item assignment",
      "Test 2: FAIL - 'tuple' object does not support item assignment",
      "Test 3: FAIL - 'tuple' object does not support item assignment"
    ],
    "generated_code": "def add_K_element(tuples_list, k):\n    # Iterate over the list of tuples and update each tuple with k added to each element\n    for i in range(len(tuples_list)):\n        for j in range(len(tuples_list[i])):\n            tuples_list[i][j] += k\n    return tuples_list",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_flip_to_make_string_alternate(binary_str):\n    flips = sum(c != '1' for c in binary_str)\n    return flips // 2\n\n# Test cases\nprint(min_flip_to_make_string_alternate(\"0001010111\"))  # Output: 2\nprint(min_flip_to_make_string_alternate(\"001\"))         # Output: 1\nprint(min_flip_to_make_string_alternate(\"010111011\"))   # Output: 2",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(num):\n    # Convert the number to string and then iterate over each character to get length\n    digit_count = len(str(abs(num)))\n    return digit_count",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def adjacent_num_product(lst):\n    max_product = float('-inf')\n    for i in range(len(lst) - 1):\n        current_product = lst[i] * lst[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product\n\n# Test cases\nprint(adjacent_num_product([1,2,3,4,5,6]))  # Expected output: 30\nprint(adjacent_num_product([1,2,3,4,5]))   # Expected output: 20\nprint(adjacent_num_product([2,3]))         # Expected output: 6",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    \"\"\"\n    This function checks if a given binary tree is balanced.\n    A binary tree is considered balanced if for every node in the tree,\n    the heights of its left and right subtrees differ by no more than one.\n    \n    :param root: TreeNode, the root of the binary tree.\n    :return: bool, True if the tree is balanced, False otherwise.\n    \"\"\"\n    def check_balance(node):\n        nonlocal max_diff\n        \n        if not node:\n            return 0\n        \n        # Recursively get the balance factors of left and right subtrees\n        left_height = check_balance(node.left)\n        right_height = check_balance(node.right)\n        \n        # If both children are None, we have reached a leaf node\n        if left_height == -1 or right_height == -1:\n            return -1\n        \n        # Calculate the height of the current node\n        current_height = max(left_height, right_height) + 1\n        \n        # Check if the subtree rooted at the current node is balanced\n        if abs(left_height - right_height) > 1:\n            return -1\n        \n        return current_height\n    \n    max_diff = 0\n    check_balance(root)\n    return max_diff >= 0",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def repeat_tuples(input_tuple, n_times):\n    result = ()\n    for _ in range(n_times):\n        result += (input_tuple,)\n    return result",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lateralsurface_cuboid(length, width, height):\n    return 2 * (length * width + length * height + width * height)",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def float_sort(tuples):\n    return sorted(tuples, key=lambda x: float(x[1]))",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef smallest_missing(nums: List[int], start: int, end: int) -> int:\n    while start <= end:\n        mid = (start + end) // 2\n        if nums[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef heap_assending(lst):\n    return sorted(lst)\n\n# Test cases\nprint(heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]))  # Output should be [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nprint(heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58]))  # Output should be [14, 22, 25, 25, 35, 58, 65, 75, 85]\nprint(heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))       # Output should be [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def permute_string(s):\n    from itertools import permutations\n    return [''.join(p) for p in set(permutations(s))]",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef round_num(num, base):\n    # Calculate the difference between num and the nearest multiple of base\n    diff = abs(num - round_to_nearest_multiple_of_base(num, base))\n    \n    # If the difference is less than half of base, return the rounded value\n    if diff < base / 2:\n        return int(round_to_nearest_multiple_of_base(num, base))\n    else:\n        # Otherwise, return the next multiple of base after rounding\n        return int(base * math.ceil(num / base))\n\n# Helper function to round to the nearest multiple of base\ndef round_to_nearest_multiple_of_base(num, base):\n    return int(base * math.floor((num + base/2) / base))",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_replica(input_tuple):\n    result = []\n    seen = set()\n    for element in input_tuple:\n        if element not in seen:\n            result.append(element)\n            seen.add(element)\n        else:\n            result.append('MSP')  # Custom replacement value for duplicates\n    return tuple(result)\n\n# Test cases\nprint(remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)))  # Expected output: (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nprint(remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)))  # Expected output: (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nprint(remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)))  # Expected output: (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Char(s, char):\n    new_string = \"\"\n    for c in s:\n        if c != char:\n            new_string += c\n    return new_string\n\n# Test cases\nprint(remove_Char(\"aba\", 'a'))  # Expected output: \"b\"\nprint(remove_Char(\"toggle\", 'g'))  # Expected output: \"tole\"\nprint(remove_Char(\"aabbc\", 'b'))  # Expected output: \"aac\"",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_first(lst):\n    if not lst:\n        return []\n    \n    # Swap the last element with the first element of the list\n    last_element = lst.pop()\n    lst.insert(0, last_element)\n    return lst",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    # Calculate all six faces of the cuboid and return their total sum\n    return 2 * ((length * width) + (width * height) + (height * length))",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multi_list(n_rows, n_cols):\n    result = []\n    for _ in range(n_rows):\n        row = [i for i in range(n_cols * _)]\n        result.append(row)\n    return result",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(lst, idx):\n    return sorted(lst, key=lambda x: x[idx])",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_rotation_count(arr):\n    left = 0\n    right = len(arr) - 1\n    \n    while arr[left] >= arr[right]:\n        if right - left == 1:\n            return right\n        \n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid\n        elif arr[mid] < arr[left]:\n            right = mid\n        else:\n            return right\n            \n    return -1\n\n# Test cases\nprint(find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])) # Output: 3\nprint(find_rotation_count([8, 9, 10, 2, 5, 6]))             # Output: 3\nprint(find_rotation_count([2, 5, 6, 8, 9, 10]))             # Output: 0",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    result = 0\n    while n != 0:\n        bit = n & 1  # Get the last bit of n\n        if bit == 1:  # If the bit is 1 (odd), set it to 0 (even)\n            result |= 1  # Toggle the bit in the result\n        n >>= 1       # Right shift n by 1 to process the next bit\n    return result\n\n# Test cases\nprint(even_bit_toggle_number(10))  # Output: 15\nprint(even_bit_toggle_number(20))  # Output: 1\nprint(even_bit_toggle_number(30))  # Output: 11",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_Of_Smallest(n,arr):\n    # Find the smallest element in the array\n    min_value = min(arr)\n    # Count how many times the minimum value appears in the array\n    count = arr.count(min_value)\n    return count",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n\n# Example usage\nprint(get_perrin(9)) # Output: 12\nprint(get_perrin(4)) # Output: 2\nprint(get_perrin(6)) # Output: 5",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def swap_count(s):\n    balance = 0\n    count = 0\n    \n    for char in s:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        \n        if balance < 0:\n            # Find the first matching opening bracket and calculate swaps needed\n            start_index = s.index('[')\n            while start_index >= 0 and s[start_index] != '(': \n                start_index = s.find('(', start_index + 1)  \n            count += start_index - balance - 1\n            balance = 0\n    \n    return count // 2",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_or_odd(hex_number):\n    # Convert hex number to decimal and then determine if it's even or odd\n    decimal_value = int(hex_number, 16)\n    if decimal_value % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test cases\nprint(even_or_odd(\"AB3454D\"))  # Output: Odd\nprint(even_or_odd(\"ABC\"))      # Output: Even\nprint(even_or_odd(\"AAD\"))      # Output: Odd",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    # Initialize result as 0\n    res = 0\n    \n    # Loop until n becomes 0 and keep track of powers of 2 used\n    while n > 0:\n        n //= 2\n        res += 1\n        \n    return res - 1 if n != 0 else res\n\n# Test cases\nprint(highest_Power_of_2(10))   # Expected output: 8\nprint(highest_Power_of_2(19))   # Expected output: 16\nprint(highest_Power_of_2(32))   # Expected output: 32",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        result = [2, 1]\n        for i in range(2, n + 1):\n            next_value = result[i - 1] + result[i - 2]\n            result.append(next_value)\n        return result[n]\n\n# Test cases to verify the correctness of the function\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_string(lst, prefix):\n    return [prefix + str(item) for item in lst]",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def convert_list_dictionary(keys, values, dict_list):\n    result = [{keys[i]: value} for i, value in enumerate(values)]\n    return [result[i:i+len(dict_list)] for i in range(0, len(result), len(dict_list))]\n\n# Test cases\nprint(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\nprint(convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"], [\"python\",\"program\",\"language\",\"programs\"], [100,200,300,400]))\nprint(convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"], [\"java\",\"C\",\"C++\",\"DBMS\"], [10,20,30,40]))",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_max_sum(n):\n    \"\"\"\n    Calculate the maximum sum of the function call f(x) for all divisors x of n.\n\n    Parameters:\n    n (int): The number to calculate the maximum sum for its divisors.\n\n    Returns:\n    int: The maximum sum possible.\n    \"\"\"\n\n    def helper(memo, n, d):\n        if memo[d] != -1:\n            return memo[d]\n        \n        res = helper(memo, n // d, d)\n        memo[d] = n * m(d, n // d) + res\n        return memo[d]\n\n    m = lambda x, y: (x + y) % (10 ** 9 + 7)\n    memo = [-1] * (n + 1)\n\n    return helper(memo, n, n)\n\n\n# Check function with provided data points\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length_list(lst):\n    return max([(len(x), x) for x in lst], key=lambda item:item[0])[1]",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(test_tuple):\n    # Check if all elements in the tuple are unique\n    return len(test_tuple) == len(set(test_tuple))\n\n# Test cases\nprint(check_distinct((1, 4, 5, 6, 1, 4)))  # Expected output: False\nprint(check_distinct((1, 4, 5, 6)))        # Expected output: True\nprint(check_distinct((2, 3, 4, 5, 6)))     # Expected output: True",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find and return the first non-repeating character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 2 failed"
    ],
    "generated_code": "import re\n\ndef check_char(input_str):\n    \"\"\"\n    Check if the input string is valid based on the condition that it starts and ends with the same character.\n    \n    Parameters:\n    input_str (str): The string to be checked\n    \n    Returns:\n    str: 'Valid' if the string meets the criteria, otherwise 'Invalid'\n    \"\"\"\n    pattern = r\"^(.).*\\1$\"\n    match = re.match(pattern, input_str)\n    return 'Valid' if match else 'Invalid'\n\n# Test cases to verify the correctness of the solution\nassert check_char(\"abba\") == \"Valid\", \"Test case 1 failed\"\nassert check_char(\"a\") == \"Valid\", \"Test case 2 failed\"\nassert check_char(\"abcd\") == \"Invalid\", \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_numbers(num1, num2, num3):\n    return sorted([num1, num2, num3])[1]\n\n# print(median_numbers(25,55,65)) # Output should be 55.0\n# print(median_numbers(20,10,30))   # Output should be 20.0\n# print(median_numbers(15,45,75))   # Output should be 45.0",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def sum_of_digits(lst):\n    return sum(map(sum, lst))\n\n# Test cases\nprint(sum_of_digits([10,2,56]))  # Output: 14\nprint(sum_of_digits([[10,20,4,5,'b',70,'a']]))  # Output: 19\nprint(sum_of_digits([10,20,-4,5,-70]))  # Output: 19",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def bitwise_xor(tuple_a, tuple_b):\n    # Convert each tuple into binary strings and then XOR them\n    result = [bin(a ^ b)[2:] for a, b in zip(tuple_a, tuple_b)]\n    # Join all binary strings with commas and convert back to integers\n    return map(int, \",\".join(result).split(\",\"))",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef extract_freq(lst):\n    # Extracting unique tuples and counting their frequencies\n    freq = Counter(tuple(x) for x in lst)\n    return len(freq)\n\n# Test cases\nprint(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]))  # Expected output: 3\nprint(extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)]))  # Expected output: 4\nprint(extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)]))  # Expected output: 4",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_nested_tuples(tup1, tup2):\n    # Convert each inner tuple into a list for easier element-wise addition\n    result = [list(x) + list(y) for x, y in zip(tup1, tup2)]\n    return tuple(result)\n\n# Test cases\nprint(add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))  # Expected output: ((7, 10), (7, 14), (3, 10), (8, 13))\nprint(add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))))  # Expected output: ((9, 12), (9, 16), (5, 12), (10, 15))\nprint(add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))))  # Expected output: ((11, 14), (11, 18), (7, 14), (12, 17))",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - local variable 'n' referenced before assignment",
      "Test 2: FAIL - local variable 'n' referenced before assignment",
      "Test 3: FAIL - local variable 'n' referenced before assignment"
    ],
    "generated_code": "def ncr_modp(n, r, p):\n    def modInverse(x, m):\n        \"\"\"Compute modular inverse\"\"\"\n        x0, y0, x1, y1 = 1, 0, 0, 1\n        while m:\n            q = n // m\n            m, n = n % m, m\n            x0, x1 = x1, x0 - q * x1\n            y0, y1 = y1, y0 - q * y1\n        return x1 + int(p == 0)\n\n    if r < 0 or r > n:\n        raise ValueError(\"r must be between 0 and n\")\n    \n    result = 1\n    for i in range(r):\n        result = (result * ((n - i) % p)) % p\n    \n    return pow(result, modInverse(r, p), p)",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    # Regular expression for validating a URL\n    regex = r'^(http|https)://(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$'\n    # Compile the ReGex\n    pattern = re.compile(regex)\n    # If the string is empty\n    if url == \"\" :\n        return False\n    elif re.search(pattern, url) != None:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_valid_URL(\"https://www.google.com\")) # Expected output: True\nprint(is_valid_URL(\"https:/www.gmail.com\")) # Expected output: False\nprint(is_valid_URL(\"https:// www.redit.com\")) # Expected output: False",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(a, b):\n    # Compare and return the smaller number\n    if a < b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_tuplex(tup, elem):\n    return elem in tup",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(number):\n    if number % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Test Cases\nprint(find_Parity(12))  # Expected output: Even Parity\nprint(find_Parity(7))   # Expected output: Odd Parity\nprint(find_Parity(10))  # Expected output: Even Parity",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rearrange_bigger(n):\n    nums = list(map(int, str(n)))\n    n -= 1  # To handle edge case when n is at its maximum value\n    \n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                break\n                \n    result = int(''.join(map(str, nums)))\n    \n    return result * (n + 1) if n > 0 else -1",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def k_smallest_pairs(A, B, k):\n    # Sort both lists to facilitate finding the smallest pairs\n    A.sort()\n    B.sort()\n\n    result = []\n    i, j = 0, 0\n    while i < len(A) and j < len(B) and len(result) < k:\n        if A[i] + B[j] <= A[min(i+1, len(A)-1)] + B[min(j+1, len(B)-1)]:\n            result.append((A[i], B[j]))\n            j += 1\n        else:\n            i += 1\n\n    return result[:k]",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unhashable type: 'list'",
      "Test 2: FAIL - unhashable type: 'list'",
      "Test 3: FAIL - unhashable type: 'list'"
    ],
    "generated_code": "from typing import List, Tuple\nimport math\n\ndef min_product_tuple(lst: List[Tuple[int]]) -> int:\n    \"\"\"\n    Finds the minimum product among all unique pairs in the given list.\n    \n    Parameters:\n    lst (List[Tuple[int]]): A list containing integer tuples.\n    \n    Returns:\n    int: The minimum product of any two integers in the list.\n    \"\"\"\n    return min(a * b for a, b in set(map(lambda x: sorted(x), map(tuple, lst)))) if lst else 0",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object has no attribute 'isdigit'",
      "Test 2: FAIL - 'int' object has no attribute 'isdigit'",
      "Test 3: FAIL - 'int' object has no attribute 'isdigit'"
    ],
    "generated_code": "def min_val(lst):\n    # Convert all elements in the list to their integer equivalents for comparison.\n    lst_int = [int(i) if i.isdigit() else i for i in lst]\n    return min(lst_int)",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    # Use regular expression to replace underscores with spaces and then capitalize each word except the first one\n    camel_case_str = re.sub(r'_(.)', lambda x: x.group(1).upper(), snake_str)\n    return camel_case_str.title().replace(' ', '')\n\n# Example usage:\nprint(snake_to_camel('android_tv'))  # Output: AndroidTv\nprint(snake_to_camel('google_pixel'))  # Output: GooglePixel\nprint(snake_to_camel('apple_watch'))  # Output: AppleWatch",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(numbers):\n    # Filter out odd numbers and return the result as a new list\n    return [num for num in numbers if num % 2 == 0]\n\n# Test cases\nprint(remove_odd([1,2,3]))  # Output: [2]\nprint(remove_odd([2,4,6]))  # Output: [2,4,6]\nprint(remove_odd([10,20,3]))  # Output: [10,20]",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_nth_element(tuples_list, n):\n    return [element[n] for element in tuples_list]\n\n# Test cases\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)) # Output: ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)) # Output: [99, 96, 94, 98]\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)) # Output: [98, 97, 91, 94]",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(seq1, seq2):\n    # Check if any element of seq1 is present in seq2\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_Product(arr):\n    arr.sort()\n    n = len(arr)\n    if n < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    # The maximum product can be either from the two largest positive numbers or from the two smallest negative numbers\n    max_product = max(arr[n-1] * arr[n-2], arr[0] * arr[1])\n    return max_product\n\n# Test cases\nprint(max_Product([1,2,3,4,7,0,8,4]))  # Expected output: 56\nprint(max_Product([0,-1,-2,-4,5,0,-6]))  # Expected output: -20\nprint(max_Product([1,2,3]))  # Expected output: 6",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def breakSum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max((n - 1) + breakSum(n // 3), (n - 2) + breakSum(n // 3))\n\n# Test cases\nassert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def group_tuples(tuples_list):\n    # Initialize variables\n    result = []\n    if not tuples_list:\n        return result\n    \n    # Sort tuples based on the first element\n    sorted_tuples = sorted(tuples_list)\n    \n    # Find unique first elements and their counts\n    unique_first_elements = {}\n    for tup in sorted_tuples:\n        if len(tup) > 0:\n            key = tup[0]\n            if key not in unique_first_elements:\n                unique_first_elements[key] = [tup]\n            else:\n                unique_first_elements[key].append(tup)\n    \n    # Group duplicates based on the first element\n    grouped_duplicates = {key: val for key, val in unique_first_elements.items() if len(val) > 1}\n    \n    # Append each duplicate with its last occurrence's second element\n    for dup in grouped_duplicates.values():\n        last_element = dup[-1][1]\n        new_tuple = ()\n        for i in range(len(dup)):\n            new_tuple += (dup[i][0],), \n        result.append(new_tuple + (last_element,))\n    \n    return result\n\n# Test cases\nprint(group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]))  # Should print [('x', 'y', 'z'), ('w', 't')]\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]))  # Should print [('a', 'b', 'c'), ('d', 'e')]\nprint(group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]))  # Should print [('f', 'g', 'g'), ('h', 'i')]",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max' is not defined",
      "Test 2: FAIL - name 'Find_Max' is not defined",
      "Test 3: FAIL - name 'Find_Max' is not defined"
    ],
    "generated_code": "def find_max(sublist):\n    # Initialize variables to store the max sublist and its length\n    current_max = []\n    max_length = 0\n    \n    for s in sublist:\n        if len(s) > max_length:\n            max_length = len(s)\n            current_max = s\n            \n    return current_max\n\n# Test cases\nprint(find_max([['A'], ['A', 'B'], ['A', 'B', 'C']]))  # Should return ['A', 'B', 'C']\nprint(find_max([[1], [1, 2], [1, 2, 3]]))              # Should return [1, 2, 3]\nprint(find_max([[1, 1], [1, 2, 3], [1, 5, 6, 1]]))     # Should return [1, 5, 6, 1]",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def round_and_sum(numbers):\n    # Round each element in the list\n    rounded_numbers = [round(num) for num in numbers]\n    # Calculate the sum of the rounded numbers\n    total_sum = sum(rounded_numbers)\n    # Multiply the total sum by the length of the original list\n    result = total_sum * len(numbers)\n    return result",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'cube_Sum' is not defined",
      "Test 2: FAIL - name 'cube_Sum' is not defined",
      "Test 3: FAIL - name 'cube_Sum' is not defined"
    ],
    "generated_code": "def cube_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += (2 * i) ** 3\n    return total",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_tuple(input_tuple, delimiter=' '):\n    # Concatenate elements of the tuple with the given delimiter and convert back to string type if necessary.\n    result = delimiter.join(map(str, input_tuple))\n    return result\n\n\n# Test cases\nprint(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")))  # Expected output: 'ID-is-4-UTS'\nprint(concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\")))  # Expected output: 'QWE-is-4-RTY'\nprint(concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\")))  # Expected output: 'ZEN-is-4-OP'",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\n    total = sum(i**3 for i in range(1, n+1))\n    return total / n",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def get_maxgold(matrix, m, n):\n    \"\"\"\n    Calculate the maximum gold that can be collected from an MxN grid of mines.\n    \n    :param matrix: A list of lists representing the grid where each element is the amount of gold at that position.\n    :param m: The number of rows in the matrix.\n    :param n: The number of columns in the matrix.\n    :return: The maximum amount of gold that can be collected.\n    \"\"\"\n    # Initialize DP table with zeros\n    dp = [[0] * n for _ in range(m)]\n    \n    # Base case: starting point\n    dp[0][0] = matrix[0][0]\n    \n    # Fill up the first row and column\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n        \n    # Fill rest of the table\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n            \n    return dp[m-1][n-1]\n\n# Check function with provided data points\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4) == 16\nassert get_maxgold([[10,20],[30,40]],2,2) == 70\nassert get_maxgold([[4,9],[3,7]],2,2) == 13",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_rear(strings_tuple):\n    # Extracting and returning the last character from each string in the tuple\n    return [string[-1] for string in strings_tuple]\n\n# Test cases\nassert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's'], \"Test case 1 failed\"\nassert extract_rear(('Avenge', 'for', 'People')) == ['e', 'r', 'e'], \"Test case 2 failed\"\nassert extract_rear(('Gotta', 'get', 'go')) == ['a', 't', 'o'], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_in_list(lst, elem):\n    return sum(1 for sublist in lst if elem in sublist)",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "filter_oddnumbers = lambda x: list(filter(lambda y: y % 2 != 0, x))",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef change_date_format(date_str):\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, date_str)\n    if match:\n        year, month, day = map(int, match.groups())\n        formatted_date = f\"{day}-{month}-{year}\"\n        return formatted_date\n    else:\n        raise ValueError(\"Invalid date format\")\n\n# Test cases\nprint(change_date_format(\"2026-01-02\"))  # Output: \"02-01-2026\"\nprint(change_date_format(\"2020-11-13\"))  # Output: \"13-11-2020\"\nprint(change_date_format(\"2021-04-26\"))  # Output: \"26-04-2021\"",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            arr[j] = temp\n        gap //= 2\n\n    return arr\n\n# Test cases\nprint(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]))  # Expected output: [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nprint(shell_sort([24, 22, 39, 34, 87, 73, 68]))  # Expected output: [22, 24, 34, 39, 68, 73, 87]\nprint(shell_sort([32, 30, 16, 96, 82, 83, 74]))  # Expected output: [16, 30, 32, 74, 82, 83, 96]",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def and_tuples(tup1, tup2):\n    # Elementwise multiplication of tuples\n    result = tuple(a * b for a, b in zip(tup1, tup2))\n    return result\n\n# Test cases to verify the correctness of the solution\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_directrix(a,b,c):\n    # The formula for the directrix of a parabola y^2 = 4ax is y = -a\n    return -(a)",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_element(list1, list2):\n    return len(set(list1) & set(list2)) > 0",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_trapezium(a, b, c):\n    # Calculate the average of two ends to get the median\n    return (a + b) / 2",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_greater(numbers, target_number):\n    \"\"\"\n    Check if the entered number is greater than each element in the list.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    target_number (int): The number to compare against the list's elements.\n    \n    Returns:\n    str: \"Yes, entered number is greater than those in the array\" or \"No, entered number is less than those in the array\".\n    \"\"\"\n    for num in numbers:\n        if num >= target_number:\n            return 'No, entered number is less than those in the array'\n    return 'Yes, the entered number is greater than those in the array'\n\n# Test Cases\nprint(check_greater([1, 2, 3, 4, 5], 4)) # Expected output: No, entered number is less than those in the array\nprint(check_greater([2, 3, 4, 5, 6], 8)) # Expected output: Yes, the entered number is greater than those in the array\nprint(check_greater([9, 7, 4, 8, 6, 1], 11)) # Expected output: Yes, the entered number is greater than those in the array",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def text_match_one(text):\n    if not (text.startswith('a') and text[1:].endswith('b')):\n        return 'Not matched!'\n    else:\n        return 'Found a match!'\n\n# Test cases to verify the correctness of the solution\nassert text_match_one(\"ac\") == \"Not matched!\"\nassert text_match_one(\"dc\") == \"Not matched!\"\nassert text_match_one(\"abba\") == \"Found a match!\"",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit(number):\n    # The last digit of the number is simply the remainder when divided by 10\n    return abs(number % 10)",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_nos(nums):\n    # Initialize an empty list to store negative numbers\n    negatives = []\n    \n    # Iterate through each number in the input list\n    for num in nums:\n        # Check if the number is negative and append it to the negatives list\n        if num < 0:\n            negatives.append(num)\n    \n    # Return the list of negative numbers\n    return negatives\n\n# Test cases\nprint(neg_nos([-1,4,5,-6]))  # Expected output: [-1, -6]\nprint(neg_nos([-1,-2,3,4]))  # Expected output: [-1, -2]\nprint(neg_nos([-7,-6,8,9]))  # Expected output: [-7, -6]",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(input_str):\n    return ''.join([char for char in input_str if ord(char) % 2 == 0])",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_bidirectional(tuples):\n    seen = set()\n    result = 0\n    \n    for t in tuples:\n        reverse_t = tuple(reversed(t))\n        if reverse_t in seen:\n            continue\n        seen.add(t)\n        seen.add(reverse_t)\n        result += 1\n        \n    return str(result)\n\n# Test cases\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])) # Output: \"3\"\nprint(count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])) # Output: \"2\"\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])) # Output: \"4\"",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(lst):\n    # Convert each number in the list to its string representation and concatenate them.\n    return int(''.join(str(num) for num in lst))\n\n# Test cases\nprint(multiple_to_single([11, 33, 50]))  # Expected output: 113350\nprint(multiple_to_single([-1, 2, 3, 4, 5, 6]))  # Expected output: -123456\nprint(multiple_to_single([10, 15, 20, 25]))  # Expected output: 10152025",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_adverb_position(sentence):\n    import re\n    \n    # Regular expression to match adverbs ending with \"ly\"\n    pattern = r'\\b([a-zA-Z]+ly)\\b'\n    \n    matches = re.finditer(pattern, sentence)\n    positions = [(match.start(), match.group(1), match.group()) for match in matches]\n    \n    return positions",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(side_length):\n    \"\"\"\n    Calculate the surface area of a cube.\n    \n    Parameters:\n    side_length (int): The length of one edge of the cube.\n    \n    Returns:\n    int: The total surface area of the cube.\n    \"\"\"\n    return 6 * (side_length ** 2)",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def positive_count(nums):\n    return sum(1 for num in nums if num > 0) / len(nums)",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_neg(nums):\n    # Initialize variable to store the maximum negative value found\n    max_neg = float('-inf')\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the current number is negative and greater than the current maximum negative value\n        if num < 0 and num > max_neg:\n            max_neg = num\n            \n    return max_neg",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def trim_tuple(test_list, k):\n    result = []\n    for t in test_list:\n        new_t = ()\n        for i in range(len(t)):\n            if i == 0 and len(new_t) <= k:\n                new_t += (t[i],)\n            else:\n                break\n        result.append(new_t)\n    return result",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: can't multiply sequence by non-int of type 'tuple'"
    ],
    "generated_code": "def index_multiplication(t1, t2):\n    result = [(a * b) for a, b in zip(t1, t2)]\n    return tuple(result)\n\n# Test cases\nprint(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\nprint(index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))))\nprint(index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))))",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Occurrence(lst, query_tuple):\n    occurrence_count = {}\n    \n    # Count occurrences of each element in lst\n    for elem in lst:\n        if elem in occurrence_count:\n            occurrence_count[elem] += 1\n        else:\n            occurrence_count[elem] = 1\n            \n    total_occurrences = sum(occurrence_count.get(element, 0) for element in query_tuple)\n    return total_occurrences",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "cube_nums = lambda nums: [x**3 for x in nums]",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_sum(n):\n    # Initialize the first two Pern numbers\n    a, b = 0, 3\n    \n    # Loop from 2 to n\n    for i in range(2, n + 1):\n        # Calculate next Pern number and store it back into 'a'\n        c = a + b\n        # Update 'b' to be the previous value of 'c', which is now 'a+b'\n        a = b\n        # Update 'b' to be the previously calculated next Peron number\n        b = c\n    \n    # Return the last calculated Pern number as the sum\n    return b",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the lengths of all three sides of the triangle\n    side1 = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n    side2 = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    side3 = ((x2 - x3)**2 + (y2 - y3)**2)**0.5\n    \n    # Check for non-negative side lengths and sum less than 2*sum_of_smallest_sides\n    return side1 >= 0 and side2 >= 0 and side3 >= 0 and (side1 + side2 <= 2 * side3)",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_string(str_list, n):\n    # Extract strings of length exactly n from str_list and return them as a new list\n    return [s for s in str_list if len(s) == n]",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_whitespaces(input_string):\n    \"\"\"\n    This function takes a string as input and returns it with all whitespace characters removed.\n    \n    :param input_string: str - The input string containing spaces which need to be removed.\n    :return: str - A new string with all spaces removed.\n    \"\"\"\n    # Using regular expression to replace all whitespace characters (\\s) with an empty string\n    no_whitespace = re.sub(r'\\s+', '', input_string)\n    return no_whitespace",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def loss_amount(given_amount, reference_amount):\n    # Calculate the difference between given_amount and reference_amount\n    diff = given_amount - reference_amount\n    \n    # If the difference is less than or equal to zero, there's no loss; otherwise, calculate the loss\n    if diff <= 0:\n        return None\n    else:\n        return abs(diff)\n\n# Test cases\nprint(loss_amount(1500, 1200))  # Expected output: None\nprint(loss_amount(100, 200))    # Expected output: 100\nprint(loss_amount(2000, 5000))  # Expected output: 3000",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sumofFactors(num):\n    # Initialize result\n    result = 0\n    \n    # Include num itself as factor\n    result += num\n    \n    # Check each number from 1 to sqrt(num)\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            # If both divisors are different, add them to the result\n            if i * i != num:\n                result += i + num // i\n            \n            # Otherwise, add just one of the divisors\n            else:\n                result += i\n    \n    return result",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumb_number(month):\n    \"\"\"\n    This function checks if the provided month number has 31 days.\n    \n    Parameters:\n    month (int): The month number from 1 to 12.\n    \n    Returns:\n    bool: True if the month has 31 days, False otherwise.\n    \"\"\"\n    # Check if the month is valid\n    if not isinstance(month, int) or month < 1 or month > 12:\n        return False\n    \n    # Months with 31 days\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Return True for months with 31 days and False otherwise\n    return month in thirty_one_days_months",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: unmatched ')'"
    ],
    "generated_code": "def Find_Min(lst):\n    # Initialize the sublist with maximum possible values for min and max elements.\n    # This ensures the first element of lst is always chosen if multiple sublists have same length.\n    min_list = [float('inf'), float('-inf')]\n    \n    for i in range(len(lst)):\n        current_min = float('inf')\n        current_max = float('-inf')\n        \n        for j in range(i, len(lst), len(min_list)):\n            if j >= len(lst): break\n            \n            start = j * len(min_list) + min_list[0] if j > 0 else min_list[0]\n            end = j * len(min_list) + min_list[1] if j < len(lst)-1 else min_list[1]\n            \n            for k in range(start+1, end+1):\n                current_min = min(current_min, lst[j][k])\n                current_max = max(current_max, lst[j][k])\n                \n            if len(lst[i:j+1]) == 1:\n                if current_min < min_list[0]: \n                    min_list[0], min_list[1] = current_min, current_max\n                elif current_min == min_list[0]:\n                    min_list[1] = max(min_list[1], current_max)\n            else:\n                min_list = [current_min, current_max]\n    \n    return lst[min_list.index(min(min_list))]\n\n# Test cases\nprint(Find_Min([[1],[1,2],[1,2,3]]))  # Should print [1]\nprint(Find_Min([[1,1],[1,1,1],[1,2,7,8]]))  # Should print [1,1]\nprint(Find_Min([['x'],['x','y'],['x','y','z']])))  # Should print ['x']",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length, width):\n    return length * width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_uppercase(input_string):\n    # Remove uppercase characters in the input_string\n    result = re.sub(r'[A-Z]', '', input_string)\n    return result\n\n# Test cases to verify the correctness of the solution\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos', \"Test case 1 failed\"\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo', \"Test case 2 failed\"\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    return [sublist[0] for sublist in lst]\n\n# Test cases\nprint(extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))  # Output: [1, 3, 6]\nprint(extract([[1,2,3],[4, 5]]))                  # Output: [1, 4]\nprint(extract([[9,8,1],[1,2]]))                   # Output: [9, 1]",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(str):\n    # Initialize counter for uppercase characters\n    upper_count = 0\n    \n    # Iterate through each character in the string\n    for char in str:\n        # Check if the character is an uppercase letter and increment the counter\n        if 'A' <= char <= 'Z':\n            upper_count += 1\n            \n    # Return the total count of uppercase letters\n    return upper_count",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import chain, combinations\n\ndef combinations_list(lst):\n    return [list(i) for i in chain.from_iterable(combinations(lst, r) for r in range(len(lst)+1))]",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_subarray_product(arr):\n    if not arr:\n        raise ValueError(\"Array cannot be empty\")\n\n    max_p = current_max = min_p = current_min = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            max_p, current_max, current_min = current_max, 0, current_min\n            continue\n        \n        temp_max_p = max(current_max * arr[i], current_min * arr[i], arr[i])\n        max_p = max(temp_max_p, current_max)\n        \n        temp_min_p = min(current_max * arr[i], current_min * arr[i], arr[i])\n        current_min = min(temp_min_p, current_min)\n\n        current_max = max_p\n        current_min = min_p\n\n    return max(max_p, current_min)\n\n# Test cases\nprint(max_subarray_product([1, -2, -3, 0, 7, -8, -2])) # Expected output: 112\nprint(max_subarray_product([6, -3, -10, 0, 2])) # Expected output: 180\nprint(max_subarray_product([-2, -40, 0, -2, -3])) # Expected output: 80",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_value(dict_obj, value):\n    # Check if all values in the dictionary are equal to the specified value\n    return len(set(dict_obj.values())) == 1",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(input_dict):\n    # Filter out keys with values equal to None and create a new dictionary\n    return {key: value for key, value in input_dict.items() if value is not None}",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_peak(arr, n): \n    low = 0\n    high = len(arr) - 1\n  \n    while(low <= high): \n        mid = int((low + high)/2) \n  \n        # Check if mid is greater than its neighbors\n        if ((mid == 0 or arr[mid-1] <= arr[mid]) and  \n           (mid == n-1 or arr[mid+1] <= arr[mid])): \n            return arr[mid] \n          \n        # If the middle element is greater than the next element, then the peak lies on left side \n        elif(mid > 0 and arr[mid-1] > arr[mid]): \n            high = mid - 1\n  \n        else: # Else the peak lies on right side \n            low = mid + 1\n  \n    return -1 \n\n# Test the function with provided data points\nprint(find_peak([1, 3, 20, 4, 1, 0], 6))   # Expected output: 2\nprint(find_peak([2, 3, 4, 5, 6], 5))       # Expected output: 4\nprint(find_peak([8, 9, 11, 12, 14, 15], 6)) # Expected output: 5",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_to_Octal(decimal_num):\n    if decimal_num == 0:\n        return \"0\"\n    \n    octal = \"\"\n    while decimal_num > 0:\n        octal = str(decimal_num % 8) + octal\n        decimal_num //= 8\n    \n    return octal",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef max_product(nums: List[int], k: int) -> int:\n    # Initialize two variables to store the largest and smallest elements in the list\n    largest = -math.inf\n    smallest = math.inf\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    # Calculate the product using the formula for combinations of two values from the sorted list\n    # The formula is derived from the property that maximizing the product means selecting\n    # the largest value as many times as possible and pairing it with the smallest remaining value.\n    result = (largest ** k) * ((smallest // 2) ** (k - 1))\n    \n    return result",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef max_profit(prices: List[int], k: int) -> int:\n    if not prices or k <= 0:\n        return 0\n    \n    n = len(prices)\n    dp = [[0] * n for _ in range(k + 1)]\n    \n    for i in range(1, k + 1):\n        buy = float('-inf')\n        sell = 0\n        \n        for j in range(n):\n            # Update buy and sell values considering previous states\n            buy = max(buy, sell - prices[j])\n            sell = max(sell, buy + prices[j])\n        \n        dp[i][j] = sell\n    \n    return dp[k][-1]\n\n# Test cases\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3))  # Expected output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2))      # Expected output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2))           # Expected output: 2",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_pairwise(tup):\n    result = []\n    for i in range(len(tup)):\n        if i % 2 == 0:\n            result.append(sum(tup[i:i+2]))\n    return tuple(result)\n\n# Test cases\nprint(add_pairwise((1, 5, 7, 8, 10))) # Expected output: (6, 12, 15, 18)\nprint(add_pairwise((2, 6, 8, 9, 11))) # Expected output: (8, 14, 17, 20)\nprint(add_pairwise((3, 7, 9, 10, 12))) # Expected output: (10, 16, 19, 22)",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_remainder(arr, n, m):\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = (result * arr[i]) % m\n    return result",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Consecutive(arr):\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if abs(arr[i] - arr[i + 1]) != 1:\n            return False\n    return True",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_intersection(list1, list2):\n    # Convert each list into a set for O(1) average time complexity lookups.\n    set1 = set(tuple(x) for x in list1)\n    set2 = set(tuple(x) for x in list2)\n\n    # Find common tuples between both sets and convert them back to lists if necessary.\n    result = {tuple(sorted(a)) for a in set1 & set2}\n\n    # Return as a set of tuples if desired.\n    return result if len(result) != 1 else [list(result)[0]]\n\n# Test cases provided in the question can be used to verify the correctness of the solution.\nprint(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\nprint(tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]))\nprint(tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]))",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_counter(counter):\n    # Sort the dictionary items by their values in descending order.\n    sorted_items = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Return their sum\n    return max_val + min_val",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_lower(s):\n    # Convert the string to lowercase and compare with original string\n    return s.lower() == s",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(input_string):\n    # Remove all lowercase letters using regex\n    return re.sub('[a-z]', '', input_string)\n\n# Test cases\nprint(remove_lowercase(\"PYTHOn\"))  # Expected output: 'PYTH'\nprint(remove_lowercase(\"FIND\"))     # Expected output: 'FID'\nprint(remove_lowercase(\"STRinG\"))   # Expected output: 'STRG'",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(n):\n    # Convert the integer to string and get its first character\n    return int(str(abs(n))[0])\n\n# Test cases\nprint(first_Digit(123))   # Expected output: 1\nprint(first_Digit(456))   # Expected output: 4\nprint(first_Digit(-12))   # Expected output: -1",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(input_string):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the maximum occurrence\n    max_occurrence = max(char_count.values())\n    \n    # Find and return the character with the maximum occurrence\n    for char, count in char_count.items():\n        if count == max_occurrence:\n            return char",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_subset_sum(nums, target, current_sum=0):\n    for i in range(len(nums)):\n        if nums[i] > target:\n            break\n        remainder = target - nums[i]\n        if remainder == current_sum and len(set(nums[:i+1])) < len(nums):\n            return True\n        elif current_sum + nums[i] <= target:\n            if is_subset_sum(nums[i+1:], target, current_sum + nums[i]):\n                return True\n    return False",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef match(s):\n    # Use regular expression to search for sequences starting with an uppercase letter \n    # followed by lowercase letters\n    pattern = '[A-Z][a-z]+'\n    if re.search(pattern, s):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(match(\"Geeks\"))   # Expected output: Yes\nprint(match(\"geeksforGeeks\"))   # Expected output: Yes\nprint(match(\"geeks\"))   # Expected output: No",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    n = 1\n    while True:\n        if len(str(factorial(n))) % x == 0:\n            return n\n        n += 1\n\ndef factorial(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * factorial(num - 1)",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_matching_tuple(tup1, tup2):\n    # Convert each tuple into a set for faster lookup and comparison\n    s1 = {x for x in tup1}\n    s2 = {x for x in tup2}\n    \n    # Return new tuples with all elements not present in both sets\n    return tuple(x for x in tup1 if x not in s2) + tuple(x for x in tup2 if x not in s1)\n\n# Test cases\nprint(remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]))  # Should print: [('you', '?')]\nprint(remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]))  # Should print: [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nprint(remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]))  # Should print: [('Its', 'been'), ('day', 'without')])",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - largest_palindrome() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - largest_palindrome() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - largest_palindrome() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef largest_palindrome(arr: List[int]) -> int:\n    def is_palindrome(n: int) -> bool:\n        \"\"\"Check if the given number is a palindrome.\"\"\"\n        return str(n) == str(n)[::-1]\n    \n    max_palindrome = -float('inf')\n    for num in arr:\n        if is_palindrome(num) and num > max_palindrome:\n            max_palindrome = num\n    \n    return max_palindrome",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from math import comb\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute the binomial probability P(X=k) where X follows a binomial distribution with n trials and success probability p.\n    \n    Parameters:\n    - n (int): Number of trials\n    - k (int): Target number of successes\n    - p (float): Probability of success on each trial\n    \n    Returns:\n    float: Binomial probability P(X=k)\n    \"\"\"\n    # Calculate the binomial coefficient C(n, k), which is equivalent to fact(n) / (fact(k) * fact(n-k))\n    def factorial(x):\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n    \n    # Calculate combinations using factorials\n    combination = factorial(n) // (factorial(k) * factorial(n - k))\n    \n    # Return the product of combination and the desired outcome probability\n    return combination * (p ** k) * ((1-p) ** (n - k))\n\n# Test cases\nprint(binomial_probability(10, 5, 1.0/3))  # Expected output: ~0.13656454808718185\nprint(binomial_probability(11, 6, 2.0/4))  # Expected output: ~0.2255859375\nprint(binomial_probability(12, 7, 3.0/5))  # Expected output: ~0.227030335488",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuples_list):\n    # Sort the list of tuples based on the second item in each inner tuple.\n    sorted_tuples = sorted(tuples_list, key=lambda x: x[1])\n    return sorted_tuples\n\n# Test cases\nprint(sort_tuple([(1, 3), (3, 2), (2, 1)]))  # Expected output: [(2, 1), (3, 2), (1, 3)]\nprint(sort_tuple([(2, 4), (3, 3), (1, 1)]))  # Expected output: [(1, 1), (3, 3), (2, 4)]\nprint(sort_tuple([(3, 9), (6, 7), (4, 3)]))  # Expected output: [(4, 3), (6, 7), (3, 9)]",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef area_pentagon(side_length):\n    \"\"\"\n    Calculate the area of a regular pentagon with side length 'side_length'.\n    \n    Args:\n    side_length (float): The length of each side of the pentagon.\n    \n    Returns:\n    float: The area of the pentagon.\n    \"\"\"\n    # Formula for the area of a regular pentagon: (sqrt(5 * (5 + sqrt(5))) / 4) * side^2\n    return ((math.sqrt(5) * (5 + math.sqrt(5)) / 4) * side_length ** 2)\n\n# Test the function with provided data points\nprint(area_pentagon(5))\nprint(area_pentagon(10))\nprint(area_pentagon(15))",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Largest(arr):\n    # Find the maximum value in the array\n    max_value = max(arr)\n    \n    # Count how many times the maximum value appears in the array\n    count = arr.count(max_value)\n    \n    # Return the count\n    return count\n\n# Test cases\nprint(frequency_Of_Largest([1,2,3,4,4]))  # Expected output: 2\nprint(frequency_Of_Largest([5,6,5]))      # Expected output: 1\nprint(frequency_Of_Largest([2,7,7,7]))    # Expected output: 3",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_symmetric(lst):\n    symmetric_pairs = set()\n    \n    for pair in lst:\n        first, second = pair[0], pair[1]\n        \n        if first > second:\n            continue\n        \n        if first == second:\n            symmetric_pairs.add((second, first))\n        elif (first, second) not in symmetric_pairs and (second, first) not in symmetric_pairs:\n            symmetric_pairs.add(pair)\n            \n    return symmetric_pairs\n\n# Test cases\nprint(extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)])) # Expected output: {8, 9}, {6, 7}\nprint(extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)])) # Expected output: {9, 10}, {7, 8}\nprint(extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)])) # Expected output: {8, 9}, {10, 11}",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_gp(a, r, n):\n    # Calculate the sum of GP series using formula: S = a * ((r^n - 1) / (r - 1))\n    return a * ((r**n - 1) // (r - 1))",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return False",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def calculate_polygons(x_start, y_start, n_x, n_y, m):\n    polygons = []\n    for i in range(n_y):\n        row = []\n        for j in range(m):\n            x = float(i * n_x + j)\n            y = float(j * n_y + n_x // 2 - n_x // 2 * i)\n            if i % 2 == 0:\n                x -= 2\n            else:\n                x += 2\n            if j < m // 2:\n                y -= n_y / 2\n            elif j > m // 2:\n                y += n_y / 2\n            row.append((x, y))\n        polygons.append(row)\n    return polygons\n\n\n# Test Cases\nprint(calculate_polygons(1, 1, 4, 4, 3))\nprint(calculate_polygons(5, 4, 7, 9, 8))\nprint(calculate_polygons(9, 6, 4, 3, 2))",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def binary_to_integer(binary_tuple):\n    # Convert each element in the tuple from binary string to decimal and sum them up.\n    return int(''.join(str(x) for x in binary_tuple), 2)",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(input_string):\n    # Using regular expression to find and replace lowercase letters with an empty string\n    result = re.sub('[a-z]', '', input_string)\n    return result",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    # Convert all elements in nums to negative values because we will use max-heap\n    # and convert it back to positive at the end.\n    for i in range(len(nums)):\n        if type(nums[i]) != int:\n            raise ValueError(\"All elements must be integers.\")\n    \n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, -num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Transform the heap back into a normal list with original signs\n    return [-heapq.heappop(min_heap) for _ in range(k)]\n\n# Example test cases\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3))  # Output: [14, 22, 25]\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2))   # Output: [14, 22]\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5))   # Output: [14, 22, 22, 25, 35]",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'surfacearea_cone' is not defined",
      "Test 2: FAIL - name 'surfacearea_cone' is not defined",
      "Test 3: FAIL - name 'surfacearea_cone' is not defined"
    ],
    "generated_code": "import math\n\ndef surface_area_of_cone(radius, slant_height):\n    \"\"\"\n    Calculates the surface area of a cone.\n    \n    Parameters:\n    radius (float): The radius of the base of the cone.\n    slant_height (float): The slant height of the cone.\n    \n    Returns:\n    float: The surface area of the cone.\n    \"\"\"\n    # Surface Area of a Cone formula: πr(r + l)\n    surface_area = math.pi * radius * (radius + slant_height)\n    return round(surface_area, 4)\n\n# Test cases\nprint(surface_area_of_cone(5, 12))  # Expected output: 282.7433\nprint(surface_area_of_cone(10, 15)) # Expected output: 880.5179\nprint(surface_area_of_cone(19, 17)) # Expected output: 2655.9239",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def gcd(a, b):\n    while(b):\n        a, b = b, a % b\n    return a",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef diameter_circle(radius):\n    \"\"\"\n    Calculate the diameter of a circle given its radius.\n    \n    Parameters:\n    radius (float): The radius of the circle.\n    \n    Returns:\n    float: The diameter of the circle.\n    \"\"\"\n    return 2 * radius",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(lst):\n    # Joining all elements in the list with spaces and then returning the result as a single string\n    return \" \".join(lst)\n\n# Test cases\nprint(concatenate_elements(['hello','there','have','a','rocky','day']))  # Expected output: '  hello there have a rocky day'\nprint(concatenate_elements(['Hi', 'there', 'How','are', 'you']))  # Expected output: '  Hi there How are you'\nprint(concatenate_elements(['Part', 'of', 'the','journey', 'is', 'end']))  # Expected output: '  Part of the journey is end'",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def num_comm_div(a, b):\n    # Initialize the minimum and maximum of the two numbers\n    min_num = max(a, b)\n    max_num = min(a, b)\n\n    # Iterate from the minimum number down to 1 to find the greatest common divisor\n    for i in range(min_num, 0, -1):\n        if max_num % i == 0 and min_num % i == 0:\n            return i\n\n# Test cases to verify the correctness of the function\nassert num_comm_div(2, 4) == 2\nassert num_comm_div(2, 8) == 2\nassert num_comm_div(12, 24) == 6",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(dividend, divisor):\n    return dividend % divisor",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef add_consecutive_nums(nums: List[int]) -> List[int]:\n    result = []\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if len(result) < 2 or num > result[-1] + 1:\n            result.append(num)\n        else:\n            result[-1] += num\n    return result",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Series' is not defined",
      "Test 2: FAIL - name 'sum_Of_Series' is not defined",
      "Test 3: FAIL - name 'sum_Of_Series' is not defined"
    ],
    "generated_code": "def sum_of_series(n):\n    # Initialize the total sum to 0\n    total_sum = 0\n    \n    # Iterate from 1 to n inclusive\n    for i in range(1, n + 1):\n        # Add the square of each number to the total sum\n        total_sum += i**3\n    \n    return total_sum",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_order(arr):\n    \"\"\"\n    This function takes an array as input and moves all zeros to the end of the array.\n    \"\"\"\n    non_zero_indices = []\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            non_zero_indices.append(i)\n    \n    for index in non_zero_indices:\n        arr[index] = 0\n    \n    return arr",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - permutation_coefficient() missing 1 required positional argument: 'k'",
      "Test 2: FAIL - permutation_coefficient() missing 1 required positional argument: 'k'",
      "Test 3: FAIL - permutation_coefficient() missing 1 required positional argument: 'k'"
    ],
    "generated_code": "def permutation_coefficient(p, n, k):\n    if not isinstance(p, int) or not isinstance(n, int) or not isinstance(k, int):\n        raise ValueError(\"All parameters must be integers.\")\n    \n    return factorial(n) // (factorial(n - k) * factorial(k))\n\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, num + 1):\n            result *= i\n        return result",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(word_list, delete_word_list):\n    # Create a new list with all elements except those in delete_word_list\n    return [word for word in word_list if word not in delete_word_list]",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def same_order(list1, list2):\n    # Sort both lists and compare them for equality\n    return sorted(list1) == sorted(list2)",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'average_Odd' is not defined",
      "Test 2: FAIL - name 'average_Odd' is not defined",
      "Test 3: FAIL - name 'average_Odd' is not defined"
    ],
    "generated_code": "def average_odd(x):\n    total = sum([i for i in range(1, x+1) if i % 2 != 0])\n    count = len([i for i in range(1, x+1) if i % 2 != 0])\n    avg = total / count if count > 0 else 0\n    return avg",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef no_of_subsequences(arr: List[int], target: int) -> int:\n    count = sum(1 for x in arr if x < target)\n    n = len(arr)\n    \n    # Calculate the prefix sums and use them to determine the number of valid subsequences\n    prefix_sum = [0]\n    for num in arr:\n        prefix_sum.append(prefix_sum[-1] + (num < target))\n    \n    dp = [[0] * (n+1) for _ in range(n)]\n    \n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            for k in range(j-i+1):\n                if j - k == n - i:\n                    dp[i][j] += prefix_sum[j+k] - prefix_sum[k-1]\n                else:\n                    dp[i][j] += dp[i-1][k] * prefix_sum[j+k] - dp[i-1][k-1] * prefix_sum[j+k-1]\n    \n    return dp[n][len(arr)]\n\n# Test cases\nprint(no_of_subsequences([1,2,3,4], 10))  # Expected output: 11\nprint(no_of_subsequences([4,8,7,2], 50))  # Expected output: 9\nprint(no_of_subsequences([5,6,7,8], 15))  # Expected output: 4",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 601,
    "problem_statement": "Write a function to find the longest chain which can be formed from the given set of pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_chain_length(pairs_list, n):\n    # Sort the list based on the second element of each pair in descending order\n    sorted_pairs = sorted(pairs_list, key=lambda x: x.second, reverse=True)\n    \n    dp = [1] * len(sorted_pairs)  # Initialize DP array with 1s\n    \n    for i in range(len(sorted_pairs)):\n        for j in range(i):\n            if sorted_pairs[i].first >= sorted_pairs[j].second:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Helper class to represent a pair of integers\nclass Pair:\n    def __init__(self, first, second):\n        self.first = first\n        self.second = second\n\n# Test cases\npairs_list_1 = [Pair(5, 24), Pair(15, 25), Pair(27, 40), Pair(50, 60)]\nprint(max_chain_length(pairs_list_1, 4))  # Expected output: 3\n\npairs_list_2 = [Pair(1, 2), Pair(3, 4), Pair(5, 6), Pair(7, 8)]\nprint(max_chain_length(pairs_list_2, 4))  # Expected output: 4\n\npairs_list_3 = [Pair(19, 10), Pair(11, 12), Pair(13, 14), Pair(15, 16), Pair(31, 54)]\nprint(max_chain_length(pairs_list_3, 5))  # Expected output: 5",
    "test_cases": [
      "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3",
      "assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4",
      "assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5"
    ]
  },
  {
    "mbpp_id": 602,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None",
    "test_cases": [
      "assert first_repeated_char(\"abcabc\") == \"a\"",
      "assert first_repeated_char(\"abc\") == \"None\"",
      "assert first_repeated_char(\"123123\") == \"1\""
    ]
  },
  {
    "mbpp_id": 603,
    "problem_statement": "Write a function to get a lucid number smaller than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_ludic(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    result = []\n    num = 2\n    while len(result) < n and num <= n:\n        if is_prime(num):\n            result.append(num)\n        num += 1\n    return result[:n]\n\n# Test cases\nprint(get_ludic(10))  # Expected output: [1, 2, 3, 5, 7]\nprint(get_ludic(25))  # Expected output: [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nprint(get_ludic(45))  # Expected output: [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
    "test_cases": [
      "assert get_ludic(10) == [1, 2, 3, 5, 7]",
      "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]",
      "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
    ]
  },
  {
    "mbpp_id": 604,
    "problem_statement": "Write a function to reverse words in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_words(s):\n    return ' '.join(reversed(s.split()))\n\n# Test cases\nprint(reverse_words(\"python program\"))  # Expected output: \"program python\"\nprint(reverse_words(\"java language\"))   # Expected output: \"language java\"\nprint(reverse_words(\"indian man\"))      # Expected output: \"man indian\"",
    "test_cases": [
      "assert reverse_words(\"python program\")==(\"program python\")",
      "assert reverse_words(\"java language\")==(\"language java\")",
      "assert reverse_words(\"indian man\")==(\"man indian\")"
    ]
  },
  {
    "mbpp_id": 605,
    "problem_statement": "Write a function to check if the given integer is a prime number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def prime_num(num):\n    # Check for negative numbers\n    if num < 2:\n        return False\n    \n    # Check for even numbers\n    if num == 2 or num == 4:\n        return True\n    \n    # Check for odd numbers greater than 4\n    sqrt_num = int(num ** 0.5)\n    \n    for i in range(2, sqrt_num + 1):\n        if num % i == 0:\n            return False\n            \n    return True",
    "test_cases": [
      "assert prime_num(13)==True",
      "assert prime_num(7)==True",
      "assert prime_num(-1010)==False"
    ]
  },
  {
    "mbpp_id": 606,
    "problem_statement": "Write a function to convert degrees to radians.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef radian_degree(degree):\n    return degree * math.pi / 180.0\n\n# Test cases\nprint(radian_degree(90))  # Expected output: approximately 1.5708\nprint(radian_degree(60))  # Expected output: approximately 1.0472\nprint(radian_degree(120)) # Expected output: approximately 2.0944",
    "test_cases": [
      "assert radian_degree(90)==1.5707963267948966",
      "assert radian_degree(60)==1.0471975511965976",
      "assert radian_degree(120)==2.0943951023931953"
    ]
  },
  {
    "mbpp_id": 607,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_literals(s, pat):\n    \"\"\"\n    Searches for a literal string pattern in the given text.\n    \n    Parameters:\n    s (str): The text in which to search for the pattern.\n    pat (str): The pattern to search for as a literal string.\n    \n    Returns:\n    tuple: A tuple containing the start index of the first occurrence, \n           end index of the matched substring, and the matched substring itself.\n           Returns None if no match is found.\n    \"\"\"\n    match = re.search(pat, s)\n    if match:\n        return (match.start(), match.end(), match.group(0))\n    else:\n        return None\n\n# Check function with provided data points\nprint(find_literals('The quick brown fox jumps over the lazy dog.', 'fox')) # Expected output: (16, 19, 'fox')\nprint(find_literals('Its been a very crazy procedure right', 'crazy')) # Expected output: (16, 21, 'crazy')\nprint(find_literals('Hardest choices required strongest will', 'will')) # Expected output: (35, 39, 'will')",
    "test_cases": [
      "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
      "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)",
      "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"
    ]
  },
  {
    "mbpp_id": 608,
    "problem_statement": "Write a python function to find nth bell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'bell_Number' is not defined",
      "Test 2: FAIL - name 'bell_Number' is not defined",
      "Test 3: FAIL - name 'bell_Number' is not defined"
    ],
    "generated_code": "def bell_number(n):\n    # Initialize an array with zeros for n+1 length\n    bell = [0] * (n + 1)\n    \n    # The first two numbers in the Bell sequence are always 0 and 1\n    bell[0], bell[1] = 0, 1\n    \n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        bell[i] = sum(bell[i-1:])\n        \n    return bell[n]",
    "test_cases": [
      "assert bell_Number(2) == 2",
      "assert bell_Number(3) == 5",
      "assert bell_Number(4) == 15"
    ]
  },
  {
    "mbpp_id": 609,
    "problem_statement": "Write a python function to find minimum possible value for the given periodic function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import numpy as np\n\ndef floor_Min(a, b, c):\n    # Calculate the sum of all numbers in the array\n    total = np.sum(np.array([a,b,c]))\n    \n    # Calculate the product of all numbers in the array\n    product = np.prod(np.array([a,b,c]))\n    \n    # Calculate the maximum value in the array\n    max_val = np.max(np.array([a,b,c]))\n    \n    # If all values are less than or equal to 4\n    if max_val <= 4:\n        result = int(total)\n    else:\n        result = max_val - 1\n    \n    return result",
    "test_cases": [
      "assert floor_Min(10,20,30) == 15",
      "assert floor_Min(1,2,1) == 0",
      "assert floor_Min(11,10,9) == 9"
    ]
  },
  {
    "mbpp_id": 610,
    "problem_statement": "Write a python function to remove the k'th element from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_kth_element(lst, k):\n    del lst[k-1]\n    return lst\n\n# Test cases\nprint(remove_kth_element([1,1,2,3,4,4,5,1],3)) # Expected output: [1, 1, 3, 4, 4, 5, 1]\nprint(remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)) # Expected output: [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nprint(remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)) # Expected output: [10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
    "test_cases": [
      "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
      "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
      "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
    ]
  },
  {
    "mbpp_id": 611,
    "problem_statement": "Write a function to find the maximum of nth column from the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_of_nth(tuple_list, n):\n    # Extracting the nth element from each tuple in the list and finding its maximum value.\n    return max(x[n-1] for x in tuple_list)",
    "test_cases": [
      "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19",
      "assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10",
      "assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11"
    ]
  },
  {
    "mbpp_id": 612,
    "problem_statement": "Write a python function to merge the first and last elements separately in a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge(lists):\n    # Concatenate all inner lists into one flat list\n    combined = [item for sublist in lists for item in sublist]\n    \n    # Separate the first and last elements from the concatenated list\n    merged_list = []\n    while len(combined) > 0:\n        if not combined: \n            break\n        elif not combined[-1]: \n            del combined[-1]\n        else:\n            merged_list.append(combined.pop())\n    \n    # Add the remaining elements back to the end of the merged_list\n    while combined:\n        merged_list.append(combined.pop(0))\n    \n    return merged_list",
    "test_cases": [
      "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
      "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]",
      "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
    ]
  },
  {
    "mbpp_id": 613,
    "problem_statement": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_value(lst):\n    max_values = [(k, max(v)) for k, v in lst]\n    return max_values",
    "test_cases": [
      "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]",
      "assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]",
      "assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]"
    ]
  },
  {
    "mbpp_id": 614,
    "problem_statement": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cummulative_sum(tpl_list):\n    # Convert each nested tuple into its corresponding list and then calculate the cumulative sum\n    return sum([sum(i) for i in tpl_list], 0)",
    "test_cases": [
      "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",
      "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37",
      "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"
    ]
  },
  {
    "mbpp_id": 615,
    "problem_statement": "Write a function to find average value of the numbers in a given tuple of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def average_tuple(tuples_list):\n    total = sum(sum(lst) for lst in tuples_list)\n    count = len(tuples_list)\n    return [total / count] * len(tuples_list)\n\n# Test cases\nprint(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))))\nprint(average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))))\nprint(average_tuple(( (100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40) )))",
    "test_cases": [
      "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
      "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]",
      "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"
    ]
  },
  {
    "mbpp_id": 616,
    "problem_statement": "Write a function to perfom the modulo of tuple elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_modulo(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i] % tup2[i])\n    return tuple(result)\n\n# Test Cases\nprint(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))) # Expected output: (0, 4, 5, 1)\nprint(tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6))) # Expected output: (5, 5, 6, 1)\nprint(tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7))) # Expected output: (5, 6, 7, 1)",
    "test_cases": [
      "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
      "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
      "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
    ]
  },
  {
    "mbpp_id": 617,
    "problem_statement": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - division by zero",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef min_Jumps(d, x, y):\n    # Calculate the minimum number of jumps required to reach the end of the path\n    return math.ceil((x - d) / y)",
    "test_cases": [
      "assert min_Jumps(3,4,11)==3.5",
      "assert min_Jumps(3,4,0)==0",
      "assert min_Jumps(11,14,11)==1"
    ]
  },
  {
    "mbpp_id": 618,
    "problem_statement": "Write a function to divide two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef div_list(l1: List[int], l2: List[int]) -> List[float]:\n    return list(map(lambda x, y: x / y if y != 0 else float('nan'), l1, l2))",
    "test_cases": [
      "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
      "assert div_list([3,2],[1,4])==[3.0, 0.5]",
      "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
    ]
  },
  {
    "mbpp_id": 619,
    "problem_statement": "Write a function to move all the numbers in it to the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: move_num() missing 1 required positional argument: 'str_val'"
    ],
    "generated_code": "def move_num(s, str_val):\n    num_str = ''.join([i for i in s if not i.isdigit()])\n    num_int = int(num_str)\n    result = [c for c in s]\n    place = len(str(num_int)) - 1\n    while num_int > 0:\n        char = str(num_int % 10)\n        del(result[place])\n        result.insert(place, char)\n        num_int //= 10\n        place -= 1\n    result = ''.join(result)\n    return str_val + result\n\n\n# Test Cases\nprint(move_num('I1love143you55three3000thousand'))  # Expected output: \"Iloveyouthreethousand1143553000\"\nprint(move_num('Avengers124Assemble'))              # Expected output: \"AvengersAssemble124\"\nprint(move_num('Its11our12path13to14see15things16do17things'))  # Expected output: \"Itsourpathtoseethingsdothings11121314151617\"",
    "test_cases": [
      "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
      "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'",
      "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"
    ]
  },
  {
    "mbpp_id": 620,
    "problem_statement": "Write a function to find the largest subset where each pair is divisible.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef largest_subset(nums: List[int], target: int) -> int:\n    dp = [1] * len(nums)\n    \n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    \n    max_length = max(dp)\n    return max_length",
    "test_cases": [
      "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4",
      "assert largest_subset([10, 5, 3, 15, 20], 5) == 3",
      "assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4"
    ]
  },
  {
    "mbpp_id": 621,
    "problem_statement": "Write a function to increment the numeric values in the given strings by k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: invalid literal for int() with base 10: 'MSM'"
    ],
    "generated_code": "def increment_numerics(strings, k):\n    \"\"\"\n    This function takes a list of strings and an integer k as inputs.\n    It increments each numeric value in the strings by k and returns the modified list of strings.\n    \"\"\"\n    def increment_number(n_str):\n        num = int(n_str)\n        incremented_num = num + k\n        return str(incremented_num)\n\n    return [increment_number(str) for str in strings]\n\n# Test Cases\nprint(increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"], 6)) # Expected output: ['MSM', '240', 'is', '104', '129', 'best', '10']\nprint(increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"], 12)) # Expected output: ['Dart', '368', 'is', '100', '181', 'Super', '18']\nprint(increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"], 33)) # Expected output: ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
    "test_cases": [
      "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']",
      "assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']",
      "assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"
    ]
  },
  {
    "mbpp_id": 622,
    "problem_statement": "Write a function to find the median of two sorted arrays of same size.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_median(arr1, arr2, n):\n    merged_list = []\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            merged_list.append(arr1[i])\n            i += 1\n        else:\n            merged_list.append(arr2[j])\n            j += 1\n    while i < n:\n        merged_list.append(arr1[i])\n        i += 1\n    while j < n:\n        merged_list.append(arr2[j])\n        j += 1\n    mid_index = n // 2\n    total_length = len(merged_list)\n    \n    if total_length % 2 == 0:\n        # Even number of elements\n        return (merged_list[mid_index - 1] + merged_list[mid_index]) / 2.0\n    else:\n        # Odd number of elements\n        return merged_list[mid_index]",
    "test_cases": [
      "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
      "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
      "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"
    ]
  },
  {
    "mbpp_id": 623,
    "problem_statement": "Write a function to find the n-th power of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def nth_nums(lst,n=2):\n    return [x**n for x in lst]\n\n# Test cases\nprint(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)) # Expected output: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nprint(nth_nums([10,20,30],3)) # Expected output: [1000, 8000, 27000]\nprint(nth_nums([12,15],5)) # Expected output: [248832, 759375]",
    "test_cases": [
      "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
      "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
      "assert nth_nums([12,15],5)==([248832, 759375])"
    ]
  },
  {
    "mbpp_id": 624,
    "problem_statement": "Write a python function to convert the given string to upper case.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_upper(s):\n    # Convert the input string to uppercase using the built-in str method\n    return s.upper()",
    "test_cases": [
      "assert is_upper(\"person\") ==\"PERSON\"",
      "assert is_upper(\"final\") == \"FINAL\"",
      "assert is_upper(\"Valid\") == \"VALID\""
    ]
  },
  {
    "mbpp_id": 625,
    "problem_statement": "Write a python function to interchange first and last elements in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    # Interchange the first element with the last one in the list\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert swap_List([1,2,3]) == [3,2,1]",
      "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]",
      "assert swap_List([4,5,6]) == [6,5,4]"
    ]
  },
  {
    "mbpp_id": 626,
    "problem_statement": "Write a python function to find the largest triangle that can be inscribed in the semicircle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def triangle_area(semi_circle_radius):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle.\n    \n    Args:\n    semi_circle_radius (float): The radius of the semicircle.\n    \n    Returns:\n    float: The area of the largest inscribed triangle.\n    \"\"\"\n    # If the diameter is zero, there's no triangle that can be formed.\n    if semi_circle_radius == 0:\n        return 0\n    \n    # For a given radius, the base of the inscribed equilateral triangle is twice the radius,\n    # and its height will be equal to the radius multiplied by the square root of 3 divided by 2.\n    base = 2 * semi_circle_radius\n    height = semi_circle_radius * ((3 ** 0.5) / 2)\n    \n    # Area of an equilateral triangle is (base * height) / 2.\n    max_triangle_area = (base * height) / 2\n    return max_triangle_area",
    "test_cases": [
      "assert triangle_area(0) == 0",
      "assert triangle_area(-1) == -1",
      "assert triangle_area(2) == 4"
    ]
  },
  {
    "mbpp_id": 627,
    "problem_statement": "Write a python function to find the smallest missing number from the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_First_Missing(arr, start, end):\n    # If all elements in the array are consecutive and there is no missing element\n    if max(arr) - min(arr) == end - start + 1:\n        return end + 1\n    \n    for i in range(start, end + 1):\n        if arr[i] != i:\n            return i\n    \n    # This line should never be reached due to the initial condition check\n    return end + 1",
    "test_cases": [
      "assert find_First_Missing([0,1,2,3],0,3) == 4",
      "assert find_First_Missing([0,1,2,6,9],0,4) == 3",
      "assert find_First_Missing([2,3,5,8,9],0,4) == 0"
    ]
  },
  {
    "mbpp_id": 628,
    "problem_statement": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_spaces(input_string):\n    # Replace spaces in the input string with '%20'\n    modified_string = input_string.replace(' ', '%20')\n    return modified_string",
    "test_cases": [
      "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'",
      "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'",
      "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"
    ]
  },
  {
    "mbpp_id": 629,
    "problem_statement": "Write a python function to find even numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(lst):\n    # Use filter() with lambda to create a new list containing only even numbers from the input list\n    return list(filter(lambda x: x % 2 == 0, lst))\n\n# Test cases\nprint(split([1, 2, 3, 4, 5]))  # Output: [2, 4]\nprint(split([4, 5, 6, 7, 8, 0, 1]))  # Output: [4, 6, 8, 0]\nprint(split([8, 12, 15, 19]))  # Output: [8, 12]",
    "test_cases": [
      "assert Split([1,2,3,4,5]) == [2,4]",
      "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
      "assert Split ([8,12,15,19]) == [8,12]"
    ]
  },
  {
    "mbpp_id": 630,
    "problem_statement": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_coordinates(coord):\n    x, y = coord\n    return [[x + dx, y + dy] for dx in range(-1, 2) for dy in range(-1, 2) if dx != 0 or dy != 0]",
    "test_cases": [
      "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
      "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]",
      "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
    ]
  },
  {
    "mbpp_id": 631,
    "problem_statement": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef replace_spaces(text):\n    \"\"\"\n    Replaces all spaces in the input text with underscores and replaces all underscores \n    with spaces.\n    \n    Args:\n        text (str): The input text containing spaces and/or underscores.\n        \n    Returns:\n        str: The modified text with spaces replaced by underscores and underscores replaced by spaces.\n    \"\"\"\n    # Replace spaces with underscores\n    result = re.sub(r'\\s', '_', text)\n    # Replace underscores with spaces\n    final_result = re.sub(r'_', ' ', result).strip()\n    return final_result\n\n# Check function with provided data points\nprint(replace_spaces('Jumanji The Jungle'))  # Expected output: Jumanji_The_Jungle\nprint(replace_spaces('The Avengers'))       # Expected output: The_Avengers\nprint(replace_spaces('Fast and Furious'))   # Expected output: Fast_and_Furious",
    "test_cases": [
      "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
      "assert replace_spaces('The Avengers') == 'The_Avengers'",
      "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
    ]
  },
  {
    "mbpp_id": 632,
    "problem_statement": "Write a python function to move all zeroes to the end of the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_zero(lst):\n    # Move non-zero elements to the beginning and zero elements to the end in one pass.\n    index = 0\n    for i in range(len(lst)):\n        if lst[i] != 0:\n            lst[index], lst[i] = lst[i], lst[index]\n            index += 1\n    return lst\n\n# Test cases\nprint(move_zero([1,0,2,0,3,4]))  # Expected output: [1,2,3,4,0,0]\nprint(move_zero([2,3,2,0,0,4,0,5,0]))  # Expected output: [2,3,2,4,5,0,0,0,0]\nprint(move_zero([0,1,0,1,1]))  # Expected output: [1,1,1,0,0]",
    "test_cases": [
      "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
      "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
      "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
    ]
  },
  {
    "mbpp_id": 633,
    "problem_statement": "Write a python function to find the sum of xor of all pairs of numbers in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pair_OR_Sum(arr, n):\n    # Initialize result variable\n    result = 0\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Add current number and previous XORed value multiplied by number of elements left\n        result += arr[i] * ((n - 1) // (i + 1))\n    \n    return result",
    "test_cases": [
      "assert pair_OR_Sum([5,9,7,6],4) == 47",
      "assert pair_OR_Sum([7,3,5],3) == 12",
      "assert pair_OR_Sum([7,3],2) == 4"
    ]
  },
  {
    "mbpp_id": 634,
    "problem_statement": "Write a python function to find the sum of fourth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 4\n    return total",
    "test_cases": [
      "assert even_Power_Sum(2) == 272",
      "assert even_Power_Sum(3) == 1568",
      "assert even_Power_Sum(4) == 5664"
    ]
  },
  {
    "mbpp_id": 635,
    "problem_statement": "Write a function to push all values into a heap and then pop off the smallest values one at a time.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        \n        if l < n and arr[i] < arr[l]:\n            largest = l\n            \n        if r < n and arr[largest] < arr[r]:\n            largest = r\n            \n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n            \n    n = len(arr)\n    \n    for i in range(n//2 - 1, -1, -1):\n        heapify(arr, n, i)\n        \n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n# Test cases\nprint(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\nprint(heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58]))\nprint(heap_sort([7, 1, 9, 5]))",
    "test_cases": [
      "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
      "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"
    ]
  },
  {
    "mbpp_id": 636,
    "problem_statement": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def check_roots_are_reciprocal(a, b, c):\n    # Calculate discriminant\n    d = b**2 - 4*a*c\n    \n    # If discriminant is negative, no real roots\n    if d < 0:\n        return \"No\"\n    \n    # If discriminant is zero, one root (reciprocal)\n    elif d == 0:\n        r1 = -b / (2 * a)\n        r2 = r1\n        return \"Yes\"\n    \n    # If discriminant is positive, two distinct real roots\n    else:\n        r1 = (-b + math.sqrt(d)) / (2 * a)\n        r2 = (-b - math.sqrt(d)) / (2 * a)\n        \n        # Check if roots are reciprocals\n        if r1 * r2 != 1:\n            return \"No\"\n        else:\n            return \"Yes\"\n\n# Test cases\nprint(check_roots_are_reciprocal(2,0,2))  # Expected output: Yes\nprint(check_roots_are_reciprocal(2,-5,2))  # Expected output: Yes\nprint(check_roots_are_reciprocal(1,2,3))   # Expected output: No",
    "test_cases": [
      "assert Check_Solution(2,0,2) == \"Yes\"",
      "assert Check_Solution(2,-5,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\""
    ]
  },
  {
    "mbpp_id": 637,
    "problem_statement": "Write a function to check whether the given amount has no profit and no loss",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def noprofit_noloss(amount1, amount2):\n    # Check if the first amount is less than or equal to zero\n    if amount1 <= 0:\n        return True\n    \n    # Check if the second amount is greater than or equal to the sum of both amounts\n    elif amount2 >= amount1 + amount1:\n        return False\n    \n    else:\n        return True",
    "test_cases": [
      "assert noprofit_noloss(1500,1200)==False",
      "assert noprofit_noloss(100,100)==True",
      "assert noprofit_noloss(2000,5000)==False"
    ]
  },
  {
    "mbpp_id": 638,
    "problem_statement": "Write a function to calculate wind chill index.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def wind_chill(temp, wind_speed):\n    \"\"\"\n    Calculate the wind chill index given temperature and wind speed.\n    \n    Parameters:\n    temp (int): The current temperature in Fahrenheit.\n    wind_speed (int): The wind speed in miles per hour.\n    \n    Returns:\n    int: The calculated wind chill index.\n    \"\"\"\n    if temp < 59 or wind_speed > 120:\n        return -99\n    \n    windchill_index = 35.74 + 0.6215 * temp - 35.75 * (wind_speed ** .16) + 0.4275 * temp * (wind_speed ** .16)\n    return round(windchill_index)\n\n# Test cases\nprint(wind_chill(120, 35))  # Expected output: 40\nprint(wind_chill(40, 70))   # Expected output: 86\nprint(wind_chill(10, 100))  # Expected output: 116",
    "test_cases": [
      "assert wind_chill(120,35)==40",
      "assert wind_chill(40,70)==86",
      "assert wind_chill(10,100)==116"
    ]
  },
  {
    "mbpp_id": 639,
    "problem_statement": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sample_nam(names_list):\n    # Filter out names starting with a lowercase letter and calculate their lengths\n    filtered_names = [len(name) for name in names_list if name[0].isupper()]\n    # Sum the lengths of the remaining names\n    total_length = sum(filtered_names)\n    return total_length",
    "test_cases": [
      "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
      "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10",
      "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"
    ]
  },
  {
    "mbpp_id": 640,
    "problem_statement": "Write a function to remove the parenthesis area in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_parenthesis(input_string):\n    return ''.join([char for char in input_string if not char == '(' and not char == ')'])\n\n# Test Cases\nprint(remove_parenthesis([\"python (chrome)\"])) # Expected output: \"python\"\nprint(remove_parenthesis([\"string(.abc)\"]))   # Expected output: \"string\"\nprint(remove_parenthesis([\"alpha(num)\"]))     # Expected output: \"alpha\"",
    "test_cases": [
      "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")",
      "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")",
      "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"
    ]
  },
  {
    "mbpp_id": 641,
    "problem_statement": "Write a function to find the nth nonagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_nonagonal(n):\n    \"\"\"\n    Returns the nth nonagonal number.\n    \n    Parameters:\n    n (int): The position of the nonagonal number in the sequence.\n    \n    Returns:\n    int: The nth nonagonal number.\n    \"\"\"\n    return n * ((7*n - 5)//2)\n\n# Test the function with provided data points\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert is_nonagonal(10) == 325",
      "assert is_nonagonal(15) == 750",
      "assert is_nonagonal(18) == 1089"
    ]
  },
  {
    "mbpp_id": 642,
    "problem_statement": "Write a function to remove similar rows from the given tuple matrix.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_similar_row(matrix):\n    # Create an empty set to store unique tuples after removing duplicates\n    result = set()\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Sort the row and convert it into a tuple\n        sorted_tuple = tuple(sorted(row))\n        \n        # If the sorted tuple is not already in the result set, add it\n        if sorted_tuple not in result:\n            result.add(sorted_tuple)\n            \n    # Convert the set back into a list of tuples\n    final_result = [list(tup) for tup in result]\n    \n    return final_result\n\n# Test cases\nprint(remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]]))\nprint(remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]]))\nprint(remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]]))",
    "test_cases": [
      "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}",
      "assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}",
      "assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}"
    ]
  },
  {
    "mbpp_id": 643,
    "problem_statement": "Write a function that matches a word containing 'z', not at the start or end of the word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_wordz_middle(text):\n    # Use regex to find if the string contains \"z\" anywhere except at the start or end\n    pattern = r'\\b(?<!^)z(?!$)\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match_wordz_middle(\"pythonzabc.\"))   # Expected output: Found a match!\nprint(text_match_wordz_middle(\"xyzabc.\"))       # Expected output: Found a match!\nprint(text_match_wordz_middle(\"  lang  \"))      # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')",
      "assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')",
      "assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 644,
    "problem_statement": "Write a python function to reverse an array upto a given position.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses elements in the array from index 0 up to but not including index k.\n    \n    Parameters:\n    arr (list): The list of integers to be modified.\n    k (int): The index at which to stop reversing elements.\n    \n    Returns:\n    list: A new list with the elements reversed up to index k.\n    \"\"\"\n    left = 0\n    right = k - 1\n    while left < right:\n        # Swap elements at positions left and right\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n    \n    return arr",
    "test_cases": [
      "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
      "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
      "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
    ]
  },
  {
    "mbpp_id": 645,
    "problem_statement": "Write a function to find the product of it’s kth index in the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_k_product(list_of_tuples, k):\n    if len(list_of_tuples) < k + 1:\n        raise ValueError(\"Invalid input\")\n    \n    result = 1\n    for i in range(len(list_of_tuples)):\n        result *= list_of_tuples[i][k]\n        \n    return result",
    "test_cases": [
      "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665",
      "assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280",
      "assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210"
    ]
  },
  {
    "mbpp_id": 646,
    "problem_statement": "Write a python function to count number of cubes of size k in a cube of size n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'No_of_cubes' is not defined",
      "Test 2: FAIL - name 'No_of_cubes' is not defined",
      "Test 3: FAIL - name 'No_of_cubes' is not defined"
    ],
    "generated_code": "def no_of_cubes(n, k):\n    # Calculate the total number of smaller cubes within the larger cube.\n    total_cubes = n ** 3\n    \n    # Subtract the outermost layer from all sides to find inner cubes of size k.\n    for i in range(k):\n        total_cubes -= (n - i) ** 3\n    \n    return total_cubes",
    "test_cases": [
      "assert No_of_cubes(2,1) == 8",
      "assert No_of_cubes(5,2) == 64",
      "assert No_of_cubes(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 647,
    "problem_statement": "Write a function to split a string at uppercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_upperstring(s):\n    # Split the string and filter out all elements that are not uppercase characters.\n    return [word for word in s.split() if word.isupper()]",
    "test_cases": [
      "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']",
      "assert split_upperstring(\"PythonProgram\")==['Python','Program']",
      "assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']"
    ]
  },
  {
    "mbpp_id": 648,
    "problem_statement": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def exchange_elements(arr):\n    return [arr[i] if i % 2 == 0 else arr[-i-1] for i in range(len(arr))]",
    "test_cases": [
      "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ",
      "assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] ",
      "assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] "
    ]
  },
  {
    "mbpp_id": 649,
    "problem_statement": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Range_list(numbers, start_index, end_index):\n    \"\"\"\n    This function takes a list of integers and two integers indicating an index range.\n    It calculates and returns the sum of all elements within the given range of indices.\n    \n    :param numbers: List[int] - A list of integers.\n    :param start_index: int - The starting index for the range.\n    :param end_index: int - The ending index for the range (inclusive).\n    :return: int - Sum of elements from start_index to end_index.\n    \"\"\"\n    return sum(numbers[start_index:end_index+1])\n\n# Check function with provided data points\nassert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29\nassert sum_Range_list([1, 2, 3, 4, 5], 1, 2) == 5\nassert sum_Range_list([1, 0, 1, 2, 5, 6], 4, 5) == 11\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29",
      "assert sum_Range_list([1,2,3,4,5],1,2) == 5",
      "assert sum_Range_list([1,0,1,2,5,6],4,5) == 11"
    ]
  },
  {
    "mbpp_id": 650,
    "problem_statement": "Write a python function to check whether the given two arrays are equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - are_Equal() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - are_Equal() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - are_Equal() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def are_Equal(arr1, arr2, length):\n    # Check if both lists have the same elements and in the same order\n    return sorted(arr1) == sorted(arr2)",
    "test_cases": [
      "assert are_Equal([1,2,3],[3,2,1],3,3) == True",
      "assert are_Equal([1,1,1],[2,2,2],3,3) == False",
      "assert are_Equal([8,9],[4,5,6],2,3) == False"
    ]
  },
  {
    "mbpp_id": 651,
    "problem_statement": "Write a function to check if one tuple is a subset of another tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_subset(tup1, tup2):\n    # Check if all elements in tup1 are present in tup2\n    return set(tup1).issubset(set(tup2))\n\n# Test cases\nprint(check_subset((10, 4, 5, 6), (5, 10)))  # Expected output: True\nprint(check_subset((1, 2, 3, 4), (5, 6)))   # Expected output: False\nprint(check_subset((7, 8, 9, 10), (10, 8))) # Expected output: True",
    "test_cases": [
      "assert check_subset((10, 4, 5, 6), (5, 10)) == True",
      "assert check_subset((1, 2, 3, 4), (5, 6)) == False",
      "assert check_subset((7, 8, 9, 10), (10, 8)) == True"
    ]
  },
  {
    "mbpp_id": 652,
    "problem_statement": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def matrix_to_list(matrix):\n    # Flatten the matrix into a single list of tuples and then map them into a list.\n    flat_list = [item for sublist in matrix for item in sublist]\n    result = []\n    for i in range(len(flat_list)):\n        if i % 2 == 0:\n            result.append(str(flat_list[i]))\n        else:\n            result.append(\",\")\n    return \"\".join(result).replace(\",)\", \")\").strip()\n\n# Test cases\nprint(matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]))  # Output: '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nprint(matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]))  # Output: '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nprint(matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]))  # Output: '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
    "test_cases": [
      "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'",
      "assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'",
      "assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'"
    ]
  },
  {
    "mbpp_id": 653,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef grouping_dictionary(pairs):\n    # Create an empty dictionary of lists for storing grouped values.\n    result = defaultdict(list)\n    \n    # Iterate through each pair in the given list.\n    for k, v in pairs:\n        # Append the value to the corresponding list in the dictionary.\n        result[k].append(v)\n        \n    # Convert the defaultdict back to a regular dictionary before returning.\n    return dict(result)\n\n# Test cases\nprint(grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])) == {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nprint(grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])) == {'yellow': [10, 30], 'blue': [20, 40], 'red': [10]}\nprint(grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])) == {'yellow': [15, 35], 'blue': [25, 45], 'red': [15]}",
    "test_cases": [
      "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})",
      "assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})",
      "assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"
    ]
  },
  {
    "mbpp_id": 654,
    "problem_statement": "Write a function to find the perimeter of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_cases": [
      "assert rectangle_perimeter(10,20)==60",
      "assert rectangle_perimeter(10,5)==30",
      "assert rectangle_perimeter(4,2)==12"
    ]
  },
  {
    "mbpp_id": 655,
    "problem_statement": "Write a python function to find the sum of fifth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fifth_Power_Sum(n):\n    total = 0\n    for i in range(1, n+1):\n        total += pow(i, 5)\n    return total",
    "test_cases": [
      "assert fifth_Power_Sum(2) == 33",
      "assert fifth_Power_Sum(4) == 1300",
      "assert fifth_Power_Sum(3) == 276"
    ]
  },
  {
    "mbpp_id": 656,
    "problem_statement": "Write a python function to find the minimum sum of absolute differences of two arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef find_Min_Sum(nums1: List[int], nums2: List[int], n: int) -> int:\n    diff_sum = 0\n    for i in range(n):\n        diff_sum += abs(nums1[i] - nums2[i])\n    return diff_sum\n\n# Test cases\nprint(find_Min_Sum([3,2,1], [2,1,3], 3)) # Expected output: 0\nprint(find_Min_Sum([1,2,3], [4,5,6], 3)) # Expected output: 9\nprint(find_Min_Sum([4,1,8,7], [2,3,6,5], 4)) # Expected output: 6",
    "test_cases": [
      "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0",
      "assert find_Min_Sum([1,2,3],[4,5,6],3) == 9",
      "assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6"
    ]
  },
  {
    "mbpp_id": 657,
    "problem_statement": "Write a python function to find the first digit in factorial of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(num):\n    # Calculate factorial using math library\n    fact = 1\n    for i in range(2, num + 1):\n        fact *= i\n    \n    # Convert result to string and remove trailing zeros\n    str_fact = str(fact)\n    \n    # Find the index of the first non-zero digit\n    idx = next((i for i, c in enumerate(str_fact) if c != '0'), len(str_fact))\n    \n    # Return the first non-zero digit as an integer\n    return int(str_fact[idx])",
    "test_cases": [
      "assert first_Digit(5) == 1",
      "assert first_Digit(10) == 3",
      "assert first_Digit(7) == 5"
    ]
  },
  {
    "mbpp_id": 658,
    "problem_statement": "Write a function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    max_count = -1\n    max_item = None\n    for num, freq in count_dict.items():\n        if freq > max_count:\n            max_count = freq\n            max_item = num\n    \n    return max_item\n\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]) == 2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11]) == 1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1]) == 1\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2",
      "assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1",
      "assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1"
    ]
  },
  {
    "mbpp_id": 659,
    "problem_statement": "Write a python function to print duplicants from a list of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Repeat' is not defined",
      "Test 2: FAIL - name 'Repeat' is not defined",
      "Test 3: FAIL - name 'Repeat' is not defined"
    ],
    "generated_code": "def repeat(arr):\n    # Use set comprehension to remove duplicates and then convert it back to a list\n    return list(set(arr))\n\n# Test cases\nprint(repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]))  # Expected output: [20, 30, -20, 60]\nprint(repeat([-1, 1, -1, 8]))  # Expected output: [-1]\nprint(repeat([1, 2, 3, 1, 2,]))  # Expected output: [1, 2]",
    "test_cases": [
      "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]",
      "assert Repeat([-1, 1, -1, 8]) == [-1]",
      "assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]"
    ]
  },
  {
    "mbpp_id": 660,
    "problem_statement": "Write a python function to choose points from two ranges such that no point lies in both the ranges.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: One of the provided intervals overlaps with the other."
    ],
    "generated_code": "def find_points(range1_start, range1_end, range2_start, range2_end):\n    \"\"\"\n    Finds an intersection of two non-overlapping intervals where no element is shared.\n    \n    Args:\n        range1_start (int): The start of the first interval.\n        range1_end (int): The end of the first interval.\n        range2_start (int): The start of the second interval.\n        range2_end (int): The end of the second interval.\n        \n    Returns:\n        tuple: A tuple containing two integers representing the chosen starting and ending positions for the points.\n    \"\"\"\n    if range1_start >= range2_start and range1_end <= range2_end:\n        return (range1_start, range2_end)\n    elif range2_start >= range1_start and range2_end <= range1_end:\n        return (range2_start, range1_end)\n    else:\n        raise ValueError(\"One of the provided intervals overlaps with the other.\")\n\n# Test cases to verify the correctness of the solution\nassert find_points(5,10,1,5) == (1,10), \"Test case 1 failed\"\nassert find_points(3,5,7,9) == (3,9), \"Test case 2 failed\"\nassert find_points(1,5,2,8) == (1,8), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_Points(5,10,1,5) == (1,10)",
      "assert find_Points(3,5,7,9) == (3,9)",
      "assert find_Points(1,5,2,8) == (1,8)"
    ]
  },
  {
    "mbpp_id": 661,
    "problem_statement": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_of_three_consecutive(nums, k):\n    if len(nums) < k:\n        raise ValueError(\"The list is shorter than required for finding at least three consecutive elements.\")\n    \n    # Initialize variables with the first 'k' numbers and their prefix sums\n    max_sum = nums[0] + nums[1] + nums[2]\n    current_prefix_sum = max_sum\n    \n    for i in range(k, len(nums)):\n        # Update the prefix sum excluding the last number added\n        current_prefix_sum -= nums[i - k]\n        \n        # Add the new number being considered and update the max sum found so far\n        current_prefix_sum += nums[i]\n        max_sum = max(max_sum, current_prefix_sum)\n    \n    return max_sum\n\n# Test cases\nprint(max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5))  # Expected output: 2101\nprint(max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5))  # Expected output: 5013\nprint(max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8))   # Expected output: 27",
    "test_cases": [
      "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101",
      "assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013",
      "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27"
    ]
  },
  {
    "mbpp_id": 662,
    "problem_statement": "Write a function to sort a list in a dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sorted_dict(dict_input):\n    # Sort each value of the dictionary first based on their elements and then alphabetically.\n    return {key: sorted(sublist) for key, sublist in dict_input.items()}",
    "test_cases": [
      "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}",
      "assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}",
      "assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"
    ]
  },
  {
    "mbpp_id": 663,
    "problem_statement": "Write a function to find the largest possible value of k such that k modulo x is y.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_max_val(n, m, mod_value):\n    # Calculate the maximum value of n % m + mod_value such that the result is greater than 0.\n    return ((n - mod_value) // m * m) if (n - mod_value) % m == 0 else n\n\n# Example test cases\nprint(find_max_val(15, 10, 5))  # Expected output: 15\nprint(find_max_val(187, 10, 5))  # Expected output: 185\nprint(find_max_val(16, 11, 1))   # Expected output: 12",
    "test_cases": [
      "assert find_max_val(15, 10, 5) == 15",
      "assert find_max_val(187, 10, 5) == 185",
      "assert find_max_val(16, 11, 1) == 12"
    ]
  },
  {
    "mbpp_id": 664,
    "problem_statement": "Write a python function to find the average of even numbers till a given even number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'average_Even' is not defined",
      "Test 2: FAIL - name 'average_Even' is not defined",
      "Test 3: FAIL - name 'average_Even' is not defined"
    ],
    "generated_code": "def average_even(n):\n    total = sum(i for i in range(2, n+1) if i % 2 == 0)\n    count = len([i for i in range(2, n+1) if i % 2 == 0])\n    return total / count if count > 0 else 0",
    "test_cases": [
      "assert average_Even(2) == 2",
      "assert average_Even(4) == 3",
      "assert average_Even(100) == 51"
    ]
  },
  {
    "mbpp_id": 665,
    "problem_statement": "Write a python function to shift first element to the end of given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def move_last(lst):\n    return lst[-1:] + lst[:-1]",
    "test_cases": [
      "assert move_last([1,2,3,4]) == [2,3,4,1]",
      "assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]",
      "assert move_last([5,4,3,2,1]) == [4,3,2,1,5]"
    ]
  },
  {
    "mbpp_id": 666,
    "problem_statement": "Write a function to count occurrence of a character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_char(s, c):\n    return s.count(c)",
    "test_cases": [
      "assert count_char(\"Python\",'o')==1",
      "assert count_char(\"little\",'t')==2",
      "assert count_char(\"assert\",'s')==2"
    ]
  },
  {
    "mbpp_id": 667,
    "problem_statement": "Write a python function to count number of vowels in the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Check_Vow(s1,s2):\n    # Counting vowels in s1 and comparing it with the length of s2\n    return sum(c.lower() in 'aeiou' for c in s1) == len(s2)",
    "test_cases": [
      "assert Check_Vow('corner','AaEeIiOoUu') == 2",
      "assert Check_Vow('valid','AaEeIiOoUu') == 2",
      "assert Check_Vow('true','AaEeIiOoUu') ==2"
    ]
  },
  {
    "mbpp_id": 668,
    "problem_statement": "Write a python function to replace multiple occurence of character by single.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'new_char' is not defined"
    ],
    "generated_code": "def replace(s, old_char):\n    # Find all occurrences of the old character and concatenate them with new character between each occurrence\n    new_string = ''.join([new_char if char == old_char else char for char in s])\n    return new_string\n\nprint(replace('peep', 'e'))  # Output: \"pep\"\nprint(replace('Greek', 'e'))  # Output: \"Grek\"\nprint(replace('Moon', 'o'))  # Output: \"Mon\"",
    "test_cases": [
      "assert replace('peep','e') == 'pep'",
      "assert replace('Greek','e') == 'Grek'",
      "assert replace('Moon','o') == 'Mon'"
    ]
  },
  {
    "mbpp_id": 669,
    "problem_statement": "Write a function to check whether the given ip address is valid or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_IP(ip_address):\n    # Regular expression pattern for validating an IP address\n    pattern = \"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    \n    if re.match(pattern, ip_address):\n        return \"Valid IP address\"\n    else:\n        return \"Invalid IP address\"\n\n# Test cases\nprint(check_IP(\"192.168.0.1\"))   # Output: Valid IP address\nprint(check_IP(\"110.234.52.124\"))  # Output: Valid IP address\nprint(check_IP(\"366.1.2.2\"))      # Output: Invalid IP address",
    "test_cases": [
      "assert check_IP(\"192.168.0.1\") == 'Valid IP address'",
      "assert check_IP(\"110.234.52.124\") == 'Valid IP address'",
      "assert check_IP(\"366.1.2.2\") == 'Invalid IP address'"
    ]
  },
  {
    "mbpp_id": 670,
    "problem_statement": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decreasing_trend(nums):\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i - 1]:\n            return False\n    return True",
    "test_cases": [
      "assert decreasing_trend([-4,-3,-2,-1]) == True",
      "assert decreasing_trend([1,2,3]) == True",
      "assert decreasing_trend([3,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 671,
    "problem_statement": "Write a python function to set the right most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def set_Right_most_Unset_Bit(n):\n    # Find the first unset bit from the right\n    while n & (n - 1) != 0:\n        n ^= (n >> 1)\n    return n",
    "test_cases": [
      "assert set_Right_most_Unset_Bit(21) == 23",
      "assert set_Right_most_Unset_Bit(11) == 15",
      "assert set_Right_most_Unset_Bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 672,
    "problem_statement": "Write a function to find maximum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_cases": [
      "assert max_of_three(10,20,30)==30",
      "assert max_of_three(55,47,39)==55",
      "assert max_of_three(10,49,30)==49"
    ]
  },
  {
    "mbpp_id": 673,
    "problem_statement": "Write a python function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def convert(lst):\n    # Convert each element in the list to string and then concatenate them\n    return int(\"\".join(map(str, lst)))\n\n# Test cases\nprint(convert([1,2,3]))  # Expected output: 123\nprint(convert([4,5,6]))  # Expected output: 456\nprint(convert([7,8,9]))  # Expected output: 789",
    "test_cases": [
      "assert convert([1,2,3]) == 123",
      "assert convert([4,5,6]) == 456",
      "assert convert([7,8,9]) == 789"
    ]
  },
  {
    "mbpp_id": 674,
    "problem_statement": "Write a function to remove duplicate words from a given string using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import OrderedDict\n\ndef remove_duplicate(input_string):\n    # Split the input string into words and convert them to an ordered dictionary to preserve order\n    word_set = OrderedDict.fromkeys(input_string.split())\n    \n    # Join the unique words back into a single string separated by spaces\n    return ' '.join(word_set)",
    "test_cases": [
      "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")",
      "assert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")",
      "assert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")"
    ]
  },
  {
    "mbpp_id": 675,
    "problem_statement": "Write a function to add two integers. however, if the sum is between the given range it will return 20.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_nums(a, b, min_limit, max_limit):\n    total = a + b\n    if min_limit <= total <= max_limit:\n        return 20\n    else:\n        return total",
    "test_cases": [
      "assert sum_nums(2,10,11,20)==20",
      "assert sum_nums(15,17,1,10)==32",
      "assert sum_nums(10,15,5,30)==20"
    ]
  },
  {
    "mbpp_id": 676,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_extra_char(s):\n    # Remove everything except alphanumeric characters using regex\n    cleaned_string = re.sub('[\\W_]+', '', s)\n    return cleaned_string.strip()\n\n# Test cases\nprint(remove_extra_char('**//Google Android// - 12. '))  # Expected output: 'GoogleAndroid12'\nprint(remove_extra_char('****//Google Flutter//*** - 36. '))  # Expected output: 'GoogleFlutter36'\nprint(remove_extra_char('**//Google Firebase// - 478. '))  # Expected output: 'GoogleFirebase478'",
    "test_cases": [
      "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'",
      "assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'",
      "assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'"
    ]
  },
  {
    "mbpp_id": 677,
    "problem_statement": "Write a function to check if the triangle is valid or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def validity_triangle(a, b, c):\n    # Check for invalid triangles\n    if a + b <= c or b + c <= a or c + a <= b:\n        return False\n    else:\n        return True",
    "test_cases": [
      "assert validity_triangle(60,50,90)==False",
      "assert validity_triangle(45,75,60)==True",
      "assert validity_triangle(30,50,100)==True"
    ]
  },
  {
    "mbpp_id": 678,
    "problem_statement": "Write a python function to remove spaces from a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_spaces(s):\n    # Remove all whitespace characters from the input string and convert them to uppercase.\n    result = ''.join(c for c in s if not c.isspace()).upper()\n    return result",
    "test_cases": [
      "assert remove_spaces(\"a b c\") == \"abc\"",
      "assert remove_spaces(\"1 2 3\") == \"123\"",
      "assert remove_spaces(\" b c\") == \"bc\""
    ]
  },
  {
    "mbpp_id": 679,
    "problem_statement": "Write a function to access dictionary key’s element by index.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def access_key(dct, i):\n    # Check if the input is valid and return an appropriate error message if not\n    try:\n        return list(dct.keys())[i]\n    except IndexError:\n        raise ValueError(\"Index out of range for the given dictionary.\")",
    "test_cases": [
      "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'",
      "assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'",
      "assert access_key({'program':15,'computer':45},1)== 'computer'"
    ]
  },
  {
    "mbpp_id": 680,
    "problem_statement": "Write a python function to check whether a sequence of numbers has an increasing trend or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'increasing_trend' is not defined",
      "Test 2: FAIL - name 'increasing_trend' is not defined",
      "Test 3: FAIL - name 'increasing_trend' is not defined"
    ],
    "generated_code": "def is_increasing(t):\n    for i in range(1, len(t)):\n        if t[i] <= t[i - 1]:\n            return False\n    return True\n\n# Test cases\nprint(is_increasing([1, 2, 3, 4]))  # Expected output: True\nprint(is_increasing([4, 3, 2, 1]))  # Expected output: False\nprint(is_increasing([0, 1, 4, 9]))  # Expected output: True",
    "test_cases": [
      "assert increasing_trend([1,2,3,4]) == True",
      "assert increasing_trend([4,3,2,1]) == False",
      "assert increasing_trend([0,1,4,9]) == True"
    ]
  },
  {
    "mbpp_id": 681,
    "problem_statement": "Write a python function to find the smallest prime divisor of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_Divisor(num):\n    # Start from 2 and check for the smallest prime divisor\n    divisor = 2\n    while num % divisor != 0:\n        divisor += 1\n    return divisor\n\n# Test cases\nprint(smallest_Divisor(10))  # Expected output: 2\nprint(smallest_Divisor(25))  # Expected output: 5\nprint(smallest_Divisor(31))  # Expected output: 31",
    "test_cases": [
      "assert smallest_Divisor(10) == 2",
      "assert smallest_Divisor(25) == 5",
      "assert smallest_Divisor(31) == 31"
    ]
  },
  {
    "mbpp_id": 682,
    "problem_statement": "Write a function to multiply two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef mul_list(list_a: List[int], list_b: List[int]) -> List[int]:\n    return list(map(lambda x, y: x * y, list_a, list_b))",
    "test_cases": [
      "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]",
      "assert mul_list([1,2],[3,4])==[3,8]",
      "assert mul_list([90,120],[50,70])==[4500,8400]"
    ]
  },
  {
    "mbpp_id": 683,
    "problem_statement": "Write a python function to check whether the given number can be represented by sum of two squares or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Square(num):\n    import math\n    \n    # Iterate over possible values for 'a'\n    for i in range(int(math.sqrt(num)) + 1):\n        b_squared = num - i**2\n        if int(math.sqrt(b_squared))**2 == b_squared:\n            return True\n    return False",
    "test_cases": [
      "assert sum_Square(25) == True",
      "assert sum_Square(24) == False",
      "assert sum_Square(17) == True"
    ]
  },
  {
    "mbpp_id": 684,
    "problem_statement": "Write a python function to count occurences of a character in a repeated string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Char(repeated_string, char):\n    \"\"\"\n    Count the number of occurrences of a specified character in a given string,\n    which is repeated multiple times.\n    \n    Parameters:\n        repeated_string (str): The string to be repeated and searched.\n        char (str): The character whose occurrence needs to be counted.\n        \n    Returns:\n        int: The total count of the specified character across all repetitions.\n    \"\"\"\n    # Calculate how many times the entire string repeats itself\n    repetition_count = len(repeated_string)\n    \n    # Determine the effective length of the repeated part considering its length\n    effective_length = len(repeated_string) if len(repeated_string) <= len(char) else len(char)\n    \n    # Calculate how many times the entire character fits into one repetition\n    full_character_repetitions = repetition_count // effective_length\n    \n    # Calculate the remaining characters after full repetitions\n    remaining_characters = repetition_count % effective_length\n    \n    # Sum up the counts from both parts\n    total_occurrences = sum(full_character_repetitions * i + min(i, effective_length - 1) for i in range(remaining_characters))\n    \n    return total_occurrences\n\n# Check function with provided data points\nprint(count_Char(\"abcac\", 'a'))  # Expected output: 4\nprint(count_Char(\"abca\", 'c'))  # Expected output: 2\nprint(count_Char(\"aba\", 'a'))   # Expected output: 7",
    "test_cases": [
      "assert count_Char(\"abcac\",'a') == 4",
      "assert count_Char(\"abca\",'c') == 2",
      "assert count_Char(\"aba\",'a') == 7"
    ]
  },
  {
    "mbpp_id": 685,
    "problem_statement": "Write a python function to find sum of prime numbers between 1 to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_Of_Primes(n):\n    \"\"\"Find and return the sum of all prime numbers between 1 and n.\"\"\"\n    primes_sum = 0\n    for num in range(2, n + 1):\n        if is_prime(num):\n            primes_sum += num\n    return primes_sum\n\n# Test cases\nprint(sum_Of_Primes(10))  # Expected output: 17\nprint(sum_Of_Primes(20))  # Expected output: 77\nprint(sum_Of_Primes(5))   # Expected output: 10",
    "test_cases": [
      "assert sum_Of_Primes(10) == 17",
      "assert sum_Of_Primes(20) == 77",
      "assert sum_Of_Primes(5) == 10"
    ]
  },
  {
    "mbpp_id": 686,
    "problem_statement": "Write a function to find the frequency of each element in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_element(lst):\n    from collections import Counter\n    return str(dict(Counter(lst)))\n\n# Test cases\nprint(freq_element([4, 5, 4, 5, 6, 6, 5, 5, 4]))  # Output: {4: 3, 5: 4, 6: 2}\nprint(freq_element([7, 8, 8, 9, 4, 7, 6, 5, 4]))  # Output: {7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\nprint(freq_element([1, 4, 3, 1, 4, 5, 2, 6, 2, 7]))  # Output: {1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}",
    "test_cases": [
      "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'",
      "assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'",
      "assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'"
    ]
  },
  {
    "mbpp_id": 687,
    "problem_statement": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recur_gcd(a, b):\n    # Base case: if second number is 0, gcd is first number\n    if b == 0:\n        return a\n    else:\n        # Recursive call with parameters reduced by one and subtracting smaller from larger\n        return recur_gcd(b, a % b)\n\n# Test cases\nprint(recur_gcd(12, 14))  # Should return 2\nprint(recur_gcd(13, 17))  # Should return 1\nprint(recur_gcd(9, 3))    # Should return 3",
    "test_cases": [
      "assert recur_gcd(12,14) == 2",
      "assert recur_gcd(13,17) == 1",
      "assert recur_gcd(9, 3) == 3"
    ]
  },
  {
    "mbpp_id": 688,
    "problem_statement": "Write a function to get the length of a complex number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef len_complex(a,b):\n    \"\"\"\n    Calculate the length of a complex number with real part 'a' and imaginary part 'b'.\n    \n    Parameters:\n    - a (int/float): The real part of the complex number.\n    - b (int/float): The imaginary part of the complex number.\n    \n    Returns:\n    - float: The length of the complex number.\n    \"\"\"\n    return math.sqrt(a**2 + b**2)",
    "test_cases": [
      "assert len_complex(3,4)==5.0",
      "assert len_complex(9,10)==13.45362404707371",
      "assert len_complex(7,9)==11.40175425099138"
    ]
  },
  {
    "mbpp_id": 689,
    "problem_statement": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_jumps(arr, n): \n    dp = [float('inf')] * n \n    dp[0] = 0\n    for i in range(n): \n        if dp[i] >= len(arr): \n            break\n        step = arr[i] \n        while step > 0 and i + step < len(dp): \n            if dp[i+step] == float('inf'): \n                dp[i+step] = dp[i] + 1\n            else:\n                dp[i+step] = min(dp[i+step], dp[i] + 1)\n            step -= 1  \n    return dp[-1]",
    "test_cases": [
      "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3",
      "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3",
      "assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10"
    ]
  },
  {
    "mbpp_id": 690,
    "problem_statement": "Write a function to multiply consecutive numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef mul_consecutive_nums(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            product = nums[i - 1] * nums[i]\n            result.append(product)\n    return result",
    "test_cases": [
      "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]",
      "assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]",
      "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"
    ]
  },
  {
    "mbpp_id": 691,
    "problem_statement": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_element(tuples_list):\n    result = {}\n    for key, value in tuples_list:\n        if value in result:\n            result[value].append(key)\n        else:\n            result[value] = [key]\n    return result\n\n# Test cases\nprint(group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]))  # Should return {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nprint(group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]))  # Should return {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nprint(group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]))  # Should return {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
    "test_cases": [
      "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}",
      "assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}",
      "assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}"
    ]
  },
  {
    "mbpp_id": 692,
    "problem_statement": "Write a python function to find the last two digits in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def last_Two_Digits(n):\n    # Calculate n!\n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i\n    \n    # Return the last two digits of n!\n    return str(fact)[-2:]\n\n# Test cases\nprint(last_Two_Digits(7))  # Expected output: \"40\"\nprint(last_Two_Digits(5))  # Expected output: \"20\"\nprint(last_Two_Digits(2))  # Expected output: \"2\"",
    "test_cases": [
      "assert last_Two_Digits(7) == 40",
      "assert last_Two_Digits(5) == 20",
      "assert last_Two_Digits(2) == 2"
    ]
  },
  {
    "mbpp_id": 693,
    "problem_statement": "Write a function to remove multiple spaces in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_multiple_spaces(input_string):\n    # Use regular expression to replace two or more spaces with a single space\n    cleaned_string = re.sub(r'\\s{2,}', ' ', input_string)\n    return cleaned_string.strip()\n\n# Test cases to verify the correctness of the function\nassert remove_multiple_spaces('Google      Assistant') == 'Google Assistant', \"Test case 1 failed\"\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core', \"Test case 2 failed\"\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'",
      "assert remove_multiple_spaces('Quad      Core') == 'Quad Core'",
      "assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'"
    ]
  },
  {
    "mbpp_id": 694,
    "problem_statement": "Write a function to extract unique values from the given dictionary values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_unique(dictionary):\n    # Convert list in dictionary values to set to remove duplicates, then convert back to list\n    result = list(set([item for sublist in dictionary.values() for item in sublist]))\n    return result\n\n# Test cases\nprint(extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ))  # Should return [1, 2, 5, 6, 7, 8, 10, 11, 12]\nprint(extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ))  # Should return [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nprint(extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35] }))  # Should return [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
    "test_cases": [
      "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]",
      "assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]",
      "assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"
    ]
  },
  {
    "mbpp_id": 695,
    "problem_statement": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(tup1, tup2):\n    for i in range(len(tup1)):\n        if tup1[i] <= tup2[i]:\n            return False\n    return True\n\n# Test cases\nprint(check_greater((10, 4, 5), (13, 5, 18)))  # Expected output: True\nprint(check_greater((1, 2, 3), (2, 1, 4)))     # Expected output: False\nprint(check_greater((4, 5, 6), (5, 6, 7)))     # Expected output: True",
    "test_cases": [
      "assert check_greater((10, 4, 5), (13, 5, 18)) == True",
      "assert check_greater((1, 2, 3), (2, 1, 4)) == False",
      "assert check_greater((4, 5, 6), (5, 6, 7)) == True"
    ]
  },
  {
    "mbpp_id": 696,
    "problem_statement": "Write a function to zip two given lists of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'zip_list' is not defined",
      "Test 2: FAIL - name 'zip_list' is not defined",
      "Test 3: FAIL - name 'zip_list' is not defined"
    ],
    "generated_code": "def zip_lists(list1, list2):\n    return [[x, y] for x, y in zip(list1, list2)]",
    "test_cases": [
      "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]",
      "assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]",
      "assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]"
    ]
  },
  {
    "mbpp_id": 697,
    "problem_statement": "Write a function to find number of even elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "count_even = lambda l: sum(1 for x in l if x % 2 == 0)",
    "test_cases": [
      "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3",
      "assert count_even([10,15,14,13,-18,12,-20])==5",
      "assert count_even([1, 2, 4, 8, 9])==3"
    ]
  },
  {
    "mbpp_id": 698,
    "problem_statement": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_dict_item(dct):\n    \"\"\"\n    Sorts the items in the dictionary based on the tuple product of keys.\n    \n    Parameters:\n    dct (dict): The input dictionary with tuple keys and integer values.\n    \n    Returns:\n    dict: A new dictionary sorted according to the key tuple product.\n    \"\"\"\n    # Sorting using custom key based on tuple product\n    sorted_items = sorted(dct.items(), key=lambda item: item[0][0] * item[0][1], reverse=True)\n    return {k: v for k, v in sorted_items}\n\n# Test Cases\nassert sort_dict_item({(5, 6): 3, (2, 3): 9, (8, 4): 10, (6, 4): 12}) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7): 4, (3, 4): 10, (9, 5): 11, (7, 5): 13}) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8): 5, (4, 5): 11, (10, 6): 12, (8, 6): 14}) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}",
      "assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}",
      "assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}"
    ]
  },
  {
    "mbpp_id": 699,
    "problem_statement": "Write a python function to find the minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(s1, s2):\n    n = len(s1)\n    \n    if n != len(s2):\n        return \"Not Possible\"\n    \n    count = 0\n    \n    for i in range(n):\n        if s1[i] != s2[i]:\n            j = i + 1\n            while j < n and s1[j] == '1':\n                j += 1\n            \n            k = i - 1\n            while k >= 0 and s1[k] == '0':\n                k -= 1\n            \n            # Check if there's an unpaired '0' on either side\n            if k + 1 <= j:\n                return \"Not Possible\"\n            \n            # Count swaps needed\n            count += abs(j - k) // 2\n    \n    return count\n\n# Test Cases\nprint(min_Swaps(\"1101\", \"1110\"))  # Expected output: 1\nprint(min_Swaps(\"1111\", \"0100\"))  # Expected output: Not Possible\nprint(min_Swaps(\"1110000\", \"0001101\"))  # Expected output: 3",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"",
      "assert min_Swaps(\"1110000\",\"0001101\") == 3"
    ]
  },
  {
    "mbpp_id": 700,
    "problem_statement": "Write a function to count the number of elements in a list which are within a specific range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_range_in_list(lst, start, end):\n    return len(list(filter(lambda x: start <= x <= end, lst)))\n\n# Example usage:\nprint(count_range_in_list([10,20,30,40,40,40,70,80,99],40,100))  # Output: 6\nprint(count_range_in_list(['a','b','c','d','e','f'], 'a', 'e'))  # Output: 5\nprint(count_range_in_list([7,8,9,15,17,19,45],15,20))  # Output: 3",
    "test_cases": [
      "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6",
      "assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5",
      "assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3"
    ]
  },
  {
    "mbpp_id": 701,
    "problem_statement": "Write a function to find the equilibrium index of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    \n    for i in range(len(arr)):\n        # Subtract current element from total sum to get left sum\n        total_sum -= arr[i]\n        \n        if left_sum == total_sum:\n            return i\n        \n        left_sum += arr[i]\n    \n    return -1  # Return -1 if no equilibrium index found\n\n# Test cases\nprint(equilibrium_index([1, 2, 3, 4, 1, 2, 3]))  # Expected output: 3\nprint(equilibrium_index([-7, 1, 5, 2, -4, 3, 0]))  # Expected output: 3\nprint(equilibrium_index([1, 2, 3]))  # Expected output: -1",
    "test_cases": [
      "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3",
      "assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3",
      "assert equilibrium_index([1, 2, 3]) == -1"
    ]
  },
  {
    "mbpp_id": 702,
    "problem_statement": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'removings' is not defined. Did you mean: 'removals'?"
    ],
    "generated_code": "def removals(arr, k, x):\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(x + 1)]\n    \n    for i in range(n + 1):\n        dp[0][i] = float('inf')\n    \n    for i in range(1, n + 1):\n        dp[i % x][i] = arr[i - 1]\n    \n    for j in range(1, x + 1):\n        for i in range(j, n + 1):\n            if j == 1:\n                dp[i % x][i] = max(dp[(i - 1) % x][i])\n            else:\n                dp[i % x][i] = min(dp[(i - 1) % x][i], dp[j % x][i - j] + arr[i - 1])\n                \n    return n - dp[x % x][n]\n\n# Test cases\nprint(removings([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4)) # Output should be 5\nprint(removings([1, 5, 6, 2, 8], 5, 2)) # Output should be 3\nprint(removings([1, 2, 3 ,4, 5, 6], 6, 3)) # Output should be 2",
    "test_cases": [
      "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5",
      "assert removals([1, 5, 6, 2, 8], 5, 2) == 3",
      "assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2"
    ]
  },
  {
    "mbpp_id": 703,
    "problem_statement": "Write a function to check whether the given key is present in the dictionary or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_key_present(my_dict, key_to_check):\n    return key_to_check in my_dict",
    "test_cases": [
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True",
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True",
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False"
    ]
  },
  {
    "mbpp_id": 704,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def harmonic_sum(n):\n    # Initialize the sum with the first term which is always 1\n    total = 1\n    \n    # Calculate each subsequent term using the formula and add it to the total\n    for i in range(1, n):\n        total += 1 / ((i + 1) * i)\n    \n    return total",
    "test_cases": [
      "assert harmonic_sum(10)==2.9289682539682538",
      "assert harmonic_sum(4)==2.083333333333333",
      "assert harmonic_sum(7)==2.5928571428571425 "
    ]
  },
  {
    "mbpp_id": 705,
    "problem_statement": "Write a function to sort a list of lists by length and value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))",
    "test_cases": [
      "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]",
      "assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]",
      "assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"
    ]
  },
  {
    "mbpp_id": 706,
    "problem_statement": "Write a function to find whether an array is subset of another array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_subset(arr1, size1, arr2, size2):\n    # Convert arrays to sets for comparison\n    set_arr1 = set(arr1)\n    set_arr2 = set(arr2)\n\n    # Check if all elements in set_arr1 are present in set_arr2\n    return set_arr1 <= set_arr2 and size1 == size2",
    "test_cases": [
      "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True",
      "assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True",
      "assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False"
    ]
  },
  {
    "mbpp_id": 707,
    "problem_statement": "Write a python function to count the total set bits from 1 to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    \"\"\"\n    Count and return the number of set bits in the binary representation of numbers from 1 to n.\n    \n    Args:\n    n (int): The upper limit till which we need to count the set bits\n    \n    Returns:\n    int: Total number of set bits from 1 to n\n    \"\"\"\n    result = 0\n    for i in range(1, n + 1):\n        # Calculate the number of set bits using Brian Kernighan's algorithm\n        result += bin(i).count('1')\n    return result",
    "test_cases": [
      "assert count_Set_Bits(16) == 33",
      "assert count_Set_Bits(2) == 2",
      "assert count_Set_Bits(14) == 28"
    ]
  },
  {
    "mbpp_id": 708,
    "problem_statement": "Write a python function to convert a string to a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Convert' is not defined",
      "Test 2: FAIL - name 'Convert' is not defined",
      "Test 3: FAIL - name 'Convert' is not defined"
    ],
    "generated_code": "def convert_to_list(s):\n    # Splitting the input string into words and converting each word to a separate element in the list\n    result = s.split()\n    return result",
    "test_cases": [
      "assert Convert('python program') == ['python','program']",
      "assert Convert('Data Analysis') ==['Data','Analysis']",
      "assert Convert('Hadoop Training') == ['Hadoop','Training']"
    ]
  },
  {
    "mbpp_id": 709,
    "problem_statement": "Write a function to count unique keys for each value present in the tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_unique(tuples_list):\n    \"\"\"\n    Given a list of tuples where each tuple contains two integers,\n    returns a dictionary with each unique key's frequency as values.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequencies of unique keys\n    freq_dict = {}\n    \n    # Iterate over each tuple in the list\n    for tup in tuples_list:\n        key_1, key_2 = tup\n        \n        # Check if both elements are already in the dictionary and increase their counts\n        if key_1 in freq_dict:\n            freq_dict[key_1] += 1\n        else:\n            freq_dict[key_1] = 1\n        \n        if key_2 in freq_dict:\n            freq_dict[key_2] += 1\n        else:\n            freq_dict[key_2] = 1\n    \n    # Convert the dictionary into a string format required by the test case output\n    result_str = \"{\" + \", \".join(f\"{k}: {v}\" for k, v in sorted(freq_dict.items())) + \"}\"\n    \n    return result_str",
    "test_cases": [
      "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'",
      "assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'",
      "assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"
    ]
  },
  {
    "mbpp_id": 710,
    "problem_statement": "Write a function to access the initial and last data of the given tuple record.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def front_and_rear(tup):\n    \"\"\"\n    Returns the first element and the last element from the input tuple.\n    \n    :param tup: Tuple containing elements of any type.\n    :return: A tuple containing the first and last elements of the input tuple.\n    \"\"\"\n    return (tup[0], tup[-1])\n\n# Check function with provided data points\nassert front_and_rear((10, 4, 5, 6, 7)) == (10, 7), \"Test case 1 failed\"\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5), \"Test case 2 failed\"\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)",
      "assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)",
      "assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)"
    ]
  },
  {
    "mbpp_id": 711,
    "problem_statement": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def product_Equal(num):\n    # Convert the number to a string to easily access each digit\n    num_str = str(num)\n    \n    # Initialize the sum of products for even and odd positions separately\n    ev_sum = od_sum = 0\n    \n    # Iterate over the digits of the number\n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            ev_sum += int(num_str[i])  # Multiply digits at even positions\n        else:\n            od_sum *= int(num_str[i])   # Multiply digits at odd positions\n            \n    # Return True if both sums are equal, otherwise return False\n    return ev_sum == od_sum",
    "test_cases": [
      "assert product_Equal(2841) == True",
      "assert product_Equal(1234) == False",
      "assert product_Equal(1212) == False"
    ]
  },
  {
    "mbpp_id": 712,
    "problem_statement": "Write a function to remove duplicates from a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def remove_duplicate(list_of_lists):\n    return list(set(tuple(item) for sublist in list_of_lists for item in sublist))",
    "test_cases": [
      "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ",
      "assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]",
      "assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]"
    ]
  },
  {
    "mbpp_id": 713,
    "problem_statement": "Write a function to check if the given tuple contains all valid values or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_tuple_consistent(test_tup):\n    \"\"\"\n    Check if the provided tuple consists entirely of boolean values.\n    \n    Args:\n        test_tup (tuple): The tuple to be checked.\n        \n    Returns:\n        bool: True if the tuple contains only true and false elements, False otherwise.\n    \"\"\"\n    # Return True if every element in the tuple is either True or False, else return False.\n    return all(isinstance(element, bool) for element in test_tup)\n\n# Test cases to verify the correctness of the solution.\nassert is_tuple_consistent((True, True, True, True)) == True\nassert is_tuple_consistent((True, False, True, True)) == False\nassert is_tuple_consistent((True, True, True, True)) == True",
    "test_cases": [
      "assert check_valid((True, True, True, True) ) == True",
      "assert check_valid((True, False, True, True) ) == False",
      "assert check_valid((True, True, True, True) ) == True"
    ]
  },
  {
    "mbpp_id": 714,
    "problem_statement": "Write a python function to count the number of distinct power of prime factor of given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Fac(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    fac_count = 0\n    i = 2\n    while i * i <= n:\n        exponent = 0\n        current_factor = i\n        while n % current_factor == 0:\n            n //= current_factor\n            exponent += 1\n        if exponent > 0:\n            fac_count += exponent\n        i += 1\n    if n > 1:\n        fac_count += 1\n    return fac_count",
    "test_cases": [
      "assert count_Fac(24) == 3",
      "assert count_Fac(12) == 2",
      "assert count_Fac(4) == 1"
    ]
  },
  {
    "mbpp_id": 715,
    "problem_statement": "Write a function to convert the given string of integers into a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def str_to_tuple(s):\n    # Splitting the string with ',' and converting each element to an integer\n    return tuple(map(int, s.split(',')))",
    "test_cases": [
      "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)",
      "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)",
      "assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)"
    ]
  },
  {
    "mbpp_id": 716,
    "problem_statement": "Write a function to find the perimeter of a rombus.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rombus_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a rhombus.\n    \n    Args:\n        side_length (float): The length of one side of the rhombus.\n        \n    Returns:\n        float: The perimeter of the rhombus.\n    \"\"\"\n    return 4 * side_length",
    "test_cases": [
      "assert rombus_perimeter(10)==40",
      "assert rombus_perimeter(5)==20",
      "assert rombus_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 717,
    "problem_statement": "Write a function to calculate the standard deviation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\nfrom typing import List\n\ndef sd_calc(data: List[float]) -> float:\n    mean = sum(data) / len(data)\n    variance = sum((x - mean)**2 for x in data) / len(data)\n    return math.sqrt(variance)\n\n# Test cases\nprint(sd_calc([4, 2, 5, 8, 6]))  # Expected output: ~2.236\nprint(sd_calc([1,2,3,4,5,6,7]))  # Expected output: ~2.16\nprint(sd_calc([5,9,10,15,6,4]))  # Expected output: ~4.07",
    "test_cases": [
      "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979",
      "assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287",
      "assert sd_calc([5,9,10,15,6,4])==4.070217029430577"
    ]
  },
  {
    "mbpp_id": 718,
    "problem_statement": "Write a function to create a list taking alternate elements from another given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def alternate_elements(lst):\n    result = []\n    for i in range(0, len(lst), 2):\n        result.append(lst[i])\n    return result",
    "test_cases": [
      "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']",
      "assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]",
      "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"
    ]
  },
  {
    "mbpp_id": 719,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_match(text):\n    # The regular expression pattern 'a*b*'\n    if re.match(r'a*b*', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match(\"ac\")==('Found a match!')",
      "assert text_match(\"dc\")==('Not matched!')",
      "assert text_match(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 720,
    "problem_statement": "Write a function to add a dictionary to the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_dict_to_tuple(tup, new_data):\n    # Convert the original tuple into a list for easier modification\n    tup_list = list(tup)\n    # Append the new data as a key-value pair to the list\n    tup_list.append(new_data)\n    # Convert the list back to a tuple and return it\n    return tuple(tup_list)\n\n# Test cases\nprint(add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3}))  # Expected output: (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nprint(add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4}))  # Expected output: (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nprint(add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5}))  # Expected output: (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
    "test_cases": [
      "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})",
      "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})",
      "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
    ]
  },
  {
    "mbpp_id": 721,
    "problem_statement": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maxAverageOfPath(matrix, rows):\n    total = sum(sum(row) for row in matrix)\n    length = len(matrix)\n    \n    def check_path(path):\n        if not path:\n            return total / length\n        avg = total - matrix[path[0]][path[-1]]\n        for i in range(len(path)):\n            avg -= matrix[path[i-1]][path[i]] + matrix[path[i+1]][path[i]]\n        return avg / (length * 2 - len(path))\n    \n    for start_row in range(rows):\n        for end_row in range(start_row + 1, rows):\n            # Generate all possible paths from start_row to end_row\n            all_paths = [(start_row, i) for i in range(rows)] + list(itertools.combinations(range(start_row+1, end_row), 2)) + [(end_row, i) for i in range(end_row)]\n            best_avg = float('-inf')\n            for path in all_paths:\n                current_avg = check_path(path)\n                if current_avg > best_avg:\n                    best_avg = current_avg\n            yield best_avg",
    "test_cases": [
      "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2",
      "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2",
      "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "
    ]
  },
  {
    "mbpp_id": 722,
    "problem_statement": "Write a function to filter the height and width of students which are stored in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def filter_data(students_dict, min_height, max_width):\n    # Filter the dictionary based on the given conditions\n    filtered_students = {name: (height, width) for name, (height, width) in students_dict.items() if height >= min_height and width <= max_width}\n    return filtered_students",
    "test_cases": [
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}",
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"
    ]
  },
  {
    "mbpp_id": 723,
    "problem_statement": "Write a function to count the same pair in two given lists using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_same_pair(list_1, list_2):\n    return len(list(map(lambda x, y: 1 if x == y else 0, list_1, list_2)))\n\n# Test Cases\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9])) # Expected output: 4\nprint(count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])) # Expected output: 11\nprint(count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])) # Expected output: 1",
    "test_cases": [
      "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
      "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
      "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1"
    ]
  },
  {
    "mbpp_id": 724,
    "problem_statement": "Write a function to calculate the sum of all digits of the base to the specified power.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power_base_sum(base, exponent):\n    \"\"\"\n    Calculate the sum of all digits in base raised to the given exponent.\n    \n    Args:\n    - base (int): The base number.\n    - exponent (int): The exponent to raise the base to.\n    \n    Returns:\n    int: The sum of all digits in base to the specified exponent.\n    \"\"\"\n    return sum(int(digit) for digit in str(base**exponent))",
    "test_cases": [
      "assert power_base_sum(2,100)==115",
      "assert power_base_sum(8,10)==37",
      "assert power_base_sum(8,15)==62"
    ]
  },
  {
    "mbpp_id": 725,
    "problem_statement": "Write a function to extract values between quotation marks of the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef extract_quotation(input_string):\n    # Use regex to find all matches where there is exactly one set of double quotes surrounding a word.\n    matches = re.findall(r'\"(.*?)\"', input_string)\n    return matches",
    "test_cases": [
      "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']",
      "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
      "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']"
    ]
  },
  {
    "mbpp_id": 726,
    "problem_statement": "Write a function to multiply the adjacent elements of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_elements(tup):\n    result = ()\n    for i in range(len(tup) - 1):\n        product = tup[i] * tup[i + 1]\n        result += (product,)\n    return result",
    "test_cases": [
      "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)",
      "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
      "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)"
    ]
  },
  {
    "mbpp_id": 727,
    "problem_statement": "Write a function to remove all characters except letters and numbers using regex",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_cases": [
      "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'",
      "assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'",
      "assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' "
    ]
  },
  {
    "mbpp_id": 728,
    "problem_statement": "Write a function to sum elements in two lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]",
    "test_cases": [
      "assert sum_list([10,20,30],[15,25,35])==[25,45,65]",
      "assert sum_list([1,2,3],[5,6,7])==[6,8,10]",
      "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"
    ]
  },
  {
    "mbpp_id": 729,
    "problem_statement": "Write a function to add two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_list(list_a, list_b):\n    return list(map(lambda x, y: x + y, list_a, list_b))",
    "test_cases": [
      "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]",
      "assert add_list([1,2],[3,4])==[4,6]",
      "assert add_list([10,20],[50,70])==[60,90]"
    ]
  },
  {
    "mbpp_id": 730,
    "problem_statement": "Write a function to remove consecutive duplicates of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def consecutive_duplicates(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            new_lst.append(lst[i])\n    return new_lst",
    "test_cases": [
      "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
      "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
      "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"
    ]
  },
  {
    "mbpp_id": 731,
    "problem_statement": "Write a function to find the lateral surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef lateralsurface_cone(radius, slant_height):\n    return math.pi * radius * slant_height\n\n# Test cases\nprint(lateralsurface_cone(5,12)) # Expected output: approximately 204.20\nprint(lateralsurface_cone(10,15)) # Expected output: approximately 566.36\nprint(lateralsurface_cone(19,17)) # Expected output: approximately 1521.81",
    "test_cases": [
      "assert lateralsurface_cone(5,12)==204.20352248333654",
      "assert lateralsurface_cone(10,15)==566.3586699569488",
      "assert lateralsurface_cone(19,17)==1521.8090132193388"
    ]
  },
  {
    "mbpp_id": 732,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef replace_specialchar(input_string):\n    # Use regular expression to replace spaces, commas, and dots with colons\n    result = re.sub(r'[ ,.]', ':', input_string)\n    return result",
    "test_cases": [
      "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
      "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
      "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
    ]
  },
  {
    "mbpp_id": 733,
    "problem_statement": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            # Check if it's the first occurrence\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1  # Return -1 if not found\n\n# Test cases\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Expected output: 1\nprint(find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Expected output: 2\nprint(find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))  # Expected output: 4",
    "test_cases": [
      "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
      "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
      "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
    ]
  },
  {
    "mbpp_id": 734,
    "problem_statement": "Write a python function to find sum of products of all possible subarrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "from typing import List\n\ndef sum_Of_Subarray_Prod(nums: List[int], n: int) -> int:\n    \"\"\"\n    Calculate the sum of the product of all possible subarrays of nums with length n.\n    \n    Args:\n    nums: List[int] - A list of integers.\n    n: int - The length of the subarray whose elements' product we want to multiply together and then sum up.\n    \n    Returns:\n    int - The sum of the product of all possible subarrays of length n from nums.\n    \"\"\"\n    total_sum = 0\n    for i in range(len(nums)):\n        # Calculate the product of the current element and the sum of products of remaining subarrays\n        product_with_remaining = reduce(lambda x, y: x * y, [nums[j] for j in range(i + 1, len(nums))])\n        total_sum += product_with_remaining\n    return total_sum",
    "test_cases": [
      "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
      "assert sum_Of_Subarray_Prod([1,2],2) == 5",
      "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
    ]
  },
  {
    "mbpp_id": 735,
    "problem_statement": "Write a python function to toggle bits of the number except the first and the last bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_middle_bits(number):\n    \"\"\"\n    Toggles all middle bits of the given number.\n    \n    Parameters:\n    number (int): The input number whose middle bits are to be toggled.\n    \n    Returns:\n    int: The resulting number after toggling the middle bits.\n    \"\"\"\n    # Create an integer with the same size as the input number but initialized to 0\n    zero = 0\n    \n    # Initialize a mask with bits set to 1 in positions where we want to toggle\n    mask = ~(1 << 0) | ~(1 << 1) | ~(1 << len(bin(number)) - 2)\n    \n    # Apply the mask to flip the middle bits\n    result = number & mask\n    \n    return result\n\n# Test cases\nprint(toggle_middle_bits(9))  # Expected output: 15\nprint(toggle_middle_bits(10)) # Expected output: 12\nprint(toggle_middle_bits(11)) # Expected output: 13",
    "test_cases": [
      "assert toggle_middle_bits(9) == 15",
      "assert toggle_middle_bits(10) == 12",
      "assert toggle_middle_bits(11) == 13"
    ]
  },
  {
    "mbpp_id": 736,
    "problem_statement": "Write a function to locate the left insertion point for a specified value in sorted order.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from bisect import bisect_left\n\ndef left_insertion(sorted_list, target_value):\n    \"\"\"\n    Finds the index where the target_value should be inserted to maintain \n    the sorted order of the list.\n    \n    :param sorted_list: List of integers sorted in ascending order.\n    :param target_value: Integer value to insert.\n    :return: Index at which the target_value should be inserted.\n    \"\"\"\n    return bisect_left(sorted_list, target_value)",
    "test_cases": [
      "assert left_insertion([1,2,4,5],6)==4",
      "assert left_insertion([1,2,4,5],3)==2",
      "assert left_insertion([1,2,4,5],7)==4"
    ]
  },
  {
    "mbpp_id": 737,
    "problem_statement": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 3 failed"
    ],
    "generated_code": "import re\n\ndef check_str(str_input):\n    \"\"\"\n    Check if the input string starts with a vowel.\n    \n    Parameters:\n    str_input (str): The string to be checked.\n    \n    Returns:\n    str: \"Valid\" if the string starts with a vowel, otherwise returns \"Invalid\".\n    \"\"\"\n    pattern = r'^[aeiou]'\n    result = re.match(pattern, str_input)\n    if result:\n        return 'Valid'\n    else:\n        return 'Invalid'\n\n# Test Cases\nassert check_str(\"annie\") == 'Valid', \"Test case 1 failed\"\nassert check_str(\"dawood\") == 'Invalid', \"Test case 2 failed\"\nassert check_str(\"Else\") == 'Valid', \"Test case 3 failed\"\n\nprint('All test cases passed!')",
    "test_cases": [
      "assert check_str(\"annie\") == 'Valid'",
      "assert check_str(\"dawood\") == 'Invalid'",
      "assert check_str(\"Else\") == 'Valid'"
    ]
  },
  {
    "mbpp_id": 738,
    "problem_statement": "Write a function to calculate the geometric sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n    \n    Args:\n        n (int): The input number.\n        \n    Returns:\n        float: The geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1/((n - 1)**2) + geometric_sum(n - 1)",
    "test_cases": [
      "assert geometric_sum(7) == 1.9921875",
      "assert geometric_sum(4) == 1.9375",
      "assert geometric_sum(8) == 1.99609375"
    ]
  },
  {
    "mbpp_id": 739,
    "problem_statement": "Write a python function to find the index of smallest triangular number with n digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'n' is not defined"
    ],
    "generated_code": "def is_triangle(num):\n    \"\"\"Check if 'num' can form the base of a triangle.\"\"\"\n    return num * (num + 1) // 2 <= 10**n\n\ndef find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with exactly 'n' digits.\n    \n    Args:\n    n (int): The desired length in digits for the triangular numbers.\n    \n    Returns:\n    int: The index of the smallest triangular number with 'n' digits.\n    \"\"\"\n    start = 1\n    end = 10**n - 1\n    \n    while start < end:\n        mid = (start + end) // 2\n        \n        if is_triangle(mid):\n            end = mid\n        else:\n            start = mid + 1\n            \n    return start\n\n# Test Cases\nassert find_Index(2) == 4, \"Test case 1 failed\"\nassert find_Index(3) == 14, \"Test case 2 failed\"\nassert find_Index(4) == 45, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_Index(2) == 4",
      "assert find_Index(3) == 14",
      "assert find_Index(4) == 45"
    ]
  },
  {
    "mbpp_id": 740,
    "problem_statement": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def tuple_to_dict(tup):\n    \"\"\"\n    Convert a tuple into a dictionary where each element is mapped to its index.\n    \n    Parameters:\n    tup (tuple): The input tuple of numbers.\n    \n    Returns:\n    dict: A dictionary with elements as keys and their indices as values.\n    \"\"\"\n    result = {}\n    for i, value in enumerate(tup):\n        result[value] = i\n    return result\n\n# Check function with provided data points\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}, \"Test case 1 failed\"\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}, \"Test case 2 failed\"\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
      "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
      "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"
    ]
  },
  {
    "mbpp_id": 741,
    "problem_statement": "Write a python function to check whether all the characters are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Characters_Same(str_input):\n    # Check if the input string has more than one unique character\n    if len(set(str_input)) < len(str_input):\n        return False\n    else:\n        return True\n\n# Test cases\nprint(all_Characters_Same(\"python\"))  # Expected output: False\nprint(all_Characters_Same(\"aaa\"))     # Expected output: True\nprint(all_Characters_Same(\"data\"))    # Expected output: False",
    "test_cases": [
      "assert all_Characters_Same(\"python\") == False",
      "assert all_Characters_Same(\"aaa\") == True",
      "assert all_Characters_Same(\"data\") == False"
    ]
  },
  {
    "mbpp_id": 742,
    "problem_statement": "Write a function to caluclate the area of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef area_tetrahedron(side_length):\n    # The formula for calculating the surface area of a regular tetrahedron is:\n    # A = sqrt(3) * s^2, where 's' is the side length of the tetrahedron.\n    return round(math.sqrt(3) * pow(side_length, 2), 8)",
    "test_cases": [
      "assert area_tetrahedron(3)==15.588457268119894",
      "assert area_tetrahedron(20)==692.8203230275509",
      "assert area_tetrahedron(10)==173.20508075688772"
    ]
  },
  {
    "mbpp_id": 743,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the right direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_right(lst, n, k):\n    lst = lst[-k:] + lst[:-k]\n    return lst\n\n# Test cases\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)) # Output: [8, 9, 10, 1, 2, 3, 4, 5]\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2))   # Output: [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))   # Output: [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]",
    "test_cases": [
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]",
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
    ]
  },
  {
    "mbpp_id": 744,
    "problem_statement": "Write a function to check if the given tuple has any none value or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_none(tup):\n    for item in tup:\n        if item is None:\n            return True\n    return False",
    "test_cases": [
      "assert check_none((10, 4, 5, 6, None)) == True",
      "assert check_none((7, 8, 9, 11, 14)) == False",
      "assert check_none((1, 2, 3, 4, None)) == True"
    ]
  },
  {
    "mbpp_id": 745,
    "problem_statement": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if all(int(digit) != 0 and int(num) % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result",
    "test_cases": [
      "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
      "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
      "assert divisible_by_digits(20,25)==[22, 24]"
    ]
  },
  {
    "mbpp_id": 746,
    "problem_statement": "Write a function to find area of a sector.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef sector_area(radius, angle_in_degrees):\n    # Check if the input is valid for an arc length calculation\n    if radius <= 0 or angle_in_degrees < 0:\n        return None\n    \n    # Calculate the area using formula for the area of a sector\n    area = (angle_in_degrees / 360) * math.pi * (radius ** 2)\n    \n    return round(area, 5)",
    "test_cases": [
      "assert sector_area(4,45)==6.285714285714286",
      "assert sector_area(9,45)==31.82142857142857",
      "assert sector_area(9,360)==None"
    ]
  },
  {
    "mbpp_id": 747,
    "problem_statement": "Write a function to find the longest common subsequence for the given three string sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def lcs_of_three(x, y, z, m, n, k):\n    # Initialize DP table with zeros\n    dp = [[0] * (k + 1) for _ in range(m + 1)]\n    \n    # Fill the DP table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if x[i - 1] == y[j - 1] == z[k - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the LCS is stored in dp[m][n]\n    return dp[m][n]\n\n# Test cases\nprint(lcs_of_three(\"AGGT12\", \"12TXAYB\", \"12XBA\", 6, 7, 5))  # Expected output: 2\nprint(lcs_of_three(\"Reels\", \"Reelsfor\", \"ReelsforReels\", 5, 8, 13))  # Expected output: 5\nprint(lcs_of_three(\"abcd1e2\", \"bc12ea\", \"bd1ea\", 7, 6, 5))  # Expected output: 3",
    "test_cases": [
      "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2",
      "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ",
      "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"
    ]
  },
  {
    "mbpp_id": 748,
    "problem_statement": "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'capital_words_spaces' is not defined",
      "Test 2: FAIL - name 'capital_words_spaces' is not defined",
      "Test 3: FAIL - name 'capital_words_spaces' is not defined"
    ],
    "generated_code": "import re\n\ndef capitalize_and_add_spaces(text):\n    # Use regular expression to find all word boundaries where uppercase letters start\n    matches = re.finditer(r'[A-Z]', text)\n    \n    # Initialize an empty result list\n    result_list = []\n    \n    # Iterate through each match and append it followed by space to the result list\n    for match in matches:\n        result_list.append(match.group() + ' ')\n    \n    # Join the list elements into a single string separated by spaces\n    return ''.join(result_list)\n\n# Test cases\nprint(capitalize_and_add_spaces('Python'))       # Expected output: \"Python\"\nprint(capitalize_and_add_spaces('PythonProgrammingExamples'))   # Expected output: \"Python Programming Examples\"\nprint(capitalize_and_add_spaces('GetReadyToBeCodingFreak'))   # Expected output: \"Get Ready To Be Coding Freak\"",
    "test_cases": [
      "assert capital_words_spaces(\"Python\") == 'Python'",
      "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
      "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
    ]
  },
  {
    "mbpp_id": 749,
    "problem_statement": "Write a function to sort a given list of strings of numbers numerically.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])",
    "test_cases": [
      "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
      "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
      "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
    ]
  },
  {
    "mbpp_id": 750,
    "problem_statement": "Write a function to add the given tuple to the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_tuple(lst, tpl):\n    lst.extend(tpl)\n    return lst",
    "test_cases": [
      "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
      "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]",
      "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"
    ]
  },
  {
    "mbpp_id": 751,
    "problem_statement": "Write a function to check if the given array represents min heap or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_min_heap(arr, index=0):\n    n = len(arr)\n    \n    # Base case: an empty array is considered a valid min heap\n    if n == 0:\n        return True\n    \n    # Check if each node's value is less than its children's values and if left child exists for non-leaf nodes\n    def verify_node(i):\n        if i < n:\n            if i * 2 + 1 < n and arr[i] > arr[i * 2 + 1]:\n                return False\n            if i * 2 + 2 < n and arr[i] > arr[i * 2 + 2]:\n                return False\n            \n            if i * 2 + 1 < n:\n                verify_node(i * 2 + 1)\n            if i * 2 + 2 < n:\n                verify_node(i * 2 + 2)\n    \n    # Start verifying from root\n    verify_node(0)\n    \n    return True",
    "test_cases": [
      "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True",
      "assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True",
      "assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"
    ]
  },
  {
    "mbpp_id": 752,
    "problem_statement": "Write a function to find the nth jacobsthal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def jacobsthal_num(n):\n    # Initialize the base case for n=0 and n=1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Calculate the Jacobsthal numbers iteratively\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + 2 * b\n    return b\n\n# Test cases to verify the correctness of the solution\nprint(jacobsthal_num(5))  # Expected output: 11\nprint(jacobsthal_num(2))  # Expected output: 1\nprint(jacobsthal_num(4))  # Expected output: 5",
    "test_cases": [
      "assert jacobsthal_num(5) == 11",
      "assert jacobsthal_num(2) == 1",
      "assert jacobsthal_num(4) == 5"
    ]
  },
  {
    "mbpp_id": 753,
    "problem_statement": "Write a function to find minimum k records from tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\nimport heapq\n\ndef min_k(lst: List[Tuple[str, int]], k: int) -> List[Tuple[str, int]]:\n    # Convert the list of tuples into a max heap\n    max_heap = [-x[1] for x in lst]\n    heapq.heapify(max_heap)\n    \n    result = []\n    while k > 0:\n        val = -heapq.heappop(max_heap)  # Get maximum value, negative because we used a max heap\n        result.append((max_heap[0], -val))  # Revert back to positive and re-convert to original order\n        k -= 1\n    \n    return [item for _, item in result]",
    "test_cases": [
      "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
      "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
      "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
    ]
  },
  {
    "mbpp_id": 754,
    "problem_statement": "Write a function to find common index elements from three lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def extract_index_list(list1, list2, list3):\n    return [index for index in range(len(list1)) if list1[index] == list2[index] and list2[index] == list3[index]]\n\n# Test case 1\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]\n\n# Test case 2\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]) == [1, 6]\n\n# Test case 3\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 5]",
    "test_cases": [
      "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
      "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
      "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"
    ]
  },
  {
    "mbpp_id": 755,
    "problem_statement": "Write a function to find the second smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef second_smallest(nums: List[int]) -> float:\n    unique_nums = set(nums)  # Remove duplicates and convert list to set for uniqueness check\n    sorted_nums = sorted(unique_nums)\n    if len(sorted_nums) < 2:\n        return None  # If there are less than two unique numbers, no second smallest exists\n    else:\n        return sorted_nums[1]  # Return the second element of the sorted set which is the second smallest number",
    "test_cases": [
      "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
      "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
      "assert second_smallest([2,2])==None"
    ]
  },
  {
    "mbpp_id": 756,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or one 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match_zero_one(text):\n    # Define the pattern to match strings containing 'a' followed by zero or one 'b'\n    pattern = r'^a(b)?$'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_zero_one(\"ac\")==('Found a match!')",
      "assert text_match_zero_one(\"dc\")==('Not matched!')",
      "assert text_match_zero_one(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 757,
    "problem_statement": "Write a function to count the pairs of reverse strings in the given string list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_reverse_pairs(lst):\n    # Convert each string to lowercase and reverse it.\n    lst = [i[::-1].lower() for i in lst]\n    # Create a set to store unique reversed words to avoid duplicates like \"make\" and \"kema\".\n    word_set = set(lst)\n    # Count the number of pairs where one word is the reverse of another.\n    return len([word for word in word_set if word[:-1] == word[::-1]]) / len(word_set) * len(word_set)\n\n# Test cases\nprint(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]))  # Should print '2'\nprint(count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]))  # Should print '1'\nprint(count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]))  # Should print '2'",
    "test_cases": [
      "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'",
      "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'",
      "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' "
    ]
  },
  {
    "mbpp_id": 758,
    "problem_statement": "Write a function to count number of unique lists within a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_sublists(lists):\n    from collections import defaultdict\n    \n    # Group lists by their tuple representation and store in dictionary\n    result = defaultdict(int)\n    for sublist in lists:\n        # Convert each sublist to a tuple for comparison\n        t = tuple(sublist)\n        # Increment the count for each unique tuple\n        result[t] += 1\n        \n    # Create a dictionary with tuples as keys and counts as values\n    return {t: c for t, c in result.items() if c > 1}\n\n# Test cases\nprint(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])) \nprint(unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]))\nprint(unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]))",
    "test_cases": [
      "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
      "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
      "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}"
    ]
  },
  {
    "mbpp_id": 759,
    "problem_statement": "Write a function to check a decimal with a precision of 2.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(decimal_str):\n    # Check if the string matches the pattern for a valid number with exactly two digits after the decimal point\n    return bool(re.match(r'^\\d+(\\.\\d{2})?$', decimal_str))",
    "test_cases": [
      "assert is_decimal('123.11')==True",
      "assert is_decimal('e666.86')==False",
      "assert is_decimal('3.124587')==False"
    ]
  },
  {
    "mbpp_id": 760,
    "problem_statement": "Write a python function to check whether an array contains only one distinct element or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_Element(arr, n):\n    # Check if all elements in the array are the same\n    return len(set(arr)) == 1 and arr[0] != None",
    "test_cases": [
      "assert unique_Element([1,1,1],3) == 'YES'",
      "assert unique_Element([1,2,1,2],4) == 'NO'",
      "assert unique_Element([1,2,3,4,5],5) == 'NO'"
    ]
  },
  {
    "mbpp_id": 761,
    "problem_statement": "Write a function to caluclate arc length of an angle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef arc_length(angle, radius):\n    if angle == 9 and math.radians(angle) / (math.pi * 2 * radius) > 0:\n        return round(math.sqrt(radius**2 - ((radius * math.sin(math.radians(angle))) ** 2)), 5)\n    else:\n        return None",
    "test_cases": [
      "assert arc_length(9,45)==3.5357142857142856",
      "assert arc_length(9,480)==None",
      "assert arc_length(5,270)==11.785714285714285"
    ]
  },
  {
    "mbpp_id": 762,
    "problem_statement": "Write a function to check whether the given month number contains 30 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_monthnumber_number' is not defined",
      "Test 2: FAIL - name 'check_monthnumber_number' is not defined",
      "Test 3: FAIL - name 'check_monthnumber_number' is not defined"
    ],
    "generated_code": "def check_monthnumber(month_number):\n    # List of months with 30 days\n    thirty_day_months = [4, 6, 9, 11]\n    \n    # Check if the month number is in the list of months with 30 days\n    return month_number in thirty_day_months",
    "test_cases": [
      "assert check_monthnumber_number(6)==True",
      "assert check_monthnumber_number(2)==False",
      "assert check_monthnumber_number(12)==False"
    ]
  },
  {
    "mbpp_id": 763,
    "problem_statement": "Write a python function to find the minimum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def find_Min_Diff(arr, k):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff + k",
    "test_cases": [
      "assert find_Min_Diff((1,5,3,19,18,25),6) == 1",
      "assert find_Min_Diff((4,3,2,6),4) == 1",
      "assert find_Min_Diff((30,5,20,9),4) == 4"
    ]
  },
  {
    "mbpp_id": 764,
    "problem_statement": "Write a python function to count numeric values in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def number_ctr(s):\n    import re\n    # Find all occurrences of numbers in the string using regular expression\n    nums = re.findall(r'\\d+', s)\n    # Return the length of the list of found numbers\n    return len(nums)",
    "test_cases": [
      "assert number_ctr('program2bedone') == 1",
      "assert number_ctr('3wonders') ==1",
      "assert number_ctr('123') == 3"
    ]
  },
  {
    "mbpp_id": 765,
    "problem_statement": "Write a function to find nth polite number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def is_polite(n):\n    # Function to check if a number is polite\n    def is_polite_check(num):\n        count = 0\n        for i in range(1, num + 1):\n            while num % i == 0:\n                num //= i\n                count += 1\n        return True if count > 1 else False\n    \n    n -= 1  # Convert to 0-based index as functions expect 1-indexed indices\n    return sum(is_polite_check(i) for i in range(n)) + 1",
    "test_cases": [
      "assert is_polite(7) == 11",
      "assert is_polite(4) == 7",
      "assert is_polite(9) == 13"
    ]
  },
  {
    "mbpp_id": 766,
    "problem_statement": "Write a function to iterate over all pairs of consecutive items in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pair_wise(lst):\n    result = []\n    for i in range(len(lst)):\n        if i < len(lst) - 1:\n            result.append((lst[i], lst[i + 1]))\n    return result",
    "test_cases": [
      "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
      "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
      "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
    ]
  },
  {
    "mbpp_id": 767,
    "problem_statement": "Write a python function to count the number of pairs whose sum is equal to ‘sum’.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Pairs_Count(arr, target_sum, n):\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    \n    while left < right:\n        current_sum = arr[left] + arr[right]\n        \n        if current_sum == target_sum:\n            count += 1\n            left += 1\n            right -= 1\n            \n        elif current_sum < target_sum:\n            left += 1\n        \n        else:\n            right -= 1\n    \n    return count",
    "test_cases": [
      "assert get_Pairs_Count([1,1,1,1],4,2) == 6",
      "assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3",
      "assert get_Pairs_Count([1,-2,3],3,1) == 1"
    ]
  },
  {
    "mbpp_id": 768,
    "problem_statement": "Write a python function to check for odd parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Odd_Parity(n):\n    \"\"\"\n    This function checks if the given integer n has an odd number of set bits (1s).\n    \n    Args:\n        n (int): The integer whose parity is to be checked.\n        \n    Returns:\n        bool: True if the number has an odd number of set bits, False otherwise.\n    \"\"\"\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count % 2 == 1\n\n# Test Cases\nassert check_Odd_Parity(13) == True, \"Test case 1 failed\"\nassert check_Odd_Parity(21) == True, \"Test case 2 failed\"\nassert check_Odd_Parity(18) == False, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert check_Odd_Parity(13) == True",
      "assert check_Odd_Parity(21) == True",
      "assert check_Odd_Parity(18) == False"
    ]
  },
  {
    "mbpp_id": 769,
    "problem_statement": "Write a python function to get the difference between two lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Diff(list1, list2):\n    diff_list = []\n    for item in list1:\n        if item not in list2:\n            diff_list.append(item)\n    for item in list2:\n        if item not in list1:\n            diff_list.append(item)\n    return diff_list",
    "test_cases": [
      "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
      "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
      "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
    ]
  },
  {
    "mbpp_id": 770,
    "problem_statement": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1, 2):  # Iterate through the first n odd natural numbers\n        total_sum += i ** 4  # Add the fourth power of each odd number to the total sum\n    return total_sum\n\n# Test cases\nprint(odd_Num_Sum(2))  # Expected output: 82\nprint(odd_Num_Sum(3))  # Expected output: 707\nprint(odd_Num_Sum(4))  # Expected output: 3108",
    "test_cases": [
      "assert odd_Num_Sum(2) == 82",
      "assert odd_Num_Sum(3) == 707",
      "assert odd_Num_Sum(4) == 3108"
    ]
  },
  {
    "mbpp_id": 771,
    "problem_statement": "Write a function to check if the given expression is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: closing parenthesis ']' does not match opening parenthesis '('"
    ],
    "generated_code": "def check_expression(expression):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n        else:\n            continue\n    \n    return stack == []\n\n# Test cases\nprint(check_expression(\"{()}[{}]\"))  # Expected output: True\nprint(check_expression(\"{()}[{}\"]))  # Expected output: False\nprint(check_expression(\"{()}[{}][]({})\"))  # Expected output: True",
    "test_cases": [
      "assert check_expression(\"{()}[{}]\") == True",
      "assert check_expression(\"{()}[{]\") == False",
      "assert check_expression(\"{()}[{}][]({})\") == True"
    ]
  },
  {
    "mbpp_id": 772,
    "problem_statement": "Write a function to remove all the words with k length in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_length(input_str, k):\n    result = ''\n    for char in input_str:\n        if len(result) == k and not char.isdigit():\n            continue\n        elif len(result) > k:\n            break\n        else:\n            result += char\n    return result",
    "test_cases": [
      "assert remove_length('The person is most value tet', 3) == 'person is most value'",
      "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'",
      "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"
    ]
  },
  {
    "mbpp_id": 773,
    "problem_statement": "Write a function to find the occurrence and position of the substrings within a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def occurance_substring(main_str, substring):\n    pos = main_str.find(substring)\n    while pos != -1:\n        print(f\"{substring}, {pos + 1}\")\n        pos = main_str.find(substring, pos + len(substring))",
    "test_cases": [
      "assert occurance_substring('python programming, python language','python')==('python', 0, 6)",
      "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)",
      "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"
    ]
  },
  {
    "mbpp_id": 774,
    "problem_statement": "Write a function to check if the string is a valid email address or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_email(email):\n    # Regular expression for validating an Email\n    regex = r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    # Compile the ReGex\n    pattern = re.compile(regex)\n    # If the string is empty\n    if email == \"\":\n        return \"Invalid Email\"\n    else:\n        if(re.search(pattern, email)):\n            return \"Valid Email\"\n        else:\n            return \"Invalid Email\"\n\n# Test Cases\nprint(check_email(\"ankitrai326@gmail.com\"))  # Expected output: Valid Email\nprint(check_email(\"my.ownsite@ourearth.org\"))  # Expected output: Valid Email\nprint(check_email(\"ankitaoie326.com\"))  # Expected output: Invalid Email",
    "test_cases": [
      "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'",
      "assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'",
      "assert check_email(\"ankitaoie326.com\") == 'Invalid Email'"
    ]
  },
  {
    "mbpp_id": 775,
    "problem_statement": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'odd_position' is not defined",
      "Test 2: FAIL - name 'odd_position' is not defined",
      "Test 3: FAIL - name 'odd_position' is not defined"
    ],
    "generated_code": "def is_odd_index_odd(lst):\n    for i in range(1, len(lst), 2):  # Iterate through indices at odd positions\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nprint(is_odd_index_odd([2,1,4,3,6,7,6,3]))  # Expected output: True\nprint(is_odd_index_odd([4,1,2]))  # Expected output: True\nprint(is_odd_index_odd([1,2,3]))  # Expected output: False",
    "test_cases": [
      "assert odd_position([2,1,4,3,6,7,6,3]) == True",
      "assert odd_position([4,1,2]) == True",
      "assert odd_position([1,2,3]) == False"
    ]
  },
  {
    "mbpp_id": 776,
    "problem_statement": "Write a function to count those characters which have vowels as their neighbors in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_vowels(s):\n    vowel_count = 0\n    for i in range(1, len(s) - 1): \n        if s[i] in 'aeiou': \n            if s[i-1] in 'aeiou' and s[i+1] in 'aeiou': \n                vowel_count += 1 \n            elif s[i-1] not in 'aeiou' and s[i+1] not in 'aeiou':\n                vowel_count += 1\n    return vowel_count",
    "test_cases": [
      "assert count_vowels('bestinstareels') == 7",
      "assert count_vowels('partofthejourneyistheend') == 12",
      "assert count_vowels('amazonprime') == 5"
    ]
  },
  {
    "mbpp_id": 777,
    "problem_statement": "Write a python function to find the sum of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_Sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_Sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_Sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def find_Sum(arr):\n    unique_sum = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            unique_sum += arr[i]\n    return unique_sum\n\n# Test cases\nprint(find_Sum([1,2,3,1,1,4,5,6])) # Expected output: 21\nprint(find_Sum([1,10,9,4,2,10,10,45,4])) # Expected output: 71\nprint(find_Sum([12,10,9,45,2,10,10,45,10])) # Expected output: 78",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21",
      "assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71",
      "assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78"
    ]
  },
  {
    "mbpp_id": 778,
    "problem_statement": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pack_consecutive_duplicates(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + 1 < len(lst) and lst[i] == lst[i + 1]:\n            count += 1\n            i += 1\n        result.append(lst[i:i+count])\n        if i + count < len(lst):\n            i += count\n        else:\n            break\n    return result\n\n# Test cases\nprint(pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\nprint(pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\nprint(pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd']))",
    "test_cases": [
      "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
      "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]",
      "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
    ]
  },
  {
    "mbpp_id": 779,
    "problem_statement": "Write a function to count the number of unique lists within a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef unique_sublists(lst):\n    \"\"\"\n    This function takes a list of lists and returns a dictionary where keys are tuples representing unique sublists \n    found in the input list and values are the counts of how many times each sublist appears.\n    \n    Args:\n    lst (list of lists): The input list containing sublists.\n    \n    Returns:\n    dict: A dictionary with tuple key and integer value indicating the frequency of occurrence for each unique sublist.\n    \"\"\"\n    seen = defaultdict(int)\n    result = defaultdict(int)\n    for sub in lst:\n        # Convert sub to tuple before adding it to the set to check uniqueness\n        t = tuple(sub)\n        if t not in seen:\n            seen[t] += 1\n            result[tuple(sub)] += 1\n    return result",
    "test_cases": [
      "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
      "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
      "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"
    ]
  },
  {
    "mbpp_id": 780,
    "problem_statement": "Write a function to find the combinations of sums with tuples in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef find_combinations(tuples_list: List[Tuple[int]]) -> List[Tuple[int]]:\n    \"\"\"\n    Generate all unique combinations of two integers from the provided list of tuples.\n    \n    Args:\n    tuples_list (List[Tuple[int]]): A list of tuples containing integer elements.\n    \n    Returns:\n    List[Tuple[int]]: A list of unique combinations where each combination is a tuple of two integers.\n    \"\"\"\n    result = []\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            result.append((tuples_list[i][0] + tuples_list[j][0], tuples_list[i][1] + tuples_list[j][1]))\n    return result\n\n# Check function with provided data points\nprint(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])) # Expected output: [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nprint(find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)])) # Expected output: [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nprint(find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)])) # Expected output: [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
    "test_cases": [
      "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
      "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]",
      "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
    ]
  },
  {
    "mbpp_id": 781,
    "problem_statement": "Write a python function to check whether the count of divisors is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Divisors(num):\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
    "test_cases": [
      "assert count_Divisors(10) == \"Even\"",
      "assert count_Divisors(100) == \"Odd\"",
      "assert count_Divisors(125) == \"Even\""
    ]
  },
  {
    "mbpp_id": 782,
    "problem_statement": "Write a python function to find the sum of all odd length subarrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Odd_Length_Sum(arr):\n    result = 0\n    n = len(arr)\n    \n    for i in range(n):\n        # Calculate prefix sums and check if their indices form an odd-length array\n        for j in range(i + 1, n - i):\n            if j % 2 == 1:\n                result += arr[i] * (j - i) * (n - 1 - j + i + 1)\n                \n    return result",
    "test_cases": [
      "assert Odd_Length_Sum([1,2,4]) == 14",
      "assert Odd_Length_Sum([1,2,1,2]) == 15",
      "assert Odd_Length_Sum([1,7]) == 8"
    ]
  },
  {
    "mbpp_id": 783,
    "problem_statement": "Write a function to convert rgb color to hsv color.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'NoneType' object is not subscriptable",
      "Test 2: FAIL - 'NoneType' object is not subscriptable",
      "Test 3: FAIL - 'NoneType' object is not subscriptable"
    ],
    "generated_code": "import numpy as np\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts RGB values into HSV color space representation.\n    \n    Args:\n        r (float): Red component of the RGB value.\n        g (float): Green component of the RGB value.\n        b (float): Blue component of the RGB value.\n        \n    Returns:\n        tuple: A tuple containing Hue (in degrees), Saturation (between 0 and 1),\n               and Value (between 0 and 1) for the given RGB input.\n    \"\"\"\n    # Convert RGB to XYZ\n    xyz = rgb_to_xyz(r, g, b)\n\n    # Convert XYZ to Yxy\n    yxy = xyz_to_yxy(xyz[0], xyz[1], xyz[2])\n\n    # Calculate the CIE chromaticity coordinates x', y' in Yxy\n    x_prime, y_prime = xy_to_cie(yxy[0], yxy[1])\n\n    # Find hue angle (Hue in degrees)\n    hue = np.arctan2((y_prime - x_prime), 2 * (x_prime + y_prime)) / (np.pi / 2)\n\n    # Calculate saturation (S)\n    max_value = np.max([r, g, b])\n    min_value = np.min([r, g, b])\n    sat = (max_value - min_value) / max_value if max_value > min_value else 0\n    \n    # Calculate brightness (Value V)\n    value = np.max([r, g, b]) if max_value == np.max([r, g, b]) else np.mean([r, g, b])\n    \n    return hue, sat, value\n\n# Dummy conversion functions for XYZ, yxy, xy_to_cie used in test cases\ndef rgb_to_xyz(r, g, b):\n    pass\n\ndef xyz_to_yxy(xyz):\n    pass\n\ndef xy_to_cie(x_prime, y_prime):\n    pass",
    "test_cases": [
      "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)",
      "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)",
      "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"
    ]
  },
  {
    "mbpp_id": 784,
    "problem_statement": "Write a function to find the product of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "def mul_even_odd(nums):\n    # Check if there is at least one even number in the list\n    if not any(x % 2 == 0 for x in nums):\n        return None  # Return None if no even numbers exist\n    \n    # Calculate the product of all elements in the list\n    total = reduce(lambda x, y: x * y, nums)\n    \n    # Extract the last element from the product as it represents the product of all odd numbers\n    product_of_odds = total // next((x for x in total if x % 2 != 0), 1)\n    \n    return product_of_odds",
    "test_cases": [
      "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert mul_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 785,
    "problem_statement": "Write a function to convert tuple string to integer tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Converts a string representation of tuples with integers separated by commas into actual integer tuples.\n    \n    Args:\n    tuple_str (str): A string where each element is an integer enclosed in parentheses and separated by commas.\n    \n    Returns:\n    tuple: An integer tuple converted from the input string.\n    \"\"\"\n    # Split the string by commas, then split each part by inner parentheses, filter out empty strings,\n    # convert the remaining elements back to integers, and join them together as a single string which will be turned into a tuple.\n    result = tuple(int(x) for x in tuple_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\"))\n    return result\n\n# Test cases to verify the correctness of the solution\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9), \"Test case 1 failed\"\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3), \"Test case 2 failed\"\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)",
      "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
      "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)"
    ]
  },
  {
    "mbpp_id": 786,
    "problem_statement": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef right_insertion(sorted_list: List[int], target: int) -> int:\n    low, high = 0, len(sorted_list)\n    while low < high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_cases": [
      "assert right_insertion([1,2,4,5],6)==4",
      "assert right_insertion([1,2,4,5],3)==2",
      "assert right_insertion([1,2,4,5],7)==4"
    ]
  },
  {
    "mbpp_id": 787,
    "problem_statement": "Write a function that matches a string that has an a followed by three 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def text_match_three(text):\n    if not isinstance(text, str) or len(text) < 4:\n        return \"Not matched!\"\n    \n    if text[0] == 'a' and text[1:] == 'bb':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_three(\"ac\")==('Not matched!')",
      "assert text_match_three(\"dc\")==('Not matched!')",
      "assert text_match_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 788,
    "problem_statement": "Write a function to create a new tuple from the given string and list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def new_tuple(list1, string):\n    # Split the string into words and then zip with the list of characters.\n    # This will combine elements from both lists into tuples.\n    result = [char + word for char, word in zip(string.split(), list1)]\n    # Join all elements in the list to form a single tuple.\n    return tuple(result)",
    "test_cases": [
      "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')",
      "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')",
      "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"
    ]
  },
  {
    "mbpp_id": 789,
    "problem_statement": "Write a function to calculate the perimeter of a regular polygon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_polygon(n_sides, side_length):\n    return n_sides * side_length",
    "test_cases": [
      "assert perimeter_polygon(4,20)==80",
      "assert perimeter_polygon(10,15)==150",
      "assert perimeter_polygon(9,7)==63"
    ]
  },
  {
    "mbpp_id": 790,
    "problem_statement": "Write a python function to check whether every even index contains even numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'even_position' is not defined",
      "Test 2: FAIL - name 'even_position' is not defined",
      "Test 3: FAIL - name 'even_position' is not defined"
    ],
    "generated_code": "def is_even_indexed_even(numbers):\n    \"\"\"\n    Check if all even indices in the given list contain even numbers.\n    \n    Parameters:\n    numbers (list): A list of integers\n    \n    Returns:\n    bool: True if all even indices have even numbers, False otherwise\n    \"\"\"\n    for i in range(2, len(numbers), 2):\n        if numbers[i] % 2 != 0:\n            return False\n    return True",
    "test_cases": [
      "assert even_position([3,2,1]) == False",
      "assert even_position([1,2,3]) == False",
      "assert even_position([2,1,4]) == True"
    ]
  },
  {
    "mbpp_id": 791,
    "problem_statement": "Write a function to remove the nested record from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object does not support item assignment",
      "Test 2: FAIL - 'tuple' object does not support item assignment",
      "Test 3: FAIL - 'tuple' object does not support item assignment"
    ],
    "generated_code": "def remove_nested(data):\n    # Iterate through each element in the tuple\n    for i in range(len(data)):\n        # If the current element is a tuple, recursively call the function with the nested tuple\n        if isinstance(data[i], tuple):\n            data[i] = remove_nested(data[i])\n    # Return the modified list\n    return data",
    "test_cases": [
      "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)",
      "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
      "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)"
    ]
  },
  {
    "mbpp_id": 792,
    "problem_statement": "Write a python function to count the number of lists in a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_list(lst_of_lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the total number of sublists within it.\n    \n    Parameters:\n        lst_of_lists (list): A list containing other lists.\n        \n    Returns:\n        int: The total number of sublists in the input list.\n    \"\"\"\n    # Count all elements in the outer list and inner lists\n    total_count = len(lst_of_lists)\n    for sublist in lst_of_lists:\n        if isinstance(sublist, list):\n            total_count += len(sublist)\n    return total_count\n\n# Test cases\nprint(count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]))  # Expected output: 4\nprint(count_list([[1,2],[2,3],[4,5]]))  # Expected output: 3\nprint(count_list([[1,0],[2,0]]))  # Expected output: 2",
    "test_cases": [
      "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
      "assert count_list([[1,2],[2,3],[4,5]]) == 3",
      "assert count_list([[1,0],[2,0]]) == 2"
    ]
  },
  {
    "mbpp_id": 793,
    "problem_statement": "Write a python function to find the last position of an element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def last(arr, x, n):\n    # Find the index of the rightmost occurrence of 'x'\n    i = -1\n    for j in range(n-1, -1, -1):\n        if arr[j] == x:\n            i = j\n    return i",
    "test_cases": [
      "assert last([1,2,3],1,3) == 0",
      "assert last([1,1,1,2,3,4],1,6) == 2",
      "assert last([2,3,2,3,6,8,9],3,8) == 3"
    ]
  },
  {
    "mbpp_id": 794,
    "problem_statement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_starta_endb(text):\n    # Regular expression to find \"a\" followed by any character and ends with \"b\"\n    pattern = r'^.*a.*b$'\n    \n    # Check if the input text matches the pattern\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_starta_endb(\"aabbbb\"))   # Expected output: Found a match!\nprint(text_starta_endb(\"aabAbbbc\")) # Expected output: Not matched!\nprint(text_starta_endb(\"accddbbjjj\")) # Expected output: Not matched!",
    "test_cases": [
      "assert text_starta_endb(\"aabbbb\")==('Found a match!')",
      "assert text_starta_endb(\"aabAbbbc\")==('Not matched!')",
      "assert text_starta_endb(\"accddbbjjj\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 795,
    "problem_statement": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '<' not supported between instances of 'dict' and 'dict'"
    ],
    "generated_code": "import heapq\n\ndef cheapest_items(dataset, k):\n    # Initialize an empty list for results and a max heap with negative prices\n    res = []\n    max_heap = [(-item['price'], item) for item in dataset]\n    \n    # Extract the top k items with the lowest price\n    for _ in range(k):\n        if not max_heap:\n            break\n        _, current_item = heapq.heappop(max_heap)\n        heapq.heappush(res, current_item)\n\n    return res[:k]\n\n# Test cases to verify the correctness of the function\ndataset1 = [{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}]\nassert cheapest_items(dataset1, 1) == [{'name': 'Item-1', 'price': 101.1}]\n\ndataset2 = [{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, \n            {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}]\nassert cheapest_items(dataset2, 2) == [{'name': 'Item-4', 'price': 22.75},\n                                       {'name': 'Item-1', 'price': 101.1}]\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]",
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]",
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]"
    ]
  },
  {
    "mbpp_id": 796,
    "problem_statement": "Write function to find the sum of all items in the given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def return_sum(input_dict):\n    # Calculate and return the sum of all values in the input dictionary\n    total = sum(input_dict.values())\n    return total",
    "test_cases": [
      "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600",
      "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88",
      "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"
    ]
  },
  {
    "mbpp_id": 797,
    "problem_statement": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_in_Range(l, r):\n    # Initialize sum\n    total_sum = 0\n    \n    # Iterate from 'l' to 'r'\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total_sum += num\n            \n    return total_sum",
    "test_cases": [
      "assert sum_in_Range(2,5) == 8",
      "assert sum_in_Range(5,7) == 12",
      "assert sum_in_Range(7,13) == 40"
    ]
  },
  {
    "mbpp_id": 798,
    "problem_statement": "Write a python function to find the sum of an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def _sum(arr):\n    # Initialize total sum\n    total_sum = 0\n    \n    # Iterate through each number in the array and add it to total_sum\n    for num in arr:\n        total_sum += num\n    \n    return total_sum",
    "test_cases": [
      "assert _sum([1, 2, 3]) == 6",
      "assert _sum([15, 12, 13, 10]) == 50",
      "assert _sum([0, 1, 2]) == 3"
    ]
  },
  {
    "mbpp_id": 799,
    "problem_statement": "Write a python function to left rotate the bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def left_Rotate(n, d):\n    \"\"\"\n    Left rotates the bits of a given number.\n    \n    Parameters:\n    n (int): The number whose bits need to be rotated.\n    d (int): The number of positions to shift the bits to the left.\n    \n    Returns:\n    int: The result after performing the left rotation on 'n'.\n    \"\"\"\n    # Ensure d is within the range [0, 32)\n    d = d % 32\n    \n    # Extract lower and higher parts of n based on d\n    higher_part = (n >> d) & ((1 << d) - 1)\n    lower_part = n & ~(1 << d)\n    \n    # Combine the two parts with XOR operation\n    result = higher_part ^ lower_part\n    \n    return result",
    "test_cases": [
      "assert left_Rotate(16,2) == 64",
      "assert left_Rotate(10,2) == 40",
      "assert left_Rotate(99,3) == 792"
    ]
  },
  {
    "mbpp_id": 800,
    "problem_statement": "Write a function to remove all whitespaces from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_all_spaces(s):\n    return ''.join(s.split())",
    "test_cases": [
      "assert remove_all_spaces('python  program')==('pythonprogram')",
      "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')",
      "assert remove_all_spaces('python                     program')==('pythonprogram')"
    ]
  },
  {
    "mbpp_id": 801,
    "problem_statement": "Write a python function to count the number of equal numbers from three given integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function counts how many times each integer appears in the list [x, y, z].\n    It returns the highest count of any single integer.\n    \n    Args:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n    \n    Returns:\n    int: The maximum number of times an integer appears among x, y, and z.\n    \"\"\"\n    # Create a dictionary to count occurrences of each number\n    num_counts = {x: 0, y: 0, z: 0}\n    \n    for num in [x, y, z]:\n        num_counts[num] += 1\n    \n    # Find the maximum occurrence\n    max_occurrence = max(num_counts.values())\n    \n    return max_occurrence",
    "test_cases": [
      "assert test_three_equal(1,1,1) == 3",
      "assert test_three_equal(-1,-2,-3) == 0",
      "assert test_three_equal(1,2,2) == 2"
    ]
  },
  {
    "mbpp_id": 802,
    "problem_statement": "Write a python function to count the number of rotations required to generate a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Rotation(arr, n):\n    left = 0\n    right = n - 1\n    while arr[left] > arr[right]:\n        if right - left == 1:\n            return right + 1\n        mid = (left + right) // 2\n        if arr[mid] <= arr[left-1]:\n            return mid\n        elif arr[mid] >= arr[left]:\n            left = mid\n        else:\n            right = mid\n\n# Example usage and test cases\nprint(count_Rotation([3,2,1], 3))  # Expected output: 1\nprint(count_Rotation([4,5,1,2,3], 5))  # Expected output: 2\nprint(count_Rotation([7,8,9,1,2,3], 6))  # Expected output: 3",
    "test_cases": [
      "assert count_Rotation([3,2,1],3) == 1",
      "assert count_Rotation([4,5,1,2,3],5) == 2",
      "assert count_Rotation([7,8,9,1,2,3],6) == 3"
    ]
  },
  {
    "mbpp_id": 803,
    "problem_statement": "Write a python function to check whether the given number is a perfect square or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Perfect_Square(n):\n    \"\"\"\n    This function checks if the given integer n is a perfect square.\n    \n    Parameters:\n    n (int): The number to be checked.\n    \n    Returns:\n    bool: True if n is a perfect square, False otherwise.\n    \"\"\"\n    import math\n    root = int(math.sqrt(n))\n    return root * root == n",
    "test_cases": [
      "assert is_Perfect_Square(10) == False",
      "assert is_Perfect_Square(36) == True",
      "assert is_Perfect_Square(14) == False"
    ]
  },
  {
    "mbpp_id": 804,
    "problem_statement": "Write a python function to check whether the product of numbers is even or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Product_Even(numbers, target):\n    # Initialize a variable to keep track of the number of odd products found\n    odd_count = 0\n    \n    for num in numbers:\n        if num % 2 != 0:\n            odd_count += 1\n            \n    # If there's an odd count, multiply all numbers together results in an odd product.\n    if odd_count > 0:\n        return True\n    \n    else:\n        return False",
    "test_cases": [
      "assert is_Product_Even([1,2,3],3) == True",
      "assert is_Product_Even([1,2,1,4],4) == True",
      "assert is_Product_Even([1,1],2) == False"
    ]
  },
  {
    "mbpp_id": 805,
    "problem_statement": "Write a function to find the list in a list of lists whose sum of elements is the highest.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_list(lists):\n    return max(lists, key=sum)",
    "test_cases": [
      "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ",
      "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ",
      "assert max_sum_list([[2,3,1]])==[2,3,1] "
    ]
  },
  {
    "mbpp_id": 806,
    "problem_statement": "Write a function to find maximum run of uppercase characters in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_run_uppercase(s):\n    max_run = curr_run = 1\n    \n    for i in range(1, len(s)):\n        if s[i] >= s[i - 1]:\n            curr_run += 1\n        else:\n            max_run = max(max_run, curr_run)\n            curr_run = 1\n    \n    return max(max_run, curr_run)\n\n# Test cases\nprint(max_run_uppercase('GeMKSForGERksISBESt'))  # Output: 5\nprint(max_run_uppercase('PrECIOusMOVemENTSYT'))  # Output: 6\nprint(max_run_uppercase('GooGLEFluTTER'))       # Output: 4",
    "test_cases": [
      "assert max_run_uppercase('GeMKSForGERksISBESt') == 5",
      "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6",
      "assert max_run_uppercase('GooGLEFluTTER') == 4"
    ]
  },
  {
    "mbpp_id": 807,
    "problem_statement": "Write a python function to find the first odd number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_cases": [
      "assert first_odd([1,3,5]) == 1",
      "assert first_odd([2,4,1,3]) == 1",
      "assert first_odd ([8,9,1]) == 9"
    ]
  },
  {
    "mbpp_id": 808,
    "problem_statement": "Write a function to check if the given tuples contain the k or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_K(lst, k):\n    # Check if 'k' is in the list and return the boolean result.\n    return k in lst",
    "test_cases": [
      "assert check_K((10, 4, 5, 6, 8), 6) == True",
      "assert check_K((1, 2, 3, 4, 5, 6), 7) == False",
      "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"
    ]
  },
  {
    "mbpp_id": 809,
    "problem_statement": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_smaller(tuple_a, tuple_b):\n    for i in range(len(tuple_a)):\n        if tuple_a[i] >= tuple_b[i]:\n            return False\n    return True",
    "test_cases": [
      "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
      "assert check_smaller((4, 5, 6), (3, 4, 5)) == True",
      "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"
    ]
  },
  {
    "mbpp_id": 810,
    "problem_statement": "Write a function to iterate over elements repeating each as many times as its count.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_variable(n, *args):\n    return ['' for _ in range(n)] + [chr(97+i) for i in args]",
    "test_cases": [
      "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ",
      "assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] ",
      "assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"
    ]
  },
  {
    "mbpp_id": 811,
    "problem_statement": "Write a function to check if two lists of tuples are identical or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_identical(list1, list2):\n    # Check if both lists have the same number of elements and each tuple in both lists has the same number of items\n    if len(list1) != len(list2) or len(set(map(lambda x: len(x), list1))) > 1 or len(set(map(lambda x: len(x), list2))) > 1:\n        return False\n    else:\n        # Compare each corresponding element in both lists to determine if they are equal\n        for tup1, tup2 in zip(list1, list2):\n            if tup1 != tup2:\n                return False\n        return True\n\n# Test cases\nprint(check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]))  # Expected output: True\nprint(check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]))  # Expected output: False\nprint(check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]))  # Expected output: True",
    "test_cases": [
      "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True",
      "assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False",
      "assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True"
    ]
  },
  {
    "mbpp_id": 812,
    "problem_statement": "Write a function to abbreviate 'road' as 'rd.' in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def road_rd(s):\n    return s.replace('Road', 'Rd.')",
    "test_cases": [
      "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')",
      "assert road_rd(\"palnadu Road\")==('palnadu Rd.')",
      "assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')"
    ]
  },
  {
    "mbpp_id": 813,
    "problem_statement": "Write a function to find length of the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_length(s):\n    return len(s)",
    "test_cases": [
      "assert string_length('python')==6",
      "assert string_length('program')==7",
      "assert string_length('language')==8"
    ]
  },
  {
    "mbpp_id": 814,
    "problem_statement": "Write a function to find the area of a rombus.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rombus_area(side_a, side_c):\n    return 0.5 * side_a * side_c",
    "test_cases": [
      "assert rombus_area(10,20)==100",
      "assert rombus_area(10,5)==25",
      "assert rombus_area(4,2)==4"
    ]
  },
  {
    "mbpp_id": 815,
    "problem_statement": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_by_dnf(arr, n):\n    # Separate elements into three lists based on their values\n    zero_count = sum(1 for x in arr if x == 0)\n    one_count = sum(1 for x in arr if x == 1)\n    two_count = n - zero_count - one_count\n    \n    # Build the sorted list from these counts\n    sorted_arr = [0] * zero_count + [1] * one_count + [2] * two_count\n    return sorted_arr\n\n# Test cases\nprint(sort_by_dnf([1,2,0,1,0,1,2,1,1], 9))  # Expected output: [0, 0, 1, 1, 1, 1, 1, 2, 2]\nprint(sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10))  # Expected output: [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nprint(sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10))  # Expected output: [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
    "test_cases": [
      "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]",
      "assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
      "assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
    ]
  },
  {
    "mbpp_id": 816,
    "problem_statement": "Write a function to clear the values of the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def clear_tuple(tup):\n    return ()\n\n# Test cases\nprint(clear_tuple((1, 5, 3, 6, 8)))  # Expected output: ()\nprint(clear_tuple((2, 1, 4, 5, 6)))  # Expected output: ()\nprint(clear_tuple((3, 2, 5, 6, 8)))  # Expected output: ()",
    "test_cases": [
      "assert clear_tuple((1, 5, 3, 6, 8)) == ()",
      "assert clear_tuple((2, 1, 4 ,5 ,6)) == ()",
      "assert clear_tuple((3, 2, 5, 6, 8)) == ()"
    ]
  },
  {
    "mbpp_id": 817,
    "problem_statement": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def div_of_nums(nums, m, n):\n    return [num for num in nums if num % m == 0 or num % n == 0]\n\n# Test Cases\nprint(div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)) # Output: [19, 65, 57, 39, 152, 190]\nprint(div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)) # Output: [2, 5, 8, 10]\nprint(div_of_nums([10,15,14,13,18,12,20],10,5)) # Output: [10, 15, 20]",
    "test_cases": [
      "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]",
      "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]",
      "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]"
    ]
  },
  {
    "mbpp_id": 818,
    "problem_statement": "Write a python function to count lower case letters in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lower_ctr(s):\n    # Initialize counter for lowercase characters\n    lower_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is a lowercase letter and increment the counter\n        if 'a' <= char <= 'z':\n            lower_count += 1\n            \n    # Return the total count of lowercase letters\n    return lower_count",
    "test_cases": [
      "assert lower_ctr('abc') == 3",
      "assert lower_ctr('string') == 6",
      "assert lower_ctr('Python') == 5"
    ]
  },
  {
    "mbpp_id": 819,
    "problem_statement": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_duplic(nums):\n    result = []\n    freq_map = {}\n    for num in nums:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n        \n        result.append(freq_map.copy())\n        del freq_map[num]\n    \n    return result[-1], len(result[:-1])\n\n# Test cases\nprint(count_duplic([1,2,2,2,4,4,4,5,5,5,5]))  # Expected output: ([1, 2, 4, 5], [1, 3, 3, 4])\nprint(count_duplic([2,2,3,1,2,6,7,9]))       # Expected output: ([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nprint(count_duplic([2,1,5,6,8,3,4,9,10,11,8,12]))  # Expected output: ([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
    "test_cases": [
      "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])",
      "assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])",
      "assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ]
  },
  {
    "mbpp_id": 820,
    "problem_statement": "Write a function to check whether the given month number contains 28 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum_number(month_num):\n    if month_num == 2:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_monthnum_number(2)==True",
      "assert check_monthnum_number(1)==False",
      "assert check_monthnum_number(3)==False"
    ]
  },
  {
    "mbpp_id": 821,
    "problem_statement": "Write a function to merge two dictionaries into a single expression.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_cases": [
      "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}",
      "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}",
      "assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"
    ]
  },
  {
    "mbpp_id": 822,
    "problem_statement": "Write a function to return true if the password is valid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef pass_validity(password):\n    # Regular expression pattern for matching passwords\n    pattern = r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,}$'\n    \n    # Check if the password matches the pattern\n    if re.match(pattern, password):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert pass_validity(\"password\")==False",
      "assert pass_validity(\"Password@10\")==True",
      "assert pass_validity(\"password@10\")==False"
    ]
  },
  {
    "mbpp_id": 823,
    "problem_statement": "Write a function to check if the given string starts with a substring using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_substring(string, sub_string):\n    \"\"\"\n    This function checks if the given string starts with the specified substring.\n    \n    Parameters:\n    - string (str): The input string to be checked.\n    - sub_string (str): The substring to look for at the beginning of the string.\n    \n    Returns:\n    - str: A message indicating whether the string starts with the substring or not.\n    \"\"\"\n    # Check if the first part of the string matches the substring\n    if string.startswith(sub_string):\n        return f'string starts with the given substring'\n    else:\n        return f'string doesnt start with the given substring'\n\n# Test cases\nprint(check_substring(\"dreams for dreams makes life fun\", \"makes\"))  # Expected output: \"string doesnt start with the given substring\"\nprint(check_substring(\"Hi there how are you Hi alex\", \"Hi\"))         # Expected output: \"string starts with the given substring\"\nprint(check_substring(\"Its been a long day\", \"been\"))               # Expected output: \"string doesnt start with the given substring\"",
    "test_cases": [
      "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'",
      "assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'",
      "assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'"
    ]
  },
  {
    "mbpp_id": 824,
    "problem_statement": "Write a python function to remove even numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_even(nums):\n    \"\"\"\n    Removes all even numbers from the input list and returns the modified list.\n    \n    Args:\n    nums (list): A list of integers.\n    \n    Returns:\n    list: A new list with all even numbers removed.\n    \"\"\"\n    # Create an empty list to store odd numbers\n    result = []\n    for num in nums:\n        if num % 2 != 0:\n            result.append(num)\n    return result",
    "test_cases": [
      "assert remove_even([1,3,5,2]) == [1,3,5]",
      "assert remove_even([5,6,7]) == [5,7]",
      "assert remove_even([1,2,3,4]) == [1,3]"
    ]
  },
  {
    "mbpp_id": 825,
    "problem_statement": "Write a python function to access multiple elements of specified index from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def access_elements(lst, indices):\n    \"\"\"\n    Access and return multiple elements from the provided list based on the given indices.\n    \n    Parameters:\n        lst (list): The input list from which elements will be accessed.\n        indices (list): A list of integer indexes specifying the positions of elements to retrieve.\n        \n    Returns:\n        list: A new list containing the elements at the specified indexes in 'lst'.\n    \"\"\"\n    return [lst[index] for index in indices]\n\n# Test cases to verify the correctness of the function\nassert access_elements([2,3,8,4,7,9], [0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5], [1,2]) == [2, 3]\nassert access_elements([1,0,2,3], [0,1]) == [1, 0]\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]",
      "assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]",
      "assert access_elements([1,0,2,3],[0,1]) == [1,0]"
    ]
  },
  {
    "mbpp_id": 826,
    "problem_statement": "Write a python function to find the type of triangle from the given sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Type_Of_Triangle(a, b, c):\n    if a == b and b == c:\n        return \"Equilateral Triangle\"\n    elif a*a + b*b == c*c or a*a + c*c == b*b or b*b + c*c == a*a:\n        return \"Right-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"\n\n# Test Cases\nprint(check_Type_Of_Triangle(1,2,3)) # Output: Obtuse-angled Triangle\nprint(check_Type_Of_Triangle(2,2,2)) # Output: Acute-angled Triangle\nprint(check_Type_Of_Triangle(1,0,1)) # Output: Right-angled Triangle",
    "test_cases": [
      "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"",
      "assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"",
      "assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\""
    ]
  },
  {
    "mbpp_id": 827,
    "problem_statement": "Write a function to sum a specific column of a list in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_column(matrix, col_index):\n    total = 0\n    for row in matrix:\n        total += row[col_index]\n    return total",
    "test_cases": [
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12",
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15",
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9"
    ]
  },
  {
    "mbpp_id": 828,
    "problem_statement": "Write a function to count alphabets,digits and special charactes in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_alpha_dig_spl(input_string):\n    alpha_count = 0\n    dig_count = 0\n    spl_count = 0\n    \n    for char in input_string:\n        if char.isalpha():\n            alpha_count += 1\n        elif char.isdigit():\n            dig_count += 1\n        else:\n            spl_count += 1\n            \n    return (alpha_count, dig_count, spl_count)\n\n# Test cases\nprint(count_alpha_dig_spl(\"abc!@#123\")) # Expected output: (3, 3, 3)\nprint(count_alpha_dig_spl(\"dgsuy@#$%&1255\")) # Expected output: (5, 4, 5)\nprint(count_alpha_dig_spl(\"fjdsif627348#%$^&\")) # Expected output: (6, 6, 5)",
    "test_cases": [
      "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)",
      "assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)",
      "assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)"
    ]
  },
  {
    "mbpp_id": 829,
    "problem_statement": "Write a function to find out the second most repeated (or frequent) string in the given sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: There is no second frequent element."
    ],
    "generated_code": "def second_frequent(sequence):\n    frequency_dict = {}\n    for item in sequence:\n        if item not in frequency_dict:\n            frequency_dict[item] = 0\n        frequency_dict[item] += 1\n    \n    max_freq = max(frequency_dict.values())\n    second_max_freq_items = [item for item, freq in frequency_dict.items() if freq == max_freq]\n    \n    if len(second_max_freq_items) > 1:\n        return min(second_max_freq_items)\n    else:\n        raise ValueError(\"There is no second frequent element.\")\n\n# Test Cases\nprint(second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']))  # Expected output: 'bbb'\nprint(second_frequent(['abc','bcd','abc','bcd','bcd','bcd']))  # Expected output: 'abc'\nprint(second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']))  # Expected output: 'gsm'",
    "test_cases": [
      "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'",
      "assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'",
      "assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'"
    ]
  },
  {
    "mbpp_id": 830,
    "problem_statement": "Write a function to round up a number to specific digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def round_up(num, ndigits):\n    factor = 10 ** ndigits\n    return int(round(float(num) * factor)) / factor",
    "test_cases": [
      "assert round_up(123.01247,0)==124",
      "assert round_up(123.01247,1)==123.1",
      "assert round_up(123.01247,2)==123.02"
    ]
  },
  {
    "mbpp_id": 831,
    "problem_statement": "Write a python function to count equal element pairs from the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count",
    "test_cases": [
      "assert count_Pairs([1,1,1,1],4) == 6",
      "assert count_Pairs([1,5,1],3) == 1",
      "assert count_Pairs([3,2,1,7,8,9],6) == 0"
    ]
  },
  {
    "mbpp_id": 832,
    "problem_statement": "Write a function to extract the maximum numeric value from a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef extract_max(input_string):\n    # Extract all numbers in the string and convert them to integers.\n    numbers = re.findall(r'\\d+', input_string)\n    # Convert each number found into an integer and find the maximum value.\n    max_value = int(max(numbers))\n    return max_value",
    "test_cases": [
      "assert extract_max('100klh564abc365bg') == 564",
      "assert extract_max('hello300how546mer231') == 546",
      "assert extract_max('its233beenalong343journey234') == 343"
    ]
  },
  {
    "mbpp_id": 833,
    "problem_statement": "Write a function to get dictionary keys as a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_key(dct):\n    return list(dct.keys())",
    "test_cases": [
      "assert get_key({1:'python',2:'java'})==[1,2]",
      "assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]",
      "assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]"
    ]
  },
  {
    "mbpp_id": 834,
    "problem_statement": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef generate_matrix(n):\n    # Initialize an empty matrix\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Define directions: right, down, left, up\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    x, y, dx, dy = 0, 0, 0, 1\n    \n    # Fill the matrix row by row using spiral movement\n    for i in range(n**2):\n        matrix[x][y] = (i + 1) ** 2\n        \n        # Update current position\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < n and 0 <= ny < n and matrix[nx][ny] == 0:\n            x, y = nx, ny\n        else:\n            # Change direction when reaching the boundary or a previously visited cell\n            dx, dy = directions[dx + 1]\n            x, y = x + dx // abs(dx), y + dy // abs(dy)\n        \n        # Ensure no duplicates\n        while matrix[x][y]:\n            dx, dy = directions[(dx + 1) % 4]\n            x, y = x + dx // abs(dx), y + dy // abs(dy)\n            \n    return matrix\n\n# Test cases to verify the correctness of the generated function\nassert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]], \"Test case 1 failed\"\nassert generate_matrix(2) == [[1, 2], [4, 3]], \"Test case 2 failed\"\nassert generate_matrix(7) == [\n    [1, 2, 3, 4, 5, 6, 7],\n    [24, 25, 26, 27, 28, 29, 8],\n    [23, 40, 41, 42, 43, 30, 9],\n    [22, 39, 48, 49, 44, 31, 10],\n    [21, 38, 47, 46, 45, 32, 11],",
    "test_cases": [
      "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ",
      "assert generate_matrix(2)==[[1,2],[4,3]]",
      "assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"
    ]
  },
  {
    "mbpp_id": 835,
    "problem_statement": "Write a python function to find the slope of a line.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def slope(x1, y1, x2, y2):\n    \"\"\"\n    Calculate the slope between two points.\n    \n    Parameters:\n    x1, y1 (float): The coordinates of the first point.\n    x2, y2 (float): The coordinates of the second point.\n    \n    Returns:\n    float: The calculated slope.\n    \"\"\"\n    # Calculate the difference in x and y values\n    dx = x2 - x1\n    dy = y2 - y1\n    \n    # Check for division by zero to avoid error\n    if dx == 0:\n        return None\n    else:\n        # Calculate and return the slope\n        return dy / dx\n\n# Test the function with provided data points\nassert abs(slope(4, 2, 2, 5) + 1.5) < 0.01\nassert abs(slope(2, 4, 4, 6) - 1) < 0.01\nassert abs(slope(1, 2, 4, 2)) - 0 < 0.01\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert slope(4,2,2,5) == -1.5",
      "assert slope(2,4,4,6) == 1",
      "assert slope(1,2,4,2) == 0"
    ]
  },
  {
    "mbpp_id": 836,
    "problem_statement": "Write a function to find length of the subarray having maximum sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def max_sub_array_sum(nums):\n    max_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5",
      "assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2",
      "assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3"
    ]
  },
  {
    "mbpp_id": 837,
    "problem_statement": "Write a python function to find the cube sum of first n odd natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'cube_Sum' is not defined",
      "Test 2: FAIL - name 'cube_Sum' is not defined",
      "Test 3: FAIL - name 'cube_Sum' is not defined"
    ],
    "generated_code": "def cube_sum(n):\n    total = 0\n    for i in range(1, 2*n+1, 2): # iterate over the first n odd natural numbers\n        total += i**3 # add their cubes to the total\n    return total",
    "test_cases": [
      "assert cube_Sum(2) == 28",
      "assert cube_Sum(3) == 153",
      "assert cube_Sum(4) == 496"
    ]
  },
  {
    "mbpp_id": 838,
    "problem_statement": "Write a python function to find minimum number swaps required to make two binary strings equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_Swaps(bin_str1, bin_str2):\n    \"\"\"\n    Function to calculate minimum number of swap operations needed to convert two binary strings into an identical string.\n    \n    Parameters:\n    bin_str1 (str): First binary string\n    bin_str2 (str): Second binary string\n    \n    Returns:\n    int: Minimum number of swap operations\n    \"\"\"\n    # Counting mismatches between both strings and finding their positions\n    mismatch_positions = [i for i in range(len(bin_str1)) if bin_str1[i] != bin_str2[i]]\n    \n    # If there's no difference, no swaps are necessary\n    if len(mismatch_positions) == 0:\n        return 0\n    \n    # The number of swaps is half the count of mismatches plus one (if odd)\n    num_swaps = (len(mismatch_positions) - len(mismatch_positions) % 2) // 2\n    \n    return num_swaps",
    "test_cases": [
      "assert min_Swaps(\"0011\",\"1111\") == 1",
      "assert min_Swaps(\"00011\",\"01001\") == 2",
      "assert min_Swaps(\"111\",\"111\") == 0"
    ]
  },
  {
    "mbpp_id": 839,
    "problem_statement": "Write a function to sort the tuples alphabetically by the first item of each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuple_list):\n    return sorted(tuple_list, key=lambda x: x[0])",
    "test_cases": [
      "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]",
      "assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]",
      "assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"
    ]
  },
  {
    "mbpp_id": 840,
    "problem_statement": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "def check_solution(a, b, c):\n    # Calculate the discriminant\n    d = (b**2) - (4*a*c)\n    \n    if d == 0:\n        # If the discriminant is zero, there is one real root which is both positive and negative.\n        return \"No\"\n    elif d > 0:\n        # If the discriminant is greater than zero, there are two distinct real roots.\n        sqrt_d = (d ** 0.5)\n        x1 = (-b + sqrt_d) / (2 * a)\n        x2 = (-b - sqrt_d) / (2 * a)\n        \n        # Check if the roots are opposites of each other but numerically equal.\n        if abs(x1 - x2) < 1e-9:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        # If the discriminant is less than zero, there are no real roots.\n        return \"No\"\n\n# Test cases\nprint(check_solution(2,0,-1))  # Output: \"Yes\"\nprint(check_solution(1,-5,6))  # Output: \"No\"\nprint(check_solution(2,0,2))   # Output: \"Yes\"",
    "test_cases": [
      "assert Check_Solution(2,0,-1) == \"Yes\"",
      "assert Check_Solution(1,-5,6) == \"No\"",
      "assert Check_Solution(2,0,2) == \"Yes\""
    ]
  },
  {
    "mbpp_id": 841,
    "problem_statement": "Write a function to count the number of inversions in the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_inv_count(arr, n):\n    \"\"\"\n    Count the number of inversions in the given sorted and unique array.\n    \n    An inversion is defined as two indices i and j such that arr[i] > arr[j]\n    and i < j. This function assumes that the input array is already sorted\n    and contains unique elements.\n    \n    Parameters:\n    arr (list): A list of unique integers.\n    n (int): The length of the input array.\n    \n    Returns:\n    int: The total number of inversions found in the array.\n    \"\"\"\n    inv_count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
    "test_cases": [
      "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5",
      "assert get_inv_count([8, 4, 2, 1], 4) == 6",
      "assert get_inv_count([3, 1, 2], 3) == 2"
    ]
  },
  {
    "mbpp_id": 842,
    "problem_statement": "Write a function to find the number which occurs for odd number of times in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - get_odd_occurence() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - get_odd_occurence() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - get_odd_occurence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef get_odd_occurence(arr: List[int]) -> int:\n    \"\"\"\n    Finds the integer that appears an odd number of times in the given list.\n    \n    Parameters:\n    arr (List[int]): The input list containing integers.\n    \n    Returns:\n    int: The integer that occurs an odd number of times.\n    \"\"\"\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    for key, value in count.items():\n        if value % 2 != 0:\n            return key\n\n# Check function with provided data points\nassert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2]) == 5, \"Test case 1 failed\"\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3]) == 3, \"Test case 2 failed\"\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5]) == 5, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5",
      "assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3",
      "assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5"
    ]
  },
  {
    "mbpp_id": 843,
    "problem_statement": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: index out of range"
    ],
    "generated_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    # Initialize result array with first n+1 elements as 1\n    res = [1] * (n + 1)\n    used = [False for _ in range(len(primes))]\n    \n    # Initialize heap with indices multiplied by respective primes\n    h = [(p * primes[0], 0) for p in primes]\n    heapq.heapify(h)\n\n    for i in range(1, n + 1):\n        # Get smallest element from the heap\n        val, index = heapq.heappop(h)\n        res[i] = val\n        \n        # If not already marked, mark and add next multiples to the heap\n        if not used[index]:\n            used[index] = True\n            idx = (index + 1) % len(primes)\n            heapq.heappush(h, (primes[idx] * res[idx], idx))\n\n    return res[-1]\n\n# Example usage:\nprint(nth_super_ugly_number(12, [2, 7, 13, 19]))  # Output: 32",
    "test_cases": [
      "assert nth_super_ugly_number(12,[2,7,13,19])==32",
      "assert nth_super_ugly_number(10,[2,7,13,19])==26",
      "assert nth_super_ugly_number(100,[2,7,13,19])==5408"
    ]
  },
  {
    "mbpp_id": 844,
    "problem_statement": "Write a python function to find the kth element in an array containing odd elements first and then even elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'get_Number' is not defined",
      "Test 2: FAIL - name 'get_Number' is not defined",
      "Test 3: FAIL - name 'get_Number' is not defined"
    ],
    "generated_code": "def get_number(k, n):\n    # Base case for recursion\n    if n == 0:\n        return -1  # Return -1 if not enough numbers\n    # If k is greater than the total number of unique values (odd + even), return -1\n    elif k > (n // 2) * 2:\n        return -1\n    else:\n        # Determine which type of number we need to check next (even or odd)\n        next_type = 'odd' if k % 2 == 1 else 'even'\n        # Find the count of current type of number less than k\n        count_next_type = sum(1 for i in range(n) if (i % 2 == 0 if next_type == 'even' else i % 2 == 1))\n        # Subtract this count from k to find the index in our array\n        result_index = k - count_next_type\n        # Adjust index based on whether we're checking odds or evens\n        result_index -= count_next_type - result_index\n        # Calculate actual index considering both types of numbers\n        actual_index = result_index if next_type == 'even' else result_index + 1\n        # Check if we've gone beyond the end of the list and adjust accordingly\n        while actual_index < 0 or actual_index >= n:\n            actual_index += 1 if next_type == 'even' else -1\n        return actual_index",
    "test_cases": [
      "assert get_Number(8,5) == 2",
      "assert get_Number(7,2) == 3",
      "assert get_Number(5,2) == 3"
    ]
  },
  {
    "mbpp_id": 845,
    "problem_statement": "Write a python function to count the number of digits in factorial of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Digits(n):\n    \"\"\"\n    Calculate the number of digits in the factorial of a given number n.\n    \n    Parameters:\n    n (int): The input number.\n    \n    Returns:\n    int: Number of digits in the factorial of n.\n    \"\"\"\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n        \n    result = len(str(factorial(n)))\n    return result",
    "test_cases": [
      "assert find_Digits(7) == 4",
      "assert find_Digits(5) == 3",
      "assert find_Digits(4) == 2"
    ]
  },
  {
    "mbpp_id": 846,
    "problem_statement": "Write a function to find the minimum number of platforms required for a railway/bus station.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n\n    i = 0\n    j = 0\n    max_plates = 0\n    plates_needed = 0\n\n    while i < n and j < n:\n        if arrival[i] <= departure[j]:\n            plates_needed += 1\n            max_plates = max(max_plates, plates_needed)\n            i += 1\n        else:\n            plates_needed -= 1\n            j += 1\n\n    return max_plates",
    "test_cases": [
      "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3",
      "assert find_platform([100,200,300,400],[700,800,900,1000],4)==4",
      "assert find_platform([5,6,7,8],[4,3,2,1],4)==1"
    ]
  },
  {
    "mbpp_id": 847,
    "problem_statement": "Write a python function to copy a list from a singleton tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lcopy(tup):\n    # Convert the tuple to a list and return it.\n    return list(tup)\n\n# Test cases\nprint(lcopy([1, 2, 3]))   # Should print: [1, 2, 3]\nprint(lcopy([4, 8, 2, 10, 15, 18]))   # Should print: [4, 8, 2, 10, 15, 18]\nprint(lcopy([4, 5, 6]))   # Should print: [4, 5, 6]",
    "test_cases": [
      "assert lcopy([1, 2, 3]) == [1, 2, 3]",
      "assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]",
      "assert lcopy([4, 5, 6]) == [4, 5, 6]\n"
    ]
  },
  {
    "mbpp_id": 848,
    "problem_statement": "Write a function to find the area of a trapezium.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def area_trapezium(a, b, h):\n    \"\"\"\n    Calculate the area of a trapezium given its parallel sides 'a' and 'b'\n    and height 'h'.\n    \n    Parameters:\n        a (float): Length of one parallel side.\n        b (float): Length of the other parallel side.\n        h (float): Height between the parallel sides.\n        \n    Returns:\n        float: Area of the trapezium.\n    \"\"\"\n    return 0.5 * (a + b) * h",
    "test_cases": [
      "assert area_trapezium(6,9,4)==30",
      "assert area_trapezium(10,20,30)==450",
      "assert area_trapezium(15,25,35)==700"
    ]
  },
  {
    "mbpp_id": 849,
    "problem_statement": "Write a python function to find sum of all prime divisors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sum' is not defined",
      "Test 2: FAIL - name 'Sum' is not defined",
      "Test 3: FAIL - name 'Sum' is not defined"
    ],
    "generated_code": "def sum_prime_divisors(n):\n    \"\"\"\n    Finds and returns the sum of all prime divisors of the given number n.\n    \n    Args:\n    n (int): The number to find prime divisors for.\n    \n    Returns:\n    int: The sum of all prime divisors of n.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    total = 0\n    divisor = 2\n    while divisor * divisor <= n:\n        while (n % divisor == 0) and is_prime(divisor):\n            total += divisor\n            n //= divisor\n        divisor += 1\n    if n > 1 and is_prime(n):\n        total += n\n    return total",
    "test_cases": [
      "assert Sum(60) == 10",
      "assert Sum(39) == 16",
      "assert Sum(40) == 7"
    ]
  },
  {
    "mbpp_id": 850,
    "problem_statement": "Write a function to check if a triangle of positive area is possible with the given angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef is_triangleexists(a, b, c):\n    # Check for zero sides\n    if not (a > 0 and b > 0 and c > 0): \n        return False\n    \n    # Check for negative angles\n    angle_sum = a + b + c\n    if not angle_sum >= 180:\n        return False\n    \n    # Check if it's an obtuse triangle\n    if c**2 == a**2 + b**2 or a**2 == b**2 + c**2 or b**2 == a**2 + c**2:\n        return True\n    \n    # Check for acute triangles using cosine rule\n    cos_a = (b**2 + c**2 - a**2) / (2 * b * c)\n    cos_b = (a**2 + c**2 - b**2) / (2 * a * c)\n    cos_c = (a**2 + b**2 - c**2) / (2 * a * b)\n\n    if cos_a < -1 or cos_a > 1 or cos_b < -1 or cos_b > 1 or cos_c < -1 or cos_c > 1:\n        return False\n\n    return True",
    "test_cases": [
      "assert is_triangleexists(50,60,70)==True",
      "assert is_triangleexists(90,45,45)==True",
      "assert is_triangleexists(150,30,70)==False"
    ]
  },
  {
    "mbpp_id": 851,
    "problem_statement": "Write a python function to find sum of inverse of divisors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Sum_of_Inverse_Divisors(numerator, denominator):\n    total = 0\n    for i in range(1, numerator + 1):\n        if numerator % i == 0:\n            total += 1 / i\n    return total * denominator",
    "test_cases": [
      "assert Sum_of_Inverse_Divisors(6,12) == 2",
      "assert Sum_of_Inverse_Divisors(9,13) == 1.44",
      "assert Sum_of_Inverse_Divisors(1,4) == 4"
    ]
  },
  {
    "mbpp_id": 852,
    "problem_statement": "Write a python function to remove negative numbers from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_negs(nums):\n    # Use list comprehension to filter out negative numbers\n    return [num for num in nums if num >= 0]\n\n# Test cases\nprint(remove_negs([1,-2,3,-4]))  # Output: [1, 3]\nprint(remove_negs([1,2,3,-4]))   # Output: [1, 2, 3]\nprint(remove_negs([4,5,-6,7,-8]))# Output: [4, 5, 7]",
    "test_cases": [
      "assert remove_negs([1,-2,3,-4]) == [1,3]",
      "assert remove_negs([1,2,3,-4]) == [1,2,3]",
      "assert remove_negs([4,5,-6,7,-8]) == [4,5,7]"
    ]
  },
  {
    "mbpp_id": 853,
    "problem_statement": "Write a python function to find sum of odd factors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_of_odd_Factors' is not defined",
      "Test 2: FAIL - name 'sum_of_odd_Factors' is not defined",
      "Test 3: FAIL - name 'sum_of_odd_Factors' is not defined"
    ],
    "generated_code": "def sum_of_odd_factors(number):\n    total = 1\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            # If both i and number/i are odd, add i to total\n            if i % 2 != 0 and (number // i) % 2 != 0:\n                total += i\n            elif i % 2 != 0:\n                total += (number // i)\n            # Add number/i to total if it's not equal to i\n            if i * i != number and number // i % 2 != 0:\n                total += number // i\n    return total\n\n# Test cases\nprint(sum_of_odd_factors(30))  # Expected output: 24\nprint(sum_of_odd_factors(18))  # Expected output: 13\nprint(sum_of_odd_factors(2))   # Expected output: 1",
    "test_cases": [
      "assert sum_of_odd_Factors(30) == 24",
      "assert sum_of_odd_Factors(18) == 13",
      "assert sum_of_odd_Factors(2) == 1"
    ]
  },
  {
    "mbpp_id": 854,
    "problem_statement": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def raw_heap(arr):\n    import heapq\n    return heapq.nsmallest(len(arr), arr)",
    "test_cases": [
      "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]",
      "assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]",
      "assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"
    ]
  },
  {
    "mbpp_id": 855,
    "problem_statement": "Write a python function to check for even parity of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Even_Parity(n):\n    \"\"\"\n    Check if the parity of a number is even.\n    \n    Parameters:\n    n (int): The number to be checked for parity.\n    \n    Returns:\n    bool: True if the parity is even, False otherwise.\n    \"\"\"\n    # Convert the number to binary string and count the '0's\n    # If the count is even, return True, else return False\n    return str(bin(n)).count('0') % 2 == 0",
    "test_cases": [
      "assert check_Even_Parity(10) == True",
      "assert check_Even_Parity(11) == False",
      "assert check_Even_Parity(18) == True"
    ]
  },
  {
    "mbpp_id": 856,
    "problem_statement": "Write a python function to find minimum adjacent swaps required to sort binary array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min_Swaps(arr, n):\n    count = sum(1 for i in range(n-1) if arr[i] > arr[i+1])\n    total_swaps = n - 1 - count\n    if n == 1:\n        return 0\n    elif n % 2 == 1 and count % 2 != 0:\n        total_swaps += 1\n    elif count % 2 == 1:\n        total_swaps += 1\n    return total_swaps\n\n# Test Cases\nprint(find_Min_Swaps([1,0,1,0],4)) # Expected output: 3\nprint(find_Min_Swaps([0,1,0],3))   # Expected output: 1\nprint(find_Min_Swaps([0,0,1,1,0],5)) # Expected output: 2",
    "test_cases": [
      "assert find_Min_Swaps([1,0,1,0],4) == 3",
      "assert find_Min_Swaps([0,1,0],3) == 1",
      "assert find_Min_Swaps([0,0,1,1,0],5) == 2"
    ]
  },
  {
    "mbpp_id": 857,
    "problem_statement": "Write a function to list out the list of given strings individually using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def listify_list(lst):\n    return [list(s) for s in lst]",
    "test_cases": [
      "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]",
      "assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]",
      "assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"
    ]
  },
  {
    "mbpp_id": 858,
    "problem_statement": "Write a function to count number of lists in a given list of lists and square the count.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_list(lst):\n    # Count the number of lists in the input list\n    num_lists = len(lst)\n    \n    # Square the count\n    squared_count = num_lists ** 2\n    \n    return squared_count",
    "test_cases": [
      "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25",
      "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16",
      "assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9"
    ]
  },
  {
    "mbpp_id": 859,
    "problem_statement": "Write a function to generate all sublists of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sub_lists(lst):\n    if not lst:\n        return [[]]\n    \n    first_element = lst[0]\n    remaining_elements = sub_lists(lst[1:])\n    \n    return remaining_elements + [[first_element] + sublist for sublist in remaining_elements]\n\n# Test cases\nprint(sub_lists([10, 20, 30, 40]))\nprint(sub_lists(['X', 'Y', 'Z']))\nprint(sub_lists([1,2,3]))",
    "test_cases": [
      "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
      "assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]",
      "assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"
    ]
  },
  {
    "mbpp_id": 860,
    "problem_statement": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_alphanumeric(input_string):\n    \"\"\"\n    This function checks if the input string ends with one or more alphanumeric characters.\n    \n    Parameters:\n    - input_string (str): The string to be checked.\n    \n    Returns:\n    - str: 'Accept' if the string ends with an alphanumeric character, otherwise 'Discard'.\n    \"\"\"\n    # Regular expression pattern to match a string ending with one or more alphanumeric characters\n    pattern = r\".*[a-zA-Z0-9]$\"\n    # Search for the pattern in the input string\n    result = re.search(pattern, input_string)\n    # If found, return 'Accept', else return 'Discard'\n    return 'Accept' if result else 'Discard'\n\n# Test cases\nprint(check_alphanumeric(\"dawood@\"))   # Expected output: Accept\nprint(check_alphanumeric(\"skdmsam326\")) # Expected output: Discard\nprint(check_alphanumeric(\"cooltricks@\")) # Expected output: Accept",
    "test_cases": [
      "assert check_alphanumeric(\"dawood@\") == 'Discard'",
      "assert check_alphanumeric(\"skdmsam326\") == 'Accept'",
      "assert check_alphanumeric(\"cooltricks@\") == 'Discard'"
    ]
  },
  {
    "mbpp_id": 861,
    "problem_statement": "Write a function to find all anagrams of a string in a given list of strings using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef anagram_lambda(strings, word):\n    # Create a counter for the target word's characters and sort it\n    target = sorted(Counter(word).items())\n    \n    return [s for s in strings if sorted(Counter(s).items()) == target]",
    "test_cases": [
      "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']",
      "assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]",
      "assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]"
    ]
  },
  {
    "mbpp_id": 862,
    "problem_statement": "Write a function to find the occurrences of n most common words in a given text.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef n_common_words(text, n):\n    words = text.split()\n    word_count = Counter(words)\n    return word_count.most_common(n)\n\n# Test cases\nprint(n_common_words(\"python is a programming language\",1)) # Expected output: [('python', 1)]\nprint(n_common_words(\"python is a programming language\",1)) # Expected output: [('python', 1)]\nprint(n_common_words(\"python is a programming language\",5)) # Expected output: [('python', 1), ('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
    "test_cases": [
      "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
      "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
      "assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"
    ]
  },
  {
    "mbpp_id": 863,
    "problem_statement": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_longest_conseq_subseq(arr, k):\n    # Initialize variables for tracking the current sequence and maximum sequence lengths\n    cur = -float('inf')\n    mx = 0\n    \n    # Create a set to track seen numbers for O(1) lookups\n    s = set()\n    \n    # Add all elements from the array to the set for quick lookup\n    s.update(set(arr))\n    \n    # Iterate through each number in the array\n    while len(s):\n        n = s.pop()  # Get the next smallest unvisited number\n        \n        if n not in s:\n            continue\n        \n        # If n is part of an increasing sequence starting with it\n        if n > cur + 1:\n            cur = n\n            mx += 1\n        else:\n            break\n            \n    # Return the size of the largest consecutive sequence found\n    return mx",
    "test_cases": [
      "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3",
      "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4",
      "assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"
    ]
  },
  {
    "mbpp_id": 864,
    "problem_statement": "Write a function to find palindromes in a given list of strings using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def palindrome_lambda(strings):\n    return list(filter(lambda s: s == s[::-1], strings))",
    "test_cases": [
      "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']",
      "assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']",
      "assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']"
    ]
  },
  {
    "mbpp_id": 865,
    "problem_statement": "Write a function to print n-times a list using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef ntimes_list(lst: List[int], n: int) -> List[int]:\n    return [i * n for i in lst]\n\n# Test cases\nprint(ntimes_list([1, 2, 3, 4, 5, 6, 7], 3))  # Expected output: [3, 6, 9, 12, 15, 18, 21]\nprint(ntimes_list([1, 2, 3, 4, 5, 6, 7], 4))  # Expected output: [4, 8, 12, 16, 20, 24, 28]\nprint(ntimes_list([1, 2, 3, 4, 5, 6, 7], 10)) # Expected output: [10, 20, 30, 40, 50, 60, 70]",
    "test_cases": [
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]",
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]",
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"
    ]
  },
  {
    "mbpp_id": 866,
    "problem_statement": "Write a function to check whether the given month name contains 31 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumb(month_name):\n    months = [\"January\", \"March\", \"May\", \"July\", \"August\", \n              \"October\", \"December\"]\n    \n    if month_name in months:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_monthnumb(\"February\")==False",
      "assert check_monthnumb(\"January\")==True",
      "assert check_monthnumb(\"March\")==True"
    ]
  },
  {
    "mbpp_id": 867,
    "problem_statement": "Write a python function to add a minimum number such that the sum of array becomes even.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Num(arr, n):\n    # Calculate the remainder when the sum of array elements is divided by 2\n    remainder = sum(arr) % 2\n    \n    # If the sum already has a remainder of 0, no need to change it\n    if remainder == 0:\n        return 0\n    \n    # The smallest odd number needed to make the total sum even\n    return 2 - remainder",
    "test_cases": [
      "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1",
      "assert min_Num([1,2,3,4,5,6,7,8],8) == 2",
      "assert min_Num([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 868,
    "problem_statement": "Write a python function to find the length of the last word in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def length_Of_Last_Word(s):\n    # Split the input string into words and get the last word\n    last_word = s.split(' ')[-1]\n    # Return the length of the last word\n    return len(last_word)",
    "test_cases": [
      "assert length_Of_Last_Word(\"python language\") == 8",
      "assert length_Of_Last_Word(\"PHP\") == 3",
      "assert length_Of_Last_Word(\"\") == 0"
    ]
  },
  {
    "mbpp_id": 869,
    "problem_statement": "Write a function to remove sublists from a given list of lists, which are outside a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_list_range(lst, start, end):\n    return [sublist for sublist in lst if len(sublist) >= min(start, end)]",
    "test_cases": [
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]",
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]",
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"
    ]
  },
  {
    "mbpp_id": 870,
    "problem_statement": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef sum_positivenum(numbers: List[int]) -> int:\n    return sum(x for x in numbers if x > 0)",
    "test_cases": [
      "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48",
      "assert sum_positivenum([10,15,-14,13,-18,12,-20])==50",
      "assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522"
    ]
  },
  {
    "mbpp_id": 871,
    "problem_statement": "Write a python function to check whether the given strings are rotations of each other or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def are_Rotations(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    \n    # Concatenate string1 with itself\n    doubled_str = str1 + str1\n    \n    # Check if str2 is a substring of the doubled_str\n    return str2 in doubled_str\n\n# Test cases\nprint(are_Rotations(\"abc\", \"cba\"))  # Expected output: False\nprint(are_Rotations(\"abcd\", \"cdba\"))  # Expected output: False\nprint(are_Rotations(\"abacd\", \"cdaba\"))  # Expected output: True",
    "test_cases": [
      "assert are_Rotations(\"abc\",\"cba\") == False",
      "assert are_Rotations(\"abcd\",\"cdba\") == False",
      "assert are_Rotations(\"abacd\",\"cdaba\") == True"
    ]
  },
  {
    "mbpp_id": 872,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_subset(main_list, sub_list):\n    for i in range(len(sub_list)):\n        found = False\n        for j in range(len(main_list[i])):\n            if main_list[i][j] == sub_list[i]:\n                found = True\n                break\n        if not found:\n            return False\n    return True",
    "test_cases": [
      "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True",
      "assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True",
      "assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False"
    ]
  },
  {
    "mbpp_id": 873,
    "problem_statement": "Write a function to solve the fibonacci sequence using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def fibonacci(n):\n    if n <= 0:\n        raise ValueError(\"n must be positive\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_cases": [
      "assert fibonacci(7) == 13",
      "assert fibonacci(8) == 21",
      "assert fibonacci(9) == 34"
    ]
  },
  {
    "mbpp_id": 874,
    "problem_statement": "Write a python function to check if the string is a concatenation of another string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Concat(s1, s2):\n    # Concatenate s1 and s2\n    concatenated_string = s1 + s2\n    \n    # Check if s1 is a substring of the concatenated string\n    return concatenated_string.find(s1) == 0\n\n# Test cases\nprint(check_Concat(\"abcabcabc\", \"abc\"))  # Expected output: True\nprint(check_Concat(\"abcab\", \"abc\"))      # Expected output: False\nprint(check_Concat(\"aba\", \"ab\"))         # Expected output: False",
    "test_cases": [
      "assert check_Concat(\"abcabcabc\",\"abc\") == True",
      "assert check_Concat(\"abcab\",\"abc\") == False",
      "assert check_Concat(\"aba\",\"ab\") == False"
    ]
  },
  {
    "mbpp_id": 875,
    "problem_statement": "Write a function to find the minimum difference in the tuple pairs of given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not subscriptable"
    ],
    "generated_code": "def min_difference(tuples_list):\n    # Find the minimum difference between the first elements and the second elements in each pair.\n    return min(abs(x[0] - y[0]) for x, y in tuples_list) + min(abs(x[1] - y[1]) for x, y in tuples_list)\n\n# Test cases\nprint(min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))  # Output should be 1\nprint(min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]))  # Output should be 2\nprint(min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]))  # Output should be 6",
    "test_cases": [
      "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1",
      "assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2",
      "assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6"
    ]
  },
  {
    "mbpp_id": 876,
    "problem_statement": "Write a python function to find lcm of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lcm(a, b):\n    from math import gcd\n    \n    def lcm_two_numbers(x, y):\n        return x * y // gcd(x, y)\n    \n    return lcm_two_numbers(a, b)\n\n# Test cases\nprint(lcm(4, 6))  # Expected output: 12\nprint(lcm(15, 17))  # Expected output: 255\nprint(lcm(2, 6))  # Expected output: 6",
    "test_cases": [
      "assert lcm(4,6) == 12",
      "assert lcm(15,17) == 255",
      "assert lcm(2,6) == 6"
    ]
  },
  {
    "mbpp_id": 877,
    "problem_statement": "Write a python function to sort the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_String(s):\n    # Convert the string into a list of characters, sort it and then join back into a string\n    return ''.join(sorted(list(s)))",
    "test_cases": [
      "assert sort_String(\"cba\") == \"abc\"",
      "assert sort_String(\"data\") == \"aadt\"",
      "assert sort_String(\"zxy\") == \"xyz\""
    ]
  },
  {
    "mbpp_id": 878,
    "problem_statement": "Write a function to check if the given tuple contains only k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_tuples(tup, elements):\n    # Check if the length of the tuple is equal to the count of elements in list 'elements'\n    return len(tup) == len(elements)\n\n# Test cases\nprint(check_tuples((3, 5, 6, 5, 3, 6), [3, 6, 5]))  # Expected output: True\nprint(check_tuples((4, 5, 6, 4, 6, 5), [4, 5, 6]))  # Expected output: True\nprint(check_tuples((9, 8, 7, 6, 8, 9), [9, 8, 1]))  # Expected output: False",
    "test_cases": [
      "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True",
      "assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True",
      "assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False"
    ]
  },
  {
    "mbpp_id": 879,
    "problem_statement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define the pattern to match an 'a' followed by anything and ending with 'b'\n    pattern = r'^a.*b$'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match(\"aabbbbd\") == 'Not matched!'",
      "assert text_match(\"aabAbbbc\") == 'Not matched!'",
      "assert text_match(\"accddbbjjjb\") == 'Found a match!'"
    ]
  },
  {
    "mbpp_id": 880,
    "problem_statement": "Write a python function to find number of solutions in quadratic equation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "def check_solution(a, b, c):\n    # Calculate discriminant\n    discr = (b**2) - (4*a*c)\n    \n    if discr < 0:\n        # No real solutions\n        return \"No solutions\"\n    elif discr == 0:\n        # One real solution\n        return \"1 solution\"\n    else:\n        # Two distinct real solutions\n        return str(int((-b + pow(discr, 0.5)) / (2*a))) + \" solutions\"\n\n# Test cases\nprint(check_solution(2, 5, 2))  # Output: \"2 solutions\"\nprint(check_solution(1, 1, 1))  # Output: \"No solutions\"\nprint(check_solution(1, 2, 1))  # Output: \"1 solution\"",
    "test_cases": [
      "assert Check_Solution(2,5,2) == \"2 solutions\"",
      "assert Check_Solution(1,1,1) == \"No solutions\"",
      "assert Check_Solution(1,2,1) == \"1 solution\""
    ]
  },
  {
    "mbpp_id": 881,
    "problem_statement": "Write a function to find the sum of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_even_odd(lst):\n    total_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            total_sum += num\n    return total_sum\n\n# Test cases\nprint(sum_even_odd([1,3,5,7,4,1,6,8])) # Expected output: 5\nprint(sum_even_odd([1,2,3,4,5,6,7,8,9,10])) # Expected output: 3\nprint(sum_even_odd([1,5,7,9,10])) # Expected output: 11",
    "test_cases": [
      "assert sum_even_odd([1,3,5,7,4,1,6,8])==5",
      "assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3",
      "assert sum_even_odd([1,5,7,9,10])==11"
    ]
  },
  {
    "mbpp_id": 882,
    "problem_statement": "Write a function to caluclate perimeter of a parallelogram.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parallelogram_perimeter(a, b):\n    return 2 * (a + b)",
    "test_cases": [
      "assert parallelogram_perimeter(10,20)==400",
      "assert parallelogram_perimeter(15,20)==600",
      "assert parallelogram_perimeter(8,9)==144"
    ]
  },
  {
    "mbpp_id": 883,
    "problem_statement": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 and num % n == 0]",
    "test_cases": [
      "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]",
      "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]",
      "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]"
    ]
  },
  {
    "mbpp_id": 884,
    "problem_statement": "Write a python function to check whether all the bits are within a given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - negative shift count",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(num, left, right):\n    # Shift num so that its first 'left' bits are at the least significant positions.\n    mask = ((1 << left) - 1) >> (right - left)\n    \n    # Apply bitwise AND with the shifted num and mask.\n    result = num & mask\n    \n    # If result is zero, then no bit in the specified range is set.\n    return result == 0",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True ",
      "assert all_Bits_Set_In_The_Given_Range(5,2,4) == False",
      "assert all_Bits_Set_In_The_Given_Range(22,2,3) == True "
    ]
  },
  {
    "mbpp_id": 885,
    "problem_statement": "Write a python function to check whether the two given strings are isomorphic to each other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Isomorphic(str1, str2):\n    # Checking if the lengths of both strings are different\n    if len(str1) != len(str2):\n        return False\n    \n    # Creating dictionaries to store character mappings for each string\n    char_map1 = {}\n    char_map2 = {}\n    \n    # Iterating through each character in the strings\n    for i in range(len(str1)):\n        c1, c2 = str1[i], str2[i]\n        \n        # Verifying if characters have been mapped before and mapping them accordingly\n        if c1 not in char_map1:\n            if c2 in char_map2:\n                return False\n            char_map1[c1] = c2\n        elif char_map1[c1] != c2:\n            return False\n        \n        if c2 not in char_map2:\n            if c1 in char_map1:\n                return False\n            char_map2[c2] = c1\n        elif char_map2[c2] != c1:\n            return False\n    \n    return True",
    "test_cases": [
      "assert is_Isomorphic(\"paper\",\"title\") == True",
      "assert is_Isomorphic(\"ab\",\"ba\") == True",
      "assert is_Isomorphic(\"ab\",\"aa\") == False"
    ]
  },
  {
    "mbpp_id": 886,
    "problem_statement": "Write a function to add all the numbers in a list and divide it with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_num(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    return total / count if count != 0 else 0",
    "test_cases": [
      "assert sum_num((8, 2, 3, 0, 7))==4.0",
      "assert sum_num((-10,-20,-30))==-20.0",
      "assert sum_num((19,15,18))==17.333333333333332"
    ]
  },
  {
    "mbpp_id": 887,
    "problem_statement": "Write a python function to check whether the given number is odd or not using bitwise operator.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_odd(num):\n    # Check if the least significant bit of num is 1 (indicating an odd number)\n    return (num & 1) == 1",
    "test_cases": [
      "assert is_odd(5) == True",
      "assert is_odd(6) == False",
      "assert is_odd(7) == True"
    ]
  },
  {
    "mbpp_id": 888,
    "problem_statement": "Write a function to substract the elements of the given nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(t1, t2):\n    result = []\n    for x, y in zip(t1, t2):\n        result.append((x[0] - y[0], x[1] - y[1]))\n    return tuple(result)",
    "test_cases": [
      "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))",
      "assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))",
      "assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))"
    ]
  },
  {
    "mbpp_id": 889,
    "problem_statement": "Write a function to reverse each list in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_list_lists(lists):\n    return [list(reversed(sublist)) for sublist in lists]",
    "test_cases": [
      "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]",
      "assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]",
      "assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]"
    ]
  },
  {
    "mbpp_id": 890,
    "problem_statement": "Write a python function to find the index of an extra element present in one sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Extra(arr1, arr2, x):\n    i = 0\n    while i < len(arr1) and i < len(arr2) and arr1[i] == arr2[i]:\n        i += 1\n    if i >= len(arr1):\n        j = 0\n        while j < len(arr1) and arr1[j] <= x:\n            if arr1[j] != x:\n                return j\n            j += 1\n    elif i >= len(arr2):\n        j = 0\n        while j < len(arr2) and arr2[j] <= x:\n            if arr2[j] != x:\n                return j\n            j += 1\n    else:\n        if arr1[i] > x:\n            return -1\n        else:\n            for j in range(i+1, len(arr1)):\n                if arr1[j] == x:\n                    return j\n    return -1",
    "test_cases": [
      "assert find_Extra([1,2,3,4],[1,2,3],3) == 3",
      "assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4",
      "assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5"
    ]
  },
  {
    "mbpp_id": 891,
    "problem_statement": "Write a python function to check whether the given two numbers have same number of digits or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def same_Length(x, y):\n    # Convert both numbers to strings and compare their lengths\n    if len(str(x)) == len(str(y)):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert same_Length(12,1) == False",
      "assert same_Length(2,2) == True",
      "assert same_Length(10,20) == True"
    ]
  },
  {
    "mbpp_id": 892,
    "problem_statement": "Write a function to remove multiple spaces in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import re\n\ndef remove_spaces(input_string):\n    # Remove all types of whitespace characters using regex\n    return re.sub(r'\\s+', '', input_string)\n\n# Test cases to verify the correctness of the solution\nassert remove_spaces('python  program') == 'python program'\nassert remove_spaces('python   programming    language') == 'python programming language'\nassert remove_spaces('python                     program') == 'python program'",
    "test_cases": [
      "assert remove_spaces('python  program')==('python program')",
      "assert remove_spaces('python   programming    language')==('python programming language')",
      "assert remove_spaces('python                     program')==('python program')"
    ]
  },
  {
    "mbpp_id": 893,
    "problem_statement": "Write a python function to get the last element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    # Use list comprehension with zip to iterate over sublists and get elements from each\n    return [sub[-1] for sub in lst]\n\n# Test cases\nprint(extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]))  # Expected output: [3, 5, 9]\nprint(extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]))  # Expected output: ['z', 'm', 'b', 'v']\nprint(extract([[1, 2, 3], [4, 5]]))  # Expected output: [3, 5]",
    "test_cases": [
      "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]",
      "assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']",
      "assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]"
    ]
  },
  {
    "mbpp_id": 894,
    "problem_statement": "Write a function to convert the given string of float type into tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))",
    "test_cases": [
      "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)",
      "assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)",
      "assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)"
    ]
  },
  {
    "mbpp_id": 895,
    "problem_statement": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [0] * n\n    \n    for i in range(n):\n        include = arr[i]\n        exclude = dp[i - 1]\n        \n        if i > 0:\n            inc_with_prev_not_next = dp[i - 2] + arr[i]\n            include = max(include, inc_with_prev_not_next)\n        \n        dp[i] = max(include, exclude)\n    \n    return dp[-1]\n\n# Test cases\nprint(max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]))  # Expected output: 26\nprint(max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]))  # Expected output: 28\nprint(max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]))  # Expected output: 44",
    "test_cases": [
      "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26",
      "assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28",
      "assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44"
    ]
  },
  {
    "mbpp_id": 896,
    "problem_statement": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_list_last(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n\n# Test cases\nprint(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])) # Expected output: [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]\nprint(sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)]))      # Expected output: [(1,2), (3,5), (4,7), (9,8), (7,9)]\nprint(sort_list_last([(20,50), (10,20), (40,40)]))               # Expected output: [(10,20),(40,40),(20,50)]",
    "test_cases": [
      "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ",
      "assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] ",
      "assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] "
    ]
  },
  {
    "mbpp_id": 897,
    "problem_statement": "Write a python function to check whether the word is present in a given sentence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Word_Present' is not defined",
      "Test 2: FAIL - name 'is_Word_Present' is not defined",
      "Test 3: FAIL - name 'is_Word_Present' is not defined"
    ],
    "generated_code": "def is_word_present(sentence, word):\n    # Splitting the sentence into words and checking if the word is present\n    if word.lower() in sentence.split():\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_Word_Present(\"machine learning\",\"machine\") == True",
      "assert is_Word_Present(\"easy\",\"fun\") == False",
      "assert is_Word_Present(\"python language\",\"code\") == False"
    ]
  },
  {
    "mbpp_id": 898,
    "problem_statement": "Write a function to extract specified number of elements from a given list, which follow each other continuously.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def extract_elements(arr, n):\n    return arr[n:] if len(arr) > n else []\n\n# Test Cases\nassert extract_elements([1, 1, 3, 4, 4, 5, 6, 7], 2) == [1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4) == [4]\nassert extract_elements([0,0,0,0,0], 5) == [0]",
    "test_cases": [
      "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]",
      "assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]",
      "assert extract_elements([0,0,0,0,0],5)==[0]"
    ]
  },
  {
    "mbpp_id": 899,
    "problem_statement": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check' is not defined",
      "Test 2: FAIL - name 'check' is not defined",
      "Test 3: FAIL - name 'check' is not defined"
    ],
    "generated_code": "def is_sorted_by_corners(arr):\n    # Check if arr is already sorted and has at least one element\n    if len(arr) < 2:\n        return False\n    \n    for i in range(1, len(arr)-1):\n        # Compare adjacent elements; if they don't meet the conditions, return False\n        if (arr[i-1] > arr[i]) ^ (arr[i+1] > arr[i]):\n            return False\n            \n    return True\n\n# Test cases\nprint(is_sorted_by_corners([3,2,1,2,3,4]))  # Should return True\nprint(is_sorted_by_corners([2,1,4,5,1]))   # Should return True\nprint(is_sorted_by_corners([1,2,2,1,2,3])) # Should return True",
    "test_cases": [
      "assert check([3,2,1,2,3,4],6) == True",
      "assert check([2,1,4,5,1],5) == True",
      "assert check([1,2,2,1,2,3],6) == True"
    ]
  },
  {
    "mbpp_id": 900,
    "problem_statement": "Write a function where a string will start with a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef match_num(s):\n    \"\"\"\n    Checks if the first character of the input string is a digit.\n    \n    Args:\n        s (str): The string to check.\n        \n    Returns:\n        bool: True if the first character is a digit, False otherwise.\n    \"\"\"\n    return bool(re.match(r'^\\d', s))",
    "test_cases": [
      "assert match_num('5-2345861')==True",
      "assert match_num('6-2345861')==False",
      "assert match_num('78910')==False"
    ]
  },
  {
    "mbpp_id": 901,
    "problem_statement": "Write a function to find the smallest multiple of the first n numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_multiple(n):\n    # Initialize the product with the first number in the sequence\n    result = 1\n    \n    # Iterate from 2 up to n to calculate the least common multiple\n    for i in range(2, n + 1):\n        result *= i\n        \n    return result",
    "test_cases": [
      "assert smallest_multiple(13)==360360",
      "assert smallest_multiple(2)==2",
      "assert smallest_multiple(1)==1"
    ]
  },
  {
    "mbpp_id": 902,
    "problem_statement": "Write a function to combine two dictionaries by adding values for common keys.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_dict(dict1, dict2):\n    # Create a new dictionary that is the result of combining dict1 and dict2\n    combined = {**dict1, **dict2}\n    return combined",
    "test_cases": [
      "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) ",
      "assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) ",
      "assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})"
    ]
  },
  {
    "mbpp_id": 903,
    "problem_statement": "Write a python function to count the total unset bits from 1 to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Unset_Bits(n):\n    # Initialize counter for unset bits\n    count = 0\n    # Loop through each bit position\n    while n > 0:\n        # Check if the least significant bit is unset\n        if not n & 1:\n            # Increment counter if it's unset\n            count += 1\n        # Right shift n to check the next bit position\n        n >>= 1\n    return count\n\n# Test the function with provided data points\nprint(count_Unset_Bits(2))  # Expected output: 1\nprint(count_Unset_Bits(5))  # Expected output: 4\nprint(count_Unset_Bits(14)) # Expected output: 17",
    "test_cases": [
      "assert count_Unset_Bits(2) == 1",
      "assert count_Unset_Bits(5) == 4",
      "assert count_Unset_Bits(14) == 17"
    ]
  },
  {
    "mbpp_id": 904,
    "problem_statement": "Write a function to return true if the given number is even else return false.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_num(num):\n    # Check if the number modulo 2 equals zero\n    return num % 2 == 0",
    "test_cases": [
      "assert even_num(13.5)==False",
      "assert even_num(0)==True",
      "assert even_num(-9)==False"
    ]
  },
  {
    "mbpp_id": 905,
    "problem_statement": "Write a python function to find the sum of squares of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef sum_of_square(n):\n    \"\"\"\n    Calculate the sum of squares of binomial coefficients C(n, i)^2 for all i in range n.\n    \n    Args:\n    n : int - A non-negative integer\n    \n    Returns:\n    int - The sum of squares of binomial coefficients for values of i from 0 to n-1\n    \"\"\"\n    total_sum = 0\n    for i in range(n):\n        # Binomial coefficient calculation\n        coefficient = math.comb(n, i)\n        # Adding square of the coefficient to total sum\n        total_sum += coefficient ** 2\n    return total_sum",
    "test_cases": [
      "assert sum_of_square(4) == 70",
      "assert sum_of_square(5) == 252",
      "assert sum_of_square(2) == 6"
    ]
  },
  {
    "mbpp_id": 906,
    "problem_statement": "Write a function to extract year, month and date from a url by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: no such group"
    ],
    "generated_code": "import re\n\ndef extract_date(url):\n    pattern = r\"/news/(.+)/\\d{4}/\\d{2}/\\d{2}\"\n    match = re.search(pattern, url)\n    if match:\n        return [match.group(1), str(match.group(2)), str(match.group(3))]\n    else:\n        return []\n\n# Test cases\nprint(extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\"))\nprint(extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\"))\nprint(extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\"))",
    "test_cases": [
      "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]",
      "assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]",
      "assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]"
    ]
  },
  {
    "mbpp_id": 907,
    "problem_statement": "Write a function to print the first n lucky numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lucky_num(n):\n    return [i for i in range(1, n+1) if i == 4*n - i or i == n + 1]\n\n# Test cases\nprint(lucky_num(10))   # Expected output: [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\nprint(lucky_num(5))    # Expected output: [1, 3, 7, 9, 13]\nprint(lucky_num(8))    # Expected output: [1, 3, 7, 9, 13, 15, 21, 25]",
    "test_cases": [
      "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] ",
      "assert lucky_num(5)==[1, 3, 7, 9, 13]",
      "assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]"
    ]
  },
  {
    "mbpp_id": 908,
    "problem_statement": "Write a function to find the fixed point in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_fixed_point() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_fixed_point() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_fixed_point() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def find_fixed_point(arr):\n    \"\"\"\n    Finds and returns an index of a value that is equal to its index in the given sorted list.\n    \n    :param arr: List[int] -- A list of integers sorted in ascending order with at most one unique element.\n    :return: int -- The first element found that satisfies x == idx, or -1 if no such element exists.\n    \"\"\"\n    for i, num in enumerate(arr):\n        if i == num:\n            return i\n    return -1",
    "test_cases": [
      "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3",
      "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1",
      "assert find_fixed_point([0, 2, 5, 8, 17],5) == 0"
    ]
  },
  {
    "mbpp_id": 909,
    "problem_statement": "Write a function to find the previous palindrome of a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def previous_palindrome(num):\n    # Convert the number to string to manipulate digits\n    num_str = str(num)\n    \n    # If the number is less than 10, it's already the smallest possible palindrome for its length\n    if len(num_str) < 10:\n        return int(num_str[:-1]) * 10\n    \n    # Reverse the first half of the number and concatenate with the reversed second half\n    half_length = len(num_str) // 2\n    reverse_half = num_str[:half_length][::-1]\n    \n    # Ensure the length is even by padding the end with zeros if necessary\n    pad_len = (len(num_str) + 1) // 2 - half_length\n    padded_end = \"0\" * pad_len\n    \n    # Concatenate the two halves\n    result = f\"{num_str[:half_length]}{padded_end}{reverse_half}\"\n    \n    # Check if the resulting number is indeed a palindrome\n    while result != result[::-1]:\n        result = f\"{result[1:]}\" + padded_end\n    \n    return int(result)",
    "test_cases": [
      "assert previous_palindrome(99)==88",
      "assert previous_palindrome(1221)==1111",
      "assert previous_palindrome(120)==111"
    ]
  },
  {
    "mbpp_id": 910,
    "problem_statement": "Write a function to validate a gregorian date.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_date(year, month, day):\n    # Convert month names to integer values\n    months = {'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6,\n              'July': 7, 'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12}\n    \n    if not all(isinstance(i, int) for i in [year, month, day]):\n        return False\n    \n    if len(str(day)) != 2:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    try:\n        datetime.datetime(int(year), int(month), int(day))\n    except ValueError:\n        return False\n    \n    return True",
    "test_cases": [
      "assert check_date(11,11,2002)==True",
      "assert check_date(13,11,2002)==False",
      "assert check_date('11','11','2002')==True"
    ]
  },
  {
    "mbpp_id": 911,
    "problem_statement": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from heapq import nlargest\nimport numpy as np\n\ndef maximum_product(arr):\n    \"\"\"\n    Computes the maximum product from three elements in an array of integers.\n    \n    Args:\n    arr : List[int] -- An array of integers\n    \n    Returns:\n    int -- The maximum product of any three integers in the array.\n    \"\"\"\n    # Find the three largest and two smallest values\n    top_three = nlargest(3, arr)\n    bottom_two = nlargest(-1, arr)[::-1]\n    return max(np.prod(top_three), np.prod(bottom_two))\n\n# Example check with provided data points\nassert maximum_product([12, 74, 9, 50, 61, 41]) == 225700, \"Test case 1 failed\"\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58]) == 414375, \"Test case 2 failed\"\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]) == 2520, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700",
      "assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375",
      "assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520"
    ]
  },
  {
    "mbpp_id": 912,
    "problem_statement": "Write a function to find ln, m lobb number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lobb_num(lnum, n):\n    result = 0\n    for i in range(n + 1):\n        result += lnum * ((i + 1) ** n)\n    return result\n\n# Test cases\nprint(int(lobb_num(5, 3))) # Expected output: 35\nprint(int(lobb_num(3, 2))) # Expected output: 5\nprint(int(lobb_num(4, 2))) # Expected output: 20",
    "test_cases": [
      "assert int(lobb_num(5, 3)) == 35",
      "assert int(lobb_num(3, 2)) == 5",
      "assert int(lobb_num(4, 2)) == 20"
    ]
  },
  {
    "mbpp_id": 913,
    "problem_statement": "Write a function to check for a number at the end of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def end_num(s):\n    # Check if 's' ends with a digit and is not empty\n    return s[-1].isdigit() and len(s) > 0",
    "test_cases": [
      "assert end_num('abcdef')==False",
      "assert end_num('abcdef7')==True",
      "assert end_num('abc')==False"
    ]
  },
  {
    "mbpp_id": 914,
    "problem_statement": "Write a python function to check whether the given string is made up of two alternating characters or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Two_Alter(s):\n    \"\"\"\n    This function checks if the input string 's' can be constructed using two different characters.\n    It returns True if such an arrangement exists, otherwise False.\n    \n    Examples:\n    >>> is_Two_Alter(\"abab\")\n    True\n    >>> is_Two_Alter(\"aaaa\")\n    False\n    >>> is_Two_Alter(\"xyz\")\n    False\n    \"\"\"\n    first_char = s[0]\n    count_first = 0\n    for char in s:\n        if char == first_char:\n            count_first += 1\n        else:\n            break\n    count_second = len(s) - count_first\n    return count_first * 2 == len(s)\n\n# Test cases\nprint(is_Two_Alter(\"abab\"))  # Expected output: True\nprint(is_Two_Alter(\"aaaa\"))  # Expected output: False\nprint(is_Two_Alter(\"xyz\"))   # Expected output: False",
    "test_cases": [
      "assert is_Two_Alter(\"abab\") == True",
      "assert is_Two_Alter(\"aaaa\") == False",
      "assert is_Two_Alter(\"xyz\") == False"
    ]
  },
  {
    "mbpp_id": 915,
    "problem_statement": "Write a function to rearrange positive and negative numbers in a given array using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "from typing import List\n\ndef rearrange_numbs(nums: List[int]) -> List[int]:\n    \"\"\"\n    Rearranges elements in an array so that all negative numbers appear before positive numbers.\n    \n    Args:\n    nums: A list of integers\n    \n    Returns:\n    A new list with negative numbers at the beginning followed by positive numbers.\n    \"\"\"\n    return [num for num in sorted(nums) if num < 0] + [num for num in sorted(nums) if num >= 0]\n\n# Test cases\nassert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10]) == [2, 5, 7, 8, 9, -10, -3, -1], \"Test case 1 failed\"\nassert rearrange_numbs([10,15,14,13,-18,12,-20]) == [10, 12, 13, 14, 15, -20, -18], \"Test case 2 failed\"\nassert rearrange_numbs([-20,20,-10,10,-30,30]) == [10, 20, 30, -30, -20, -10], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]",
      "assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]",
      "assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"
    ]
  },
  {
    "mbpp_id": 916,
    "problem_statement": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_triplet_array(arr, target_sum, k): \n    n = len(arr)\n    arr.sort()\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return None",
    "test_cases": [
      "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)",
      "assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)",
      "assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)"
    ]
  },
  {
    "mbpp_id": 917,
    "problem_statement": "Write a function to find the sequences of one upper case letter followed by lower case letters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_uppercase_lowercase(text):\n    # Define a regular expression pattern to find sequences starting with an uppercase letter and followed by lowercase letters.\n    pattern = r'(?<![a-z])[A-Z][a-z]+'\n    \n    # Search for matches in the given text using the defined pattern.\n    result = re.search(pattern, text)\n    \n    # If a match is found, return \"Found a match!\", otherwise return \"Not matched!\".\n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with provided test cases\nprint(text_uppercase_lowercase(\"AaBbGg\"))   # Expected output: 'Found a match!'\nprint(text_uppercase_lowercase(\"aA\"))       # Expected output: 'Not matched!'\nprint(text_uppercase_lowercase(\"PYTHON\"))   # Expected output: 'Not matched!'",
    "test_cases": [
      "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')",
      "assert text_uppercase_lowercase(\"aA\")==('Not matched!')",
      "assert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 918,
    "problem_statement": "Write a function to count coin change.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef coin_change(coins: List[int], amount: int, max_coins: int) -> int:\n    dp = [0] + [float('inf')] * amount\n    \n    for coin in coins:\n        for i in range(coin, amount + 1):\n            if i - coin >= 0 and dp[i - coin] != float('inf'):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[amount] if dp[amount] != float('inf') else -1",
    "test_cases": [
      "assert coin_change([1, 2, 3],3,4)==4",
      "assert coin_change([4,5,6,7,8,9],6,9)==2",
      "assert coin_change([4,5,6,7,8,9],6,4)==1"
    ]
  },
  {
    "mbpp_id": 919,
    "problem_statement": "Write a python function to multiply all items in the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_list(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result",
    "test_cases": [
      "assert multiply_list([1,-2,3]) == -6",
      "assert multiply_list([1,2,3,4]) == 24",
      "assert multiply_list([3,1,2,3]) == 18"
    ]
  },
  {
    "mbpp_id": 920,
    "problem_statement": "Write a function to remove all tuples with all none values in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_tuple(lst):\n    # Filter out all tuples containing all None values\n    return [t for t in lst if not all(x is None for x in t)]",
    "test_cases": [
      "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'",
      "assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'",
      "assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'"
    ]
  },
  {
    "mbpp_id": 921,
    "problem_statement": "Write a function to perform chunking of tuples each of size n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chunk_tuples(tup, n):\n    \"\"\"\n    Splits an input tuple into smaller chunks of size 'n'.\n    \n    Parameters:\n    tup (tuple): The original tuple.\n    n (int): The desired size of each chunk.\n    \n    Returns:\n    list: A list containing all possible partitions of 'tup' with size 'n'.\n    \"\"\"\n    return [tup[i:i+n] for i in range(0, len(tup), n)]\n\n# Check function to verify correctness\ndef check_function():\n    assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)], \"Test case 1 failed\"\n    assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)], \"Test case 2 failed\"\n    assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)], \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_function()",
    "test_cases": [
      "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]",
      "assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]",
      "assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]"
    ]
  },
  {
    "mbpp_id": 922,
    "problem_statement": "Write a function to find a pair with the highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_product(nums):\n    # Find all unique pairs and their products\n    unique_pairs = [(nums[i], nums[j]) for i in range(len(nums)) for j in range(i+1, len(nums))]\n    # Sort the list of tuples based on the absolute value of the second element\n    unique_pairs.sort(key=lambda x: abs(x[1]), reverse=True)\n    # Return the first pair with the maximum positive product\n    return unique_pairs[0]",
    "test_cases": [
      "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)",
      "assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)",
      "assert max_product([1, 3, 5, 6, 8, 9])==(8,9)"
    ]
  },
  {
    "mbpp_id": 923,
    "problem_statement": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def super_seq(str1, str2, len_str1, len_str2):\n    dp = [[0] * (len_str2 + 1) for _ in range(len_str1 + 1)]\n    \n    for i in range(1, len_str1 + 1):\n        for j in range(1, len_str2 + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                \n    return len_str1 + len_str2 - dp[len_str1][len_str2]\n\n# Test cases\nprint(super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7))  # Output: 9\nprint(super_seq(\"feek\", \"eke\", 4, 3))       # Output: 5\nprint(super_seq(\"PARRT\", \"RTA\", 5, 3))      # Output: 6",
    "test_cases": [
      "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9",
      "assert super_seq(\"feek\", \"eke\", 4, 3) == 5",
      "assert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6"
    ]
  },
  {
    "mbpp_id": 924,
    "problem_statement": "Write a function to find maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_of_two(a, b):\n    return max(a, b)",
    "test_cases": [
      "assert max_of_two(10,20)==20",
      "assert max_of_two(19,15)==19",
      "assert max_of_two(-10,-20)==-10"
    ]
  },
  {
    "mbpp_id": 925,
    "problem_statement": "Write a python function to calculate the product of all the numbers of a given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'mutiple_tuple' is not defined",
      "Test 2: FAIL - name 'mutiple_tuple' is not defined",
      "Test 3: FAIL - name 'mutiple_tuple' is not defined"
    ],
    "generated_code": "def multiple_tuple(input_tuple):\n    # Initialize result variable\n    result = 1\n    \n    # Iterate through each number in the tuple and multiply it with the result\n    for num in input_tuple:\n        result *= num\n        \n    return result\n\n# Test cases\nprint(multiple_tuple((4, 3, 2, 2, -1, 18)))  # Expected output: -864\nprint(multiple_tuple((1,2,3)))               # Expected output: 6\nprint(multiple_tuple((-2,-4,-6)))            # Expected output: -48)",
    "test_cases": [
      "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864",
      "assert mutiple_tuple((1,2,3)) == 6",
      "assert mutiple_tuple((-2,-4,-6)) == -48"
    ]
  },
  {
    "mbpp_id": 926,
    "problem_statement": "Write a function to find n-th rencontres number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'rendezvous' is not defined"
    ],
    "generated_code": "def rencontres_number(n, m):\n    def fact(x):\n        res = 1\n        for i in range(2, x + 1):\n            res *= i\n        return res\n    \n    ans = 1\n    k = m - 1\n    while n:\n        if n & 1:\n            ans *= fact(k)\n        n >>= 1\n        k -= 1\n    return ans // fact(m)\n\n# Test Cases\nprint(rendezvous(7, 2)) # Expected output: 924\nprint(rendezvous(3, 0)) # Expected output: 2\nprint(rendezvous(3, 1)) # Expected output: 3",
    "test_cases": [
      "assert rencontres_number(7, 2) == 924",
      "assert rencontres_number(3, 0) == 2",
      "assert rencontres_number(3, 1) == 3"
    ]
  },
  {
    "mbpp_id": 927,
    "problem_statement": "Write a function to calculate the height of the given binary tree.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef max_height(node):\n    if not node:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        return max(left_height, right_height) + 1\n\n# Test data\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\n\nroot1 = TreeNode(1)\nroot1.left = TreeNode(2)\nroot1.right = TreeNode(3)\nroot1.left.left = TreeNode(4)\nroot1.left.right = TreeNode(5)\nroot1.right.left = TreeNode(6)\nroot1.right.right = TreeNode(7)\n\nroot2 = TreeNode(1)\nroot2.left = TreeNode(2)\nroot2.right = TreeNode(3)\nroot2.left.left = TreeNode(4)\nroot2.left.right = TreeNode(5)\n\nprint(max_height(root)) # Expected output: 3\nprint(max_height(root1)) # Expected output: 5\nprint(max_height(root2)) # Expected output: 4",
    "test_cases": [
      "assert (max_height(root)) == 3",
      "assert (max_height(root1)) == 5 ",
      "assert (max_height(root2)) == 4"
    ]
  },
  {
    "mbpp_id": 928,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from datetime import datetime\n\ndef change_date_format(date_string):\n    # Convert the string to a datetime object\n    dt = datetime.strptime(date_string, '%Y-%m-%d')\n    # Format the datetime object into the new desired format and return it as a string\n    return dt.strftime('%d-%m-%Y')\n\n# Test cases\nprint(change_date_format('2026-01-02'))  # Expected output: '02-01-2026'\nprint(change_date_format('2021-01-04'))  # Expected output: '04-01-2021'\nprint(change_date_format('2030-06-06'))  # Expected output: '06-06-2030'",
    "test_cases": [
      "assert change_date_format('2026-01-02')=='02-01-2026'",
      "assert change_date_format('2021-01-04')=='04-01-2021'",
      "assert change_date_format('2030-06-06')=='06-06-2030'"
    ]
  },
  {
    "mbpp_id": 929,
    "problem_statement": "Write a function to count repeated items of a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_tuplex(input_tuple, item_to_count):\n    return input_tuple.count(item_to_count)",
    "test_cases": [
      "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3",
      "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2",
      "assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4"
    ]
  },
  {
    "mbpp_id": 930,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or more b's by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define the regex pattern to find strings starting with \"a\" followed by zero or more \"b\"s.\n    pattern = 'a(b*)'\n    \n    # Use re.search to search for the pattern in the given text and check if it found a match.\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match(\"msb\") == 'Not matched!'",
      "assert text_match(\"a0c\") == 'Found a match!'",
      "assert text_match(\"abbc\") == 'Found a match!'"
    ]
  },
  {
    "mbpp_id": 931,
    "problem_statement": "Write a function to calculate the sum of series 1³+2³+3³+….+n³.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    # Initialize sum with the first term of the series\n    total_sum = 0\n    \n    # Iterate from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Add the ith term to the total sum\n        total_sum += i ** 3\n        \n    return total_sum",
    "test_cases": [
      "assert sum_series(7)==784",
      "assert sum_series(5)==225",
      "assert sum_series(15)==14400"
    ]
  },
  {
    "mbpp_id": 932,
    "problem_statement": "Write a function to remove duplicate words from a given list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_duplic_list(words):\n    return list(set(words))",
    "test_cases": [
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']",
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']",
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']"
    ]
  },
  {
    "mbpp_id": 933,
    "problem_statement": "Write a function to convert camel case string to snake case string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef camel_to_snake(string):\n    # Replace each uppercase letter with an underscore followed by the lowercase version of the letter\n    return '_'.join(re.findall('[A-Z][^A-Z]*', string)).lower()\n\n# Test cases\nprint(camel_to_snake('GoogleAssistant'))  # Expected output: google_assistant\nprint(camel_to_snake('ChromeCast'))      # Expected output: chrome_cast\nprint(camel_to_snake('QuadCore'))        # Expected output: quad_core",
    "test_cases": [
      "assert camel_to_snake('GoogleAssistant') == 'google_assistant'",
      "assert camel_to_snake('ChromeCast') == 'chrome_cast'",
      "assert camel_to_snake('QuadCore') == 'quad_core'"
    ]
  },
  {
    "mbpp_id": 934,
    "problem_statement": "Write a function to find the nth delannoy number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'dealnumoy_num' is not defined. Did you mean: 'dealnnoy_num'?"
    ],
    "generated_code": "import math\n\ndef factorial(num):\n    \"\"\"\n    Calculate the factorial of a given number.\n    \"\"\"\n    result = 1\n    for i in range(2, num + 1):\n        result *= i\n    return result\n\ndef dealnnoy_num(n, k):\n    \"\"\"\n    Calculate the nth Delannoy number for coordinates (k,k+1,...,k+n-1).\n    \n    Parameters:\n    n (int): The order of the Delannoy number.\n    k (int): The starting coordinate.\n    \n    Returns:\n    int: The nth Delannoy number.\n    \"\"\"\n    denominator = math.factorial(k + n - 1)\n    numerator = math.prod([math.factorial(i) for i in range(n)])\n    return numerator // denominator\n\n# Test cases\nprint(dealnumoy_num(3, 4))  # Expected output: 129\nprint(dealnumoy_num(3, 3))  # Expected output: 63\nprint(dealnumoy_num(4, 5))  # Expected output: 681",
    "test_cases": [
      "assert dealnnoy_num(3, 4) == 129",
      "assert dealnnoy_num(3, 3) == 63",
      "assert dealnnoy_num(4, 5) == 681"
    ]
  },
  {
    "mbpp_id": 935,
    "problem_statement": "Write a function to calculate the sum of series 1²+2²+3²+….+n².",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def series_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i * i\n    return total",
    "test_cases": [
      "assert series_sum(6)==91",
      "assert series_sum(7)==140",
      "assert series_sum(12)==650"
    ]
  },
  {
    "mbpp_id": 936,
    "problem_statement": "Write a function to re-arrange the given tuples based on the given ordered list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange_tuples(tuples_list, order_list):\n    # Sort the tuples based on the sorted indices of their elements in the order list\n    return [t for _, t in sorted(zip(order_list, tuples_list))]\n\n# Example usage:\nprint(re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)], [1, 4, 2, 3]))  # Output: [(1, 9), (4, 3), (2, 10), (3, 2)]",
    "test_cases": [
      "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]",
      "assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]",
      "assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]"
    ]
  },
  {
    "mbpp_id": 937,
    "problem_statement": "Write a function to count the most common character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef max_char(s):\n    return max(Counter(s).items(), key=lambda x: x[1])[0]",
    "test_cases": [
      "assert max_char(\"hello world\")==('l')",
      "assert max_char(\"hello \")==('l')",
      "assert max_char(\"python pr\")==('p')"
    ]
  },
  {
    "mbpp_id": 938,
    "problem_statement": "Write a function to find three closest elements from three sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import bisect\nfrom typing import List\n\ndef find_closet(arr1: List[int], arr2: List[int], arr3: List[int], target1: int, target2: int, target3: int) -> List[int]:\n    def get_closest_elements(arr, n):\n        closest = [float('inf')] * (n + 1)\n        for i in range(n - 1, -1, -1):\n            idx = bisect.bisect_left(arr, closest[i + 1])\n            closest[idx] = min(closest[idx], arr[i])\n        return closest[:target1]\n\n    return [get_closest_elements(arr1, len(arr1)), get_closest_elements(arr2, len(arr2)), get_closest_elements(arr3, len(arr3))][:min(target1, target2, target3)]",
    "test_cases": [
      "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)",
      "assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)",
      "assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)"
    ]
  },
  {
    "mbpp_id": 939,
    "problem_statement": "Write a function to sort a list of dictionaries using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['make'])",
    "test_cases": [
      "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]",
      "assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])",
      "assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])"
    ]
  },
  {
    "mbpp_id": 940,
    "problem_statement": "Write a function to sort the given array by using heap sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def heapify(arr, n, i):\n    largest = i  # Initialize largest as root\n    left = 2 * i + 1     # left = 2*i + 1\n    right = 2 * i + 2   # right = 2*i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # swap\n\n        # Recursively heapify the affected sub-tree\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        heapify(arr, i, 0)\n\n    return arr\n\n# Test the function with provided data points\nprint(heap_sort([12, 2, 4, 5, 2, 3]))  # Expected output: [2, 2, 3, 4, 5, 12]\nprint(heap_sort([32, 14, 5, 6, 7, 19]))  # Expected output: [5, 6, 7, 14, 19, 32]\nprint(heap_sort([21, 15, 29, 78, 65]))  # Expected output: [15, 21, 29, 65, 78]",
    "test_cases": [
      "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]",
      "assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]",
      "assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]"
    ]
  },
  {
    "mbpp_id": 941,
    "problem_statement": "Write a function to count the elements in a list until an element is a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_elim(lst):\n    counter = 0\n    for item in lst:\n        if isinstance(item, tuple):\n            break\n        else:\n            counter += 1\n    return counter",
    "test_cases": [
      "assert count_elim([10,20,30,(10,20),40])==3",
      "assert count_elim([10,(20,30),(10,20),40])==1",
      "assert count_elim([(10,(20,30,(10,20),40))])==0"
    ]
  },
  {
    "mbpp_id": 942,
    "problem_statement": "Write a function to check if any list element is present in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(test_list, target_list):\n    for item in test_list:\n        if item in target_list:\n            return True\n    return False",
    "test_cases": [
      "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True",
      "assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True",
      "assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False"
    ]
  },
  {
    "mbpp_id": 943,
    "problem_statement": "Write a function to combine two given sorted lists using heapq module.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not subscriptable"
    ],
    "generated_code": "import heapq\n\ndef combine_lists(list1, list2):\n    combined_list = []\n    heapq.heapify(list1)\n    heapq.heapify(list2)\n\n    while list1 or list2:\n        if not list1:\n            combined_list.extend(heapq.heappop(list2))\n        elif not list2:\n            combined_list.extend(heapq.heappop(list1))\n        else:\n            if list1[0] <= list2[0]:\n                combined_list.append(heapq.heappop(list1)[0])\n                heapq.heappush(list1, list1[0]+1)\n            else:\n                combined_list.append(heapq.heappop(list2)[0])\n                heapq.heappush(list2, list2[0]+1)\n\n    return combined_list\n\n# Test cases\nprint(combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])) # Expected output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11]))      # Expected output: [1, 2, 3, 5, 5, 6, 7, 8, 9, 11]\nprint(combine_lists([1,3,7],[2,4,6]))                        # Expected output: [1,2,3,4,6,7]",
    "test_cases": [
      "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
      "assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]",
      "assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]"
    ]
  },
  {
    "mbpp_id": 944,
    "problem_statement": "Write a function to separate and print the numbers and their position of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def num_position(s):\n    # Splitting the string at spaces to get individual words and positions\n    parts = s.split()\n    \n    total_numbers = len([word for word in parts if word.isdigit()])\n    \n    # Finding the index of the last number\n    last_number_index = max(map(parts.index, filter(str.isdigit, parts)))\n    \n    return last_number_index + 1\n\n# Check function with provided data points\nassert num_position(\"there are 70 flats in this apartment\") == 10\nassert num_position(\"every adult have 32 teeth\") == 17\nassert num_position(\"isha has 79 chocolates in her bag\") == 9\n\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert num_position(\"there are 70 flats in this apartment\")==10",
      "assert num_position(\"every adult have 32 teeth\")==17",
      "assert num_position(\"isha has 79 chocolates in her bag\")==9"
    ]
  },
  {
    "mbpp_id": 945,
    "problem_statement": "Write a function to convert the given tuples into set.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_set(test_tup):\n    # Convert the input tuple to a set and return it\n    return set(test_tup)",
    "test_cases": [
      "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}",
      "assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}",
      "assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}"
    ]
  },
  {
    "mbpp_id": 946,
    "problem_statement": "Write a function to find the most common elements and their counts of a specified text.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def most_common_elem(text, n=5):\n    from collections import Counter\n    word_count = Counter(text.split())\n    return[word for word, count in word_count.most_common(n)]\n\n# Test cases\nprint(most_common_elem('lkseropewdssafsdfafkpwe', 3)) # Expected output: [('s', 4), ('e', 3), ('f', 3)]\nprint(most_common_elem('lkseropewdssafsdfafkpwe', 2)) # Expected output: [('s', 4), ('e', 3)]\nprint(most_common_elem('lkseropewdssafsdfafkpwe', 7)) # Expected output: [('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
    "test_cases": [
      "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] ",
      "assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]",
      "assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"
    ]
  },
  {
    "mbpp_id": 947,
    "problem_statement": "Write a python function to find the length of the shortest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Split each word into characters and join them back into a single string\n    # The length of this new string is the length of the shortest word\n    return min(len(word) for word in words)\n\n# Example usage:\nprint(len_log([\"win\", \"lose\", \"great\"]))  # Output: 3\nprint(len_log([\"a\", \"ab\", \"abc\"]))       # Output: 1\nprint(len_log([\"12\", \"12\", \"1234\"]))     # Output: 2",
    "test_cases": [
      "assert len_log([\"win\",\"lose\",\"great\"]) == 3",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 1",
      "assert len_log([\"12\",\"12\",\"1234\"]) == 2"
    ]
  },
  {
    "mbpp_id": 948,
    "problem_statement": "Write a function to get an item of a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_item(tup, index):\n    return tup[index]\n\nprint(get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3))  # Expected output: 'e'\nprint(get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), -4))  # Expected output: 'u'\nprint(get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), -3))  # Expected output: 'r'",
    "test_cases": [
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')",
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')",
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')"
    ]
  },
  {
    "mbpp_id": 949,
    "problem_statement": "Write a function to sort the given tuple list basis the total digits in tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: tuple index out of range"
    ],
    "generated_code": "def sort_list(lst):\n    return sorted(lst, key=lambda x: len(str(x[0]+x[1]+x[2]+x[3])))\n\n# Test Cases\nprint(sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)])) # Should return [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\nprint(sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)])) # Should return [(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\nprint(sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)])) # Should return [(1, 2), (145,), (134, 23), (34, 4, 61, 723)]",
    "test_cases": [
      "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'",
      "assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'",
      "assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'"
    ]
  },
  {
    "mbpp_id": 950,
    "problem_statement": "Write a function to display sign of the chinese zodiac for given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def chinese_zodiac(year):\n    months = ['Monkey', 'Rooster', 'Dog', 'Pig']\n    days_of_week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    \n    if not isinstance(year, int) or year < 0:\n        raise ValueError(\"Year must be a positive integer.\")\n    \n    day_of_year = year % 12 + 1\n    \n    # Find the month and day based on the remainder\n    month_index = day_of_year - 1\n    while month_index >= len(months):\n        month_index -= len(months)\n    \n    day_index = ((day_of_year - 1) // 12) * 6 + ((day_of_year - 1) % 12) + 1\n    while day_index >= len(days_of_week):\n        day_index -= len(days_of_week)\n    \n    return f\"{months[month_index]} {days_of_week[day_index]}\"",
    "test_cases": [
      "assert chinese_zodiac(1997)==('Ox')",
      "assert chinese_zodiac(1998)==('Tiger')",
      "assert chinese_zodiac(1994)==('Dog')"
    ]
  },
  {
    "mbpp_id": 951,
    "problem_statement": "Write a function to find the maximum of similar indices in two lists of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_similar_indices(list1, list2):\n    # Find the index of the largest value for each tuple in both lists\n    idx_list1 = [max(range(len(x)), key=x.__getitem__) for x in list1]\n    idx_list2 = [max(range(len(y)), key=y.__getitem__) for y in list2]\n\n    # Compare corresponding elements and filter out non-matching pairs\n    filtered_pairs = []\n    for i, j in zip(idx_list1, idx_list2):\n        if i == j:\n            filtered_pairs.append((list1[i], list2[j]))\n\n    return filtered_pairs\n\nprint(max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]))\n# Output: [(5, 4), (8, 10), (8, 14)]\n\nprint(max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]))\n# Output: [(6, 5), (9, 11), (9, 15)]\n\nprint(max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]))\n# Output: [(7, 6), (10, 12), (10, 16)]",
    "test_cases": [
      "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]",
      "assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]",
      "assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]"
    ]
  },
  {
    "mbpp_id": 952,
    "problem_statement": "Write a function to compute the value of ncr mod p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "from math import comb\n\ndef nCr_mod_p(n, r, p):\n    \"\"\"\n    Compute the value of nCr mod p.\n    \n    Args:\n    n (int): Total number of items.\n    r (int): Number of items to choose.\n    p (int): Modulus for the result.\n    \n    Returns:\n    int: Value of nCr mod p.\n    \"\"\"\n    # Using comb function from math module which returns nCr directly\n    return comb(n, r)\n\n# Check function with provided data points\nassert nCr_mod_p(10, 2, 13) == 6, \"Test case 1 failed\"\nassert nCr_mod_p(11, 3, 14) == 11, \"Test case 2 failed\"\nassert nCr_mod_p(18, 14, 19) == 1, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert nCr_mod_p(10, 2, 13) == 6",
      "assert nCr_mod_p(11, 3, 14) == 11",
      "assert nCr_mod_p(18, 14, 19) == 1"
    ]
  },
  {
    "mbpp_id": 953,
    "problem_statement": "Write a python function to find the minimun number of subsets with distinct elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'subset' is not defined",
      "Test 2: FAIL - name 'subset' is not defined",
      "Test 3: FAIL - name 'subset' is not defined"
    ],
    "generated_code": "from collections import Counter\n\ndef subset_with_distinct_elements(arr, n):\n    count = Counter()\n    for num in arr:\n        count[num] += 1\n    max_count = max(count.values())\n    return len(arr) - sum(v == max_count for v in count.values()) - 1",
    "test_cases": [
      "assert subset([1, 2, 3, 4],4) == 1",
      "assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2",
      "assert subset([1, 2, 3 ],3) == 1"
    ]
  },
  {
    "mbpp_id": 954,
    "problem_statement": "Write a function that gives profit amount if the given amount has profit else return none.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def profit_amount(amount_invested, target_profit):\n    current_profit = amount_invested - target_profit\n    if current_profit > 0:\n        return current_profit\n    else:\n        return None",
    "test_cases": [
      "assert profit_amount(1500,1200)==300",
      "assert profit_amount(100,200)==None",
      "assert profit_amount(2000,5000)==None"
    ]
  },
  {
    "mbpp_id": 955,
    "problem_statement": "Write a function to find out, if the given number is abundant.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_abundant(n):\n    sum = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            sum += i\n    return sum > n",
    "test_cases": [
      "assert is_abundant(12)==True",
      "assert is_abundant(13)==False",
      "assert is_abundant(9)==False"
    ]
  },
  {
    "mbpp_id": 956,
    "problem_statement": "Write a function to split the given string at uppercase letters by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef split_list(s):\n    # Splitting the string based on uppercase letters and keeping the separators as strings\n    return [i for i in re.split(r'(?=[A-Z])', s) if i]",
    "test_cases": [
      "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']",
      "assert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']",
      "assert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']"
    ]
  },
  {
    "mbpp_id": 957,
    "problem_statement": "Write a python function to get the position of rightmost set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_First_Set_Bit_Pos(num):\n    \"\"\"\n    Get the position of the first set bit from the least significant bit.\n    \n    Parameters:\n    num (int): The number to check for the first set bit.\n    \n    Returns:\n    int: The position of the first set bit, or -1 if there is no set bit in the number.\n    \"\"\"\n    pos = -1\n    while num & 1 == 0 and num != 0:\n        pos += 1\n        num >>= 1\n    return pos\n\n# Check function with provided data points\nprint(get_First_Set_Bit_Pos(12))  # Expected output: 3\nprint(get_First_Set_Bit_Pos(18))  # Expected output: 2\nprint(get_First_Set_Bit_Pos(16))  # Expected output: 5",
    "test_cases": [
      "assert get_First_Set_Bit_Pos(12) == 3",
      "assert get_First_Set_Bit_Pos(18) == 2",
      "assert get_First_Set_Bit_Pos(16) == 5"
    ]
  },
  {
    "mbpp_id": 958,
    "problem_statement": "Write a function to convert an integer into a roman numeral.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_cases": [
      "assert int_to_roman(1)==(\"I\")",
      "assert int_to_roman(50)==(\"L\")",
      "assert int_to_roman(4)==(\"IV\")"
    ]
  },
  {
    "mbpp_id": 959,
    "problem_statement": "Write a python function to find the average of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Average' is not defined",
      "Test 2: FAIL - name 'Average' is not defined",
      "Test 3: FAIL - name 'Average' is not defined"
    ],
    "generated_code": "def average(numbers):\n    # Calculate sum of all numbers in the list\n    total = sum(numbers)\n    # Calculate number of elements in the list\n    count = len(numbers)\n    # Return the average as float\n    return round(total / count, 2)\n\n# Test cases\nprint(average([15, 9, 55, 41, 35, 20, 62, 49]))  # Expected output: 35.75\nprint(average([4, 5, 1, 2, 9, 7, 10, 8]))       # Expected output: 5.75\nprint(average([1,2,3]))                         # Expected output: 2",
    "test_cases": [
      "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75",
      "assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75",
      "assert Average([1,2,3]) == 2"
    ]
  },
  {
    "mbpp_id": 960,
    "problem_statement": "Write a function to solve tiling problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_noOfways(length):\n    \"\"\"\n    This function calculates the number of ways to tile a board of length n using two types of tiles.\n    Each tile can be either vertical or horizontal.\n    \n    Parameters:\n    - length (int): The total length of the board\n    \n    Returns:\n    int: The number of different ways to tile the board with the given constraints.\n    \"\"\"\n    if length == 0:\n        return 1\n    elif length < 0:\n        return 0\n    else:\n        return get_noOfways(length-1) + get_noOfways(length-2)\n\n# Test Cases\nprint(get_noOfways(4))  # Expected output: 3\nprint(get_noOfways(3))  # Expected output: 2\nprint(get_noOfways(5))  # Expected output: 5",
    "test_cases": [
      "assert get_noOfways(4)==3",
      "assert get_noOfways(3)==2",
      "assert get_noOfways(5)==5"
    ]
  },
  {
    "mbpp_id": 961,
    "problem_statement": "Write a function to convert a roman numeral to an integer.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def roman_to_int(s):\n    \"\"\"\n    Convert a Roman numeral to its integer value.\n    \n    Args:\n    s (str): A string representing a Roman numeral.\n    \n    Returns:\n    int: The integer value of the Roman numeral.\n    \"\"\"\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    \n    for char in reversed(s):\n        if char == 'M':\n            total += 1000\n        elif char == 'D':\n            total += 500\n        elif char == 'C':\n            if prev_value < 100:\n                total -= 100\n            else:\n                total += 100\n        elif char == 'L':\n            total += 50\n        elif char == 'X':\n            if prev_value < 10:\n                total -= 10\n            else:\n                total += 10\n        elif char == 'V':\n            total += 5\n        else:\n            total += roman_dict[char]\n        prev_value = roman_dict.get(char, 0)\n        \n    return total",
    "test_cases": [
      "assert roman_to_int('MMMCMLXXXVI')==3986",
      "assert roman_to_int('MMMM')==4000",
      "assert roman_to_int('C')==100"
    ]
  },
  {
    "mbpp_id": 962,
    "problem_statement": "Write a python function to find the sum of all even natural numbers within the range l and r.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Even(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total_sum += num\n    return total_sum",
    "test_cases": [
      "assert sum_Even(2,5) == 6",
      "assert sum_Even(3,8) == 18",
      "assert sum_Even(4,6) == 10"
    ]
  },
  {
    "mbpp_id": 963,
    "problem_statement": "Write a function to calculate the discriminant value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def discriminant_value(a, b, c):\n    \"\"\"\n    Calculate the discriminant of a quadratic equation ax^2 + bx + c = 0.\n    \n    Parameters:\n    a (int): Coefficient of x^2\n    b (int): Coefficient of x\n    c (int): Constant term\n    \n    Returns:\n    tuple: A message indicating if there is one, two, or no real solutions along with the absolute value of the discriminant.\n    \"\"\"\n    d = b**2 - 4*a*c  # Discriminant calculation\n    if d > 0:\n        return (\"two solutions\", abs(d))\n    elif d == 0:\n        return (\"one solution\", abs(d))\n    else:\n        return (\"no real solution\", abs(d))\n\n# Test cases\nprint(discriminant_value(4, 8, 2))   # Expected output: ('Two solutions', 32)\nprint(discriminant_value(5, 7, 9))   # Expected output: ('no real solution', -131)\nprint(discriminant_value(0, 0, 9))   # Expected output: ('one solution', 0)",
    "test_cases": [
      "assert discriminant_value(4,8,2)==(\"Two solutions\",32)",
      "assert discriminant_value(5,7,9)==(\"no real solution\",-131)",
      "assert discriminant_value(0,0,9)==(\"one solution\",0)"
    ]
  },
  {
    "mbpp_id": 964,
    "problem_statement": "Write a python function to check whether the length of the word is even or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    # Check if the length of the input string is even\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert word_len(\"program\") == False",
      "assert word_len(\"solution\") == True",
      "assert word_len(\"data\") == True"
    ]
  },
  {
    "mbpp_id": 965,
    "problem_statement": "Write a function to convert camel case string to snake case string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def camel_to_snake(camel_str):\n    return ''.join('_' + i.lower() if i.isupper() else i for i in camel_str).replace('_', '')",
    "test_cases": [
      "assert camel_to_snake('PythonProgram')==('python_program')",
      "assert camel_to_snake('pythonLanguage')==('python_language')",
      "assert camel_to_snake('ProgrammingLanguage')==('programming_language')"
    ]
  },
  {
    "mbpp_id": 966,
    "problem_statement": "Write a function to remove an empty tuple from a list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: unmatched ')'"
    ],
    "generated_code": "def remove_empty(tuples_list):\n    # Remove empty tuples from the list\n    return [t for t in tuples_list if t]\n\n# Test cases\nprint(remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]))  # Expected output: [('a', 'b'), ('a', 'b', 'c'), 'd']\nprint(remove_empty([(), (), ('',), (\"python\"), (\"program\")])))             # Expected output: ['python', 'program']\nprint(remove_empty([(), (), ('',), (\"java\")])))                            # Expected output: ['java']",
    "test_cases": [
      "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  ",
      "assert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  ",
      "assert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  "
    ]
  },
  {
    "mbpp_id": 967,
    "problem_statement": "Write a python function to accept the strings which contains all vowels.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check(strng):\n    # Check if all characters in the string are vowels\n    if len(re.findall(r'[aeiouAEIOU]', strng)) == len(strng):\n        return 'accepted'\n    else:\n        return 'not accepted'",
    "test_cases": [
      "assert check(\"SEEquoiaL\") == 'accepted'",
      "assert check('program') == \"not accepted\"",
      "assert check('fine') == \"not accepted\""
    ]
  },
  {
    "mbpp_id": 968,
    "problem_statement": "Write a python function to find maximum possible value for the given periodic function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'floor_Max' is not defined",
      "Test 2: FAIL - name 'floor_Max' is not defined",
      "Test 3: FAIL - name 'floor_Max' is not defined"
    ],
    "generated_code": "import math\n\ndef floor_max(a, b, c):\n    # Calculate the maximum of the three numbers and take the integer part using math.floor()\n    max_val = math.floor(max(a, b, c))\n    return max_val",
    "test_cases": [
      "assert floor_Max(11,10,9) == 9",
      "assert floor_Max(5,7,4) == 2",
      "assert floor_Max(2,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 969,
    "problem_statement": "Write a function to join the tuples if they have similar initial elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - (5, 6, 5, 7) is not in list",
      "Test 2: FAIL - (6, 7, 6, 8) is not in list",
      "Test 3: FAIL - (7, 8, 7, 9) is not in list"
    ],
    "generated_code": "def join_tuples(tuples_list):\n    result = []\n    seen = set()\n    \n    for tuple_ in tuples_list:\n        key = tuple_[0]\n        if key not in seen:\n            result.append(tuple_)\n            seen.add(key)\n        else:\n            existing_tuple = [tup for tup in result if tup[0] == key][0]\n            existing_tuple += tuple_\n            result[result.index(existing_tuple)] = existing_tuple\n    \n    return result",
    "test_cases": [
      "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]",
      "assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]",
      "assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]"
    ]
  },
  {
    "mbpp_id": 970,
    "problem_statement": "Write a function to find minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_two(a, b):\n    return min(a, b)",
    "test_cases": [
      "assert min_of_two(10,20)==10",
      "assert min_of_two(19,15)==15",
      "assert min_of_two(-10,-20)==-20"
    ]
  },
  {
    "mbpp_id": 971,
    "problem_statement": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximum_segments(n, a, b, c):\n    if a + b + c > n:\n        return 0\n    elif a <= n // 2 < b and n % 2 == 0 or a < n // 2 < b and n % 2 != 0 or n % 2 == 0:\n        return min(a, b)\n    else:\n        return max(c, max(a, b)) * 2",
    "test_cases": [
      "assert maximum_segments(7, 5, 2, 5) == 2",
      "assert maximum_segments(17, 2, 1, 3) == 17",
      "assert maximum_segments(18, 16, 3, 6) == 6"
    ]
  },
  {
    "mbpp_id": 972,
    "problem_statement": "Write a function to concatenate the given two tuples to a nested tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_nested(tuple1, tuple2):\n    # Concatenate the two tuples and create a nested tuple from them\n    result = (tuple1,) + (tuple2,)\n    return result",
    "test_cases": [
      "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)",
      "assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)",
      "assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)"
    ]
  },
  {
    "mbpp_id": 973,
    "problem_statement": "Write a python function to left rotate the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def left_rotate(s,n):\n    return s[n:] + s[:n]\n\n# Test cases\nprint(left_rotate(\"python\",2))  # Expected output: \"thonpy\"\nprint(left_rotate(\"bigdata\",3 )) # Expected output: \"databig\"\nprint(left_rotate(\"hadoop\",1 ))  # Expected output: \"adooph\"",
    "test_cases": [
      "assert left_rotate(\"python\",2) == \"thonpy\"   ",
      "assert left_rotate(\"bigdata\",3 ) == \"databig\" ",
      "assert left_rotate(\"hadoop\",1 ) == \"adooph\" "
    ]
  },
  {
    "mbpp_id": 974,
    "problem_statement": "Write a function to find the minimum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_sum_path(triangle):\n    # Iterate from bottom of the triangle up to the first row\n    for i in range(len(triangle) - 2, -1, -1):\n        # For each element, add its value to the minimum of the two adjacent elements below it\n        triangle[i][0] += min(triangle[i + 1][0], triangle[i + 1][1])\n        triangle[i][len(triangle[0]) - 1] += min(triangle[i + 1][-1], triangle[i + 1][-2])\n        # Adjust remaining elements by adding their values to the maximum of the two adjacent elements below them\n        for j in range(1, len(triangle[i])):\n            triangle[i][j] += max(triangle[i + 1][j - 1], triangle[i + 1][j])\n\n    # The top-left element now contains the minimum total path sum\n    return triangle[0][0]\n\n# Test cases\nprint(min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]))  # Expected output: 6\nprint(min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]))  # Expected output: 10\nprint(min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]))  # Expected output: 9",
    "test_cases": [
      "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6",
      "assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 ",
      "assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def find_Min_Sum(num):\n    \"\"\"\n    Finds and returns the minimum sum of factors for the given number.\n    \n    Parameters:\n    num (int): The number whose minimum sum of factors is to be found.\n    \n    Returns:\n    int: The minimum sum of factors for the given number.\n    \"\"\"\n    # Initialize the minimum sum with the number itself since it's always greater than its factors\n    min_sum = num\n    \n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            # Calculate sum of factors\n            current_sum = i + (num // i)\n            \n            # Update minimum sum if the current sum is smaller\n            if current_sum < min_sum:\n                min_sum = current_sum\n                \n    return min_sum\n\n# Check function with provided data points\nassert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_freq(tup):\n    freq_dict = {}\n    for elem in tup:\n        if isinstance(elem, int):\n            freq_dict[elem] = freq_dict.get(elem, 0) + 1\n        elif isinstance(elem, tuple):\n            for sub_elem in elem:\n                freq_dict[sub_elem] = freq_dict.get(sub_elem, 0) + 1\n    return freq_dict\n\n# Test cases\nprint(count_element_freq((5, 6, (5, 6), 7, (8, 9), 9)))  # Should return {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nprint(count_element_freq((6, 7, (6, 7), 8, (9, 10), 10)))  # Should return {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nprint(count_element_freq((7, 8, (7, 8), 9, (10, 11), 11)))  # Should return {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_str(tuple_data, add_string):\n    \"\"\"\n    This function takes a tuple and an addition string as input.\n    It returns a new list where each element of the original tuple is followed by the addition string.\n    \n    Args:\n        tuple_data (tuple): The original tuple data.\n        add_string (str): The string to be added after each element in the tuple.\n        \n    Returns:\n        list: A list with elements from the original tuple followed by the specified addition string.\n    \"\"\"\n    # Convert the tuple to a list for easier manipulation\n    lst = list(tuple_data)\n    # Loop through the list and append the addition string to each element\n    for i in range(len(lst)):\n        lst.insert(i + 1, add_string)\n    # Return the resulting list\n    return lst\n\n# Test cases\nprint(add_str((5, 6, 7, 4, 9), \"FDF\"))  # Expected output: [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nprint(add_str((7, 8, 9, 10), \"PF\"))     # Expected output: [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nprint(add_str((11, 14, 12, 1, 4), \"JH\"))  # Expected output: [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_elements(tup_list):\n    # Initialize the total sum to 0\n    total_sum = 0\n    \n    # Iterate through each element in the tuple list and add it to the total sum\n    for tup in tup_list:\n        for num in tup:\n            total_sum += num\n            \n    return total_sum\n\n# Test cases\nprint(sum_elements([(7, 8, 9, 1, 10, 7), (1, 2, 3, 4, 5, 6), (11, 12 ,13 ,45, 14)]))",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from itertools import combinations\n\ndef modular_sum(numbers, divisor, target_modulus):\n    \"\"\"\n    Check if there exists a non-empty subset of numbers whose sum is divisible by target modulus.\n    \n    Parameters:\n    - numbers: List[int] -- A list of integers.\n    - divisor: int -- The divisor used to find divisibility.\n    - target_modulus: int -- The target modulus for divisibility.\n    \n    Returns:\n    bool -- True if such a subset exists, otherwise False.\n    \"\"\"\n    # Generate all possible subsets using combinations from itertools\n    for r in range(1, len(numbers) + 1): \n        for subset in combinations(numbers, r):\n            if sum(subset) % divisor == target_modulus:\n                return True\n    return False\n\n# Test cases\nprint(modular_sum([3, 1, 7, 5], 4, 6))  # Expected output: True\nprint(modular_sum([1, 7], 2, 5))       # Expected output: False\nprint(modular_sum([1, 6], 2, 5))       # Expected output: False",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def radix_sort(arr):\n    import math\n    \n    def get_digit(num, position):\n        return int(math.pow(10, position)) // 10 % 10\n    \n    max_length = len(str(max(arr)))\n    for position in range(max_length):\n        buckets = [[] for _ in range(10)]\n        for num in arr:\n            digit = get_digit(num, position)\n            buckets[digit].append(num)\n        arr.clear()\n        for bucket in buckets:\n            arr.extend(bucket)\n\n    return arr",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(nums):\n    # Initialize max_num with the first element of nums\n    max_num = nums[0]\n    \n    # Iterate through each number in nums starting from index 1\n    for num in nums[1:]:\n        if num > max_num:\n            # Update max_num if the current number is greater than max_num\n            max_num = num\n    \n    # Return the maximum number found\n    return max_num",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sqrt_root(number):\n    \"\"\"\n    This function calculates the square root of a given perfect number.\n    \n    Args:\n        number (int): A positive integer representing a perfect number.\n        \n    Returns:\n        float: The square root of the input number.\n    \"\"\"\n    return math.sqrt(number)\n\n# Test cases to verify the correctness of the function\nassert abs(sqrt_root(4) - 2.0) < 1e-9\nassert abs(sqrt_root(16) - 4.0) < 1e-9\nassert abs(sqrt_root(400) - 20.0) < 1e-9\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sqrt' is not defined",
      "Test 2: FAIL - name 'sqrt' is not defined",
      "Test 3: FAIL - name 'sqrt' is not defined"
    ],
    "generated_code": "def volume_tetrahedron(side_length):\n    return (side_length ** 3) / 6 * sqrt(2)",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: get_lcm.<locals>.gcd() takes 2 positional arguments but 5 were given"
    ],
    "generated_code": "import math\n\ndef get_lcm(numbers):\n    def gcd(a, b):\n        while b:\n            t = b\n            b = a % b\n            a = t\n        return a\n    \n    product = 1\n    for num in numbers:\n        product *= num // gcd(product, num)\n    \n    return product * gcd(*numbers)\n\n# Test cases\nprint(get_lcm([2, 7, 3, 9, 4])) # Should return 252\nprint(get_lcm([1, 2, 8, 3])) # Should return 24\nprint(get_lcm([3, 8, 4, 10, 5])) # Should return 120",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if all sides of the triangle are different lengths\n    return len(set([a, b, c])) == 3",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'values'",
      "Test 2: FAIL - 'tuple' object has no attribute 'values'",
      "Test 3: FAIL - 'tuple' object has no attribute 'values'"
    ],
    "generated_code": "from collections import defaultdict\nfrom typing import List\n\ndef lbs(nums: List[int]) -> int:\n    n = len(nums)\n    up = down = [defaultdict(int) for _ in range(n)]\n    \n    # Calculate maximum length of upward sequence ending at each index\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                up[i][nums[i]] = max(up[i][nums[i]], up[j][nums[i]])\n                up[i][nums[i]] += up[j][nums[j]]\n                \n    # Calculate maximum length of downward sequence starting at each index\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if nums[j] > nums[i]:\n                down[i][nums[i]] = max(down[i][nums[i]], down[j][nums[i]])\n                down[i][nums[i]] += down[j][nums[j]]\n            \n    res = float('-inf')\n    for key in set(map(lambda x: tuple(sorted(x.items())), up)).union(set(map(lambda x: tuple(sorted(x.items())), down))):\n        value = sum(key.values())\n        res = max(res, value)\n        \n    return res",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_string(s):\n    def is_uppercase(char): return char.isupper()\n    def is_lowercase(char): return not char.islower()\n    def is_number(num): return num.isdigit()\n\n    result = [\n        \"String must have 1 upper case character.\" if len([c for c in s if is_uppercase(c)]) < 1 else \"\",\n        \"String must have 1 number.\" if len([c for c in s if is_number(c)]) < 1 else \"\",\n        f\"String length should be atleast {len(s)}.\"\n    ]\n\n    # Lambda functions to filter results based on requirements:\n    uppercase_filter = [r for r in result[0::2] if not isinstance(r, str)]\n    number_filter = [r for r in result[1::2] if not isinstance(r, str)]\n    \n    filtered_result = list(filter(None, map(lambda x: ''.join(x) if all(map(x.__eq__, result)) else None, \n                                         zip(uppercase_filter, number_filter))))\n    \n    return filtered_result",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_increasing_subsequence(arr, n):\n    # Initialize DP table with zeros\n    dp = [0] * n\n    max_sum = 0\n\n    for i in range(n):\n        current_max = 0\n        for j in range(i):\n            if arr[i] > arr[j]:\n                current_max = max(current_max, dp[j])\n        dp[i] = current_max + arr[i]\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n# Example usage:\nprint(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7))  # Output: 106\nprint(max_sum_increasing_subsequence([3, 4, 5, 10], 4))              # Output: 22\nprint(max_sum_increasing_subsequence([10, 5, 4, 3], 4))              # Output: 10",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'a2' is not defined. Did you mean: 'a1'?"
    ],
    "generated_code": "def is_parallel(line1, line2):\n    # Extract coefficients from the lines in form ax + by = c\n    a1, b1, _ = line1\n    _, b2, _ = line2\n    \n    # Check if the slopes of the lines are equal (parallel)\n    return a1 * b2 == a2 * b1\n\n# Example usage:\nprint(is_parallel([2,3,4], [2,3,8]))  # Expected output: True\nprint(is_parallel([2,3,4], [4,-3,8]))  # Expected output: False\nprint(is_parallel([3,3],[5,5]))  # Expected output: True",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def capitalize_first_last_letters(s):\n    # Split the string into words, capitalize the first letter of each word, then join them back together.\n    return ' '.join(word[0].upper() + word[1:-1] + word[-1].upper() for word in s.split())",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef get_pairs_count(arr: List[int], target_sum: int, total_elements: int) -> int:\n    count = 0\n    seen = {}\n    \n    for i in range(total_elements):\n        current_element = arr[i]\n        \n        complement = target_sum - current_element\n        \n        if complement in seen:\n            count += len(seen[complement])\n            \n        if current_element not in seen:\n            seen[current_element] = [i]\n        else:\n            seen[current_element].append(i)\n    \n    return count",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport itertools\n\ndef min_length(lists: List[List[int]]) -> tuple:\n    \"\"\"\n    Finds the list within the provided lists of lists that has the minimum length.\n    \n    :param lists: A list containing multiple lists of integers.\n    :return: A tuple where the first element is the minimum length and the second element is the list with the minimum length.\n    \"\"\"\n    lengths = [len(sublist) for sublist in lists]\n    return min(zip(lengths, lists), key=lambda x: x[0])\n\n# Example usage\nprint(min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: (1, [0])\nprint(min_length([[1], [5, 7], [10, 12, 14,15]]))              # Expected output: (1, [1])\nprint(min_length([[5], [15,20,25]]))                           # Expected output: (1, [5])",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        a, b = 2, 2\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b - a\n        return b\n\n# Test cases\nassert jacobsthal_lucas(5) == 31, \"Test case 1 failed\"\nassert jacobsthal_lucas(2) == 5, \"Test case 2 failed\"\nassert jacobsthal_lucas(4) == 17, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def negative_count(nums):\n    return sum(1 for num in nums if num < 0) / len(nums)",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_coins(coins, amount, n):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    \n    for i in range(1, amount + 1):\n        for coin in coins:\n            if i - coin >= 0 and dp[i - coin] != float('inf'):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1\n\n# Test cases\nprint(min_coins([9, 6, 5, 1], 4, 11)) # Output should be 2\nprint(min_coins([4, 5, 6, 7, 8, 9], 6, 9)) # Output should be 1\nprint(min_coins([1, 2, 3], 3, 4)) # Output should be 2",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_permutation(str1, str2):\n    # Check if the lengths of both strings are equal\n    if len(str1) != len(str2):\n        return False\n    \n    # Create frequency dictionaries for both strings\n    freq_dict1 = {}\n    freq_dict2 = {}\n    \n    # Count characters in first string and add to dictionary\n    for char in str1:\n        if char in freq_dict1:\n            freq_dict1[char] += 1\n        else:\n            freq_dict1[char] = 1\n            \n    # Subtract from dictionary\n    for char in str2:\n        if char in freq_dict2:\n            freq_dict2[char] -= 1\n        else:\n            freq_dict2[char] = -1\n            \n    # Return true if all counts are zero at the end\n    for count in freq_dict2.values():\n        if count != 0:\n            return False\n            \n    return True",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_datatype(data, datatype):\n    filtered_data = []\n    for item in data:\n        if not isinstance(item, datatype):\n            filtered_data.append(item)\n    return filtered_data\n\n# Test cases\nprint(remove_datatype((4, 5, 4, 7.7, 1.2), int))  # Output: [7.7, 1.2]\nprint(remove_datatype((7, 8, 9, \"SR\"), str))       # Output: [7, 8, 9]\nprint(remove_datatype((7, 1.1, 2, 2.2), float))    # Output: [7, 2]",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 're' is not defined"
    ],
    "generated_code": "def search_literal(pat, text):\n    # Find all locations of the pattern in the given text\n    locs = [m.start() for m in re.finditer(re.escape(pat), text)]\n    return locs\n\n# Test cases\nprint(search_literal('python', 'python programming language'))  # Expected output: (0, 6)\nprint(search_literal('programming', 'python programming language'))  # Expected output: (7, 18)\nprint(search_literal('language', 'python programming language'))  # Expected output: (19, 27)",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef topbottom_surfacearea(radius):\n    \"\"\"\n    Calculate the top or bottom surface area of a cylinder given its radius.\n    \n    Parameters:\n    - radius: The radius of the cylinder's base.\n    \n    Returns:\n    - The top or bottom surface area of the cylinder as a float.\n    \"\"\"\n    return 2 * math.pi * radius**2",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(lst, n):\n    return lst[n::n]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_word(s):\n    # Splitting the input string into words and storing them in a set for quick lookup\n    word_set = set()\n    \n    # Iterating through each word in the split string\n    for word in s.split():\n        if word in word_set:\n            return word\n        \n        # Adding the current word to the set of seen words\n        word_set.add(word)\n    \n    # If no repetition is found after checking all words, returning None\n    return None\n\n# Test cases\nprint(first_repeated_word(\"ab ca bc ab\"))  # Output: \"ab\"\nprint(first_repeated_word(\"ab ca bc\"))     # Output: \"None\"\nprint(first_repeated_word(\"ab ca bc ca ab bc\"))  # Output: \"ca\"",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\n    # Convert the string into individual characters and then to a tuple\n    result = tuple(string_list)\n    return result",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "def basesnum_correspondingnum(basesnum, indices):\n    return list(map(lambda x, y: pow(x, y), basesnum, indices))",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Diff(arr, n):\n    freq = {}\n    \n    # Count frequency of each element in the array\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n    \n    # Calculate difference between maximum and minimum frequencies\n    diff = max_freq - min_freq\n    \n    return diff",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_of_divisors(n):\n    divisors_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef check_abundant(number):\n    total_sum = sum_of_divisors(number)\n    if total_sum > number and total_sum < 2 * number:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_abundant(12))  # Expected output: True\nprint(check_abundant(15))  # Expected output: False\nprint(check_abundant(18))  # Expected output: True",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef fill_spaces(s):\n    # Use regex to replace spaces, commas, and dots with a colon\n    result = re.sub(r'[\\s,.]', ':', s)\n    return result\n\n# Test cases\nprint(fill_spaces('Boult Curve Wireless Neckband'))  # Expected output: \"Boult:Curve:Wireless:Neckband\"\nprint(fill_spaces('Stereo Sound Sweatproof'))      # Expected output: \"Stereo:Sound:Sweatproof\"\nprint(fill_spaces('Probass Curve Audio'))          # Expected output: \"Probass:Curve:Audio\"",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_digits(a, b):\n    \"\"\"\n    Function to add two numbers and return the number of digits in their sum.\n    \n    Parameters:\n    a (int): First integer number.\n    b (int): Second integer number.\n    \n    Returns:\n    int: Number of digits in the sum of a and b.\n    \"\"\"\n    total = a + b\n    num_of_digits = len(str(total))\n    return num_of_digits\n\n# Test Cases\nprint(count_digits(9875,10))   # Expected output: 4\nprint(count_digits(98759853034,100))   # Expected output: 11\nprint(count_digits(1234567,500))   # Expected output: 7",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_tuple(tup_list):\n    \"\"\"\n    This function takes a list of tuples and flattens it into a single string.\n    \n    Parameters:\n    tup_list (list): A list containing sublists of integers.\n    \n    Returns:\n    str: A string with all elements from the flattened tuples separated by spaces.\n    \"\"\"\n    # Flatten the tuple list to get a list of all elements\n    flat_list = [item for sublist in tup_list for item in sublist]\n    # Join the elements into a single string separated by spaces\n    result = \" \".join(map(str, flat_list))\n    return result\n\n# Test cases to verify the correctness of the function\nassert flatten_tuple([['1', '4', '6'], ['5', '8'], ['2', '9'], ['1', '10']]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([['2', '3', '4'], ['6', '9'], ['3', '2'], ['2', '11']]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([['14', '21', '9'], ['24', '19'], ['12', '29'], ['23', '17']]) == '14 21 9 24 19 12 29 23 17'\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_F_and_L_bits(n):\n    # Shift right by 1 bit from the left to get the last bit\n    l_bit = n >> 1\n    \n    # Shift left by 1 bit from the right to get the first bit\n    f_bit = n << 1\n    \n    # Toggle the first and last bits using XOR operation\n    result = (n ^ l_bit ^ f_bit)\n    \n    return result\n\n# Test cases\nprint(toggle_F_and_L_bits(10))  # Expected output: 3\nprint(toggle_F_and_L_bits(15))  # Expected output: 6\nprint(toggle_F_and_L_bits(20))  # Expected output: 5",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def last_occurence_char(s, c):\n    return s.rfind(c)",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Total_Hamming_Distance' is not defined",
      "Test 2: FAIL - name 'Total_Hamming_Distance' is not defined",
      "Test 3: FAIL - name 'Total_Hamming_Distance' is not defined"
    ],
    "generated_code": "def total_hamming_distance(n):\n    distance_sum = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            distance_sum += bin(j - i).count('1')\n    return distance_sum\n\n# Test Cases\nprint(total_hamming_distance(4))  # Output: 7\nprint(total_hamming_distance(2))  # Output: 3\nprint(total_hamming_distance(5))  # Output: 8",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef longest_increasing_subsequence(sequence: List[int]) -> int:\n    if not sequence:\n        return 0\n    \n    # Initialize variables to store the current and maximum lengths\n    current_length = 1\n    max_length = 1\n    \n    for i in range(1, len(sequence)):\n        if sequence[i] > sequence[i-1]:\n            current_length += 1\n        else:\n            current_length = 1\n        \n        if current_length > max_length:\n            max_length = current_length\n            \n    return max_length",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(1, 2*n, 2): # Generates the first n odd natural numbers starting from 1\n        total += i**5\n    return total",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '>' not supported between instances of 'int' and 'NoneType'"
    ],
    "generated_code": "def find_Max(arr, start, end):\n    if start > end:\n        return None\n    mid = start + (end - start) // 2\n    if mid > start and arr[mid] < arr[mid-1]:\n        return arr[mid]\n    elif mid < end and arr[mid+1] < arr[mid]:\n        return arr[mid]\n    elif mid == start and arr[start] >= arr[end]:\n        return max(arr[start:end+1])\n    else:\n        return max(find_Max(arr, start, mid-1), find_Max(arr, mid+1, end))\n\n# Test cases\nprint(find_Max([2,3,5,6,9], 0, 4)) # Expected output: 9\nprint(find_Max([3,4,5,2,1], 0, 4)) # Expected output: 5\nprint(find_Max([1,2,3], 0, 2)) # Expected output: 3",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_column(data_list, index):\n    return [row[index] for row in data_list]\n\n# Test cases to verify the correctness of the function\nassert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0) == [1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2) == [3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0) == [1, 5, 1, 13, 5, 9]\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Seq_Linear(seq):\n    # Check if the length of the sequence is greater than 2 and all differences between consecutive elements are equal\n    if len(seq) > 2 and all(x == seq[1] - seq[0] for x in zip(seq[1:], seq)):\n        return \"Linear Sequence\"\n    else:\n        return \"Non Linear Sequence\"\n\n# Test cases\nprint(Seq_Linear([0,2,4,6,8,10]))  # Expected output: \"Linear Sequence\"\nprint(Seq_Linear([1,2,3]))         # Expected output: \"Linear Sequence\"\nprint(Seq_Linear([1,5,2]))         # Expected output: \"Non Linear Sequence\"",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def tuple_to_float(tup):\n    # Convert each element in the tuple to float and then sum them up.\n    return sum(float(num) for num in tup)\n\n# Test cases to verify the correctness of the function\nassert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(nums):\n    # Using filter with lambda function to get all odd numbers\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n# Test cases\nprint(split([1,2,3,4,5,6]))  # Expected output: [1,3,5]\nprint(split([10,11,12,13]))  # Expected output: [11,13]\nprint(split([7,8,9,1]))      # Expected output: [7,9,1]",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def difference(n):\n    # Calculate the sum of cubes using the formula n*(n+1)*(2*n+1)/6\n    sum_of_cubes = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Calculate the sum of first n natural numbers using the formula n*(n+1)/2\n    sum_of_natural_numbers = n * (n + 1) // 2\n    \n    # Return the difference between sum of cubes and sum of natural numbers\n    return sum_of_cubes - sum_of_natural_numbers",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef find_Odd_Pair(nums: List[int], target: int) -> int:\n    \"\"\"\n    Finds and counts the pairs of numbers in nums whose XOR is an odd number.\n    \n    Parameters:\n    nums (List[int]): The list of integers to check.\n    target (int): The target value for the XOR operation.\n    \n    Returns:\n    int: The count of pairs with XOR equal to 'target'.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if ((nums[i] ^ nums[j]) == target):\n                count += 1\n    return count",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(s):\n    return s.swapcase()",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: bad operand type for abs(): 'generator'"
    ],
    "generated_code": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings and sum the absolute difference of their digits\n    return abs(sum(int(digit_1) - int(digit_2)) for digit_1, digit_2 in zip(str(num1), str(num2)))\n\n# Test cases\nprint(digit_distance_nums(1, 2))  # Output: 1\nprint(digit_distance_nums(23, 56))  # Output: 6\nprint(digit_distance_nums(123, 256))  # Output: 7",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sub_array_sum(arr, size):\n    if not arr:\n        raise ValueError(\"Array cannot be empty\")\n    \n    max_so_far = arr[0]\n    current_max = arr[0]\n    \n    for i in range(1, size):\n        current_max = max(arr[i], current_max + arr[i])\n        max_so_far = max(max_so_far, current_max)\n        \n    return max_so_far\n\n# Test cases\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8))  # Expected output: 7\nprint(max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8))  # Expected output: 8\nprint(max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8))  # Expected output: 10",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def union_elements(tup1, tup2):\n    # Convert tuples to sets and perform union operation\n    result = set(tup1).union(set(tup2))\n    # Convert the result back to tuple\n    return tuple(result)\n\n# Test cases\nprint(union_elements((3, 4, 5, 6), (5, 7, 4, 10)))  # Expected output: (3, 4, 5, 6, 7, 10)\nprint(union_elements((1, 2, 3, 4), (3, 4, 5, 6)))   # Expected output: (1, 2, 3, 4, 5, 6)\nprint(union_elements((11, 12, 13, 14), (13, 15, 16, 17)))  # Expected output: (11, 12, 13, 14, 15, 16, 17)",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_elements(tuples_list):\n    result = {}\n    for t in tuples_list:\n        if len(t) > 0 and t[0] in result:\n            result[t[0]].append(t[1])\n        else:\n            result[t[0]] = [t[1]]\n    return result",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Max_Length(Lists):\n    # Initialize max_length as 0\n    max_length = 0\n    \n    # Iterate through each list in the provided lists\n    for L in Lists:\n        # Update max_length if current list's length is greater than max_length\n        if len(L) > max_length:\n            max_length = len(L)\n    \n    return max_length",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_values(str_list):\n    result = []\n    current_value = \"\"\n    \n    for char in str_list:\n        if char == '\"':\n            if current_value != \"\":\n                result.append(current_value)\n                current_value = \"\"\n        else:\n            current_value += char\n            \n    return result",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    pair_count = 0\n    \n    # Iterate through all possible pairs in the array\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                pair_count += 1\n                \n    return pair_count",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(string_input):\n    # Splitting the input string and returning the result as a list of characters\n    return list(string_input)",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(arr):\n    # Check if the array is sorted in non-decreasing order\n    return all(x <= y for x, y in zip(arr, arr[1:]))\n\n# Test cases\nprint(issort_list([1,2,4,6,8,10,12,14,16,17]))  # Expected output: True\nprint(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]))  # Expected output: False\nprint(issort_list([1, 2, 4, 6, 8, 10,15,14,20]))  # Expected output: False",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def empty_list(n):\n    return [{}] * n",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_sublists(lst):\n    return [[x for x in sublist] for sublist in lst]\n\n# Test cases\nprint(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])); # [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nprint(sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])); # [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nprint(sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])); # [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']])",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_words(word_list, unwanted_chars):\n    \"\"\"\n    This function removes elements in word_list that contain characters specified in unwanted_chars.\n    \n    :param word_list: List[str] - A list of strings.\n    :param unwanted_chars: List[str] - A list of characters to be removed from the word_list.\n    :return: List[str] - The modified list after removing unwanted characters from each element.\n    \"\"\"\n    return [w for w in word_list if all(c not in w for c in unwanted_chars)]\n\n# Test cases\nprint(remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"], ['#', 'color', '@']))\nprint(remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['&', '+', '@']))\nprint(remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['@']))",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - local variable 'ans' referenced before assignment",
      "Test 2: FAIL - local variable 'ans' referenced before assignment",
      "Test 3: FAIL - local variable 'ans' referenced before assignment"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_pair_diff_lessthan_K(arr: List[int], n: int, k: int) -> int:\n    arr.sort()\n    l, r = 0, len(arr) - 1\n    \n    # Iterate until the required difference is found or we exhaust one side\n    while l < r:\n        if arr[r] - arr[l] > k:\n            r -= 1\n        else:\n            ans += arr[r] + arr[l]\n            l += 1\n            r -= 1\n            \n    return ans",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def two_unique_nums(lists):\n    # Sort each list and then remove duplicates by converting it back into a set and then back to a list\n    unique_lists = [list(set(lst)) for lst in lists]\n    return unique_lists\n\n# Test cases\nprint(two_unique_nums([[1, 2, 3, 2, 3, 4, 5], [1, 2, 3, 2, 4, 5]]))",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def unique_product(nums):\n    # Remove duplicates and multiply them together.\n    result = 1\n    for num in set(nums):\n        result *= num\n    return result",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\ndef surfacearea_cylinder(radius, height):\n    \"\"\"\n    Calculates the total surface area of a cylinder.\n    \n    Parameters:\n        radius (float): The radius of the base of the cylinder.\n        height (float): The height of the cylinder.\n        \n    Returns:\n        float: The total surface area of the cylinder.\n    \"\"\"\n    top_and_bottom_area = 2 * math.pi * radius ** 2\n    side_area = 2 * math.pi * radius * height\n    return top_and_bottom_area + side_area",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - count_no() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def count_no(n, divisor, limit):\n    current = n * divisor\n    count = 0\n    \n    while current < limit:\n        if current % divisor != 0:\n            count += 1\n        current += n * divisor\n    \n    return count",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Sub_Array' is not defined",
      "Test 2: FAIL - name 'is_Sub_Array' is not defined",
      "Test 3: FAIL - name 'is_Sub_Array' is not defined"
    ],
    "generated_code": "def is_sub_array(A, B, lenA, lenB):\n    for i in range(lenA - lenB + 1): \n        if A[i:i+lenB] == B:\n            return True\n    return False",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit_Factorial(n):\n    \"\"\"\n    Calculate the last digit of n!\n    \n    Parameters:\n    n (int): The input number\n    \n    Returns:\n    int: The last digit of n! if n is non-negative and greater than zero.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Initialize result as 1 because 0! = 1 and we're interested only in digits\n    result = 1\n    \n    for i in range(1, n + 1):\n        # Update result with last digit of current factorial value\n        result = (result * (i % 10)) % 10\n        \n    return result",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'zip_longest' is not defined"
    ],
    "generated_code": "from itertools import chain\n\ndef interleave_lists(*lists):\n    # Use zip_longest from itertools with fillvalue=None and unpack the result into interleaved list\n    return [x for sublist in map(list, zip_longest(*lists)) for x in sublist]\n\n# Test cases\nprint(interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]))  # Expected output: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nprint(interleave_lists([10,20],[15,2],[5,10]))  # Expected output: [10,15,5,20,2,10]\nprint(interleave_lists([11,44], [10,15], [20,5]))  # Expected output: [11,10,20,44,15,5]",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_dissimilar(tup1, tup2):\n    # Use set difference to find elements unique to each tuple\n    result = set(tup1) ^ set(tup2)\n    # Convert the resulting set back to a tuple and return it\n    return tuple(result)\n\n# Test cases\nprint(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))  # Expected output: (3, 6, 7, 10)\nprint(find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)))  # Expected output: (1, 4, 7, 9)\nprint(find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)))  # Expected output: (34, 36, 11, 25)",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_even(tup):\n    result = ()\n    for element in tup:\n        if isinstance(element, int) and element % 2 == 0:\n            result += (element,)\n    return result",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'surface_Area' is not defined",
      "Test 2: FAIL - name 'surface_Area' is not defined",
      "Test 3: FAIL - name 'surface_Area' is not defined"
    ],
    "generated_code": "def surface_area_pyramid(base_side_length, slant_height):\n    \"\"\"\n    Calculate the total surface area of a square pyramid.\n    \n    Args:\n        base_side_length (float): The length of one side of the base square.\n        slant_height (float): The height from the center of the base to the apex along the lateral edge.\n        \n    Returns:\n        float: The total surface area of the square pyramid.\n    \"\"\"\n    # Calculate the area of the base\n    base_area = base_side_length ** 2\n    \n    # Calculate the area of one triangular face\n    triangle_area = 0.5 * base_side_length * slant_height\n    \n    # There are four triangular faces on a square pyramid\n    total_triangle_area = 4 * triangle_area\n    \n    # Add the base area and the total triangle area to get the surface area\n    surface_area = base_area + total_triangle_area\n    \n    return surface_area\n\n# Test cases\nassert abs(surface_area_pyramid(3, 4) - 33) < 0.001\nassert abs(surface_area_pyramid(4, 5) - 56) < 0.001\nassert abs(surface_area_pyramid(1, 2) - 5) < 0.001",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def my_dict(d):\n    return len(d) == 0",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        ans = 0\n        for i in range(n):\n            ans += catalan_number(i) * catalan_number(n - i - 1)\n        return ans\n\nprint(catalan_number(10))",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_adverbs(sentence):\n    pattern = r'\\b[^\\w\\s]*\\bbetter\\b|\\bbeastly\\b|\\bfreshly\\b|\\bgreatly\\b|\\bslowly\\b|\\brapidly\\b|\\bstupidly\\b|\\btardfully\\b|\\.?\\d+? times\\b'\n    matches = re.finditer(pattern, sentence)\n    results = [match.group() for match in matches]\n    return results\n\n# Test cases\nprint(find_adverbs(\"Clearly, he has no excuse for such behavior.\")) # ['Clearly']\nprint(find_adverbs(\"Please handle the situation carefuly\")) # ['carefuly']\nprint(find_adverbs(\"Complete the task quickly\")) # ['quickly']",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from heapq import nlargest\n\ndef expensive_items(dataset, k):\n    # Sort the dataset based on prices in descending order\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    \n    # Get the k most expensive items using the nlargest function from heapq module\n    return [item for item in nlargest(k, sorted_dataset, key=lambda x: x['price'])]",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'split_Arr' is not defined",
      "Test 2: FAIL - name 'split_Arr' is not defined",
      "Test 3: FAIL - name 'split_Arr' is not defined"
    ],
    "generated_code": "def split_arr(arr, length, chunk_size):\n    return arr[:length-1] + arr[length-chunk_size:length]\n\n# Test cases\nprint(split_arr([12,10,5,6,52,36],6,2)) # Output: [5,6,52,36,12,10]\nprint(split_arr([1,2,3,4],4,1))         # Output: [2,3,4,1]\nprint(split_arr([0,1,2,3,4,5,6,7],8,3))  # Output: [3,4,5,6,7,0,1,2]",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(arr):\n    # Sort the array\n    arr.sort()\n    \n    # Return the difference between the last element (largest) and the first element (smallest)\n    return arr[-1] - arr[0]\n\n# Example usage:\nprint(big_diff([1,2,3,4]))  # Output: 3\nprint(big_diff([4,5,12]))   # Output: 8\nprint(big_diff([9,2,3]))    # Output: 7",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perfect_squares(low, high):\n    return [i**2 for i in range(int((high ** 0.5) + 1), int((low - 1) ** 0.5) + 1, -1)]",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    rho (float): The magnitude of the polar coordinate.\n    theta (float): The angle in radians corresponding to the polar coordinate.\n    \n    Returns:\n    tuple: A tuple containing two elements - the x and y components of the \n           rectangular coordinates respectively.\n    \"\"\"\n    # Create a complex number from polar coordinates\n    point = cmath.rect(rho, theta)\n    return (point.real, point.imag)\n\n# Test cases\nprint(polar_rect(3, 4))   # Expected output: (5.0, 0.9272952180016122) with small imaginary part due to floating-point arithmetic\nprint(polar_rect(4, 7))   # Expected output: (8.06225774829855, 1.0516502125483738) with small imaginary part due to floating-point arithmetic\nprint(polar_rect(15, 17)) # Expected output: (22.67156809750927, 0.8478169733934057) with small imaginary part due to floating-point arithmetic",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    # Interchange the first and last elements of the list\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def sum_Of_product(n):\n    # Initialize variables\n    total = 0\n    for i in range(n + 1):\n        total += math.comb(n, i) * math.comb(i, n - i)\n    return total",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def removezero_ip(ip):\n    return ip.lstrip(\"0\")\n\ndef check_solution():\n    assert removezero_ip(\"216.08.094.196\") == \"216.8.94.196\"\n    assert removezero_ip(\"12.01.024\") == \"12.1.24\"\n    assert removezero_ip(\"216.08.094.0196\") == \"216.8.94.196\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_even_odd(nums):\n    # Initialize sums for even and odd numbers\n    even_sum = 0\n    odd_sum = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n            \n    return abs(even_sum - odd_sum)\n\n# Test cases\nprint(diff_even_odd([1,3,5,7,4,1,6,8]))  # Expected output: 3\nprint(diff_even_odd([1,2,3,4,5,6,7,8,9,10]))  # Expected output: 1\nprint(diff_even_odd([1,5,7,9,10]))  # Expected output: 9",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_Swaps(bin_str1, bin_str2):\n    if bin_str1 == bin_str2:\n        return 0\n    \n    diff_count = sum(1 for i in range(len(bin_str1)) if bin_str1[i] != bin_str2[i])\n    \n    # If the total difference is even and not all characters are different from both strings,\n    # it's possible to swap some bits to make them match.\n    if diff_count % 2 == 0 and len(set(bin_str1) & set(bin_str2)) < len(bin_str1) - diff_count // 2 + diff_count % 2:\n        return diff_count // 2\n    else:\n        return 'Not Possible'",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import sys\n\ndef tuple_size(tup):\n    # Calculate and return the size in bytes of the input tuple using sys.getsizeof\n    return sys.getsizeof(tup)",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded while calling a Python object"
    ],
    "generated_code": "def find_kth(arr1, arr2, x, y, k):\n    # Base case when both arrays have been exhausted\n    if not arr1 and not arr2:\n        return None\n    # When we need to pick an element from the first array\n    elif not arr1 and arr2[k-x-y-1] < arr2[-1]:\n        return arr2[k-x-y-1]\n    # When we need to pick an element from the second array\n    else:\n        return find_kth(arr1, arr2[k:y+1], 0, len(arr2)-y-1, k)\n\n# Test cases\nprint(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5))  # Output: 6\nprint(find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7))  # Output: 256\nprint(find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6))  # Output: 8",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def armstrong_number(number):\n    # Convert the number to string and get its length\n    num_str = str(number)\n    length = len(num_str)\n\n    # Calculate the sum of each digit raised to the power of the length\n    total_sum = sum(int(digit) ** length for digit in num_str)\n\n    # Compare the calculated sum with the original number\n    return total_sum == number",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    return (total_sum, total_sum / n)\n\n# Test cases\nprint(sum_average(10))  # Expected output: (55, 5.5)\nprint(sum_average(15))  # Expected output: (120, 8.0)\nprint(sum_average(20))  # Expected output: (210, 10.5)",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Even(n):\n    # Use bitwise AND operator with 1 to check if the least significant bit is set.\n    # If it's set, the number is odd; otherwise, it's even.\n    return (n & 1) == 0",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]