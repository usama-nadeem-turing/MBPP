[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def remove_Occ(str, char):\n    str_list = list(str)\n    for i in range(len(str_list)):\n        if str_list[i] == char:\n            # Remove first occurrence of 'char'\n            if i != 0:\n                del str_list[i]\n            else:\n                continue\n            # Remove last occurrence of 'char' from remaining part\n            while True:\n                try:\n                    index_of_last_char = str_list.index(char, i + 1)\n                    del str_list[index_of_last_char]\n                except ValueError:\n                    break\n    return ''.join(str_list)\n\n# Test cases\nprint(remove_Occ(\"hello\", \"l\"))  # Expected output: \"heo\"\nprint(remove_Occ(\"abcda\", \"a\"))  # Expected output: \"bcd\"\nprint(remove_Occ(\"PHP\", \"P\"))    # Expected output: \"H\"",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef count_common(words_list):\n    \"\"\"\n    This function takes a list of strings and returns a list of tuples representing each word's occurrence.\n    \n    Example:\n    >>> count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red'])\n    [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    \"\"\"\n    # Count occurrences of each word\n    word_counts = Counter(words_list)\n    # Get the top n items with highest counts as per their frequency\n    top_common_words = word_counts.most_common()\n    # Format output into the required format\n    formatted_output = []\n    for word, freq in top_common_words:\n        formatted_output.append((word, freq))\n    return formatted_output\n\n# Test cases to verify the correctness of the solution\nprint(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']))\nprint(count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']))\nprint(count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']))",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Volume(base, height, length):\n    \"\"\"\n    This function calculates and returns the volume of a triangular prism.\n    \n    Parameters:\n    base (float): The base length of the triangular face.\n    height (float): The height of the triangle from its base to its apex.\n    length (float): The length of the prism along which the triangular faces are attached.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    area_of_triangle = (base * height) / 2\n    total_volume = area_of_triangle * length\n    return total_volume\n\n# Check function with provided data points to verify correctness\nprint(find_Volume(10, 8, 6)) # Expected output: 240\nprint(find_Volume(3, 2, 2))  # Expected output: 6\nprint(find_Volume(1, 2, 1))  # Expected output: 1",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef split_lowerstring(s):\n    # Use regular expression to find all words containing lowercase letters and join them into a list\n    return [w for w in re.findall(r'\\b[a-z]\\w*', s)]",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_lowercase_underscore(text):\n    import re\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_lowercase_underscore(\"aab_cbbbc\"))  # Expected output: Found a match!\nprint(text_lowercase_underscore(\"aab_Abbbc\"))  # Expected output: Not matched!\nprint(text_lowercase_underscore(\"Aaab_abbbc\"))  # Expected output: Not matched!",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side_length):\n    return 4 * side_length",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_dirty_chars(main_str, dirty_str):\n    result = \"\"\n    for char in main_str:\n        if char not in dirty_str:\n            result += char\n    return result\n\n# Test cases\nprint(remove_dirty_chars(\"probasscurve\", \"pros\"))  # Expected output: bacuve\nprint(remove_dirty_chars(\"digitalindia\", \"talent\"))  # Expected output: digiidi\nprint(remove_dirty_chars(\"exoticmiles\", \"toxic\"))  # Expected output: emles",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_duplicate(arr):\n    \"\"\"\n    Check if there is at least one duplicate number in an integer array.\n    \n    Args:\n    arr (list): A list of integers\n    \n    Returns:\n    bool: True if there is at least one duplicate, False otherwise\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_woodall(number):\n    # Check if the square of the sum of digits equals the number itself\n    sum_of_digits = sum(int(digit) for digit in str(number))\n    squared_sum = sum_of_digits ** 2\n    return squared_sum == number",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiples_of_num(m, n):\n    return [i * n for i in range(1, m+1)]",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_duplicate(arr):\n    # Create an empty dictionary to store seen elements\n    seen = {}\n    \n    # Iterate through each element in the array\n    for num in arr:\n        # If the number is already in the dictionary, it's a duplicate\n        if num in seen:\n            return num\n        else:\n            # Otherwise, add the number to the dictionary\n            seen[num] = 1\n    \n    # If no duplicates are found, return -1\n    return -1",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_Sum(lst):\n    # Calculate the maximum sum of all sublists\n    max_sum = max(sum(sublist) for sublist in lst)\n    return max_sum\n\n# Test cases\nprint(maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]])) # Expected output: 33\nprint(maximum_Sum([[0,1,1],[1,1,2],[3,2,1]])) # Expected output: 6\nprint(maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]])) # Expected output: 19",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def binary_to_decimal(binary_num):\n    # Convert binary string to integer\n    decimal_number = int(binary_num, 2)\n    return decimal_number\n\n# Test cases to verify the correctness of the function\nassert binary_to_decimal('100') == 4\nassert binary_to_decimal('1011') == 11\nassert binary_to_decimal('1101101') == 109\nprint(\"All test cases passed successfully.\")",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 6",
      "Test 2: FAIL - 6",
      "Test 3: FAIL - 120"
    ],
    "generated_code": "from typing import List\n\ndef find_Product(arr: List[int], target: int) -> int:\n    # Initialize variables to store factors and their counts\n    factor = 1\n    count_dict = {}\n    \n    for num in arr:\n        if num == factor:\n            continue\n        \n        # Calculate remaining products when 'factor' is added\n        remaining_product = (target // factor - 1) * target // (factor + 1)\n        \n        # Update count dictionary with the current number\n        if num in count_dict:\n            count_dict[num] += remaining_product\n        else:\n            count_dict[num] = remaining_product\n            \n        factor *= num\n    \n    # Return the final product\n    return count_dict[factor]",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_k_elements(tuple_list, k):\n    # Check each tuple in the list\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n    return True",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove(lst):\n    # Convert each string in the list to a set excluding digits and then back to a list\n    result = [str(i) for i in lst if not any(c.isdigit() for c in str(i))]\n    return result\n\n# Test cases\nprint(remove(['4words', '3letters', '4digits']))  # Should print: ['words', 'letters', 'digits']\nprint(remove(['28Jan', '12Jan', '11Jan']))         # Should print: ['Jan', 'Jan', 'Jan']\nprint(remove(['wonder1', 'wonder2', 'wonder3']))   # Should print: ['wonder', 'wonder', 'wonder']",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binomial_Coeff(n, k):\n    # Initialize result as 1 (base case)\n    result = 1\n    \n    # Since C(n,k) == C(n,n-k), we can optimize calculation for better performance.\n    if k > n - k:\n        k = n - k\n        \n    # Calculate value in O(k) time.\n    for i in range(1, k + 1):\n        result *= n - (k - i)\n        result //= i\n    \n    return result\n\n# Test cases to verify correctness of the solution\nassert binomial_Coeff(5, 2) == 10\nassert binomial_Coeff(4, 3) == 4\nassert binomial_Coeff(3, 2) == 3",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Odd_Occurrence(arr, n):\n    count = {}\n    \n    # Count occurrences of each element in the array\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    \n    # Find the element with an odd occurrence\n    for key, value in count.items():\n        if value % 2 != 0:\n            return int(key)\n    \n    return None",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(s):\n    if not s:\n        return 0\n    \n    length = len(s)\n    result = 0\n    \n    for i in range(length):\n        # Count occurrences of each character in the substring from start to current index\n        char_count = {char: s[i:].count(char) for char in set(s[:i])}\n        \n        # Check if there is at least one occurrence of both starts and ends of the substring equal to current character\n        has_equal_ends = all(count >= 1 for _, count in char_count.items())\n        \n        if has_equal_ends:\n            result += 1\n            \n    return result",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import heapq\n\ndef func(lst, k):\n    # Combine all lists into one list of numbers\n    combined_list = []\n    for sublist in lst:\n        combined_list.extend(sublist)\n    \n    # Use heap to get the k largest elements efficiently\n    return heapq.nlargest(k, combined_list)\n\n# Test cases to verify the correctness of the function\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3) == [5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1) == [1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5) == [6, 5, 7, 8, 1]",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'max_Prime_Factors' is not defined",
      "Test 2: FAIL - name 'max_Prime_Factors' is not defined",
      "Test 3: FAIL - name 'max_Prime_Factors' is not defined"
    ],
    "generated_code": "def max_prime_factors(number):\n    # Initialize the smallest prime factor\n    factor = 2\n    # Divide the number by its smallest prime factor until it becomes odd\n    while number % factor == 0:\n        number //= factor\n    # Start checking from the next possible prime factor which is greater than sqrt(number)\n    for factor in range(int(number**0.5) + 1, 1, -1):\n        while number % factor == 0:\n            break\n    else:\n        # If no factors were found during the loop, the number itself is prime\n        if number > 1:\n            return number\n    return factor\n\n# Test cases\nprint(max_prime_factors(15))  # Expected output: 5\nprint(max_prime_factors(6))   # Expected output: 3\nprint(max_prime_factors(2))   # Expected output: 2",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_To_Binary(decimal_number):\n    # Convert decimal number to binary and return the result as a string.\n    return bin(decimal_number)[2:]",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_missing(arr, n):\n    for i in range(n+1):\n        if i not in arr:\n            return i\n    return None\n\n# Test cases\nprint(find_missing([1,2,3,5],4))  # Output: 4\nprint(find_missing([1,3,4,5],4))  # Output: 2\nprint(find_missing([1,2,3,5,6,7],5))  # Output: 4",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def find_rect_num(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the nth rectangular number.\n    A rectangular number is defined as the sum of consecutive integers from 1 to n^2.\n    \n    :param n: Integer - The position in the sequence of rectangular numbers.\n    :return: Integer - The nth rectangular number.\n    \"\"\"\n    # Calculate the nth rectangular number using the formula: n * (n + 1) * (2*n + 1) / 6\n    rect_number = n * (n + 1) * (2*n + 1) // 6\n    return rect_number\n\n# Test cases to verify the correctness of the solution\nassert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Nth_Digit(num1, num2, n):\n    # Convert num1 and num2 to their fractional representation as strings with at least one decimal place\n    frac1 = f\"{num1:.1f}\"\n    frac2 = f\"{num2:.1f}\"\n    \n    # Find the position where the nth digit will be found\n    pos = int(n - 1)\n    \n    # If there is no fractional part for either number, add \"0\" before it\n    if \".\" not in frac1:\n        frac1 += \".0\"\n    if \".\" not in frac2:\n        frac2 += \".0\"\n    \n    # Split the string into integer and fractional parts\n    whole_part1, frac_part1 = frac1.split(\".\")\n    whole_part2, frac_part2 = frac2.split(\".\")\n    \n    # Determine which fractional part contains the nth digit\n    if len(frac_part1) <= pos < len(frac_part1) + len(whole_part1):\n        result_str = whole_part1[pos] + frac_part1[:pos+1]\n    elif len(frac_part2) <= pos < len(frac_part2) + len(whole_part2):\n        result_str = whole_part2[pos] + frac_part2[:pos+1]\n    else:\n        return None\n    \n    # Return the last character of the resulting string, representing the nth digit\n    return str(result_str)[-1]\n\n# Example test cases\nprint(find_Nth_Digit(1,2,1))  # Output: 5\nprint(find_Nth_Digit(3,5,1))  # Output: 6\nprint(find_Nth_Digit(5,6,5))  # Output: 3",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'red'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'red'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'red'"
    ],
    "generated_code": "def sort_mixed_list(lst):\n    # Sort the list while separating numeric and string elements.\n    return sorted([x for x in lst if isinstance(x, int) or str(x)], key=lambda y: int(y) if isinstance(y, str) else y)",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef div_even_odd(arr: List[int]) -> int:\n    return arr[0] // arr[-1]",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef rearange_string(s):\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    result = ''\n    while char_count:\n        max_freq_char = max(char_count, key=char_count.get)\n        \n        # If all characters have at least one occurrence, add them alternatively\n        for _ in range(len(result) + 1):\n            if len(result) < len(s):\n                result += max_freq_char\n                if char_count[max_freq_char] > 0:\n                    char_count[max_freq_char] -= 1\n            else:\n                break\n                \n        # Remove occurrences of 'max_freq_char' from the counter and update result accordingly\n        if not char_count:\n            return ''.join(result)\n        elif list(char_count.keys())[0] == max_freq_char:\n            del char_count[list(char_count.keys())[0]]\n            \n    return result\n\n# Test cases\nprint(rearange_string(\"aab\"))  # Expected output: \"aba\"\nprint(rearange_string(\"aabb\"))  # Expected output: \"abab\"\nprint(rearange_string(\"abccdd\"))  # Expected output: \"cdabcd\"",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef freq_element(lst):\n    return Counter([item for sublist in lst for item in sublist])",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n# Test Cases\nprint(filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # [2, 4, 6, 8, 10]\nprint(filter_evennumbers([10,20,45,67,84,93])) # [10, 20, 84]\nprint(filter_evennumbers([5,7,9,8,6,4,3])) # [8, 6, 4]",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef find_Sum(arr, k):\n    # Count the frequency of each element in the array\n    count = Counter(arr)\n    total_sum = 0\n    \n    for num in arr:\n        if count[num] == k and num != k:\n            # If an element appears exactly 'k' times but is not equal to 'k', add it twice\n            total_sum += 2 * num\n        elif count[num] >= k:\n            # If an element appears more than or equal to 'k' times, calculate its contribution\n            total_sum += k * num - sum(num * i for i in range(1, count[num]))\n    \n    return total_sum",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Regular expression pattern to find lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with provided data points\nprint(text_match(\"aab_cbbbc\"))  # Expected output: Found a match!\nprint(text_match(\"aab_Abbbc\"))  # Expected output: Not matched!\nprint(text_match(\"Aaab_abbbc\")) # Expected output: Not matched!",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_string(text):\n    # Check if the first character of the text is 'p'\n    return ('Not matched!' if text and text[0] != 'p' else 'Found a match!')\n\n# Test cases to verify the correctness of the function\nassert text_match_string(\" python\") == 'Not matched!'\nassert text_match_string(\"python\") == 'Found a match!'\nassert text_match_string(\"  lang\") == 'Not matched!'",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef get_gcd(arr: List[int]) -> int:\n    \"\"\"\n    Finds the greatest common divisor (GCD) of all elements in the given list.\n    \n    Args:\n    arr: A list of integers\n    \n    Returns:\n    The GCD of all elements in the list\n    \"\"\"\n    def recursive_gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n    \n    result = arr[0]\n    for num in arr[1:]:\n        result = recursive_gcd(result, num)\n    return result",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_distinct(nums):\n    \"\"\"\n    Check if all numbers in the list are distinct.\n    \n    Args:\n    nums (list): A list of integers\n    \n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    # Use set to remove duplicates and compare its length with original list length\n    return len(set(nums)) == len(nums)",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def compute_Last_Digit(a, b):\n    # Compute the factorial of both a and b\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n\n    # Compute the greatest common divisor (GCD) of the two factorials\n    gcd_value = compute_GCD(fact_a, fact_b)\n\n    # The last digit of the GCD is the same as the last digit of the GCD's value itself\n    return str(gcd_value)[-1]\n\n# Helper function to calculate factorial using recursion\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Function to compute GCD using Euclidean algorithm\ndef compute_GCD(x, y):\n    while(y):\n        x, y = y, x % y\n    return x",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(number):\n    # XORing the number with its bitwise complement gives us numbers where all even bits are turned off.\n    return number ^ ((number - 1) << 1)",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    return [matrix[row][index] for row in range(len(matrix))]\n\n# Test cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) # Should print [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) # Should print [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)) # Should print [2, 5, 1]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length_list(lst):\n    return min(range(len(lst)), key=lambda x: len(lst[x]))\n\n# Test cases\nprint(min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Output should be (1, [0])\nprint(min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])) # Output should be (1, [1])\nprint(min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])) # Output should be (2, [1, 2])",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a, b, c):\n    # Check if all sides of the triangle are equal\n    return a == b and b == c",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'check_Eequality' is not defined. Did you mean: 'check_Equality'?"
    ],
    "generated_code": "def check_Equality(str_input):\n    \"\"\"\n    Checks if the first and last character of a given string 'str_input' are equal.\n    \n    Parameters:\n    str_input (str): The input string whose first and last characters need to be checked for equality.\n    \n    Returns:\n    str: A message indicating whether the first and last characters are equal or not.\n    \"\"\"\n    # Check if the length of the string is greater than 0 because strings have at least one character\n    if len(str_input) > 0:\n        # Compare the first and last characters of the string\n        if str_input[0] == str_input[-1]:\n            result = \"Equal\"\n        else:\n            result = \"Not Equal\"\n    else:\n        result = \"String cannot be empty.\"\n    \n    return result\n\nprint(check_Equality(\"abcda\"))   # Output: \"Equal\"\nprint(check_Equality(\"ab\"))      # Output: \"Not Equal\"\nprint(check_Eequality(\"mad\"))    # Output: \"Not Equal\"",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array of non-negative integers in ascending order.\n    \n    Parameters:\n    arr (list): A list of non-negative integers to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    count_arr = [0] * (max_val + 1)\n    \n    for num in arr:\n        count_arr[num] += 1\n    \n    sorted_arr = []\n    for i in range(len(count_arr)):\n        while count_arr[i] > 0:\n            sorted_arr.append(i)\n            count_arr[i] -= 1\n            \n    return sorted_arr\n\n# Test cases\nprint(counting_sort([1,23,4,5,6,7,8]))  # Expected output: [1, 4, 5, 6, 7, 8, 23]\nprint(counting_sort([12, 9, 28, 33, 69, 45]))  # Expected output: [9, 12, 28, 33, 45, 69]\nprint(counting_sort([8, 4, 14, 3, 2, 1]))  # Expected output: [1, 2, 3, 4, 8, 14]",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_gp(t,n,a=1):\n    return a * (t ** (n - 1))\n\n# Test cases\nprint(tn_gp(1,5)) # Expected output: 1\nprint(tn_gp(1,5,2)) # Expected output: 16\nprint(tn_gp(2,6)) # Expected output: 486\nprint(tn_gp(2,6,3)) # Expected output: 256",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(num):\n    # Reverse the number\n    reversed_num = int(str(num)[::-1])\n    \n    # Calculate half of the original number and subtract one\n    target = num - 1\n    \n    # Check if the target is equal to the reversed number\n    return target == reversed_num",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Max_Num(digits_list, length):\n    # Sort the list of digits in descending order based on their value\n    sorted_digits = sorted(digits_list, reverse=True)\n    \n    # Join the sorted digits into a single string and convert it back to an integer\n    max_num_str = ''.join(map(str, sorted_digits))\n    \n    # Convert the string representation of the numbers into integers for proper ordering\n    max_num = int(max_num_str[:length])\n    \n    return max_num",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def opposite_Signs(a, b):\n    \"\"\"\n    This function checks if the product of two given numbers is negative.\n    \n    Parameters:\n    a (int): The first integer number.\n    b (int): The second integer number.\n    \n    Returns:\n    bool: True if the product of 'a' and 'b' has an opposite sign, otherwise False.\n    \"\"\"\n    # Multiply the absolute values of both numbers\n    abs_product = abs(a) * abs(b)\n    # If the result is negative, then their signs are opposite\n    return abs_product < 0\n\n# Test Cases\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(3, 2) == False\nassert opposite_Signs(-10, -10) == False",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_octagonal(n):\n    # Calculate the formula for nth octagonal number\n    result = ((3 * n - 2) ** 2 + 7 * n) // 8\n    return result\n\n# Test cases\nprint(is_octagonal(5))  # Expected output: 65\nprint(is_octagonal(10)) # Expected output: 280\nprint(is_octagonal(15)) # Expected output: 645",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "from typing import List\n\ndef max_len_sub(arr: List[int], k: int) -> int:\n    \"\"\"\n    Finds the maximum length of the subsequence where each pair of adjacent elements has a difference less than or equal to k.\n    \n    :param arr: List of integers representing the sequence.\n    :param k: Integer representing the allowed maximum difference between adjacent elements in the subsequence.\n    :return: The length of the longest such subsequence.\n    \"\"\"\n    dp = [[-1] * (k + 1) for _ in range(len(arr))]\n    def rec(i, diff):\n        if i == len(arr): \n            return 0\n        if dp[i][diff] != -1:\n            return dp[i][diff]\n        \n        include_i = 0\n        if diff >= arr[i]:\n            include_i = 1 + rec(i+1, diff)\n        exclude_i = rec(i+1, diff + arr[i])\n        \n        dp[i][diff] = max(include_i, exclude_i)\n        return dp[i][diff]\n    \n    result = 0\n    for j in range(k+1):\n        result = max(result, rec(0, j))\n    return result",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'str' object has no attribute 'pop'",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Substrings(s, n):\n    # Initialize variables\n    count = 0\n    current_sum = 0\n    \n    for i in range(n):\n        # Calculate the sum of characters in the substring starting from position i\n        if s[i].isdigit():\n            current_sum += int(s[i])\n        \n        # If the cumulative sum equals the length of the string\n        if current_sum == n:\n            count += 1\n            \n        # Reset the sum when it exceeds the string length\n        elif current_sum > n:\n            while current_sum > n and i >= len(s)-1:\n                current_sum -= int(s.pop())\n    \n    return count",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(lst):\n    return min(lst)\n\n# Test cases\nprint(smallest_num([10, 20, 1, 45, 99]))  # Output: 1\nprint(smallest_num([1, 2, 3]))            # Output: 1\nprint(smallest_num([45, 46, 50, 60]))     # Output: 45",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_difference(tuple_list):\n    # Find the minimum element in the first position of all tuples in the list\n    min_element = min([x[0] for x in tuple_list])\n    \n    # Calculate the maximum difference between each tuple's elements and the found minimum\n    max_diff = max([max(x) - min_element for x in tuple_list])\n    \n    return max_diff\n\n# Test cases to verify the correctness of the solution\nprint(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))  # Expected output: 7\nprint(max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]))  # Expected output: 15\nprint(max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]))  # Expected output: 23",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def subject_marks(students):\n    # Sorting students based on marks in descending order and names in ascending order\n    sorted_students = sorted(students, key=lambda x: (-x[1], x[0]))\n    return sorted_students\n\n# Test cases\nprint(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]))  # [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nprint(subject_marks([('Telugu', 49), ('Hindhi', 54), ('Social', 33)]))  # [(['Social', 33), ('Telugu', 49), ('Hindhi', 54))]\nprint(subject_marks([('Physics', 96), ('Chemistry', 97), ('Biology', 45)]))  # [(['Biology', 45), ('Physics', 96), ('Chemistry', 97)]]",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if isinstance(i, list):\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(nums):\n    \"\"\"\n    Counts and returns the number of positive integers in the given list.\n    \n    Args:\n        nums (List[int]): The input list containing integer elements.\n        \n    Returns:\n        int: The count of positive integers in the list.\n    \"\"\"\n    return sum(1 for num in nums if num > 0)",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number.\n    \n    Parameters:\n    n (int): The position in the sequence of Bell numbers.\n    \n    Returns:\n    int: The value of the nth Bell number.\n    \"\"\"\n    # Initialize an array for storing Bell numbers up to n-th term\n    bell = [0] * (n + 1)\n    # Base case: there's one way to form a sum with zero elements\n    bell[0] = 1\n    \n    # Fill the array using the recursive relation\n    for i in range(1, n + 1):\n        bell[i] = sum(bell[:i])\n        \n    return bell[n]\n\n# Test cases\nprint(bell_number(2))  # Expected output: 2\nprint(bell_number(10))  # Expected output: 115975\nprint(bell_number(56))  # Expected output: 6775685320645824322581483068371419745979053216268760300",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(array):\n    increasing = decreasing = True\n    \n    for i in range(1, len(array)):\n        if array[i] > array[i-1]:\n            decreasing = False\n        elif array[i] < array[i-1]:\n            increasing = False\n            \n    return increasing or decreasing",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_sublist(main_list, sub_list):\n    return all(item in main_list for item in sub_list)",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_equal(tuple_list, expected_length):\n    \"\"\"\n    Check if all tuples in the list have the specified length.\n    \n    Parameters:\n    tuple_list (list of tuple): The list containing tuples to be checked.\n    expected_length (int): The expected length of each tuple.\n    \n    Returns:\n    str: A message indicating whether all tuples have the same length as expected,\n         otherwise a message stating they don't match the expected length.\n    \"\"\"\n    # Initialize a flag variable to True which will be used to check equality later\n    all_tuples_have_same_length = True\n    \n    for item in tuple_list:\n        # If an element does not have the expected length, set flag to False and break out of loop\n        if len(item) != expected_length:\n            all_tuples_have_same_length = False\n            break\n            \n    # Return appropriate message based on the flag's value\n    if all_tuples_have_same_length:\n        return \"All tuples have same length\"\n    else:\n        return \"All tuples do not have same length\"\n\n# Test cases\nprint(get_equal([(11, 22, 33), (44, 55, 66)], 3))   # Expected output: All tuples have same length\nprint(get_equal([(1, 2, 3), (4, 5, 6, 7)], 3))      # Expected output: All tuples do not have same length\nprint(get_equal([(1, 2), (3, 4)], 2))                # Expected output: All tuples have same length",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    swapped = True\n    \n    while gap > 1 or swapped == True:\n        gap = int(gap / shrink_factor)\n        swapped = False\n        \n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n                \n    return arr\n\n# Test cases\nprint(comb_sort([5, 15, 37, 25, 79]))  # Expected output: [5, 15, 25, 37, 79]\nprint(comb_sort([41, 32, 15, 19, 22]))  # Expected output: [15, 19, 22, 32, 41]\nprint(comb_sort([99, 15, 13, 47]))      # Expected output: [13, 15, 47, 99]",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dif_Square(n):\n    \"\"\"\n    Check if the given number n can be expressed as the difference of two squares.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n is expressible as the difference of two squares, False otherwise.\n    \"\"\"\n    # A number can be expressed as the difference of two squares if and only if it's not of the form 4^k*(8m+7)\n    return n % 4 != 3",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef multiple_split(s):\n    pattern = r'[\\s*\\-*]+'\n    return re.split(pattern, s)",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_samepatterns(patterns, test_patterns):\n    # Check if both lists have the same number of elements\n    if len(patterns) != len(test_patterns):\n        return False\n    \n    for pattern, test_pattern in zip(patterns, test_patterns):\n        # Check each character in the current pair\n        for p_char, t_char in zip(pattern, test_pattern):\n            # If characters don't match and one of them doesn't exist in the other list\n            if p_char != t_char:\n                return False\n                \n    return True",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_tuples(lst, k):\n    # Filter the list of tuples where each tuple has every element divisible by k\n    filtered_tuples = [tup for tup in lst if all(element % k == 0 for element in tup)]\n    \n    # Convert the list of filtered tuples into a string representation as per task requirements\n    result_str = '[' + ', '.join(map(str, filtered_tuples)) + ']'\n    return result_str",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Squares(m, n):\n    \"\"\"\n    Returns the total number of squares within an m x n grid.\n    \n    :param m: int - The length of one side of the rectangle.\n    :param n: int - The length of another side of the rectangle.\n    :return: int - Total number of squares.\n    \"\"\"\n    # Initialize counter for total squares\n    total_squares = 0\n    \n    # Iterate through possible sizes of squares (from 1x1 up to min(m,n)xmin(m,n))\n    for size in range(1, min(m, n) + 1):\n        # Count all squares of the current size and add it to the total\n        total_squares += (m - size + 1) * (n - size + 1)\n        \n    return total_squares\n\n# Check function with provided data points\nassert count_Squares(4, 3) == 20, \"Test case 1 failed\"\nassert count_Squares(2, 2) == 5, \"Test case 2 failed\"\nassert count_Squares(1, 1) == 1, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_Diff(num):\n    # Convert number to string for easy digit extraction\n    str_num = str(num)\n    \n    # Initialize sums for even and odd digits\n    sum_even_digits = 0\n    sum_odd_digits = 0\n    \n    # Iterate over each digit in the number\n    for digit in str_num:\n        if int(digit) % 2 == 0:\n            sum_even_digits += int(digit)\n        else:\n            sum_odd_digits += int(digit)\n    \n    # Return the difference between sums of even and odd digits\n    return abs(sum_odd_digits - sum_even_digits)\n\n# Test cases provided in the problem description\nassert is_Diff(12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def count_With_Odd_SetBits(n):\n    # Initialize counter for numbers with odd number of set bits\n    count = 0\n    \n    # Iterate through all possible bit patterns up to n\n    for i in range(1 << int(math.log2(n)) + 1):\n        # Count the number of set bits in the current pattern\n        if bin(i)[2:].count('1') % 2 != 0:\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    # Check if the length of the word is even\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    Args:\n    n : int - The position in the sequence of tetrahedral numbers\n    \n    Returns:\n    float - The value of the nth tetrahedral number\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) / 6",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: Input tuples must be of equal length"
    ],
    "generated_code": "def zip_tuples(tuple1, tuple2):\n    # Check if both inputs have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must be of equal length\")\n\n    # Create an empty list to store the zipped results\n    zipped = []\n\n    # Iterate over each pair of elements from both tuples\n    for i in range(len(tuple1)):\n        zipped.append((tuple1[i], tuple2[i]))\n\n    return zipped\n\n# Test cases\nprint(zip_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6)))  # Should print: [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nprint(zip_tuples((8, 9, 5, 6, 10, 11), (2, 6, 7)))  # Should print: [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nprint(zip_tuples((9, 10, 6, 7, 11, 12), (3, 7, 8)))  # Should print: [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Char(s):\n    # Initialize result with 'a' for single char strings\n    res = ord('a')\n    \n    # Check if input is not empty and length is more than one\n    if len(s) > 1:\n        # Iterate over each character in the string except the first one\n        for i in range(1, len(s)):\n            # Convert character back to integer, add it to result, then convert back to ASCII value\n            res += ord(s[i]) - ord(s[0])\n    \n    # Return final result converted back to a character\n    return chr(res)",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for i in range(3, n+1):\n            c = a + b\n            a, b = b, c\n        return b",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Parameters:\n    radius (float): The radius of the sphere.\n    \n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def centered_hexagonal_number(n):\n    # Calculate the n-th centered hexagonal number using the formula:\n    # Cn = n * (2*n - 1)\n    result = n * (2 * n - 1)\n    return result\n\n# Test cases\nprint(centered_hexagonal_number(10))  # Expected output: 271\nprint(centered_hexagonal_number(2))   # Expected output: 7\nprint(centered_hexagonal_number(9))   # Expected output: 217",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the first two dictionaries and then combine with the third dictionary\n    return {**dict1, **dict2, **dict3}",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_count(lst):\n    # Initialize an empty dictionary to store frequencies\n    result = {}\n    \n    # Iterate over each element in the list\n    for item in lst:\n        if item in result:\n            # If the element is already in the dictionary, increment its count\n            result[item] += 1\n        else:\n            # Otherwise, add the element to the dictionary with a count of 1\n            result[item] = 1\n    \n    return result",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def closest_num(n):\n    \"\"\"\n    This function finds the largest integer less than n.\n    \n    Parameters:\n    n (int): The target number\n    \n    Returns:\n    int: The largest integer less than n\n    \"\"\"\n    return n - 1",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Initialize max_length with 0\n    max_length = 0\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Update max_length if current word's length is greater than max_length\n        max_length = max(max_length, len(word))\n    \n    # Return the maximum length found\n    return max_length",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_substring(str_list, sub_string):\n    return sub_string in str_list",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_undulating(s):\n    for i in range(0, len(s)-1, 2):\n        if s[i] != s[i+1]:\n            return False\n    return True\n\n# Test cases\nprint(is_undulating(\"1212121\")) # Expected output: True\nprint(is_undulating(\"1991\"))   # Expected output: False\nprint(is_undulating(\"121\"))    # Expected output: True",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power(a, b):\n    if b == 0:\n        return 1\n    result = 1\n    while b > 0:\n        if b % 2 != 0:\n            result *= a\n        a *= a\n        b //= 2\n    return result",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def index_minimum(tuples_list):\n    # Extracting the tuple with the minimum first element and then returning the second element\n    min_tuple = min(tuples_list, key=lambda x: x[0])\n    return min_tuple[1]\n\n# Test cases\nprint(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))  # Should print 'Varsha'\nprint(index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]))   # Should print 'Dawood'\nprint(index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]))     # Should print 'Ayesha'",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min_Length' is not defined",
      "Test 2: FAIL - name 'Find_Min_Length' is not defined",
      "Test 3: FAIL - name 'Find_Min_Length' is not defined"
    ],
    "generated_code": "def find_min_length(lists):\n    min_len = float('inf')\n    for lst in lists:\n        if len(lst) < min_len:\n            min_len = len(lst)\n    return min_len",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_lists(lists):\n    # Initialize an empty dictionary to store the frequency count\n    result = {}\n    \n    # Iterate over each list in the input list\n    for sublist in lists:\n        # Iterate over each item in the current list\n        for item in sublist:\n            # If the item is already in the dictionary, increment its count\n            if item in result:\n                result[item] += 1\n            else:\n                # Otherwise, add the item to the dictionary with a count of 1\n                result[item] = 1\n    \n    return result",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_num(nums):\n    \"\"\"\n    Multiply all elements in the given list `nums` and return the result divided by the length of the list.\n    \n    Args:\n    nums (list): A list of integers.\n    \n    Returns:\n    float: The product of all elements divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product / len(nums)",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    return bin(decimal_number)[2:]\n\n# Test cases\nprint(decimal_to_binary(8))  # Expected output: '1000'\nprint(decimal_to_binary(18))  # Expected output: '10010'\nprint(decimal_to_binary(7))   # Expected output: '111'",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_palindrome(num):\n    \"\"\"Check if a number is a palindrome.\"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find and return the next smallest palindrome greater than n.\n    \n    :param n: The starting integer to check for the next palindrome.\n    :return: The next smallest palindrome after n.\n    \"\"\"\n    num = n + 1\n    while True:\n        if is_palindrome(num):\n            return num\n        else:\n            num += 1",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def kth_element(arr, index, num_elements):\n    \"\"\"\n    This function finds and returns the kth element from an array arr at position index within num_elements.\n    \n    Parameters:\n    - arr: A list of integers representing the input array.\n    - index: An integer specifying the position from which we need to extract the element.\n    - num_elements: The total number of elements in the array.\n    \n    Returns:\n    - The kth element from the specified position as per the num_elements.\n    \"\"\"\n    return arr[(index-1)*num_elements + index]\n\n# Check function with provided data points to verify correctness\nprint(kth_element([12,3,5,7,19], 5, 2)) # Expected output: 3\nprint(kth_element([17,24,8,23], 4, 3))   # Expected output: 8\nprint(kth_element([16,21,25,36,4], 5, 4))# Expected output: 36",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def snake_to_camel(snake_str):\n    # Split the input string into words using underscore as delimiter.\n    words = snake_str.split('_')\n    # Capitalize each word except the first one and join them together.\n    return ''.join(word.capitalize() for word in words)",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef eulerian_num(n, m):\n    # Initialize variables for dynamic programming\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case initialization\n    for i in range(m + 1):\n        dp[1][i] = 1\n    \n    # Fill the DP table\n    for length in range(2, n + 1):\n        for remaining_elements in range(length - 1, m - 1, -1):\n            for k in range(remaining_elements // length + 1):\n                if remaining_elements >= length:\n                    dp[length][remaining_elements] += k * dp[length - 1][remaining_elements - length]\n    \n    return dp[n][m]\n\n# Test cases\nprint(eulerian_num(3, 1))   # Expected output: 4\nprint(eulerian_num(4, 1))   # Expected output: 11\nprint(eulerian_num(5, 3))   # Expected output: 26",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst_of_lists):\n    return [sorted(sublist) for sublist in lst_of_lists]",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(lst):\n    # Initialize counter\n    count = 0\n    \n    # Iterate through the list and increment count for True elements\n    for element in lst:\n        if element is True:\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: can only concatenate list (not \"tuple\") to list"
    ],
    "generated_code": "def add_lists(lists, tuples):\n    result = []\n    for item in lists + tuples:\n        result.append(item)\n    return tuple(result)\n\n# Test cases\nprint(add_lists([5, 6, 7], (9, 10)))  # Expected output: (9, 10, 5, 6, 7)\nprint(add_lists([6, 7, 8], (10, 11)))  # Expected output: (10, 11, 6, 7, 8)\nprint(add_lists([7, 8, 9], (11, 12)))  # Expected output: (11, 12, 7, 8, 9)",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: invalid literal for int() with base 10: 'a'"
    ],
    "generated_code": "def count_Hexadecimal(start, end):\n    \"\"\"\n    Count the number of hexadecimal numbers within a given range [start, end].\n    \n    Args:\n    start (int): The starting integer of the range.\n    end (int): The ending integer of the range.\n    \n    Returns:\n    int: The count of hexadecimal numbers in the specified range.\n    \"\"\"\n    if start > end:\n        start, end = end, start  # Adjust start and end to be sorted\n    \n    total_hex_numbers = (end - start + 1) * 16\n    invalid_cases = []\n    \n    for i in range(end - start + 1):\n        hex_value = format(start + i, 'x')  # Convert start + i to hexadecimal string\n        digit_sum = sum(int(digit) for digit in hex_value)\n        \n        if digit_sum not in {8, 9, A, B, C, D, E, F}:  # Check if it's valid hexadecimal value\n            invalid_cases.append(i)\n    \n    return total_hex_numbers - len(invalid_cases)\n\n# Test cases\nprint(count_Hexadecimal(10, 15))  # Expected output: 6\nprint(count_Hexadecimal(2, 4))    # Expected output: 0\nprint(count_Hexadecimal(15, 16))  # Expected output: 1",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\nfrom heapq import merge\n\ndef merge_sorted_list(sorted_lists):\n    \"\"\"\n    Merge multiple sorted lists into one sorted list.\n    \n    :param sorted_lists: List of lists, each containing integers in ascending order.\n    :return: A generator that yields merged elements from all lists in sorted order.\n    \"\"\"\n    return tuple(merge(*sorted_lists))\n\n# Test cases to verify the correctness of the solution\nassert list(merge_sorted_list([[25, 24, 15, 4, 5, 29, 110],\n                               [19, 20, 11, 56, 25, 233, 154],\n                               [24, 26, 54, 48]])) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 48, 54, 56, 110, 154, 233]\nassert list(merge_sorted_list([[1, 3, 5, 6, 8, 9],\n                              [2, 5, 7, 11],\n                              [1, 4, 7, 8, 12]])) == [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert list(merge_sorted_list([[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],\n                              [25, 35, 22, 85, 14, 65, 75, 25, 58],\n                              [12, 74, 9, 50, 61, 41]])) == [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41,",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Equivalent(binary_string, n):\n    # Initialize count of rotations with odd value\n    odd_count = 0\n    \n    # Iterate through each rotation position from 0 to n-1\n    for i in range(n):\n        # Convert the string into an integer and check if it's odd\n        num = int(binary_string[i:] + binary_string[:i], 2)\n        # Increment count if the number is odd\n        if num % 2 != 0:\n            odd_count += 1\n            \n    return odd_count\n\n# Test cases\nprint(odd_Equivalent(\"011001\", 6))  # Expected output: 3\nprint(odd_Equivalent(\"11011\", 5))   # Expected output: 4\nprint(odd_Equivalent(\"1010\", 4))    # Expected output: 2",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: too many values to unpack (expected 2)"
    ],
    "generated_code": "def extract_missing(ranges, start_range, end_range):\n    # Create a set of all possible integers in the specified range\n    all_numbers = set(range(start_range, end_range + 1))\n    \n    # Extract numbers that are not covered by the given ranges\n    missing_numbers = [list(range(num_start, num_end + 1)) for num_start, num_end in ranges if num_start > start_range or num_end < end_range]\n    \n    # Filter out any non-continuous number ranges\n    filtered_ranges = []\n    current_range = None\n    \n    for start, end in sorted(missing_numbers):\n        if not current_range:\n            current_range = (start, end)\n        elif current_range[1] < start:\n            filtered_ranges.append(current_range)\n            current_range = (start, end)\n        else:\n            current_range = (min(current_range[0], start), max(current_range[1], end))\n            \n    if current_range:\n        filtered_ranges.append(current_range)\n    \n    return [(num_start, num_end) for num_start, num_end in zip(*filtered_ranges)]\n\n# Test cases\nprint(extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100))\nprint(extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60))\nprint(extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52))",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_in_nested_lists(nested_lists):\n    result = set(nested_lists[0])\n    for sublist in nested_lists[1:]:\n        result.intersection_update(sublist)\n    return list(result)\n\n# Test cases\nprint(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) # Output: [18, 12]\nprint(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])) # Output: [5, 23]\nprint(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])) # Output: [4]",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perimeter(radius, height):\n    # Calculate and return the perimeter of the cylinder using the formula: 2πr + 2πrh\n    from math import pi\n    return 2 * pi * radius + 2 * pi * radius * height",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_freq(tuple_list):\n    from collections import Counter\n    \n    # Count the occurrences of each tuple and then sort it based on tuple length for equal counts\n    freq = sorted(Counter(tuple_list).most_common(), key=lambda x: (-len(x[0]), x[0]))\n    \n    # Create a new list with assigned frequencies\n    result = [tuple([item] * count) for item, count in freq]\n    \n    return result",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'empty_dit' is not defined",
      "Test 2: FAIL - name 'empty_dit' is not defined",
      "Test 3: FAIL - name 'empty_dit' is not defined"
    ],
    "generated_code": "def is_all_dicts_empty(dicts):\n    # Check if all dictionaries in the list are empty\n    return len([d for d in dicts if d]) == 0\n\n# Test cases\nprint(is_all_dicts_empty([{},{},{}]))  # Expected output: True\nprint(is_all_dicts_empty([{1,2},{},{}]))  # Expected output: False\nprint(is_all_dicts_empty({}))  # Expected output: True",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup):\n    # Convert each element in the tuple to string and join them together\n    return int(''.join(map(str, tup)))",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_to_float(lst):\n    new_list = []\n    for pair in lst:\n        if isinstance(pair[0], str) and isinstance(pair[1], str):\n            try:\n                converted_pair = tuple(float(num_str) for num_str in pair)\n                new_list.append(converted_pair)\n            except ValueError:\n                continue\n    return new_list",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_list(input_string):\n    # Split the input string into words based on whitespace and return as a list\n    return input_string.split()",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def search(arr, n):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if mid == 0 and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        \n        if mid > 0 and arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        elif mid < n-1 and arr[mid] == arr[mid + 1]:\n            right = mid - 1\n        else:\n            break\n            \n    if left <= right:\n        if arr[left] != arr[left+1]:\n            return arr[left]\n    return None\n\n# Test cases\nprint(search([1,1,2,2,3],5))   # Output: 3\nprint(search([1,1,3,3,4,4,5,5,7,7,8],11))   # Output: 8\nprint(search([1,2,2,3,3,4,4],7))   # Output: 1",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_product_tuple(tuples_list):\n    # Initialize variables to store the maximum and second largest products\n    max_product = float('-inf')\n    sec_max_product = float('-inf')\n\n    for tuple in tuples_list:\n        first, second = tuple\n        # Update the maximum and second largest products if current values are greater\n        if first * second > max_product:\n            sec_max_product = max_product\n            max_product = first * second\n        elif second * first > sec_max_product and first != second:\n            sec_max_product = second * first\n\n    return max_product",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_triplet(arr, target_sum, k, index=0):\n    n = len(arr)\n    \n    for i in range(n - 2):\n        current_sum = arr[i]\n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            if current_sum + arr[left] + arr[right] == target_sum and left != i and right != i and left != index and right != index:\n                return True\n            \n            if current_sum + arr[left] + arr[right] > target_sum:\n                right -= 1\n            else:\n                left += 1\n                \n    return False",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def smartNumber(n):\n    count = 0\n    num = 1\n    \n    while True:\n        if isSmart(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\nimport math\n\ndef isSmart(number):\n    digits = [int(digit) for digit in str(number)]\n    sorted_digits = sorted(digits)\n    \n    # Check if all digits in descending order and no three consecutive digits have the same sum of squares.\n    return all(sorted_digits[i] - sorted_digits[i-1] > 0 for i in range(1, len(sorted_digits))) and not any(math.isqrt(sorted_digits[i]**2 + sorted_digits[i+1]**2 + sorted_digits[i+2]**2) == sorted_digits[i+2] for i in range(len(sorted_digits)-2))",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_amicable(num):\n    \"\"\"\n    Check if two numbers are amicable.\n    Amicable numbers are pairs of numbers where each number is the sum of the proper divisors of the other.\n    Proper divisors are positive integers that divide the given integer exactly, excluding the integer itself.\n    \"\"\"\n    def find_divisors(n):\n        return [i for i in range(1, n) if n % i == 0]\n\n    divisors_a = find_divisors(num)\n    divisors_b = find_divisors(sum(divisors_a))\n\n    return set(divisors_a).issubset(set(divisors_b)) and len(divisors_a) > 1 and len(divisors_b) > 1\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    Sum all amicable numbers between 1 and n inclusive.\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for num in range(1, n+1):\n        if is_amicable(num):\n            sum_of_amicable_numbers += num\n    return sum_of_amicable_numbers",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import cmath\n\ndef angle_complex(x,y):\n    \"\"\"\n    This function calculates and returns the phase angle (in radians) of a complex number.\n    \n    Args:\n    x (float): The real part of the complex number.\n    y (complex): The imaginary part of the complex number.\n    \n    Returns:\n    float: The phase angle in radians.\n    \"\"\"\n    # Convert y to a complex object with a real part of 0 and an imaginary part equal to y.\n    c = complex(0, y)\n    # Calculate the argument using math.atan2, which takes into account the signs of both real and imaginary parts.\n    return cmath.phase(c)\n\n# Function to check if the solution is correct for given test cases.\ndef check_solution():\n    assert abs(angle_complex(0, 1j) - cmath.pi/2) < 1e-9, \"Test case 1 failed\"\n    assert abs(angle_complex(2, 1j) - cmath.acos(-1/2)) < 1e-9, \"Test case 2 failed\"\n    assert abs(angle_complex(0, 2j) - cmath.pi/2) < 1e-9, \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_length(binary_str, n):\n    # Initialize counters for zeros and ones\n    zero_count = 0\n    one_count = 0\n    \n    # Iterate through the binary string\n    for char in binary_str:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n            \n    # Calculate the maximum length of valid substrings\n    max_len = min(n, zero_count - one_count)\n    \n    return max_len",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_of_common_divisors(x, y):\n    # Initialize the count of common divisors\n    common_divisor_count = 0\n    \n    # Iterate through all numbers from 1 to min(x, y)\n    for i in range(1, min(x, y) + 1):\n        if x % i == 0 and y % i == 0:\n            common_divisor_count += i\n            \n    return common_divisor_count",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_int(a, b):\n    result = 0\n    for _ in range(b):\n        result += a\n    return result",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, lst):\n    # Use list comprehension and filter() with lambda expression to find words longer than n\n    return [word for word in lst if len(word) > n]",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def magic_square_test(grid):\n    n = len(grid)\n    sum_of_row = sum(grid[0])\n    total_sum = n * sum_of_row\n    \n    for row in grid:\n        if sum(row) != sum_of_row:\n            return False\n    \n    sums_of_diagonals = [sum(i) for i in zip(*grid)]\n    \n    if all(s == sum_of_row for s in sums_of_diagonals) and total_sum % n == sum_of_row:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(lst):\n    from collections import Counter\n    \n    # Use Counter to count occurrences of each element\n    counts = Counter(lst)\n    \n    # Find the key-value pair with the highest value (frequency)\n    max_count = max(counts.items(), key=lambda x: x[1])\n    \n    return max_count",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_vowels(s: str) -> str:\n    # Convert the input string into a list for easier manipulation\n    s = list(s)\n    \n    # Define the set of vowels for quick lookup\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    \n    # Initialize pointers for the start and end of the string\n    i, j = 0, len(s) - 1\n    \n    # Loop until the two pointers meet in the middle\n    while i < j:\n        # Move the left pointer forward as long as it points to a vowel\n        while i < j and s[i] not in vowels:\n            i += 1\n        \n        # Move the right pointer backward as long as it points to a vowel\n        while i < j and s[j] not in vowels:\n            j -= 1\n        \n        # Swap the characters at the current positions of the pointers\n        s[i], s[j] = s[j], s[i]\n        \n        # Move both pointers towards each other\n        i += 1\n        j -= 1\n    \n    # Convert the list back to a string and return it\n    return ''.join(s)\n\n# Test cases\nprint(reverse_vowels(\"Python\"))  # Output: \"Python\"\nprint(reverse_vowels(\"USA\"))     # Output: \"ASU\"\nprint(reverse_vowels(\"ab\"))      # Output: \"ab\"",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\n    # Convert tuple elements into a string and join them together\n    return ''.join(tup)",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_negativenum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n# Test cases\nprint(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])) # Should print -32\nprint(sum_negativenum([10,15,-14,13,-18,12,-20])) # Should print -52\nprint(sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])) # Should print -894",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def check_last(arr, n, m):\n    count = 0\n    for _ in range(m):\n        if arr[-1] % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n        arr.pop()\n    return \"EVEN\" if count >= 0 else \"ODD\"\n\n# Test cases\nprint(check_last([5, 7, 10], 3, 1)) # Expected output: \"ODD\"\nprint(check_last([2, 3], 2, 3)) # Expected output: \"EVEN\"\nprint(check_last([1, 2, 3], 3, 1)) # Expected output: \"ODD\"",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def hexagonal_num(nth):\n    # Formula to calculate n-th hexagonal number: \n    # nth = (2*n - 1)*n / 2\n    result = (2 * nth - 1) * nth // 2\n    return int(result)\n\n# Test cases\nprint(hexagonal_num(10))  # Expected output: 190\nprint(hexagonal_num(5))   # Expected output: 45\nprint(hexagonal_num(7))   # Expected output: 91",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_electbill(bill_amt):\n    # Calculating the electricity bill based on the given formula\n    bill = 90 * ((bill_amt / 100) ** 1.5)\n    return round(bill)",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import numpy as np\n\ndef zero_count(arr):\n    return np.count_nonzero(np.array(arr) == 0)",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(num):\n    \"\"\"\n    Check if the given number can be expressed as the sum of non-zero powers of 2.\n    \n    Parameters:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if the number can be represented as such, False otherwise.\n    \"\"\"\n    while num > 0:\n        # If the last bit set in num is zero and there's at least one '1' in binary representation,\n        # it means we can't represent the number as sum of non-zero powers of two.\n        if num & 1 == 0 and bin(num).count('1') != 1:\n            return False\n        num >>= 1  # Equivalent to num //= 2\n    return True",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    This function calculates the circumference of a circle given its radius.\n    \n    Parameters:\n    - radius: The radius of the circle as a float.\n    \n    Returns:\n    - The circumference of the circle rounded to 7 decimal places.\n    \"\"\"\n    return round(2 * math.pi * radius, 7)",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_singly(tuples_list):\n    result = []\n    for tup in tuples_list:\n        # Check if there's exactly one unique element and add it to the result list.\n        if len(set(tup)) == 1:\n            result.append(list(set(tup))[0])\n    return result\n\n# Test cases\nprint(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))  # Expected output: [3, 4, 5, 7, 1]\nprint(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]))  # Expected output: [1, 2, 3, 4, 7, 8]\nprint(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]))  # Expected output: [7, 8, 9, 10, 11, 12]",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def pancake_sort(arr):\n    n = len(arr)\n    while n > 1:\n        # Find the index of the maximum element in arr[0:n]\n        max_index = arr.index(max(arr[:n]))\n        # Move the maximum element to the end if it's not already at the correct position\n        if max_index != n - 1:\n            # Flip the array from 0 to max_index\n            flip(arr, 0, max_index)\n        else:\n            # Flip the array from 0 to n-1\n            flip(arr, 0, n - 1)\n        n -= 1\n    return arr\n\ndef flip(arr, start, end):\n    \"\"\"Flip the subarray arr[start:end+1].\"\"\"\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n\n# Test cases\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_samepair(list1, list2, list3):\n    return sum(map(lambda x,y,z: x == y and y == z and z == x, list1, list2, list3))",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_lists(lst):\n    \"\"\"\n    This function takes a list of tuples as input and returns the count of tuples within those lists.\n    \n    Args:\n    lst (list): A list containing tuples\n    \n    Returns:\n    int: Count of tuples within the lists\n    \"\"\"\n    return sum(1 for sublist in lst if isinstance(sublist, tuple))\n\n# Test cases\nassert find_lists([([], []), ([], [])]) == 0, \"Test case 1 failed\"\nassert find_lists([(1,), (2,)] + [(3,)] * 4) == 4, \"Test case 2 failed\"\nassert find_lists(((), ()) + ((1,),)) == 1, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_Pairs(arr, n):\n    total_sum = 0\n    \n    # Iterate through each element in the array\n    for i in range(n-1):\n        # For each element, add twice its value to 'total_sum'\n        total_sum += 2 * arr[i]\n    \n    # Subtract the square of each number from 'total_sum' and then divide by 2\n    return int(total_sum / 2)\n\n# Test cases\nprint(sum_Pairs([1,8,9,15,16],5))  # Output: 74\nprint(sum_Pairs([1,2,3,4],4))      # Output: 10\nprint(sum_Pairs([1,2,3,4,5,7,9,11,14],9))  # Output: 188",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_Abs_Diff(arr, k):\n    \"\"\"\n    Finds and returns the maximum absolute difference between any two elements in the array 'arr'\n    such that each element is at least 'k' units apart from the other.\n    \n    Parameters:\n    arr (list): The input list of integers.\n    k (int): The minimum distance required between any two elements for them to be considered as valid pairs.\n    \n    Returns:\n    int: The maximum absolute difference found between valid pairs of elements.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    min_val = min(arr)\n    max_diff = 0\n    \n    for num in arr:\n        current_diff = abs(num - min_val)\n        max_diff = max(max_diff, current_diff)\n        \n        if num > min_val + k:\n            min_val = num\n            \n    return max_diff",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ascii_value_string(s):\n    return sum(ord(char) for char in s)",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_path_sum(triangle, row_index, col_index):\n    \"\"\"\n    Find the maximum total path sum from top to bottom of a triangle.\n    \n    Parameters:\n    - triangle: List[List[int]] representing the triangle structure.\n    - row_index: int, current row index starting from 0 at the top.\n    - col_index: int, current column index starting from 0 at the leftmost column.\n    \n    Returns:\n    - The maximum total path sum as an integer.\n    \"\"\"\n    # Base case: if we reach the last number of the triangle\n    if row_index == len(triangle) - 1:\n        return triangle[row_index][col_index]\n    \n    # Recursive case: choose between left and right child\n    left_child = triangle[row_index + 1][col_index] + max(max_path_sum(triangle, row_index + 1, col_index),\n                                                         max_path_sum(triangle, row_index + 1, col_index + 1))\n    right_child = triangle[row_index + 1][col_index + 1] + max(max_path_sum(triangle, row_index + 1, col_index),\n                                                              max_path_sum(triangle, row_index + 1, col_index + 1))\n    \n    return max(left_child, right_child)\n\n# Example usage\ntriangle = [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\nprint(max_path_sum(triangle, 0, 0))  # Expected output: 23",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_digits_twoparts(num):\n    # Calculate the maximum possible sum of digits by removing one digit from num\n    return max(sum(int(digit) for digit in str(num)), sum(int(digit) for digit in str(num)[:-1]))",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def longest_subseq_with_diff_one(arr, k):\n    dp = [0] * len(arr)\n    \n    # Base case initialization\n    if arr[0] - arr[0] == k:\n        dp[0] = 1\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check all possible subsequences ending at the current index\n        for j in range(i):\n            diff = abs(arr[i] - arr[j])\n            if diff <= k and (dp[j] > 0 or (diff == 1 and dp[j] == 0)):\n                dp[i] += 1\n                \n    max_length = max(dp)\n    return max_length\n\n# Example usage\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7))  # Output: 6\nprint(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7))  # Output: 3\nprint(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8))  # Output: 7",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def does_Contain_B(a, b, c):\n    # Check if 'a' is equal to either 'b' or 'c'\n    return a == b or a == c",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_coprime(a, b):\n    \"\"\"\n    Check if two numbers are coprimes.\n    \n    Parameters:\n    a (int): First number\n    b (int): Second number\n    \n    Returns:\n    bool: True if 'a' and 'b' are coprimes, False otherwise\n    \"\"\"\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n    \n    return gcd(a, b) == 1\n\n# Test Cases\nprint(is_coprime(17,13)) # Expected output: True\nprint(is_coprime(15,21)) # Expected output: False\nprint(is_coprime(25,45)) # Expected output: False",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    merge_sort(left_half)\n    merge_sort(right_half)\n    \n    i = j = k = 0\n    \n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] < right_half[j]:\n            arr[k] = left_half[i]\n            i += 1\n        else:\n            arr[k] = right_half[j]\n            j += 1\n        k += 1\n        \n    while i < len(left_half):\n        arr[k] = left_half[i]\n        i += 1\n        k += 1\n        \n    while j < len(right_half):\n        arr[k] = right_half[j]\n        j += 1\n        k += 1\n    \n    return arr",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parabola_vertex(a,b,c):\n    # Calculate the x-coordinate of the vertex using the formula -b/(2a)\n    x = -b / (2 * a)\n    \n    # Calculate the y-coordinate of the vertex by substituting x into the equation ax^2 + bx + c\n    y = a * x**2 + b * x + c\n    \n    return (x, y)\n\n# Test cases\nprint(parabola_vertex(5,3,2))  # Expected output: (-0.3, 1.55)\nprint(parabola_vertex(9,8,4))  # Expected output: (-0.4444444444444444, 2.2222222222222223)\nprint(parabola_vertex(2,4,6))  # Expected output: (-1.0, 4.0)",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    result = []\n    for row in matrix:\n        if len(row) > index:\n            result.append(row[index])\n    return result",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    # Toggle all even bits of n using bit manipulation.\n    return ((n & 0xAAAAAAAA) >> 1) | ((n & 0x55555555) << 1)\n\n# Test cases to verify the correctness of the function\nassert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() argument must be a string, a bytes-like object or a real number, not 'tuple'",
      "Test 2: FAIL - int() argument must be a string, a bytes-like object or a real number, not 'tuple'",
      "Test 3: FAIL - int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def tuple_int_str(test_tup):\n    return tuple(map(int, test_tup))\n\n# Test cases\nprint(tuple_int_str(('333', '33'))) # Should output ((333, 33),)\nprint(tuple_int_str(('999', '99'))) # Should output ((999, 99),)\nprint(tuple_int_str(('666', '66'))) # Should output ((666, 66),)",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def encode_list(lst):\n    encoded = []\n    current_char = None\n    char_count = 0\n    \n    for item in lst:\n        if isinstance(item, str):  # Check if it's an individual character\n            if current_char is not None and current_char != item:\n                encoded.append([char_count, current_char])\n            current_char = item\n            char_count = 1\n        else:\n            char_count += 1\n            \n    # Add last segment\n    if current_char is not None:\n        encoded.append([char_count, current_char])\n    \n    return encoded",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef min_Ops(nums: List[int], k: int, target: int) -> int:\n    n = len(nums)\n    max_num = max(nums)\n    \n    # Calculate the total sum of differences between each element and the target\n    diff_sum = sum(abs(num - target) for num in nums)\n    \n    if diff_sum % k == 0:\n        avg_diff = diff_sum // k\n        count = diff_sum - avg_diff * n\n        \n        # If the difference between the average difference and the maximum difference is less than or equal to the number of operations required,\n        # then we can use those extra differences to reduce some of the largest differences.\n        if abs(avg_diff - max_num) <= count:\n            return count + (n - 1) * max_num\n    \n    return -1",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<=' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '<=' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '<=' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def month_season(month, day):\n    seasons = {'Winter': [12, 1, 2], 'Spring': [3, 4, 5], 'Summer': [6, 7, 8], 'Fall': [9, 10, 11]}\n    return next((seasons['Winter'][0] <= month <= seasons['Winter'][-1] and 1 <= day <= 31) \n                or (seasons['Spring'][0] <= month <= seasons['Spring'][-1] and 1 <= day <= 31)\n                or (seasons['Summer'][0] <= month <= seasons['Summer'][-1] and 1 <= day <= 31)\n                or (seasons['Fall'][0] <= month <= seasons['Fall'][-1] and 1 <= day <= 31),\n                \"invalid\")",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import Tuple\n\ndef solution(a: int, b: int, n: int) -> str:\n    \"\"\"\n    Solve the linear Diophantine equation ax + by = n for integers x and y.\n    \n    Parameters:\n    a (int): Coefficient of x in the equation.\n    b (int): Coefficient of y in the equation.\n    n (int): The constant on the right side of the equation.\n    \n    Returns:\n    A string describing the solution:\n        - \"x = \", followed by an integer if there is a solution.\n        - \"No solution\" if there is no solution.\n        - An explanation saying \"Not enough information\" if it's not possible to determine a solution.\n    \"\"\"\n    # Check if there is a solution based on GCD\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n    \n    gcd_ab = gcd(a, b)\n    \n    # If gcd_ab divides n perfectly then we have a solution\n    if n % gcd_ab == 0:\n        x = n // gcd_ab * (-a // gcd_ab)\n        y = n // gcd_ab * (-b // gcd_ab)\n        \n        if x >= 0 and y >= 0:\n            return f\"x = {x}, y = {y}\"\n        elif x < 0 <= y:\n            return f\"x = {-x}, y = {y}\"\n        elif x >= 0 > y:\n            return f\"x = {x}, y = {-y}\"\n        else:\n            return f\"No solution\"\n    else:\n        return \"Not enough information\"\n\n# Test cases\nprint(solution(2, 3, 7))  # Expected output: x = 2, y = 1\nprint(solution(4, 2, 7))  # Expected output: No solution\nprint(solution(1, 13, 17))  # Expected output: x = 4, y = 1",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(lst1, lst2):\n    return [i for i in lst1 if i not in lst2]\n\n# Test cases\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10], [2,4,6,8]))  # Output: [1, 3, 5, 7, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]))  # Output: [2, 4, 6, 8, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5,7]))  # Output: [1, 2, 3, 4, 6, 8, 9, 10]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    return sum(i for i in range(n, -1, -2))",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def area_polygon(sides, length):\n    \"\"\"\n    Calculate the area of a regular polygon given the number of sides and the length of each side.\n    \n    Parameters:\n        sides (int): The number of sides of the regular polygon.\n        length (float): The length of each side of the regular polygon.\n        \n    Returns:\n        float: The area of the regular polygon.\n    \"\"\"\n    return 0.25 * length**2 * sides * math.tan(math.pi / sides)\n\n# Test cases to verify the correctness of the function\nassert abs(area_polygon(4, 20) - 400.00000000000006) < 1e-10\nassert abs(area_polygon(10, 15) - 1731.1969896610804) < 1e-10\nassert abs(area_polygon(9, 7) - 302.90938549487214) < 1e-10",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'areEquivalent' is not defined",
      "Test 2: FAIL - name 'areEquivalent' is not defined",
      "Test 3: FAIL - name 'areEquivalent' is not defined"
    ],
    "generated_code": "def isDivisibleBySum(n):\n    total = sum(i for i in range(1, n + 1) if n % i == 0)\n    return total == n\n\n# Test cases\nprint(isDivisibleBySum(36))  # Expected output: False\nprint(isDivisibleBySum(2))   # Expected output: False\nprint(isDivisibleBySum(23))  # Expected output: True",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def count_char_position(s):\n    char_positions = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4}\n    \n    counter = [0] * 26\n    \n    for i in range(len(s)):\n        if s[i].isalpha():\n            letter_pos = ord(s[i]) - ord('A')\n            counter[letter_pos] += 1\n            \n    result = sum(counter)\n    \n    return result\n\n# Test Cases\nprint(count_char_position(\"xbcefg\")) # Output: 2\nprint(count_char_position(\"ABcED\")) # Output: 3\nprint(count_char_position(\"AbgdeF\")) # Output: 5",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_even_Pair(nums,k):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count\n\n# Test cases\nprint(find_even_Pair([5,4,7,2,1],5)) # Expected output: 4\nprint(find_even_Pair([7,2,8,1,0,5,11],7)) # Expected output: 9\nprint(find_even_Pair([1,2,3],3)) # Expected output: 1",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    elif n & (n - 1) == 0:\n        # If 'n' is already a power of 2, return 'n'\n        return n\n    else:\n        # Otherwise, find the next power of 2 using bit manipulation\n        return 1 << (int(math.log2(n)) + 1)",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr, num):\n    count = 0\n    for i in arr:\n        if i == num:\n            count += 1\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - maximum recursion depth exceeded",
      "Test 2: FAIL - maximum recursion depth exceeded",
      "Test 3: FAIL - maximum recursion depth exceeded"
    ],
    "generated_code": "def get_pell(n):\n    # Initialize base case values for Pell numbers\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Use memoization to store previously computed Pell numbers for efficiency\n    def pell_memoized(n, memo={}):\n        if n in memo:\n            return memo[n]\n        \n        # Calculate and store the value of PELL(n)\n        memo[n] = 2 * pell_memoized(n-1, memo) + pell_memoized(n-2, memo)\n        return memo[n]\n    \n    # Call the memoized function to compute the nth Pell number\n    result = pell_memoized(n)\n    return result",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_range_list(numbers, start_index, end_index):\n    return sum(numbers[start_index:end_index+1])",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon.\n    \n    Parameters:\n    side_length (float): The length of each side of the pentagon.\n    \n    Returns:\n    float: The total perimeter of the pentagon.\n    \"\"\"\n    return 5 * side_length\n\n# Check function with provided data points\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_occurance(string):\n    # Initialize a counter for occurrences of 'std'\n    std_count = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        if char == 's':\n            std_count += 1\n            \n    # Check if all 'std' characters have been counted correctly\n    if std_count > 0 and ('t' not in string or 'r' not in string or 'u' not in string or 'l' not in string or 'e' not in string or 'n' not in string):\n        return std_count\n    else:\n        return 0\n\n# Test cases\nprint(count_occurance(\"letstdlenstdporstd\"))  # Expected output: 3\nprint(count_occurance(\"truststdsolensporsd\"))  # Expected output: 1\nprint(count_occurance(\"makestdsostdworthit\"))  # Expected output: 2",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_splchar(s):\n    return ''.join(char for char in s if char.isalnum())\n\n# Test cases\nprint(remove_splchar('python  @#&^%$*program123')) # Should print 'pythonprogram123'\nprint(remove_splchar('python %^$@!^&*()  programming24%$^^()    language')) # Should print 'pythonprogramming24language'\nprint(remove_splchar('python   ^%&^()(+_)(_^&67)                  program')) # Should print 'python67program'",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_keyvalue(keyvalue_pairs):\n    result_dict = {}\n    for key, value in keyvalue_pairs:\n        if key not in result_dict:\n            result_dict[key] = []\n        result_dict[key].append(value)\n    return result_dict",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_valid_parenthese(expression):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in expression:\n        if char not in mapping:\n            stack.append(char)\n        elif not stack or stack.pop() != mapping[char]:\n            return False\n    \n    return len(stack) == 0\n\n# Test cases\nprint(is_valid_parenthese(\"(){}[]\"))  # True\nprint(is_valid_parenthese(\"()[{)}\"))  # False\nprint(is_valid_parenthese(\"()\"))      # True",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_triangle(a, b, c):\n    # Calculate and return the perimeter of the triangle\n    return a + b + c",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: No suitable pair found"
    ],
    "generated_code": "def answer(a, b):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n    \n    common_divisor = gcd(a, b)\n    \n    lower_bound = max(a, b) // common_divisor * common_divisor\n    upper_bound = min(a, b) // common_divisor * common_divisor + common_divisor - 1\n    \n    for i in range(lower_bound, upper_bound + 1, common_divisor):\n        if i > a and i < b:\n            return (a, b)\n            \n    # If no suitable pair is found, raise an error or return a default value\n    raise ValueError(\"No suitable pair found\") # Replace with appropriate logic\n\n# Test Cases\nprint(answer(3, 8))   # Expected output: (3, 6)\nprint(answer(2, 6))   # Expected output: (2, 4)\nprint(answer(1, 3))   # Expected output: (1, 2)",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef string_literals(strings, target_string):\n    for string in strings:\n        if re.search(string, target_string):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def is_num_keith(num):\n    \"\"\"\n    Returns True if num is a Keith number, else returns False.\n    \n    A Keith number is an n-digit integer where each digit can be expressed as a sum of some (not necessarily adjacent) digits from the original sequence. The first term in the sequence is the same as the input number.\n    \n    Args:\n    num: An integer representing the number to check.\n    \n    Returns:\n    A boolean value indicating whether num is a Keith number or not.\n    \"\"\"\n    seq = [int(digit) for digit in str(num)]\n    len_seq = len(seq)\n    while True:\n        new_seq = []\n        temp_sum = 0\n        for i in range(len_seq):\n            temp_sum += seq[i]\n            if len(new_seq) < len_seq:\n                new_seq.append(temp_sum)\n        if max(new_seq) == min(new_seq):\n            break\n        seq = new_seq[:]\n        \n    # Check if num appears in the generated Keith sequence\n    for i in range(len_seq + 1):\n        if num == seq[len_seq - i]:\n            return True\n            \n    return False\n\n# Test cases\nprint(is_num_keith(14))  # Expected output: True\nprint(is_num_keith(12))  # Expected output: False\nprint(is_num_keith(197)) # Expected output: True",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'atan2' is not defined"
    ],
    "generated_code": "from math import radians, sin, cos, acos\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371  # Radius of the Earth in kilometers\n    phi1, phi2 = radians(lat1), radians(lat2)\n    delta_phi, delta_lambda = radians(lat2-lat1), radians(lon2-lon1)\n\n    a = sin(delta_phi / 2)**2 + cos(phi1) * cos(phi2) * sin(delta_lambda / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n\n    return R * c\n\n# Test cases\nprint(distance_lat_long(23.5, 67.5, 25.5, 69.5))  # Should print approximately 12179.372 km\nprint(distance_lat_long(10.5, 20.5, 30.5, 40.5))  # Should print approximately 6069.398 km\nprint(distance_lat_long(10, 20, 30, 40))          # Should print approximately 6783.752 km",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_prefix(strs, n):\n    # Initialize the first string as the potential prefix\n    prefix = strs[0][:n]\n    \n    # Iterate through each character in the prefix and compare it with all other strings\n    for i in range(1, len(strs)):\n        if not strs[i].startswith(prefix):\n            # If the current character does not match, adjust the prefix\n            prefix = prefix[:len(prefix)-1]\n            break\n    \n    return prefix",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: unterminated string literal (detected at line 6)"
    ],
    "generated_code": "import re\n\ndef find_character(text):\n    # Regular expression pattern to match uppercase, lowercase, special characters, and numbers\n    pattern = r'[A-Z][a-z]|\\d|[!@#$%^&*()_+\\-=[]{};':\"\\\\|,.<>\\/?]'\n    \n    # Find all matches in the text\n    uppercase_chars = [char for char in text if re.match(r'[A-Z]', char)]\n    lowercase_chars = [char for char in text if re.match(r'[a-z]', char)]\n    special_characters = [char for char in text if re.search(r'[\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\_\\+\\-\\=\\{\\}\\[\\]\\:\\;'\"/.,<>?]', char)]\n    numbers = [char for char in text if re.match(r'\\d', char)]\n    \n    return (uppercase_chars, lowercase_chars, special_characters, numbers)\n\n# Test cases\nprint(find_character(\"ThisIsGeeksforGeeks\"))  # Expected output: (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nprint(find_character(\"Hithere2\"))             # Expected output: (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nprint(find_character(\"HeyFolks32\"))           # Expected output: (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef count_pairs(arr, k, v):\n    # Create a dictionary to store frequencies of each number in the array\n    freq = defaultdict(int)\n    for num in arr:\n        freq[num] += 1\n    \n    count = 0\n    # Iterate through the frequency map and check if there is another number with a difference of 'k'\n    for num in freq.keys():\n        if abs(num - v) in freq:\n            count += min(freq[num], freq[abs(num - v)])\n    \n    return count\n\n# Test cases\nprint(count_pairs([1, 5, 3, 4, 2], 5, 3))  # Output: 2\nprint(count_pairs([8, 12, 16, 4, 0, 20], 6, 4))  # Output: 5\nprint(count_pairs([2, 4, 1, 3, 4], 5, 2))  # Output: 3",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def greater_specificnum(list_of_nums, num):\n    # Initialize an empty list to store numbers greater than the given number\n    result = []\n    \n    # Iterate through each number in the input list\n    for num_to_check in list_of_nums:\n        # Check if the current number is greater than the specified number\n        if num_to_check > num:\n            # If so, add it to the result list\n            result.append(num_to_check)\n    \n    # Return the final list of numbers greater than the specified number\n    return result",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_focus(a,b,c):\n    x = -b / (2 * a) \n    y = (-c - (b**2)/(4*a)) / a \n    return (x, y)\n\n# Test cases\nprint(parabola_focus(5,3,2))  # Expected output: (-0.3, 1.6)\nprint(parabola_focus(9,8,4))  # Expected output: (-0.4444444444444444, 2.25)\nprint(parabola_focus(2,4,6))  # Expected output: (-1.0, 4.125)",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_literals(text, lits):\n    # Create a regex pattern with all literal strings\n    patterns = '|'.join(lits)\n    pattern = re.compile(patterns)\n\n    # Search for each literal in the text and check if there is a match\n    for lit in lits:\n        if pattern.search(text) != None:\n            return f'Matched!'\n\n    # If none of the literals matched, return \"Not Matched!\"\n    return 'Not Matched!'\n\n# Test cases\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['fox']))  # Should print: Matched!\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['horse']))  # Should print: Not Matched!\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['lazy']))  # Should print: Matched!",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_common_subsequence(text1, text2, n, m):\n    # Initialize a 2D array with dimensions n+1 x m+1 to store lengths of longest common subsequences.\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Iterate through each character in both strings.\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if text1[i - 1] == text2[j - 1]:\n                # If characters match, increment the value from diagonal cell and add 1 to get length of LCS.\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                # If characters don't match, take maximum between left cell and top-left cell values.\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                \n    # Return the bottom-right corner of the matrix which contains the length of the longest common subsequence.\n    return dp[n][m]\n\n# Test cases\nprint(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7))  # Expected output: 4\nprint(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6))   # Expected output: 3\nprint(longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4))       # Expected output: 2",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef prod_Square(num):\n    # Calculate the square root and round it up to get the maximum possible integer n such that n^2 <= num\n    max_n = int(math.sqrt(num)) + 1\n    \n    # Check if there exists an integer m such that m^2 * max_n^2 = num\n    for i in range(max_n - 1, 0, -1):  # Start from max_n-1 because we want m >= n\n        m_squared = i ** 2\n        if m_squared * max_n**2 == num:\n            return True\n    return False\n\n# Test cases\nprint(prod_Square(25))  # Expected output: False\nprint(prod_Square(30))  # Expected output: False\nprint(prod_Square(16))  # Expected output: True",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Missing_Positive(arr, n):\n    i = 0\n    while i < n:\n        j = arr[i] - 1\n        if 0 <= j < n and arr[i] != arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n        else:\n            i += 1\n    \n    for i in range(n):\n        if i + 1 != arr[i]:\n            return i + 1\n    \n    return n + 1\n\n# Test Cases\nprint(first_Missing_Positive([1,2,3,-1,5],5)) # Output: 4\nprint(first_Missing_Positive([0,-1,-2,1,5,8],6)) # Output: 2\nprint(first_Missing_Positive([0,1,2,5,-8],5)) # Output: 3",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    count = 0\n    for i in range(max(x1, x2), min(x1 + 1, x2 + 1)):\n        for j in range(max(y1, y2), min(y1 + 1, y2 + 1)):\n            if abs(i - x1) + abs(j - y1) <= max(abs(x1 - x2), abs(y1 - y2)) and abs(i - x1) + abs(j - y1) >= min(abs(x1 - x2), abs(y1 - y2)):\n                count += 1\n    return count",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_monthnumber(month_name):\n    # Check if the month has 30 days\n    if len(month_name) == 8 and month_name[5] != 'Y':\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_String(s):\n    # Check if there is at least one character in the string\n    if len(s) > 0:\n        # Iterate through each character in the string\n        for char in s:\n            # If we find a letter or a number, return True\n            if 'a' <= char <= 'z' or 'A' <= char <= 'Z' or '0' <= char <= '9':\n                return True\n    else:\n        # If no characters found, it must not contain letters or numbers\n        return False\n\n# Test cases\nprint(check_String('thishasboth29'))  # Expected output: True\nprint(check_String('python'))         # Expected output: False\nprint(check_String('string'))         # Expected output: False",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuple(input_tuple):\n    # Convert the tuple to a list to allow modification\n    temp_list = list(input_tuple)\n    unique_elements = []\n    \n    for element in temp_list:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    \n    # Convert the modified list back to a tuple and return it\n    return tuple(unique_elements)\n\n# Test cases\nprint(remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)))  # Expected output: (1, 2, 3, 5)\nprint(remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)))  # Expected output: (2, 3, 4, 5, 6, 7, 8)\nprint(remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)))  # Expected output: (11, 12, 13, 14)",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def octal_To_Decimal(octal_number):\n    # Convert the octal number to decimal using int() with base 8 and then divide by 16.\n    return int(octal_number, 8) // 16",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first(arr, key, target):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == key and arr[mid] < target:\n            return mid\n        elif arr[mid] >= key:\n            high = mid - 1\n        else:\n            low = mid + 1\n            \n    return -1\n\n# Example usage\nprint(first([1,2,2,2,3,2,2,4,2], 2, 9))  # Output: 1",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuples(lst, k):\n    return [t for t in lst if len(t) != k]",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_exponentio(tup1, tup2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the elements in tuple1 and apply exponentiation with each element from tuple2\n    for i in range(len(tup1)):\n        result.append(pow(tup1[i], tup2[i]))\n    \n    # Convert the list into a tuple before returning it\n    return tuple(result)\n\n# Test cases\nprint(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)))  # Output: (100000, 4096, 78125, 7776)\nprint(find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)))  # Output: (1771561, 78125, 1679616, 117649)\nprint(find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)))  # Output: (35831808, 1679616, 40353607, 2097152)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: f() missing 2 required positional arguments: 'b' and 'c'"
    ],
    "generated_code": "import math\nfrom scipy.optimize import fsolve\n\ndef f(a, b, c):\n    # Define the equation for finding the side length of the largest triangle inscribed in an ellipse.\n    return ((a**2 * c) + (b**2 * a) - (c**2)) / (2 * b)\n\n# Function to find the maximum value of x satisfying the given conditions\ndef largest_triangle(a, b):\n    # Initial guess for the solution\n    initial_guess = [a/2]\n    \n    # Use fsolve to find the roots of the equation\n    root = fsolve(f, initial_guess)\n    \n    # Return the first positive solution\n    if root[0] > 0:\n        return round(root[0], 3)\n    else:\n        return None\n\n# Test cases\nprint(largest_triangle(4,2))  # Expected output: 10.392\nprint(largest_triangle(5,7))  # Expected output: 4.639\nprint(largest_triangle(9,1))  # Expected output: 105.222",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def highest_Power_of_2(num):\n    # Initialize the variable to store the largest power of 2\n    result = 1\n    \n    # Loop until the current value is greater than the input number\n    while result <= num:\n        result *= 2\n    \n    # Return the largest power of 2 that is less than or equal to the input number\n    return result - 1",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def position_max(lst):\n    \"\"\"\n    Finds and returns a list of indices where the maximum value occurs in the input list.\n    \n    Parameters:\n    lst (list): A list of integers\n    \n    Returns:\n    list: A list of integers representing the indices of the maximum values in the input list\n    \"\"\"\n    max_index = lst.index(max(lst))\n    return [max_index] + [i for i, x in enumerate(lst) if x == max(x for y in lst for x in range(y))]",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(lst):\n    # Check if all elements in the list are the same\n    return len(set(lst)) == 1",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_even(s):\n    return ''.join(i for i in s if i.isalnum())",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hamming_Distance(x, y):\n    xor_result = x ^ y\n    distance = 0\n    while xor_result:\n        distance += xor_result & 1\n        xor_result >>= 1\n    return distance",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(s, ch):\n    # Initialize a counter variable to keep track of occurrences\n    count = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # If the current character matches the target character, increment the counter\n        if char == ch:\n            count += 1\n            \n    # Return the final count\n    return count",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def inversion_elements(tuple_list):\n    # Calculate inversions based on the original order of elements and their positions\n    inverted_tuple = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                # Calculate the difference between current indices and the larger value's position\n                diff = abs(j - i) * (tuple_list[i] - tuple_list[j])\n                inverted_tuple.append(diff)\n    return inverted_tuple",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tuples_list):\n    concatenated_tuples = []\n    for i in range(len(tuples_list)):\n        # Create a new string by concatenating each tuple's elements and adding spaces\n        new_string = ''.join(tuples_list[i]) + ' '\n        # Split the string into a list of strings separated by space\n        temp_list = new_string.split()\n        # Join the split parts back into a single string with no extra spaces\n        temp_str = ' '.join(temp_list)\n        concatenated_tuples.append(temp_str)\n    return concatenated_tuples\n\n# Test cases\nprint(concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")))\nprint(concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")))\nprint(concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")))",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    max_len = 0\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = dp[i-1][j-1] + 1\n                max_len = max(max_len, dp[i][j])\n                \n            elif s[i - 1] == s[j - 1]:\n                dp[i][j] = 2 + min(dp[i-1][j], dp[i][j-1])\n                max_len = max(max_len, dp[i][j])\n                \n            else:\n                dp[i][j] = 0\n                \n    return max_len\n\n# Test cases\nprint(find_longest_repeating_subseq(\"AABEBCDD\"))  # Expected output: 3\nprint(find_longest_repeating_subseq(\"aabb\"))      # Expected output: 2\nprint(find_longest_repeating_subseq(\"aab\"))       # Expected output: 1",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(decimal):\n    # Regex pattern to match a decimal number with exactly two digits after the decimal point\n    pattern = r'^-?\\d+(\\.\\d{2})?$'\n    \n    # Search for the pattern in the input string\n    if re.search(pattern, decimal):\n        # Check if there's an extra digit after the second decimal place\n        return '2' not in str(float(decimal))\n    else:\n        return False",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def heap_replace(heap, newItem):\n    # Add the new item at the end of the heap.\n    index = len(heap)\n    heap.append(newItem)\n\n    # Restore max-heap property starting from the leaf nodes up to the root node.\n    while index > 0:\n        parent_index = (index - 1) // 2\n        if heap[index] < heap[parent_index]:\n            # Swap the current node with its parent.\n            heap[index], heap[parent_index] = heap[parent_index], heap[index]\n            index = parent_index\n        else:\n            break\n    return heap\n\n# Test cases to verify the correctness of the solution.\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 21))\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 110))\nprint(heap_replace([25, 44, 68, 21, 39, 23, 89], 500))",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_allowed_specific_char(string):\n    # Define the allowed character set\n    allowed_chars = r'[a-zA-Z0-9]'\n    \n    # Use regex to search for the allowed characters in the input string\n    if re.search(allowed_chars, string):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: count_Num() missing 1 required positional argument: 'k'"
    ],
    "generated_code": "def count_Num(n, k):\n    # Calculate the binary representation of n and k\n    bin_n = format(n, '0{}b'.format(len(bin(k)[2:])))\n    bin_k = format(k, '0{}b'.format(len(bin(k)[2:])))\n    \n    # Count the number of positions where both binary representations have 1\n    count = sum(c == \"1\" for c in bin_n if c in bin_k)\n    \n    return count\n\n# Test cases\nprint(count_Num(2))   # Expected output: 1\nprint(count_Num(3))   # Expected output: 2\nprint(count_Num(1))   # Expected output: 1",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\n    \"\"\"\n    This function calculates the sum of the fourth powers of the first n natural numbers.\n    \n    Parameters:\n    n (int): The number of initial natural numbers to consider.\n    \n    Returns:\n    int: The sum of the fourth powers of the first n natural numbers.\n    \"\"\"\n    total_sum = sum(i**4 for i in range(1, n+1))\n    return total_sum",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_strings(tuple1, tuple2):\n    # Concatenate and join elements from both tuples with a space in between\n    result = [f\"{a} {b}\" for a, b in zip(tuple1, tuple2)]\n    return tuple(result)\n\n# Test cases\nprint(concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")))\nprint(concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")))\nprint(concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")))",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def degree_radian(radian):\n    # Convert radian to degree using the formula: degrees = radian * (180 / pi)\n    return radian * (180 / 3.141592653589793)\n\n# Test cases\nprint(degree_radian(90))   # Expected output: 5156.620156177409\nprint(degree_radian(60))   # Expected output: 3437.746770784939\nprint(degree_radian(120))  # Expected output: 6875.493541569878",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decode_list(encoded_list):\n    result = []\n    i = 0\n    while i < len(encoded_list):\n        if isinstance(encoded_list[i], list):\n            count = encoded_list[i][0]\n            value = encoded_list[i][1]\n            for _ in range(count):\n                result.append(value)\n        else:\n            result.append(encoded_list[i])\n        i += 1\n    return result",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_subset_list(subset_list, main_list):\n    # Iterate through each sublist in the subset list\n    for sub in subset_list:\n        # If there's no matching sublist in the main list\n        if not all(item in main_list for item in sub):\n            return False\n    return True",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef first_Repeated_Char(input_string):\n    char_set = set()\n    for char in input_string:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return '\\0'\n\n# Test cases\nprint(first_Repeated_Char(\"Google\"))  # Output: 'o'\nprint(first_Repeated_Char(\"data\"))   # Output: 'a'\nprint(first_Repeated_Char(\"python\")) # Output: '\\\\0' (assuming Python uses bytes-like objects)",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'min_x' is not defined",
      "Test 2: FAIL - name 'min_x' is not defined",
      "Test 3: FAIL - name 'min_x' is not defined"
    ],
    "generated_code": "def min_Operations(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    common_divisor = gcd(x, y)\n    if x == y and common_divisor != 1:\n        return -1  # Only one number can be made equal with no operations\n    elif x == y:\n        return 0  # Both numbers are already equal\n    else:\n        steps_to_common = abs(common_divisor - x) + abs(common_divisor - y)\n        additional_steps = min_x // common_divisor * (x // common_divisor) + min_y // common_divisor * (y // common_divisor)\n        total_steps = steps_to_common + additional_steps\n        return total_steps",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'Tuple' is not defined. Did you mean: 'tuple'?"
    ],
    "generated_code": "from typing import List\n\ndef extract_min_max(tup: Tuple[int], k: int) -> List[int]:\n    \"\"\"\n    Extracts and returns the minimum k elements from the given tuple.\n    \n    Parameters:\n    tup (Tuple[int]): The input tuple of integers.\n    k (int): The number of minimum elements to be extracted.\n    \n    Returns:\n    List[int]: A list containing the minimum k elements from the tuple.\n    \"\"\"\n    # Sort the tuple in ascending order\n    sorted_tup = sorted(tup)\n    # Return the first k elements\n    return sorted_tup[:k]\n\n# Test cases\nprint(extract_min_max((5, 20, 3, 7, 6, 8), 2))  # Expected output: [3, 5, 8, 20]\nprint(extract_min_max((4, 5, 6, 1, 2, 7), 3))   # Expected output: [1, 2, 4, 5, 6, 7]\nprint(extract_min_max((2, 3, 4, 8, 9, 11, 7), 4))  # Expected output: [2, 3, 4, 7, 8, 9, 11]",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 're' is not defined"
    ],
    "generated_code": "def replace_max_specialchar(text,max_occurrences):\n    # Replace max_occurrences characters in text from left to right using regex pattern and count parameter.\n    return re.sub(r'([,.])\\s*', r'\\1:',text)[max_occurrences:]\n\n# Test cases:\nprint(replace_max_specialchar('Python language, Programming language.',2)) # Expected output: 'Python:language: Programming language.'\nprint(replace_max_specialchar('a b c,d e f',3)) # Expected output: 'a:b:c:d e f'\nprint(replace_max_specialchar('ram reshma,ram rahim',1)) # Expected output: 'ram:reshma,ram rahim'",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_type(test_tuple):\n    # Check if there is more than one unique element in the tuple\n    unique_elements = len(set(test_tuple))\n    # If there's more than one unique element, return False as it indicates different types of values\n    return unique_elements <= 1",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef is_majority(arr: List[int], n: int, k: int) -> bool:\n    \"\"\"\n    Checks if 'k' is a majority element in the list 'arr'.\n    \n    A majority element is an element that appears more than n/2 times in the list.\n    \n    Parameters:\n    arr (List[int]): The input sorted list of integers.\n    n (int): Length of the input list.\n    k (int): The number we need to determine if it's a majority element.\n    \n    Returns:\n    bool: True if 'k' is a majority element, otherwise False.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        count = sum(1 for i in range(len(arr)) if arr[i] == k)\n        if count > n // 2:\n            return True\n        elif count <= n // 2:\n            right = mid\n    return False\n\n# Test Cases\nprint(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)) # Expected output: True\nprint(is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)) # Expected output: False\nprint(is_majority([1, 1, 1, 2, 2], 5, 1)) # Expected output: True",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    # Initialize the count of set bits to 0\n    count = 0\n    # Loop through each bit in the binary representation of n\n    while n:\n        # Increment the count if the least significant bit is 1\n        count += n & 1\n        # Right shift n by one position to process the next bit\n        n >>= 1\n    return count\n\n# Test cases\nprint(count_Set_Bits(2))  # Expected output: 1\nprint(count_Set_Bits(4))  # Expected output: 1\nprint(count_Set_Bits(6))  # Expected output: 2",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min(arr, start, end):\n    if start > end:\n        raise ValueError(\"Invalid input range\")\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        \n        # Check if the middle element is the smallest\n        if arr[mid] < arr[(mid + 1) % len(arr)]:\n            return arr[mid]\n        \n        # Decide whether we need to go to the left half or the right half\n        elif arr[start] <= arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n            \n    raise Exception(\"No valid element found\")  # This line should never be reached because it checks for invalid ranges",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(input_str):\n    # Extracting characters with odd indices from the input string\n    result = ''.join([char for i, char in enumerate(input_str) if i % 2 == 0])\n    return result",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(a, b, c):\n    # Return the smallest number among the three provided numbers\n    return min(a, b, c)",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(num, start, end):\n    \"\"\"\n    Check if all bits from 'start' index to 'end' index of the number 'num' are unset.\n    \n    Parameters:\n    num (int): The integer number to be checked.\n    start (int): The starting bit position for the range.\n    end (int): The ending bit position for the range.\n    \n    Returns:\n    bool: True if all bits are unset in the specified range, False otherwise.\n    \"\"\"\n    mask = ((1 << (end - start + 1)) - 1)\n    bitmask = ~mask\n    return (num & bitmask) == 0",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange_array(arr, n):\n    # Initialize two pointers\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        # If current element is negative, move it to the left side\n        if arr[left] < 0 and arr[right] > 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] >= 0:\n            # Move right pointer towards the center\n            right -= 1\n        else:\n            # Move left pointer towards the end\n            left += 1\n            \n    return arr",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(s, c):\n    return s.replace(' ', c)",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def max_sum(triangle, n):\n    # Add an extra row at the beginning and end of the triangle for optimization\n    triangle = [[0] * len(triangle[i]) for i in range(n + 2)]\n    for i in range(len(triangle)):\n        for j in range(len(triangle[i])):\n            triangle[n - 1][j] += triangle[i][j]\n            if j != 0:\n                triangle[n - 1][j - 1] += triangle[i][j]\n            if j < len(triangle[i]) - 1:\n                triangle[n - 1][j + 1] += triangle[i][j]\n\n    # The top element now contains the answer since we optimized the triangle\n    return triangle[n - 1][n - 1]",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from heapq import nlargest\n\ndef larg_nnum(data, n):\n    return nlargest(n, data)",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(side_length):\n    return side_length ** 3",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_bit_set_number(num):\n    # Initialize an empty list to store binary digits\n    bin_list = []\n    \n    # Iterate over each bit position from right to left\n    for i in range(7, -1, -1):  # Loop from 7 to 0 with a step of -1\n        if num & (1 << i):  # Check if the ith bit is set (i.e., even)\n            bin_list.append('1')  # Set the ith bit as 1\n        else:\n            bin_list.append('0')  # Set the ith bit as 0\n    \n    # Convert the list of bits back to an integer\n    result = int(\"\".join(bin_list), 2)\n    \n    return result",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'No_of_Triangle' is not defined",
      "Test 2: FAIL - name 'No_of_Triangle' is not defined",
      "Test 3: FAIL - name 'No_of_Triangle' is not defined"
    ],
    "generated_code": "def no_of_triangle(n, m):\n    # If n is less than m, it's not possible to form any equilateral triangles.\n    if n < m:\n        return -1\n    \n    # The formula for calculating the number of equilateral triangles in an equilateral triangle with side length n and at least m rows is ((n * (m + 1)) ** 2) / (4 * m)\n    result = ((n * (m + 1)) ** 2) // (4 * m)\n    \n    return result\n\n# Test cases\nprint(no_of_triangle(4, 2))  # Expected output: 7\nprint(no_of_triangle(4, 3))  # Expected output: 3\nprint(no_of_triangle(1, 3))  # Expected output: -1",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_occurences(tuples_list):\n    occurrence_dict = {}\n    \n    for record in tuples_list:\n        # Convert tuple into sorted list to simplify comparison and then back to tuple.\n        current_tuple = tuple(sorted(record))\n        \n        if current_tuple not in occurrence_dict:\n            occurrence_dict[current_tuple] = 0\n        \n        occurrence_dict[current_tuple] += 1\n    \n    return {key: value for key, value in occurrence_dict.items() if value > 1}\n\n# Test cases\nprint(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])) \nprint(check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]))  \nprint(check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]))",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def number_of_substrings(s):\n    n = len(s)\n    total_count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if s[i:j] != '':\n                total_count += 1\n    return total_count",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_total_number_of_sequences(n, m):\n    total = 0\n    for i in range(m + 1):\n        if i * 2 <= m:\n            total += pow(2, n - 1)\n    return int(total)\n\n# Example usage and test cases\nprint(get_total_number_of_sequences(10, 4))  # Output: 4\nprint(get_total_number_of_sequences(5, 2))   # Output: 6\nprint(get_total_number_of_sequences(16, 3))  # Output: 84",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'replace_list' is not defined",
      "Test 2: FAIL - name 'replace_list' is not defined",
      "Test 3: FAIL - name 'replace_list' is not defined"
    ],
    "generated_code": "def replace_last_element(input_list, new_elements):\n    input_list[-1:] = new_elements\n    return input_list",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: closing parenthesis ')' does not match opening parenthesis '['"
    ],
    "generated_code": "import numpy as np\n\ndef array_3d(size_x, size_y, size_z):\n    \"\"\"\n    Generates a 3D NumPy array where every element is '*'.\n    \n    Parameters:\n    - size_x: int, dimensions of the first slice.\n    - size_y: int, dimensions of the second slice.\n    - size_z: int, dimensions of the third slice.\n\n    Returns:\n    A 3D NumPy array with '*' elements throughout its entire volume.\n    \"\"\"\n\n    # Create an empty list for the resulting 3D array\n    result_array = []\n    \n    # Loop through each dimension and create slices filled with '*'\n    for _ in range(size_z):\n        current_slice = [['*' for _ in range(size_y)] for __ in range(size_x)]\n        result_array.append(current_slice)\n    \n    return np.array(result_array)\n\n# Check function with provided data points\nassert np.array_equal(array_3d(6, 4, 3), [[[('*', '*', '*', '*', '*', '*'), ...], ..., [[('*', '*', '*', '*', '*', '*')]]])\nassert np.array_equal(array_3d(5, 3, 4), [[[('*', '*', '*', '*', '*'), ..., [*]], ..., [...]])\nassert np.array_equal(array_3d(1, 2, 3), [[[('*')] * 2] * 3])\n\nprint(\"All tests passed successfully.\")",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(s):\n    return len(s)",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - cannot unpack non-iterable int object",
      "Test 2: FAIL - cannot unpack non-iterable int object",
      "Test 3: FAIL - cannot unpack non-iterable int object"
    ],
    "generated_code": "from collections import Counter\n\ndef sort_on_occurence(lst):\n    \"\"\"\n    Sorts a list of tuples based on the occurrence of the first element in each tuple.\n    \n    Parameters:\n    lst (list): A list of tuples where each tuple has two elements.\n    \n    Returns:\n    list: The sorted list of tuples.\n    \"\"\"\n    # Count occurrences of the first element in each tuple\n    counts = Counter(element for _, element in lst)\n    \n    # Create a dictionary mapping first element to its count and the second element\n    mapping = {first_element: (count, second_element) for first_element, (_, second_element) in counts.items()}\n    \n    # Sort the items by their count and then by the second element of the tuple\n    sorted_items = sorted(mapping.items(), key=lambda x: (-x[1][0], x[1][1]))\n    \n    # Flatten the list back into tuples\n    result = [tuple(item) for item in sorted_items]\n    \n    return result",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def next_Perfect_Square(n):\n    \"\"\"\n    Find the next perfect square greater than n.\n    \n    Args:\n    - n (int): The input integer\n    \n    Returns:\n    - int: The next perfect square greater than n\n    \"\"\"\n    root = int(n**0.5)\n    return root ** 2 + 1 if root * root < n else root ** 2\n\n# Test Cases\nassert next_Perfect_Square(35) == 36, \"Test case 1 failed\"\nassert next_Perfect_Square(6) == 9, \"Test case 2 failed\"\nassert next_Perfect_Square(9) == 16, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum(arr, n):\n    if not arr:\n        return 0\n    \n    dp_up = [arr[0]] * n\n    dp_down = [-arr[0]] * n\n    \n    dp_up[0] = arr[0]\n    dp_down[0] = -arr[0]\n    \n    for i in range(1, n):\n        dp_up[i] = max(dp_up[i-1] + arr[i], arr[i])\n        dp_down[i] = min(dp_down[i-1] - arr[i], -arr[i])\n    \n    result = float('-inf')\n    \n    for i in range(n):\n        result = max(result, dp_up[i] + dp_down[i])\n    \n    return result",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def babylonian_squareroot(n):\n    \"\"\"\n    Compute the square root of n using the Babylonian method.\n    \n    Parameters:\n    - n: The number to compute the square root of.\n    \n    Returns:\n    - The square root of n as a floating point number.\n    \"\"\"\n    guess = n / 2.0\n    while True:\n        better_guess = (guess + n/guess) / 2.0\n        if abs(guess - better_guess) < 1e-10:\n            return better_guess\n        guess = better_guess",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lps(s):\n    \"\"\"\n    Finds the length of the longest palindromic subsequence in a given string.\n    \n    Parameters:\n    s (str): The input string to search for the longest palindromic subsequence.\n    \n    Returns:\n    int: The length of the longest palindromic subsequence.\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for gap in range(1, n+1):\n        for i in range(n - gap + 1):\n            j = i + gap - 1\n            if gap == 1 or gap == 2 and s[i] == s[j]:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]\n\n# Test cases\nprint(lps(\"TENS FOR TENS\"))  # Expected output: 5\nprint(lps(\"CARDIO FOR CARDS\"))  # Expected output: 7\nprint(lps(\"PART OF THE JOURNEY IS PART\"))  # Expected output: 9",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef harmonic_sum(n):\n    result = 0\n    for i in range(1, n + 1):\n        result += 1 / i\n    return round(result, 10)",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef intersection_array(arr1: List[int], arr2: List[int]) -> List[int]:\n    return list(filter(lambda x: x in arr2, arr1))",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def insert_element(lst, elem):\n    new_list = [elem] + lst[:-1]\n    return new_list",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def convert(complex_num):\n    \"\"\"\n    Convert a complex number to its polar representation.\n    \n    Args:\n        complex_num (complex): The complex number in rectangular form\n    \n    Returns:\n        tuple: A tuple containing the magnitude and angle of the complex number\n    \"\"\"\n    import cmath\n    return abs(complex_num), cmath.phase(complex_num)\n\n# Test cases\nprint(convert(1))   # Expected output: (1.0, 0.0)\nprint(convert(4))   # Expected output: (4.0, 0.0)\nprint(convert(5))   # Expected output: (5.0, 0.0)",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(lst):\n    # Initialize counter for integer elements\n    int_count = 0\n    \n    # Iterate through each element in the list\n    for elem in lst:\n        # Check if the element is an integer using isinstance and convert to float for type conversion check\n        if isinstance(elem, int) or (isinstance(elem, float) and elem.is_integer()):\n            int_count += 1\n            \n    return int_count",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def words_ae(text):\n    # Split the input text into individual words\n    words = text.split()\n    result = []\n    \n    for word in words:\n        # Check if the word starts with 'a' or 'e'\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n            \n    return result\n\n# Test cases\nprint(words_ae(\"python programe\")) # Should print ['ame']\nprint(words_ae(\"python programe language\")) # Should print ['ame', 'anguage']\nprint(words_ae(\"statement\")) # Should print ['assert', 'atement']",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import product\n\ndef combinations_colors(colors, n):\n    return list(product(colors, repeat=n))",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Primes_nums(n):\n    \"\"\"\n    Counts and returns the number of prime numbers less than n.\n    \n    Args:\n    n : int - A non-negative integer\n    \n    Returns:\n    int - The count of prime numbers less than n.\n    \"\"\"\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    p = 2\n    while p*p < n:\n        if primes[p]:\n            for i in range(p*p, n, p):\n                primes[i] = False\n        p += 1\n    return sum(primes)",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(a, b):\n    return (b, a)\n\n# Test cases\nprint(swap_numbers(10, 20))  # Expected output: (20, 10)\nprint(swap_numbers(15, 17))  # Expected output: (17, 15)\nprint(swap_numbers(100, 200))  # Expected output: (200, 100)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_odd(lst):\n    return len(list(filter(lambda x: x % 2 != 0, lst)))",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximize_elements(tuples1, tuples2):\n    # Combine both tuples into one and sort based on the first element of each tuple in descending order.\n    combined = sorted(tuples1 + tuples2, key=lambda x: -x[0])\n    \n    # Separate the combined list back into two parts with the same length as the original tuples.\n    result = [combined[i:i+2] for i in range(0, len(combined), 2)]\n    \n    return result",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'newman_prime' is not defined",
      "Test 2: FAIL - name 'newman_prime' is not defined",
      "Test 3: FAIL - name 'newman_prime' is not defined"
    ],
    "generated_code": "import numpy as np\n\ndef newman_shanks_williams(n):\n    \"\"\"\n    Finds the nth Newman-Shanks-Williams prime number.\n    \n    Args:\n        n (int): The position in the sequence of Newman-Shanks-Williams primes\n    \n    Returns:\n        int: The nth Newman-Shanks-Williams prime number\n    \"\"\"\n    x = 1\n    y = 1\n    for _ in range(1, n + 1):\n        x, y = x - y, x + y\n    return x\n\n# Test cases\nprint(newman_shanks_williams(3))  # Expected output: 7\nprint(newman_shanks_williams(4))  # Expected output: 17\nprint(newman_shanks_williams(5))  # Expected output: 41",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def division_elements(tuple_a, tuple_b):\n    # Ensure both tuples have at least one element before proceeding\n    if len(tuple_a) == 0 or len(tuple_b) == 0:\n        return []\n\n    result = []\n    for x, y in zip(tuple_a, tuple_b):\n        # Check if elements can be divided safely; ensure y is not zero\n        if y != 0:\n            result.append(x / y)\n\n    return result",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_two_parts(lst, n):\n    return (lst[:n], lst[n:])",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1, dict2):\n    return {**dict1, **dict2}\n\n# Test cases\nprint(merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200})) # {'x': 300, 'y': 200, 'a': 100, 'b': 200}\nprint(merge_dict({'a':900,'b':900,'d':900}, {'a':900,'b':900,'d':900})) # {'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nprint(merge_dict({'a':10,'b':20}, {'x':30,'y':40})) # {'x':30,'y':40,'a':10,'b':20}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dog_age(years):\n    # Calculate dog's age based on years input\n    human_years = years * 7\n    return human_years + 10",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Args:\n    - side_length: The length of a side of the cube.\n    \n    Returns:\n    - The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2\n\n# Check function with provided data points\nprint(lateralsurface_cube(5)) # Expected output: 100\nprint(lateralsurface_cube(9)) # Expected output: 324\nprint(lateralsurface_cube(10)) # Expected output: 400",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    total = 0\n    for i in range(1, 2*n, 2):  # Loop through first n odd natural numbers\n        total += i**2  # Calculate square and add it to total\n    return total",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_star_num(n):\n    \"\"\"\n    This function calculates the nth star number.\n    \n    Args:\n        n (int): The position of the star number in the sequence.\n        \n    Returns:\n        int: The nth star number.\n    \"\"\"\n    return n * (3*n - 1) + 1",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char):\n    return ord(char)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_even_and_even_index(arr, n):\n    # Initialize total sum to 0\n    total_sum = 0\n    \n    # Iterate through the array from index 0 to n-1 with step 2\n    for i in range(0, n, 2):\n        # Check if the element is even\n        if arr[i] % 2 == 0:\n            # Add it to the total sum\n            total_sum += arr[i]\n    \n    return total_sum\n\n# Example test cases\nprint(sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6))  # Expected output: 30\nprint(sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10))  # Expected output: 26\nprint(sum_even_and_even_index([5, 6, 12, 1], 4))  # Expected output: 12",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_Power_Sum(n):\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate over the first n even natural numbers\n    for i in range(1, n + 1):\n        # Calculate the fifth power of the current number and add it to the sum\n        total_sum += (i * (i + 1)) ** 4\n        \n    return total_sum",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rear_extract(records):\n    # Extract the last element from each tuple in the list\n    return [item[-1] for item in records]\n\n# Test cases\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19], \"Test case 1 failed\"\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45], \"Test case 2 failed\"\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tuple_a, tuple_b):\n    result = []\n    for i in range(len(tuple_a)):\n        result.append(tuple_a[i] - tuple_b[i])\n    return tuple(result)\n\n# Test cases\nprint(substract_elements((10, 4, 5), (2, 5, 18)))  # Expected output: (8, -1, -13)\nprint(substract_elements((11, 2, 3), (24, 45 ,16)))  # Expected output: (-13, -43, -13)\nprint(substract_elements((7, 18, 9), (10, 11, 12)))  # Expected output: (-3, 7, -3)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def even_binomial_Coeff_Sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through all odd indices up to n\n    for i in range(1, n+1, 2):\n        # Calculate the binomial coefficient and add it to the sum if the index is even\n        total_sum += binom(i)\n    \n    return total_sum\n\n# Helper function to calculate binomial coefficient using factorial method\nfrom math import factorial\n\ndef binom(n):\n    numerator = factorial(n)\n    denominator = factorial(n // 2) * factorial(n - n // 2)\n    return numerator // denominator\n\n# Test the function with provided data points\nassert even_binomial_Coeff_Sum(4) == 8, \"Test case 1 failed\"\nassert even_binomial_Coeff_Sum(6) == 32, \"Test case 2 failed\"\nassert even_binomial_Coeff_Sum(2) == 2, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Position(arr, n, m):\n    # Initialize positions with -1 for all elements except the first one\n    positions = [-1] * len(arr)\n    positions[0] = 0\n    \n    # Iterate through the array starting from index 1\n    for i in range(1, n + 1):\n        if arr[i-1] == m:\n            # Update the position count and store the current index\n            positions[m] += 1\n            positions[arr[i-1]] = i\n            \n    # Return the position of the second occurrence of m\n    return positions[m]",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder using the formula:\n    Volume = π * radius^2 * height\n    \n    Args:\n    - radius: The radius of the base of the cylinder.\n    - height: The height of the cylinder.\n    \n    Returns:\n    The volume of the cylinder as a float.\n    \"\"\"\n    return math.pi * radius ** 2 * height",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_filter(dictionary, value):\n    return {key:value for key, val in dictionary.items() if val == value}\n\n# Test cases\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170))\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180))\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190))",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_first_elements(tuple_like):\n    \"\"\"\n    Counts and returns the number of elements preceding the nested tuples.\n    \n    Parameters:\n    - tuple_like: A tuple which can contain integers, floats, or other iterables like lists, sets, etc.\n    \n    Returns:\n    - An integer representing the number of elements that precede the nested tuples within the input tuple-like object.\n    \"\"\"\n    counter = 0\n    for item in tuple_like:\n        if isinstance(item, tuple):\n            break\n        else:\n            counter += 1\n    return counter",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_num_decagonal(nth_number):\n    # The formula to calculate the nth decagonal number is 4*n^2 - 3*n.\n    return 4 * nth_number ** 2 - 3 * nth_number\n\n# Test cases to verify the correctness of the function\nassert is_num_decagonal(3) == 27, \"Test case 1 failed\"\nassert is_num_decagonal(7) == 175, \"Test case 2 failed\"\nassert is_num_decagonal(10) == 370, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequential_search(arr, target):\n    \"\"\"\n    This function performs a sequential search on the input array 'arr' for the 'target'.\n    It returns a tuple containing a boolean indicating whether the target was found and its index.\n    \n    Example usage:\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19], 31)\n    (True, 3)\n    >>> sequential_search([12, 32, 45, 62, 35, 47, 44, 61], 61)\n    (True, 7)\n    >>> sequential_search([9, 10, 17, 19, 22, 39, 48, 56], 48)\n    (True, 6)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True, i\n    return False, -1\n\n# Check function with provided data points\nassert sequential_search([11,23,58,31,56,77,43,12,65,19], 31) == (True, 3), \"Test case 1 failed\"\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61], 61) == (True, 7), \"Test case 2 failed\"\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56], 48) == (True, 6), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_unique(lst):\n    # Convert the list into a set and compare its length with the original list's length\n    return len(lst) == len(set(lst))",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef sub_list(list1: List[int], list2: List[int]) -> List[int]:\n    return [x - y for x, y in zip(list1, list2)]",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)):\n        if digits[i] > n // 10:\n            return False\n    return True",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(lst, target):\n    return all(item == target for item in lst)",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def text_match_two_three(text):\n    if text.startswith('a') and len(re.findall(r'ab{2,3}', text)) > 0:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: max() arg is an empty sequence"
    ],
    "generated_code": "from itertools import repeat, accumulate\n\ndef max_sub_array_sum_repeated(arr, n, k):\n    # Concatenate arr with itself 'n' * 'k' times and calculate prefix sums.\n    all_arr = list(accumulate(repeat(sum(arr), k)))\n    # Get the maximum subarray sum of length 'n'.\n    res = max(all_arr[i:i+n] for i in range(len(all_arr)-n))\n    return res[-1]\n\n# Test cases\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))  # Expected output: 30\nprint(max_sub_array_sum_repeated([-1, 10, 20], 3, 2))       # Expected output: 59\nprint(max_sub_array_sum_repeated([-1, -2, -3], 3, 3))       # Expected output: -1",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Loop from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Add the square of 2*i to the total sum\n        total_sum += (2 * i) ** 2\n    \n    return total_sum",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from math import gcd\n\ndef modular_inverse(arr, mod, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n    \n    inv_map = {}\n    \n    for num in arr:\n        if gcd(num, mod) == 1: # Check if num is coprime with mod\n            gcd_val, _, _ = extended_gcd(mod, num)\n            if gcd_val == 1: # If they're coprime\n                inv_map[num] = mod // num\n                \n    result_count = sum(1 for val in inv_map.values() if val == mod)\n    return result_count\n\n# Test cases\nprint(modular_inverse([ 1, 6, 4, 5 ], 4, 7)) # Expected output: 2\nprint(modular_inverse([1, 3, 8, 12, 12], 5, 13)) # Expected output: 3\nprint(modular_inverse([2, 3, 4, 5], 4, 6)) # Expected output: 1",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_Days(year):\n    # Calculate the number of odd days in the given year\n    odd_days = year % 400 - year // 4 + year // 100\n    if odd_days > 0:\n        return odd_days\n    else:\n        return 0\n\n# Test cases\nprint(odd_Days(100))  # Expected output: 5\nprint(odd_Days(50))   # Expected output: 6\nprint(odd_Days(75))   # Expected output: 2",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length(lists):\n    if not lists:\n        return (0, [])\n    max_len = -float('inf')\n    result = []\n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = [lst]\n        elif len(lst) == max_len:\n            result.append(lst)\n    return (max_len, result)\n\n# Test cases\nprint(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: (3, [13, 15, 17])\nprint(max_length([[1], [5, 7], [10, 12, 14,15]]))               # Expected output: (4, [10, 12, 14,15])\nprint(max_length([[5], [15,20,25]]))                           # Expected output: (3, [15,20,25])",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_no_of_ways(n, k):\n    # Initialize dp array where dp[i][j] represents the number of ways to paint i posts with j consecutive identical colors\n    dp = [[0 for _ in range(k)] for __ in range(n+1)]\n    \n    # Base case initialization\n    dp[1][0] = 1  # One post has one way to be painted\n    \n    # Fill the dp table\n    for i in range(2, n+1):  # Iterate from 2 to n\n        for j in range(k):  # Iterate over each color\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            dp[i][j] += dp[i-1][j]\n    \n    # The answer is the sum of all valid configurations up to n posts\n    result = sum(dp[n])\n    \n    return result\n\n# Test cases\nprint(count_no_of_ways(2, 4))  # Expected output: 16\nprint(count_no_of_ways(3, 2))  # Expected output: 6\nprint(count_no_of_ways(4, 4))  # Expected output: 228",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(a, b):\n    return a // b",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef otherside_rightangle(a, c):\n    b = math.sqrt(c**2 - a**2)\n    return round(b, 6)\n\n# Test cases\nprint(otherside_rightangle(7, 8)) # Expected output: 10.630146\nprint(otherside_rightangle(3, 4)) # Expected output: 5.000000\nprint(otherside_rightangle(7, 15)) # Expected output: 16.552945",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'Python'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'Python'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'Python'"
    ],
    "generated_code": "def max_val(lst):\n    return max(map(lambda x: int(x) if isinstance(x, str) else x, lst))",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_div(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_list(nested_list):\n    result = []\n    for element in nested_list:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - unhashable type: 'list'",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def intersection_nested_lists(list1, list2):\n    result = []\n    for sublist in list1:\n        if isinstance(sublist, list) and set(sublist).issubset(set(list2)):\n            result.append(sublist)\n    return result",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_aggregate(lst):\n    return max(lst, key=lambda x: x[1])",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    This function calculates the number of unique binary sequences of length 2n \n    where the sum of the first n bits equals the sum of the last n bits.\n    \n    Args:\n    - n: an integer representing half the length of the binary sequence.\n    \n    Returns:\n    - A float representing the count of valid binary sequences.\n    \"\"\"\n    # The total number of binary sequences of length 2n\n    total_sequences = 2**(2*n)\n    \n    # Calculate the number of invalid sequences which have unequal sums at beginning and end\n    invalid_sequences = 0\n    \n    # Iterate through possible values for the first n bits and check if their sum matches the sum of the last n bits\n    for i in range(2**n):\n        bit_sum_1 = bin(i).count('1')\n        bit_sum_2 = 2 * n - bit_sum_1\n        \n        # If both sums are equal, it's not considered an invalid case\n        if bit_sum_1 == bit_sum_2:\n            continue\n            \n        # Otherwise, increment the count of invalid sequences\n        invalid_sequences += 1\n    \n    # Calculate the number of valid sequences using combinations formula C(2^n, n)/2\n    valid_sequences = total_sequences // 2 - invalid_sequences\n    \n    return valid_sequences / total_sequences\n\n# Check function with provided data points\nprint(count_binary_seq(1))  # Expected output: 2.0\nprint(count_binary_seq(2))  # Expected output: 6.0\nprint(count_binary_seq(3))  # Expected output: 20.0",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dict_depth(x):\n    # Calculate the maximum depth from nested dictionaries\n    max_depth = 0\n    for key in x:\n        if isinstance(x[key], dict):\n            max_depth = max(max_depth, 1 + dict_depth(x[key]))\n    return max_depth",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def set_bit_number(n):\n    \"\"\"\n    This function takes an integer n and returns the largest power of two that divides n.\n    \n    :param n: Integer\n    :return: The largest power of two that divides n as an integer.\n    \"\"\"\n    # Find the highest bit position where there's a '1'\n    highest_set_bit_position = 0\n    while (n & (n - 1)) != 0:\n        highest_set_bit_position += 1\n        n >>= 1\n    \n    # Return the highest set bit number\n    return pow(2, highest_set_bit_position)\n\n# Check function with provided data points\nassert set_bit_number(6) == 4\nassert set_bit_number(10) == 8\nassert set_bit_number(18) == 16\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - solve() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - solve() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - solve() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def solve(nums):\n    \"\"\"\n    Check if the number of inversions in the first type and second type of pairs are equal.\n    \n    An inversion is defined as a pair of indices i and j such that nums[i] > nums[j]\n    and i < j. For an \"a-b\" type of inversion, it's considered when nums[a] > nums[b].\n    For an \"a+b\" type of inversion, it's considered when nums[a] + nums[b] > target.\n    \n    Parameters:\n    - nums (list): A list of integers\n    \n    Returns:\n    - bool: True if the counts are equal, False otherwise\n    \"\"\"\n    # Counting inversions for \"a-b\" type\n    count_ab = sum(i < j for i, j in itertools.combinations(range(len(nums)), 2))\n    \n    # Target value for \"a+b\" type inversion based on given example\n    target = 3 * len(nums)\n    \n    # Counting inversions for \"a+b\" type with target calculated above\n    count_ab_plus_b = sum((i // 2) * ((target - (i % 2)) / 2) for i in range(len(nums)))\n    \n    return count_ab == count_ab_plus_b",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_Element() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - find_Element() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - find_Element() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def find_Element(arr, rotation_indices, index):\n    n = len(arr)\n    for i in range(n):\n        if arr[i:i+len(rotation_indices)] == rotation_indices:\n            start_index = i % n\n            end_index = (start_index + n - len(rotation_indices)) % n\n            count = min(end_index, len(arr) - end_index)\n            return arr[start_index:start_index+count]\n    return None",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(words_list):\n    # Find all words in the list that start with 'p'\n    p_words = [word for word in words_list if word.startswith('p')]\n    \n    # Return the first pair of words that start with 'p'\n    return p_words[:2]\n\n# Test cases\nprint(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))  # Expected output: ('Python', 'PHP')\nprint(start_withp([\"Python Programming\",\"Java Programming\"]))  # Expected output: ('Python', 'Programming')\nprint(start_withp([\"Pqrst Pqr\",\"qrstuv\"]))  # Expected output: ('Pqrst', 'Pqr')",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum_increasing_subseq(arr, n, k, m):\n    dp = [[-float('inf')] * (m + 1) for _ in range(n)]\n    \n    # Calculate the maximum sum of increasing subsequence up to index i, excluding j-th element\n    for i in range(1, n):\n        for j in range(i+1):\n            if arr[j] < arr[i]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j+1] + arr[i])\n    \n    # Calculate the maximum sum of increasing subsequence ending with the k-th element\n    max_val = -float('inf')\n    for i in range(k):\n        max_val = max(max_val, dp[k-1][i])\n    \n    return max_val\n\n# Test cases\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6))  # Expected output: 11\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5))   # Expected output: 7\nprint(max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4))  # Expected output: 71",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 2: FAIL - can only concatenate tuple (not \"list\") to tuple",
      "Test 3: FAIL - can only concatenate tuple (not \"list\") to tuple"
    ],
    "generated_code": "def colon_tuplex(tup, n, x):\n    return tup[:n] + [x] + tup[n+1:]",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def large_product(nums1, nums2, num_of_elements):\n    # Multiply each element in nums1 with every other element in nums2 and store them in a list\n    product_list = [x * y for x in nums1 for y in nums2]\n\n    # Sort the list in descending order\n    product_list.sort(reverse=True)\n\n    # Return the top 'num_of_elements' products if available else return all elements sorted\n    return product_list[:num_of_elements] if len(product_list) >= num_of_elements else product_list",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(a, b):\n    # Compare and return the greater number\n    if a >= b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_left_most_unset_bit(n):\n    # Find the first unset bit from the right in the binary representation of n.\n    mask = ~(n & -n)\n    \n    # Add the result of mask to n to set the leftmost unset bit to 1.\n    result = n | mask\n    \n    return result",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone using its radius and height.\n    \n    Parameters:\n    - radius (float): The radius of the base of the cone.\n    - height (float): The height from the base to the apex of the cone.\n    \n    Returns:\n    - float: The volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * radius**2 * height\n\n# Test cases to verify the correctness of the function\nassert abs(volume_cone(5,12)-314.15926535897927) < 1e-9\nassert abs(volume_cone(10,15)-1570.7963267948965) < 1e-9\nassert abs(volume_cone(19,17)-6426.651371693521) < 1e-9\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list containing only the positive numbers from the original list.\n    \n    Example usage:\n    >>> pos_nos([-1,-2,1,2])\n    [1, 2]\n    >>> pos_nos([3,4,-5])\n    [3, 4]\n    >>> pos_nos([-2,-3,1])\n    [1]\n    \"\"\"\n    return [x for x in lst if x > 0]\n\n# Test cases\nprint(pos_nos([-1,-2,1,2]))  # Expected output: [1, 2]\nprint(pos_nos([3,4,-5]))     # Expected output: [3, 4]\nprint(pos_nos([-2,-3,1]))    # Expected output: [1]",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sum_rectangular_grid(matrix, n):\n    # Initialize variables to store the maximum sums for each row and previous rows\n    max_sums = [float('-inf')] * n\n    current_max = float('-inf')\n    \n    for i in range(n):  # Iterate through each column index\n        current_max = max(current_max, matrix[0][i])  # Update current_max with value from first row\n        \n        # If it's not the last column, calculate new sums using Kadane's algorithm\n        if i < n - 1:\n            max_sums[i + 1] = max(max_sums[i], current_max + matrix[0][i])\n        \n        # Update max_sums for subsequent columns based on current_max\n        for j in range(i + 2, n + 1):\n            max_sums[j] = max(max_sums[j - 1], max_sums[j - 2] + matrix[j-1][i])\n            \n    # Return the maximum sum across all possible subarrays starting at any point\n    return max(max_sums)\n\n# Example usage\nprint(max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3))  # Output: 7\nprint(max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5))  # Output: 81",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max_Len_Even(s):\n    max_len = -1\n    for i in range(len(s)):\n        if s[i] == 'e' and len(s) - i > max_len:\n            max_len = len(s) - i\n    return s[max_len:]",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_last_occurrence(arr, target):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        \n        if arr[mid] == target and (mid == len(arr) - 1 or arr[mid + 1] != target):\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1\n\n# Test cases\nprint(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)) # Output: 3\nprint(find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)) # Output: 9\nprint(find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)) # Output: 6",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import deque\n\ndef modified_encode(arr):\n    output = []\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            count += 1\n        else:\n            if count > 1:\n                output.append([count, arr[i - 1]])\n            else:\n                output.append(arr[i - 1])\n            count = 1\n    # Append the last element\n    if count > 1:\n        output.append([count, arr[-1]])\n    else:\n        output.append(arr[-1])\n    \n    return output\n\n# Test Cases\nprint(modified_encode([1,1,2,3,4,4,5,1]))  # Expected output: [[2, 1], 2, 3, [2, 4], 5, 1]\nprint(modified_encode('automatically'))     # Expected output: ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nprint(modified_encode('python'))           # Expected output: ['p', 'y', 't', 'h', 'o', 'n']",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_volume(sides_sum):\n    # Calculate the maximum possible side length for a cuboid with a given sum of sides.\n    if sides_sum <= 6:\n        return 0  # A cuboid can't have a negative volume and a positive side length when the sum is less than or equal to 6.\n    elif sides_sum == 7:\n        return 3  # The side lengths could be 3, 3, and 1, giving a volume of 9.\n    else:\n        # For larger sums, calculate possible combinations and determine the maximum volume.\n        total = sides_sum // 3 * (sides_sum % 3)\n        result = 0\n        # Try different combinations where one dimension is greater than half of the sum.\n        while total >= sides_sum // 3:\n            if sides_sum - 6 > sides_sum // 3:\n                temp = sides_sum - 6 + 1\n                result += temp * ((temp + 1) // 2) * (sides_sum // 3)\n            else:\n                break\n            total -= 3\n        return result\n\n# Test cases\nprint(max_volume(8))  # Expected output: 18\nprint(max_volume(4))  # Expected output: 2\nprint(max_volume(1))  # Expected output: 0",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_long_word(text):\n    # Define the regex pattern for words of exactly 5 characters\n    pattern = r'\\b\\w{5}\\b'\n    # Use re.findall() to find all matches of the pattern in the text\n    result = re.findall(pattern, text)\n    return result\n\n# Test cases\nprint(find_long_word('Please move back to strem'))  # Should return ['strem']\nprint(find_long_word('4K Ultra HD streaming player'))  # Should return ['Ultra']\nprint(find_long_word('Streaming Media Player'))  # Should return ['Media']",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sum_difference(n):\n    \"\"\"\n    Calculate the difference between the square of the sum and the sum of the squares of the first n natural numbers.\n    \n    Args:\n    - n: An integer representing the upper limit of the range of natural numbers.\n    \n    Returns:\n    The difference as an integer.\n    \"\"\"\n    # Calculating the sum of squares using the formula for sum of squares of first N natural numbers: (n * (n + 1) * (2 * n + 1)) / 6\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Calculating the square of sum using the formula for the square of the sum of first N natural numbers: ((n * (n + 1)) / 2) ** 2\n    square_of_sum = math.pow((n * (n + 1)) // 2, 2)\n    \n    return int(square_of_sum - sum_of_squares)\n\n# Check function with provided data points\nassert sum_difference(12) == 5434\nassert sum_difference(20) == 41230\nassert sum_difference(54) == 2151270\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_demlo(num):\n    result = ''\n    i = len(num) - 1\n    while i >= 0:\n        if num[i] == '0':\n            result += str(i)\n        else:\n            result += num[i]\n        i -= 1\n    return ''.join(result.split())",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_min(lst):\n    \"\"\"\n    Finds and returns the indices of all occurrences of the minimum value in the list.\n    \n    Parameters:\n    lst (list): A list of integers\n    \n    Returns:\n    list: A list containing the indices where the minimum value occurs\n    \"\"\"\n    min_value = min(lst)\n    return [index for index, value in enumerate(lst) if value == min_value]\n\n# Test cases\nprint(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])) # Expected output: [3, 11]\nprint(position_min([1,2,2,2,4,4,4,5,5,5,5])) # Expected output: [0]\nprint(position_min([2,1,5,6,8,3,4,9,10,11,8,12])) # Expected output: [1]",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange(arr, n):\n    # Initialize variables for storing first element of alternate pattern and its index\n    temp = arr[0]\n    j = 1\n    \n    # Traverse through all elements one by one\n    for i in range(1, n):\n        # Check if current element is less than temp\n        if arr[i] < temp:\n            # Move temp to next position\n            temp = arr[i]\n        \n        # Place current element at correct position\n        arr[j] = arr[i]\n        j += 1\n    \n    # Move temp back to start of the list\n    arr[j - 1] = temp\n    return arr",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_alternates(input_list):\n    if not input_list:\n        return ()\n    \n    total_sum = []\n    for i in range(0, len(input_list), 2):\n        total_sum.append(sum(input_list[i:i+2]))\n        \n    return tuple(total_sum)\n\n# Test cases\nprint(sum_of_alternates((5, 6, 3, 6, 10, 34)))  # Output: (46, 18)\nprint(sum_of_alternates((1, 2, 3, 4, 5)))       # Output: (6, 9)\nprint(sum_of_alternates((6, 7, 8, 9, 4, 5)))    # Output: (21, 18)",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Min_Squares(n):\n    \"\"\"\n    This function calculates the minimum number of squares needed to sum up to n.\n    \n    Parameters:\n    - n (int): The target number.\n    \n    Returns:\n    - int: The minimum number of squares required.\n    \"\"\"\n    if n <= 3:\n        return n\n    \n    min_squares = float('inf')\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            current_squares = n // i + 1\n            if current_squares < min_squares:\n                min_squares = current_squares\n    \n    return min_squares",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef most_occurrences(strings_list):\n    # Count occurrences of each word in the list\n    words_count = Counter(strings_list)\n    \n    # Find the word with maximum count and return it\n    max_word = max(words_count, key=words_count.get)\n    \n    return max_word",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    \"\"\"\n    This function takes three integers as input and returns True if they represent an isosceles triangle,\n    otherwise it returns False.\n    \n    Example usage:\n    >>> check_isosceles(6, 8, 12)\n    False\n    >>> check_isosceles(6, 6, 12)\n    True\n    >>> check_isosceles(6, 16, 20)\n    False\n    \"\"\"\n    return a == b or b == c or a == c",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(lst, n, k):\n    return lst[k:] + lst[:k]\n\n# Test cases\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)) # Output: [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)) # Output: [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)) # Output: [6, 7, 8, 9, 10, 1, 2]",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(nums):\n    # Initialize counter for negative numbers\n    count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the current number is less than zero\n        if num < 0:\n            # Increment the counter if it is negative\n            count += 1\n            \n    # Return the total count of negative numbers\n    return count\n\n# Test case 1\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\n# Test case 2\nassert neg_count([1,2,3]) == 0\n\n# Test case 3\nassert neg_count([1,2,-3,-10,20]) == 2",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_char(text):\n    # Regular expression pattern for matching three to five character long words\n    pattern = r'\\b\\w{3,5}\\b'\n    \n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    return matches",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_unset_bits(number):\n    # Counting the number of bits set to 1 in the binary representation of the number.\n    return bin(number).count('1')\n\n# Test cases\nprint(count_unset_bits(2))  # Expected output: 1\nprint(count_unset_bits(4))  # Expected output: 2\nprint(count_unset_bits(6))  # Expected output: 1",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(input_string):\n    from collections import Counter\n    return dict(Counter(input_string))",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def sort_by_second_element(lst):\n    # Using sorted() with key parameter specifying lambda function to extract the second element of each sublist\n    return sorted(lst, key=lambda x: x[1])\n\n# Test cases\nprint(sort_by_second_element([['a', 10], ['b', 5], ['c', 20], ['d', 15]]))  # Output: [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nprint(sort_by_second_element([['452', 10], ['256', 5], ['100', 20], ['135', 15]]))  # Output: [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nprint(sort_by_second_element([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]))  # Output: [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Validity(side1, side2, side3):\n    # Check if all sides are positive and less than or equal to 2000\n    if all(x > 0 and x <= 2000 for x in [side1, side2, side3]):\n        # Sort the sides so that we can use the longest as hypotenuse in an approximation of Pythagorean theorem\n        sides = sorted([side1, side2, side3])\n        # Check if the sum of two shorter sides is greater than the longest side\n        if sides[0] + sides[1] > sides[2]:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid input: All sides must be greater than 0 and less than or equal to 2000.\"",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ap_sum(a1, d, n):\n    # Calculate the last term of the arithmetic progression\n    an = a1 + (n - 1) * d\n    \n    # Sum of arithmetic progression formula\n    sum_ap = n / 2 * (a1 + an)\n    \n    return sum_ap",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum(month_name):\n    # List of months with 28 days\n    months_with_28_days = [\"April\", \"June\", \"September\", \"November\"]\n    \n    return month_name in months_with_28_days",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match_word(text):\n    # Check if the entire string ends with a word and is not empty.\n    return bool(re.match(r'.*[^\\w]*\\w+$', text))",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 2: FAIL - name 'count_Substring_With_Equal_Ends' is not defined",
      "Test 3: FAIL - name 'count_Substring_With_Equal_Ends' is not defined"
    ],
    "generated_code": "def count_substring_equal_ends(s):\n    result = 0\n    for i in range(len(s)):\n        # Check if there's at least one character before and after the current character\n        if i > 0 and i < len(s) - 1:\n            result += min(i, len(s) - 1 - i)\n    \n    return result",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Divisor(a, b):\n    max_divisor = -1\n    for i in range(a, b + 1):\n        divisors = set()\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                divisors.add(j)\n                divisors.add(i // j)\n        max_divisor = max(max_divisor, len(divisors))\n    return max_divisor\n\n# Test cases\nprint(find_Divisor(2,2)) # Output: 2\nprint(find_Divisor(2,5)) # Output: 2\nprint(find_Divisor(5,10)) # Output: 2",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_to_tuple(s):\n    return tuple(sorted(set(s)))",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'"
    ],
    "generated_code": "def find_minimum_range(arrays):\n    import heapq\n    \n    # Initialize min heap with first elements and indices from all arrays\n    min_heap = [(arrays[i][0], i, 0) for i in range(len(arrays))]\n    heapq.heapify(min_heap)\n    \n    seen, result, current_min = set(), float('inf'), None\n    \n    while min_heap:\n        value, array_index, element_index = heapq.heappop(min_heap)\n        \n        if element_index == 0:\n            # Update the minimum seen so far\n            result = (value, current_min + len(arrays))\n            if result < (current_min := value):\n                result = (current_min, value)\n                \n            if len(seen) < len(arrays):\n                next_value = arrays[array_index].pop(element_index) if arrays[array_index] else None\n                if next_value is not None:\n                    heapq.heappush(min_heap, (next_value, array_index, 0))\n                    seen.add(array_index)\n                    \n        else:\n            index += 1\n            \n    return result\n\n# Test cases\nprint(find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]))  # Expected output: (4, 6)\nprint(find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]))  # Expected output: (4, 7)\nprint(find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]))  # Expected output: (5, 7)",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dig_let(s):\n    # Initialize counters for digits and letters\n    digit_count = 0\n    letter_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char.isdigit():\n            digit_count += 1\n        elif char.isalpha():\n            letter_count += 1\n            \n    return (digit_count, letter_count)\n\n# Test cases\nprint(dig_let(\"python\"))   # Expected output: (6, 0)\nprint(dig_let(\"program\"))  # Expected output: (7, 0)\nprint(dig_let(\"python3.0\"))  # Expected output: (6, 2)",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Odd_Squares(l, r):\n    def is_odd_factor_count(x):\n        for i in range(1, int(x ** 0.5) + 1):\n            if x % i == 0:\n                # If both i and x/i are odd, they have been counted together.\n                if i % 2 != 0 and (x // i) % 2 != 0:\n                    continue\n                else:\n                    return True\n        return False\n\n    result = sum(is_odd_factor_count(x) for x in range(l, r+1))\n    return result",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_consecutivenums(nums):\n    result = []\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            continue\n        result.append(abs(nums[i] - nums[i-1]))\n    return result",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def zigzag(n, k):\n    if n == 1:\n        return 1\n    res = [0] * n\n    for i in range(k - 1, 0, -1):\n        j = i + 1\n        while j < n:\n            res[j], res[j - 1] = res[j - 1], res[j]\n            j += i\n    return res[-1]\n\n# Test cases\nprint(zigzag(4, 3))  # Expected output: 5\nprint(zigzag(4, 2))  # Expected output: 4\nprint(zigzag(3, 1))  # Expected output: 1",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def count_Squares(length, breadth):\n    \"\"\"\n    Function to calculate the total number of squares within a given rectangle.\n    \n    Parameters:\n    length (int): The length of one side of the rectangle.\n    breadth (int): The width of the other side of the rectangle.\n    \n    Returns:\n    int: Total number of squares inside the rectangle.\n    \"\"\"\n    # Calculate the total number of smaller squares using the formula for sums of triangular numbers\n    total_squares = sum(i**2 for i in range(1, min(length, breadth)+1))\n    return total_squares\n\n# Test cases to verify the correctness of the function\nassert count_Squares(4, 3) == 20\nassert count_Squares(1, 2) == 2\nassert count_Squares(2, 2) == 5\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def find_ways(length):\n    \"\"\"\n    Calculate the number of ways to arrange numbers from 0 to max_value such that their sum is divisible by divisor,\n    and the total number of elements in the sequence is equal to length.\n    \n    :param length: The desired length of the sequence.\n    :return: The number of valid sequences modulo 1e9+7.\n    \"\"\"\n    mod = 10**9 + 7\n    max_value = 10**5\n    dp = [[0] * (length + 1) for _ in range(max_value + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, max_value + 1):\n        for j in range(length + 1):\n            for k in range(i):\n                dp[i][j] += dp[k][j - 1]\n                dp[i][j] %= mod\n    \n    result = 0\n    for i in range(1, min(max_value, length // 2) + 1):\n        result += dp[i][length]\n        result %= mod\n    \n    return result\n\n# Check function with provided data points\nprint(find_ways(4))  # Expected output: 2\nprint(find_ways(6))  # Expected output: 5\nprint(find_ways(8))  # Expected output: 14",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check(binary_string):\n    # Check if the length of the string is even\n    if len(binary_string) % 2 != 0:\n        return \"No\"\n\n    # Iterate through the string and count the number of '1's\n    ones_count = sum(1 for bit in binary_string if bit == '1')\n\n    # If there are more than one '1', it's not a valid binary string\n    if ones_count > 1:\n        return \"No\"\n\n    return \"Yes\"",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def minimum_Length(s):\n    count = {}\n    \n    # Count occurrences of each character in the string\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    # Find the maximum frequency among all characters\n    max_freq = max(count.values())\n    \n    # Calculate the minimum length after removing one occurrence of each character with the highest frequency\n    min_length = len(s) - max_freq + sum(count.values()) - 1\n    \n    return min_length",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Element(arr, n, k):\n    frequency = {}\n    \n    # Counting occurrences of each element\n    for i in range(n):\n        if arr[i] not in frequency:\n            frequency[arr[i]] = 0\n        frequency[arr[i]] += 1\n    \n    # Finding the first element with a count equal to k\n    for num in arr:\n        if frequency[num] == k and num < n - k + 1:\n            return num\n            \n    return -1  # Return -1 if no such element exists",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def unique_Characters(s):\n    # Create an empty set to store seen characters\n    seen = set()\n    \n    # Iterate over each character in the string\n    for char in s:\n        # If the character is already in the set, it's not unique\n        if char in seen:\n            return False\n        else:\n            # Add the character to the set\n            seen.add(char)\n    \n    # If we've gone through all characters and found no duplicates, they're unique\n    return True",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def remove_column(data_list, index):\n    \"\"\"\n    Remove a specified column from a given nested list.\n    \n    Args:\n    data_list (list of lists): The input nested list containing numeric values.\n    index (int): The index of the column to be removed.\n    \n    Returns:\n    list of lists: The updated nested list with the specified column removed.\n    \"\"\"\n    return [[row[i] for row in data_list if i != index] for i in range(len(data_list[0]))]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0) == [[2, 3], [4, 5], [1, 1]], \"Test case 1 failed\"\n    assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2) == [[1, 2], [-2, 4], [1, -1]], \"Test case 2 failed\"\n    assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0) == [[3], [7], [3], [15, 17], [7], [11]], \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_ap(n, a, d):\n    # Calculate the nth term in an arithmetic progression using the formula: \n    # Tn = A + (N-1) * D where A is the first term and D is the common difference.\n    return a + (n - 1) * d\n\n# Example test cases\nprint(tn_ap(1,5,2))  # Expected output: 9\nprint(tn_ap(2,6,4))  # Expected output: 22\nprint(tn_ap(1,4,5))  # Expected output: 16",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef count_Rectangles(r):\n    if r <= 0:\n        return 0\n    \n    area = 4 * math.pi * pow(r, 2)\n    \n    # Each rectangle is defined by two sets of opposite points on the circle.\n    # There are 6 such sets for each diameter length.\n    # The total number of rectangles is half the product of these two quantities,\n    # divided by 2 because each pair of opposite points defines the same rectangle twice.\n    num_rectangles = int(area / 2 / math.sqrt(math.pow(math.pi, 2) + 4))\n    \n    return num_rectangles",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_max(tuple_records):\n    # Find the maximum value in each tuple and return the highest one\n    return max(max(record) for record in tuple_records)",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef moddiv_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Returns a new list where each element is the result of list1[i] divided by list2[i] modulo 10.\n    \n    :param list1: A list of integers.\n    :param list2: A list of integers, must be the same length as list1.\n    :return: A list of results after performing modulo division for corresponding elements of list1 and list2.\n    \"\"\"\n    return [x % 10 for x in map(lambda i, j: i // j if j else float('inf'), list1, list2)]\n\n# Check function with provided data points\nprint(moddiv_list([4,5,6],[1, 2, 3]))  # Expected output: [0, 1, 0]\nprint(moddiv_list([3,2],[1,4]))       # Expected output: [0, 2]\nprint(moddiv_list([90,120],[50,70]))   # Expected output: [40, 50]",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Check_Solution(a, b, c):\n    \"\"\"\n    This function checks if one root of the quadratic equation ax^2 + bx + c = 0 \n    is exactly twice the other.\n    \n    Parameters:\n    a (float): Coefficient of x^2 term in the quadratic equation.\n    b (float): Coefficient of x term in the quadratic equation.\n    c (float): Constant term in the quadratic equation.\n    \n    Returns:\n    str: \"Yes\" if one root is twice the other, otherwise \"No\".\n    \"\"\"\n    # Calculate discriminant\n    D = (b**2) - (4*a*c)\n    \n    # Check for real roots and one being twice the other\n    if D >= 0:\n        sqrt_D = D**0.5\n        if abs(sqrt_D) % 2 == 0:\n            return \"Yes\"\n    else:\n        return \"No\"\n\n# Test cases\nprint(Check_Solution(1, 3, 2))  # Expected output: \"Yes\"\nprint(Check_Solution(1, 2, 3))  # Expected output: \"No\"\nprint(Check_Solution(1, -5, 6)) # Expected output: \"No\"",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_carol(n):\n    def factorial(x):\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n    \n    def power(base, exp):\n        result = 1\n        while exp > 0:\n            if exp % 2 == 1:\n                result *= base\n            base *= base\n            exp //= 2\n        return result\n    \n    total = 0\n    num = 1\n    for _ in range(n - 1):\n        total += num * power(factorial(num), 2)\n        num += 1\n    \n    return total",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lists):\n    return [i for i in lists if i]",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    max_count = max(count.values())\n    for key, value in count.items():\n        if value == max_count:\n            return key",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_K_element(tuples_list, k):\n    \"\"\"\n    Add 'k' to every element of each tuple in the list and return the result as a new list of tuples.\n    \n    Parameters:\n    tuples_list (list): A list containing tuples of numbers.\n    k (int): The value to be added to each element of the tuple.\n    \n    Returns:\n    list: A new list of tuples where each element is incremented by 'k'.\n    \"\"\"\n    return [tuple(x + k for x in t) for t in tuples_list]\n\n# Test cases\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_flip_to_make_string_alternate(binary_str):\n    count = 0\n    for i in range(1, len(binary_str)):\n        if binary_str[i] != binary_str[i-1]:\n            count += 1\n    return count",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(number):\n    if number == 0:\n        return 1\n    count = 0\n    while number > 0:\n        count += 1\n        number //= 10\n    return count",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def adjacent_num_product(nums):\n    # Initialize variables to store the maximum product and the current product\n    max_product = curr_product = nums[0]\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(nums)):\n        # Update the current product if it's larger than the new value times the previous number\n        curr_product = max(curr_product * nums[i], nums[i])\n        \n        # Update the maximum product if the current product is greater\n        max_product = max(max_product, curr_product)\n    \n    return max_product\n\n# Test cases\nprint(adjacent_num_product([1,2,3,4,5,6]))  # Expected output: 30\nprint(adjacent_num_product([1,2,3,4,5]))   # Expected output: 20\nprint(adjacent_num_product([2,3]))         # Expected output: 6",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "def is_tree_balanced(root):\n    \"\"\"\n    Returns True if the given binary tree is balanced.\n    \n    Parameters:\n    root (TreeNode): The root of the binary tree.\n    \n    Returns:\n    bool: True if the tree is balanced, False otherwise.\n    \"\"\"\n    def height(node):\n        if node is None:\n            return -1\n        else:\n            left_height = height(node.left)\n            right_height = height(node.right)\n            if abs(left_height - right_height) > 1:\n                return float('inf')\n            return max(left_height, right_height) + 1\n    \n    return height(root) != float('inf')",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def repeat_tuples(tup, n):\n    result = []\n    for _ in range(n):\n        result.append(tup)\n    return tuple(result)\n\n# Test cases\nprint(repeat_tuples((1, 3), 4)) # Should print: ((1, 3), (1, 3), (1, 3), (1, 3))\nprint(repeat_tuples((1, 2), 3)) # Should print: ((1, 2), (1, 2), (1, 2))\nprint(repeat_tuples((3, 4), 5)) # Should print: ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cuboid(length, width, height):\n    return 2 * (length + width) * height",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def float_sort(tup):\n    # Sort the list of tuples based on the second element (float) in each tuple\n    return sorted(tup, key=lambda x: float(x[1]))\n\n# Test cases\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]) == [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')]) == [('item3', '20'), ('item1', '15'), ('item2', '10')]\nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')]) == [('item3', '14'), ('item2', '10'), ('item1', '5')]",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_missing(arr, start, end):\n    if arr[start] != start:\n        return start\n    elif end < len(arr):\n        return end + 1\n    else:\n        for i in range(start + 1, end):\n            if arr[i - 1] != i:\n                return i",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef heap_assending(lst):\n    return sorted(lst)",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import permutations\n\ndef permute_string(s):\n    # Generate all unique permutations considering duplicate characters\n    return [''.join(p) for p in set(permutations(s))]\n\n# Example usage:\nprint(permute_string('ab'))\nprint(permute_string('abc'))\nprint(permute_string('abcd'))",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef round_num(num, divisor):\n    \"\"\"\n    Round the given number 'num' to the nearest multiple of 'divisor'.\n    \n    Parameters:\n        num (int): The number to be rounded.\n        divisor (int): The divisor used for rounding.\n        \n    Returns:\n        int: The rounded number.\n    \"\"\"\n    return round(num / divisor) * divisor\n\n# Test cases\nprint(round_num(4722,10))  # Expected output: 4720\nprint(round_num(1111,5))   # Expected output: 1110\nprint(round_num(219,2))    # Expected output: 218",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_replica(lst):\n    from collections import Counter\n    counter = Counter(lst)\n    unique_elements = [element for element in lst if counter[element] == 1]\n    for i in range(len(unique_elements)):\n        if i + 1 < len(lst) and counter[unique_elements[i]] > 0:\n            unique_elements.append('MSP')  # Custom replacement value\n    return tuple(unique_elements)\n\n# Test cases\nprint(remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)))  # Expected output: (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nprint(remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)))  # Expected output: (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nprint(remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)))  # Expected output: (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Char(s, ch):\n    # Initialize an empty string to store characters excluding the specified character\n    result = ''\n    \n    for char in s:\n        if char != ch:\n            # If current character is not equal to the specified character, append it to the result\n            result += char\n    \n    return result",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_first(lst):\n    \"\"\"\n    Moves the last item of the input list to the front and returns the modified list.\n    \n    Args:\n        lst (list): The input list with elements of type int.\n        \n    Returns:\n        list: A new list with the last element moved to the beginning.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    # Move the last element to the front\n    last_element = lst.pop()\n    lst.insert(0, last_element)\n    return lst",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    # Calculate the total surface area of the cuboid\n    return 2 * (length*width + length*height + width*height)",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
      "Test 2: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
      "Test 3: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"
    ],
    "generated_code": "import numpy as np\n\ndef multi_list(n, m):\n    \"\"\"\n    Generate an n x m matrix with numbers from 0 to n*m-1 in ascending order.\n    \n    Parameters:\n    n (int): Number of rows in the matrix.\n    m (int): Number of columns in the matrix.\n    \n    Returns:\n    list: A 2D numpy array containing the generated sequence.\n    \"\"\"\n    return np.array([[i + j * n for i in range(m)] for j in range(n)])\n\n# Test cases\nprint(multi_list(3, 4))   # Expected output: [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\nprint(multi_list(5, 7))   # Expected output: [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nprint(multi_list(10, 15)) # Expected output: ...",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(lst, idx):\n    return sorted(lst, key=lambda x: x[idx])",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_rotation_count(arr):\n    low = 0\n    high = len(arr) - 1\n    \n    while arr[low] >= arr[high]:\n        if high == low:\n            return high + 1\n        \n        mid = int((low + high) / 2)\n        \n        if arr[mid] >= arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n            \n    return high",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(n):\n    result = 0\n    while n != 0:\n        # Toggle bit at position i\n        if n % 2 == 1:\n            result += (1 << (n & 1))\n        n >>= 1\n    return result\n\n# Test cases\nprint(even_bit_toggle_number(10))  # Expected output: 15\nprint(even_bit_toggle_number(20))  # Expected output: 1\nprint(even_bit_toggle_number(30))  # Expected output: 11",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_Of_Smallest(k,arr):\n    # Find the smallest element in the array\n    min_val = min(arr)\n    # Count how many times the smallest element appears in the array\n    count = arr.count(min_val)\n    return count",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return get_perrin(n - 2) + get_perrin(n - 3)\n\n# Test cases\nprint(get_perrin(9))  # Expected output: 12\nprint(get_perrin(4))  # Expected output: 2\nprint(get_perrin(6))  # Expected output: 5",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def swap_count(bracket_string):\n    count = 0\n    left_brackets = []\n    right_brackets = []\n\n    for char in bracket_string:\n        if char == '[':\n            left_brackets.append(count)\n            count += 1\n        else:\n            right_brackets.append(count)\n            count -= 1\n\n    return max(left_brackets) + max(right_brackets)\n\n# Test cases\nprint(swap_count(\"[]][][\")) # Expected output: 2\nprint(swap_count(\"[[][]]\")) # Expected output: 0\nprint(swap_count(\"[[][]]][\")) # Expected output: 1",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_or_odd(hex_number):\n    # Convert the hexadecimal string to an integer and then divide by 2\n    # If there's no remainder after division by 2, it means the original number was even.\n    return \"Even\" if int(hex_number, 16) % 2 == 0 else \"Odd\"",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    Finds and returns the highest power of 2 that is less than or equal to n.\n    \n    Args:\n    n (int): The number to check against powers of two.\n    \n    Returns:\n    int: The highest power of 2 less than or equal to n.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    power = 0\n    while n > 1:\n        n >>= 1\n        power += 1\n    return 2 ** power\n\n# Test cases\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_string(lst, s):\n    return [s.format(item) for item in lst]",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Dict\n\ndef convert_list_dictionary(list1: List[str], list2: List[str], list3: List[int]) -> Dict[str, Dict[str, int]]:\n    result = {}\n    for i in range(len(list1)):\n        result[list1[i]] = {list2[i]: list3[i]}\n    return result",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_sum(n):\n    memo = {0: 0, 1: 1}\n\n    def dp(num):\n        if num in memo:\n            return memo[num]\n        \n        # Base case for recursion termination\n        if num == 0 or num == 1:\n            return num\n        \n        # Recurrence relation\n        result = max(\n            dp(int(num / 2)) + dp(int(num / 3)) + dp(int(num / 4)) + dp(int(num / 5)),\n            num\n        )\n        memo[num] = result\n        return result\n    \n    return dp(n)",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length_list(test_lists):\n    # Find the longest list and return its index along with the longest list itself.\n    return len(test_lists[0]), test_lists[0]\n\n# Test cases\nprint(max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: (3, [13, 15, 17])\nprint(max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])) # Expected output: (5, [1,2,3,4,5])\nprint(max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])) # Expected output: (4, [6,7,8,9])",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(input_tuple):\n    \"\"\"\n    This function checks whether all elements in the input tuple are unique.\n    \n    Parameters:\n    input_tuple (tuple): The input tuple of integers.\n    \n    Returns:\n    bool: True if all elements are unique, otherwise False.\n    \"\"\"\n    # Convert the tuple to a set and compare its length with the original tuple's length.\n    # If lengths are different, it means there were duplicate elements in the tuple.\n    return len(set(input_tuple)) == len(input_tuple)",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    # Count occurrence of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_char(string):\n    # Regex pattern to match strings starting and ending with the same character\n    pattern = r\"^(.).*\\1$|^.$\"\n    \n    # Search for the pattern in the input string\n    if re.search(pattern, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Test cases\nprint(check_char(\"abba\"))  # Output: Valid\nprint(check_char(\"a\"))     # Output: Valid\nprint(check_char(\"abcd\"))  # Output: Invalid",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_of_digits(lst):\n    total_sum = 0\n    for item in lst:\n        if isinstance(item, int):  # Check if the item is an integer\n            total_sum += sum(int(digit) for digit in str(abs(item)))  # Sum of digits and ignore sign\n        else:\n            try:\n                for num in map(int, str(item)):  # Try converting non-integer items into integers\n                    total_sum += sum(num)\n            except ValueError:\n                continue  # Skip elements that cannot be converted to integer\n    return total_sum",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def bitwise_xor(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i] ^ tup2[i])\n    return tuple(result)\n\n# Test cases\nprint(bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)))  # Output: (15, 6, 5, 10)\nprint(bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)))  # Output: (13, 6, 3, 14)\nprint(bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)))  # Output: (11, 2, 13, 13)",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_freq(lst):\n    from collections import Counter\n    \n    # Convert each tuple in the list into a string representation for counting\n    str_lst = [str(item) for sublist in lst for item in sublist]\n    \n    # Count the occurrences of each tuple-like string\n    freq_counter = Counter(str_lst)\n    \n    # Return the count of distinct tuples\n    return len(freq_counter)\n\n# Test cases\nprint(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]))  # Expected output: 3\nprint(extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)]))  # Expected output: 4\nprint(extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)]))  # Expected output: 4",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_nested_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append((tup1[i][0] + tup2[i][0], tup1[i][1] + tup2[i][1]))\n    return tuple(result)\n\n# Test cases\nprint(add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))) # Expected output: ((7, 10), (7, 14), (3, 10), (8, 13))\nprint(add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))) # Expected output: ((9, 12), (9, 16), (5, 12), (10, 15))\nprint(add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))) # Expected output: ((11, 14), (11, 18), (7, 14), (12, 17))",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef ncr_modp(n, k, p):\n    \"\"\"\n    Calculate nCr % p where n is the total number of items,\n    k is the number of items to choose, and p is the modulo.\n    \n    Args:\n    n (int): Total number of items.\n    k (int): Number of items to choose.\n    p (int): Modulo for the result.\n    \n    Returns:\n    int: Result of nCr % p.\n    \"\"\"\n    return math.comb(n, k) % p\n\n# Test cases\nassert ncr_modp(10, 2, 13) == 6\nassert ncr_modp(15, 12, 43) == 25\nassert ncr_modp(17, 9, 18) == 10\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    pattern = r\"^(http|https)://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(/\\S*)?$\"\n    return bool(re.match(pattern, url))",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(x, y):\n    if x > y:\n        return y\n    else:\n        return x",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_tuplex' is not defined",
      "Test 2: FAIL - name 'check_tuplex' is not defined",
      "Test 3: FAIL - name 'check_tuplex' is not defined"
    ],
    "generated_code": "def check_tuple(tup, elem):\n    return elem in tup",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(num):\n    # Initialize parity as Even\n    parity = 'Even'\n    \n    # Check if num is even\n    if num % 2 == 0:\n        parity = 'Even Parity'\n    else:\n        parity = 'Odd Parity'\n    \n    return parity",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rearrange_bigger(n):\n    nums = [int(d) for d in str(n)]\n    i = len(nums) - 2\n    \n    while i >= 0:\n        if nums[i] < nums[i + 1]:\n            break\n        i -= 1\n        \n    if i == -1:\n        return False\n    \n    j = len(nums) - 1\n    \n    while nums[j] <= nums[i]:\n        j -= 1\n    \n    nums[i], nums[j] = nums[j], nums[i]\n    \n    nums[i+1:] = sorted(nums[i+1:])\n    \n    return int(\"\".join(map(str, nums)))\n\n# Test cases\nprint(rearrange_bigger(12))   # Output should be 21\nprint(rearrange_bigger(10))   # Output should be False\nprint(rearrange_bigger(102))  # Output should be 120",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def k_smallest_pairs(A, B, K):\n    # Initialize result list with initial pair\n    result = []\n    if not A:\n        return result\n    elif len(B) < K:\n        for i in range(len(A)):\n            for j in range(i + 1, len(A)):\n                result.append([A[i], B[j]])\n                if len(result) == K:\n                    break\n            if len(result) == K:\n                break\n        return result\n    \n    # Sort B to efficiently pick K smallest elements\n    sorted_B = sorted((a, b) for a, b in zip(A, B))\n    \n    # Pick K smallest pairs from sorted_B\n    for _ in range(K):\n        a, b = sorted_B.pop(0)\n        result.append([a, b])\n    \n    return result",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef min_product_tuple(tuples_list: List[tuple]) -> int:\n    \"\"\"\n    Find and return the smallest product of two numbers in each tuple pair.\n    \n    Args:\n    tuples_list: A list of tuples where each tuple contains at least one element.\n    \n    Returns:\n    The minimum product of the elements in the tuples as an integer.\n    \"\"\"\n    # Calculate products for all possible pairs\n    products = [x * y for x, y in tuples_list]\n    # Return the minimum product found\n    return min(products)\n\n# Check function with provided data points\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\nassert min_product_tuple([(10, 20), (15, 2), (5, 10)]) == 30\nassert min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]) == 100",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_val(lst):\n    return min(map(int, filter(lambda x: isinstance(x, int), lst)))",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    # Split the input string by underscore and capitalize each word except the first one\n    words = snake_str.split('_')\n    # Capitalize the first letter of each word and join them together\n    camel_case_str = ''.join(word.capitalize() for word in words)\n    return camel_case_str\n\n# Example usage:\nprint(snake_to_camel('android_tv'))  # Output: AndroidTv\nprint(snake_to_camel('google_pixel'))  # Output: GooglePixel\nprint(snake_to_camel('apple_watch'))  # Output: AppleWatch",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(nums):\n    # Initialize an empty list to store even numbers\n    evens = []\n    \n    # Iterate through each number in the input list\n    for num in nums:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If it's even, append it to the 'evens' list\n            evens.append(num)\n    \n    # Return the list of even numbers\n    return evens",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]\n\n# Test cases\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2))\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1))",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(sequence1, sequence2):\n    # Check if both sequences have at least one element in common\n    for item in sequence1:\n        if item in sequence2:\n            return True\n    return False",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "from typing import List\n\ndef max_Product(nums: List[int]) -> tuple:\n    \"\"\"\n    Finds the two largest numbers in the list such that their product is maximum.\n    \n    :param nums: List of integers.\n    :return: A tuple containing the two largest numbers whose product is maximum.\n    \"\"\"\n    first = second = float('-inf')\n    for num in nums:\n        if num > first:\n            first, second = num, first\n        elif num > second:\n            second = num\n    return (first, second)\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    assert max_Product([1,2,3,4,7,0,8,4]) == (7, 8), \"Test case 1 failed\"\n    assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4, -6), \"Test case 2 failed\"\n    assert max_Product([1,2,3]) == (2, 3), \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def breakSum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max((n % 3 + 1) * 3 - 1, breakSum(n // 3))\n\n# Test cases\nprint(breakSum(12)) # Expected output: 13\nprint(breakSum(24)) # Expected output: 27\nprint(breakSum(23)) # Expected output: 23",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: can only concatenate str (not \"tuple\") to str"
    ],
    "generated_code": "def group_tuples(tuples_list):\n    result = []\n    for t in tuples_list:\n        temp = t[0] + (None,) * len(t)  # Append None if it's not already there\n        if temp not in [tuple(sorted(sublist)) for sublist in result]:\n            result.append(tuple(sorted(t)))\n    return result\n\n# Test cases\nprint(group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]))  # Output: [('x', 'y', 'z'), ('w', 't')]\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]))   # Output: [('a', 'b', 'c'), ('d', 'e')]\nprint(group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]))    # Output: [('f', 'g', 'g'), ('h', 'i')]",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Max(lst):\n    # Initialize variables to store the maximum list and its index\n    max_list = []\n    max_length = 0\n    \n    # Iterate through each item in the input list\n    for i, item in enumerate(lst):\n        # Check if the current list is longer than the previously stored one\n        if len(item) > max_length:\n            # Update the maximum list with the current list\n            max_list = item\n            # Update the maximum length with the length of the current list\n            max_length = len(item)\n    \n    return max_list",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    result = sum(rounded_numbers)\n    return int(result * len(rounded_numbers))",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cube_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 3\n    return total",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_tuple(tup, delimiter=\"\"):\n    # Convert all elements in the tuple to strings and then join them with the specified delimiter.\n    return ''.join(str(item) for item in tup).replace(',', delimiter)",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\n    total = sum(x**3 for x in range(1, n+1))\n    return total / n",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_maxgold(mine_field, rows, cols):\n    # Initialize DP table with -1 for unvisited cells and initial values\n    dp = [[-1] * cols for _ in range(rows)]\n    max_gold = []\n\n    def dfs(x, y):\n        if x < 0 or x >= rows or y < 0 or y >= cols:\n            return float('-inf')\n        \n        if dp[x][y] != -1:\n            return dp[x][y]\n        \n        current_value = mine_field[x][y]\n        \n        # Explore all four possible directions (up, down, left, right)\n        top, bottom, left, right = dfs(x + 1, y), dfs(x - 1, y), dfs(x, y + 1), dfs(x, y - 1)\n        \n        # Calculate maximum value considering each direction\n        if top > 0:\n            current_value += top\n        if bottom > 0:\n            current_value += bottom\n        if left > 0:\n            current_value += left\n        if right > 0:\n            current_value += right\n        \n        # Store the result in the DP table before returning it\n        dp[x][y] = current_value\n        return current_value\n    \n    # Start DFS from every cell except borders as they have no neighbors\n    for i in range(1, rows):\n        for j in range(1, cols):\n            max_gold.append(dfs(i, j))\n    \n    # Find and return the highest gold collected\n    max_gold.sort(reverse=True)\n    return max_gold[0]\n\n# Test cases\nprint(get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4))  # Expected output: 16\nprint(get_maxgold([[10, 20], [30, 40]], 2, 2))  # Expected output: 70\nprint(get_maxgold([[4, 9], [3, 7]], 2, 2))  # Expected output: 13",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_rear(strings_tuple):\n    return [string[-1] for string in strings_tuple]\n\n# Test cases\nprint(extract_rear(('Mers', 'for', 'Vers')))  # Expected output: ['s', 'r', 's']\nprint(extract_rear(('Avenge', 'for', 'People')))  # Expected output: ['e', 'r', 'e']\nprint(extract_rear(('Gotta', 'get', 'go')))  # Expected output: ['a', 't', 'o']",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_in_list(list_of_lists, element):\n    count = 0\n    for sublist in list_of_lists:\n        if element in sublist:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "filter_oddnumbers = lambda nums: list(filter(lambda x: x % 2 != 0, nums))",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef change_date_format(date_str):\n    pattern = r'^(\\d{4})-(\\d{1,2})-(\\d{1,2})$'\n    match = re.match(pattern, date_str)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        raise ValueError(f\"Invalid date format: {date_str}\")\n\n# Test cases\nprint(change_date_format(\"2026-01-02\"))  # Expected output: \"02-01-2026\"\nprint(change_date_format(\"2020-11-13\"))  # Expected output: \"13-11-2020\"\nprint(change_date_format(\"2021-04-26\"))  # Expected output: \"26-04-2021\"",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # Put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        gap //= 2\n        \n    return arr",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def and_tuples(tuple1, tuple2):\n    # Extract elements from both tuples using list comprehension\n    result = [a * b for a, b in zip(tuple1, tuple2)]\n    return tuple(result)\n\n# Test cases\nprint(and_tuples((10, 4, 6, 9), (5, 2, 3, 3)))  # Output: (0, 0, 2, 1)\nprint(and_tuples((1, 2, 3, 4), (5, 6, 7, 8)))   # Output: (1, 2, 3, 0)\nprint(and_tuples((8, 9, 11, 12), (7, 13, 14, 17)))  # Output: (0, 9, 10, 0)",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_directrix(a,b,c):\n    return -4 * b / (-a + c)",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_element(list1, list2):\n    return bool(set(list1) & set(list2))",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_trapezium(a,b,c):\n    \"\"\"\n    Calculate the median of a trapezium defined by three consecutive sides.\n    \n    The median of a trapezium is calculated as the average of its two parallel sides.\n    \n    Args:\n        a (float): Length of the first side of the trapezium.\n        b (float): Length of the second side of the trapezium.\n        c (float): Length of the third side of the trapezium.\n        \n    Returns:\n        float: Median length of the trapezium.\n    \"\"\"\n    return (a + b) / 2\n\n# Test Cases\nassert abs(median_trapezium(15, 25, 35) - 20) < 0.001\nassert abs(median_trapezium(10, 20, 30) - 15) < 0.001\nassert abs(median_trapezium(6, 9, 4) - 7.5) < 0.001",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_greater(arr, num):\n    for i in arr:\n        if num > i:\n            return 'Yes, the entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'\n\n# Test Cases\nprint(check_greater([1, 2, 3, 4, 5], 4)) # Expected output: \"No, entered number is less than those in the array\"\nprint(check_greater([2, 3, 4, 5, 6], 8)) # Expected output: \"Yes, the entered number is greater than those in the array\"\nprint(check_greater([9, 7, 4, 8, 6, 1], 11)) # Expected output: \"Yes, the entered number is greater than those in the array\"",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def text_match_one(text):\n    # Check if the text starts with 'a' and ends with 'b'\n    return ('Found a match!' if text.startswith('a') and text.endswith('b') else 'Not matched!')\n\n# Test cases to verify the correctness of the function\nassert text_match_one(\"ac\") == \"Not matched!\"\nassert text_match_one(\"dc\") == \"Not matched!\"\nassert text_match_one(\"abba\") == \"Found a match!\"",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit(number):\n    # Return the last digit of the given number by using modulo operator with 10\n    return number % 10",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_nos(lst):\n    # Return a new list containing all elements from the input list that are less than zero.\n    return [num for num in lst if num < 0]",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(s):\n    return ''.join(i for i in s if not i.isdigit())",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef count_bidirectional(tuples_list):\n    \"\"\"\n    Counts the number of unique bidirectional tuple pairs in a list of tuples.\n    \n    Args:\n    tuples_list : List[Tuple[int]] - A list containing tuples with integer elements\n    \n    Returns:\n    int - The total count of unique bidirectional tuples\n    \"\"\"\n    # Counting each element's occurrences and its own occurrence as well\n    counts = Counter(x + y for x, y in tuples_list) | Counter(y + x for x, y in tuples_list)\n    \n    # Summing up all counts where an element appears more than once\n    result = sum(count // 2 for count in counts.values() if count > 1)\n    \n    return result\n\n# Test Cases\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])) # Output: 3\nprint(count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])) # Output: 2\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])) # Output: 4",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(nums):\n    # Convert all numbers in the list to strings and join them with no separator\n    return int(\"\".join(map(str, nums)))\n\n# Test cases\nprint(multiple_to_single([11, 33, 50]))  # Expected output: 113350\nprint(multiple_to_single([-1, 2, 3, 4, 5, 6]))  # Expected output: -123456\nprint(multiple_to_single([10, 15, 20, 25]))  # Expected output: 10152025",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef find_adverb_position(sentence: str) -> List[Tuple[int, int, str]]:\n    \"\"\"\n    Finds all adverbs in a sentence along with their starting index and word.\n    \n    Parameters:\n    sentence (str): The input sentence from which to find adverbs.\n    \n    Returns:\n    List[Tuple[int, int, str]]: A list of tuples, each containing the position index,\n                                 the end index for the word, and the actual word found as an adverb.\n    \"\"\"\n    words = sentence.split()\n    result = []\n    adverb_pattern = re.compile(r'\\b([A-Z][^!]*?)(?!.*\\b[A-Z]\\b)')\n    \n    for i, word in enumerate(words):\n        matches = adverb_pattern.search(word)\n        if matches:\n            start_index = matches.start()\n            end_index = start_index + len(matches.group(0))\n            result.append((start_index, end_index, matches.group(0)))\n    \n    return result",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(length):\n    # Calculate the surface area of a cube given its length\n    return 6 * length ** 2",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: '>' not supported between instances of 'list' and 'int'"
    ],
    "generated_code": "import numpy as np\n\ndef positive_count(arr):\n    \"\"\"\n    This function calculates the ratio of positive numbers in a given list.\n    \n    Parameters:\n        arr (list): A list of integers\n    \n    Returns:\n        float: The ratio of positive numbers in the input list.\n    \"\"\"\n    # Convert the list to a NumPy array and calculate the sum of elements\n    num_positive = np.sum(arr > 0)\n    total_elements = len(arr)\n    \n    return num_positive / total_elements if total_elements != 0 else 0\n\n# Check function with provided data points\nassert abs(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) - 0.54) < 0.01\nassert abs(positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) - 0.69) < 0.01\nassert abs(positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]) - 0.56) < 0.01\n\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_neg(numbers):\n    # Initialize variable to store the largest negative number found so far.\n    largest = float('-inf')\n    \n    # Iterate through each number in the list.\n    for num in numbers:\n        # Check if the current number is less than zero and greater than the current largest negative number found.\n        if num < 0 and num > largest:\n            largest = num\n            \n    # Return the largest negative number found.\n    return largest",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def trim_tuple(tuples_list, k):\n    # Use map to apply lambda function to each element of the tuples\n    trimmed_tuples = list(map(lambda x: tuple(y for y in x if len(x) > k and y != None), tuples_list))\n    return trimmed_tuples\n\n# Test Cases\nprint(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2))  # Output: [(2,), (9,), (2,), (2,)]\nprint(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1))  # Output: [(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\nprint(trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)], 1))          # Output: [(8, 4), (8, 12), (1, 7), (6, 9)]",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_multiplication(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        row_result = []\n        for j in range(len(t1[0])):\n            row_result.append(t1[i][j] * t2[i][j])\n        result.append(tuple(row_result))\n    return tuple(result)",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'tuple' object doesn't support item deletion"
    ],
    "generated_code": "def count_Occurrence(list_elements, tuples_elements):\n    # Initialize an empty dictionary to store element counts\n    occurrences = {}\n    \n    # Iterate through each tuple_element in the provided tuple\n    for tuple_element in tuples_elements:\n        if tuple_element not in occurrences:\n            occurrences[tuple_element] = 0\n        \n        # Increment the count for each matching element in the list_elements\n        while True:\n            try:\n                index = list_elements.index(tuple_element)\n                occurrences[tuple_element] += 1\n                del list_elements[index]\n                break\n            except ValueError:\n                continue\n    \n    # Return the total occurrence count from the dictionary\n    return sum(occurrences.values())\n\n# Test cases to verify the correctness of the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6\nassert count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2]) == 2",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "cube_nums = lambda nums: [num**3 for num in nums]",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_sum(n):\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 5]\n    else:\n        result = [3, 5]\n        for i in range(3, n+1):\n            next_num = result[-1] + result[-2]\n            if next_num > 9:\n                break\n            result.append(next_num)\n        return sum(result)\n\n# Test cases\nprint(cal_sum(9))  # Expected output: 49\nprint(cal_sum(10)) # Expected output: 66\nprint(cal_sum(11)) # Expected output: 88",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Triangle(p1x, p1y, p2x, p2y, p3x, p3y):\n    # Calculate distances between all pairs of points using the distance formula\n    d1 = ((p1x - p2x)**2 + (p1y - p2y)**2)**0.5\n    d2 = ((p2x - p3x)**2 + (p2y - p3y)**2)**0.5\n    d3 = ((p3x - p1x)**2 + (p3y - p1y)**2)**0.5\n    \n    # Check if the sum of any two sides is greater than the third side\n    return d1 + d2 > d3 and d1 + d3 > d2 and d2 + d3 > d1",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_string(str_list, num_chars):\n    return [s[-num_chars:] for s in str_list]",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_whitespaces(input_string):\n    \"\"\"\n    Remove all whitespace characters from the input string.\n    \n    Args:\n    input_string (str): The string from which whitespace will be removed.\n    \n    Returns:\n    str: A new string with all whitespace removed.\n    \"\"\"\n    # Use regular expression to replace one or more whitespace characters (\\s+) with an empty string\n    result = re.sub(r'\\s+', '', input_string)\n    return result\n\n# Check function with provided data points to verify correctness\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter', \"Test case 1 failed\"\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart', \"Test case 2 failed\"\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def loss_amount(amount_issued, amount_received):\n    \"\"\"\n    This function calculates the loss amount based on the given amounts.\n    \n    Args:\n        amount_issued (int): The amount of money issued.\n        amount_received (int): The amount of money received.\n        \n    Returns:\n        int: The loss amount if the issuance is less than receipt, otherwise returns None.\n    \"\"\"\n    return amount_issued - amount_received if amount_issued < amount_received else None",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sumofFactors(num):\n    result = 0\n    for i in range(1, num + 1):\n        if num % i == 0 and i % 2 == 0:\n            result += i\n    return result\n\n# Test cases\nprint(sumofFactors(18))  # Expected output: 26\nprint(sumofFactors(30))  # Expected output: 48\nprint(sumofFactors(6))   # Expected output: 8",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumb_number(month_number):\n    # Define an array of months with 31 days\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the input month is in the list of months with 31 days\n    return month_number in thirty_one_days_months",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Find_Min(lst):\n    if not lst:\n        return []\n    \n    # Initialize min_length with the length of the first list\n    min_length = len(lst[0])\n    result = []\n\n    for sub_list in lst:\n        # If current sublist is shorter than the previously recorded minimum length,\n        # update the minimum length and reset the result list.\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n            result = [sub_list]\n\n        # Otherwise, check if the current sublist matches the length of the minimum length found so far\n        elif len(sub_list) == min_length:\n            result.append(sub_list)\n\n    return result\n\n# Test cases\nprint(Find_Min([[1],[1,2],[1,2,3]]))  # Expected output: [1]\nprint(Find_Min([[1,1],[1,1,1],[1,2,7,8]]))  # Expected output: [1,1]\nprint(Find_Min([['x'],['x','y'],['x','y','z']]));  # Expected output: ['x']",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length, width):\n    return length * width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_uppercase(input_string):\n    # Use regular expression to find and replace all upper case letters with empty string\n    result = re.sub('[A-Z]', '', input_string)\n    return result",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    # Use list comprehension and map to flatten the input into a single list,\n    # then take the first element from each sublist.\n    result = [item for sublist in lst for item in sublist[:]]\n    return result",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(s):\n    # Initialize counter for uppercase letters\n    upper_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter and increment counter\n        if 'A' <= char <= 'Z':\n            upper_count += 1\n            \n    # Return the total count of uppercase letters\n    return upper_count",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport itertools\n\ndef combinations_list(elements: List[str]) -> List[List[str]]:\n    \"\"\"\n    Generates all possible non-empty combinations of the given list of strings.\n    \n    Parameters:\n    elements (List[str]): The list of strings for which combinations will be generated.\n    \n    Returns:\n    List[List[str]]: A list containing all possible non-empty combinations of the input list.\n    \"\"\"\n    return [list(comb) for i in range(1, len(elements)+1) for comb in itertools.combinations(elements, i)]\n\n# Test cases\nprint(combinations_list(['orange', 'red', 'green', 'blue']))\nprint(combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange']))\nprint(combinations_list(['red', 'green', 'black', 'orange']))",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n    \n    max_product = current_max = min_product = nums[0]\n    \n    for num in nums[1:]:\n        temp = max(current_max * num, min_product * num, num)\n        min_product = min(temp, current_max * num, min_product * num)\n        current_max = max(temp, current_max * num, min_product * num)\n        \n        if current_max > 0:\n            break\n            \n    return current_max\n\n# Test cases\nprint(max_subarray_product([1, -2, -3, 0, 7, -8, -2]))  # Expected output: 112\nprint(max_subarray_product([6, -3, -10, 0, 2]))       # Expected output: 180\nprint(max_subarray_product([-2, -40, 0, -2, -3]))     # Expected output: 80",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_value(d, value):\n    # Check if all values in the dictionary are equal to the given value.\n    return len(set(d.values())) == 1",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(dct):\n    return {k: v for k, v in dct.items() if v is not None}\n\n# Test cases\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None}) == {'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None}) == {'c2': 'Green'}",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_peak(arr, n):\n    # Check if the first element is greater than or equal to the last element\n    if arr[0] >= arr[n-1]:\n        return arr[0]\n    \n    # Initialize variables for binary search\n    low = 0\n    high = n - 1\n    \n    while low < high:\n        mid = (low + high) // 2\n        \n        # If middle element is less than its right neighbor, then the peak must be on the right half\n        if arr[mid] < arr[mid + 1]:\n            low = mid + 1\n        else:\n            high = mid\n            \n    return arr[high]\n\n# Test cases\nprint(find_peak([1, 3, 20, 4, 1, 0], 6))  # Expected output: 2\nprint(find_peak([2, 3, 4, 5, 6], 5))      # Expected output: 4\nprint(find_peak([8, 9, 11, 12, 14, 15], 6))  # Expected output: 5",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'decimal_to_Octal' is not defined",
      "Test 2: FAIL - name 'decimal_to_Octal' is not defined",
      "Test 3: FAIL - name 'decimal_to_Octal' is not defined"
    ],
    "generated_code": "def decimal_to_octal(decimal_number):\n    # Initialize an empty string to store the octal representation\n    octal_representation = \"\"\n    \n    # Continue converting until the decimal number is reduced to zero\n    while decimal_number > 0:\n        # Get the remainder when divided by 8 and append it to the front of octal_representation\n        octal_representation = str(decimal_number % 8) + octal_representation\n        # Update the decimal number for the next iteration\n        decimal_number //= 8\n    \n    return int(octal_representation)\n\n# Test cases\nprint(decimal_to_octal(10))  # Expected output: 12\nprint(decimal_to_octal(2))   # Expected output: 2\nprint(decimal_to_octal(33))  # Expected output: 41",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_product(arr, k):\n    arr.sort()\n    max_product = 1\n    for i in range(k):\n        max_product *= arr[-(i+1)]\n    return max_product",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_profit(prices, k):\n    if not prices:\n        return 0\n    \n    n = len(prices)\n    \n    # Initialize variables for dynamic programming\n    dp = [[float('-inf')] * (k + 1) for _ in range(n)]\n    last_day = [0] * (k + 1)\n    \n    # Fill up the dp array with initial values\n    for i in range(1, n + 1):\n        for j in range(1, min(i, k) + 1):\n            # Calculate current profit\n            cur_profit = prices[i - 1] - last_day[j - 1]\n            \n            # Update dp values and store result in dp[i][j]\n            dp[i][j] = max(dp[i-1][j], cur_profit + last_day[j])\n            last_day[j] = max(last_day[j], dp[i][j])\n    \n    return last_day[k]\n\n# Test cases\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3))  # Expected output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2))     # Expected output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2))          # Expected output: 2",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: not enough values to unpack (expected 2, got 1)"
    ],
    "generated_code": "def add_pairwise(tuples):\n    # Use list comprehension and zip to iterate over pairs and their sums\n    result = [(a + b) for a, b in zip(*tuples)]\n    return tuple(result)\n\n# Test cases\nprint(add_pairwise([(1, 5, 7, 8, 10)]))  # Expected output: (6, 12, 15, 18)\nprint(add_pairwise([(2, 6, 8, 9, 11)]))  # Expected output: (8, 14, 17, 20)\nprint(add_pairwise([(3, 7, 9, 10, 12)]))  # Expected output: (10, 16, 19, 22)",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_remainder(arr, n, m):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % m",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Consecutive(lst):\n    # Check if all elements in the list are consecutive integers starting from 1\n    return lst == list(range(1, max(lst) + 1))",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def tuple_intersection(tuples_list, extra_elements):\n    # Find unique tuples from all lists in tuples_list\n    unique_tuples = set(tuple(sorted(item)) for sublist in tuples_list for item in sublist)\n    \n    # Combine with additional tuples and convert back to list of tuples\n    combined_and_sorted = sorted(set.union(*map(set, [tuple(sorted(item)) for item in tuples_list]), extra_elements))\n    \n    # Convert each element in the list into a frozenset to eliminate duplicates\n    final_result = {frozenset(combined_and_sorted[i:i+2]) for i in range(0, len(combined_and_sorted), 2)}\n    \n    return final_result\n\n# Test cases\nprint(tuple_intersection([[(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]], [(5, 4), (3, 4), (6, 5), (9, 11)])) \n# Expected output: {(3, 4), (4, 5), (5, 6), (6, 5)}\n\nprint(tuple_intersection([[(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]], [(1, 4), (7, 4), (16, 12), (10, 13)]))\n# Expected output: {(4, 1), (1, 4), (7, 4)}\n\nprint(tuple_intersection([[(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]], [(11, 2), (2, 3), (6, 2), (1, 3)]))\n# Expected output: {(1, 3), (2, 3)}",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef sort_counter(counter_obj):\n    \"\"\"\n    Sorts a given counter object based on its values.\n    \n    Parameters:\n    - counter_obj: An instance of Counter representing the count of items in a collection.\n    \n    Returns:\n    - A list of tuples sorted by their values. Each tuple contains an item and its count from the original counter.\n    \"\"\"\n    return sorted(counter_obj.items(), key=lambda x: x[1], reverse=True)",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\n    # Find the maximum value in the array\n    max_value = max(arr)\n    # Find the minimum value in the array\n    min_value = min(arr)\n    # Return the sum of the maximum and minimum values\n    return max_value + min_value",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_lower(s):\n    # Check if all characters in the string are lowercase letters and return the result\n    return s.islower()\n\n# Test cases\nprint(is_lower(\"InValid\"))  # Expected output: True\nprint(is_lower(\"TruE\"))     # Expected output: False\nprint(is_lower(\"SenTenCE\")) # Expected output: True",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_lowercase(input_string):\n    return ''.join([char for char in input_string if not char.islower()])\n\n# Test cases\nprint(remove_lowercase(\"PYTHOn\"))  # Expected output: 'PYTH'\nprint(remove_lowercase(\"FINd\"))    # Expected output: 'FID'\nprint(remove_lowercase(\"STRing\"))  # Expected output: 'STRG'",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(number):\n    \"\"\"\n    Finds and returns the first non-zero digit in a given positive integer.\n    \n    Args:\n    number (int): A positive integer from which to extract the first non-zero digit.\n    \n    Returns:\n    int: The first non-zero digit of the input number.\n    \"\"\"\n    # Convert the number to its absolute value as negative numbers can cause issues\n    num = abs(number)\n    if num < 10:\n        return num\n    \n    while num >= 10:\n        num //= 10\n    \n    return num\n\n# Check function with provided data points\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(s):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_char = \"\"\n    max_count = 0\n    \n    # Find the maximum occurring character and its count\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n            \n    return max_char",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_subset_sum(nums, target, n):\n    # Check if the sum can be achieved using dynamic programming\n    dp = [False] * (target + 1)\n    dp[0] = True\n    \n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n                \n    return dp[target]",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef match(s):\n    \"\"\"\n    This function checks if there is at least one sequence where an uppercase letter \n    is immediately followed by a lowercase letter in the input string s.\n    \n    Parameters:\n    - s (str): The input string to be checked.\n    \n    Returns:\n    - str: \"Yes\" if such a sequence exists, otherwise returns \"No\".\n    \"\"\"\n    # Using regular expression to search for patterns like [A-Z][a-z]\n    pattern = r'(?i)([A-Z])(?=[a-z])'\n    match_result = re.search(pattern, s)\n    if match_result:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test Cases\nprint(match(\"Geeks\"))  # Expected output: Yes\nprint(match(\"geeksforGeeks\"))  # Expected output: Yes\nprint(match(\"geeks\"))  # Expected output: No",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    factorial = 1\n    while True:\n        if factorial % x == 0:\n            return i\n        factorial *= i\n        i += 1",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_matching_tuple(tup1, tup2):\n    result = []\n    for t in tup1:\n        if all(x not in t for x in tup2[0]):\n            result.append(t)\n    return tuple(result)\n\n# Test cases\nprint(remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])); # Should return: [('you', '?')]\nprint(remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')])); # Should return: [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nprint(remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')])); # Should return: [('Its', 'been'), ('day', 'without')])",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def largest_palindrome(arr, n):\n    max_palindrome = arr[0]\n    for i in range(n):\n        if arr[i] == arr[::-1]:\n            max_palindrome = max(max_palindrome, arr[i])\n    return max_palindrome\n\nprint(largest_palindrome([1, 232, 54545, 999991], 4)) # Should output 54545\nprint(largest_palindrome([1, 2, 3, 4, 5, 50], 6))   # Should output 5\nprint(largest_palindrome([1, 3, 7, 9, 45], 5))      # Should output 9",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"Compute binomial probability.\n    \n    Args:\n        n (int): Number of trials.\n        k (int): Number of successes.\n        p (float): Probability of success on an individual trial.\n        \n    Returns:\n        float: Binomial probability.\n    \"\"\"\n    # Calculate binomial coefficient using factorial formula\n    binom_coeff = math.comb(n, k)\n    # Calculate binomial probability as multiplication of binomial coefficient and probabilities raised to respective powers\n    prob = binom_coeff * pow(p, k) * pow((1-p), n-k)\n    return prob\n\n# Test cases\nprint(binomial_probability(10, 5, 1.0/3))  # Expected output: 0.13656454808718185\nprint(binomial_probability(11, 6, 2.0/4))  # Expected output: 0.2255859375\nprint(binomial_probability(12, 7, 3.0/5))  # Expected output: 0.227030335488",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuples_list):\n    # Sort the list of tuples based on the second item of each tuple\n    sorted_tuples = sorted(tuples_list, key=lambda x: x[1])\n    return sorted_tuples",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def area_pentagon(s):\n    # The formula for the area of a regular pentagon with side length s is:\n    # Area = (s^2 * √(5 + 2√5)) / 4\n    return ((s ** 2) * (math.sqrt(5 + 2 * math.sqrt(5)))) / 4",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Largest(arr):\n    max_value = max(arr)\n    count_max = arr.count(max_value)\n    return count_max",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef extract_symmetric(tuples_list: List[Tuple[int]]) -> List[Tuple[int]]:\n    \"\"\"\n    Extracts all unique symmetric pairs from a given list of tuples.\n    \n    Args:\n    tuples_list: A list of tuples containing integers.\n    \n    Returns:\n    A list of tuples where each tuple is a pair that is symmetric with another tuple in the input list.\n    \"\"\"\n    symmetric_pairs = set()\n    for i, (x, y) in enumerate(tuples_list):\n        if x != y and (y, x) not in symmetric_pairs and (y, x) not in tuples_list[:i]:\n            symmetric_pairs.add((min(x, y), max(x, y)))\n    return list(symmetric_pairs)\n\n# Test cases\nprint(extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]))  # Expected output: [(8, 9), (6, 7)]\nprint(extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)]))  # Expected output: [(9, 10), (7, 8)]\nprint(extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)]))  # Expected output: [(8, 9), (10, 11)]",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_gp(a, n, r):\n    # Calculate the sum of geometric progression series using formula\n    return round((a * ((r ** n) - 1) / (r - 1)), 0)",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_search(arr, target):\n    \"\"\"\n    Searches for the target value within the sorted array arr.\n    \n    Parameters:\n    arr (list): A list of integers where we need to find the target.\n    target (int): The integer which is to be searched within the array.\n    \n    Returns:\n    bool: True if the target exists in the array, otherwise returns False.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False\n\n# Test cases\nprint(binary_search([1,2,3,5,8], 6)) # Output: False\nprint(binary_search([7, 8, 9, 10, 13], 10)) # Output: True\nprint(binary_search([11, 13, 14, 19, 22, 36], 23)) # Output: False",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'current_center_y' is not defined. Did you mean: 'current_center_x'?"
    ],
    "generated_code": "import math\n\ndef calculate_polygons(x_count, y_start, x_offset, y_offset, num_hexagons):\n    result = []\n    \n    # Calculate the radius for each set of hexagons\n    radius = math.sqrt((x_count + x_offset)**2 / 2)\n    \n    # Calculate the center point for each hexagon\n    center_x = radius * ((-x_count/2) + (num_hexagons - 1)/2)\n    center_y = y_start + radius\n    \n    # Iterate over each set of hexagons and calculate their coordinates\n    for i in range(num_hexagons):\n        current_center_x = center_x + i * x_offset\n        current_radius = radius * math.sqrt(i / num_hexagons)\n        \n        start_angle = math.radians((-i + 1) * 120)\n        end_angle = math.radians((-i) * 120)\n        \n        for j in range(6):\n            angle = start_angle + j * math.pi / 3\n            x_step = int(current_radius * math.cos(angle))\n            y_step = int(current_radius * math.sin(angle))\n            \n            # Add the coordinate tuple to the result list\n            result.append(((current_center_x + x_step, current_center_y + y_step), ))\n    \n    return result\n\n# Test the function with provided data points\nprint(calculate_polygons(1, 1, 4, 4, 3))  # Expected output is one set of polygons as given in test case 1\nprint(calculate_polygons(5, 4, 7, 9, 8))  # Expected output is another set of polygons as given in test case 2\nprint(calculate_polygons(9, 6, 4, 3, 2))  # Expected output is yet another set of polygons as given in test case 3",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def binary_to_integer(binary_tuple):\n    # Convert the binary tuple into an integer string\n    binary_str = ''.join(str(bit) for bit in binary_tuple)\n    \n    # Return the integer value\n    return int(binary_str)\n\n# Test cases\nprint(binary_to_integer((1, 1, 0, 1, 0, 0, 1)))  # Output: 105\nprint(binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)))  # Output: 101\nprint(binary_to_integer((1, 1, 0, 1, 0, 1)))  # Output: 53",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(input_string):\n    # Use regular expression to replace all occurrences of lowercase letters with an empty string\n    result = re.sub('[a-z]', '', input_string)\n    return result",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    # Use `heapq.nsmallest` to get the k smallest elements in nums.\n    return heapq.nsmallest(k, nums)",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'surfacearea_cone' is not defined",
      "Test 2: FAIL - name 'surfacearea_cone' is not defined",
      "Test 3: FAIL - name 'surfacearea_cone' is not defined"
    ],
    "generated_code": "import math\n\ndef surface_area_of_cylinder(radius, height):\n    base_area = math.pi * radius**2\n    lateral_surface_area = math.pi * radius * height\n    total_surface_area = 2 * base_area + lateral_surface_area\n    return total_surface_area\n\n# Test cases\nprint(surface_area_of_cylinder(5, 12)) # Expected output: approximately 282.7433388230814\nprint(surface_area_of_cylinder(10, 15)) # Expected output: approximately 880.5179353159282\nprint(surface_area_of_cylinder(19, 17)) # Expected output: approximately 2655.923961165254",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def gcd(a, b):\n    while(b != 0):\n        t = b\n        b = a % b\n        a = t\n    return a",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef diameter_circle(radius):\n    return 2 * radius * math.sqrt(2)",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(lst):\n    # Use join method to concatenate all elements in the list with spaces and remove extra spaces\n    return \" \".join(lst).strip()\n\n# Test cases\nprint(concatenate_elements(['hello','there','have','a','rocky','day'])) # Output: \"hello there have a rocky day\"\nprint(concatenate_elements(['Hi', 'there', 'How','are', 'you'])) # Output: \"Hi there How are you\"\nprint(concatenate_elements(['Part', 'of', 'the','journey', 'is', 'end'])) # Output: \"Part of the journey is end\"",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def num_comm_div(num1, num2):\n    \"\"\"\n    Finds and returns the greatest common divisor of two integers.\n    \n    Parameters:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n        \n    Returns:\n        int: The greatest common divisor of num1 and num2.\n    \"\"\"\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return abs(x)\n    \n    return gcd(num1, num2)\n\n# Test cases\nprint(num_comm_div(2,4)) # Expected output: 2\nprint(num_comm_div(2,8)) # Expected output: 2\nprint(num_comm_div(12,24)) # Expected output: 6",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(x, y):\n    return x % y",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef add_consecutive_nums(nums: List[int]) -> List[int]:\n    result = []\n    current_sum = 0\n    for num in nums:\n        if len(result) > 0 and result[-1] + 1 == num:\n            current_sum += num\n        else:\n            result.append(current_sum)\n            current_sum = num\n    result.append(current_sum)\n    return result",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Series' is not defined",
      "Test 2: FAIL - name 'sum_Of_Series' is not defined",
      "Test 3: FAIL - name 'sum_Of_Series' is not defined"
    ],
    "generated_code": "def sum_of_series(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total\n\n# Test cases\nassert sum_of_series(5) == 225\nassert sum_of_series(2) == 9\nassert sum_of_series(3) == 36",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_order(nums):\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            # Move zero to the front\n            nums.insert(0, nums.pop(i))\n    return nums",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def permutation_coefficient(p, n):\n    \"\"\"\n    Calculate the permutation coefficient P(n, k).\n    \n    Args:\n        p (int): The value of n.\n        n (int): The total number of elements.\n        \n    Returns:\n        int: The calculated permutation coefficient P(n, k).\n    \"\"\"\n    return factorial(p) // factorial(p - n)\n\n# Helper function to calculate factorial\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(words_list, to_remove):\n    \"\"\"\n    Removes specified words from a given list of words.\n    \n    :param words_list: List[str] - A list of strings representing colors.\n    :param to_remove: List[str] - A list of strings representing words to be removed from the first list.\n    :return: List[str] - The modified list after removing the specified words.\n    \"\"\"\n    return [word for word in words_list if word not in to_remove]\n\n# Test cases to verify the correctness of the function\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange']) == ['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['black', 'orange']) == ['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['blue', 'white']) == ['red', 'green', 'black', 'orange']\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'same_order' is not defined",
      "Test 2: FAIL - name 'same_order' is not defined",
      "Test 3: FAIL - name 'same_order' is not defined"
    ],
    "generated_code": "def is_in_same_order(list1, list2):\n    return sorted(list1) == sorted(list2)",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def average_Odd(n):\n    total_sum = sum(i for i in range(1, n+1, 2))\n    count_of_odds = len([i for i in range(1, n+1, 2)])\n    return total_sum / count_of_odds if count_of_odds > 0 else 0",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def no_of_subsequences(arr, k):\n    count = [0] * len(arr)\n    n = len(arr)\n\n    # Initialize dp table with zeros\n    dp_table = [[0] * (k + 1) for _ in range(n)]\n\n    # Fill the dp table\n    for i in range(n):\n        for j in range(k, -1, -1):\n            if j == 0:\n                dp_table[i][j] += 1\n            else:\n                for x in arr[:i]:\n                    dp_table[i][j] += dp_table[i-1][j-x]\n\n    result = sum(dp_table[n-1])\n    \n    return result",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 601,
    "problem_statement": "Write a function to find the longest chain which can be formed from the given set of pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "from typing import List, Tuple\n\nclass Pair:\n    def __init__(self, start: int, end: int):\n        self.start = start\n        self.end = end\n\ndef max_chain_length(pairs: List[Pair], length: int) -> int:\n    if not pairs or length == 0:\n        return 0\n    \n    dp = [0] * (length + 1)\n    \n    for i in range(length + 1):\n        for j in range(i):\n            left, right = dp[j], dp[i - 1]\n            if pairs[j].end >= pairs[i].start:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return dp[length]\n\n# Test cases\nif __name__ == \"__main__\":\n    # Example usage\n    print(max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4))  # Expected output: 3\n    print(max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4))  # Expected output: 4\n    print(max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5))  # Expected output: 5",
    "test_cases": [
      "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3",
      "assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4",
      "assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5"
    ]
  },
  {
    "mbpp_id": 602,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_cases": [
      "assert first_repeated_char(\"abcabc\") == \"a\"",
      "assert first_repeated_char(\"abc\") == \"None\"",
      "assert first_repeated_char(\"123123\") == \"1\""
    ]
  },
  {
    "mbpp_id": 603,
    "problem_statement": "Write a function to get a lucid number smaller than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'get_ludic' is not defined",
      "Test 2: FAIL - name 'get_ludic' is not defined",
      "Test 3: FAIL - name 'get_ludic' is not defined"
    ],
    "generated_code": "def get_lucid_numbers(n):\n    result = []\n    i = 1\n    while len(result) < n:\n        if all((i % j != 0 for j in range(2, int(i**0.5) + 1))):\n            result.append(i)\n        i += 1\n    return result[:n]\n\nprint(get_lucid_numbers(10))  # Output: [1, 2, 3, 5, 7]\nprint(get_lucid_numbers(25))  # Output: [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nprint(get_lucid_numbers(45))  # Output: [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
    "test_cases": [
      "assert get_ludic(10) == [1, 2, 3, 5, 7]",
      "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]",
      "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
    ]
  },
  {
    "mbpp_id": 604,
    "problem_statement": "Write a function to reverse words in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_words(s):\n    return ' '.join(reversed(s.split()))\n\n# Test cases\nprint(reverse_words(\"python program\"))  # Expected output: \"program python\"\nprint(reverse_words(\"java language\"))   # Expected output: \"language java\"\nprint(reverse_words(\"indian man\"))      # Expected output: \"man indian\"",
    "test_cases": [
      "assert reverse_words(\"python program\")==(\"program python\")",
      "assert reverse_words(\"java language\")==(\"language java\")",
      "assert reverse_words(\"indian man\")==(\"man indian\")"
    ]
  },
  {
    "mbpp_id": 605,
    "problem_statement": "Write a function to check if the given integer is a prime number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def prime_num(n):\n    # Check for negative numbers and zero\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True",
    "test_cases": [
      "assert prime_num(13)==True",
      "assert prime_num(7)==True",
      "assert prime_num(-1010)==False"
    ]
  },
  {
    "mbpp_id": 606,
    "problem_statement": "Write a function to convert degrees to radians.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)",
    "test_cases": [
      "assert radian_degree(90)==1.5707963267948966",
      "assert radian_degree(60)==1.0471975511965976",
      "assert radian_degree(120)==2.0943951023931953"
    ]
  },
  {
    "mbpp_id": 607,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_literals(s, p):\n    match = re.search(p, s)\n    if match:\n        start, end = match.span()\n        return (p, start, end)\n    else:\n        return None\n\n# Test cases\nprint(find_literals('The quick brown fox jumps over the lazy dog.', 'fox'))\nprint(find_literals('Its been a very crazy procedure right', 'crazy'))\nprint(find_literals('Hardest choices required strongest will', 'will'))",
    "test_cases": [
      "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
      "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)",
      "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"
    ]
  },
  {
    "mbpp_id": 608,
    "problem_statement": "Write a python function to find nth bell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def bell_Number(n):\n    # Initialize array to store Bell numbers\n    B = [0] * (n + 1)\n    B[0] = 1  # Base case: one way to make an empty combination\n    \n    for i in range(1, n + 1):\n        # Update all elements of current row\n        for j in range(i, 0, -1):\n            B[j] += B[j - 1]\n    \n    return B[n]\n\n# Test cases\nprint(bell_Number(2))  # Expected output: 2\nprint(bell_Number(3))  # Expected output: 5\nprint(bell_Number(4))  # Expected output: 15",
    "test_cases": [
      "assert bell_Number(2) == 2",
      "assert bell_Number(3) == 5",
      "assert bell_Number(4) == 15"
    ]
  },
  {
    "mbpp_id": 609,
    "problem_statement": "Write a python function to find minimum possible value for the given periodic function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: cannot reshape array of size 3 into shape (10)"
    ],
    "generated_code": "import numpy as np\n\ndef floor_min(num_periods, periods_values):\n    \"\"\"\n    Find the minimum possible value of the periodic function defined by num_periods and periods_values.\n    \n    Args:\n        num_periods (int): The number of distinct values in the periods array.\n        periods_values (list): A list containing n integers representing the values at each period.\n        \n    Returns:\n        int: The minimum possible value of the periodic function.\n    \"\"\"\n\n    # Create an infinite series with repeating patterns based on periods_values\n    pattern = np.array(periods_values).reshape(-1, num_periods)\n    repeated_pattern = np.tile(pattern, [num_periods // len(periods_values), 1])\n    \n    # Initialize min_value to a very large negative number\n    min_value = -np.inf\n    \n    # Iterate through all possible combinations of the first 'k' elements in the repeated_pattern\n    for k in range(len(repeated_pattern)):\n        current_value = repeated_pattern[k].min()\n        if current_value < min_value:\n            min_value = current_value\n            \n    return min_value\n\n# Test cases\nprint(floor_min(10, [10, 20, 30]))  # Expected output: 15\nprint(floor_min(1, [1, 2, 1]))      # Expected output: 0\nprint(floor_min(11, [11, 10, 9]))   # Expected output: 9",
    "test_cases": [
      "assert floor_Min(10,20,30) == 15",
      "assert floor_Min(1,2,1) == 0",
      "assert floor_Min(11,10,9) == 9"
    ]
  },
  {
    "mbpp_id": 610,
    "problem_statement": "Write a python function to remove the k'th element from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_kth_element(nums, k):\n    nums.pop(k-1)\n    return nums",
    "test_cases": [
      "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
      "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
      "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
    ]
  },
  {
    "mbpp_id": 611,
    "problem_statement": "Write a function to find the maximum of nth column from the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_of_nth(tuples_list, n):\n    # Extract the nth element from each subtuple in tuples_list and find its maximum value.\n    return max([sublist[n-1] for sublist in tuples_list])",
    "test_cases": [
      "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19",
      "assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10",
      "assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11"
    ]
  },
  {
    "mbpp_id": 612,
    "problem_statement": "Write a python function to merge the first and last elements separately in a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge(lst):\n    # Flatten the outer list into a single list containing all elements\n    flat_list = [item for sublist in lst for item in sublist]\n    \n    # Create two new sublists with the first and last elements from each inner list\n    first_elements = [flat_list[0]] * len(flat_list)\n    last_elements = [flat_list[-1]] * len(flat_list)\n    \n    # Merge the first elements, middle elements, and last elements back together\n    merged_list = []\n    i = 0\n    j = 0\n    \n    while i < len(first_elements) and j < len(last_elements):\n        if i % 2 == 0:\n            merged_list.append(first_elements[i])\n        else:\n            merged_list.append(last_elements[j])\n        \n        i += 1\n        j += 1\n        \n    # Add remaining elements from either the first_elements or last_elements\n    merged_list.extend(first_elements[i:])\n    merged_list.extend(last_elements[j:])\n    \n    return merged_list",
    "test_cases": [
      "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
      "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]",
      "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
    ]
  },
  {
    "mbpp_id": 613,
    "problem_statement": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_value(record_list):\n    max_values = []\n    for key, values in record_list:\n        if not isinstance(values, list) or len(values) == 0:\n            continue\n        max_values.append((key, max(values)))\n    return max_values\n\n# Test cases\nprint(maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]))  # Expected output: [('key1', 5), ('key2', 4), ('key3', 9)]\nprint(maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]))  # Expected output: [('key1', 6), ('key2', 5), ('key3', 10)]\nprint(maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]))  # Expected output: [('key1', 7), ('key2', 6), ('key3', 11)]",
    "test_cases": [
      "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]",
      "assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]",
      "assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]"
    ]
  },
  {
    "mbpp_id": 614,
    "problem_statement": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cummulative_sum(tuples_list):\n    total = 0\n    for tup in tuples_list:\n        for num in tup:\n            total += num\n    return total",
    "test_cases": [
      "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",
      "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37",
      "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"
    ]
  },
  {
    "mbpp_id": 615,
    "problem_statement": "Write a function to find average value of the numbers in a given tuple of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def average_tuple(tuples_list):\n    return [sum(sublist) / len(sublist) for sublist in zip(*tuples_list)]",
    "test_cases": [
      "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
      "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]",
      "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"
    ]
  },
  {
    "mbpp_id": 616,
    "problem_statement": "Write a function to perfom the modulo of tuple elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_modulo(tup1, tup2):\n    result = [a % b for a, b in zip(tup1, tup2)]\n    return tuple(result)\n\n# Test cases\nprint(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))) # Expected output: (0, 4, 5, 1)\nprint(tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6))) # Expected output: (5, 5, 6, 1)\nprint(tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7))) # Expected output: (5, 6, 7, 1)",
    "test_cases": [
      "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
      "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
      "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
    ]
  },
  {
    "mbpp_id": 617,
    "problem_statement": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Jumps(length, steps, d):\n    if length % steps == 0:\n        return int(length / steps)\n    else:\n        return -1\n\n# Example test cases\nprint(min_Jumps(3, 4, 11))  # Expected output: 3.5\nprint(min_Jumps(3, 4, 0))   # Expected output: 0\nprint(min_Jumps(11, 14, 11))# Expected output: 1",
    "test_cases": [
      "assert min_Jumps(3,4,11)==3.5",
      "assert min_Jumps(3,4,0)==0",
      "assert min_Jumps(11,14,11)==1"
    ]
  },
  {
    "mbpp_id": 618,
    "problem_statement": "Write a function to divide two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef div_list(list1: List[int], list2: List[int]) -> List[float]:\n    \"\"\"\n    Divide each element of the first list by corresponding elements in the second list using map and lambda.\n    \n    Args:\n    - list1: A list of integers representing the dividend list.\n    - list2: A list of integers representing the divisor list.\n    \n    Returns:\n    - A list of floats where each element is the result of dividing the corresponding elements of the input lists.\n    \"\"\"\n    return list(map(lambda x, y: x / y if y != 0 else float('inf'), list1, list2))\n\n# Test Cases\nprint(div_list([4,5,6],[1, 2, 3])) # Expected output: [4.0, 2.5, 2.0]\nprint(div_list([3,2],[1,4]))      # Expected output: [3.0, 0.5]\nprint(div_list([90,120],[50,70])) # Expected output: [1.8, 1.7142857142857142]",
    "test_cases": [
      "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
      "assert div_list([3,2],[1,4])==[3.0, 0.5]",
      "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
    ]
  },
  {
    "mbpp_id": 619,
    "problem_statement": "Write a function to move all the numbers in it to the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def move_num(s):\n    result = \"\"\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            start = i\n            while i < len(s) and s[i].isdigit():\n                i += 1\n            temp_str = str(int(s[start:i])) + s[i:]\n            result += temp_str\n        else:\n            result += s[i]\n            i += 1\n    return result",
    "test_cases": [
      "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
      "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'",
      "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"
    ]
  },
  {
    "mbpp_id": 620,
    "problem_statement": "Write a function to find the largest subset where each pair is divisible.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def largest_subset(arr, k):\n    arr.sort()\n    dp = [1] * len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] % arr[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n                \n    max_size = max(dp)\n    size = []\n    index = dp.index(max_size)\n    \n    while True:\n        size.append(index+1)\n        if index == 0:\n            break\n        else:\n            index -= 1\n    \n    return len(size), sorted(size)\n\n# Test cases\nprint(largest_subset([ 1, 3, 6, 13, 17, 18 ], 6)) # Expected output: (4, [3, 6, 9, 18])\nprint(largest_subset([10, 5, 3, 15, 20], 5)) # Expected output: (3, [3, 5, 15])\nprint(largest_subset([18, 1, 3, 6, 13, 17], 6)) # Expected output: (4, [1, 3, 6, 9])",
    "test_cases": [
      "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4",
      "assert largest_subset([10, 5, 3, 15, 20], 5) == 3",
      "assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4"
    ]
  },
  {
    "mbpp_id": 621,
    "problem_statement": "Write a function to increment the numeric values in the given strings by k.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def increment_numerics(strings, k):\n    # Split each string into list of characters\n    for i in range(len(strings)):\n        num_str = ''.join(filter(str.isdigit, strings[i]))\n        if num_str:\n            # Convert string to integer and add k\n            strings[i] = str(int(num_str) + k)\n    return strings",
    "test_cases": [
      "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']",
      "assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']",
      "assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"
    ]
  },
  {
    "mbpp_id": 622,
    "problem_statement": "Write a function to find the median of two sorted arrays of same size.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - get_median() takes 2 positional arguments but 3 were given",
      "Test 2: FAIL - get_median() takes 2 positional arguments but 3 were given",
      "Test 3: FAIL - get_median() takes 2 positional arguments but 3 were given"
    ],
    "generated_code": "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int]) -> float:\n    \"\"\"\n    Finds the median of two sorted arrays of same size.\n    \n    Args:\n    nums1: First sorted array.\n    nums2: Second sorted array.\n    \n    Returns:\n    The median as a floating point number.\n    \"\"\"\n    merged = []\n    i, j = 0, 0\n    \n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] <= nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n            \n    merged.extend(nums1[i:])\n    merged.extend(nums2[j:])\n    \n    length = len(merged)\n    if length % 2 == 0:\n        return (merged[length // 2 - 1] + merged[length // 2]) / 2\n    else:\n        return merged[length // 2]",
    "test_cases": [
      "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
      "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
      "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"
    ]
  },
  {
    "mbpp_id": 623,
    "problem_statement": "Write a function to find the n-th power of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def nth_nums(lst, n):\n    return [x**n for x in lst]\n\n# Test cases\nprint(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)) # Output: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nprint(nth_nums([10,20,30], 3)) # Output: ([1000, 8000, 27000])\nprint(nth_nums([12,15], 5)) # Output: ([248832, 759375])",
    "test_cases": [
      "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
      "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
      "assert nth_nums([12,15],5)==([248832, 759375])"
    ]
  },
  {
    "mbpp_id": 624,
    "problem_statement": "Write a python function to convert the given string to upper case.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_upper(s):\n    \"\"\"\n    Convert a given string to uppercase.\n    \n    Parameters:\n    s (str): The input string to be converted.\n    \n    Returns:\n    str: The string in uppercase format.\n    \"\"\"\n    return s.upper()\n\n# Test cases\nassert is_upper(\"person\") == \"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"\n\nprint(is_upper(\"person\"))  # Expected output: PERSON",
    "test_cases": [
      "assert is_upper(\"person\") ==\"PERSON\"",
      "assert is_upper(\"final\") == \"FINAL\"",
      "assert is_upper(\"Valid\") == \"VALID\""
    ]
  },
  {
    "mbpp_id": 625,
    "problem_statement": "Write a python function to interchange first and last elements in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with the first and last elements swapped.\n    \n    :param lst: List of elements where the first and last elements need to be swapped.\n    :return: A new list with the first and last elements swapped.\n    \"\"\"\n    # Swapping the first and last element in the list\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert swap_List([1,2,3]) == [3,2,1]",
      "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]",
      "assert swap_List([4,5,6]) == [6,5,4]"
    ]
  },
  {
    "mbpp_id": 626,
    "problem_statement": "Write a python function to find the largest triangle that can be inscribed in the semicircle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: Circle radius must be positive."
    ],
    "generated_code": "import math\n\ndef calculate_radius(circle_radius):\n    \"\"\"Calculate the radius of the circle given its diameter.\"\"\"\n    if circle_radius <= 0:\n        raise ValueError(\"Circle radius must be positive.\")\n    else:\n        return circle_radius / 2\n\ndef get_triangle_area(base_length, circle_diameter):\n    \"\"\"\n    Calculates the area of the largest right-angled triangle that can be inscribed\n    within a semicircle.\n    \n    Parameters:\n    base_length (float): The length of the base of the triangle in terms of the \n                         diameter of the circle.\n    \n    Returns:\n    float: The area of the triangle.\n    \"\"\"\n    # Calculate half the base of the triangle which is also the diameter of the semi-circle\n    diameter = base_length * 2\n    \n    # Radius of the circle from the calculated diameter\n    circle_radius = calculate_radius(diameter)\n    \n    # Base and height of the right-angled triangle are equal because it's an isosceles triangle\n    height = diameter * 2\n    \n    # Area of a triangle formula: 1/2 * base * height\n    triangle_area = 0.5 * diameter * height\n    \n    return triangle_area\n\n# Test cases provided in the task description for verification\ndef check_function():\n    assert abs(get_triangle_area(0, 2) - 0) < 0.001, \"Test case 1 failed\"\n    assert abs(get_triangle_area(-1, 4) - (-1)) < 0.001, \"Test case 2 failed\"\n    assert abs(get_triangle_area(2, 6) - 8) < 0.001, \"Test case 3 failed\"\n\ncheck_function()",
    "test_cases": [
      "assert triangle_area(0) == 0",
      "assert triangle_area(-1) == -1",
      "assert triangle_area(2) == 4"
    ]
  },
  {
    "mbpp_id": 627,
    "problem_statement": "Write a python function to find the smallest missing number from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def find_first_missing(arr):\n    n = len(arr)\n    for i in range(n):\n        while arr[i] < n and arr[arr[i]] != arr[i]:\n            swap(arr, arr[i], arr[arr[i]])\n    for i in range(n):\n        if i + 1 != arr[i]:\n            return i + 1\n    return n + 1\n\ndef swap(arr, x, y):\n    temp = arr[x]\n    arr[x] = arr[y]\n    arr[y] = temp\n\n# Test Cases\nprint(find_first_missing([0,1,2,3])) # Expected output: 4\nprint(find_first_missing([0,1,2,6,9])) # Expected output: 3\nprint(find_first_missing([2,3,5,8,9])) # Expected output: 0",
    "test_cases": [
      "assert find_First_Missing([0,1,2,3],0,3) == 4",
      "assert find_First_Missing([0,1,2,6,9],0,4) == 3",
      "assert find_First_Missing([2,3,5,8,9],0,4) == 0"
    ]
  },
  {
    "mbpp_id": 628,
    "problem_statement": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_spaces(input_string):\n    # Replace spaces in the input string with '%20' and return the result\n    return input_string.replace(' ', '%20')\n\n# Test cases\nprint(replace_spaces(\"My Name is Dawood\"))  # Expected output: \"My%20Name%20is%20Dawood\"\nprint(replace_spaces(\"I am a Programmer\"))  # Expected output: \"I%20am%20a%20Programmer\"\nprint(replace_spaces(\"I love Coding\"))      # Expected output: \"I%20love%20Coding\"",
    "test_cases": [
      "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'",
      "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'",
      "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"
    ]
  },
  {
    "mbpp_id": 629,
    "problem_statement": "Write a python function to find even numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(lst):\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers.\n    \n    Example usage:\n    >>> split([1,2,3,4,5])\n    [2, 4]\n    >>> split([4,5,6,7,8,0,1])\n    [4, 6, 8, 0]\n    >>> split([8,12,15,19])\n    [8, 12]\n    \"\"\"\n    # Filter out odd numbers and return only even numbers\n    return [num for num in lst if num % 2 == 0]\n\n# Check function with provided data points\nassert split([1,2,3,4,5]) == [2, 4], \"Test case 1 failed\"\nassert split([4,5,6,7,8,0,1]) == [4, 6, 8, 0], \"Test case 2 failed\"\nassert split([8,12,15,19]) == [8, 12], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert Split([1,2,3,4,5]) == [2,4]",
      "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
      "assert Split ([8,12,15,19]) == [8,12]"
    ]
  },
  {
    "mbpp_id": 630,
    "problem_statement": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_coordinates(coord):\n    result = []\n    x, y = coord\n    \n    for i in range(y - abs(x - y), y + abs(x - y) + 1):\n        if i != y:\n            result.append([x, i])\n    \n    return result\n\n# Test cases\nprint(get_coordinates((3, 4)))  # Expected output: [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nprint(get_coordinates((4, 5)))  # Expected output: [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nprint(get_coordinates((5, 6)))  # Expected output: [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
    "test_cases": [
      "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
      "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]",
      "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
    ]
  },
  {
    "mbpp_id": 631,
    "problem_statement": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import re\n\ndef replace_spaces(text):\n    \"\"\"\n    Replaces all whitespace characters with underscores and underscores with spaces.\n    \n    Args:\n        text (str): The input string containing mixed types of characters.\n        \n    Returns:\n        str: A new string where all instances of '_-' pattern have been replaced.\n    \"\"\"\n    # Using regular expression to replace all whitespace patterns with '_' and vice versa\n    return re.sub(r'\\s', '_', text).replace('_', '\\u00A0')\n\n# Test cases\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
      "assert replace_spaces('The Avengers') == 'The_Avengers'",
      "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
    ]
  },
  {
    "mbpp_id": 632,
    "problem_statement": "Write a python function to move all zeroes to the end of the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_zero(arr):\n    \"\"\"\n    Move all zeros in the given array to the end while maintaining the order of non-zero elements.\n    \n    Parameters:\n    arr (list): The input list containing integers and possibly zeros.\n    \n    Returns:\n    list: A new list with all zeros moved to the end.\n    \"\"\"\n    # Separate non-zero elements from zero elements and then concatenate them\n    non_zero_elements = [element for element in arr if element != 0]\n    zero_elements = [0 for _ in range(arr.count(0))]\n    return non_zero_elements + zero_elements\n\n# Check function with provided data points\nprint(move_zero([1,0,2,0,3,4]))  # Expected output: [1, 2, 3, 4, 0, 0]\nprint(move_zero([2,3,2,0,0,4,0,5,0]))  # Expected output: [2, 3, 2, 4, 5, 0, 0, 0, 0]\nprint(move_zero([0,1,0,1,1]))  # Expected output: [1, 1, 1, 0, 0]",
    "test_cases": [
      "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
      "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
      "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
    ]
  },
  {
    "mbpp_id": 633,
    "problem_statement": "Write a python function to find the sum of xor of all pairs of numbers in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import combinations\n\ndef pair_OR_Sum(nums, k):\n    total_sum = 0\n    for num in nums:\n        if len(set(nums).intersection(range(num+1, k))) > 0:\n            total_sum += num\n    return total_sum\n\n# Test Cases\nprint(pair_OR_Sum([5,9,7,6],4)) # Expected output: 47\nprint(pair_OR_Sum([7,3,5],3))   # Expected output: 12\nprint(pair_OR_Sum([7,3],2))     # Expected output: 4",
    "test_cases": [
      "assert pair_OR_Sum([5,9,7,6],4) == 47",
      "assert pair_OR_Sum([7,3,5],3) == 12",
      "assert pair_OR_Sum([7,3],2) == 4"
    ]
  },
  {
    "mbpp_id": 634,
    "problem_statement": "Write a python function to find the sum of fourth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n even natural numbers.\n    \n    Args:\n    n : int - The number of initial even natural numbers to consider.\n    \n    Returns:\n    int - The sum of the fourth powers of the first n even natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n+1):\n        even_number = 2 * i\n        total_sum += even_number ** 4\n    return total_sum\n\n# Test cases\nprint(even_Power_Sum(2))  # Expected output: 272\nprint(even_Power_Sum(3))  # Expected output: 1568\nprint(even_Power_Sum(4))  # Expected output: 5664",
    "test_cases": [
      "assert even_Power_Sum(2) == 272",
      "assert even_Power_Sum(3) == 1568",
      "assert even_Power_Sum(4) == 5664"
    ]
  },
  {
    "mbpp_id": 635,
    "problem_statement": "Write a function to push all values into a heap and then pop off the smallest values one at a time.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        if left < n and arr[i] < arr[left]:\n            largest = left\n            \n        if right < n and arr[largest] < arr[right]:\n            largest = right\n            \n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n            \n    n = len(arr)\n    \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n        \n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr",
    "test_cases": [
      "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
      "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"
    ]
  },
  {
    "mbpp_id": 636,
    "problem_statement": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "def check_reciprocal_roots(a, b, c):\n    # Calculate the discriminant\n    D = b**2 - 4*a*c\n    \n    # If the discriminant is negative, there are no real roots\n    if D < 0:\n        return \"No\"\n    \n    # Calculate the two roots using the quadratic formula\n    root1 = (-b + D ** 0.5) / (2 * a)\n    root2 = (-b - D ** 0.5) / (2 * a)\n    \n    # Check if the roots are reciprocals of each other\n    if root1 != 1/root2 and root2 != 1/root1:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n# Test cases\nprint(check_reciprocal_roots(2,0,2))  # Expected output: Yes\nprint(check_reciprocal_roots(2,-5,2)) # Expected output: Yes\nprint(check_reciprocal_roots(1,2,3))  # Expected output: No",
    "test_cases": [
      "assert Check_Solution(2,0,2) == \"Yes\"",
      "assert Check_Solution(2,-5,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\""
    ]
  },
  {
    "mbpp_id": 637,
    "problem_statement": "Write a function to check whether the given amount has no profit and no loss",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def noprofit_noloss(price_paid, price_sold):\n    return price_paid == price_sold",
    "test_cases": [
      "assert noprofit_noloss(1500,1200)==False",
      "assert noprofit_noloss(100,100)==True",
      "assert noprofit_noloss(2000,5000)==False"
    ]
  },
  {
    "mbpp_id": 638,
    "problem_statement": "Write a function to calculate wind chill index.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def wind_chill(temp, wind_speed):\n    \"\"\"\n    Calculate the wind chill index based on given temperature and wind speed.\n    \n    Parameters:\n        temp (int): Temperature in degrees Fahrenheit.\n        wind_speed (int): Wind speed in miles per hour.\n        \n    Returns:\n        int: The wind chill index.\n    \"\"\"\n    return round(-13.12 + 0.6215 * temp - 11.37 * wind_speed**0.16 + 0.3965 * temp * wind_speed**0.16)\n\n# Check function with provided data points\nassert wind_chill(120, 35) == 40\nassert wind_chill(40, 70) == 86\nassert wind_chill(10, 100) == 116\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert wind_chill(120,35)==40",
      "assert wind_chill(40,70)==86",
      "assert wind_chill(10,100)==116"
    ]
  },
  {
    "mbpp_id": 639,
    "problem_statement": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sample_nam(names):\n    \"\"\"\n    This function takes in a list of strings and returns the total length of the names that start with an uppercase letter.\n    \"\"\"\n    return sum(len(name) for name in names if name[0].isupper())",
    "test_cases": [
      "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
      "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10",
      "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"
    ]
  },
  {
    "mbpp_id": 640,
    "problem_statement": "Write a function to remove the parenthesis area in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: expected string or bytes-like object"
    ],
    "generated_code": "import re\n\ndef remove_parenthesis(s):\n    return re.sub(r'\\([^()]*\\)', '', s)\n\n# Test cases\nprint(remove_parenthesis([\"python (chrome)\"]))  # Expected output: \"python\"\nprint(remove_parenthesis([\"string(.abc)\"]))     # Expected output: \"string\"\nprint(remove_parenthesis([\"alpha(num)\"]))       # Expected output: \"alpha\"",
    "test_cases": [
      "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")",
      "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")",
      "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"
    ]
  },
  {
    "mbpp_id": 641,
    "problem_statement": "Write a function to find the nth nonagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number.\n    \n    Parameters:\n    n (int): The position of the nonagonal number in the sequence.\n    \n    Returns:\n    int: The nth nonagonal number.\n    \"\"\"\n    # Formula to calculate nonagonal number\n    return round((n * (6 * n - 5)) / 2)\n\n# Test cases to verify the correctness of the function\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
    "test_cases": [
      "assert is_nonagonal(10) == 325",
      "assert is_nonagonal(15) == 750",
      "assert is_nonagonal(18) == 1089"
    ]
  },
  {
    "mbpp_id": 642,
    "problem_statement": "Write a function to remove similar rows from the given tuple matrix.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def remove_similar_row(matrix):\n    # Flatten the list of lists into a single list and convert each inner list into a frozenset for comparison\n    flattened = [tuple(row) for row in matrix]\n    # Use set comprehension to find unique frozensets\n    unique_frozensets = {frozenset(row) for row in matrix}\n    # Convert back to original data structure if needed\n    result = []\n    for item in unique_frozensets:\n        new_matrix = [[x for x in row if frozenset(item) != frozenset(x)] for row in matrix]\n        result.append(new_matrix)\n    return result[0] if len(result) > 0 else None\n\n# Test cases\nprint(remove_similar_row([[4, 5], [2, 2], [3, 2], [4, 6]]))  # Expected: [(2, 2), (4, 6)]\nprint(remove_similar_row([[5, 6], [3, 3], [4, 3], [5, 7]]))  # Expected: [(4, 3), (5, 6)]",
    "test_cases": [
      "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}",
      "assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}",
      "assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}"
    ]
  },
  {
    "mbpp_id": 643,
    "problem_statement": "Write a function that matches a word containing 'z', not at the start or end of the word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_wordz_middle(text):\n    # The regex pattern is designed to match words starting from index 1 and ending just before the last character.\n    # It uses \\b which asserts a word boundary, [a-zA-Z]* which matches zero or more characters, and $ to ensure no word ends with \"z\".\n    pattern = r'\\b[a-zA-Z]*(?:z\\b|\\.)'\n    result = re.search(pattern, text)\n    \n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the function\nprint(text_match_wordz_middle(\"pythonzabc.\"))  # Expected output: Found a match!\nprint(text_match_wordz_middle(\"xyzabc.\"))      # Expected output: Found a match!\nprint(text_match_wordz_middle(\"  lang  \"))     # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')",
      "assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')",
      "assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 644,
    "problem_statement": "Write a python function to reverse an array upto a given position.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_Array_Upto_K(arr, k):\n    # Reverse elements from start to k-1 and then from k to end\n    for i in range(k//2):\n        arr[i], arr[k-i-1] = arr[k-i-1], arr[i]\n\n    return arr",
    "test_cases": [
      "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
      "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
      "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
    ]
  },
  {
    "mbpp_id": 645,
    "problem_statement": "Write a function to find the product of it’s kth index in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_k_product(tuples_list, k):\n    result = 1\n    for i, tuple_item in enumerate(tuples_list):\n        if i == k:\n            for j in range(len(tuple_item)):\n                result *= tuple_item[j]\n    return result",
    "test_cases": [
      "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665",
      "assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280",
      "assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210"
    ]
  },
  {
    "mbpp_id": 646,
    "problem_statement": "Write a python function to count number of cubes of size k in a cube of size n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def no_of_cubes(n, k):\n    \"\"\"\n    Function to calculate the total number of k-cube blocks within an n x n x n cube.\n    \n    Parameters:\n    - n: An integer representing the side length of the large cube.\n    - k: An integer representing the edge length of each small cube block.\n    \n    Returns:\n    The total number of k-cube blocks within the n x n x n cube as an integer.\n    \"\"\"\n    # Calculate the total number of k-cube blocks using the formula for volume difference\n    total_blocks = ((n // k) ** 3)\n    \n    return int(total_blocks)\n\n# Test cases to verify the correctness of the solution\nassert no_of_cubes(2, 1) == 8\nassert no_of_cubes(5, 2) == 64\nassert no_of_cubes(1, 1) == 1\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert No_of_cubes(2,1) == 8",
      "assert No_of_cubes(5,2) == 64",
      "assert No_of_cubes(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 647,
    "problem_statement": "Write a function to split a string at uppercase letters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef split_upperstring(s):\n    # Split the string using regex pattern for uppercase characters followed by lowercase letters\n    return re.findall(r'([A-Z][a-z]*)', s)\n\n# Test cases\nprint(split_upperstring(\"PythonProgramLanguage\")) # Expected output: ['Python', 'Program', 'Language']\nprint(split_upperstring(\"PythonProgram\"))          # Expected output: ['Python', 'Program']\nprint(split_upperstring(\"ProgrammingLanguage\"))   # Expected output: ['Programming', 'Language']",
    "test_cases": [
      "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']",
      "assert split_upperstring(\"PythonProgram\")==['Python','Program']",
      "assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']"
    ]
  },
  {
    "mbpp_id": 648,
    "problem_statement": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def exchange_elements(arr):\n    for i in range(0, len(arr), 2):\n        arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return arr",
    "test_cases": [
      "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ",
      "assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] ",
      "assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] "
    ]
  },
  {
    "mbpp_id": 649,
    "problem_statement": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Range_list(nums, start_index, end_index):\n    # Calculate the sum of elements from 'start_index' to 'end_index'\n    total_sum = sum(nums[start_index:end_index+1])\n    return total_sum\n\n# Test Cases\nprint(sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10))  # Output: 29\nprint(sum_Range_list([1,2,3,4,5], 1, 2))  # Output: 5\nprint(sum_Range_list([1,0,1,2,5,6], 4, 5))  # Output: 11",
    "test_cases": [
      "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29",
      "assert sum_Range_list([1,2,3,4,5],1,2) == 5",
      "assert sum_Range_list([1,0,1,2,5,6],4,5) == 11"
    ]
  },
  {
    "mbpp_id": 650,
    "problem_statement": "Write a python function to check whether the given two arrays are equal or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def are_Equal(arr1, arr2, n1, n2):\n    # Check if both arrays have the same length\n    if len(arr1) != n1 or len(arr2) != n2:\n        return False\n    \n    # Sort both arrays\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    \n    # Compare sorted versions of the arrays\n    for i in range(n1):\n        if sorted_arr1[i] != sorted_arr2[i]:\n            return False\n            \n    return True",
    "test_cases": [
      "assert are_Equal([1,2,3],[3,2,1],3,3) == True",
      "assert are_Equal([1,1,1],[2,2,2],3,3) == False",
      "assert are_Equal([8,9],[4,5,6],2,3) == False"
    ]
  },
  {
    "mbpp_id": 651,
    "problem_statement": "Write a function to check if one tuple is a subset of another tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_subset(subset, superset):\n    return set(subset).issubset(superset)",
    "test_cases": [
      "assert check_subset((10, 4, 5, 6), (5, 10)) == True",
      "assert check_subset((1, 2, 3, 4), (5, 6)) == False",
      "assert check_subset((7, 8, 9, 10), (10, 8)) == True"
    ]
  },
  {
    "mbpp_id": 652,
    "problem_statement": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def matrix_to_list(matrix):\n    \"\"\"\n    Flattens the given tuple matrix into a single tuple of tuples.\n    \n    :param matrix: A nested tuple where outermost tuple represents rows and inner tuple represents columns.\n    :return: A flattened tuple containing all elements from the original tuple matrix.\n    \"\"\"\n    return tuple(tuple(row) for row in zip(*matrix))\n\n# Test cases to verify the correctness of the solution\nassert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'",
      "assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'",
      "assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'"
    ]
  },
  {
    "mbpp_id": 653,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef grouping_dictionary(sequence):\n    grouped = defaultdict(list)\n    for key, value in sequence:\n        grouped[key].append(value)\n    return dict(grouped)\n\n# Test cases\nprint(grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])) # Output: {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nprint(grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])) # Output: {'yellow': [10, 30], 'blue': [20, 40], 'red': [10]}\nprint(grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])) # Output: {'yellow': [15, 35], 'blue': [25, 45], 'red': [15]}",
    "test_cases": [
      "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})",
      "assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})",
      "assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"
    ]
  },
  {
    "mbpp_id": 654,
    "problem_statement": "Write a function to find the perimeter of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_cases": [
      "assert rectangle_perimeter(10,20)==60",
      "assert rectangle_perimeter(10,5)==30",
      "assert rectangle_perimeter(4,2)==12"
    ]
  },
  {
    "mbpp_id": 655,
    "problem_statement": "Write a python function to find the sum of fifth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fifth_Power_Sum(n):\n    # Calculate the sum of the fifth powers of the first n natural numbers\n    return sum(x ** 5 for x in range(1, n + 1))",
    "test_cases": [
      "assert fifth_Power_Sum(2) == 33",
      "assert fifth_Power_Sum(4) == 1300",
      "assert fifth_Power_Sum(3) == 276"
    ]
  },
  {
    "mbpp_id": 656,
    "problem_statement": "Write a python function to find the minimum sum of absolute differences of two arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min_Sum(arr1, arr2, n):\n    # Calculate the sum of absolute differences between elements of both arrays\n    sum_abs_diff = sum(abs(x - y) for x in arr1 for y in arr2)\n    \n    # Return the minimum sum of absolute differences\n    return min(sum_abs_diff * n, sum(map(lambda x, y: abs(x - y), arr1, arr2)))",
    "test_cases": [
      "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0",
      "assert find_Min_Sum([1,2,3],[4,5,6],3) == 9",
      "assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6"
    ]
  },
  {
    "mbpp_id": 657,
    "problem_statement": "Write a python function to find the first digit in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Digit(n):\n    # Initialize result variable to store the first digit\n    result = 9\n    \n    # Calculate n! and convert it into string for easy manipulation\n    num_str = str(factorial(n))\n    \n    # Iterate through each character in the string representation of n!\n    for i in range(len(num_str)):\n        if int(num_str[i]) > 0:\n            break\n            \n        result *= 10  # Move the result one place to the left\n        \n    # Return the first digit from the beginning of the string\n    return num_str[0]\n\n# Helper function to calculate factorial\ndef factorial(x):\n    if x == 0 or x == 1:\n        return 1\n    else:\n        return x * factorial(x - 1)",
    "test_cases": [
      "assert first_Digit(5) == 1",
      "assert first_Digit(10) == 3",
      "assert first_Digit(7) == 5"
    ]
  },
  {
    "mbpp_id": 658,
    "problem_statement": "Write a function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_occurrences(lst):\n    from collections import Counter\n    count = Counter(lst)\n    return count.most_common(1)[0][0]",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2",
      "assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1",
      "assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1"
    ]
  },
  {
    "mbpp_id": 659,
    "problem_statement": "Write a python function to print duplicants from a list of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Repeat' is not defined",
      "Test 2: FAIL - name 'Repeat' is not defined",
      "Test 3: FAIL - name 'Repeat' is not defined"
    ],
    "generated_code": "def find_duplicates(numbers):\n    duplicates = []\n    seen_numbers = set()\n    \n    for number in numbers:\n        if number not in seen_numbers:\n            seen_numbers.add(number)\n        else:\n            duplicates.append(number)\n    \n    return duplicates\n\n# Test cases\nprint(find_duplicates([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]))  # Output: [20, 30, -20, 60]\nprint(find_duplicates([-1, 1, -1, 8]))  # Output: [-1]\nprint(find_duplicates([1, 2, 3, 1, 2,]))  # Output: [1, 2]",
    "test_cases": [
      "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]",
      "assert Repeat([-1, 1, -1, 8]) == [-1]",
      "assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]"
    ]
  },
  {
    "mbpp_id": 660,
    "problem_statement": "Write a python function to choose points from two ranges such that no point lies in both the ranges.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: One range does not fully contain the other."
    ],
    "generated_code": "def find_Points(x1_start, x1_end, x2_start, x2_end):\n    \"\"\"\n    Find two unique points (x1, y1) and (x2, y2) where:\n    - Each point has coordinates within one of the given range pairs.\n    - No point is shared between the two ranges.\n    \n    Parameters:\n    x1_start (int): Start coordinate for the first range.\n    x1_end (int): End coordinate for the first range.\n    x2_start (int): Start coordinate for the second range.\n    x2_end (int): End coordinate for the second range.\n    \n    Returns:\n    tuple: A pair of coordinates (x1, y1), (x2, y2).\n    \"\"\"\n    # Determine which range has smaller start and end values\n    if x1_start <= x2_start and x1_end >= x2_end:\n        return (x1_start, x1_end)\n    elif x2_start <= x1_start and x2_end >= x1_end:\n        return (x2_start, x2_end)\n    else:\n        raise ValueError(\"One range does not fully contain the other.\")\n        \n# Test cases\nprint(find_Points(5,10,1,5))  # Expected output: (1, 10)\nprint(find_Points(3,5,7,9))   # Expected output: (3, 9)\nprint(find_Points(1,5,2,8))   # Expected output: (1, 8)",
    "test_cases": [
      "assert find_Points(5,10,1,5) == (1,10)",
      "assert find_Points(3,5,7,9) == (3,9)",
      "assert find_Points(1,5,2,8) == (1,8)"
    ]
  },
  {
    "mbpp_id": 661,
    "problem_statement": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_of_three_consecutive(nums, n):\n    # Base case: if there is less than three numbers in nums\n    if len(nums) < 3:\n        return sum(nums)\n    \n    # Initialize variables\n    dp = [0] * (len(nums))\n    current_max = dp[0]\n    \n    for i in range(2, len(nums)):\n        # Update the current maximum\n        current_max = max(current_max + nums[i-1], nums[i])\n        \n        # Calculate the new maximum ending at index i with all possible combinations of three consecutive elements\n        for j in range(i-2, -1, -1):\n            temp_max = dp[j] + nums[i]\n            dp[i] = max(dp[i], min(temp_max, nums[i]))\n    \n    # Return the maximum sum found\n    return max(dp[-1], current_max)\n\n# Test cases\nprint(max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5))  # Output: 2101\nprint(max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5))  # Output: 5013\nprint(max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8))   # Output: 27",
    "test_cases": [
      "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101",
      "assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013",
      "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27"
    ]
  },
  {
    "mbpp_id": 662,
    "problem_statement": "Write a function to sort a list in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sorted_dict(dct):\n    return dict(sorted(dct.items(), key=lambda item: item[1]))",
    "test_cases": [
      "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}",
      "assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}",
      "assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"
    ]
  },
  {
    "mbpp_id": 663,
    "problem_statement": "Write a function to find the largest possible value of k such that k modulo x is y.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_max_val(k, x, y):\n    # Calculate the maximum value k such that k % x = y\n    max_value = ((k // x) * x) + y\n    return max_value\n\n# Test cases\nprint(find_max_val(15, 10, 5))  # Output: 15\nprint(find_max_val(187, 10, 5))  # Output: 185\nprint(find_max_val(16, 11, 1))   # Output: 12",
    "test_cases": [
      "assert find_max_val(15, 10, 5) == 15",
      "assert find_max_val(187, 10, 5) == 185",
      "assert find_max_val(16, 11, 1) == 12"
    ]
  },
  {
    "mbpp_id": 664,
    "problem_statement": "Write a python function to find the average of even numbers till a given even number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def average_Even(n):\n    sum = 0\n    count = 0\n    \n    for i in range(2, n+1, 2): \n        sum += i \n        count += 1 \n    \n    if count == 0:\n        return 0\n    else:\n        return sum / count",
    "test_cases": [
      "assert average_Even(2) == 2",
      "assert average_Even(4) == 3",
      "assert average_Even(100) == 51"
    ]
  },
  {
    "mbpp_id": 665,
    "problem_statement": "Write a python function to shift first element to the end of given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_last(arr):\n    # Move last item to the front\n    arr.append(arr.pop(0))\n    return arr",
    "test_cases": [
      "assert move_last([1,2,3,4]) == [2,3,4,1]",
      "assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]",
      "assert move_last([5,4,3,2,1]) == [4,3,2,1,5]"
    ]
  },
  {
    "mbpp_id": 666,
    "problem_statement": "Write a function to count occurrence of a character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_char(s, char):\n    return s.count(char)",
    "test_cases": [
      "assert count_char(\"Python\",'o')==1",
      "assert count_char(\"little\",'t')==2",
      "assert count_char(\"assert\",'s')==2"
    ]
  },
  {
    "mbpp_id": 667,
    "problem_statement": "Write a python function to count number of vowels in the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Check_Vow(s, pattern):\n    # Initialize counter for vowel count\n    count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Increment count if the character matches the pattern\n        if char.lower() in 'aeiou':\n            count += 1\n            \n    # Return the total count of vowels found\n    return count",
    "test_cases": [
      "assert Check_Vow('corner','AaEeIiOoUu') == 2",
      "assert Check_Vow('valid','AaEeIiOoUu') == 2",
      "assert Check_Vow('true','AaEeIiOoUu') ==2"
    ]
  },
  {
    "mbpp_id": 668,
    "problem_statement": "Write a python function to replace multiple occurence of character by single.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def replace(string, char):\n    new_string = \"\"\n    for c in string:\n        if c != char:\n            new_string += c\n    return new_string.replace(char, '')\n\n# Test cases\nprint(replace('peep', 'e'))  # Expected output: \"pep\"\nprint(replace('Greek', 'e'))  # Expected output: \"Grek\"\nprint(replace('Moon', 'o'))   # Expected output: \"Mon\"",
    "test_cases": [
      "assert replace('peep','e') == 'pep'",
      "assert replace('Greek','e') == 'Grek'",
      "assert replace('Moon','o') == 'Mon'"
    ]
  },
  {
    "mbpp_id": 669,
    "problem_statement": "Write a function to check whether the given ip address is valid or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef check_IP(ip_address):\n    # Define the pattern for a valid IPv4 address\n    pattern = r'^(\\d{1,3}\\.){3}\\d{1,3}$'\n    \n    # Check if the input matches the pattern of a valid IPv4 address\n    if re.match(pattern, ip_address):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n\n# Test cases\nprint(check_IP(\"192.168.0.1\"))  # Output: Valid IP address\nprint(check_IP(\"110.234.52.124\"))  # Output: Valid IP address\nprint(check_IP(\"366.1.2.2\"))  # Output: Invalid IP address",
    "test_cases": [
      "assert check_IP(\"192.168.0.1\") == 'Valid IP address'",
      "assert check_IP(\"110.234.52.124\") == 'Valid IP address'",
      "assert check_IP(\"366.1.2.2\") == 'Invalid IP address'"
    ]
  },
  {
    "mbpp_id": 670,
    "problem_statement": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'decreasing_trend' is not defined",
      "Test 2: FAIL - name 'decreasing_trend' is not defined",
      "Test 3: FAIL - name 'decreasing_trend' is not defined"
    ],
    "generated_code": "def is_decreasing(arr):\n    \"\"\"\n    Check if an array is in strictly decreasing order.\n    \n    Parameters:\n    arr (list): The list of integers to be checked.\n    \n    Returns:\n    bool: True if the array is strictly decreasing, False otherwise.\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i-1] <= arr[i]:\n            return False\n    return True",
    "test_cases": [
      "assert decreasing_trend([-4,-3,-2,-1]) == True",
      "assert decreasing_trend([1,2,3]) == True",
      "assert decreasing_trend([3,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 671,
    "problem_statement": "Write a python function to set the right most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_Right_most_Unset_Bit(num):\n    mask = 1\n    while num & mask == 0:\n        mask <<= 1\n    return num | mask",
    "test_cases": [
      "assert set_Right_most_Unset_Bit(21) == 23",
      "assert set_Right_most_Unset_Bit(11) == 15",
      "assert set_Right_most_Unset_Bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 672,
    "problem_statement": "Write a function to find maximum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_cases": [
      "assert max_of_three(10,20,30)==30",
      "assert max_of_three(55,47,39)==55",
      "assert max_of_three(10,49,30)==49"
    ]
  },
  {
    "mbpp_id": 673,
    "problem_statement": "Write a python function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def convert(lst):\n    # Convert list of integers to a string and then concatenate them together.\n    result = ''.join(map(str, lst))\n    # Convert the resulting string back to an integer.\n    return int(result)\n\n# Test cases to verify the correctness of the solution\nassert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
    "test_cases": [
      "assert convert([1,2,3]) == 123",
      "assert convert([4,5,6]) == 456",
      "assert convert([7,8,9]) == 789"
    ]
  },
  {
    "mbpp_id": 674,
    "problem_statement": "Write a function to remove duplicate words from a given string using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import OrderedDict\n\ndef remove_duplicate(text):\n    \"\"\"\n    Removes all duplicate words in the provided text and returns the modified string.\n    \n    Parameters:\n        text (str): The input string containing multiple words separated by spaces.\n        \n    Returns:\n        str: A new string with all duplicate words removed.\n    \"\"\"\n    # Split the input into words, sort them, then join back to form the result string\n    return ' '.join(OrderedDict.fromkeys(text.split()))\n\n# Test cases\nassert remove_duplicate(\"Python Exercises Practice Solution Exercises\") == \"Python Exercises Practice Solution\"\nassert remove_duplicate(\"Python Exercises Practice Solution Python\") == \"Python Exercises Practice Solution\"\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\") == \"Python Exercises Practice Solution\"",
    "test_cases": [
      "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")",
      "assert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")",
      "assert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")"
    ]
  },
  {
    "mbpp_id": 675,
    "problem_statement": "Write a function to add two integers. however, if the sum is between the given range it will return 20.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_nums(a, b, lower_bound, upper_bound):\n    result = a + b\n    if lower_bound <= result <= upper_bound:\n        return 20\n    else:\n        return result",
    "test_cases": [
      "assert sum_nums(2,10,11,20)==20",
      "assert sum_nums(15,17,1,10)==32",
      "assert sum_nums(10,15,5,30)==20"
    ]
  },
  {
    "mbpp_id": 676,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_extra_char(s):\n    # Remove all non-alphanumeric characters using regex\n    s = re.sub(r'[^a-zA-Z0-9]', '', s)\n    return s\n\n# Test cases\nprint(remove_extra_char('**//Google Android// - 12. '))\nprint(remove_extra_char('****//Google Flutter//*** - 36. '))\nprint(remove_extra_char('**//Google Firebase// - 478. '))",
    "test_cases": [
      "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'",
      "assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'",
      "assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'"
    ]
  },
  {
    "mbpp_id": 677,
    "problem_statement": "Write a function to check if the triangle is valid or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef validity_triangle(side_a, side_b, side_c):\n    # Calculate the square of each side length and sum them up\n    total_square = pow(side_a, 2) + pow(side_b, 2) + pow(side_c, 2)\n    \n    # Check if the sum of squares is greater than twice the product of sides minus the largest side squared\n    return total_square > 2 * (side_a * side_b * side_c - max(pow(side_a, 2), pow(side_b, 2), pow(side_c, 2)))",
    "test_cases": [
      "assert validity_triangle(60,50,90)==False",
      "assert validity_triangle(45,75,60)==True",
      "assert validity_triangle(30,50,100)==True"
    ]
  },
  {
    "mbpp_id": 678,
    "problem_statement": "Write a python function to remove spaces from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_spaces(s):\n    # Remove all whitespace characters from the input string using replace method\n    return ''.join(ch for ch in s if not ch.isspace())\n\n# Test cases\nprint(remove_spaces(\"a b c\"))  # Expected output: \"abc\"\nprint(remove_spaces(\"1 2 3\"))  # Expected output: \"123\"\nprint(remove_spaces(\" b c\"))   # Expected output: \"bc\"",
    "test_cases": [
      "assert remove_spaces(\"a b c\") == \"abc\"",
      "assert remove_spaces(\"1 2 3\") == \"123\"",
      "assert remove_spaces(\" b c\") == \"bc\""
    ]
  },
  {
    "mbpp_id": 679,
    "problem_statement": "Write a function to access dictionary key’s element by index.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def access_key(dct, i):\n    return list(dct.keys())[i]",
    "test_cases": [
      "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'",
      "assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'",
      "assert access_key({'program':15,'computer':45},1)== 'computer'"
    ]
  },
  {
    "mbpp_id": 680,
    "problem_statement": "Write a python function to check whether a sequence of numbers has an increasing trend or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def increasing_trend(sequence):\n    # Check if each element in the sequence is greater than its previous element\n    for i in range(1, len(sequence)):\n        if sequence[i] <= sequence[i - 1]:\n            return False\n    return True",
    "test_cases": [
      "assert increasing_trend([1,2,3,4]) == True",
      "assert increasing_trend([4,3,2,1]) == False",
      "assert increasing_trend([0,1,4,9]) == True"
    ]
  },
  {
    "mbpp_id": 681,
    "problem_statement": "Write a python function to find the smallest prime divisor of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef smallest_Divisor(n):\n    # Check if n is divisible by 2\n    while n % 2 == 0:\n        return 2\n    \n    # Check for odd factors from 3 up to sqrt(n)\n    factor = 3\n    max_factor = int(math.sqrt(n)) + 1\n    while factor <= max_factor and n % factor != 0:\n        factor += 2\n        \n    return factor\n\n# Test cases\nprint(smallest_Divisor(10))  # Expected output: 2\nprint(smallest_Divisor(25))  # Expected output: 5\nprint(smallest_Divisor(31))  # Expected output: 31",
    "test_cases": [
      "assert smallest_Divisor(10) == 2",
      "assert smallest_Divisor(25) == 5",
      "assert smallest_Divisor(31) == 31"
    ]
  },
  {
    "mbpp_id": 682,
    "problem_statement": "Write a function to multiply two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from functools import reduce\n\ndef mul_list(list1, list2):\n    # Use map with a lambda function to multiply corresponding elements of the two lists\n    result = list(map(lambda x, y: x * y, list1, list2))\n    return result",
    "test_cases": [
      "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]",
      "assert mul_list([1,2],[3,4])==[3,8]",
      "assert mul_list([90,120],[50,70])==[4500,8400]"
    ]
  },
  {
    "mbpp_id": 683,
    "problem_statement": "Write a python function to check whether the given number can be represented by sum of two squares or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Square(n):\n    for i in range(int(n**0.5)+1):\n        j = int((n - i*i)**0.5)\n        if i*i + j*j == n:\n            return True\n    return False",
    "test_cases": [
      "assert sum_Square(25) == True",
      "assert sum_Square(24) == False",
      "assert sum_Square(17) == True"
    ]
  },
  {
    "mbpp_id": 684,
    "problem_statement": "Write a python function to count occurences of a character in a repeated string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Char(str_input, char_to_count):\n    # Count occurrences of each character in str_input\n    char_counts = {}\n    for char in str_input:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    \n    # Return the count of the specified character 'char_to_count'\n    return char_counts.get(char_to_count, 0)\n\n# Example usage\nprint(count_Char(\"abcac\", 'a'))  # Output: 4\nprint(count_Char(\"abca\", 'c'))   # Output: 2\nprint(count_Char(\"aba\", 'a'))    # Output: 7",
    "test_cases": [
      "assert count_Char(\"abcac\",'a') == 4",
      "assert count_Char(\"abca\",'c') == 2",
      "assert count_Char(\"aba\",'a') == 7"
    ]
  },
  {
    "mbpp_id": 685,
    "problem_statement": "Write a python function to find sum of prime numbers between 1 to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Primes' is not defined",
      "Test 2: FAIL - name 'sum_Of_Primes' is not defined",
      "Test 3: FAIL - name 'sum_Of_Primes' is not defined"
    ],
    "generated_code": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(n):\n    \"\"\"Calculate the sum of all prime numbers up to and including n.\"\"\"\n    total = 0\n    for num in range(2, n + 1):\n        if is_prime(num):\n            total += num\n    return total\n\n# Test cases\nprint(sum_of_primes(10))  # Expected output: 17\nprint(sum_of_primes(20))  # Expected output: 77\nprint(sum_of_primes(5))   # Expected output: 10",
    "test_cases": [
      "assert sum_Of_Primes(10) == 17",
      "assert sum_Of_Primes(20) == 77",
      "assert sum_Of_Primes(5) == 10"
    ]
  },
  {
    "mbpp_id": 686,
    "problem_statement": "Write a function to find the frequency of each element in the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def freq_element(lst):\n    from collections import Counter\n    return str(Counter(lst).most_common())\n\nprint(freq_element([4, 5, 4, 5, 6, 6, 5, 5, 4])) # Expected output: {4: 3, 5: 4, 6: 2}\nprint(freq_element([7, 8, 8, 9, 4, 7, 6, 5, 4])) # Expected output: {7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\nprint(freq_element([1, 4, 3, 1, 4, 5, 2, 6, 2, 7])) # Expected output: {1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}",
    "test_cases": [
      "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'",
      "assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'",
      "assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'"
    ]
  },
  {
    "mbpp_id": 687,
    "problem_statement": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recur_gcd(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return recur_gcd(b, a % b)\n\n# Test cases\nprint(recur_gcd(12, 14))  # Expected output: 2\nprint(recur_gcd(13, 17))  # Expected output: 1\nprint(recur_gcd(9, 3))    # Expected output: 3",
    "test_cases": [
      "assert recur_gcd(12,14) == 2",
      "assert recur_gcd(13,17) == 1",
      "assert recur_gcd(9, 3) == 3"
    ]
  },
  {
    "mbpp_id": 688,
    "problem_statement": "Write a function to get the length of a complex number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\ndef len_complex(a, b):\n    return math.sqrt(a**2 + b**2)",
    "test_cases": [
      "assert len_complex(3,4)==5.0",
      "assert len_complex(9,10)==13.45362404707371",
      "assert len_complex(7,9)==11.40175425099138"
    ]
  },
  {
    "mbpp_id": 689,
    "problem_statement": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_jumps(arr, n): \n    jump = 0\n    step = arr[0]\n    farthest = arr[0] \n\n    for i in range(1, n):\n        if i == n - 1:\n            return jump + 1\n        \n        farthest = max(farthest, i + arr[i])\n        \n        step -= 1\n        if step == 0:\n            jump += 1\n            if i >= farthest:\n                return float('inf')  # This means it's not possible to go further, return infinity\n    \n    return jump",
    "test_cases": [
      "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3",
      "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3",
      "assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10"
    ]
  },
  {
    "mbpp_id": 690,
    "problem_statement": "Write a function to multiply consecutive numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef mul_consecutive_nums(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        product = 1\n        for j in range(i + 1, len(nums) + 1):\n            if j < len(nums):\n                product *= nums[j]\n            else:\n                break\n        result.append(product)\n    return result",
    "test_cases": [
      "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]",
      "assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]",
      "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"
    ]
  },
  {
    "mbpp_id": 691,
    "problem_statement": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_element(lst):\n    result = {}\n    for i in lst:\n        key = i[1]\n        if key not in result:\n            result[key] = []\n        result[key].append(i[0])\n    return result",
    "test_cases": [
      "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}",
      "assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}",
      "assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}"
    ]
  },
  {
    "mbpp_id": 692,
    "problem_statement": "Write a python function to find the last two digits in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def last_Two_Digits(n):\n    # Calculate n!\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    \n    # Return the last two digits of n!\n    return str(fact)[-2:]",
    "test_cases": [
      "assert last_Two_Digits(7) == 40",
      "assert last_Two_Digits(5) == 20",
      "assert last_Two_Digits(2) == 2"
    ]
  },
  {
    "mbpp_id": 693,
    "problem_statement": "Write a function to remove multiple spaces in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_multiple_spaces(s):\n    # Use regular expression to replace multiple spaces with a single space\n    return re.sub(r'\\s+', ' ', s).strip()\n\n# Test cases\nprint(remove_multiple_spaces('Google      Assistant'))  # Expected output: Google Assistant\nprint(remove_multiple_spaces('Quad      Core'))         # Expected output: Quad Core\nprint(remove_multiple_spaces('ChromeCast      Built-in'))  # Expected output: ChromeCast Built-in",
    "test_cases": [
      "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'",
      "assert remove_multiple_spaces('Quad      Core') == 'Quad Core'",
      "assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'"
    ]
  },
  {
    "mbpp_id": 694,
    "problem_statement": "Write a function to extract unique values from the given dictionary values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'itertools' is not defined"
    ],
    "generated_code": "def extract_unique(data_dict):\n    # Convert the list of lists into a set to remove duplicates and then convert back to a list\n    result = list(set(itertools.chain.from_iterable(data_dict.values())))\n    return result\n\n# Test the function with provided data points\nassert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]}) == [1, 2, 5, 6, 7, 8, 10, 11, 12], \"Test case 1 failed\"\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]}) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47], \"Test case 2 failed\"\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]",
      "assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]",
      "assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"
    ]
  },
  {
    "mbpp_id": 695,
    "problem_statement": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(tup1, tup2):\n    # Compare elements from both tuples where i < len(tup2)\n    for i in range(min(len(tup1), len(tup2))):\n        if tup1[i] <= tup2[i]:\n            return False\n    return True\n\n# Example test cases\nprint(check_greater((10, 4, 5), (13, 5, 18)))  # Expected output: True\nprint(check_greater((1, 2, 3), (2, 1, 4)))     # Expected output: False\nprint(check_greater((4, 5, 6), (5, 6, 7)))     # Expected output: True",
    "test_cases": [
      "assert check_greater((10, 4, 5), (13, 5, 18)) == True",
      "assert check_greater((1, 2, 3), (2, 1, 4)) == False",
      "assert check_greater((4, 5, 6), (5, 6, 7)) == True"
    ]
  },
  {
    "mbpp_id": 696,
    "problem_statement": "Write a function to zip two given lists of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'zip_list' is not defined",
      "Test 2: FAIL - name 'zip_list' is not defined",
      "Test 3: FAIL - name 'zip_list' is not defined"
    ],
    "generated_code": "def zip_lists(list1, list2):\n    # Use list comprehension and zip() for zipping corresponding elements from both lists\n    return [[x, y] for x, y in zip(list1, list2)]\n\n# Test cases to verify the correctness of the function\nprint(zip_lists([[1, 3], [5, 7], [9, 11]], [[2, 4], [6, 8], [10, 12, 14]]))  # Expected output: [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nprint(zip_lists([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]))       # Expected output: [[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nprint(zip_lists([['a', 'b'], ['c', 'd']], [['e', 'f'], ['g', 'h']]))          # Expected output: [['a', 'b', 'e', 'f'], ['c', 'd', 'g', 'h']]",
    "test_cases": [
      "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]",
      "assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]",
      "assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]"
    ]
  },
  {
    "mbpp_id": 697,
    "problem_statement": "Write a function to find number of even elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_even(nums):\n    return len(list(filter(lambda x: x % 2 == 0, nums)))",
    "test_cases": [
      "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3",
      "assert count_even([10,15,14,13,-18,12,-20])==5",
      "assert count_even([1, 2, 4, 8, 9])==3"
    ]
  },
  {
    "mbpp_id": 698,
    "problem_statement": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_dict_item(dict_tuples):\n    # Sort dictionary based on tuple product using lambda as key function\n    sorted_items = dict(sorted(dict_tuples.items(), key=lambda item: item[0][0]*item[0][1]))\n    return sorted_items\n\n# Test cases\nprint(sort_dict_item({(5, 6): 3, (2, 3): 9, (8, 4): 10, (6, 4): 12}))\nprint(sort_dict_item({(6, 7): 4, (3, 4): 10, (9, 5): 11, (7, 5): 13}))\nprint(sort_dict_item({(7, 8): 5, (4, 5): 11, (10, 6): 12, (8, 6): 14}))",
    "test_cases": [
      "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}",
      "assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}",
      "assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}"
    ]
  },
  {
    "mbpp_id": 699,
    "problem_statement": "Write a python function to find the minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(binary_string_1, binary_string_2):\n    # Convert strings to lists for easy comparison and swapping characters\n    list1 = [int(char) for char in binary_string_1]\n    list2 = [int(char) for char in binary_string_2]\n\n    count_swaps = 0\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            # Find position where mismatch occurs and swap\n            index_swap = len(list1) - i - 1\n            while list1[index_swap] == list2[index_swap]:\n                index_swap -= 1\n            # Swap the first occurrence of differing bit positions\n            temp = list1[i]\n            list1[i], list1[index_swap] = list1[index_swap], list1[i]\n            list2[i], list2[index_swap] = list2[index_swap], list2[i]\n            count_swaps += 1\n    if all(x == y for x, y in zip(list1, list2)) or len(set(list1 + list2)) > 2:\n        return f\"Not Possible\"\n    else:\n        return count_swaps\n\n# Test cases\nprint(min_Swaps(\"1101\", \"1110\"))  # Output should be 1\nprint(min_Swaps(\"1111\", \"0100\"))  # Output should be \"Not Possible\"\nprint(min_Swaps(\"1110000\", \"0001101\"))  # Output should be 3",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"",
      "assert min_Swaps(\"1110000\",\"0001101\") == 3"
    ]
  },
  {
    "mbpp_id": 700,
    "problem_statement": "Write a function to count the number of elements in a list which are within a specific range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_range_in_list(lst, low, high):\n    return len([x for x in lst if x >= low and x <= high])",
    "test_cases": [
      "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6",
      "assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5",
      "assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3"
    ]
  },
  {
    "mbpp_id": 701,
    "problem_statement": "Write a function to find the equilibrium index of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        # Subtracting left sum from total sum gives the right sum\n        if left_sum == total_sum - left_sum - arr[i]:\n            return i\n        left_sum += arr[i]\n    return -1\n\n# Test cases\nprint(equilibrium_index([1, 2, 3, 4, 1, 2, 3]))  # Expected output: 3\nprint(equilibrium_index([-7, 1, 5, 2, -4, 3, 0]))  # Expected output: 3\nprint(equilibrium_index([1, 2, 3]))  # Expected output: -1",
    "test_cases": [
      "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3",
      "assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3",
      "assert equilibrium_index([1, 2, 3]) == -1"
    ]
  },
  {
    "mbpp_id": 702,
    "problem_statement": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def removals(arr, k, n):\n    arr.sort()\n    left = 0\n    right = len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] - arr[0] <= k:\n            left = mid + 1\n        else:\n            right = mid\n    return len(arr) - left",
    "test_cases": [
      "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5",
      "assert removals([1, 5, 6, 2, 8], 5, 2) == 3",
      "assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2"
    ]
  },
  {
    "mbpp_id": 703,
    "problem_statement": "Write a function to check whether the given key is present in the dictionary or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_key_present(dct, key):\n    return key in dct",
    "test_cases": [
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True",
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True",
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False"
    ]
  },
  {
    "mbpp_id": 704,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def harmonic_sum(n):\n    # Initialize result as 0 and divisor as 1\n    result = 0\n    divisor = 1\n    \n    # Loop from 1 to n-1\n    for i in range(1, n):\n        # Add reciprocal of i divided by current divisor\n        result += 1 / (divisor * i)\n        \n        # Increment divisor by 1\n        divisor += 1\n    \n    return result",
    "test_cases": [
      "assert harmonic_sum(10)==2.9289682539682538",
      "assert harmonic_sum(4)==2.083333333333333",
      "assert harmonic_sum(7)==2.5928571428571425 "
    ]
  },
  {
    "mbpp_id": 705,
    "problem_statement": "Write a function to sort a list of lists by length and value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lists):\n    return sorted(lists, key=lambda x: (len(x), x))",
    "test_cases": [
      "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]",
      "assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]",
      "assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"
    ]
  },
  {
    "mbpp_id": 706,
    "problem_statement": "Write a function to find whether an array is subset of another array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_subset(subset_array, sub_len, main_array, main_len):\n    if sorted(subset_array) != sorted(main_array[:sub_len]):\n        return False\n    for i in range(1, len(main_array)):\n        if not set(main_array[i:i+sub_len]).issubset(set(main_array[0:i])):\n            return False\n    return True",
    "test_cases": [
      "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True",
      "assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True",
      "assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False"
    ]
  },
  {
    "mbpp_id": 707,
    "problem_statement": "Write a python function to count the total set bits from 1 to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes an integer 'n' and returns the total number of set bits in all numbers from 1 to 'n'.\n    \n    :param n: Integer - The upper limit.\n    :return: int - Total number of set bits in all numbers from 1 to n.\n    \"\"\"\n    result = 0\n    for i in range(1, n + 1):\n        # Calculate the number of set bits using Brian Kernighan's algorithm\n        while i:\n            result += 1\n            i &= (i - 1)\n    return result\n\n# Check function with provided data points\nassert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert count_Set_Bits(16) == 33",
      "assert count_Set_Bits(2) == 2",
      "assert count_Set_Bits(14) == 28"
    ]
  },
  {
    "mbpp_id": 708,
    "problem_statement": "Write a python function to convert a string to a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Convert' is not defined",
      "Test 2: FAIL - name 'Convert' is not defined",
      "Test 3: FAIL - name 'Convert' is not defined"
    ],
    "generated_code": "def convert_to_list(string):\n    # Split the input string into a list using space as separator and remove any empty strings at the start and end\n    result = [char for char in string.split() if char]\n    return result\n\n# Test case 1\nassert convert_to_list(\"python program\") == [\"python\", \"program\"]\n\n# Test case 2\nassert convert_to_list(\"Data Analysis\") == [\"Data\", \"Analysis\"]\n\n# Test case 3\nassert convert_to_list(\"Hadoop Training\") == [\"Hadoop\", \"Training\"]",
    "test_cases": [
      "assert Convert('python program') == ['python','program']",
      "assert Convert('Data Analysis') ==['Data','Analysis']",
      "assert Convert('Hadoop Training') == ['Hadoop','Training']"
    ]
  },
  {
    "mbpp_id": 709,
    "problem_statement": "Write a function to count unique keys for each value present in the tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_unique(tuples):\n    # Create an empty dictionary to store counts of unique values per key\n    result = {}\n    \n    # Iterate over each element in the tuples list\n    for key, val in tuples:\n        if val not in result:\n            result[val] = 1  # Initialize count for new value\n        else:\n            result[val] += 1  # Increment count for existing value\n    \n    # Convert the dictionary into a string representation\n    return \"{\" + \", \".join(f\"{k}: {v}\" for k, v in sorted(result.items())) + \"}\"\n\n# Test cases\nprint(get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)]))\nprint(get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)]))\nprint(get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)]))",
    "test_cases": [
      "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'",
      "assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'",
      "assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"
    ]
  },
  {
    "mbpp_id": 710,
    "problem_statement": "Write a function to access the initial and last data of the given tuple record.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def front_and_rear(tup_record):\n    # Accessing the first element of the tuple\n    first_element = tup_record[0]\n    \n    # Accessing the last element of the tuple\n    last_element = tup_record[-1]\n    \n    return (first_element, last_element)\n\n# Test cases\nprint(front_and_rear((10, 4, 5, 6, 7)))  # Expected output: (10, 7)\nprint(front_and_rear((1, 2, 3, 4, 5)))   # Expected output: (1, 5)\nprint(front_and_rear((6, 7, 8, 9, 10)))  # Expected output: (6, 10)",
    "test_cases": [
      "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)",
      "assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)",
      "assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)"
    ]
  },
  {
    "mbpp_id": 711,
    "problem_statement": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def product_Equal(n):\n    # Initialize the total product for odd and even places separately\n    total_product_even = total_product_odd = 1\n    \n    # Iterate through each digit in the number\n    while n > 0:\n        # Multiply current digit with the respective total product\n        if n % 2 == 0:\n            total_product_even *= n % 10\n        else:\n            total_product_odd *= n % 10\n        \n        # Remove last digit from the number\n        n //= 10\n    \n    # Return true if both products are equal, false otherwise\n    return total_product_even == total_product_odd",
    "test_cases": [
      "assert product_Equal(2841) == True",
      "assert product_Equal(1234) == False",
      "assert product_Equal(1212) == False"
    ]
  },
  {
    "mbpp_id": 712,
    "problem_statement": "Write a function to remove duplicates from a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def remove_duplicate(list_of_lists):\n    # Convert the list of lists into a set of tuples\n    unique_elements = {tuple(element) for element in list_of_lists}\n    # Convert each tuple back into a list and return the result as a list of lists\n    return [list(tup) for tup in unique_elements]",
    "test_cases": [
      "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ",
      "assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]",
      "assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]"
    ]
  },
  {
    "mbpp_id": 713,
    "problem_statement": "Write a function to check if the given tuple contains all valid values or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_valid(values):\n    # Check if there is at least one False value in the tuple\n    for val in values:\n        if val is False:\n            return False\n    return True",
    "test_cases": [
      "assert check_valid((True, True, True, True) ) == True",
      "assert check_valid((True, False, True, True) ) == False",
      "assert check_valid((True, True, True, True) ) == True"
    ]
  },
  {
    "mbpp_id": 714,
    "problem_statement": "Write a python function to count the number of distinct power of prime factor of given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "import math\n\ndef count_Fac(n):\n    # Initialize count and list for storing powers of prime factors\n    count = 0\n    primes = []\n    \n    # Function to get the smallest prime divisor\n    def smallest_prime_divisor(num):\n        i = 2\n        while i * i <= num:\n            if num % i == 0:\n                return i\n            i += 1\n        return num\n    \n    # Finding all prime factors including duplicates\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            if i not in primes:\n                primes.append(i)\n            n //= i\n            \n    if n > 1:\n        primes.append(n)\n        \n    # Calculate distinct power of each prime factor\n    for p in set(primes):\n        power = 0\n        temp_num = n // p\n        \n        # Count how many times 'p' divides 'n'\n        while temp_num % p == 0:\n            power += 1\n            temp_num //= p\n        \n        # Add the current power of 'p' to the total count\n        count += power\n    \n    return count",
    "test_cases": [
      "assert count_Fac(24) == 3",
      "assert count_Fac(12) == 2",
      "assert count_Fac(4) == 1"
    ]
  },
  {
    "mbpp_id": 715,
    "problem_statement": "Write a function to convert the given string of integers into a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def str_to_tuple(s):\n    # Split the input string by comma and strip each element to get integer values\n    result = tuple(int(x) for x in s.split(\", \"))\n    return result\n\n# Test cases\nprint(str_to_tuple(\"1, -5, 4, 6, 7\"))  # Expected output: (1, -5, 4, 6, 7)\nprint(str_to_tuple(\"1, 2, 3, 4, 5\"))   # Expected output: (1, 2, 3, 4, 5)\nprint(str_to_tuple(\"4, 6, 9, 11, 13, 14\"))  # Expected output: (4, 6, 9, 11, 13, 14)",
    "test_cases": [
      "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)",
      "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)",
      "assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)"
    ]
  },
  {
    "mbpp_id": 716,
    "problem_statement": "Write a function to find the perimeter of a rombus.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rombus_perimeter(side_length):\n    # The perimeter of a rhombus is four times its side length.\n    return 4 * side_length",
    "test_cases": [
      "assert rombus_perimeter(10)==40",
      "assert rombus_perimeter(5)==20",
      "assert rombus_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 717,
    "problem_statement": "Write a function to calculate the standard deviation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef sd_calc(lst):\n    mean = sum(lst) / len(lst)\n    variance = sum((x - mean)**2 for x in lst) / len(lst)\n    return math.sqrt(variance)",
    "test_cases": [
      "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979",
      "assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287",
      "assert sd_calc([5,9,10,15,6,4])==4.070217029430577"
    ]
  },
  {
    "mbpp_id": 718,
    "problem_statement": "Write a function to create a list taking alternate elements from another given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def alternate_elements(lst):\n    return [lst[i] for i in range(0, len(lst), 2)]",
    "test_cases": [
      "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']",
      "assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]",
      "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"
    ]
  },
  {
    "mbpp_id": 719,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def text_match(text):\n    # Check if 'text' starts with 'a' and ends with 'b'\n    return \"Found a match!\" if text.startswith('a') and text.endswith('b') else \"Not matched!\"",
    "test_cases": [
      "assert text_match(\"ac\")==('Found a match!')",
      "assert text_match(\"dc\")==('Not matched!')",
      "assert text_match(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 720,
    "problem_statement": "Write a function to add a dictionary to the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_dict_to_tuple(tuple_obj, new_dict):\n    # Add the new dictionary as a list item to the end of the tuple object\n    tuple_obj += (new_dict,)\n    return tuple_obj\n\n# Test cases\nprint(add_dict_to_tuple((4, 5, 6), {\"MSAM\": 1, \"is\": 2, \"best\": 3}))  # Expected output: (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nprint(add_dict_to_tuple((1, 2, 3), {\"UTS\": 2, \"is\": 3, \"Worst\": 4}))  # Expected output: (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nprint(add_dict_to_tuple((8, 9, 10), {\"POS\": 3, \"is\": 4, \"Okay\": 5}))  # Expected output: (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
    "test_cases": [
      "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})",
      "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})",
      "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
    ]
  },
  {
    "mbpp_id": 721,
    "problem_statement": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "from typing import List\n\ndef maxAverageOfPath(matrix: List[List[int]], N: int) -> float:\n    \"\"\"\n    Finds the maximum average value among all possible paths in an nxn matrix.\n    \n    :param matrix: A list of lists representing the square matrix.\n    :param N: The dimension of the matrix.\n    :return: The maximum average value found among all paths.\n    \"\"\"\n    def helper(startRow, startCol, endRow, endCol):\n        totalSum = sum(sum(row[startCol:endCol+1]) for row in matrix[startRow:endRow+1])\n        pathLength = endRow - startRow + 1\n        \n        if startRow == endRow and startCol == endCol:\n            return totalSum / pathLength\n        \n        minStart, maxEnd = None, None\n        for i in range(startCol, endCol+1):\n            currentSum = totalSum - sum(matrix[startRow][i:startCol]) + sum(matrix[endRow+1-1][i:])\n            currentLen = endRow - startRow\n            \n            if not minStart or currentLen < min(minStart, currentLen):\n                minStart = currentLen\n                \n            if not maxEnd or currentSum > max(currentSum, currentSum):\n                maxEnd = currentSum\n            \n        # Recursively calculate the maximum average\n        left = helper(startRow, startCol, startRow + minStart - 1, endCol)\n        right = helper(startRow, startCol + minStart, endRow, endCol - maxEnd + 1)\n        \n        return (left + right) / (minStart + maxEnd)\n    \n    return helper(0, 0, N-1, N-1)\n\n# Test cases\nprint(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3))  # Expected output: 5.2\nprint(maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3))  # Expected output: 6.2\nprint(maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3))  # Expected output: 7.2",
    "test_cases": [
      "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2",
      "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2",
      "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "
    ]
  },
  {
    "mbpp_id": 722,
    "problem_statement": "Write a function to filter the height and width of students which are stored in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def filter_data(students, min_height, max_width):\n    filtered_students = {name: height for name, (height, width) in students.items() if min_height <= height <= max_width}\n    return filtered_students",
    "test_cases": [
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}",
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"
    ]
  },
  {
    "mbpp_id": 723,
    "problem_statement": "Write a function to count the same pair in two given lists using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport operator\n\ndef count_same_pair(lst1: List[int], lst2: List[int]) -> int:\n    return sum(map(operator.eq, lst1, lst2))",
    "test_cases": [
      "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
      "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
      "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1"
    ]
  },
  {
    "mbpp_id": 724,
    "problem_statement": "Write a function to calculate the sum of all digits of the base to the specified power.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power_base_sum(base, exponent):\n    \"\"\"\n    Calculate the sum of all digits in the number base**exponent.\n    \n    Parameters:\n    base (int): The base number.\n    exponent (int): The exponent to which the base is raised.\n    \n    Returns:\n    int: The sum of all digits in the result of base raised to the power of exponent.\n    \"\"\"\n    # Calculating base to the power of exponent and converting it to string for digit extraction\n    num_str = str(base ** exponent)\n    total_sum = 0\n    \n    # Iterating through each character in the string\n    for char in num_str:\n        if char.isdigit():\n            total_sum += int(char)  # Adding integer value of digit to the total sum\n            \n    return total_sum",
    "test_cases": [
      "assert power_base_sum(2,100)==115",
      "assert power_base_sum(8,10)==37",
      "assert power_base_sum(8,15)==62"
    ]
  },
  {
    "mbpp_id": 725,
    "problem_statement": "Write a function to extract values between quotation marks of the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef extract_quotation(input_string):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, input_string)\n    return matches",
    "test_cases": [
      "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']",
      "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
      "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']"
    ]
  },
  {
    "mbpp_id": 726,
    "problem_statement": "Write a function to multiply the adjacent elements of the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def multiply_elements(tup):\n    # Check if the input is not an iterable (excluding strings)\n    if isinstance(tup, str) and len(tup.strip()) > 0:\n        raise ValueError(\"Input must be an iterable with non-empty string representation.\")\n    \n    # Convert the tuple to a list for easier manipulation\n    lst = list(tup)\n    \n    # Multiply each element by its index plus one\n    multiplied_lst = [lst[i] * (i + 1) for i in range(len(lst))]\n    \n    # Return the resulting tuple\n    return tuple(multiplied_lst)\n\n# Test cases\nprint(multiply_elements((1, 5, 7, 8, 10)))  # Expected output: (5, 35, 56, 80)\nprint(multiply_elements((2, 4, 5, 6, 7)))   # Expected output: (8, 20, 30, 42)\nprint(multiply_elements((12, 13, 14, 9, 15)))  # Expected output: (156, 182, 126, 135)",
    "test_cases": [
      "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)",
      "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
      "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)"
    ]
  },
  {
    "mbpp_id": 727,
    "problem_statement": "Write a function to remove all characters except letters and numbers using regex",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_char(input_str):\n    # Remove special characters except letters and numbers\n    cleaned_string = re.sub('[^A-Za-z0-9]', '', input_str)\n    return cleaned_string\n\n# Test cases\nprint(remove_char(\"123abcjw:, .@! eiw\"))  # Expected output: \"123abcjweiw\"\nprint(remove_char(\"Hello1234:, ! Howare33u\"))  # Expected output: \"Hello1234Howare33u\"\nprint(remove_char(\"Cool543Triks@:, Make@987Trips\"))  # Expected output: \"Cool543TriksMake987Trips\"",
    "test_cases": [
      "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'",
      "assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'",
      "assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' "
    ]
  },
  {
    "mbpp_id": 728,
    "problem_statement": "Write a function to sum elements in two lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]",
    "test_cases": [
      "assert sum_list([10,20,30],[15,25,35])==[25,45,65]",
      "assert sum_list([1,2,3],[5,6,7])==[6,8,10]",
      "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"
    ]
  },
  {
    "mbpp_id": 729,
    "problem_statement": "Write a function to add two lists using map and lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'add_list' is not defined",
      "Test 2: FAIL - name 'add_list' is not defined",
      "Test 3: FAIL - name 'add_list' is not defined"
    ],
    "generated_code": "from functools import reduce\n\ndef add_lists(list1, list2):\n    return map(lambda x, y: x + y, list1, list2)\n\n# Test cases\nprint(add_lists([1, 2, 3], [4, 5, 6])) # Expected output: [5, 7, 9]\nprint(add_lists([1, 2], [3, 4]))       # Expected output: [4, 6]\nprint(add_lists([10, 20], [50, 70]))   # Expected output: [60, 90]",
    "test_cases": [
      "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]",
      "assert add_list([1,2],[3,4])==[4,6]",
      "assert add_list([10,20],[50,70])==[60,90]"
    ]
  },
  {
    "mbpp_id": 730,
    "problem_statement": "Write a function to remove consecutive duplicates of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def consecutive_duplicates(lst):\n    # Initialize an empty list for result\n    res = []\n    # Initialize an empty string to track the current element\n    cur = ''\n    \n    # Iterate through each item in the input list\n    for i in lst:\n        # If the current item is different from the last seen item\n        if i != cur:\n            # Append it to the result and set the current item as the new one\n            res.append(i)\n            cur = i\n    return res",
    "test_cases": [
      "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
      "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
      "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"
    ]
  },
  {
    "mbpp_id": 731,
    "problem_statement": "Write a function to find the lateral surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef lateralsurface_cone(radius, slant_height):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n    \n    Parameters:\n    radius (float): The radius of the base of the cone.\n    slant_height (float): The slant height of the cone.\n    \n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    # Lateral surface area formula for a cone is π * r * l, where r is the radius and l is the slant height\n    return round(math.pi * radius * slant_height, 5)\n\n# Test cases to verify the correctness of the function\nassert lateralsurface_cone(5,12) == 204.20352\nassert lateralsurface_cone(10,15) == 566.35867\nassert lateralsurface_cone(19,17) == 1521.810",
    "test_cases": [
      "assert lateralsurface_cone(5,12)==204.20352248333654",
      "assert lateralsurface_cone(10,15)==566.3586699569488",
      "assert lateralsurface_cone(19,17)==1521.8090132193388"
    ]
  },
  {
    "mbpp_id": 732,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_specialchar(s):\n    # Replace spaces, commas, and dots with colons\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n# Test cases\nprint(replace_specialchar('Python language, Programming language.'))  # Expected output: 'Python:language::Programming:language:'\nprint(replace_specialchar('a b c,d e f'))  # Expected output: 'a:b:c:d:e:f'\nprint(replace_specialchar('ram reshma,ram rahim'))  # Expected output: 'ram:reshma:ram:rahim'",
    "test_cases": [
      "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
      "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
      "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
    ]
  },
  {
    "mbpp_id": 733,
    "problem_statement": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_occurrence(arr, num):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if left < len(arr) and arr[left] == num else -1\n\n# Test cases\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)) # Output: 1\nprint(find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)) # Output: 2\nprint(find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)) # Output: 4",
    "test_cases": [
      "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
      "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
      "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
    ]
  },
  {
    "mbpp_id": 734,
    "problem_statement": "Write a python function to find sum of products of all possible subarrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_Subarray_Prod' is not defined",
      "Test 2: FAIL - name 'sum_Of_Subarray_Prod' is not defined",
      "Test 3: FAIL - name 'sum_Of_Subarray_Prod' is not defined"
    ],
    "generated_code": "def sum_of_subarray_prod(nums, k):\n    total_sum = 0\n    prefix_product = [1] * len(nums)\n    \n    # Calculate prefix product array\n    for i in range(1, len(prefix_product)):\n        prefix_product[i] = prefix_product[i-1] * nums[i-1]\n        \n    for start_index in range(len(nums)):\n        if start_index + k > len(nums): \n            break\n        \n        current_k_length_products = prefix_product[start_index+k-1] - \\\n                                    (prefix_product[start_index-1] if start_index else 0)\n        total_sum += current_k_length_products * nums[start_index]\n\n    return total_sum\n\n# Test cases\nprint(sum_of_subarray_prod([1,2,3], 3))  # Expected output: 20\nprint(sum_of_subarray_prod([1,2], 2))    # Expected output: 5\nprint(sum_of_subarray_prod([1,2,3,4], 4))# Expected output: 84",
    "test_cases": [
      "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
      "assert sum_Of_Subarray_Prod([1,2],2) == 5",
      "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
    ]
  },
  {
    "mbpp_id": 735,
    "problem_statement": "Write a python function to toggle bits of the number except the first and the last bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def toggle_middle_bits(n):\n    \"\"\"\n    Toggles the middle bits of n (excluding the first and last bits).\n    \n    Args:\n    n (int): The integer whose middle bits will be toggled.\n    \n    Returns:\n    int: The modified integer with its middle bits toggled.\n    \"\"\"\n    # Shift left by 2 positions to get the second half of the binary representation\n    result = ((n >> 1) | (n << 1))\n    return result\n\n# Check function with provided data points\nassert toggle_middle_bits(9) == 15, \"Test case 1 failed\"\nassert toggle_middle_bits(10) == 12, \"Test case 2 failed\"\nassert toggle_middle_bits(11) == 13, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert toggle_middle_bits(9) == 15",
      "assert toggle_middle_bits(10) == 12",
      "assert toggle_middle_bits(11) == 13"
    ]
  },
  {
    "mbpp_id": 736,
    "problem_statement": "Write a function to locate the left insertion point for a specified value in sorted order.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def left_insertion(arr, target):\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        \n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return low",
    "test_cases": [
      "assert left_insertion([1,2,4,5],6)==4",
      "assert left_insertion([1,2,4,5],3)==2",
      "assert left_insertion([1,2,4,5],7)==4"
    ]
  },
  {
    "mbpp_id": 737,
    "problem_statement": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_str(input_string):\n    # Regular expression pattern to match strings starting with a vowel\n    pattern = r\"^[aeiouAEIOU]\"\n    \n    if re.match(pattern, input_string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Test cases\nprint(check_str(\"annie\"))  # Expected output: Valid\nprint(check_str(\"dawood\")) # Expected output: Invalid\nprint(check_str(\"Else\"))   # Expected output: Valid",
    "test_cases": [
      "assert check_str(\"annie\") == 'Valid'",
      "assert check_str(\"dawood\") == 'Invalid'",
      "assert check_str(\"Else\") == 'Valid'"
    ]
  },
  {
    "mbpp_id": 738,
    "problem_statement": "Write a function to calculate the geometric sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def geometric_sum(n):\n    total = 0\n    for i in range(n + 1):\n        # Calculate each term using the formula and add it to total\n        total += ((-1) ** i) / (2 ** i)\n    return round(total, 5)\n\n# Test cases to verify the correctness of the function\nassert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
    "test_cases": [
      "assert geometric_sum(7) == 1.9921875",
      "assert geometric_sum(4) == 1.9375",
      "assert geometric_sum(8) == 1.99609375"
    ]
  },
  {
    "mbpp_id": 739,
    "problem_statement": "Write a python function to find the index of smallest triangular number with n digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'find_Index' is not defined",
      "Test 2: FAIL - name 'find_Index' is not defined",
      "Test 3: FAIL - name 'find_Index' is not defined"
    ],
    "generated_code": "import math\n\ndef find_index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with exactly n digits.\n    \n    Parameters:\n    - n: int\n    \n    Returns:\n    - index: int\n        The index of the smallest triangular number with n digits.\n    \"\"\"\n    def is_triangular(num):\n        \"\"\"Check if num is a triangular number.\"\"\"\n        i = 0\n        while True:\n            i += 1\n            square = i * (i + 1)\n            if square == num:\n                return True\n            elif square > num:\n                break\n        return False\n\n    # Start from the first triangular number and increment until we find one with 'n' digits\n    current_num = 1\n    while True:\n        if len(str(current_num)) == n:\n            return str(current_num).index('1') + 1  # Convert to string and check the position of '1'\n        current_num += 1",
    "test_cases": [
      "assert find_Index(2) == 4",
      "assert find_Index(3) == 14",
      "assert find_Index(4) == 45"
    ]
  },
  {
    "mbpp_id": 740,
    "problem_statement": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_dict(tup):\n    \"\"\"\n    Convert a tuple to a dictionary where each element of the tuple becomes a key.\n    \n    Args:\n        tup (tuple): The input tuple with even-numbered indices as keys and odd-numbered indices as values.\n        \n    Returns:\n        dict: A dictionary created from the tuple's elements.\n    \"\"\"\n    result = {}\n    for i in range(0, len(tup), 2):\n        result[tup[i]] = tup[i + 1]\n    return result\n\n# Test cases to verify the correctness of the solution\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}, \"Test case 1 failed\"\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}, \"Test case 2 failed\"\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
      "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
      "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"
    ]
  },
  {
    "mbpp_id": 741,
    "problem_statement": "Write a python function to check whether all the characters are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Characters_Same(str1):\n    if len(set(str1)) != 1:\n        return False\n    else:\n        return True",
    "test_cases": [
      "assert all_Characters_Same(\"python\") == False",
      "assert all_Characters_Same(\"aaa\") == True",
      "assert all_Characters_Same(\"data\") == False"
    ]
  },
  {
    "mbpp_id": 742,
    "problem_statement": "Write a function to caluclate the area of a tetrahedron.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given one side length.\n    \n    Args:\n    - side_length: The length of a side of the tetrahedron\n    \n    Returns:\n    - The total surface area of the tetrahedron as a float.\n    \"\"\"\n    # Formula for the surface area of a regular tetrahedron: sqrt(3) * s^2\n    return math.sqrt(3) * pow(side_length, 2)",
    "test_cases": [
      "assert area_tetrahedron(3)==15.588457268119894",
      "assert area_tetrahedron(20)==692.8203230275509",
      "assert area_tetrahedron(10)==173.20508075688772"
    ]
  },
  {
    "mbpp_id": 743,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the right direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_right(lst, n, k):\n    # Normalize k so it's within the range [0, len(lst) - 1]\n    k = k % len(lst)\n    # Perform rotation\n    lst[:] = lst[-k:] + lst[:-k]\n    return lst\n\n# Test cases\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4))  # Expected output: [8, 9, 10, 1, 2, 3, 4, 5]\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2))  # Expected output: [9, 10, 1, 2, 3, 4, 5, 6]\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))  # Expected output: [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
    "test_cases": [
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]",
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
    ]
  },
  {
    "mbpp_id": 744,
    "problem_statement": "Write a function to check if the given tuple has any none value or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_none(input_tuple):\n    # Check if any element in the tuple is None\n    for element in input_tuple:\n        if element is None:\n            return True\n    return False",
    "test_cases": [
      "assert check_none((10, 4, 5, 6, None)) == True",
      "assert check_none((7, 8, 9, 11, 14)) == False",
      "assert check_none((1, 2, 3, 4, None)) == True"
    ]
  },
  {
    "mbpp_id": 745,
    "problem_statement": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ZeroDivisionError: integer division or modulo by zero"
    ],
    "generated_code": "from typing import List\n\ndef divisible_by_digits(start: int, end: int) -> List[int]:\n    \"\"\"\n    Finds all integers in the range [start, end] such that every digit of each number is also a divisor of the number itself.\n    \n    :param start: The starting integer of the range.\n    :param end: The ending integer of the range.\n    :return: A list of integers satisfying the condition.\n    \"\"\"\n    result = []\n    for num in range(start, end + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n\n# Test cases to verify the correctness of the solution\nprint(divisible_by_digits(1, 22))  # Expected output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nprint(divisible_by_digits(1, 15))  # Expected output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nprint(divisible_by_digits(20, 25))  # Expected output: [22, 24]",
    "test_cases": [
      "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
      "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
      "assert divisible_by_digits(20,25)==[22, 24]"
    ]
  },
  {
    "mbpp_id": 746,
    "problem_statement": "Write a function to find area of a sector.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sector_area(radius, angle_in_degrees):\n    if angle_in_degrees == 360:\n        return None\n    else:\n        # Calculate the area of the sector using formula: πr² * (angle/360)\n        return radius**2 * math.pi * angle_in_degrees / 360",
    "test_cases": [
      "assert sector_area(4,45)==6.285714285714286",
      "assert sector_area(9,45)==31.82142857142857",
      "assert sector_area(9,360)==None"
    ]
  },
  {
    "mbpp_id": 747,
    "problem_statement": "Write a function to find the longest common subsequence for the given three string sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lcs_of_three(seq_a, seq_b, seq_c, length_a, length_b, length_c):\n    dp = [[0] * (length_b + 1) for _ in range(length_a + 1)]\n    \n    for i in range(1, length_a + 1):\n        for j in range(1, length_b + 1):\n            for k in range(1, length_c + 1):\n                if seq_a[i - 1] == seq_b[j - 1] == seq_c[k - 1]:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    \n    return dp[length_a][length_b]\n\n# Test cases\nprint(lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5)) # Expected output: 2\nprint(lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13)) # Expected output: 5\nprint(lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5)) # Expected output: 3",
    "test_cases": [
      "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2",
      "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ",
      "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"
    ]
  },
  {
    "mbpp_id": 748,
    "problem_statement": "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef capital_words_spaces(input_string):\n    # Use regular expression to find all words that start with an uppercase letter\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]*', input_string)\n    \n    # Join the capitalized words with spaces and return the result\n    return ' '.join(capitalized_words)\n\n# Test cases\nprint(capital_words_spaces(\"Python\"))  # Expected output: \"Python\"\nprint(capital_words_spaces(\"PythonProgrammingExamples\"))  # Expected output: \"Python Programming Examples\"\nprint(capital_words_spaces(\"GetReadyToBeCodingFreak\"))  # Expected output: \"Get Ready To Be Coding Freak\"",
    "test_cases": [
      "assert capital_words_spaces(\"Python\") == 'Python'",
      "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
      "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
    ]
  },
  {
    "mbpp_id": 749,
    "problem_statement": "Write a function to sort a given list of strings of numbers numerically.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_numeric_strings(lst):\n    return sorted([int(i) for i in lst])",
    "test_cases": [
      "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
      "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
      "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
    ]
  },
  {
    "mbpp_id": 750,
    "problem_statement": "Write a function to add the given tuple to the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_tuple(lst, t):\n    lst.extend(t)\n    return lst",
    "test_cases": [
      "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
      "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]",
      "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"
    ]
  },
  {
    "mbpp_id": 751,
    "problem_statement": "Write a function to check if the given array represents min heap or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def check_min_heap(arr, index=0):\n    n = len(arr)\n    \n    # Base case: If we reach the last node of the heap.\n    if index >= n:\n        return True\n    \n    # Recursively check left child nodes.\n    is_left_child_valid = check_min_heap(arr, 2 * index + 1)\n    \n    # Recursively check right child nodes.\n    is_right_child_valid = check_min_heap(arr, 2 * index + 2)\n    \n    # Check if current element is smaller than its children.\n    is_current_node_smaller_than_children = arr[index] < arr[2 * index + 1] and arr[index] < arr[2 * index + 2]\n    \n    # Return true if all checks pass for the current level.\n    return is_left_child_valid and is_right_child_valid and is_current_node_smaller_than_children",
    "test_cases": [
      "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True",
      "assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True",
      "assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"
    ]
  },
  {
    "mbpp_id": 752,
    "problem_statement": "Write a function to find the nth jacobsthal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
    "test_cases": [
      "assert jacobsthal_num(5) == 11",
      "assert jacobsthal_num(2) == 1",
      "assert jacobsthal_num(4) == 5"
    ]
  },
  {
    "mbpp_id": 753,
    "problem_statement": "Write a function to find minimum k records from tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_k(tuple_list, k):\n    # Sort tuples based on their second element in ascending order.\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    # Return the first 'k' elements of the sorted list as a new list.\n    return sorted_list[:k]",
    "test_cases": [
      "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
      "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
      "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
    ]
  },
  {
    "mbpp_id": 754,
    "problem_statement": "Write a function to find common index elements from three lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_index_list(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            result.append(i)\n    return result",
    "test_cases": [
      "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
      "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
      "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"
    ]
  },
  {
    "mbpp_id": 755,
    "problem_statement": "Write a function to find the second smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def second_smallest(nums):\n    # Remove duplicates and sort the numbers\n    sorted_nums = sorted(set(nums))\n    \n    # Check if there is exactly two unique elements\n    if len(sorted_nums) < 2:\n        return None\n    \n    # Return the second element in the sorted list\n    return sorted_nums[1]",
    "test_cases": [
      "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
      "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
      "assert second_smallest([2,2])==None"
    ]
  },
  {
    "mbpp_id": 756,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or one 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"^(a(b)*|b)$\"\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the function\nprint(text_match_zero_one(\"ac\"))   # Expected output: Found a match!\nprint(text_match_zero_one(\"dc\"))   # Expected output: Not matched!\nprint(text_match_zero_one(\"abbbba\"))  # Expected output: Found a match!",
    "test_cases": [
      "assert text_match_zero_one(\"ac\")==('Found a match!')",
      "assert text_match_zero_one(\"dc\")==('Not matched!')",
      "assert text_match_zero_one(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 757,
    "problem_statement": "Write a function to count the pairs of reverse strings in the given string list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef count_reverse_pairs(words: List[str]) -> int:\n    # Convert each word to its reverse and store them as tuples for comparison\n    reversed_words = [(word[::-1], word) for word in words]\n    \n    # Count how many times a word is paired with its reverse\n    return sum(1 for w, r in reversed_words if r == w[::-1])",
    "test_cases": [
      "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'",
      "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'",
      "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' "
    ]
  },
  {
    "mbpp_id": 758,
    "problem_statement": "Write a function to count number of unique lists within a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_sublists(lst):\n    import collections\n    return {tuple(sublist): sum(1 for sublist in lst if set(sublist) == set(item)) \n            for item in lst for sublist in zip(*[iter(item)]*2)}",
    "test_cases": [
      "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
      "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
      "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}"
    ]
  },
  {
    "mbpp_id": 759,
    "problem_statement": "Write a function to check a decimal with a precision of 2.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(num_str):\n    \"\"\"\n    Checks if the given string represents a valid number with at most two digits after the decimal point.\n    \n    Parameters:\n    num_str (str): The string representation of the number to be checked.\n    \n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    # Regular expression to match numbers with up to two digits after the decimal point\n    regex = r'^[-+]?[0-9]*\\.[0-9]{1,2}$'\n    return bool(re.match(regex, num_str))\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = {\n        \"123.11\": True,\n        \"e666.86\": False,\n        \"3.124587\": False,\n    }\n    \n    for num_str, expected in test_cases.items():\n        result = is_decimal(num_str)\n        assert result == expected, f\"Failed on {num_str}. Expected {expected}, got {result}.\"\n    print(\"All test cases passed successfully.\")\n\ncheck_function()",
    "test_cases": [
      "assert is_decimal('123.11')==True",
      "assert is_decimal('e666.86')==False",
      "assert is_decimal('3.124587')==False"
    ]
  },
  {
    "mbpp_id": 760,
    "problem_statement": "Write a python function to check whether an array contains only one distinct element or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_Element(arr, n): \n    # Initialize frequency of each element in the array\n    freq = {}\n    for i in range(n): \n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # Check if all elements have same frequency which is 1\n    return True if len(freq.values()) == 1 and max(list(freq.values())) == 1 else False",
    "test_cases": [
      "assert unique_Element([1,1,1],3) == 'YES'",
      "assert unique_Element([1,2,1,2],4) == 'NO'",
      "assert unique_Element([1,2,3,4,5],5) == 'NO'"
    ]
  },
  {
    "mbpp_id": 761,
    "problem_statement": "Write a function to caluclate arc length of an angle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef arc_length(angle_in_degrees, full_circle=360):\n    # Convert degrees to radians\n    angle_in_radians = math.radians(angle_in_degrees)\n    # Calculate arc length using formula L = π * r * α/360 where α is in degrees and r is radius.\n    if full_circle == 360:\n        return math.pi * full_circle * angle_in_degrees / 360\n    else:\n        return None",
    "test_cases": [
      "assert arc_length(9,45)==3.5357142857142856",
      "assert arc_length(9,480)==None",
      "assert arc_length(5,270)==11.785714285714285"
    ]
  },
  {
    "mbpp_id": 762,
    "problem_statement": "Write a function to check whether the given month number contains 30 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_monthnumber_number' is not defined",
      "Test 2: FAIL - name 'check_monthnumber_number' is not defined",
      "Test 3: FAIL - name 'check_monthnumber_number' is not defined"
    ],
    "generated_code": "def check_monthnumber(monthnumber):\n    \"\"\"\n    Returns True if the month number has 30 days, False otherwise.\n    \n    Parameters:\n    monthnumber (int): The month number to be checked.\n    \n    Returns:\n    bool: True if the month has 30 days, False otherwise.\n    \"\"\"\n    return monthnumber in [4, 6, 9, 11]\n\n# Test cases to verify the correctness of the function\nprint(check_monthnumber(6)) # Expected output: True\nprint(check_monthnumber(2)) # Expected output: False\nprint(check_monthnumber(12)) # Expected output: False",
    "test_cases": [
      "assert check_monthnumber_number(6)==True",
      "assert check_monthnumber_number(2)==False",
      "assert check_monthnumber_number(12)==False"
    ]
  },
  {
    "mbpp_id": 763,
    "problem_statement": "Write a python function to find the minimum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def find_Min_Diff(arr, k):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr)):\n        if i > 0 and arr[i] - arr[i-1] < k:\n            continue\n        elif arr[-1] - arr[0] < k:\n            break\n        else:\n            min_diff = min(min_diff, arr[i+k-1] - arr[i])\n    return min_diff\n\n# Test Cases\nprint(find_Min_Diff([1,5,3,19,18,25], 6))  # Output: 1\nprint(find_Min_Diff([4,3,2,6], 4))         # Output: 1\nprint(find_Min_Diff([30,5,20,9], 4))       # Output: 4",
    "test_cases": [
      "assert find_Min_Diff((1,5,3,19,18,25),6) == 1",
      "assert find_Min_Diff((4,3,2,6),4) == 1",
      "assert find_Min_Diff((30,5,20,9),4) == 4"
    ]
  },
  {
    "mbpp_id": 764,
    "problem_statement": "Write a python function to count numeric values in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def number_ctr(s):\n    # Initialize counter for numbers\n    num_count = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # If the character is a digit, increment the counter\n        if char.isdigit():\n            num_count += 1\n            \n    # Return the total count of digits found\n    return num_count",
    "test_cases": [
      "assert number_ctr('program2bedone') == 1",
      "assert number_ctr('3wonders') ==1",
      "assert number_ctr('123') == 3"
    ]
  },
  {
    "mbpp_id": 765,
    "problem_statement": "Write a function to find nth polite number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def is_polite(n):\n    count = 0\n    current_number = 0\n    \n    while True:\n        if is_polite_helper(current_number) == n:\n            return current_number + 1\n        current_number += 1\n        count += 1\n        \ndef is_polite_helper(num):\n    i = 0\n    temp = num\n    while temp > 0 and i < 10:\n        if not (temp % 10) in [4, 6]:\n            break\n        temp //= 10\n        i += 1\n    else:\n        return True\n    return False",
    "test_cases": [
      "assert is_polite(7) == 11",
      "assert is_polite(4) == 7",
      "assert is_polite(9) == 13"
    ]
  },
  {
    "mbpp_id": 766,
    "problem_statement": "Write a function to iterate over all pairs of consecutive items in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pair_wise(lst):\n    return list(zip(lst[::2], lst[1::2]))",
    "test_cases": [
      "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
      "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
      "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
    ]
  },
  {
    "mbpp_id": 767,
    "problem_statement": "Write a python function to count the number of pairs whose sum is equal to ‘sum’.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Pairs_Count(arr, target_sum, k):\n    \"\"\"\n    Function to find the number of pairs in an array that add up to a given sum 'k'.\n    \n    Parameters:\n    arr (list): List of integers.\n    target_sum (int): The target sum for which we need to find pairs.\n    k (int): The value by which each pair must be multiplied before counting.\n    \n    Returns:\n    int: Number of pairs with their product greater than or equal to 'target_sum'.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] * k + arr[j] * k) >= target_sum and abs(arr[i] - arr[j]) > abs(k):\n                count += 1\n    return count",
    "test_cases": [
      "assert get_Pairs_Count([1,1,1,1],4,2) == 6",
      "assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3",
      "assert get_Pairs_Count([1,-2,3],3,1) == 1"
    ]
  },
  {
    "mbpp_id": 768,
    "problem_statement": "Write a python function to check for odd parity of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Odd_Parity(n):\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(abs(n)))\n    \n    # Check if the sum is even\n    return sum_of_digits % 2 == 0",
    "test_cases": [
      "assert check_Odd_Parity(13) == True",
      "assert check_Odd_Parity(21) == True",
      "assert check_Odd_Parity(18) == False"
    ]
  },
  {
    "mbpp_id": 769,
    "problem_statement": "Write a python function to get the difference between two lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Diff(list_1, list_2):\n    # Remove elements in list_2 from list_1 and return the result\n    return list(set(list_1) - set(list_2))",
    "test_cases": [
      "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
      "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
      "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
    ]
  },
  {
    "mbpp_id": 770,
    "problem_statement": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    \"\"\"\n    Calculate the sum of the fourth powers of the first n odd natural numbers.\n    \n    Parameters:\n    - n: An integer representing the number of initial odd natural numbers to consider.\n    \n    Returns:\n    - The sum as an integer.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n + 1):\n        # Calculate the i-th odd number and its fourth power\n        odd_number = 2 * i - 1\n        fourth_power = odd_number ** 4\n        total_sum += fourth_power\n    \n    return total_sum",
    "test_cases": [
      "assert odd_Num_Sum(2) == 82",
      "assert odd_Num_Sum(3) == 707",
      "assert odd_Num_Sum(4) == 3108"
    ]
  },
  {
    "mbpp_id": 771,
    "problem_statement": "Write a function to check if the given expression is balanced or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_expression(expression):\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    \n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            # Ignore non-parentheses and non-brackets characters\n            continue\n            \n    return len(stack) == 0",
    "test_cases": [
      "assert check_expression(\"{()}[{}]\") == True",
      "assert check_expression(\"{()}[{]\") == False",
      "assert check_expression(\"{()}[{}][]({})\") == True"
    ]
  },
  {
    "mbpp_id": 772,
    "problem_statement": "Write a function to remove all the words with k length in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef remove_length(s, k):\n    # Remove words longer than k characters\n    return re.sub(r'\\b\\w{%d}\\b' % k, '', s)",
    "test_cases": [
      "assert remove_length('The person is most value tet', 3) == 'person is most value'",
      "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'",
      "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"
    ]
  },
  {
    "mbpp_id": 773,
    "problem_statement": "Write a function to find the occurrence and position of the substrings within a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 're' is not defined",
      "Test 2: FAIL - name 're' is not defined",
      "Test 3: FAIL - name 're' is not defined"
    ],
    "generated_code": "def occurance_substring(string, substring):\n    # Find all occurrences of substring in the string\n    indices = [m.start() for m in re.finditer(substring, string)]\n    start_index = min(indices)\n    end_index = max(indices) if indices else None\n    return substring, start_index, end_index",
    "test_cases": [
      "assert occurance_substring('python programming, python language','python')==('python', 0, 6)",
      "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)",
      "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"
    ]
  },
  {
    "mbpp_id": 774,
    "problem_statement": "Write a function to check if the string is a valid email address or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'\n\n# Test cases\nprint(check_email(\"ankitrai326@gmail.com\"))  # Expected output: \"Valid Email\"\nprint(check_email(\"my.ownsite@ourearth.org\"))  # Expected output: \"Valid Email\"\nprint(check_email(\"ankitaoie326.com\"))  # Expected output: \"Invalid Email\"",
    "test_cases": [
      "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'",
      "assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'",
      "assert check_email(\"ankitaoie326.com\") == 'Invalid Email'"
    ]
  },
  {
    "mbpp_id": 775,
    "problem_statement": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'odd_position' is not defined",
      "Test 2: FAIL - name 'odd_position' is not defined",
      "Test 3: FAIL - name 'odd_position' is not defined"
    ],
    "generated_code": "def is_odd_indexed_odd(lst):\n    \"\"\"\n    Check if all elements at odd indices in the list 'lst' are odd.\n    \n    Args:\n    lst (list): A list of integers.\n    \n    Returns:\n    bool: True if every element at odd indices is an odd number, otherwise False.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nprint(is_odd_indexed_odd([2,1,4,3,6,7,6,3]))  # Expected output: True\nprint(is_odd_indexed_odd([4,1,2]))           # Expected output: True\nprint(is_odd_indexed_odd([1,2,3]))           # Expected output: False",
    "test_cases": [
      "assert odd_position([2,1,4,3,6,7,6,3]) == True",
      "assert odd_position([4,1,2]) == True",
      "assert odd_position([1,2,3]) == False"
    ]
  },
  {
    "mbpp_id": 776,
    "problem_statement": "Write a function to count those characters which have vowels as their neighbors in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_vowels(s):\n    vowel_count = sum(1 for i in range(len(s) - 1) if s[i] == 'a' and s[i + 1] == 'e' or \n                      s[i] == 'A' and s[i + 1] == 'E' or \n                      s[i] == 'i' and s[i + 1] == 'o' or \n                      s[i] == 'I' and s[i + 1] == 'O')\n    return vowel_count",
    "test_cases": [
      "assert count_vowels('bestinstareels') == 7",
      "assert count_vowels('partofthejourneyistheend') == 12",
      "assert count_vowels('amazonprime') == 5"
    ]
  },
  {
    "mbpp_id": 777,
    "problem_statement": "Write a python function to find the sum of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def find_Sum(arr, target_sum):\n    \"\"\"\n    This function takes an array 'arr' and a number 'target_sum', it returns the sum of all unique numbers in 'arr'\n    which equals exactly to 'target_sum'.\n    \n    :param arr: List[int] - The input array containing integers.\n    :param target_sum: int - The exact sum value we want to achieve with unique elements from the array.\n    :return: int - Sum of unique elements in 'arr' that equal to 'target_sum'.\n    \"\"\"\n    frequency = {}\n    for num in arr:\n        if num not in frequency:\n            frequency[num] = 1\n        else:\n            del frequency[num]\n    \n    # Calculate sum of remaining keys where their values still match our target_sum\n    total_sum = sum(key * val for key, val in frequency.items() if key * val == target_sum)\n    \n    return total_sum\n\n# Check function with provided data points\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21",
      "assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71",
      "assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78"
    ]
  },
  {
    "mbpp_id": 778,
    "problem_statement": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pack_consecutive_duplicates(nums):\n    result = []\n    i = 0\n    while i < len(nums):\n        count = 1\n        j = i + 1\n        while j < len(nums) and nums[j] == nums[i]:\n            count += 1\n            j += 1\n        result.append([nums[i]] * count)\n        i = j\n    return result",
    "test_cases": [
      "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
      "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]",
      "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
    ]
  },
  {
    "mbpp_id": 779,
    "problem_statement": "Write a function to count the number of unique lists within a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def unique_sublists(lst):\n    from collections import defaultdict\n    result = defaultdict(set)\n    for sublist in lst:\n        result[tuple(sublist)].add(1)\n    return {key: len(value) for key, value in result.items()}",
    "test_cases": [
      "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
      "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
      "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"
    ]
  },
  {
    "mbpp_id": 780,
    "problem_statement": "Write a function to find the combinations of sums with tuples in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for -: 'tuple' and 'int'",
      "Test 2: FAIL - unsupported operand type(s) for -: 'tuple' and 'int'",
      "Test 3: FAIL - unsupported operand type(s) for -: 'tuple' and 'int'"
    ],
    "generated_code": "def find_combinations(tuples_list):\n    result = []\n    for i in range(len(tuples_list)):\n        for j in range(i+1, len(tuples_list)):\n            combination = sorted([tuples_list[i][0] + tuples_list[j][0], tuples_list[i][1] + tuples_list[j][1]])\n            if not any(abs(x - y) == abs(combination[0] - combination[1]) for x, y in zip(result, combination)):\n                result.append(tuple(combination))\n    return result",
    "test_cases": [
      "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
      "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]",
      "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
    ]
  },
  {
    "mbpp_id": 781,
    "problem_statement": "Write a python function to check whether the count of divisors is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Divisors(num):\n    \"\"\"\n    This function takes an integer num and returns 'Even' if the number of divisors is even,\n    and 'Odd' if the number of divisors is odd.\n    \n    Parameters:\n    num (int): The number to check for divisors.\n    \n    Returns:\n    str: 'Even' if the number of divisors is even, 'Odd' otherwise.\n    \"\"\"\n    # Initialize divisor counter\n    divisor_count = 0\n    \n    # Iterate through possible divisors from 1 to sqrt(num)\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            # If divisors are equal, increment counter twice (for both divisors)\n            if num // i == i:\n                divisor_count += 1\n            else:\n                # For each pair of divisors (i and num//i), increment counter once\n                divisor_count += 2\n                \n    # Determine if the count of divisors is even or odd and return accordingly\n    return 'Even' if divisor_count % 2 == 0 else 'Odd'",
    "test_cases": [
      "assert count_Divisors(10) == \"Even\"",
      "assert count_Divisors(100) == \"Odd\"",
      "assert count_Divisors(125) == \"Even\""
    ]
  },
  {
    "mbpp_id": 782,
    "problem_statement": "Write a python function to find the sum of all odd length subarrays.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Odd_Length_Sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate over each possible start and end index for subarrays\n    for i in range(n):\n        for j in range(i, n):\n            subarray_sum = sum(arr[k] for k in range(i, j+1))\n            if (j - i + 1) % 2 != 0:\n                total_sum += subarray_sum\n    \n    return total_sum\n\n# Test cases\nprint(Odd_Length_Sum([1,2,4]))  # Expected output: 14\nprint(Odd_Length_Sum([1,2,1,2]))  # Expected output: 15\nprint(Odd_Length_Sum([1,7]))  # Expected output: 8",
    "test_cases": [
      "assert Odd_Length_Sum([1,2,4]) == 14",
      "assert Odd_Length_Sum([1,2,1,2]) == 15",
      "assert Odd_Length_Sum([1,7]) == 8"
    ]
  },
  {
    "mbpp_id": 783,
    "problem_statement": "Write a function to convert rgb color to hsv color.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rgb_to_hsv(r, g, b):\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    \n    delta = max_color - min_color\n    \n    if max_color == min_color:\n        h = 0.0\n    elif max_color == r:\n        h = (60 * ((g-b)/delta) + 360) % 360\n    elif max_color == g:\n        h = (60 * ((b-r)/delta) + 120) % 360\n    else: \n        h = (60 * ((r-g)/delta) + 240) % 360\n    \n    if max_color == 0:\n        s = 0.0\n    else:\n        s = (delta / max_color) * 100\n        \n    v = max_color * 100\n    \n    return (h, s, v)\n\n# Test cases\nprint(rgb_to_hsv(255, 255, 255)) # Expected output: (0.0, 100.0, 100.0)\nprint(rgb_to_hsv(0, 215, 0))    # Expected output: (120.0, 100.0, 84.31372549019608)\nprint(rgb_to_hsv(10, 215, 110)) # Expected output: (149.26829268292684, 95.34883720930233, 84.31372549019608)",
    "test_cases": [
      "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)",
      "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)",
      "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"
    ]
  },
  {
    "mbpp_id": 784,
    "problem_statement": "Write a function to find the product of first even and odd number of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def mul_even_odd(nums):\n    # Initialize product with 1\n    product = 1\n    \n    # Check if there's an even number in the list\n    for num in nums:\n        if num % 2 == 0:\n            # Multiply the product by the first even number found\n            product *= num\n            \n            # If all numbers are even, break as we have already found all even numbers\n            break\n            \n    return product\n\n# Test cases\nprint(mul_even_odd([1,3,5,7,4,1,6,8]))   # Expected output: 4\nprint(mul_even_odd([1,2,3,4,5,6,7,8,9,10]))   # Expected output: 2\nprint(mul_even_odd([1,5,7,9,10]))    # Expected output: 10",
    "test_cases": [
      "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert mul_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 785,
    "problem_statement": "Write a function to convert tuple string to integer tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Converts a string representation of a tuple into an actual tuple of integers.\n    \n    Args:\n        tuple_str (str): A string representing a tuple in format \"(x1, x2, ..., xn)\" where xi are integers.\n        \n    Returns:\n        tuple: A tuple containing the integers from the input string.\n    \"\"\"\n    # Extract numbers from the string and create a list of integers\n    int_list = [int(num) for num in tuple_str[1:-1].split(', ')]\n    # Convert the list to a tuple\n    result_tuple = tuple(int_list)\n    return result_tuple",
    "test_cases": [
      "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)",
      "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
      "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)"
    ]
  },
  {
    "mbpp_id": 786,
    "problem_statement": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def right_insertion(sorted_list, target_value):\n    left = 0\n    right = len(sorted_list)\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if sorted_list[mid] == target_value:\n            return mid\n        elif sorted_list[mid] > target_value:\n            right = mid\n        else:\n            left = mid + 1\n            \n    # If the loop exits without finding the target, 'right' will be just one past the last index where the target could be inserted.\n    return right - 1",
    "test_cases": [
      "assert right_insertion([1,2,4,5],6)==4",
      "assert right_insertion([1,2,4,5],3)==2",
      "assert right_insertion([1,2,4,5],7)==4"
    ]
  },
  {
    "mbpp_id": 787,
    "problem_statement": "Write a function that matches a string that has an a followed by three 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def text_match_three(text):\n    if text.startswith('a') and len([char for char in text[1:] if char == 'b']) == 3:\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Test cases\nprint(text_match_three(\"ac\")) # Expected output: Not matched!\nprint(text_match_three(\"dc\")) # Expected output: Not matched!\nprint(text_match_three(\"abbbba\")) # Expected output: Found a match!",
    "test_cases": [
      "assert text_match_three(\"ac\")==('Not matched!')",
      "assert text_match_three(\"dc\")==('Not matched!')",
      "assert text_match_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 788,
    "problem_statement": "Write a function to create a new tuple from the given string and list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - can only concatenate list (not \"tuple\") to list",
      "Test 2: FAIL - can only concatenate list (not \"tuple\") to list",
      "Test 3: FAIL - can only concatenate list (not \"tuple\") to list"
    ],
    "generated_code": "def new_tuple(string_list, *strings):\n    # Use *strings as an unpacked argument in the tuple constructor\n    return tuple(string_list + strings)",
    "test_cases": [
      "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')",
      "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')",
      "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"
    ]
  },
  {
    "mbpp_id": 789,
    "problem_statement": "Write a function to calculate the perimeter of a regular polygon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_polygon(n, s):\n    return n * s",
    "test_cases": [
      "assert perimeter_polygon(4,20)==80",
      "assert perimeter_polygon(10,15)==150",
      "assert perimeter_polygon(9,7)==63"
    ]
  },
  {
    "mbpp_id": 790,
    "problem_statement": "Write a python function to check whether every even index contains even numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'even_position' is not defined",
      "Test 2: FAIL - name 'even_position' is not defined",
      "Test 3: FAIL - name 'even_position' is not defined"
    ],
    "generated_code": "def is_even_index_even(lst):\n    \"\"\"\n    Check if all elements at even indices in the list lst are even.\n    \n    Args:\n    lst (list): A list of integers\n    \n    Returns:\n    bool: True if all elements at even indices are even, False otherwise\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True",
    "test_cases": [
      "assert even_position([3,2,1]) == False",
      "assert even_position([1,2,3]) == False",
      "assert even_position([2,1,4]) == True"
    ]
  },
  {
    "mbpp_id": 791,
    "problem_statement": "Write a function to remove the nested record from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_nested(tup):\n    \"\"\"\n    This function takes a tuple as input and removes all occurrences of its innermost elements.\n    The innermost element is defined as a tuple with no other tuples inside it.\n    \n    :param tup: A tuple containing integers and/or further nested tuples.\n    :return: A new tuple with all innermost elements removed.\n    \"\"\"\n    result = []\n    for item in tup:\n        if isinstance(item, int):  # Check if the current item is an integer\n            result.append(item)   # Add integer to result list\n        elif isinstance(item, tuple):  # If item is another tuple, recurse on it\n            result.extend(remove_nested(item))\n    return tuple(result)\n\n# Test cases\nprint(remove_nested((1, 5, 7, (4, 6), 10)))  # Expected output: (1, 5, 7, 10)\nprint(remove_nested((2, 6, 8, (5, 7), 11)))  # Expected output: (2, 6, 8, 11)\nprint(remove_nested((3, 7, 9, (6, 8), 12)))  # Expected output: (3, 7, 9, 12)",
    "test_cases": [
      "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)",
      "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
      "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)"
    ]
  },
  {
    "mbpp_id": 792,
    "problem_statement": "Write a python function to count the number of lists in a given number of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_list(lst):\n    \"\"\"\n    Counts and returns the total number of lists within the input list.\n    \n    Parameters:\n    lst (list): A list containing sublists.\n    \n    Returns:\n    int: The total number of sublists in the input list.\n    \"\"\"\n    return len(lst)\n\n# Test cases to verify the correctness of the solution\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
    "test_cases": [
      "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
      "assert count_list([[1,2],[2,3],[4,5]]) == 3",
      "assert count_list([[1,0],[2,0]]) == 2"
    ]
  },
  {
    "mbpp_id": 793,
    "problem_statement": "Write a python function to find the last position of an element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last(arr, key, n):\n    low = 0\n    high = n - 1\n    ans = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == key:\n            ans = mid\n            low = mid + 1  # Look for earlier occurrences\n        elif arr[mid] < key:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return ans",
    "test_cases": [
      "assert last([1,2,3],1,3) == 0",
      "assert last([1,1,1,2,3,4],1,6) == 2",
      "assert last([2,3,2,3,6,8,9],3,8) == 3"
    ]
  },
  {
    "mbpp_id": 794,
    "problem_statement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'text_starta_endb' is not defined",
      "Test 2: FAIL - name 'text_starta_endb' is not defined",
      "Test 3: FAIL - name 'text_starta_endb' is not defined"
    ],
    "generated_code": "import re\n\ndef find_match(text):\n    # The regular expression pattern will look for 'a' followed by any characters and then end with 'b'.\n    if re.search(r'a.*?b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function\nprint(find_match(\"aabbbb\"))  # Expected output: Found a match!\nprint(find_match(\"aabAbbbc\"))  # Expected output: Not matched!\nprint(find_match(\"accddbbjjj\"))  # Expected output: Not matched!",
    "test_cases": [
      "assert text_starta_endb(\"aabbbb\")==('Found a match!')",
      "assert text_starta_endb(\"aabAbbbc\")==('Not matched!')",
      "assert text_starta_endb(\"accddbbjjj\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 795,
    "problem_statement": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\nfrom typing import List\n\ndef cheap_items(data: List[dict], k: int) -> List[dict]:\n    # Sort data by price in ascending order\n    sorted_data = sorted(data, key=lambda x: x['price'])\n    # Use heapq.nsmallest to get the first k elements with smallest prices\n    return heapq.nsmallest(k, sorted_data, key=lambda x: x['price'])",
    "test_cases": [
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]",
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]",
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]"
    ]
  },
  {
    "mbpp_id": 796,
    "problem_statement": "Write function to find the sum of all items in the given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def return_sum(input_dict):\n    # Calculate the sum of all values in the dictionary\n    total = sum(input_dict.values())\n    return total",
    "test_cases": [
      "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600",
      "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88",
      "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"
    ]
  },
  {
    "mbpp_id": 797,
    "problem_statement": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_in_Range(l, r):\n    \"\"\"\n    Returns the sum of all odd natural numbers within the range [l, r].\n    \n    Parameters:\n    - l (int): The lower limit of the range.\n    - r (int): The upper limit of the range.\n    \n    Returns:\n    int: The sum of all odd natural numbers in the given range.\n    \"\"\"\n    total_sum = 0\n    for num in range(max(l, 1), min(r+1, 2*max(l, 1))):\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum",
    "test_cases": [
      "assert sum_in_Range(2,5) == 8",
      "assert sum_in_Range(5,7) == 12",
      "assert sum_in_Range(7,13) == 40"
    ]
  },
  {
    "mbpp_id": 798,
    "problem_statement": "Write a python function to find the sum of an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def _sum(arr):\n    # Initialize total to 0\n    total = 0\n    \n    # Iterate through each element in the array\n    for num in arr:\n        # Add the current number to the total\n        total += num\n    \n    # Return the final sum\n    return total",
    "test_cases": [
      "assert _sum([1, 2, 3]) == 6",
      "assert _sum([15, 12, 13, 10]) == 50",
      "assert _sum([0, 1, 2]) == 3"
    ]
  },
  {
    "mbpp_id": 799,
    "problem_statement": "Write a python function to left rotate the bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def left_Rotate(num, positions):\n    # Calculate the length of the binary representation\n    bit_len = len(bin(num)) - 2\n    \n    # Perform left rotation\n    rotated_num = ((num << positions) & ((1 << bit_len) - 1)) | ((num >> (bit_len - positions)) & ((1 << (bit_len - positions)) - 1))\n    \n    return rotated_num",
    "test_cases": [
      "assert left_Rotate(16,2) == 64",
      "assert left_Rotate(10,2) == 40",
      "assert left_Rotate(99,3) == 792"
    ]
  },
  {
    "mbpp_id": 800,
    "problem_statement": "Write a function to remove all whitespaces from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_all_spaces(input_str):\n    # Return the input string with all spaces removed\n    return ''.join(input_str.split())\n\n# Test cases to verify the correctness of the solution\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'\nassert remove_all_spaces('python                     program') == 'pythonprogram'\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert remove_all_spaces('python  program')==('pythonprogram')",
      "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')",
      "assert remove_all_spaces('python                     program')==('pythonprogram')"
    ]
  },
  {
    "mbpp_id": 801,
    "problem_statement": "Write a python function to count the number of equal numbers from three given integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - AttributeError: 'set' object has no attribute 'count'"
    ],
    "generated_code": "def test_three_equal(a, b, c):\n    \"\"\"\n    Counts how many elements in the list [a, b, c] are equal.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    c (int): The third integer.\n    \n    Returns:\n    int: The count of elements equal to each other among [a, b, c].\n    \"\"\"\n    # Create a set with unique values for comparison\n    unique_values = {a, b, c}\n    # Count the frequency of each element and return the highest frequency\n    return max([unique_values.count(i) for i in range(len(unique_values))])\n\n# Check function with provided data points\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(-1, -2, -3) == 0\nassert test_three_equal(1, 2, 2) == 2\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert test_three_equal(1,1,1) == 3",
      "assert test_three_equal(-1,-2,-3) == 0",
      "assert test_three_equal(1,2,2) == 2"
    ]
  },
  {
    "mbpp_id": 802,
    "problem_statement": "Write a python function to count the number of rotations required to generate a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Rotation(arr, n):\n    # Counting the number of elements less than the first element in the array\n    rotation = sum(1 for i in arr if i < arr[0])\n    \n    # If there is at least one element which is smaller than the first element,\n    # it means we need 'rotation' rotations to make the array sorted.\n    return rotation\n\n# Test Cases\nprint(count_Rotation([3,2,1],3))   # Expected output: 1\nprint(count_Rotation([4,5,1,2,3],5))  # Expected output: 2\nprint(count_Rotation([7,8,9,1,2,3],6))  # Expected output: 3",
    "test_cases": [
      "assert count_Rotation([3,2,1],3) == 1",
      "assert count_Rotation([4,5,1,2,3],5) == 2",
      "assert count_Rotation([7,8,9,1,2,3],6) == 3"
    ]
  },
  {
    "mbpp_id": 803,
    "problem_statement": "Write a python function to check whether the given number is a perfect square or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef is_Perfect_Square(n):\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n",
    "test_cases": [
      "assert is_Perfect_Square(10) == False",
      "assert is_Perfect_Square(36) == True",
      "assert is_Perfect_Square(14) == False"
    ]
  },
  {
    "mbpp_id": 804,
    "problem_statement": "Write a python function to check whether the product of numbers is even or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Product_Even(arr, n):\n    # Initialize a variable to hold the product\n    product = 1\n    \n    # Iterate through each number in the array\n    for i in range(n):\n        # Multiply the current number with the product\n        product *= arr[i]\n    \n    # Check if the product is even\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_Product_Even([1,2,3],3) == True",
      "assert is_Product_Even([1,2,1,4],4) == True",
      "assert is_Product_Even([1,1],2) == False"
    ]
  },
  {
    "mbpp_id": 805,
    "problem_statement": "Write a function to find the list in a list of lists whose sum of elements is the highest.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_list(lists):\n    return max(lists, key=sum)\n\n# Test cases\nprint(max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]))  # Output: [10, 11, 12]\nprint(max_sum_list([[3,2,1], [6,5,4], [12,11,10]]))  # Output: [12, 11, 10]\nprint(max_sum_list([[2,3,1]]))  # Output: [2, 3, 1]",
    "test_cases": [
      "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ",
      "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ",
      "assert max_sum_list([[2,3,1]])==[2,3,1] "
    ]
  },
  {
    "mbpp_id": 806,
    "problem_statement": "Write a function to find maximum run of uppercase characters in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_run_uppercase(s):\n    current_count = 1\n    max_count = 1\n    \n    for i in range(1, len(s)):\n        if s[i] >= s[i - 1]:\n            current_count += 1\n        else:\n            current_count = 1\n        \n        if current_count > max_count:\n            max_count = current_count\n            \n    return max_count",
    "test_cases": [
      "assert max_run_uppercase('GeMKSForGERksISBESt') == 5",
      "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6",
      "assert max_run_uppercase('GooGLEFluTTER') == 4"
    ]
  },
  {
    "mbpp_id": 807,
    "problem_statement": "Write a python function to find the first odd number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n\n# Test cases\nprint(first_odd([1,3,5]))  # Should print 1\nprint(first_odd([2,4,1,3]))  # Should print 1\nprint(first_odd([8,9,1]))  # Should print 9",
    "test_cases": [
      "assert first_odd([1,3,5]) == 1",
      "assert first_odd([2,4,1,3]) == 1",
      "assert first_odd ([8,9,1]) == 9"
    ]
  },
  {
    "mbpp_id": 808,
    "problem_statement": "Write a function to check if the given tuples contain the k or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_K(test_tup, k):\n    # Check if 'k' is in the tuple\n    return k in test_tup",
    "test_cases": [
      "assert check_K((10, 4, 5, 6, 8), 6) == True",
      "assert check_K((1, 2, 3, 4, 5, 6), 7) == False",
      "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"
    ]
  },
  {
    "mbpp_id": 809,
    "problem_statement": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_smaller(tup1, tup2):\n    # Compare elements of both tuples\n    for i in range(len(tup1)):\n        if tup1[i] >= tup2[i]:\n            return False\n    return True",
    "test_cases": [
      "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
      "assert check_smaller((4, 5, 6), (3, 4, 5)) == True",
      "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"
    ]
  },
  {
    "mbpp_id": 810,
    "problem_statement": "Write a function to iterate over elements repeating each as many times as its count.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - tuple index out of range",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - tuple index out of range"
    ],
    "generated_code": "def count_variable(n, *args):\n    result = []\n    for i in range(n):\n        result.extend([chr(ord('a') + i)] * args[i])\n    return result",
    "test_cases": [
      "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ",
      "assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] ",
      "assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"
    ]
  },
  {
    "mbpp_id": 811,
    "problem_statement": "Write a function to check if two lists of tuples are identical or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_identical(list1, list2):\n    # Check if both lists have the same length\n    if len(list1) != len(list2):\n        return False\n    \n    # Compare each tuple in the first list with the corresponding tuple in the second list\n    for tup1, tup2 in zip(list1, list2):\n        # Check if all elements in the current pair are equal\n        if set(tup1) != set(tup2):\n            return False\n    \n    # If all pairs are equal, return True\n    return True",
    "test_cases": [
      "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True",
      "assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False",
      "assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True"
    ]
  },
  {
    "mbpp_id": 812,
    "problem_statement": "Write a function to abbreviate 'road' as 'rd.' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef road_rd(s):\n    return re.sub(r'\\broad\\b', 'rd.', s)",
    "test_cases": [
      "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')",
      "assert road_rd(\"palnadu Road\")==('palnadu Rd.')",
      "assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')"
    ]
  },
  {
    "mbpp_id": 813,
    "problem_statement": "Write a function to find length of the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_length(s):\n    return len(s)",
    "test_cases": [
      "assert string_length('python')==6",
      "assert string_length('program')==7",
      "assert string_length('language')==8"
    ]
  },
  {
    "mbpp_id": 814,
    "problem_statement": "Write a function to find the area of a rombus.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rombus_area(diagonal_1, diagonal_2):\n    # Calculate the area using the formula for the area of a rhombus\n    return 0.5 * diagonal_1 * diagonal_2",
    "test_cases": [
      "assert rombus_area(10,20)==100",
      "assert rombus_area(10,5)==25",
      "assert rombus_area(4,2)==4"
    ]
  },
  {
    "mbpp_id": 815,
    "problem_statement": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - sort_by_dnf() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - sort_by_dnf() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - sort_by_dnf() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def sort_by_dnf(arr):\n    def partition(low, high):\n        i = low - 1\n        pivot = arr[high]\n        \n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        \n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n    \n    def quick_sort_recursive(low, high):\n        if low < high:\n            pi = partition(low, high)\n            quick_sort_recursive(low, pi - 1)\n            quick_sort_recursive(pi + 1, high)\n    \n    n = len(arr)\n    quick_sort_recursive(0, n - 1)\n    return arr\n\n# Test cases\nprint(sort_by_dnf([1,2,0,1,0,1,2,1,1]))  # Expected output: [0, 0, 1, 1, 1, 1, 1, 2, 2]\nprint(sort_by_dnf([1,0,0,1,2,1,2,2,1,0]))  # Expected output: [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nprint(sort_by_dnf([2,2,1,0,0,0,1,1,2,1]))  # Expected output: [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
    "test_cases": [
      "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]",
      "assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
      "assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
    ]
  },
  {
    "mbpp_id": 816,
    "problem_statement": "Write a function to clear the values of the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def clear_tuple(tup):\n    \"\"\"\n    This function takes a tuple as input and returns a new tuple with all its elements set to None.\n    \n    Parameters:\n    tup (tuple): The input tuple containing integer elements.\n    \n    Returns:\n    tuple: A new tuple with all elements from the input tuple set to None.\n    \"\"\"\n    return () if not tup else ()\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    assert clear_tuple((1, 5, 3, 6, 8)) == (), \"Test case 1 failed\"\n    assert clear_tuple((2, 1, 4 ,5 ,6)) == (), \"Test case 2 failed\"\n    assert clear_tuple((3, 2, 5, 6, 8)) == (), \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_function()",
    "test_cases": [
      "assert clear_tuple((1, 5, 3, 6, 8)) == ()",
      "assert clear_tuple((2, 1, 4 ,5 ,6)) == ()",
      "assert clear_tuple((3, 2, 5, 6, 8)) == ()"
    ]
  },
  {
    "mbpp_id": 817,
    "problem_statement": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 or num % n == 0]",
    "test_cases": [
      "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]",
      "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]",
      "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]"
    ]
  },
  {
    "mbpp_id": 818,
    "problem_statement": "Write a python function to count lower case letters in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lower_ctr(s):\n    # Initialize counter for lowercase characters\n    lower_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char.islower():\n            lower_count += 1\n            \n    # Return the total count of lowercase characters\n    return lower_count",
    "test_cases": [
      "assert lower_ctr('abc') == 3",
      "assert lower_ctr('string') == 6",
      "assert lower_ctr('Python') == 5"
    ]
  },
  {
    "mbpp_id": 819,
    "problem_statement": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_duplic(nums):\n    \"\"\"\n    Count the frequency of consecutive duplicate elements in a given list.\n    \n    Parameters:\n    nums (List[int]): The input list of integers.\n    \n    Returns:\n    Tuple[List[int], List[int]]: A tuple containing two lists. The first list contains the unique values with their frequencies,\n                                  and the second list contains the counts for each value in the first list.\n    \"\"\"\n    # Dictionary to store frequency of each element\n    freq = {}\n    duplicates = []\n    dup_count = []\n\n    # Calculate frequency of each element\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Append the values to the result list along with their frequencies\n    for key, value in freq.items():\n        duplicates.append(key)\n        dup_count.append(value)\n\n    return (duplicates, dup_count)",
    "test_cases": [
      "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])",
      "assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])",
      "assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ]
  },
  {
    "mbpp_id": 820,
    "problem_statement": "Write a function to check whether the given month number contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def check_monthnum_number(month_num):\n    # Check if the month number is valid (1-12)\n    if month_num < 1 or month_num > 12:\n        return False\n    \n    # Return True for February in a leap year, otherwise False\n    return month_num == 2 and ((is_leap_year() and not(is_leap_year())) or not(is_leap_year()))\n\n# Helper function to determine if it's a leap year\ndef is_leap_year():\n    # Implementing logic to check if a year is a leap year\n    # For simplicity, assume every year divisible by 4 is a leap year,\n    # unless it's also divisible by 100 but not by 400\n    year = int(input(\"Enter a year: \"))\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_monthnum_number(2)==True",
      "assert check_monthnum_number(1)==False",
      "assert check_monthnum_number(3)==False"
    ]
  },
  {
    "mbpp_id": 821,
    "problem_statement": "Write a function to merge two dictionaries into a single expression.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_cases": [
      "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}",
      "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}",
      "assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"
    ]
  },
  {
    "mbpp_id": 822,
    "problem_statement": "Write a function to return true if the password is valid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pass_validity(password):\n    # Check if the length of the password is less than 6 characters\n    if len(password) < 6:\n        return False\n    \n    # Check if the first character and last character are both uppercase letters\n    if not password[0].isupper() or not password[-1].isupper():\n        return False\n    \n    # Check for at least one digit in the password\n    if not any(char.isdigit() for char in password):\n        return False\n    \n    # Check for exactly one special character in the password\n    if not any(not char.isalnum() for char in password):\n        return False\n    \n    # If all checks pass, return True\n    return True",
    "test_cases": [
      "assert pass_validity(\"password\")==False",
      "assert pass_validity(\"Password@10\")==True",
      "assert pass_validity(\"password@10\")==False"
    ]
  },
  {
    "mbpp_id": 823,
    "problem_statement": "Write a function to check if the given string starts with a substring using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_substring(s, sub):\n    # Create a regular expression pattern to match the first occurrence of the substring in the main string\n    pattern = r'^{}+'.format(re.escape(sub))\n    \n    # Search for the pattern at the beginning of the string\n    if re.search(pattern, s) is not None:\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'\n\n# Test cases\nprint(check_substring(\"dreams for dreams makes life fun\", \"makes\"))  # Expected output: 'string doesnt start with the given substring'\nprint(check_substring(\"Hi there how are you Hi alex\", \"Hi\"))         # Expected output: 'string starts with the given substring'\nprint(check_substring(\"Its been a long day\", \"been\"))               # Expected output: 'string doesnt start with the given substring'",
    "test_cases": [
      "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'",
      "assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'",
      "assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'"
    ]
  },
  {
    "mbpp_id": 824,
    "problem_statement": "Write a python function to remove even numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_even(nums):\n    # Use list comprehension to filter out even numbers and create a new list\n    return [num for num in nums if num % 2 != 0]\n\n# Test cases\nprint(remove_even([1,3,5,2]))  # Expected output: [1,3,5]\nprint(remove_even([5,6,7]))   # Expected output: [5,7]\nprint(remove_even([1,2,3,4])) # Expected output: [1,3]",
    "test_cases": [
      "assert remove_even([1,3,5,2]) == [1,3,5]",
      "assert remove_even([5,6,7]) == [5,7]",
      "assert remove_even([1,2,3,4]) == [1,3]"
    ]
  },
  {
    "mbpp_id": 825,
    "problem_statement": "Write a python function to access multiple elements of specified index from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def access_elements(lst, indexes):\n    # Accessing elements at the specified indices and returning them as a new list\n    return [lst[i] for i in indexes]\n\n# Test cases to verify the correctness of the function\nassert access_elements([2,3,8,4,7,9], [0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5], [1,2]) == [2,3]\nassert access_elements([1,0,2,3], [0,1]) == [1,0]\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]",
      "assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]",
      "assert access_elements([1,0,2,3],[0,1]) == [1,0]"
    ]
  },
  {
    "mbpp_id": 826,
    "problem_statement": "Write a python function to find the type of triangle from the given sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: All sides must be positive numbers."
    ],
    "generated_code": "def check_Type_Of_Triangle(a, b, c):\n    # Check if all sides are positive\n    if not (a > 0 and b > 0 and c > 0):\n        raise ValueError(\"All sides must be positive numbers.\")\n    \n    # Sort the sides to simplify comparison\n    sides = sorted([a, b, c])\n    side1, side2, side3 = sides\n    \n    # Check for obtuse-angled triangle using the Pythagorean theorem\n    if side1**2 + side2**2 < side3**2:\n        return \"Obtuse-angled Triangle\"\n    \n    # Check for acute-angled triangle\n    elif side1**2 + side2**2 == side3**2 or side1**2 + side3**2 == side2**2 or side2**2 + side3**2 == side1**2:\n        return \"Acute-angled Triangle\"\n    \n    # Check for right-angled triangle\n    else:\n        return \"Right-angled Triangle\"\n\n# Example test cases\nprint(check_Type_Of_Triangle(1,2,3))  # Expected output: Obtuse-angled Triangle\nprint(check_Type_Of_Triangle(2,2,2))  # Expected output: Acute-angled Triangle\nprint(check_Type_Of_Triangle(1,0,1))  # Expected output: Right-angled Triangle",
    "test_cases": [
      "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"",
      "assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"",
      "assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\""
    ]
  },
  {
    "mbpp_id": 827,
    "problem_statement": "Write a function to sum a specific column of a list in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_column(matrix, col_index):\n    return sum(row[col_index] for row in matrix)",
    "test_cases": [
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12",
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15",
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9"
    ]
  },
  {
    "mbpp_id": 828,
    "problem_statement": "Write a function to count alphabets,digits and special charactes in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_alpha_dig_spl(s):\n    alpha_count = 0\n    dig_count = 0\n    spl_count = 0\n    \n    for i in s:\n        if i.isalpha():\n            alpha_count += 1\n        elif i.isdigit():\n            dig_count += 1\n        else:\n            spl_count += 1\n            \n    return (alpha_count, dig_count, spl_count)\n\nprint(count_alpha_dig_spl(\"abc!@#123\")) # Expected output: (3, 3, 3)\nprint(count_alpha_dig_spl(\"dgsuy@#$%&1255\")) # Expected output: (5, 4, 5)\nprint(count_alpha_dig_spl(\"fjdsif627348#%$^&\")) # Expected output: (6, 6, 5)",
    "test_cases": [
      "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)",
      "assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)",
      "assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)"
    ]
  },
  {
    "mbpp_id": 829,
    "problem_statement": "Write a function to find out the second most repeated (or frequent) string in the given sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from collections import Counter\nimport heapq\n\ndef second_frequent(sequence):\n    # Count the frequency of each element in the sequence\n    freq_counter = Counter(sequence)\n    \n    # Use nlargest to get the n largest elements from the counter\n    top_n_elements = heapq.nlargest(2, freq_counter.items(), key=lambda x: x[1])\n    \n    # Return the first element which is the second most frequent one\n    return next((key for key, value in top_n_elements), None)\n\n# Test cases to verify the correctness of the function\nassert second_frequent([\"aaa\", \"bbb\", \"ccc\", \"bbb\", \"aaa\", \"aaa\"]) == \"bbb\"\nassert second_frequent([\"abc\", \"bcd\", \"abc\", \"bcd\", \"bcd\", \"bcd\"]) == \"abc\"\nassert second_frequent([\"cdma\", \"gsm\", \"hspa\", \"gsm\", \"cdma\", \"cdma\"]) == \"gsm\"",
    "test_cases": [
      "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'",
      "assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'",
      "assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'"
    ]
  },
  {
    "mbpp_id": 830,
    "problem_statement": "Write a function to round up a number to specific digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def round_up(num, ndigits):\n    factor = 10 ** ndigits\n    return int(round(float(num) * factor)) / factor",
    "test_cases": [
      "assert round_up(123.01247,0)==124",
      "assert round_up(123.01247,1)==123.1",
      "assert round_up(123.01247,2)==123.02"
    ]
  },
  {
    "mbpp_id": 831,
    "problem_statement": "Write a python function to count equal element pairs from the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef count_Pairs(arr, n):\n    # Count occurrences of each number in the array\n    count = Counter(arr)\n    \n    # Initialize result counter\n    result = 0\n    \n    # Iterate through the unique numbers in the dictionary\n    for key in count:\n        # Calculate how many pairs can be formed with the current number as one member\n        temp_result = count[key] * (count[key] - 1) // 2\n        \n        # Add this value to the total result\n        result += temp_result\n    \n    return result\n\n# Example usage and test cases\nprint(count_Pairs([1,1,1,1],4))  # Output: 6\nprint(count_Pairs([1,5,1],3))   # Output: 1\nprint(count_Pairs([3,2,1,7,8,9],6))  # Output: 0",
    "test_cases": [
      "assert count_Pairs([1,1,1,1],4) == 6",
      "assert count_Pairs([1,5,1],3) == 1",
      "assert count_Pairs([3,2,1,7,8,9],6) == 0"
    ]
  },
  {
    "mbpp_id": 832,
    "problem_statement": "Write a function to extract the maximum numeric value from a string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef extract_max(input_string):\n    # Find all sequences of digits in the input_string\n    numbers = re.findall('\\d+', input_string)\n    # Convert found sequences to integers and find the max\n    max_number = int(max(numbers))\n    return str(max_number)\n\n# Test cases to verify the correctness of the solution\nassert extract_max('100klh564abc365bg') == '564'\nassert extract_max('hello300how546mer231') == '546'\nassert extract_max('its233beenalong343journey234') == '343'\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert extract_max('100klh564abc365bg') == 564",
      "assert extract_max('hello300how546mer231') == 546",
      "assert extract_max('its233beenalong343journey234') == 343"
    ]
  },
  {
    "mbpp_id": 833,
    "problem_statement": "Write a function to get dictionary keys as a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_key(dct):\n    return list(dct.keys())",
    "test_cases": [
      "assert get_key({1:'python',2:'java'})==[1,2]",
      "assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]",
      "assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]"
    ]
  },
  {
    "mbpp_id": 834,
    "problem_statement": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (3,) + inhomogeneous part."
    ],
    "generated_code": "import numpy as np\n\ndef generate_matrix(n):\n    \"\"\"\n    Generate an nxn matrix where each element is i^2.\n    \n    Parameters:\n        n (int): The size of the matrix\n    \n    Returns:\n        np.ndarray: An nxn matrix with elements ranging from 1^2 to n^2\n    \"\"\"\n    # Initialize an empty list to hold submatrices\n    result = []\n    \n    # Define the dimensions for the first layer\n    top_row = n // 2 + 1 if n % 2 == 1 else n // 2\n    left_col = 1\n    right_col = n - 1 if n % 2 != 0 else n - 2\n    \n    # Fill the upper part of the matrix\n    while len(result) < n:\n        current_row = [[i**2] * n for i in range(left_col, right_col + 1)]\n        result.append(current_row)\n        \n        # Move down one row and adjust the boundaries\n        top_row -= 1\n        left_col += 1\n        right_col -= 1\n    \n    return np.array(result)\n\n# Test cases\nassert np.array_equal(generate_matrix(3), [[1, 2, 3], [8, 9, 4], [7, 6, 5]])\nassert np.array_equal(generate_matrix(2), [[1, 2], [4, 3]])\nassert np.array_equal(generate_matrix(7), [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]])\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ",
      "assert generate_matrix(2)==[[1,2],[4,3]]",
      "assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"
    ]
  },
  {
    "mbpp_id": 835,
    "problem_statement": "Write a python function to find the slope of a line.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def slope(x1, y1, x2, y2):\n    \"\"\"\n    Calculate the slope of a line given two points (x1, y1) and another two points (x2, y2).\n\n    Args:\n        x1 (float): The x-coordinate of the first point.\n        y1 (float): The y-coordinate of the first point.\n        x2 (float): The x-coordinate of the second point.\n        y2 (float): The y-coordinate of the second point.\n\n    Returns:\n        float: The slope of the line passing through the given points.\n    \"\"\"\n    # Calculate the difference in coordinates\n    dx = x2 - x1\n    dy = y2 - y1\n    \n    if dx == 0:\n        return None  # Avoid division by zero error\n    \n    # Calculate the slope\n    return dy / dx",
    "test_cases": [
      "assert slope(4,2,2,5) == -1.5",
      "assert slope(2,4,4,6) == 1",
      "assert slope(1,2,4,2) == 0"
    ]
  },
  {
    "mbpp_id": 836,
    "problem_statement": "Write a function to find length of the subarray having maximum sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sub_array_sum(arr, n):\n    if not arr:\n        return 0\n    \n    max_sum = current_sum = arr[0]\n    \n    for i in range(1, n):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\n# Test cases\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)) # Expected output: 5\nprint(max_sub_array_sum([1, -2, 1, 1, -2, 1], 6)) # Expected output: 2\nprint(max_sub_array_sum([-1, -2, 3, 4, 5], 5)) # Expected output: 3",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5",
      "assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2",
      "assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3"
    ]
  },
  {
    "mbpp_id": 837,
    "problem_statement": "Write a python function to find the cube sum of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cube_Sum(n):\n    total_sum = 0\n    for i in range(1, 2*n + 1, 2):  # Loop through the first n odd natural numbers\n        total_sum += i**3\n    return total_sum",
    "test_cases": [
      "assert cube_Sum(2) == 28",
      "assert cube_Sum(3) == 153",
      "assert cube_Sum(4) == 496"
    ]
  },
  {
    "mbpp_id": 838,
    "problem_statement": "Write a python function to find minimum number swaps required to make two binary strings equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            count += 1\n    return count - 1  # Subtracting 1 because we don't consider all swaps needed to convert one string into another\n\n# Test cases\nprint(min_Swaps(\"0011\", \"1111\"))  # Expected output: 1\nprint(min_Swaps(\"00011\", \"01001\"))  # Expected output: 2\nprint(min_Swaps(\"111\", \"111\"))  # Expected output: 0",
    "test_cases": [
      "assert min_Swaps(\"0011\",\"1111\") == 1",
      "assert min_Swaps(\"00011\",\"01001\") == 2",
      "assert min_Swaps(\"111\",\"111\") == 0"
    ]
  },
  {
    "mbpp_id": 839,
    "problem_statement": "Write a function to sort the tuples alphabetically by the first item of each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuples_list):\n    # Sort the list of tuples based on the first element in each tuple\n    sorted_tuples = sorted(tuples_list)\n    return sorted_tuples\n\n# Test the function with provided data points\nprint(sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]))\nprint(sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]))\nprint(sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]))",
    "test_cases": [
      "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]",
      "assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]",
      "assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"
    ]
  },
  {
    "mbpp_id": 840,
    "problem_statement": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sqrt' is not defined",
      "Test 2: FAIL - name 'sqrt' is not defined",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Check_Solution(a,b,c):\n    # Calculate the discriminant\n    D = b**2 - 4*a*c\n    \n    if D == 0:\n        root = -b/(2*a)\n        # Check if the root is numerically equal and opposite in sign\n        if abs(root - int(root)) < 1e-9:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    elif D > 0:\n        # Calculate two real and distinct roots\n        root1 = (-b + sqrt(D))/(2*a)\n        root2 = (-b - sqrt(D))/(2*a)\n        \n        # Check if both roots are numerically equal and opposite in sign\n        if abs(root1 - int(root1)) < 1e-9 and abs(root2 - int(root2)) < 1e-9:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n    else:\n        # Complex conjugate roots case\n        return \"No\"",
    "test_cases": [
      "assert Check_Solution(2,0,-1) == \"Yes\"",
      "assert Check_Solution(1,-5,6) == \"No\"",
      "assert Check_Solution(2,0,2) == \"Yes\""
    ]
  },
  {
    "mbpp_id": 841,
    "problem_statement": "Write a function to count the number of inversions in the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_inv_count(arr, n): \n    # Initialize inversion count to zero\n    inv_count = 0\n    \n    # Iterate through all pairs of elements in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            # If current pair is in descending order and has more than one element difference,\n            # it forms an inversion.\n            if arr[i] > arr[j]:\n                inv_count += 1\n                \n    return inv_count",
    "test_cases": [
      "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5",
      "assert get_inv_count([8, 4, 2, 1], 4) == 6",
      "assert get_inv_count([3, 1, 2], 3) == 2"
    ]
  },
  {
    "mbpp_id": 842,
    "problem_statement": "Write a function to find the number which occurs for odd number of times in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - get_odd_occurence() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - get_odd_occurence() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - get_odd_occurence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef get_odd_occurence(arr: List[int]) -> int:\n    \"\"\"\n    Finds the integer that appears an odd number of times in the given list.\n    \n    Args:\n    arr (List[int]): The input list containing integers.\n    \n    Returns:\n    int: The integer that appears an odd number of times.\n    \"\"\"\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    for key, value in count.items():\n        if value % 2 != 0:\n            return key\n\n# Example check function to verify the correctness of the solution\ndef check_solution():\n    assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2]) == 5\n    assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3]) == 3\n    assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5]) == 5\n    print(\"All tests passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5",
      "assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3",
      "assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5"
    ]
  },
  {
    "mbpp_id": 843,
    "problem_statement": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'prime' is not defined. Did you mean: 'print'?"
    ],
    "generated_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    if n == 1:\n        return 1\n    uglies = [1]\n    for _ in range(1, n):\n        min_num = min([prime * ugly for ugly in uglies])\n        next_prime_ugly = [primes[i] * ugly for i, ugly in enumerate(uglifyes)]\n        uglies.append(next_prime_ugly[next_prime_ugly.index(min_num)])\n    return uglies[-1]\n\n# Example usage:\nprint(nth_super_ugly_number(12, [2, 7, 13, 19])) # Output: 32\nprint(nth_super_ugly_number(10, [2, 7, 13, 19])) # Output: 26\nprint(nth_super_ugly_number(100, [2, 7, 13, 19])) # Output: 5408",
    "test_cases": [
      "assert nth_super_ugly_number(12,[2,7,13,19])==32",
      "assert nth_super_ugly_number(10,[2,7,13,19])==26",
      "assert nth_super_ugly_number(100,[2,7,13,19])==5408"
    ]
  },
  {
    "mbpp_id": 844,
    "problem_statement": "Write a python function to find the kth element in an array containing odd elements first and then even elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Number(n, k):\n    arr = []\n    for i in range(k+1):\n        if i % 2 == 0:\n            arr.append(i)\n        else:\n            arr.append(-i)\n    return max(arr[:k])",
    "test_cases": [
      "assert get_Number(8,5) == 2",
      "assert get_Number(7,2) == 3",
      "assert get_Number(5,2) == 3"
    ]
  },
  {
    "mbpp_id": 845,
    "problem_statement": "Write a python function to count the number of digits in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def find_Digits(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    # Calculate the number of digits in the factorial\n    num_digits = int(math.log10(fact)) + 1\n    return num_digits",
    "test_cases": [
      "assert find_Digits(7) == 4",
      "assert find_Digits(5) == 3",
      "assert find_Digits(4) == 2"
    ]
  },
  {
    "mbpp_id": 846,
    "problem_statement": "Write a function to find the minimum number of platforms required for a railway/bus station.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_platform(trains_arrival, trains_departure, n):\n    # Sort the arrival and departure lists\n    arr_time = sorted(trains_arrival)\n    dep_time = sorted(trains_departure)\n\n    platform_count = 1\n    max_platforms = 1\n\n    i = 1\n    j = 0\n\n    while i < len(arr_time) and j < len(dep_time):\n        if arr_time[i] <= dep_time[j]:\n            platform_count += 1\n            i += 1\n            if platform_count > max_platforms:\n                max_platforms = platform_count\n        else:\n            platform_count -= 1\n            j += 1\n\n    return max_platforms\n\n# Test cases\nprint(find_platform([900, 940, 950, 1100, 1500, 1800], [910, 1200, 1120, 1130, 1900, 2000], 6))  # Output: 3\nprint(find_platform([100, 200, 300, 400], [700, 800, 900, 1000], 4))  # Output: 4\nprint(find_platform([5, 6, 7, 8], [4, 3, 2, 1], 4))  # Output: 1",
    "test_cases": [
      "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3",
      "assert find_platform([100,200,300,400],[700,800,900,1000],4)==4",
      "assert find_platform([5,6,7,8],[4,3,2,1],4)==1"
    ]
  },
  {
    "mbpp_id": 847,
    "problem_statement": "Write a python function to copy a list from a singleton tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lcopy(lst):\n    # Copy the list using the unpacking operator (*)\n    copied_list = [*lst]\n    return copied_list\n\n# Test cases\nassert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert lcopy([1, 2, 3]) == [1, 2, 3]",
      "assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]",
      "assert lcopy([4, 5, 6]) == [4, 5, 6]\n"
    ]
  },
  {
    "mbpp_id": 848,
    "problem_statement": "Write a function to find the area of a trapezium.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def area_trapezium(base_1, base_2, height):\n    return ((base_1 + base_2) * height) / 2",
    "test_cases": [
      "assert area_trapezium(6,9,4)==30",
      "assert area_trapezium(10,20,30)==450",
      "assert area_trapezium(15,25,35)==700"
    ]
  },
  {
    "mbpp_id": 849,
    "problem_statement": "Write a python function to find sum of all prime divisors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sum' is not defined",
      "Test 2: FAIL - name 'Sum' is not defined",
      "Test 3: FAIL - name 'Sum' is not defined"
    ],
    "generated_code": "def sum_of_prime_divisors(n):\n    total = 0\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        total += 2\n        n //= 2\n    # Check for odd factors from 3 onwards\n    factor = 3\n    max_factor = int(n**0.5) + 1\n    while factor <= max_factor:\n        if n % factor == 0:\n            total += factor\n            n //= factor\n            max_factor = int(n**0.5) + 1\n        else:\n            factor += 2\n    # If n is a prime number greater than 2\n    if n > 2:\n        total += n\n    return total",
    "test_cases": [
      "assert Sum(60) == 10",
      "assert Sum(39) == 16",
      "assert Sum(40) == 7"
    ]
  },
  {
    "mbpp_id": 850,
    "problem_statement": "Write a function to check if a triangle of positive area is possible with the given angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_triangleexists(angle1, angle2, angle3):\n    # Check if the sum of all angles in the triangle equals 180 degrees\n    return (angle1 + angle2 + angle3 == 180)\n\n# Test cases\nprint(is_triangleexists(50,60,70))  # Expected output: True\nprint(is_triangleexists(90,45,45))  # Expected output: True\nprint(is_triangleexists(150,30,70))  # Expected output: False",
    "test_cases": [
      "assert is_triangleexists(50,60,70)==True",
      "assert is_triangleexists(90,45,45)==True",
      "assert is_triangleexists(150,30,70)==False"
    ]
  },
  {
    "mbpp_id": 851,
    "problem_statement": "Write a python function to find sum of inverse of divisors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ZeroDivisionError: division by zero"
    ],
    "generated_code": "def Sum_of_Inverse_Divisors(dividend, divisor):\n    # Calculate the sum of inverses of all divisors using their absolute values\n    sum_inverse = sum(1/abs(d) for d in range(-dividend+1, dividend))\n    return sum_inverse\n\n# Test cases\nprint(Sum_of_Inverse_Divisors(6, 12))   # Expected output: 2\nprint(Sum_of_Inverse_Divisors(9, 13))   # Expected output: 1.44\nprint(Sum_of_Inverse_Divisors(1, 4))    # Expected output: 4",
    "test_cases": [
      "assert Sum_of_Inverse_Divisors(6,12) == 2",
      "assert Sum_of_Inverse_Divisors(9,13) == 1.44",
      "assert Sum_of_Inverse_Divisors(1,4) == 4"
    ]
  },
  {
    "mbpp_id": 852,
    "problem_statement": "Write a python function to remove negative numbers from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_negs(nums):\n    # Remove all negative numbers from the list\n    return [num for num in nums if num >= 0]\n\n# Test cases\nprint(remove_negs([1,-2,3,-4]))  # Output: [1, 3]\nprint(remove_negs([1,2,3,-4]))   # Output: [1, 2, 3]\nprint(remove_negs([4,5,-6,7,-8]))  # Output: [4, 5, 7]",
    "test_cases": [
      "assert remove_negs([1,-2,3,-4]) == [1,3]",
      "assert remove_negs([1,2,3,-4]) == [1,2,3]",
      "assert remove_negs([4,5,-6,7,-8]) == [4,5,7]"
    ]
  },
  {
    "mbpp_id": 853,
    "problem_statement": "Write a python function to find sum of odd factors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_of_odd_Factors(n):\n    result = 1\n    # Divide n by 2 as many times as possible \n    while n % 2 == 0:\n        n //= 2\n    \n    # Check for all odd numbers from 3 to sqrt(n)\n    for i in range(3, int(n**0.5)+1, 2):\n        count = 0\n        # Count how many factors 'i' has\n        while n % i == 0:\n            n //= i\n            count += 1\n        \n        # Add 'count+1' if 'i' is an odd factor\n        if count > 0:\n            result *= (i ** (count + 1))\n    \n    # If n becomes greater than 2 and still not divisible by 2, then n itself is odd\n    if n > 2:\n        result *= (n ** 2)\n\n    return result",
    "test_cases": [
      "assert sum_of_odd_Factors(30) == 24",
      "assert sum_of_odd_Factors(18) == 13",
      "assert sum_of_odd_Factors(2) == 1"
    ]
  },
  {
    "mbpp_id": 854,
    "problem_statement": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def raw_heap(arr):\n    # Implementing Heap Sort Algorithm for array\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        siftdown(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        siftdown(arr, i, 0)\n\n    return arr\n\n\ndef siftdown(arr, heap_size, root_index):\n    largest = root_index\n    left_child = 2 * root_index + 1\n    right_child = 2 * root_index + 2\n\n    if left_child < heap_size and arr[left_child] > arr[largest]:\n        largest = left_child\n\n    if right_child < heap_size and arr[right_child] > arr[largest]:\n        largest = right_child\n\n    if largest != root_index:\n        arr[root_index], arr[largest] = arr[largest], arr[root_index]\n        siftdown(arr, heap_size, largest)\n\n\n# Test cases\nprint(raw_heap([25, 44, 68, 21, 39, 23, 89]))\nprint(raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58]))\nprint(raw_heap([4, 5, 6, 2]))",
    "test_cases": [
      "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]",
      "assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]",
      "assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"
    ]
  },
  {
    "mbpp_id": 855,
    "problem_statement": "Write a python function to check for even parity of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Even_Parity(n):\n    # Calculate the sum of digits in n and check if it's even\n    return sum(int(digit) for digit in str(n)) % 2 == 0",
    "test_cases": [
      "assert check_Even_Parity(10) == True",
      "assert check_Even_Parity(11) == False",
      "assert check_Even_Parity(18) == True"
    ]
  },
  {
    "mbpp_id": 856,
    "problem_statement": "Write a python function to find minimum adjacent swaps required to sort binary array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\n\ndef find_Min_Swaps(arr, n):\n    # Create dictionaries for prefix sums and their counts\n    pre_sum = defaultdict(int)\n    pre_sum[0] = 1\n    prefix_count = [0]\n    \n    for i in range(n):\n        current_sum = sum(arr[:i+1])\n        if current_sum not in pre_sum:\n            pre_sum[current_sum] = 1\n        else:\n            pre_sum[current_sum] += 1\n        \n        prefix_count.append(pre_sum[current_sum] + prefix_count[-1])\n\n    min_swaps = float('inf')\n    for j in range(1, n-1):\n        min_swaps = min(min_swaps, prefix_count[j+1] - prefix_count[j-1] - 2 * max(pre_sum[j], pre_sum[n-j]))\n        \n    return min_swaps // 2\n\n# Test cases\nprint(find_Min_Swaps([1,0,1,0], 4))  # Expected output: 3\nprint(find_Min_Swaps([0,1,0], 3))    # Expected output: 1\nprint(find_Min_Swaps([0,0,1,1,0], 5)) # Expected output: 2",
    "test_cases": [
      "assert find_Min_Swaps([1,0,1,0],4) == 3",
      "assert find_Min_Swaps([0,1,0],3) == 1",
      "assert find_Min_Swaps([0,0,1,1,0],5) == 2"
    ]
  },
  {
    "mbpp_id": 857,
    "problem_statement": "Write a function to list out the list of given strings individually using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def listify_list(string_list):\n    return [list(s) for s in string_list]",
    "test_cases": [
      "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]",
      "assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]",
      "assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"
    ]
  },
  {
    "mbpp_id": 858,
    "problem_statement": "Write a function to count number of lists in a given list of lists and square the count.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_list(lst):\n    # Calculate the number of lists in the input list and return its square\n    result = len(lst) ** 2\n    return result",
    "test_cases": [
      "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25",
      "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16",
      "assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9"
    ]
  },
  {
    "mbpp_id": 859,
    "problem_statement": "Write a function to generate all sublists of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sub_lists(lst):\n    result = [[]]\n    for item in lst:\n        result.extend([sub + [item] for sub in result])\n    return result[:-1]  # Exclude the initial empty sublist\n\n# Test cases\nprint(sub_lists([10, 20, 30, 40]))  # Expected output: [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nprint(sub_lists(['X', 'Y', 'Z']))  # Expected output: [[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nprint(sub_lists([1,2,3]))  # Expected output: [[], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3]]",
    "test_cases": [
      "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
      "assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]",
      "assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"
    ]
  },
  {
    "mbpp_id": 860,
    "problem_statement": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_alphanumeric(input_string):\n    # Regular expression pattern to match if the last character(s) of the input string is/are an alphanumeric character.\n    pattern = r\"[a-zA-Z0-9]$\"\n    \n    # Search for the pattern in the input string.\n    result = re.search(pattern, input_string)\n    \n    # If found, it means the string ends with an alphanumeric character and return \"Accept\".\n    # Else, it doesn't end with an alphanumeric character and return \"Discard\".\n    if result:\n        return \"Accept\"\n    else:\n        return \"Discard\"\n\n# Test cases to verify the correctness of the function.\nprint(check_alphanumeric(\"dawood@\"))   # Expected output: Accept\nprint(check_alphanumeric(\"skdmsam326\")) # Expected output: Discard\nprint(check_alphanumeric(\"cooltricks@\"))# Expected output: Discard",
    "test_cases": [
      "assert check_alphanumeric(\"dawood@\") == 'Discard'",
      "assert check_alphanumeric(\"skdmsam326\") == 'Accept'",
      "assert check_alphanumeric(\"cooltricks@\") == 'Discard'"
    ]
  },
  {
    "mbpp_id": 861,
    "problem_statement": "Write a function to find all anagrams of a string in a given list of strings using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport itertools\n\ndef anagram_lambda(strings: List[str], pattern: str) -> List[str]:\n    \"\"\"\n    Finds and returns all anagrams of the pattern within each word in the given list.\n    \n    :param strings: A list of words.\n    :param pattern: The target pattern string.\n    :return: A list containing lists of matched anagrams for each word in the input list.\n    \"\"\"\n    def is_anagram(word: str) -> bool:\n        return sorted(word) == sorted(pattern)\n        \n    return [list(filter(is_anagram, map(lambda s: ''.join(sorted(s)), words))) for words in zip(*strings)]",
    "test_cases": [
      "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']",
      "assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]",
      "assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]"
    ]
  },
  {
    "mbpp_id": 862,
    "problem_statement": "Write a function to find the occurrences of n most common words in a given text.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\nimport re\n\ndef n_common_words(text,n):\n    # Extract words from the text using regex, ignoring numbers and punctuation\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    # Count the frequency of each word\n    freqs = Counter(words)\n    # Get the top 'n' most frequent words\n    result = freqs.most_common(n)\n    return list(result)\n\n# Test cases\nprint(n_common_words(\"python is a programming language\",1)) # [('python', 1)]\nprint(n_common_words(\"python is a programming language\",1)) # [('python', 1)]\nprint(n_common_words(\"python is a programming language\",5)) # [('python', 1), ('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
    "test_cases": [
      "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
      "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
      "assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"
    ]
  },
  {
    "mbpp_id": 863,
    "problem_statement": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_longest_conseq_subseq(arr, n):\n    # Initialize an array to keep track of visited numbers and their lengths\n    visited = [False] * 10000\n    maxLength = 0\n    \n    for i in range(n):\n        if not visited[arr[i]]:\n            currentLength = 1\n            while arr[i] + 1 < len(visited) and not visited[arr[i]+1]:\n                visited[arr[i]] = True\n                currentLength += 1\n                arr[i] += 1\n            \n            maxLength = max(maxLength, currentLength)\n    \n    return maxLength",
    "test_cases": [
      "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3",
      "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4",
      "assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"
    ]
  },
  {
    "mbpp_id": 864,
    "problem_statement": "Write a function to find palindromes in a given list of strings using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "palindrome_lambda = lambda s: [x for x in s if x == x[::-1]]",
    "test_cases": [
      "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']",
      "assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']",
      "assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']"
    ]
  },
  {
    "mbpp_id": 865,
    "problem_statement": "Write a function to print n-times a list using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ntimes_list(lst, n):\n    return list(map(lambda x: lst * n, range(1, len(lst) + 1)))",
    "test_cases": [
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]",
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]",
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"
    ]
  },
  {
    "mbpp_id": 866,
    "problem_statement": "Write a function to check whether the given month name contains 31 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_monthnumb(month_name):\n    months_with_31_days = [\"April\", \"June\", \"September\", \"November\"]\n    return month_name in months_with_31_days",
    "test_cases": [
      "assert check_monthnumb(\"February\")==False",
      "assert check_monthnumb(\"January\")==True",
      "assert check_monthnumb(\"March\")==True"
    ]
  },
  {
    "mbpp_id": 867,
    "problem_statement": "Write a python function to add a minimum number such that the sum of array becomes even.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_Num(arr, n):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 != 0:\n            count += 1\n    if count >= n//2 + 1:\n        return (n - (count - (n // 2)))\n    else:\n        return 0",
    "test_cases": [
      "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1",
      "assert min_Num([1,2,3,4,5,6,7,8],8) == 2",
      "assert min_Num([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 868,
    "problem_statement": "Write a python function to find the length of the last word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def length_Of_Last_Word(s):\n    # Splitting the string into words and getting the last word\n    last_word = s.split()[-1]\n    # Returning the length of the last word\n    return len(last_word)\n\n# Test cases\nprint(length_Of_Last_Word(\"python language\"))  # Expected output: 8\nprint(length_Of_Last_Word(\"PHP\"))               # Expected output: 3\nprint(length_Of_Last_Word(\"\"))                 # Expected output: 0",
    "test_cases": [
      "assert length_Of_Last_Word(\"python language\") == 8",
      "assert length_Of_Last_Word(\"PHP\") == 3",
      "assert length_Of_Last_Word(\"\") == 0"
    ]
  },
  {
    "mbpp_id": 869,
    "problem_statement": "Write a function to remove sublists from a given list of lists, which are outside a given range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_list_range(lst, start, end):\n    # Filter out sublists that fall outside the specified range\n    return [sublist for sublist in lst if all(start <= x <= end for x in sublist)]",
    "test_cases": [
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]",
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]",
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"
    ]
  },
  {
    "mbpp_id": 870,
    "problem_statement": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_positivenum(numbers):\n    return sum(filter(lambda x: x > 0, numbers))",
    "test_cases": [
      "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48",
      "assert sum_positivenum([10,15,-14,13,-18,12,-20])==50",
      "assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522"
    ]
  },
  {
    "mbpp_id": 871,
    "problem_statement": "Write a python function to check whether the given strings are rotations of each other or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def are_Rotations(s1, s2):\n    # Concatenate string s1 with itself\n    doubled_s1 = s1 + s1\n    \n    # Check if s2 is a substring of the doubled_s1\n    return s2 in doubled_s1",
    "test_cases": [
      "assert are_Rotations(\"abc\",\"cba\") == False",
      "assert are_Rotations(\"abcd\",\"cdba\") == False",
      "assert are_Rotations(\"abacd\",\"cdaba\") == True"
    ]
  },
  {
    "mbpp_id": 872,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def check_subset(main_list, sub_list):\n    def deep_check(sub, main):\n        for item in sub:\n            found = False\n            for element in main:\n                if isinstance(element, list) and all(deep_check(item, y) for y in element):\n                    found = True\n                    break\n            if not found:\n                return False\n        return True\n    \n    return deep_check(sub_list, main_list)\n\n# Test cases\nprint(check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]], [[1, 3], [13, 15, 17]])) # Expected output: True\nprint(check_subset([[1, 2], [2, 3], [3, 4], [5, 6]], [[3, 4], [5, 6]])) # Expected output: True\nprint(check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]], [[[3, 4], [5, 6]]])) # Expected output: False",
    "test_cases": [
      "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True",
      "assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True",
      "assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False"
    ]
  },
  {
    "mbpp_id": 873,
    "problem_statement": "Write a function to solve the fibonacci sequence using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def fibonacci(n):\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# Test cases\nprint(fibonacci(7)) # Expected output: 13\nprint(fibonacci(8)) # Expected output: 21\nprint(fibonacci(9)) # Expected output: 34",
    "test_cases": [
      "assert fibonacci(7) == 13",
      "assert fibonacci(8) == 21",
      "assert fibonacci(9) == 34"
    ]
  },
  {
    "mbpp_id": 874,
    "problem_statement": "Write a python function to check if the string is a concatenation of another string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Concat(s1, s2):\n    # Concatenate s2 with itself n times where n = len(s1)\n    concatenated_str = s2 * (len(s1) // len(s2)) + s2[:len(s1) % len(s2)]\n    \n    # Check if s1 is equal to the concatenated string\n    return s1 == concatenated_str\n\n# Test cases\nprint(check_Concat(\"abcabcabc\", \"abc\"))  # Expected output: True\nprint(check_Concat(\"abcab\", \"abc\"))      # Expected output: False\nprint(check_Concat(\"aba\", \"ab\"))         # Expected output: False",
    "test_cases": [
      "assert check_Concat(\"abcabcabc\",\"abc\") == True",
      "assert check_Concat(\"abcab\",\"abc\") == False",
      "assert check_Concat(\"aba\",\"ab\") == False"
    ]
  },
  {
    "mbpp_id": 875,
    "problem_statement": "Write a function to find the minimum difference in the tuple pairs of given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def min_difference(tuples_list):\n    # Sort each tuple pair and calculate the absolute difference between them\n    sorted_pairs = [(sorted(pair[0]), sorted(pair[1])) for pair in tuples_list]\n    differences = [abs(a - b) for _, (_, a, b) in sorted_pairs for a, b in zip(range(len(_)), range(1, len(_)))]\n    \n    # Return the smallest difference found\n    return min(differences)\n\n# Test cases\nassert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
    "test_cases": [
      "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1",
      "assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2",
      "assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6"
    ]
  },
  {
    "mbpp_id": 876,
    "problem_statement": "Write a python function to find lcm of two positive integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'lcm' is not defined",
      "Test 2: FAIL - name 'lcm' is not defined",
      "Test 3: FAIL - name 'lcm' is not defined"
    ],
    "generated_code": "def calculate_lcm(x, y):\n    from math import gcd\n    # Calculate least common multiple using gcd\n    return x * y // gcd(x, y)\n\n# Test cases\nprint(calculate_lcm(4, 6))   # Expected output: 12\nprint(calculate_lcm(15, 17)) # Expected output: 255\nprint(calculate_lcm(2, 6))   # Expected output: 6",
    "test_cases": [
      "assert lcm(4,6) == 12",
      "assert lcm(15,17) == 255",
      "assert lcm(2,6) == 6"
    ]
  },
  {
    "mbpp_id": 877,
    "problem_statement": "Write a python function to sort the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_String(input_str):\n    # Sort the characters of the input string in ascending order\n    sorted_string = ''.join(sorted(input_str))\n    return sorted_string",
    "test_cases": [
      "assert sort_String(\"cba\") == \"abc\"",
      "assert sort_String(\"data\") == \"aadt\"",
      "assert sort_String(\"zxy\") == \"xyz\""
    ]
  },
  {
    "mbpp_id": 878,
    "problem_statement": "Write a function to check if the given tuple contains only k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_tuples(tup1, tup2):\n    # Check if both tuples have the same length\n    if len(tup1) != len(tup2):\n        return False\n    \n    # Convert both tuples into sets and compare their lengths\n    return set(tup1) == set(tup2)",
    "test_cases": [
      "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True",
      "assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True",
      "assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False"
    ]
  },
  {
    "mbpp_id": 879,
    "problem_statement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 3 failed"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define the regex pattern to match 'a' followed by anything and then 'b'\n    pattern = r\"^(?=.*a.*b)$\"\n    \n    # Use re.search() to find if there is at least one match of the pattern in the text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the solution\nassert text_match(\"aabbbbd\") == 'Not matched!', \"Test case 1 failed\"\nassert text_match(\"aabAbbbc\") == 'Not matched!', \"Test case 2 failed\"\nassert text_match(\"accddbbjjjb\") == 'Found a match!', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert text_match(\"aabbbbd\") == 'Not matched!'",
      "assert text_match(\"aabAbbbc\") == 'Not matched!'",
      "assert text_match(\"accddbbjjjb\") == 'Found a match!'"
    ]
  },
  {
    "mbpp_id": 880,
    "problem_statement": "Write a python function to find number of solutions in quadratic equation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "def check_solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return str(discriminant // 4)\n\nprint(check_solution(2, 5, 2))  # Output: \"2 solutions\"\nprint(check_solution(1, 1, 1))   # Output: \"No solutions\"\nprint(check_solution(1, 2, 1))   # Output: \"1 solution\"",
    "test_cases": [
      "assert Check_Solution(2,5,2) == \"2 solutions\"",
      "assert Check_Solution(1,1,1) == \"No solutions\"",
      "assert Check_Solution(1,2,1) == \"1 solution\""
    ]
  },
  {
    "mbpp_id": 881,
    "problem_statement": "Write a function to find the sum of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_even_odd(nums):\n    return sum(x for x in nums if x % 2 == 0) + sum(y for y in nums if y % 2 != 0)",
    "test_cases": [
      "assert sum_even_odd([1,3,5,7,4,1,6,8])==5",
      "assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3",
      "assert sum_even_odd([1,5,7,9,10])==11"
    ]
  },
  {
    "mbpp_id": 882,
    "problem_statement": "Write a function to caluclate perimeter of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_perimeter(base, height):\n    return 2 * base * height",
    "test_cases": [
      "assert parallelogram_perimeter(10,20)==400",
      "assert parallelogram_perimeter(15,20)==600",
      "assert parallelogram_perimeter(8,9)==144"
    ]
  },
  {
    "mbpp_id": 883,
    "problem_statement": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def div_of_nums(nums, m, n):\n    return list(filter(lambda x: x % m == 0 and x % n == 0, nums))",
    "test_cases": [
      "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]",
      "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]",
      "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]"
    ]
  },
  {
    "mbpp_id": 884,
    "problem_statement": "Write a python function to check whether all the bits are within a given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(num, start_bit, end_bit):\n    # Calculate the mask for the given range of bits\n    mask = (1 << end_bit) - 1 | ((1 << start_bit) - 1 & ~(1 << end_bit))\n    # Apply the mask to num and check if it's equal to zero\n    return num & mask == 0",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True ",
      "assert all_Bits_Set_In_The_Given_Range(5,2,4) == False",
      "assert all_Bits_Set_In_The_Given_Range(22,2,3) == True "
    ]
  },
  {
    "mbpp_id": 885,
    "problem_statement": "Write a python function to check whether the two given strings are isomorphic to each other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Isomorphic' is not defined",
      "Test 2: FAIL - name 'is_Isomorphic' is not defined",
      "Test 3: FAIL - name 'is_Isomorphic' is not defined"
    ],
    "generated_code": "def is_isomorphic(s, t):\n    if len(s) != len(t): \n        return False\n    \n    mapping_s_to_t = {}\n    mapping_t_to_s = {}\n    \n    for char_s, char_t in zip(s, t):\n        if (char_s in mapping_s_to_t and mapping_s_to_t[char_s] != char_t) or \\\n           (char_t in mapping_t_to_s and mapping_t_to_s[char_t] != char_s):\n            return False\n        mapping_s_to_t[char_s] = char_t\n        mapping_t_to_s[char_t] = char_s\n    \n    return True\n\n# Test cases\nprint(is_isomorphic(\"paper\", \"title\"))  # Expected output: True\nprint(is_isomorphic(\"ab\", \"ba\"))       # Expected output: True\nprint(is_isomorphic(\"ab\", \"aa\"))       # Expected output: False",
    "test_cases": [
      "assert is_Isomorphic(\"paper\",\"title\") == True",
      "assert is_Isomorphic(\"ab\",\"ba\") == True",
      "assert is_Isomorphic(\"ab\",\"aa\") == False"
    ]
  },
  {
    "mbpp_id": 886,
    "problem_statement": "Write a function to add all the numbers in a list and divide it with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_num(numbers):\n    total = sum(numbers)\n    return total / len(numbers)\n\n# Test cases\nprint(sum_num((8, 2, 3, 0, 7))) # Expected output: 4.0\nprint(sum_num((-10,-20,-30)))   # Expected output: -20.0\nprint(sum_num((19,15,18)))      # Expected output: 17.333333333333332",
    "test_cases": [
      "assert sum_num((8, 2, 3, 0, 7))==4.0",
      "assert sum_num((-10,-20,-30))==-20.0",
      "assert sum_num((19,15,18))==17.333333333333332"
    ]
  },
  {
    "mbpp_id": 887,
    "problem_statement": "Write a python function to check whether the given number is odd or not using bitwise operator.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_odd(number):\n    \"\"\"\n    Check if the given number is odd using bitwise operation.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is odd, otherwise False.\n    \"\"\"\n    return (number & 1) == 1",
    "test_cases": [
      "assert is_odd(5) == True",
      "assert is_odd(6) == False",
      "assert is_odd(7) == True"
    ]
  },
  {
    "mbpp_id": 888,
    "problem_statement": "Write a function to substract the elements of the given nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tuple(a - b for a, b in zip(tup1[i], tup2[i])))\n    return tuple(result)",
    "test_cases": [
      "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))",
      "assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))",
      "assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))"
    ]
  },
  {
    "mbpp_id": 889,
    "problem_statement": "Write a function to reverse each list in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_list_lists(lst_of_lsts):\n    return [[x for x in reversed(l)] for l in lst_of_lsts]",
    "test_cases": [
      "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]",
      "assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]",
      "assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]"
    ]
  },
  {
    "mbpp_id": 890,
    "problem_statement": "Write a python function to find the index of an extra element present in one sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def find_Extra(arr1, arr2, n): \n    # Initialize start and end pointers\n    i = 0\n    j = n - 1\n    \n    # Traverse both arrays from left to right\n    while(i <= j): \n        mid = (i + j) // 2\n        \n        # If elements at middle positions of two arrays are equal,\n        # check for the next pair\n        if arr1[mid] == arr2[mid]: \n            if mid > 0 and mid < len(arr1)-1:\n                if arr1[mid-1] == arr2[mid+1]:\n                    return mid\n            else:\n                return mid\n                \n        elif arr1[mid] > arr2[mid]: \n            j = mid - 1\n            \n        else: \n            i = mid + 1\n      \n    return -1",
    "test_cases": [
      "assert find_Extra([1,2,3,4],[1,2,3],3) == 3",
      "assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4",
      "assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5"
    ]
  },
  {
    "mbpp_id": 891,
    "problem_statement": "Write a python function to check whether the given two numbers have same number of digits or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def same_Length(x, y):\n    \"\"\"\n    Check if the two input integers x and y have the same number of digits.\n    \n    Parameters:\n    - x: An integer representing the first number.\n    - y: An integer representing the second number.\n    \n    Returns:\n    A boolean value indicating whether both x and y have the same number of digits.\n    \"\"\"\n    # Convert integers to strings to compare their lengths directly\n    str_x = str(x)\n    str_y = str(y)\n\n    # Compare the length of string representations\n    return len(str_x) == len(str_y)",
    "test_cases": [
      "assert same_Length(12,1) == False",
      "assert same_Length(2,2) == True",
      "assert same_Length(10,20) == True"
    ]
  },
  {
    "mbpp_id": 892,
    "problem_statement": "Write a function to remove multiple spaces in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_spaces(input_string):\n    # Split the input string into words using regex for multiple spaces\n    return ''.join(input_string.split())\n\n# Test cases\nprint(remove_spaces('python  program'))  # Expected output: 'python program'\nprint(remove_spaces('python   programming    language'))  # Expected output: 'python programming language'\nprint(remove_spaces('python                     program'))  # Expected output: 'python program'",
    "test_cases": [
      "assert remove_spaces('python  program')==('python program')",
      "assert remove_spaces('python   programming    language')==('python programming language')",
      "assert remove_spaces('python                     program')==('python program')"
    ]
  },
  {
    "mbpp_id": 893,
    "problem_statement": "Write a python function to get the last element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    # Use list comprehension with zip and reversed to reverse iterate over sublists and extract elements\n    return [sublist[-1] for sublist in lst[::-1]]",
    "test_cases": [
      "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]",
      "assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']",
      "assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]"
    ]
  },
  {
    "mbpp_id": 894,
    "problem_statement": "Write a function to convert the given string of float type into tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def float_to_tuple(s):\n    # Splitting the string by comma and converting each element to float\n    result = tuple(map(float, s.split(', ')))\n    return result",
    "test_cases": [
      "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)",
      "assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)",
      "assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)"
    ]
  },
  {
    "mbpp_id": 895,
    "problem_statement": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_subseq(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    include = 0\n    exclude = 0\n    \n    for i in range(len(arr)):\n        # Calculate new values\n        new_exclude = max(include, exclude)\n        \n        include = exclude + arr[i]\n        exclude = new_exclude\n        \n    return max(include, exclude)\n\n# Test Cases\nprint(max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]))  # Expected output: 26\nprint(max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]))  # Expected output: 28\nprint(max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]))  # Expected output: 44",
    "test_cases": [
      "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26",
      "assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28",
      "assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44"
    ]
  },
  {
    "mbpp_id": 896,
    "problem_statement": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_list_last(tuples):\n    # Sort the list based on the second element of each tuple (last element)\n    return sorted(tuples, key=lambda x: x[1])\n\n# Example usage and test cases\nprint(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))  \nprint(sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)]))\nprint(sort_list_last([(20,50), (10,20), (40,40)]))",
    "test_cases": [
      "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ",
      "assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] ",
      "assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] "
    ]
  },
  {
    "mbpp_id": 897,
    "problem_statement": "Write a python function to check whether the word is present in a given sentence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'is_Word_Present' is not defined",
      "Test 2: FAIL - name 'is_Word_Present' is not defined",
      "Test 3: FAIL - name 'is_Word_Present' is not defined"
    ],
    "generated_code": "def is_word_present(sentence, word):\n    # Splitting the sentence into words and checking if the word is in the list of words\n    return word in sentence.split()\n\n# Test cases\nprint(is_word_present(\"machine learning\", \"machine\"))  # Expected output: True\nprint(is_word_present(\"easy\", \"fun\"))  # Expected output: False\nprint(is_word_present(\"python language\", \"code\"))  # Expected output: False",
    "test_cases": [
      "assert is_Word_Present(\"machine learning\",\"machine\") == True",
      "assert is_Word_Present(\"easy\",\"fun\") == False",
      "assert is_Word_Present(\"python language\",\"code\") == False"
    ]
  },
  {
    "mbpp_id": 898,
    "problem_statement": "Write a function to extract specified number of elements from a given list, which follow each other continuously.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_elements(nums, k):\n    return nums[:k]\n\n# Test Cases\nprint(extract_elements([1, 1, 3, 4, 4, 5, 6, 7], 2)) # Output should be [1, 4]\nprint(extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4)) # Output should be [4]\nprint(extract_elements([0,0,0,0,0], 5)) # Output should be [0]",
    "test_cases": [
      "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]",
      "assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]",
      "assert extract_elements([0,0,0,0,0],5)==[0]"
    ]
  },
  {
    "mbpp_id": 899,
    "problem_statement": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def check(nums, n):\n    left = right = 0\n    for i in range(n-1):\n        if nums[left] > nums[right]:\n            if nums[left+1] < nums[i]: \n                return False\n            elif nums[right+1] < nums[i]: \n                return False\n            left += 1\n        else:\n            left += 1\n        if nums[left] > nums[right]:\n            if nums[right+1] < nums[i]: \n                return False\n            elif nums[left+1] < nums[i]: \n                return False\n            right += 1\n        else:\n            right += 1\n    return True\n\n# Test cases\nprint(check([3,2,1,2,3,4], 6))  # Expected output: True\nprint(check([2,1,4,5,1], 5))   # Expected output: True\nprint(check([1,2,2,1,2,3], 6)) # Expected output: True",
    "test_cases": [
      "assert check([3,2,1,2,3,4],6) == True",
      "assert check([2,1,4,5,1],5) == True",
      "assert check([1,2,2,1,2,3],6) == True"
    ]
  },
  {
    "mbpp_id": 900,
    "problem_statement": "Write a function where a string will start with a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def match_num(test_string):\n    # Check if the first two characters of the test string form a valid number\n    return test_string[:2].isdigit()",
    "test_cases": [
      "assert match_num('5-2345861')==True",
      "assert match_num('6-2345861')==False",
      "assert match_num('78910')==False"
    ]
  },
  {
    "mbpp_id": 901,
    "problem_statement": "Write a function to find the smallest multiple of the first n numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_multiple(n):\n    return int(''.join(str(i) for i in range(1, n+1)))",
    "test_cases": [
      "assert smallest_multiple(13)==360360",
      "assert smallest_multiple(2)==2",
      "assert smallest_multiple(1)==1"
    ]
  },
  {
    "mbpp_id": 902,
    "problem_statement": "Write a function to combine two dictionaries by adding values for common keys.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_dict(dict1, dict2):\n    result = {}\n    for key in dict1.keys() | dict2.keys():\n        if key in dict1 and key in dict2:\n            result[key] = dict1[key] + dict2[key]\n        elif key in dict1:\n            result[key] = dict1[key]\n        else:\n            result[key] = dict2[key]\n    return result",
    "test_cases": [
      "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) ",
      "assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) ",
      "assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})"
    ]
  },
  {
    "mbpp_id": 903,
    "problem_statement": "Write a python function to count the total unset bits from 1 to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Unset_Bits' is not defined",
      "Test 2: FAIL - name 'count_Unset_Bits' is not defined",
      "Test 3: FAIL - name 'count_Unset_Bits' is not defined"
    ],
    "generated_code": "def count_unset_bits(n):\n    # Initialize the result with 1 since all numbers have at least one bit set\n    result = 1\n    \n    # Increment until the number of unset bits equals n\n    while n > 0:\n        if n % 2 == 1:\n            result += 1\n        n >>= 1\n    \n    return result\n\n# Test cases\nprint(count_unset_bits(2))  # Expected output: 1\nprint(count_unset_bits(5))  # Expected output: 4\nprint(count_unset_bits(14)) # Expected output: 17",
    "test_cases": [
      "assert count_Unset_Bits(2) == 1",
      "assert count_Unset_Bits(5) == 4",
      "assert count_Unset_Bits(14) == 17"
    ]
  },
  {
    "mbpp_id": 904,
    "problem_statement": "Write a function to return true if the given number is even else return false.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_num(num):\n    return num % 2 == 0",
    "test_cases": [
      "assert even_num(13.5)==False",
      "assert even_num(0)==True",
      "assert even_num(-9)==False"
    ]
  },
  {
    "mbpp_id": 905,
    "problem_statement": "Write a python function to find the sum of squares of binomial co-efficients.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sum_of_square(n):\n    # Calculate the sum of squares of binomial coefficients for given n\n    result = 0\n    for k in range(n + 1):\n        coefficient = math.comb(n, k)\n        result += coefficient ** 2\n    return result",
    "test_cases": [
      "assert sum_of_square(4) == 70",
      "assert sum_of_square(5) == 252",
      "assert sum_of_square(2) == 6"
    ]
  },
  {
    "mbpp_id": 906,
    "problem_statement": "Write a function to extract year, month and date from a url by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef extract_date(url):\n    pattern = r'(?<=\\/news\\/)(\\d{4})-(\\d{2})-(\\d{2})(?=/)'\n    match = re.search(pattern, url)\n    if match:\n        return [match.group(1), match.group(2), match.group(3)]\n    else:\n        return []\n\n# Test cases\nprint(extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\"))\nprint(extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\"))\nprint(extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\"))",
    "test_cases": [
      "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]",
      "assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]",
      "assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]"
    ]
  },
  {
    "mbpp_id": 907,
    "problem_statement": "Write a function to print the first n lucky numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lucky_num(n):\n    result = []\n    count = 0\n    num = 1\n    while count < n:\n        if is_lucky(num):\n            result.append(num)\n            count += 1\n        num += 1\n    return result\n\ndef is_lucky(num):\n    if num % 4 != 0 and num % 6 != 0:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] ",
      "assert lucky_num(5)==[1, 3, 7, 9, 13]",
      "assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]"
    ]
  },
  {
    "mbpp_id": 908,
    "problem_statement": "Write a function to find the fixed point in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_fixed_point() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_fixed_point() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_fixed_point() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def find_fixed_point(arr):\n    for i in range(len(arr)):\n        if arr[i] == i:\n            return i\n    return -1",
    "test_cases": [
      "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3",
      "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1",
      "assert find_fixed_point([0, 2, 5, 8, 17],5) == 0"
    ]
  },
  {
    "mbpp_id": 909,
    "problem_statement": "Write a function to find the previous palindrome of a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def previous_palindrome(num):\n    \"\"\"\n    This function finds and returns the largest palindrome number smaller than the given number.\n    \"\"\"\n    num_str = str(num)\n    if len(num_str) <= 1:\n        return \"No valid palindromic predecessor for the given number.\"\n    \n    left_half = num_str[:len(num_str)//2]\n    right_half = num_str[len(num_str)//2:]\n    \n    if len(num_str)%2 == 0:\n        result = int(left_half + left_half[::-1])\n    else:\n        result = int(left_half + right_half[::-1])\n    \n    return result",
    "test_cases": [
      "assert previous_palindrome(99)==88",
      "assert previous_palindrome(1221)==1111",
      "assert previous_palindrome(120)==111"
    ]
  },
  {
    "mbpp_id": 910,
    "problem_statement": "Write a function to validate a gregorian date.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'str' object cannot be interpreted as an integer"
    ],
    "generated_code": "import datetime\n\ndef check_date(month, day, year):\n    try:\n        # Attempt to create a date object for the given month, day, and year.\n        date = datetime.date(year, month, day)\n        return True\n    except ValueError:\n        # If a ValueError is raised, it means there was an invalid date format.\n        return False\n\n# Test cases\nprint(check_date(11, 11, 2002))  # Expected output: True\nprint(check_date(13, 11, 2002))  # Expected output: False\nprint(check_date('11', '11', '2002'))  # Expected output: True",
    "test_cases": [
      "assert check_date(11,11,2002)==True",
      "assert check_date(13,11,2002)==False",
      "assert check_date('11','11','2002')==True"
    ]
  },
  {
    "mbpp_id": 911,
    "problem_statement": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef maximum_product(arr):\n    # Convert negative values to positive and find two smallest and one largest negative numbers.\n    arr = [-x for x in arr]\n    heapq.heapify(arr)\n    \n    min1 = -heapq.heappop(arr) \n    min2 = -heapq.heappop(arr) \n    max1 = -heapq.heappop(arr)\n    return max(min1 * min2 * max1, max(arr))\n\n# Example usage:\nprint(maximum_product([12, 74, 9, 50, 61, 41]))  # Expected output: 225700\nprint(maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58]))  # Expected output: 414375\nprint(maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]))  # Expected output: 2520",
    "test_cases": [
      "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700",
      "assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375",
      "assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520"
    ]
  },
  {
    "mbpp_id": 912,
    "problem_statement": "Write a function to find ln, m lobb number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef lobb_num(n, k):\n    if n == 1:\n        return k * (k - 1) // 2 + k - 1\n    \n    sum = k\n    for i in range(k-1, n-k+1):\n        sum += i + 1\n    return sum",
    "test_cases": [
      "assert int(lobb_num(5, 3)) == 35",
      "assert int(lobb_num(3, 2)) == 5",
      "assert int(lobb_num(4, 2)) == 20"
    ]
  },
  {
    "mbpp_id": 913,
    "problem_statement": "Write a function to check for a number at the end of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'abcdef'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'abcdef7'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'abc'"
    ],
    "generated_code": "def end_num(s):\n    # Remove trailing digits from the string\n    s = str(int(s))\n    \n    return int(s[-1]) != 0",
    "test_cases": [
      "assert end_num('abcdef')==False",
      "assert end_num('abcdef7')==True",
      "assert end_num('abc')==False"
    ]
  },
  {
    "mbpp_id": 914,
    "problem_statement": "Write a python function to check whether the given string is made up of two alternating characters or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Two_Alter(s):\n    \"\"\"\n    This function checks if the input string 's' is composed entirely of alternating characters.\n    An alternating character is defined as one character followed immediately by another distinct character.\n    \n    Examples:\n    >>> is_Two_Alter(\"abab\")\n    True\n    >>> is_Two_Alter(\"aaaa\")\n    False\n    >>> is_Two_Alter(\"xyz\")\n    False\n    \"\"\"\n    # Check each pair of consecutive characters in the string\n    for i in range(len(s) - 1):\n        # If they are not distinct or adjacent, return False\n        if s[i] == s[i + 1] or abs(ord(s[i]) - ord(s[i + 1])) != 1:\n            return False\n    # If all pairs satisfy the condition, return True\n    return True",
    "test_cases": [
      "assert is_Two_Alter(\"abab\") == True",
      "assert is_Two_Alter(\"aaaa\") == False",
      "assert is_Two_Alter(\"xyz\") == False"
    ]
  },
  {
    "mbpp_id": 915,
    "problem_statement": "Write a function to rearrange positive and negative numbers in a given array using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rearrange_numbs(nums):\n    # Separate positive and negative numbers into two lists using list comprehension with lambda functions.\n    pos = [num for num in nums if num > 0]\n    neg = [num for num in nums if num < 0]\n\n    # Combine the lists of positive and negative numbers back together.\n    result = pos + neg\n\n    return result",
    "test_cases": [
      "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]",
      "assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]",
      "assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"
    ]
  },
  {
    "mbpp_id": 916,
    "problem_statement": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_triplet_array(arr, target_sum, total):\n    arr.sort()\n    for i in range(len(arr)-2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return None",
    "test_cases": [
      "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)",
      "assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)",
      "assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)"
    ]
  },
  {
    "mbpp_id": 917,
    "problem_statement": "Write a function to find the sequences of one upper case letter followed by lower case letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'text_uppercase_lowercase' is not defined",
      "Test 2: FAIL - name 'text_uppercase_lowercase' is not defined",
      "Test 3: FAIL - name 'text_uppercase_lowercase' is not defined"
    ],
    "generated_code": "import re\n\ndef check_for_uppercase(text):\n    pattern = r'[A-Z][a-z]'\n    matches = re.findall(pattern, text)\n    \n    if len(matches) > 0:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(check_for_uppercase(\"AaBbGg\")) # Expected output: Found a match!\nprint(check_for_uppercase(\"aA\"))      # Expected output: Not matched!\nprint(check_for_uppercase(\"PYTHON\"))  # Expected output: Not matched!",
    "test_cases": [
      "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')",
      "assert text_uppercase_lowercase(\"aA\")==('Not matched!')",
      "assert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 918,
    "problem_statement": "Write a function to count coin change.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def coin_change(coins, amount, count=0):\n    if amount == 0:\n        return count\n    if amount < 0 or coins[-1] > amount:\n        return 0\n    else:\n        return coin_change(coins[:-1], amount, count) + coin_change(coins, amount - coins[-1])",
    "test_cases": [
      "assert coin_change([1, 2, 3],3,4)==4",
      "assert coin_change([4,5,6,7,8,9],6,9)==2",
      "assert coin_change([4,5,6,7,8,9],6,4)==1"
    ]
  },
  {
    "mbpp_id": 919,
    "problem_statement": "Write a python function to multiply all items in the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_list(numbers):\n    result = 1\n    for number in numbers:\n        result *= number\n    return result",
    "test_cases": [
      "assert multiply_list([1,-2,3]) == -6",
      "assert multiply_list([1,2,3,4]) == 24",
      "assert multiply_list([3,1,2,3]) == 18"
    ]
  },
  {
    "mbpp_id": 920,
    "problem_statement": "Write a function to remove all tuples with all none values in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_tuple(tuple_list):\n    # Filter out all tuples where every element is None\n    filtered_tuples = [t for t in tuple_list if not all(x is None for x in t)]\n    return filtered_tuples\n\n# Test cases\nprint(remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )]))  # Expected output: [(None, 2), (3, 4), (12, 3)]\nprint(remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )]))  # Expected output: [(3, 6), (17, 3), (None, 1)]\nprint(remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )]))  # Expected output: [(1, 2), (2, None), (3, None), (24, 3)]",
    "test_cases": [
      "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'",
      "assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'",
      "assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'"
    ]
  },
  {
    "mbpp_id": 921,
    "problem_statement": "Write a function to perform chunking of tuples each of size n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chunk_tuples(tup, n):\n    # Use list comprehension and slicing to split the tuple into chunks of size n\n    return [tup[i:i+n] for i in range(0, len(tup), n)]\n\n# Test cases\nprint(chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3))  # Expected output: [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nprint(chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2))   # Expected output: [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nprint(chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4))  # Expected output: [(11, 14, 16, 17), (19, 21, 22, 25)]",
    "test_cases": [
      "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]",
      "assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]",
      "assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]"
    ]
  },
  {
    "mbpp_id": 922,
    "problem_statement": "Write a function to find a pair with the highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_product(arr):\n    arr.sort()\n    return (arr[-1] * arr[-2], arr[0] * arr[1])",
    "test_cases": [
      "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)",
      "assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)",
      "assert max_product([1, 3, 5, 6, 8, 9])==(8,9)"
    ]
  },
  {
    "mbpp_id": 923,
    "problem_statement": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def super_seq(str1, str2, l, m): \n    # Creating a matrix dp[][] such that dp[i][j] contains minimum length  \n    # of common subsequence between two strings str1[0..i-1] and str2[0..j-1]. \n    # Initialize all values in the dp[][]\n    dp = [[0 for x in range(m+1)] for x in range(l+1)]\n    \n    # Following steps build dp[m + 1][n + 1] in bottom up fashion \n    for i in range(l + 1): \n        for j in range(m + 1): \n            if i == 0 or j == 0 : \n                dp[i][j] = 0\n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else: \n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) \n\n    # dp[l][m] contains length of LCS for str1[0..l-1] & str2[0..m-1] \n    # return dp[l][m]\n    return dp[l][m]\n\n# Test cases\nprint(super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7))   # Expected output: 9\nprint(super_seq(\"feek\", \"eke\", 4, 3))         # Expected output: 5\nprint(super_seq(\"PARRT\", \"RTA\", 5, 3))       # Expected output: 6",
    "test_cases": [
      "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9",
      "assert super_seq(\"feek\", \"eke\", 4, 3) == 5",
      "assert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6"
    ]
  },
  {
    "mbpp_id": 924,
    "problem_statement": "Write a function to find maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_of_two(a, b):\n    return max(a, b)",
    "test_cases": [
      "assert max_of_two(10,20)==20",
      "assert max_of_two(19,15)==19",
      "assert max_of_two(-10,-20)==-10"
    ]
  },
  {
    "mbpp_id": 925,
    "problem_statement": "Write a python function to calculate the product of all the numbers of a given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def mutiple_tuple(tup):\n    # Initialize result to 1 as multiplication starts from 1\n    result = 1\n    # Iterate through each element in the tuple\n    for num in tup:\n        # Multiply the current number with the result\n        result *= num\n    return result",
    "test_cases": [
      "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864",
      "assert mutiple_tuple((1,2,3)) == 6",
      "assert mutiple_tuple((-2,-4,-6)) == -48"
    ]
  },
  {
    "mbpp_id": 926,
    "problem_statement": "Write a function to find n-th rencontres number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rencontres_number(n, k):\n    # Implement your solution here\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n - 1\n    \n    def comb(a, b):\n        return math.comb(a, b)\n    \n    result = sum(comb(n + k - 1, i) * comb(k - 1, i) for i in range(max(0, n - k), min(k, n) + 1))\n    return result",
    "test_cases": [
      "assert rencontres_number(7, 2) == 924",
      "assert rencontres_number(3, 0) == 2",
      "assert rencontres_number(3, 1) == 3"
    ]
  },
  {
    "mbpp_id": 927,
    "problem_statement": "Write a function to calculate the height of the given binary tree.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "def max_height(node):\n    if node is None:\n        return -1\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        return max(left_height, right_height) + 1",
    "test_cases": [
      "assert (max_height(root)) == 3",
      "assert (max_height(root1)) == 5 ",
      "assert (max_height(root2)) == 4"
    ]
  },
  {
    "mbpp_id": 928,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from datetime import datetime\n\ndef change_date_format(date_string):\n    # Convert the string to a datetime object and then extract the year, month, day components in reverse order.\n    # Finally, join them with hyphens in the correct order.\n    return '-'.join([date_string[:4], date_string[5:7], date_string[8:]]) if len(date_string) == 10 else 'Invalid date'\n\n# Test cases\nprint(change_date_format('2026-01-02'))  # Expected output: '02-01-2026'\nprint(change_date_format('2021-01-04'))  # Expected output: '04-01-2021'\nprint(change_date_format('2030-06-06'))  # Expected output: '06-06-2030'",
    "test_cases": [
      "assert change_date_format('2026-01-02')=='02-01-2026'",
      "assert change_date_format('2021-01-04')=='04-01-2021'",
      "assert change_date_format('2030-06-06')=='06-06-2030'"
    ]
  },
  {
    "mbpp_id": 929,
    "problem_statement": "Write a function to count repeated items of a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_tuplex(tup, item):\n    return tup.count(item)",
    "test_cases": [
      "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3",
      "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2",
      "assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4"
    ]
  },
  {
    "mbpp_id": 930,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or more b's by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define the regex pattern to find a character 'a' followed by zero or more characters 'b'\n    pattern = r'a(.*?b)*'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the solution\nprint(text_match(\"msb\"))   # Expected output: Not matched!\nprint(text_match(\"a0c\"))   # Expected output: Found a match!\nprint(text_match(\"abbc\"))  # Expected output: Found a match!",
    "test_cases": [
      "assert text_match(\"msb\") == 'Not matched!'",
      "assert text_match(\"a0c\") == 'Found a match!'",
      "assert text_match(\"abbc\") == 'Found a match!'"
    ]
  },
  {
    "mbpp_id": 931,
    "problem_statement": "Write a function to calculate the sum of series 1³+2³+3³+….+n³.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total\n\n# Test cases\nprint(sum_series(7)) # Expected output: 784\nprint(sum_series(5)) # Expected output: 225\nprint(sum_series(15)) # Expected output: 14400",
    "test_cases": [
      "assert sum_series(7)==784",
      "assert sum_series(5)==225",
      "assert sum_series(15)==14400"
    ]
  },
  {
    "mbpp_id": 932,
    "problem_statement": "Write a function to remove duplicate words from a given list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_duplic_list(lst):\n    return list(set(lst))",
    "test_cases": [
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']",
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']",
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']"
    ]
  },
  {
    "mbpp_id": 933,
    "problem_statement": "Write a function to convert camel case string to snake case string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef camel_to_snake(camel_str):\n    # Use regular expression to insert underscore before each uppercase letter and make it lowercase.\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', camel_str).lower()\n\n# Example usage:\nprint(camel_to_snake('GoogleAssistant'))  # Output: google_assistant\nprint(camel_to_snake('ChromeCast'))      # Output: chrome_cast\nprint(camel_to_snake('QuadCore'))        # Output: quad_core",
    "test_cases": [
      "assert camel_to_snake('GoogleAssistant') == 'google_assistant'",
      "assert camel_to_snake('ChromeCast') == 'chrome_cast'",
      "assert camel_to_snake('QuadCore') == 'quad_core'"
    ]
  },
  {
    "mbpp_id": 934,
    "problem_statement": "Write a function to find the nth delannoy number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - local variable 'result' referenced before assignment",
      "Test 2: FAIL - local variable 'result' referenced before assignment",
      "Test 3: FAIL - local variable 'result' referenced before assignment"
    ],
    "generated_code": "def dealnnoy_num(n, k):\n    \"\"\"\n    Calculate the nth Delannoy number given n and k.\n    \n    Args:\n    n (int): The order of the Delannoy number.\n    k (int): A dimension used in the calculation.\n    \n    Returns:\n    int: The nth Delannoy number.\n    \"\"\"\n    if k == 0:\n        result = 1\n    else:\n        for i in range(1, k + 1):\n            result += ((k - 1) * (i - 1)) ** n\n    return result",
    "test_cases": [
      "assert dealnnoy_num(3, 4) == 129",
      "assert dealnnoy_num(3, 3) == 63",
      "assert dealnnoy_num(4, 5) == 681"
    ]
  },
  {
    "mbpp_id": 935,
    "problem_statement": "Write a function to calculate the sum of series 1²+2²+3²+….+n².",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def series_sum(n):\n    return int(n * (n + 1) * (2*n + 1)) / 6",
    "test_cases": [
      "assert series_sum(6)==91",
      "assert series_sum(7)==140",
      "assert series_sum(12)==650"
    ]
  },
  {
    "mbpp_id": 936,
    "problem_statement": "Write a function to re-arrange the given tuples based on the given ordered list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def re_arrange_tuples(tuples_list, order_list):\n    # Use zip and sorted functions for better performance when working with large lists.\n    result = tuple(sorted(zip(order_list, tuples_list)))\n    return result\n\n# Test cases to verify the correctness of the function\nassert re_arrange_tuples([[(4, 3), (1, 9), (2, 10), (3, 2)], [1, 4, 2, 3]], [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([[(5, 4), (2, 10), (3, 11), (4, 3)], [3, 4, 2, 3]], [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([[(6, 3), (3, 8), (5, 7), (2, 4)], [2, 5, 3, 6]], [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]",
      "assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]",
      "assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]"
    ]
  },
  {
    "mbpp_id": 937,
    "problem_statement": "Write a function to count the most common character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return max(char_count, key=char_count.get)",
    "test_cases": [
      "assert max_char(\"hello world\")==('l')",
      "assert max_char(\"hello \")==('l')",
      "assert max_char(\"python pr\")==('p')"
    ]
  },
  {
    "mbpp_id": 938,
    "problem_statement": "Write a function to find three closest elements from three sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport bisect\n\ndef find_closet(arr1: List[int], arr2: List[int], arr3: List[int], k1: int, k2: int, k3: int) -> List[int]:\n    def find_closest(target):\n        index1 = bisect.bisect_left(arr1, target - k1)\n        if index1 == len(arr1):\n            return (arr1[-1] + k1, arr1[-1] + k1)\n        elif index1 == 0:\n            return (arr1[0] - k1, arr1[0] - k1)\n        else:\n            left, right = arr1[index1 - 1] + k1, arr1[index1] - k1\n            return min((left, right), key=lambda x: abs(x - target))\n    \n    close_1, close_2, close_3 = find_closest(k1), find_closest(k2), find_closest(k3)\n    return [min(close_1, close_2)[::-1], min(close_2, close_3)[::-1], min(close_3, close_1)[::-1]]",
    "test_cases": [
      "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)",
      "assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)",
      "assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)"
    ]
  },
  {
    "mbpp_id": 939,
    "problem_statement": "Write a function to sort a list of dictionaries using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sorted_models(lst):\n    return sorted(lst, key=lambda x: x['model'])",
    "test_cases": [
      "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]",
      "assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])",
      "assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])"
    ]
  },
  {
    "mbpp_id": 940,
    "problem_statement": "Write a function to sort the given array by using heap sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def heapify(arr, n, i):\n    largest = i \n    left = 2 * i + 1     \n    right = 2 * i + 2 \n    \n    if left < n and arr[i] < arr[left]:\n        largest = left\n    \n    if right < n and arr[largest] < arr[right]:\n        largest = right\n    \n    if largest != i:\n        arr[i],arr[largest] = arr[largest],arr[i]  \n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    \n    for i in range(n//2 - 1, -1, -1): \n        heapify(arr, n, i) \n    \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap\n        heapify(arr, i, 0)\n    \n    return arr",
    "test_cases": [
      "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]",
      "assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]",
      "assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]"
    ]
  },
  {
    "mbpp_id": 941,
    "problem_statement": "Write a function to count the elements in a list until an element is a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_elim(lst):\n    counter = 0\n    for i in range(len(lst)):\n        if isinstance(lst[i], tuple):\n            return counter\n        else:\n            counter += 1\n    return counter",
    "test_cases": [
      "assert count_elim([10,20,30,(10,20),40])==3",
      "assert count_elim([10,(20,30),(10,20),40])==1",
      "assert count_elim([(10,(20,30,(10,20),40))])==0"
    ]
  },
  {
    "mbpp_id": 942,
    "problem_statement": "Write a function to check if any list element is present in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(l1, l2):\n    # Check if any element of l1 is in l2 using set intersection\n    return bool(set(l1) & set(l2))",
    "test_cases": [
      "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True",
      "assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True",
      "assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False"
    ]
  },
  {
    "mbpp_id": 943,
    "problem_statement": "Write a function to combine two given sorted lists using heapq module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from heapq import merge\n\ndef combine_lists(list1, list2):\n    return list(merge(list1, list2))",
    "test_cases": [
      "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
      "assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]",
      "assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]"
    ]
  },
  {
    "mbpp_id": 944,
    "problem_statement": "Write a function to separate and print the numbers and their position of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def num_position(s):\n    num = \"\"\n    count = 0\n    for char in s:\n        if '0' <= char <= '9':\n            num += char\n            count += 1\n        else:\n            if count > 0:\n                print(f\"{count}: {num}\")\n                num = \"\"\n                count = 0\n    if count > 0:\n        print(f\"{count}: {num}\")\n\n# Test cases\nnum_position(\"there are 70 flats in this apartment\")\nnum_position(\"every adult have 32 teeth\")\nnum_position(\"isha has 79 chocolates in her bag\")",
    "test_cases": [
      "assert num_position(\"there are 70 flats in this apartment\")==10",
      "assert num_position(\"every adult have 32 teeth\")==17",
      "assert num_position(\"isha has 79 chocolates in her bag\")==9"
    ]
  },
  {
    "mbpp_id": 945,
    "problem_statement": "Write a function to convert the given tuples into set.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_set(input_tuple):\n    \"\"\"\n    Converts a given tuple into a set.\n    \n    Parameters:\n    input_tuple (tuple): The original tuple to be converted.\n    \n    Returns:\n    set: A set containing unique elements from the input tuple.\n    \"\"\"\n    # Convert the tuple to a set and return it\n    return set(input_tuple)\n\n# Test cases to verify the correctness of the solution\nassert tuple_to_set(('x', 'y', 'z')) == {'y', 'x', 'z'}, \"Test case 1 failed\"\nassert tuple_to_set(('a', 'b', 'c')) == {'c', 'a', 'b'}, \"Test case 2 failed\"\nassert tuple_to_set(('z', 'd', 'e')) == {'d', 'e', 'z'}, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}",
      "assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}",
      "assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}"
    ]
  },
  {
    "mbpp_id": 946,
    "problem_statement": "Write a function to find the most common elements and their counts of a specified text.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\ndef most_common_elem(text,n=5):\n    # Count the frequency of each character in the string\n    char_count = Counter(text)\n    # Find the top n characters with highest frequencies\n    return char_count.most_common(n)\n\n# Test cases\nprint(most_common_elem('lkseropewdssafsdfafkpwe',3))\nprint(most_common_elem('lkseropewdssafsdfafkpwe',2))\nprint(most_common_elem('lkseropewdssafsdfafkpwe',7))",
    "test_cases": [
      "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] ",
      "assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]",
      "assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"
    ]
  },
  {
    "mbpp_id": 947,
    "problem_statement": "Write a python function to find the length of the shortest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Split each word into individual characters and calculate its length\n    lengths = [len(word) for word in words]\n    # Return the minimum length found among all words\n    return min(lengths)",
    "test_cases": [
      "assert len_log([\"win\",\"lose\",\"great\"]) == 3",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 1",
      "assert len_log([\"12\",\"12\",\"1234\"]) == 2"
    ]
  },
  {
    "mbpp_id": 948,
    "problem_statement": "Write a function to get an item of a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_item(tup, index):\n    return tup[index]",
    "test_cases": [
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')",
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')",
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')"
    ]
  },
  {
    "mbpp_id": 949,
    "problem_statement": "Write a function to sort the given tuple list basis the total digits in tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_list(lst):\n    return sorted(lst, key=lambda x: sum(int(digit) for digit in str(x[0])))\n\n# Test cases\nprint(sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)]))  # [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\nprint(sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)]))      # [(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\nprint(sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)]))          # [(1, 2), (145,), (134, 23), (34, 4, 61, 723)]",
    "test_cases": [
      "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'",
      "assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'",
      "assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'"
    ]
  },
  {
    "mbpp_id": 950,
    "problem_statement": "Write a function to display sign of the chinese zodiac for given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '' is not in list",
      "Test 2: FAIL - '' is not in list",
      "Test 3: FAIL - '' is not in list"
    ],
    "generated_code": "import datetime\n\ndef chinese_zodiac(year):\n    months = [\"Monkey\", \"Rooster\", \"Dog\", \"Pig\"]\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Find leap year\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        month_days = days_in_month.copy()\n        month_days[1] += 1\n    \n    else:\n        month_days = days_in_month\n    \n    # Determine the day in Chinese lunar calendar using zodiac algorithm\n    current_day = datetime.date(year, 1, 1)\n    for i in range(months.index(current_day.strftime(\"%Z\")) + 1):\n        current_day = current_day.replace(day=1)\n        current_day += datetime.timedelta(days=sum(month_days[:i+1]))\n    \n    return months[int((current_day - datetime.date(year, 1, 1)).days / 12)]",
    "test_cases": [
      "assert chinese_zodiac(1997)==('Ox')",
      "assert chinese_zodiac(1998)==('Tiger')",
      "assert chinese_zodiac(1994)==('Dog')"
    ]
  },
  {
    "mbpp_id": 951,
    "problem_statement": "Write a function to find the maximum of similar indices in two lists of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def max_similar_indices(list1, list2):\n    \"\"\"\n    Finds the maximum value at each index where the values from list1 and list2 match.\n    \n    :param list1: List of tuples representing the first set of data points.\n    :param list2: List of tuples representing the second set of data points.\n    :return: A new list containing the maximum values found at matching indices.\n    \"\"\"\n    # Find the length of the shortest list to avoid index out of range errors\n    min_length = min(len(list1), len(list2))\n    result = []\n\n    for i in range(min_length):\n        if list1[i] == list2[i]:\n            result.append((list1[i], list2[i]))\n\n    return result\n\n# Test cases\nassert max_similar_indices([(2, 4), (6, 7), (5, 1)], [(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)], [(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)], [(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]",
      "assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]",
      "assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]"
    ]
  },
  {
    "mbpp_id": 952,
    "problem_statement": "Write a function to compute the value of ncr mod p.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from math import comb\n\ndef nCr_mod_p(n, r, p):\n    return comb(n, r) % p\n\n# Example usage and test cases\nprint(nCr_mod_p(10, 2, 13))  # Output: 6\nprint(nCr_mod_p(11, 3, 14))  # Output: 11\nprint(nCr_mod_p(18, 14, 19))  # Output: 1",
    "test_cases": [
      "assert nCr_mod_p(10, 2, 13) == 6",
      "assert nCr_mod_p(11, 3, 14) == 11",
      "assert nCr_mod_p(18, 14, 19) == 1"
    ]
  },
  {
    "mbpp_id": 953,
    "problem_statement": "Write a python function to find the minimun number of subsets with distinct elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef subset(s, n):\n    # Create a counter object for the input set\n    s_counter = Counter(s)\n    \n    result = 0\n    current_elements = []\n    \n    # Iterate through each element in the counter\n    for num, count in sorted(s_counter.items()):\n        if len(current_elements) == n:\n            break\n        \n        # Check if adding the new element would exceed the subset size\n        while len(current_elements) > 0 and num <= sum(current_elements):\n            current_elements.pop()\n        \n        current_elements.append(num)\n        result += 1\n    \n    return result",
    "test_cases": [
      "assert subset([1, 2, 3, 4],4) == 1",
      "assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2",
      "assert subset([1, 2, 3 ],3) == 1"
    ]
  },
  {
    "mbpp_id": 954,
    "problem_statement": "Write a function that gives profit amount if the given amount has profit else return none.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def profit_amount(investment, cost_price):\n    \"\"\"\n    Calculate and return the profit amount from an investment.\n    If there is no profit possible (i.e., cost price >= investment), return None.\n    \n    :param investment: Total amount invested.\n    :param cost_price: Cost price of the asset before selling it at market value.\n    :return: Profit amount as integer or None.\n    \"\"\"\n    # Check if the profit exists and calculate if so\n    profit = max(0, investment - cost_price)\n    return profit if profit > 0 else None",
    "test_cases": [
      "assert profit_amount(1500,1200)==300",
      "assert profit_amount(100,200)==None",
      "assert profit_amount(2000,5000)==None"
    ]
  },
  {
    "mbpp_id": 955,
    "problem_statement": "Write a function to find out, if the given number is abundant.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_abundant(n):\n    # Calculate sum of proper divisors\n    total = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            total += i\n    \n    return total > n",
    "test_cases": [
      "assert is_abundant(12)==True",
      "assert is_abundant(13)==False",
      "assert is_abundant(9)==False"
    ]
  },
  {
    "mbpp_id": 956,
    "problem_statement": "Write a function to split the given string at uppercase letters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef split_list(input_string):\n    # Split the input string at uppercase letters\n    result = re.split('(?=[A-Z])', input_string)\n    return result",
    "test_cases": [
      "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']",
      "assert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']",
      "assert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']"
    ]
  },
  {
    "mbpp_id": 957,
    "problem_statement": "Write a python function to get the position of rightmost set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_First_Set_Bit_Pos(num):\n    # Initialize result with -1 as we start checking from rightmost bit.\n    res = -1\n    while num:\n        # Check if there is a set bit at current position and update the result accordingly.\n        if num & 1 == 1:\n            res += 1\n        else:\n            res += 0\n        # Shift left to check next bit in the same position.\n        num >>= 1\n    return res\n\n# Example usage\nprint(get_First_Set_Bit_Pos(12))  # Expected output: 3\nprint(get_First_Set_Bit_Pos(18))  # Expected output: 2\nprint(get_First_Set_Bit_Pos(16))  # Expected output: 5",
    "test_cases": [
      "assert get_First_Set_Bit_Pos(12) == 3",
      "assert get_First_Set_Bit_Pos(18) == 2",
      "assert get_First_Set_Bit_Pos(16) == 5"
    ]
  },
  {
    "mbpp_id": 958,
    "problem_statement": "Write a function to convert an integer into a roman numeral.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_cases": [
      "assert int_to_roman(1)==(\"I\")",
      "assert int_to_roman(50)==(\"L\")",
      "assert int_to_roman(4)==(\"IV\")"
    ]
  },
  {
    "mbpp_id": 959,
    "problem_statement": "Write a python function to find the average of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Average' is not defined",
      "Test 2: FAIL - name 'Average' is not defined",
      "Test 3: FAIL - name 'Average' is not defined"
    ],
    "generated_code": "def average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    return total / count if count > 0 else 0\n\n# Test Cases\nprint(average([15, 9, 55, 41, 35, 20, 62, 49])) # Should return 35.75\nprint(average([4, 5, 1, 2, 9, 7, 10, 8])) # Should return 5.75\nprint(average([1,2,3])) # Should return 2",
    "test_cases": [
      "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75",
      "assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75",
      "assert Average([1,2,3]) == 2"
    ]
  },
  {
    "mbpp_id": 960,
    "problem_statement": "Write a function to solve tiling problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def get_noOfways(n):\n    \"\"\"\n    Solves the tiling problem where we have a board of size n x m and we need to find the number of ways to tile it with tiles of size 1x2.\n    \n    :param n: Size of one dimension of the board.\n    :return: The number of ways to tile the board.\n    \"\"\"\n    # Initialize an array to store the results for subproblems\n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2] = 1, 1, 2\n    \n    # Fill the dp array using the recurrence relation\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        \n    return dp[n]\n\n# Test cases\nassert get_noOfways(4) == 3, \"Test case 1 failed\"\nassert get_noOfways(3) == 2, \"Test case 2 failed\"\nassert get_noOfways(5) == 5, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert get_noOfways(4)==3",
      "assert get_noOfways(3)==2",
      "assert get_noOfways(5)==5"
    ]
  },
  {
    "mbpp_id": 961,
    "problem_statement": "Write a function to convert a roman numeral to an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def roman_to_int(s):\n    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    \n    for char in s:\n        value = roman_values[char]\n        if value > prev_value:\n            total += value - 2 * prev_value\n        else:\n            total += value\n        prev_value = value\n    \n    return total",
    "test_cases": [
      "assert roman_to_int('MMMCMLXXXVI')==3986",
      "assert roman_to_int('MMMM')==4000",
      "assert roman_to_int('C')==100"
    ]
  },
  {
    "mbpp_id": 962,
    "problem_statement": "Write a python function to find the sum of all even natural numbers within the range l and r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Even(l, r):\n    # Calculate the number of even numbers in the range [l, r]\n    num_even = (r - l + 1) // 2\n    \n    # Sum all even numbers from 2 to max(l, r)\n    return num_even * ((min(l, r) % 2 == 0) * min(l, r) + max(l, r))\n\n# Test cases\nprint(sum_Even(2, 5))  # Expected output: 6\nprint(sum_Even(3, 8))  # Expected output: 18\nprint(sum_Even(4, 6))  # Expected output: 10",
    "test_cases": [
      "assert sum_Even(2,5) == 6",
      "assert sum_Even(3,8) == 18",
      "assert sum_Even(4,6) == 10"
    ]
  },
  {
    "mbpp_id": 963,
    "problem_statement": "Write a function to calculate the discriminant value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def discriminant_value(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return (\"two solutions\", d)\n    elif d == 0:\n        return (\"one solution\", d)\n    else:\n        return (\"no real solution\", d)",
    "test_cases": [
      "assert discriminant_value(4,8,2)==(\"Two solutions\",32)",
      "assert discriminant_value(5,7,9)==(\"no real solution\",-131)",
      "assert discriminant_value(0,0,9)==(\"one solution\",0)"
    ]
  },
  {
    "mbpp_id": 964,
    "problem_statement": "Write a python function to check whether the length of the word is even or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    # Return True if the length of the word is even, otherwise return False\n    return len(word) % 2 == 0",
    "test_cases": [
      "assert word_len(\"program\") == False",
      "assert word_len(\"solution\") == True",
      "assert word_len(\"data\") == True"
    ]
  },
  {
    "mbpp_id": 965,
    "problem_statement": "Write a function to convert camel case string to snake case string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def camel_to_snake(string):\n    # Split the input string into words using underscore as delimiter and then join them with underscores.\n    return '_'.join(string.split()).lower()\n\n# Test cases\nprint(camel_to_snake('PythonProgram'))  # Output: 'python_program'\nprint(camel_to_snake('pythonLanguage'))  # Output: 'python_language'\nprint(camel_to_snake('ProgrammingLanguage'))  # Output: 'programming_language'",
    "test_cases": [
      "assert camel_to_snake('PythonProgram')==('python_program')",
      "assert camel_to_snake('pythonLanguage')==('python_language')",
      "assert camel_to_snake('ProgrammingLanguage')==('programming_language')"
    ]
  },
  {
    "mbpp_id": 966,
    "problem_statement": "Write a function to remove an empty tuple from a list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lst):\n    return [item for item in lst if item]\n\n# Test cases to verify the correctness of the function\nassert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]) == [('',), ('a', 'b'), ('a', 'b', 'c'), 'd']\nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")]) == [('',), (\"python\"), (\"program\")]\nassert remove_empty([(), (), ('',), (\"java\")]) == [('',),(\"java\")]",
    "test_cases": [
      "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  ",
      "assert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  ",
      "assert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  "
    ]
  },
  {
    "mbpp_id": 967,
    "problem_statement": "Write a python function to accept the strings which contains all vowels.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    if not set(s.lower()).difference(vowels):\n        return 'accepted'\n    else:\n        return 'not accepted'\n\n# Test cases\nprint(check(\"SEEquoiaL\"))  # Expected output: 'accepted'\nprint(check('program'))   # Expected output: 'not accepted'\nprint(check('fine'))      # Expected output: 'not accepted'",
    "test_cases": [
      "assert check(\"SEEquoiaL\") == 'accepted'",
      "assert check('program') == \"not accepted\"",
      "assert check('fine') == \"not accepted\""
    ]
  },
  {
    "mbpp_id": 968,
    "problem_statement": "Write a python function to find maximum possible value for the given periodic function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def floor_Max(a, b, c):\n    # Calculate the minimum of three values and then subtract it from their sum\n    result = max(a + b + c - max(a, b, c), min(a, b, c))\n    return result",
    "test_cases": [
      "assert floor_Max(11,10,9) == 9",
      "assert floor_Max(5,7,4) == 2",
      "assert floor_Max(2,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 969,
    "problem_statement": "Write a function to join the tuples if they have similar initial elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def join_tuples(tuples_list):\n    \"\"\"\n    This function takes a list of tuples and returns a new tuple where tuples with similar \n    initial elements are concatenated.\n    \"\"\"\n    from collections import defaultdict\n    # Use defaultdict to group tuples based on their first element\n    grouped = defaultdict(list)\n    \n    for tup in tuples_list:\n        grouped[tup[0]].append(tup)\n\n    result = []\n    for key in sorted(grouped.keys()):\n        # Concatenate tuples with the same initial element into one tuple\n        result.append(tuple(key) + tuple(sorted(grouped[key])))\n    \n    return result\n\nprint(join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)]))  # Expected output: [(5, 6, 7), (6, 8, 10), (7, 13)]\nprint(join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)]))   # Expected output: [(6, 7, 8), (7, 9, 11), (8, 14)]\nprint(join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)]))  # Expected output: [(7, 8, 9), (8, 10, 12), (9, 15)]",
    "test_cases": [
      "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]",
      "assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]",
      "assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]"
    ]
  },
  {
    "mbpp_id": 970,
    "problem_statement": "Write a function to find minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_two(a, b):\n    if a <= b:\n        return a\n    else:\n        return b",
    "test_cases": [
      "assert min_of_two(10,20)==10",
      "assert min_of_two(19,15)==15",
      "assert min_of_two(-10,-20)==-20"
    ]
  },
  {
    "mbpp_id": 971,
    "problem_statement": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def maximum_segments(n, a, b, c):\n    # Calculate the sum of all three segment lengths\n    total_length = a + b + c\n    \n    # If the total length is greater than or equal to the given number 'n', return n directly\n    if total_length >= n:\n        return n\n    else:\n        # Otherwise, subtract the excess part to get the maximum possible segments\n        remaining = max(total_length - n, 0)\n        return int((remaining + a + b + c) / total_length)\n\n# Example check function with provided data points\ndef check_function():\n    assert maximum_segments(7, 5, 2, 5) == 2\n    assert maximum_segments(17, 2, 1, 3) == 17\n    assert maximum_segments(18, 16, 3, 6) == 6\n    print(\"All test cases passed.\")\n\ncheck_function()",
    "test_cases": [
      "assert maximum_segments(7, 5, 2, 5) == 2",
      "assert maximum_segments(17, 2, 1, 3) == 17",
      "assert maximum_segments(18, 16, 3, 6) == 6"
    ]
  },
  {
    "mbpp_id": 972,
    "problem_statement": "Write a function to concatenate the given two tuples to a nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def concatenate_nested(tuple1, tuple2):\n    # Concatenate both tuples and create a new nested tuple\n    return tuple([*tuple1, *tuple2])",
    "test_cases": [
      "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)",
      "assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)",
      "assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)"
    ]
  },
  {
    "mbpp_id": 973,
    "problem_statement": "Write a python function to left rotate the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def left_rotate(s, n):\n    \"\"\"\n    This function takes a string and an integer n as input.\n    It returns a new string which is the result of rotating the original string s to the left by n positions.\n    \n    :param s: The original string to be rotated.\n    :param n: Number of positions to rotate the string to the left.\n    :return: A new string after performing the rotation.\n    \"\"\"\n    # Convert the string into a list for easier manipulation\n    arr = list(s)\n    # Perform the rotation\n    arr = arr[n:] + arr[:n]\n    # Join the list back into a string and return it\n    return ''.join(arr)\n\n# Test cases\nprint(left_rotate(\"python\",2))   # Expected output: \"thonpy\"\nprint(left_rotate(\"bigdata\",3 )) # Expected output: \"databig\"\nprint(left_rotate(\"hadoop\",1))   # Expected output: \"adooph\"",
    "test_cases": [
      "assert left_rotate(\"python\",2) == \"thonpy\"   ",
      "assert left_rotate(\"bigdata\",3 ) == \"databig\" ",
      "assert left_rotate(\"hadoop\",1 ) == \"adooph\" "
    ]
  },
  {
    "mbpp_id": 974,
    "problem_statement": "Write a function to find the minimum total path sum in the given triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport heapq\n\ndef min_sum_path(triangle: List[List[int]]) -> int:\n    if not triangle or not triangle[0]:\n        return None\n    \n    # Start from the second last row and move upwards.\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(i + 1):\n            # Calculate new values based on the previous row's values.\n            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])\n    \n    # The top element now contains the result as it is the root of the final path.\n    return triangle[0][0]\n\n# Example usage:\nprint(min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]))  # Expected output: 6\nprint(min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]))  # Expected output: 10\nprint(min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]))  # Expected output: 9",
    "test_cases": [
      "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6",
      "assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 ",
      "assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def find_Min_Sum(num):\n    # Initialize min_sum with the highest possible integer value\n    min_sum = float('inf')\n    \n    # Iterate through all numbers from 1 to num-1\n    for i in range(1, num):\n        if num % i == 0:\n            # Calculate the sum of factors for the current number\n            factor_sum = sum(i)\n            # Update min_sum if the current sum is less than the previous minimum\n            min_sum = min(min_sum, factor_sum)\n    \n    return min_sum\n\n# Test cases\nprint(find_Min_Sum(12))  # Expected output: 7\nprint(find_Min_Sum(105)) # Expected output: 15\nprint(find_Min_Sum(2))   # Expected output: 2",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_freq(tup):\n    freq_dict = {}\n    for elem in tup:\n        if isinstance(elem, tuple):\n            # Recursively call the function for elements within nested tuples\n            for sub_elem in elem:\n                if sub_elem not in freq_dict:\n                    freq_dict[sub_elem] = 0\n                freq_dict[sub_elem] += 1\n        else:\n            if elem not in freq_dict:\n                freq_dict[elem] = 0\n            freq_dict[elem] += 1\n    return freq_dict",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for +=: 'int' and 'str'"
    ],
    "generated_code": "def add_str(tuple_data, str_add):\n    # Convert the tuple to a list\n    list_data = list(tuple_data)\n    # Iterate over each item in the list and append the addition of the item with the provided string\n    for i in range(len(list_data)):\n        if isinstance(list_data[i], int):  # Check if the current item is an integer\n            list_data[i] += str_add  # Add the provided string to the integer\n    return list_data\n\n# Test Cases\nprint(add_str((5, 6, 7, 4, 9), \"FDF\"))  # Expected output: [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nprint(add_str((7, 8, 9, 10), \"PF\"))     # Expected output: [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nprint(add_str((11, 14, 12, 1, 4), \"JH\")) # Expected output: [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_elements(tup):\n    # Calculate and return the sum of all elements in the tuple\n    return sum(tup)",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef modular_sum(nums: List[int], n: int, m: int) -> bool:\n    seen = set()\n    for num in nums:\n        complement = (num - m + n) % n\n        if complement in seen:\n            return True\n        seen.add(complement)\n    return False",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def radix_sort(arr):\n    import math\n    max_val = max(arr)\n    exp = 1\n    while max_val // exp > 0:\n        counting_sort_by_digit(arr, exp)\n        exp *= 10\n    return arr\n\ndef counting_sort_by_digit(arr, digit_index):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = arr[i] // digit_index\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = arr[i] // digit_index\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    for i in range(n):\n        arr[i] = output[i]\n\n# Test Cases\nprint(radix_sort([15, 79, 25, 68, 37]))  # Output: [15, 25, 37, 68, 79]\nprint(radix_sort([9, 11, 8, 7, 3, 2]))   # Output: [2, 3, 7, 8, 9, 11]\nprint(radix_sort([36, 12, 24, 26, 29]))  # Output: [12, 24, 26, 29, 36]",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(lst):\n    max_val = lst[0] if lst else None\n    for num in lst:\n        if num > max_val:\n            max_val = num\n    return max_val",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sqrt_root(number):\n    \"\"\"\n    Calculate and return the square root of a given positive integer.\n    \n    Parameters:\n        number (int): A positive integer whose square root is to be calculated.\n        \n    Returns:\n        int: The square root of the input number.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"The number must be non-negative.\")\n    else:\n        return int(math.sqrt(number))",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_tetrahedron(side_length):\n    \"\"\"\n    Calculates the volume of a regular tetrahedron given its side length.\n    \n    Parameters:\n    side_length (float): The length of each edge of the tetrahedron.\n    \n    Returns:\n    float: The volume of the tetrahedron.\n    \"\"\"\n    return (math.sqrt(2) / 12) * pow(side_length, 3)\n\n# Test cases\nprint(volume_tetrahedron(10))  # Expected output: 117.85095592153876\nprint(volume_tetrahedron(15))  # Expected output: 397.74945696893785\nprint(volume_tetrahedron(20))  # Expected output: 942.8072917673167",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_lcm(arr):\n    from math import gcd\n    lcm = arr[0]\n    for i in range(1, len(arr)):\n        lcm = (lcm * arr[i]) // gcd(lcm, arr[i])\n    return lcm",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    \"\"\"\n    This function takes three integers representing the sides of a triangle and returns True if the triangle is scalene,\n    otherwise it returns False.\n    \n    Args:\n    a (int): Length of side A\n    b (int): Length of side B\n    c (int): Length of side C\n    \n    Returns:\n    bool: True for scalene triangle, False otherwise\n    \"\"\"\n    return len({a, b, c}) == 3\n\n# Test cases\nprint(check_isosceles(6, 8, 12)) # Expected output: True\nprint(check_isosceles(6, 6, 12)) # Expected output: False\nprint(check_isosceles(6, 15, 20)) # Expected output: True",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef lbs(arr):\n    n = len(arr)\n    \n    # Initialize arrays for max lengths and previous indices of increasing sequences\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Calculate maximum length of increasing sequence ending at each index\n    max_len_inc = [0] * n\n    for i in range(n - 1, -1, -1):\n        max_len_inc[i] = 1\n        \n        # Find maximum length of increasing subsequence using DP\n        for j in range(i + 1, n):\n            if arr[j] > arr[i]:\n                max_len_inc[i] = max(max_len_inc[i], 1 + max_len_inc[j])\n        \n        # Update the result for current index\n        max_len_inc[i] += max_len_inc[i]\n    \n    # Reset variables for decreasing sequences calculation\n    inc[0] = 1\n    for i in range(1, n):\n        inc[i] = 1\n    \n    # Calculate maximum length of decreasing sequence ending at each index\n    max_len_dec = [0] * n\n    for i in range(n - 1, -1, -1):\n        max_len_dec[i] = 1\n        \n        # Find maximum length of decreasing subsequence using DP\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                max_len_dec[i] = max(max_len_dec[i], 1 + max_len_dec[j])\n        \n        # Update the result for current index\n        max_len_dec[i] += max_len_dec[i]\n    \n    # Return the difference between the last values of maximum lengths of increasing and decreasing sequences as the result\n    return max(max_len_inc[n - 1], max_len_dec[n - 1])\n\n# Test cases\nprint(lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]))  # Output: 7\nprint(lbs([1, 11, 2, 10, 4, 5, 2, 1]))  # Output: 6\nprint(lbs([80, 60, 30, 40, 20, 10]))  # Output:",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_string(s):\n    if len(s) < 8:\n        return ['String length should be atleast 8.']\n    \n    caps = sum(1 for c in s if c.isupper())\n    nums = sum(1 for c in s if c.isdigit())\n\n    if caps == 0:\n        return ['String must have 1 upper case character.']\n    elif nums == 0:\n        return ['String must have 1 number.']\n\n    return ['Valid string.'] + ['String must have {} upper case characters.'.format(caps)] + ['String must have {} numbers.'.format(nums)]",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: max_sum_increasing_subsequence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_increasing_subsequence(arr: List[int]) -> int:\n    dp = [arr[0]] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    return max(dp)\n\n# Test cases\nprint(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7))  # Output: 106\nprint(max_sum_increasing_subsequence([3, 4, 5, 10], 4))              # Output: 22\nprint(max_sum_increasing_subsequence([10, 5, 4, 3], 4))               # Output: 10",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parallel_lines(p1, p2):\n    # Calculate the cross product of the vectors formed by the points\n    cross_product = (p2[0] - p1[0]) * (p2[1] + p1[1])\n    \n    # If the cross product is zero, the lines are parallel\n    return cross_product == 0",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def capitalize_first_last_letters(s):\n    # Splitting the string into words and applying capitalize on first and last letter of each word\n    capitalized_words = [word[0].upper() + word[:-1] + word[-1].upper() if len(word) > 1 else word.upper() for word in s.split()]\n    return ''.join(capitalized_words)",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pairs_count(arr, target_sum, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length(lst):\n    return min(zip(range(1, len(lst) + 1), lst), key=lambda x: len(x[1]))[1]",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def jacobsthal_lucas(n):\n    # Initialize the first two values of the sequence\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Calculate the value of the nth Jacobsthal-Lucas number using dynamic programming approach\n    jacob_stl = [0] * (n + 1)\n    jacob_stl[0] = 2\n    jacob_stl[1] = 1\n    \n    for i in range(2, n + 1):\n        jacob_stl[i] = jacob_stl[i - 1] + 2 * jacob_stl[i - 2]\n    \n    return jacob_stl[n]\n\n# Test cases to verify the correctness of the function\nprint(jacobsthal_lucas(5))   # Expected output: 31\nprint(jacobsthal_lucas(2))   # Expected output: 5\nprint(jacobsthal_lucas(4))   # Expected output: 17",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def negative_count(arr):\n    return sum(1 for x in arr if x < 0) / len(arr)",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def min_coins(coins, amount, n):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    \n    for i in range(1, amount + 1):\n        for j in range(n):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    \n    return dp[amount] if dp[amount] != float('inf') else -1",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_permutation(str1, str2):\n    \"\"\"\n    This function checks if two input strings are permutations of each other.\n    \n    Args:\n        str1 (str): The first string to compare.\n        str2 (str): The second string to compare.\n        \n    Returns:\n        bool: True if the two strings are permutations of each other, False otherwise.\n    \"\"\"\n    # Remove spaces and convert both strings to lowercase for case-insensitive comparison\n    cleaned_str1 = ''.join(filter(str.isalnum, str1.lower()))\n    cleaned_str2 = ''.join(filter(str.isalnum, str2.lower()))\n\n    # Check if sorted characters of both strings are equal\n    return sorted(cleaned_str1) == sorted(cleaned_str2)\n\n# Test cases\nprint(check_permutation(\"abc\", \"cba\"))  # Expected output: True\nprint(check_permutation(\"test\", \"ttew\"))  # Expected output: False\nprint(check_permutation(\"xxyz\", \"yxzx\"))  # Expected output: True",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_datatype(tup, datatype):\n    filtered_tuple = [elem for elem in tup if not isinstance(elem, datatype)]\n    return filtered_tuple\n\n# Test Case 1\nprint(remove_datatype((4, 5, 4, 7.7, 1.2), int))  # Output: [7.7, 1.2]\n\n# Test Case 2\nprint(remove_datatype((7, 8, 9, \"SR\"), str))  # Output: [7, 8, 9]\n\n# Test Case 3\nprint(remove_datatype((7, 1.1, 2, 2.2), float))  # Output: [7, 2]",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def search_literal(target_string, pattern):\n    \"\"\"\n    Searches for a literal string in another string and returns its starting index and length.\n    \n    Parameters:\n    target_string (str): The string to be searched through.\n    pattern (str): The string to search for.\n    \n    Returns:\n    tuple: A tuple containing the start index of the first occurrence and the length of the found pattern.\n          If no match is found, returns (-1, -1).\n    \"\"\"\n    try:\n        # Find the position of the first character of the pattern\n        start_index = target_string.index(pattern[0])\n        \n        # Initialize variables for searching the entire pattern\n        current_index = start_index\n        matched_length = len(pattern)\n        \n        while True:\n            if current_index + matched_length > len(target_string):\n                return (-1, -1)  # Pattern does not match the end of the target string\n            \n            if target_string[current_index:current_index+matched_length] == pattern:\n                return (start_index, matched_length)\n            \n            current_index += 1\n    \n    except ValueError:\n        return (-1, -1)\n\n# Check function with provided data points\nassert search_literal('python', 'python programming language') == (0, 6), \"Test case 1 failed\"\nassert search_literal('programming', 'python programming language') == (7, 18), \"Test case 2 failed\"\nassert search_literal('language', 'python programming language') == (19, 27), \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: topbottom_surfacearea() missing 1 required positional argument: 'height'"
    ],
    "generated_code": "def topbottom_surfacearea(radius, height):\n    \"\"\"\n    Calculates and returns the surface area of a cylinder with given radius and height.\n    \n    Args:\n        radius (float): The radius of the base of the cylinder.\n        height (float): The height of the cylinder.\n        \n    Returns:\n        float: The total surface area of the cylinder rounded to 15 decimal places.\n    \"\"\"\n    # Calculating the surface area using the formula: 2πr(h + r)\n    surface_area = 2 * 3.141592653589793 * radius * (height + radius)\n    return round(surface_area, 15)\n\n# Test Cases\nassert topbottom_surfacearea(10) == 314.15000000000003\nassert topbottom_surfacearea(5) == 78.53750000000001\nassert topbottom_surfacearea(4) == 50.264",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(list1, n):\n    return [list1[i] for i in range(len(list1)) if (i+1) % n == 0]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n\n    for word in words:\n        if word in seen:\n            return word\n        else:\n            seen.add(word)\n\n    return None\n\n# Test Cases\nprint(first_repeated_word(\"ab ca bc ab\"))  # Output: \"ab\"\nprint(first_repeated_word(\"ab ca bc\"))     # Output: \"None\"\nprint(first_repeated_word(\"ab ca bc ca ab bc\"))  # Output: \"ca\"",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\n    # Convert each element in the string list into a character and then join them with no delimiter.\n    return tuple(string_list)\n\n# Test cases\nprint(string_list_to_tuple([\"python 3.0\"]))  # Expected output: ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nprint(string_list_to_tuple([\"bigdata\"]))     # Expected output: ('b', 'i', 'g', 'd', 'a', 't', 'a')\nprint(string_list_to_tuple([\"language\"]))    # Expected output: ('l', 'a', 'n', 'g', 'u', 'a', 'g', 'e')",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "def basesnum_correspondingnum(basesnum_list, numlist):\n    return list(map(lambda x, y: int(y ** x), basesnum_list, numlist))",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef find_Diff(nums: List[int], n: int) -> int:\n    # Initialize variables to store the minimum and maximum frequency\n    min_freq = float('inf')\n    max_freq = -float('inf')\n\n    # Count the frequency of each number\n    for num in nums:\n        if num < n:\n            count = nums.count(num)\n            if count > max_freq:\n                max_freq = count\n            if count < min_freq:\n                min_freq = count\n\n    # Calculate and return the difference between max frequency and min frequency\n    return max_freq - min_freq",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_abundant(number):\n    # Initialize sum of proper divisors\n    sum_of_divisors = 0\n    \n    # Iterate from 1 to sqrt(number)\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            # Add both divisors\n            sum_of_divisors += i\n            if i != number // i and i != 1:\n                sum_of_divisors += number // i\n                \n    # Check if sum of divisors is greater than the number itself\n    return sum_of_divisors > number",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef fill_spaces(input_string):\n    # Replace spaces, commas, and dots with colons using regex\n    modified_string = re.sub(r'[ ,.]+', ':', input_string)\n    return modified_string\n\n# Test cases to verify the correctness of the function\nprint(fill_spaces('Boult Curve Wireless Neckband'))  # Expected output: 'Boult:Curve:Wireless:Neckband'\nprint(fill_spaces('Stereo Sound Sweatproof'))       # Expected output: 'Stereo:Sound:Sweatproof'\nprint(fill_spaces('Probass Curve Audio'))           # Expected output: 'Probass:Curve:Audio'",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_digits(num, n):\n    \"\"\"\n    This function takes an integer 'num' and an integer 'n', adds them together,\n    then counts and returns the number of digits in their sum.\n    \n    :param num: Integer representing one of the numbers to be added.\n    :param n: Integer representing the other number to be added.\n    :return: An integer representing the number of digits in the sum of 'num' and 'n'.\n    \"\"\"\n    # Add the numbers\n    total = num + n\n    \n    # Convert the result to string and calculate length to get the number of digits\n    return len(str(total))\n\n# Test cases\nprint(count_digits(9875,10))  # Expected output: 4\nprint(count_digits(98759853034,100))  # Expected output: 11\nprint(count_digits(1234567,500))  # Expected output: 7",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def flatten_tuple(tup_list):\n    # Flatten the list of tuples into a single string with space as separator\n    flat_str = ''.join(str(item) for sublist in tup_list for item in sublist)\n    return flat_str",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_F_and_L_bits(n):\n    # Find the most significant bit position for both first and last bits\n    first_bit_position = n.bit_length() - 1\n    last_bit_position = n.bit_length() - 1\n    \n    # Toggle the bits at these positions\n    toggled_n = ((~n + 1) & (1 << first_bit_position | 1 << last_bit_position))\n    \n    return toggled_n\n\n# Test cases\nprint(toggle_F_and_L_bits(10))  # Expected output: 3\nprint(toggle_F_and_L_bits(15))  # Expected output: 6\nprint(toggle_F_and_L_bits(20))  # Expected output: 5",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_occurence_char(s, c):\n    \"\"\"\n    Find the index of the last occurrence of 'c' in the string 's'.\n    \n    Args:\n        s (str): The input string.\n        c (char): The character to search for.\n        \n    Returns:\n        int or None: The index of the last occurrence of 'c' if found; otherwise, None.\n    \"\"\"\n    try:\n        return s.rindex(c)\n    except ValueError:\n        return None",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Total_Hamming_Distance' is not defined",
      "Test 2: FAIL - name 'Total_Hamming_Distance' is not defined",
      "Test 3: FAIL - name 'Total_Hamming_Distance' is not defined"
    ],
    "generated_code": "def total_hamming_distance(n):\n    distance_sum = 0\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            distance_sum += hamming_distance(i, j)\n    return distance_sum\n\ndef hamming_distance(x, y):\n    xor_result = x ^ y\n    distance = 0\n    while xor_result:\n        distance += xor_result & 1\n        xor_result >>= 1\n    return distance",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    \n    lengths = [1] * len(sequence)\n    \n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n                \n    return max(lengths)\n\n# Example usage\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))  # Output: 5\nprint(longest_increasing_subsequence([3, 10, 2, 1, 20]))  # Output: 3\nprint(longest_increasing_subsequence([50, 3, 10, 7, 40, 80]))  # Output: 4",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    \"\"\"\n    This function calculates the sum of the fifth powers of the first n odd natural numbers.\n    \n    Parameters:\n    n (int): The number of initial odd natural numbers to consider.\n    \n    Returns:\n    int: The sum of the fifth powers of the specified numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n + 1):\n        odd_number = 2 * i - 1\n        total_sum += odd_number ** 5\n    return total_sum\n\n# Test Cases\nprint(odd_Num_Sum(1))  # Expected output: 1\nprint(odd_Num_Sum(2))  # Expected output: 244\nprint(odd_Num_Sum(3))  # Expected output: 3369",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Max(arr, start, end):\n    if start == end:\n        return arr[start]\n    \n    mid = (start + end) // 2\n    \n    # Check if mid is greater than its next element to determine the rotation point\n    if mid < end and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    elif mid > start and arr[mid - 1] > arr[mid]:\n        return arr[mid - 1]\n    else:\n        # Recur for the right half\n        return find_Max(arr, mid + 1, end)\n        \n# Test cases\nprint(find_Max([2,3,5,6,9],0,4))  # Expected output: 9\nprint(find_Max([3,4,5,2,1],0,4))  # Expected output: 5\nprint(find_Max([1,2,3],0,2))      # Expected output: 3",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_column(nested_list, index):\n    return [sublist[index] for sublist in nested_list]",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Seq_Linear' is not defined",
      "Test 2: FAIL - name 'Seq_Linear' is not defined",
      "Test 3: FAIL - name 'Seq_Linear' is not defined"
    ],
    "generated_code": "def seq_linear(sequence):\n    \"\"\"\n    Checks if the given sequence is a linear sequence.\n    \n    Parameters:\n    - sequence: List of integers\n    \n    Returns:\n    - String indicating whether it's a linear sequence or not\n    \"\"\"\n    differences = [sequence[i] - sequence[i-1] for i in range(1, len(sequence))]\n    unique_differences = set(differences)\n    return \"Linear Sequence\" if len(unique_differences) == 1 else \"Non Linear Sequence\"\n\n# Test cases to verify the correctness of the solution\nprint(seq_linear([0,2,4,6,8,10]))  # Expected output: 'Linear Sequence'\nprint(seq_linear([1,2,3]))         # Expected output: 'Linear Sequence'\nprint(seq_linear([1,5,2]))         # Expected output: 'Non Linear Sequence'",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def tuple_to_float(tup):\n    float_num = float(str(int(tup[0])) + str(tup[1]))\n    return float_num\n\ndef check_function():\n    assert tuple_to_float((4, 56)) == 4.56\n    assert tuple_to_float((7, 256)) == 7.256\n    assert tuple_to_float((8, 123)) == 8.123\n    print(\"All test cases passed.\")\n\ncheck_function()",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(lst):\n    # Filter out even numbers and return the remaining numbers as a list\n    return [num for num in lst if num % 2 != 0]\n\n# Test cases\nprint(split([1,2,3,4,5,6]))  # Expected output: [1,3,5]\nprint(split([10,11,12,13]))  # Expected output: [11,13]\nprint(split([7,8,9,1]))      # Expected output: [7,9,1]",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def difference(n):\n    # Calculate the sum of cubes using the formula (n * (n + 1) * (2*n + 1)) / 6\n    sum_cubes = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Calculate the sum of first n natural numbers using the formula n * (n + 1) / 2\n    sum_natural = n * (n + 1) // 2\n    \n    # Return the difference between the two sums\n    return sum_cubes - sum_natural",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Odd_Pair(nums, target):\n    # Initialize counters for even and odd numbers\n    even_count = sum(1 for x in nums if x % 2 == 0)\n    odd_count = len(nums) - even_count\n    \n    # Calculate pairs with XOR equal to 'target'\n    odd_pairs_with_target = min(target, odd_count - 1)\n    \n    # Adjust for negative results\n    result = (odd_pairs_with_target + even_count * odd_count) // 2\n    return result",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(s):\n    return s.swapcase()",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def digit_distance_nums(a, b):\n    # Convert both numbers to strings and concatenate them in descending order\n    str_a = str(abs(a))\n    str_b = str(abs(b))\n    combined_digits = sorted(str_a + str_b)\n    \n    # Calculate the sum of differences between corresponding digits from both strings\n    result = sum(int(digit_a) - int(digit_b) for digit_a, digit_b in zip(combined_digits[:-1], combined_digits[1:]))\n    \n    return abs(result)\n\n# Test cases\nprint(digit_distance_nums(1,2))   # Output: 1\nprint(digit_distance_nums(23,56)) # Output: 6\nprint(digit_distance_nums(123,256)) # Output: 7",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sub_array_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef max_sub_array_sum(nums: List[int]) -> int:\n    max_so_far = nums[0]\n    current_max = nums[0]\n\n    for num in nums[1:]:\n        current_max = max(num, current_max + num)\n        max_so_far = max(max_so_far, current_max)\n\n    return max_so_far",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def union_elements(*args):\n    # Use set() to remove duplicates and then convert back to tuple\n    result = tuple(set().union(*args))\n    return result",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def assign_elements(pairs):\n    result = {}\n    for x, y in pairs:\n        if x not in result:\n            result[x] = []\n        if y not in result:\n            result[y] = []\n        result[x].append(y)\n        result[y].append(x)\n    for key, value in result.items():\n        if len(value) % 2 != 0:\n            result[key] = None\n    return result\n\n# Test cases\nprint(assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)]))  # Output: {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nprint(assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)]))  # Output: {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nprint(assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)]))  # Output: {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def Find_Max_Length(lst):\n    # Initialize variables to store the maximum length and current list size\n    max_length = 0\n    current_size = 0\n    \n    for sub_lst in lst:\n        if not isinstance(sub_lst, list):  # Check if the element is a list\n            continue  # Skip non-list elements\n        \n        current_size += len(sub_lst)  # Increment the current list size by the length of the current sublist\n        if current_size > max_length:\n            max_length = current_size  # Update the maximum length if necessary\n            \n    return max_length",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_values(s):\n    return [item for item in s.split(',') if '\"' in item]",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    # Initialize the result variable\n    res = 0\n    \n    # Iterate through all possible unique pairs in the array\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                res += 1\n                \n    return res",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(s):\n    \"\"\"\n    This function takes a string and returns a list of its characters.\n    \n    Example:\n    >>> split('python')\n    ['p', 'y', 't', 'h', 'o', 'n']\n    >>> split('Name')\n    ['N', 'a', 'm', 'e']\n    >>> split('program')\n    ['p', 'r', 'o', 'g', 'r', 'a', 'm']\n    \"\"\"\n    # Splitting the string at each character to create a list containing individual characters\n    return list(s)",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(lst):\n    # Check if the given list is sorted in ascending order\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_words(words_list, unwanted_chars):\n    # Remove characters from each word in the list if they exist in the unwanted_chars list\n    return [word.translate(str.maketrans('', '', ''.join(unwanted_chars))) for word in words_list]\n\nwords = ['Red color', 'Orange#', 'Green', 'Orange @', \"White\"]\nprint(remove_words(words,['#', 'color', '@']))",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_pair_diff_lessthan_K(arr: List[int], n: int, k: int) -> int:\n    arr.sort()\n    res = -float(\"inf\")\n    \n    # Find the maximum sum with at most one pair exceeding k.\n    for i in range(n - 1):\n        if abs(arr[i] - arr[i + 1]) < k:\n            res = max(res, arr[i] + arr[i + 1])\n        \n        # If there is more than one pair exceeding k, adjust accordingly.\n        if arr[i] >= k:\n            break\n    \n    # Calculate the total sum excluding the pairs that exceed k.\n    total_sum = sum(arr[:i + 1]) + sum(arr[-(n - len(arr) + 1):])\n    \n    return total_sum + res",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def two_unique_nums(lists):\n    # Convert each list in the input into a set and then back to a sorted tuple\n    unique_tuples = tuple(sorted(set(tuple(lst) for lst in lists)))\n    # Unpack the tuples into a new list and convert it back to a list of integers\n    result = list(map(int, unique_tuples))\n    return result\n\n# Test cases\nprint(two_unique_nums([[1,2,3,2,3,4,5], [1,2,3,2,4,5]]))  # Should return [1, 4, 5]\nprint(two_unique_nums([[1,2,3,2,4,5], [1,2,3,4,5]]))      # Should return [1, 3, 4, 5]\nprint(two_unique_nums([[1,2,3,4,5], [1,2,3,4,5]]))        # Should return [1, 2, 3, 4, 5]",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_product(nums):\n    import math\n    \n    # Remove duplicates and sort the list\n    sorted_nums = sorted(set(nums))\n    \n    # Calculate factorial of each number in the sorted list and multiply them together\n    result = 1\n    for num in sorted_nums:\n        if num != 0:  # Skip multiplication with zero\n            result *= math.factorial(num)\n        else:\n            break\n    \n    return result\n\n# Test cases\nprint(unique_product([10, 20, 30, 40, 20, 50, 60, 40]))  # Output: 720000000\nprint(unique_product([1, 2, 3, 1,]))                    # Output: 6\nprint(unique_product([7, 8, 9, 0, 1, 1]))                # Output: 0",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef surfacearea_cylinder(r, h):\n    # Calculate the surface area of a cylinder using the formula:\n    # SA = 2 * π * r^2 + 2 * π * r * h\n    return 2 * math.pi * r**2 + 2 * math.pi * r * h",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - count_no() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - count_no() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def count_no(n, divisor, length):\n    current = n * (n - 1)\n    i = 1\n    while i < length:\n        if i % divisor == 0:\n            current += i // divisor\n        else:\n            current -= i\n        i += 1\n    return current",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Sub_Array(arr1, arr2, m, n):\n    if len(arr1) < len(arr2): \n        return False\n    \n    for i in range(m-n+1): \n        count = 0\n        for j in range(n): \n            if arr1[i+j] != arr2[j]: \n                count += 1\n        if count <= 1: \n            return True\n    return False\n\n# Test cases\nprint(is_Sub_Array([1,4,3,5], [1,2], 4, 2))  # Expected output: False\nprint(is_Sub_Array([1,2,1], [1,2,1], 3, 3))  # Expected output: True\nprint(is_Sub_Array([1,0,2,2], [2,2,0], 4, 3))  # Expected output: False",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit_Factorial(n):\n    # Calculate n! and then get the last digit\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test cases\nprint(last_Digit_Factorial(4))   # Expected output: 4\nprint(last_Digit_Factorial(21))  # Expected output: 0\nprint(last_Digit_Factorial(30))  # Expected output: 0",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def interleave_lists(list1, list2, list3):\n    return [(list1[i] if i < len(list1) else None, \n             list2[i] if i < len(list2) else None,\n             list3[i] if i < len(list3) else None)\n            for i in range(min(len(list1), len(list2), len(list3)))]",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_dissimilar(tuple1, tuple2):\n    # Find the set difference between the two tuples\n    return tuple(set(tuple1) ^ set(tuple2))",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_even(data):\n    result = []\n    for item in data:\n        if isinstance(item, tuple) and all(isinstance(i, int) and i % 2 == 0 for i in item):\n            result.append(item)\n        elif isinstance(item, tuple):\n            result.extend(extract_even(item))\n    return tuple(result)\n\n# Test cases\nprint(extract_even((4, 5, (7, 6, (2, 4)), 6, 8)))  # Expected output: (4, (6, (2, 4)), 6, 8)\nprint(extract_even((5, 6, (8, 7, (4, 8)), 7, 9)))  # Expected output: (6, (8, (4, 8)))\nprint(extract_even((5, 6, (9, 8, (4, 6)), 8, 10)))  # Expected output: (6, (8, (4, 6)), 8, 10)",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def surface_Area(a,b):\n    # Calculate base_area and slant_height using Pythagorean theorem\n    base_area = b * b / 2\n    h = ((a**2 + b**2)**0.5)\n    slant_height = (h * h + b*b)/h\n    \n    # Surface Area of Square Pyramid is Base Area plus four times Triangular Face Areas\n    total_surface_area = base_area + 4*(b/2)*(slant_height - b/2)\n    \n    return total_surface_area",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def my_dict(dct):\n    # Check if the dictionary is empty\n    return len(dct) == 0",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number.\n    \n    Args:\n    n (int): The index of the Catalan number to calculate.\n    \n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        c = 1\n        for i in range(n):\n            c = c * (n - i) // (i + 1)\n        return c",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_adverbs(sentence):\n    pattern = r\"([A-Z][^a-zA-Z]*\\b[A-Za-z]+\\b)\"\n    matches = re.finditer(pattern, sentence)\n    adverbs_with_positions = [(match.group(0), match.start()) for match in matches]\n    return adverbs_with_positions\n\n# Test cases\nprint(find_adverbs(\"Clearly, he has no excuse for such behavior.\"))\nprint(find_adverbs(\"Please handle the situation carefully.\"))\nprint(find_adverbs(\"Complete the task quickly.\"))",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from heapq import nlargest\n\ndef expensive_items(dataset, n):\n    \"\"\"\n    Given a list of dictionaries containing product names and prices,\n    return the 'n' most expensive products.\n    \n    Parameters:\n        dataset (list): A list of dictionaries with keys 'name' and 'price'.\n        n (int): The number of most expensive products to return.\n        \n    Returns:\n        list: A list of dictionaries containing the top 'n' most expensive products.\n    \"\"\"\n    # Sort the dataset based on price in descending order and get the first n elements as the result\n    return nlargest(n, dataset, key=lambda x: x['price'])\n\n# Test cases\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)) \nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2))\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1))",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_Arr(arr, n, k):\n    # Extract the first k elements\n    first_part = arr[:k]\n    \n    # Remove the extracted first k elements from the original array\n    arr = arr[k:]\n    \n    # Add the first k elements back at the beginning of the array\n    for i in range(k):\n        arr.insert(0, first_part[i])\n    \n    return arr",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(lst):\n    return tuple(lst)\n\n# Test cases\nprint(list_tuple([5, 10, 7, 4, 15, 3]))  # Expected output: (5, 10, 7, 4, 15, 3)\nprint(list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7]))  # Expected output: (2, 4, 5, 6, 2, 3, 4, 4, 7)\nprint(list_tuple([58, 44, 56]))  # Expected output: (58, 44, 56)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(arr):\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Return the difference between the maximum and minimum values\n    return max_val - min_val",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perfect_squares(start, end):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through all integers from start to end\n    for i in range(start, end + 1):\n        # Check if the square root of i is an integer\n        if int(i ** 0.5) ** 2 == i:\n            # Add the square to the result list\n            result.append(i)\n            \n    return result",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def polar_rect(rho, theta):\n    import cmath\n    \n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    \n    return (x.real, y.real)",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with its first element swapped with its last element.\n    \n    Args:\n    lst (list): The original list to be manipulated.\n    \n    Returns:\n    list: A new list with the first and last elements interchanged.\n    \"\"\"\n    if len(lst) > 1:\n        # Swap the first and last elements of the list\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "from math import comb\n\ndef sum_of_product(n):\n    \"\"\"\n    Calculate the sum of products of binomial coefficients for n.\n    \n    Args:\n    n (int): The input integer\n    \n    Returns:\n    int: The sum of products of binomial coefficients up to n.\n    \"\"\"\n    total_sum = 0\n    # Iterate through all combinations using double loop logic with range\n    for i in range(n + 1):\n        for j in range(i + 1):\n            total_sum += comb(n, i) * comb(n - i, j)\n    return total_sum\n\n# Check function with provided data points\nassert(sum_of_product(3) == 15)\nassert(sum_of_product(4) == 56)\nassert(sum_of_product(1) == 1)\n\nprint(\"All checks passed.\")",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: '216.08.094.196'",
      "Test 2: FAIL - invalid literal for int() with base 10: '12.01.024'",
      "Test 3: FAIL - invalid literal for int() with base 10: '216.08.094.0196'"
    ],
    "generated_code": "def removezero_ip(ip_address):\n    return str(int(ip_address)) if ip_address else ''",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_even_odd(lst):\n    # Find the first even and odd numbers in the list\n    evens = [i for i in lst if i % 2 == 0]\n    odds = [i for i in lst if i % 2 != 0]\n    \n    # Calculate the difference between the last even and the first odd number\n    return odds[-1] - evens[0]\n\n# Test cases\nprint(diff_even_odd([1,3,5,7,4,1,6,8]))  # Output should be 3\nprint(diff_even_odd([1,2,3,4,5,6,7,8,9,10]))  # Output should be 1\nprint(diff_even_odd([1,5,7,9,10]))  # Output should be 9",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return \"Not Possible\"\n\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] == '1' and s2[i] == '0':\n            count += 1\n        elif s1[i] == '0' and s2[i] == '1':\n            count += 1\n\n    return count // 2\n\n# Test cases\nprint(min_Swaps(\"1101\", \"1110\"))  # Expected output: 1\nprint(min_Swaps(\"111\", \"000\"))    # Expected output: \"Not Possible\"\nprint(min_Swaps(\"111\", \"110\"))    # Expected output: \"Not Possible\"",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import sys\n\ndef tuple_size(tup):\n    # Calculate and return the system size in bytes for the given tuple\n    return sys.getsizeof(tup)",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def find_kth(arr1, arr2, n1, n2, k):\n    i = j = 0\n    while True:\n        if i == n1:\n            return arr2[j + k - 1]\n        elif j == n2:\n            return arr1[i + k - 1]\n        elif k == 1:\n            return min(arr1[i], arr2[j])\n        \n        in1 = arr1[i] if i < n1 else float('inf')\n        in2 = arr2[j] if j < n2 else float('inf')\n        \n        if in1 <= in2:\n            k -= (i + 1)\n            i += 1\n        else:\n            k -= (j + 1)\n            j += 1",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def armstrong_number(n):\n    # Calculate the length of the number\n    num_len = len(str(n))\n    \n    # Initialize sum\n    total = 0\n    \n    # Summing each digit raised to the power of the length of the number\n    while n > 0:\n        digit = n % 10\n        total += digit ** num_len\n        n //= 10\n    \n    return True if total == n else False",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    avg = total_sum / n\n    return total_sum, avg",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Even(num):\n    # Use bitwise AND operation with 1 to check if the least significant bit is 0 \n    # If it's 0, then the number is even; otherwise, it's odd.\n    return num & 1 == 0",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]