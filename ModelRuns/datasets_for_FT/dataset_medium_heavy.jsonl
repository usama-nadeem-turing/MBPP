{"instruction": "Write a python function to find the sum of squares of binomial co-efficients.", "output": "import math\n\ndef sum_of_square(n):\n    \"\"\"\n    Calculate the sum of squares of binomial coefficients for n elements.\n    \n    Args:\n    n : int - The number of elements in each group.\n    \n    Returns:\n    int - Sum of squares of binomial coefficients for n elements.\n    \"\"\"\n    total = 0\n    # Iterate over all possible values of k\n    for k in range(n+1):\n        coefficient = math.comb(n, k)\n        square_coefficient = coefficient * coefficient\n        total += square_coefficient\n    return total"}
{"instruction": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "output": "def sum_in_Range(l, r):\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Loop through each number in the given range\n    for num in range(l, r + 1):\n        # Check if the current number is odd\n        if num % 2 != 0:\n            # Add the odd number to the total sum\n            total_sum += num\n    \n    return total_sum\n\n# Test cases\nprint(sum_in_Range(2, 5))  # Expected output: 8\nprint(sum_in_Range(5, 7))  # Expected output: 12\nprint(sum_in_Range(7, 13)) # Expected output: 40"}
{"instruction": "Write a function to find n-th rencontres number.", "output": "def rencontres_number(n, k):\n    \"\"\"\n    Calculates the n-th rencontres number.\n    \n    Parameters:\n    n (int): The index of the number in the sequence.\n    k (int): The current value being incremented.\n    \n    Returns:\n    int: The rencontres number at position n and increment k.\n    \"\"\"\n    # Base case for when k is greater than or equal to n\n    if k >= n:\n        return 1\n    \n    # Recursive call with updated values of k and n\n    else:\n        return (n - 1) * k + rencontres_number(n, k + 1)\n\n# Example check function to verify the correctness of the solution\ndef check():\n    assert rencontres_number(7, 2) == 924\n    assert rencontres_number(3, 0) == 2\n    assert rencontres_number(3, 1) == 3\n    print(\"All tests passed!\")\n\ncheck()"}
{"instruction": "Write a function to convert rgb color to hsv color.", "output": "def rgb_to_hsv(r, g, b):\n    r /= 255\n    g /= 255\n    b /= 255\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    diff = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = ((g-b)/diff) % 6\n    elif max_val == g:\n        h = (((b-r)/diff) + 2) % 6\n    else: # max_val == b\n        h = (((r-g)/diff) + 4) % 6\n        \n    if max_val == 0:\n        s = 0\n    else:\n        s = diff / max_val\n    \n    v = max_val\n    \n    return (h * 60), (s * 100), (v * 100)\n\n# Test cases\nprint(rgb_to_hsv(255, 255, 255))  # Expected output: (0.0, 100.0, 100.0)\nprint(rgb_to_hsv(0, 215, 0))      # Expected output: (120.0, 100.0, 84.31372549019608)\nprint(rgb_to_hsv(10, 215, 110))   # Expected output: (149.26829268292684, 95.34883720930233, 84.31372549019608)"}
{"instruction": "Write a function to find maximum run of uppercase characters in the given string.", "output": "def max_run_uppercase(s):\n    count = 0\n    max_count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count"}
{"instruction": "Write a function to count alphabets,digits and special charactes in a given string.", "output": "def count_alpha_dig_spl(str_input):\n    # Initialize counters for alphabets, digits, and special characters\n    alpha_count = 0\n    dig_count = 0\n    spl_count = 0\n    \n    # Iterate through each character in the input string\n    for char in str_input:\n        if char.isalpha():\n            alpha_count += 1\n        elif char.isdigit():\n            dig_count += 1\n        else:\n            spl_count += 1\n            \n    return (alpha_count, dig_count, spl_count)\n\n# Test cases\nprint(count_alpha_dig_spl(\"abc!@#123\"))  # Expected output: (3, 3, 3)\nprint(count_alpha_dig_spl(\"dgsuy@#$%&1255\"))  # Expected output: (5, 4, 5)\nprint(count_alpha_dig_spl(\"fjdsif627348#%$^&\"))  # Expected output: (6, 6, 5)"}
{"instruction": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "output": "import heapq\n\ndef heap_sort(nums):\n    \"\"\"\n    Pushes all values into a min-heap and pops off the smallest values one at a time.\n    \n    Args:\n    nums (list): A list of integers to be sorted using heapsort algorithm.\n    \n    Returns:\n    list: The sorted list in ascending order.\n    \"\"\"\n    # Convert the list into a heap in-place.\n    heapq.heapify(nums)\n    \n    # Pop elements from the heap until it's empty.\n    return [heapq.heappop(nums) for _ in range(len(nums))]\n\n# Check function with provided data points\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], \"Test case 1 failed\"\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85], \"Test case 2 failed\"\nassert heap_sort([7, 1, 9, 5]) == [1, 5, 7, 9], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")"}
{"instruction": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "output": "from typing import List, Tuple\n\ndef cummulative_sum(tuple_list: List[Tuple[int]]) -> int:\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total"}
{"instruction": "Write a python function to left rotate the bits of a given number.", "output": "def left_Rotate(num, d):\n    num = bin(num)[2:]  # Convert integer to binary and remove the '0b' prefix\n    shift_amount = len(num) - d % len(num)\n    rotated_bits = num[-shift_amount:] + num[:-shift_amount]\n    return int(rotated_bits, 2)\n\n# Example usage:\nprint(left_Rotate(16, 2))  # Output: 64\nprint(left_Rotate(10, 2))  # Output: 40\nprint(left_Rotate(99, 3))  # Output: 792"}
{"instruction": "Write a python function to find sum of odd factors of a number.", "output": "def sum_of_odd_Factors(n):\n    result = 1\n    # Divide n by 2 as many times as possible \n    while n % 2 == 0:\n        n //= 2\n    \n    # Check for all odd numbers from 3 to sqrt(n)\n    for i in range(3, int(n**0.5)+1, 2):\n        count = 0\n        # Count how many factors 'i' has\n        while n % i == 0:\n            n //= i\n            count += 1\n        \n        # Add 'count+1' if 'i' is an odd factor\n        if count > 0:\n            result *= (i ** (count + 1))\n    \n    # If n becomes greater than 2 and still not divisible by 2, then n itself is odd\n    if n > 2:\n        result *= (n ** 2)\n\n    return result"}
{"instruction": "Write a python function to find the smallest missing number from the given array.", "output": "def find_First_Missing(nums, start, end):\n    # Initialize the result with the length of nums plus one.\n    result = len(nums) + 1\n    \n    # Iterate through each number in the list.\n    for i in range(len(nums)):\n        # Check if the current number is less than the length and not equal to its index value.\n        if nums[i] < len(nums) and nums[nums[i]] != nums[i]:\n            # Swap the numbers so that num at position i equals to num at position nums[nums[i]]\n            temp = nums[nums[i]]\n            nums[nums[i]] = nums[i]\n            nums[i] = temp\n    \n    # Iterate through the sorted array again to find the first place where the actual value doesn't match the expected index.\n    for i in range(start, end):\n        if nums[i] != i:\n            return i\n    \n    # If all positions were checked without finding an issue, the largest possible gap would be between last valid index and size of nums.\n    return len(nums)\n\n# Example usage\nprint(find_First_Missing([0,1,2,3], 0, 3))  # Expected output: 4\nprint(find_First_Missing([0,1,2,6,9], 0, 4))  # Expected output: 3\nprint(find_First_Missing([2,3,5,8,9], 0, 4))  # Expected output: 0"}
{"instruction": "Write a python function to find the type of triangle from the given sides.", "output": "def check_Type_Of_Triangle(side1, side2, side3):\n    \"\"\"\n    This function takes three integer inputs representing the lengths of the sides of a triangle.\n    It returns 'Obtuse-angled Triangle', 'Acute-angled Triangle', or 'Right-angled Triangle' based on the Pythagorean theorem.\n    \"\"\"\n\n    # Sort the sides in ascending order\n    sorted_sides = sorted([side1, side2, side3])\n\n    # Check if it's a right-angled triangle\n    if sorted_sides[0]**2 + sorted_sides[1]**2 == sorted_sides[2]**2:\n        return \"Right-angled Triangle\"\n\n    # Check if all angles are acute (triangle inequality theorem)\n    if sorted_sides[0] + sorted_sides[1] > sorted_sides[2]:\n        return \"Acute-angled Triangle\"\n\n    # If none of above conditions satisfied, then it is an obtuse-angled triangle\n    return \"Obtuse-angled Triangle\""}
{"instruction": "Write a function to count occurrence of a character in a string.", "output": "def count_char(s, char):\n    # Initialize counter\n    count = 0\n    \n    # Loop through each character in the string\n    for c in s:\n        # If the current character matches the target character\n        if c == char:\n            # Increment the counter\n            count += 1\n            \n    return count"}
{"instruction": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "output": "from typing import List\n\ndef rearrange_numbs(nums: List[int]) -> List[int]:\n    # Separate positive and negative numbers using lambda functions\n    pos_nums = sorted(filter(lambda x: x > 0, nums))\n    neg_nums = sorted(filter(lambda x: x < 0, nums))\n\n    # Combine both lists starting with the first positive number followed by negative numbers\n    return pos_nums + neg_nums[::]\n\n# Test cases\nprint(rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10]))  # Expected output: [2, 5, 7, 8, 9, -10, -3, -1]\nprint(rearrange_numbs([10,15,14,13,-18,12,-20]))      # Expected output: [10, 12, 13, 14, 15, -20, -18]\nprint(rearrange_numbs([-20,20,-10,10,-30,30]))        # Expected output: [10, 20, 30, -30, -20, -10]"}
{"instruction": "Write a function to calculate the harmonic sum of n-1.", "output": "def harmonic_sum(n):\n    result = 0\n    for i in range(1, n+1):\n        result += 1/i\n    return result"}
{"instruction": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "output": "import re\n\ndef text_uppercase_lowercase(text):\n    # Define a regular expression pattern to find sequences starting with an uppercase letter and followed by lowercase letters.\n    pattern = r'(?<![a-z])[A-Z][a-z]+'\n    \n    # Search for matches in the given text using the defined pattern.\n    result = re.search(pattern, text)\n    \n    # If a match is found, return \"Found a match!\", otherwise return \"Not matched!\".\n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with provided test cases\nprint(text_uppercase_lowercase(\"AaBbGg\"))   # Expected output: 'Found a match!'\nprint(text_uppercase_lowercase(\"aA\"))       # Expected output: 'Not matched!'\nprint(text_uppercase_lowercase(\"PYTHON\"))   # Expected output: 'Not matched!'"}
{"instruction": "Write a function to caluclate arc length of an angle.", "output": "import math\n\ndef arc_length(radius, angle_in_degrees):\n    if angle_in_degrees == 360:\n        return radius * 2 * math.pi\n    elif angle_in_degrees % 360 != 0:\n        return None\n    else:\n        return radius * 2 * math.acos(math.sin(angle_in_degrees/360) * math.sin(180-angle_in_degrees/360)) / math.cos(angle_in_degrees/360)"}
{"instruction": "Write a python function to check whether a sequence of numbers has an increasing trend or not.", "output": "def increasing_trend(sequence):\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i + 1]:\n            return False\n    return True"}
{"instruction": "Write a function to find three closest elements from three sorted arrays.", "output": "from typing import List\n\ndef find_closet(a: List[int], b: List[int], c: List[int], x: int, y: int, z: int) -> List[int]:\n    i, j, k = 0, 0, 0\n    closest_diff = float('inf')\n    closest_values = []\n    \n    while i < len(a) and j < len(b) and k < len(c):\n        diff_1 = abs(x - a[i])\n        diff_2 = abs(y - b[j])\n        diff_3 = abs(z - c[k])\n        \n        min_diff = min(diff_1, diff_2, diff_3)\n        \n        if diff_1 == min_diff:\n            closest_values.append(a[i])\n            i += 1\n        elif diff_2 == min_diff:\n            closest_values.append(b[j])\n            j += 1\n        else:\n            closest_values.append(c[k])\n            k += 1\n        \n        if min_diff == 0:\n            break\n    \n    return tuple(closest_values)\n\n# Test Cases\nprint(find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2))  # Output: (10, 15, 10)\nprint(find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5))  # Output: (24, 22, 23)\nprint(find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2))  # Output: (11, 16, 11)"}
{"instruction": "Write a function to find minimum k records from tuple list.", "output": "def min_k(tuples_list, k):\n    # Sort the tuples based on the second element of each tuple in ascending order\n    sorted_tuples = sorted(tuples_list, key=lambda x: x[1])\n    \n    # Slice the first 'k' elements from the sorted list\n    result = sorted_tuples[:k]\n    \n    return result\n\n# Test cases\nprint(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2))\nprint(min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3))\nprint(min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1))"}
{"instruction": "Write a python function to remove even numbers from a given list.", "output": "def remove_even(nums):\n    \"\"\"\n    Removes all even numbers from the given list.\n    \n    Parameters:\n    nums (List[int]): The input list of integers.\n    \n    Returns:\n    List[int]: A new list with all even numbers removed.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    assert remove_even([1,3,5,2]) == [1,3,5], \"Test case 1 failed\"\n    assert remove_even([5,6,7]) == [5,7], \"Test case 2 failed\"\n    assert remove_even([1,2,3,4]) == [1,3], \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()"}
{"instruction": "Write a python function to count the number of lists in a given number of lists.", "output": "def count_list(lst):\n    \"\"\"\n    Counts the number of lists within a list of lists.\n    \n    Parameters:\n    lst (list): A list containing other lists as elements.\n    \n    Returns:\n    int: The total number of inner lists in the input list.\n    \"\"\"\n    return len(lst)\n\n# Check function with provided data points\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2\nprint(\"All tests passed!\")"}
{"instruction": "Write a function to extract the maximum numeric value from a string by using regex.", "output": "import re\n\ndef extract_max(s):\n    # Extract all numbers in the string using regex and find the max\n    num_list = re.findall(r'\\d+', s)\n    if not num_list:\n        return None\n    return int(max(num_list))"}
{"instruction": "Write a python function to find the average of even numbers till a given even number.", "output": "def average_Even(n):\n    total = 0\n    count = 0\n    for i in range(2, n+1, 2):  # Start from 2 and increment by 2 until n\n        total += i\n        count += 1\n    if count == 0:\n        return 0  # Avoid division by zero error\n    else:\n        return total / count"}
{"instruction": "Write a python function to reverse an array upto a given position.", "output": "def reverse_Array_Upto_K(arr, k):\n    # Reverse elements from start of arr to index k-1\n    arr[:k] = reversed(arr[:k])\n    \n    return arr"}
{"instruction": "Write a python function to check for even parity of a given number.", "output": "def check_Even_Parity(n):\n    \"\"\"\n    Check if the binary representation of n has an even number of ones.\n    \n    Args:\n    - n: An integer\n    \n    Returns:\n    - A boolean value indicating whether the parity is even (True) or odd (False)\n    \"\"\"\n    # Convert the number to its binary string and remove the '0b' prefix\n    binary_representation = bin(n)[2:]\n    # Count the number of '1's in the binary representation\n    count_of_ones = binary_representation.count('1')\n    # Return True if the count is even, otherwise False\n    return count_of_ones % 2 == 0\n\n# Test cases\nprint(check_Even_Parity(10))  # Expected output: True\nprint(check_Even_Parity(11))  # Expected output: False\nprint(check_Even_Parity(18))  # Expected output: True"}
{"instruction": "Write a function to convert camel case string to snake case string.", "output": "def camel_to_snake(camel_str):\n    return ''.join(['_' + char.lower() if char.isupper() else char for char in camel_str]).lstrip('_')\n\n# Test cases\nprint(camel_to_snake('PythonProgram'))  # Output: 'python_program'\nprint(camel_to_snake('pythonLanguage'))  # Output: 'python_language'\nprint(camel_to_snake('ProgrammingLanguage'))  # Output: 'programming_language'"}
{"instruction": "Write a python function to find the length of the shortest word.", "output": "def len_log(words):\n    # Find and return the length of the shortest word in the list\n    return min(len(word) for word in words)"}
{"instruction": "Write a python function to find the sum of fourth power of first n even natural numbers.", "output": "def even_Power_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        num = 2 * i\n        total += num ** 4\n    return total"}
{"instruction": "Write a function to check whether the given ip address is valid or not using regex.", "output": "import re\n\ndef check_IP(ip_address):\n    # Regular expression for validating an IP address\n    pattern = r'^((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)$'\n    \n    if re.match(pattern, ip_address):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n\n# Test cases\nprint(check_IP(\"192.168.0.1\"))  # Output: Valid IP address\nprint(check_IP(\"110.234.52.124\"))  # Output: Valid IP address\nprint(check_IP(\"366.1.2.2\"))  # Output: Invalid IP address"}
{"instruction": "Write a function to find common index elements from three lists.", "output": "def extract_index_list(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            result.append(i)\n    return result"}
{"instruction": "Write a function to find the minimum total path sum in the given triangle.", "output": "from typing import List\n\ndef min_sum_path(triangle: List[List[int]]) -> int:\n    if not triangle:\n        return 0\n    \n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += min(triangle[i + 1][j], triangle[i + 1][j + 1])\n    \n    return triangle[0][0]\n\n# Test cases\nprint(min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]])) # Expected output: 6\nprint(min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]])) # Expected output: 10\nprint(min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]])) # Expected output: 9"}
{"instruction": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "output": "def div_of_nums(nums, m, n):\n    return list(filter(lambda x: x % m == 0 or x % n == 0, nums))"}
{"instruction": "Write a python function to choose points from two ranges such that no point lies in both the ranges.", "output": "def find_Points(a_range_start_a, a_range_end_a, b_range_start_b, b_range_end_b):\n    # Calculate the intersection of the two given intervals\n    if a_range_start_a > b_range_end_b:\n        temp = a_range_start_a\n        a_range_start_a = b_range_end_b\n        b_range_end_b = temp\n    \n    # Find the maximum end value and minimum start value for the new interval\n    max_end = max(a_range_end_a, b_range_end_b)\n    min_start = min(a_range_start_a, b_range_start_b)\n\n    # If the new interval is empty, return None as it's not possible to select points\n    if max_end < min_start:\n        return None\n    \n    # Return the selected range with its end value\n    return (min_start, max_end)\n\n# Test cases to verify the correctness of the function\nprint(find_Points(5,10,1,5))   # Expected output: (1, 10)\nprint(find_Points(3,5,7,9))    # Expected output: (3, 9)\nprint(find_Points(1,5,2,8))    # Expected output: (1, 8)"}
{"instruction": "Write a function to find the longest common subsequence for the given three string sequence.", "output": "def lcs_of_three(x, y, z, m, n, o):\n    # Initialize a matrix with dimensions (m+1) x (n+1) x (o+1)\n    dp = [[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    # Fill the DP table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if x[i - 1] == y[j - 1] == z[k - 1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    # The length of the longest common subsequence is stored in dp[m][n][o]\n    return dp[-1][-1][-1]\n\n# Example usage\nprint(lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5))  # Output: 2\nprint(lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13))  # Output: 5\nprint(lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5))  # Output: 3"}
{"instruction": "Write a python function to count number of cubes of size k in a cube of size n.", "output": "def no_of_cubes(n,k):\n    \"\"\"\n    Function to calculate the number of unit cubes of size k within an n x n x n cube.\n    \n    Args:\n        n (int): The side length of the larger cube.\n        k (int): The edge length of the smaller cubes.\n        \n    Returns:\n        int: Number of unit cubes with size k within the larger cube.\n    \"\"\"\n    return (n-k+1)**3\n\n# Test Cases\nprint(no_of_cubes(2,1))  # Expected output: 8\nprint(no_of_cubes(5,2))  # Expected output: 64\nprint(no_of_cubes(1,1))  # Expected output: 1"}
{"instruction": "Write a python function to count the total set bits from 1 to n.", "output": "def count_Set_Bits(n):\n    \"\"\"\n    Counts the total number of set bits in binary representation for all numbers from 1 to n.\n    \n    Parameters:\n    n (int): The upper limit of the range starting from 1.\n    \n    Returns:\n    int: Total number of set bits from 1 to n.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        # Convert i to binary and iterate through each bit to check if it's '1'\n        count += bin(i).count('1')\n    return count"}
{"instruction": "Write a python function to check whether an array contains only one distinct element or not.", "output": "def unique_Element(arr, n):\n    # Your solution goes here\n    \n    if len(set(arr)) == 1:\n        return 'YES'\n    else:\n        return 'NO'"}
{"instruction": "Write a function to find the longest chain which can be formed from the given set of pairs.", "output": "from typing import List, Tuple\n\nclass Pair:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\ndef max_chain_length(pairs: List[Pair], k: int) -> int:\n    dp = [1] * len(pairs)\n    for i in range(len(pairs)):\n        for j in range(i):\n            if pairs[i].x > pairs[j].y and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                \n    return max(dp)\n\n# Test Cases\npairs1 = [Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)]\nk1 = 4\nprint(max_chain_length(pairs1, k1))  # Expected output: 3\n\npairs2 = [Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)]\nk2 = 4\nprint(max_chain_length(pairs2, k2))  # Expected output: 4\n\npairs3 = [Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)]\nk3 = 5\nprint(max_chain_length(pairs3, k3))  # Expected output: 5"}
{"instruction": "Write a function to access dictionary key\u2019s element by index.", "output": "def access_key(dict_of_values, index):\n    return list(dict_of_values.keys())[index]"}
{"instruction": "Write a function to find the most common elements and their counts of a specified text.", "output": "def most_common_elem(text, n):\n    from collections import Counter\n    return list(Counter(text).most_common(n))"}
{"instruction": "Write a python function to count equal element pairs from the given array.", "output": "def count_Pairs(arr, n):\n    # Counting occurrences of each number in the array\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Calculating the total number of pairs\n    total_pairs = 0\n    for count in counts.values():\n        total_pairs += (count * (count - 1)) // 2\n    \n    # Adding additional pairs formed by elements with odd frequencies\n    for key in counts.keys():\n        if counts[key] % 2 != 0:\n            total_pairs += (counts[key] - 1)\n    \n    return int(total_pairs)\n\n# Test cases\nprint(count_Pairs([1,1,1,1],4))  # Expected output: 6\nprint(count_Pairs([1,5,1],3))   # Expected output: 1\nprint(count_Pairs([3,2,1,7,8,9],6))  # Expected output: 0"}
{"instruction": "Write a python function to find sum of all prime divisors of a given number.", "output": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(divisor):\n    \"\"\"Return the sum of all prime divisors of the divisor.\"\"\"\n    primes = []\n    for i in range(2, divisor + 1):\n        while divisor % i == 0 and is_prime(i):\n            primes.append(i)\n            divisor //= i\n    return sum(primes)\n\n# Check function with provided data points\nassert sum_of_primes(60) == 10\nassert sum_of_primes(39) == 16\nassert sum_of_primes(40) == 7\nprint(\"All tests passed.\")"}
{"instruction": "Write a function to increment the numeric values in the given strings by k.", "output": "def increment_numerics(strings, k):\n    return [str(int(num) + k) if num.isdigit() else num for num in strings]"}
{"instruction": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "output": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"}
{"instruction": "Write a python function to count lower case letters in a given string.", "output": "def lower_ctr(s):\n    # Initialize counter for lowercase letters\n    low_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is a lowercase letter and increment counter\n        if 'a' <= char <= 'z':\n            low_count += 1\n            \n    return low_count"}
{"instruction": "Write a function to split the given string at uppercase letters by using regex.", "output": "import re\n\ndef split_list(s):\n    # Splitting the input string by capturing sequences of characters that start with an uppercase letter followed by zero or more lowercase letters.\n    return re.split('(?<!^)(?=[A-Z][a-z]+)', s)\n\n# Test cases to verify the correctness of the function\nassert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']"}
{"instruction": "Write a python function to check whether the two given strings are isomorphic to each other or not.", "output": "def is_Isomorphic(s, t):\n    if len(s) != len(t): \n        return False\n    \n    mapping_s_to_t = {}\n    mapping_t_to_s = {}\n    \n    for char_s, char_t in zip(s, t):\n        if char_s in mapping_s_to_t and mapping_s_to_t[char_s] != char_t:\n            return False\n        if char_t in mapping_t_to_s and mapping_t_to_s[char_t] != char_s:\n            return False\n        \n        mapping_s_to_t[char_s] = char_t\n        mapping_t_to_s[char_t] = char_s\n    \n    return True"}
{"instruction": "Write a python function to set the right most unset bit.", "output": "def set_Right_most_Unset_Bit(n):\n    # Create a mask with all bits set to 1 except the rightmost unset bit.\n    mask = n - ((n >> 1) & (n << 1))\n    \n    # Apply the mask to n to set the right most unset bit.\n    result = n | mask\n    \n    return result"}
{"instruction": "Write a function to find the median of two sorted arrays of same size.", "output": "import numpy as np\n\ndef get_median(arr1, arr2, n):\n    \"\"\"\n    Function to calculate the median of two sorted arrays of equal length.\n    \n    Parameters:\n        arr1 (List[int]): The first sorted array.\n        arr2 (List[int]): The second sorted array.\n        n (int): Length of both input arrays.\n        \n    Returns:\n        float: Median value of the two sorted arrays.\n    \"\"\"\n    combined = np.concatenate((arr1, arr2))\n    unique_elements = np.unique(combined)\n    mid_index = len(unique_elements) // 2\n    \n    if len(unique_elements) % 2 == 0:\n        # Even number of elements, average them at the middle indices\n        return (unique_elements[mid_index - 1] + unique_elements[mid_index]) / 2\n    else:\n        # Odd number of elements, return the middle element\n        return unique_elements[mid_index]\n\n# Check function with provided data points\nassert abs(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) - 16.0) < 1e-6\nassert abs(get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) - 8.5) < 1e-6\nassert abs(get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) - 25.0) < 1e-6"}
{"instruction": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "output": "def sum_positivenum(numbers):\n    return sum(x for x in numbers if x > 0)"}
{"instruction": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "output": "def check_greater(tup1, tup2):\n    for i in range(len(tup1)):\n        if not tup2[i] > tup1[i]:\n            return False\n    return True\n\n# Test cases\nprint(check_greater((10, 4, 5), (13, 5, 18))) # Expected output: True\nprint(check_greater((1, 2, 3), (2, 1, 4))) # Expected output: False\nprint(check_greater((4, 5, 6), (5, 6, 7))) # Expected output: True"}
{"instruction": "Write a function to convert the given string of float type into tuple.", "output": "def float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))"}
{"instruction": "Write a function to find the frequency of each element in the given list.", "output": "def freq_element(lst):\n    # Create an empty dictionary to store frequencies\n    result = {}\n    for item in lst:\n        if item in result:\n            result[item] += 1\n        else:\n            result[item] = 1\n    return str(result)"}
{"instruction": "Write a python function to count the number of distinct power of prime factor of given number.", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Fac(x):\n    factors = []\n    while x > 1:\n        p = 2\n        while p * p <= x:\n            if x % p == 0:\n                factors.append(p)\n                x //= p\n            else:\n                p += 1\n        if x > 1 and is_prime(x):\n            factors.append(x)\n            break\n    unique_factors = set(factors)\n    return len(unique_factors)\n\n# Test cases\nprint(count_Fac(24))  # Expected output: 3\nprint(count_Fac(12))  # Expected output: 2\nprint(count_Fac(4))   # Expected output: 1"}
{"instruction": "Write a function to convert tuple string to integer tuple.", "output": "def tuple_str_int(tuple_str):\n    # Convert each element in the tuple string into an integer and create a new tuple\n    int_tuple = tuple(map(int, tuple_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")))\n    return int_tuple\n\n# Test cases\nprint(tuple_str_int(\"(7, 8, 9)\"))  # Expected output: (7, 8, 9)\nprint(tuple_str_int(\"(1, 2, 3)\"))   # Expected output: (1, 2, 3)\nprint(tuple_str_int(\"(4, 5, 6)\"))   # Expected output: (4, 5, 6)"}
{"instruction": "Write a function to find the nth delannoy number.", "output": "def dealnnoy_num(n, k):\n    \"\"\"\n    This function calculates the nth Delannoy number.\n    \n    Parameters:\n    n (int): The position in the sequence of Delannoy numbers.\n    k (int): The horizontal and vertical step size for each move.\n    \n    Returns:\n    int: The nth Delannoy number.\n    \"\"\"\n    # Calculate the nth Delannoy number using the given formula\n    result = ((2 * n + 2)**k - (2**(k+1)) - 1) // (2**k)\n    return result\n\n# Test cases to verify the correctness of the solution\nassert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681\nprint(\"All test cases passed!\")"}
{"instruction": "Write a python function to add a minimum number such that the sum of array becomes even.", "output": "def min_Num(arr, target_sum):\n    \"\"\"\n    Adds a minimum integer to an array so that their sum equals the given target sum.\n    \n    Parameters:\n        arr (list): The input list of integers.\n        target_sum (int): The desired total sum of the elements in the list.\n        \n    Returns:\n        int: The minimum integer to be added to make the sum equal to the target sum.\n    \"\"\"\n    for num in reversed(arr):\n        if target_sum - num >= num:\n            return target_sum - num\n    return 0\n\n# Check function with provided data points\nprint(min_Num([1,2,3,4,5,6,7,8,9], 9))   # Expected output: 1\nprint(min_Num([1,2,3,4,5,6,7,8], 8))     # Expected output: 2\nprint(min_Num([1,2,3], 3))               # Expected output: 2"}
{"instruction": "Write a python function to move all zeroes to the end of the given list.", "output": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes in the given list to the end while maintaining the relative order of non-zero elements.\n    \n    :param lst: List[int] - The input list containing integers.\n    :return: List[int] - The modified list with all zeroes moved to the end.\n    \"\"\"\n    # Separate zero and non-zero elements\n    non_zero = [i for i in lst if i != 0]\n    # Combine non-zero elements at the beginning followed by zeros\n    result = non_zero + [0] * (len(lst) - len(non_zero))\n    return result\n\n# Test cases to verify the correctness of the solution\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0], \"Test case 1 failed\"\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0], \"Test case 2 failed\"\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")"}
{"instruction": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "output": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        start = match.start()\n        end = match.end()\n        return (pattern, start, end)\n    else:\n        return None"}
{"instruction": "Write a python function to check if the string is a concatenation of another string.", "output": "def check_Concat(s1, s2):\n    # Concatenate s2 with itself n times and check if it matches s1\n    for i in range(1, len(s1)):\n        if s1 == s2 * i:\n            return True\n    return False"}
{"instruction": "Write a python function to count the number of equal numbers from three given integers.", "output": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of occurrences where x is equal to y and y is equal to z in the same tuple.\n    \n    Args:\n        x (int): First integer value.\n        y (int): Second integer value.\n        z (int): Third integer value.\n        \n    Returns:\n        int: The count of equal values.\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n# Test cases\nprint(test_three_equal(1,1,1)) # Expected output: 3\nprint(test_three_equal(-1,-2,-3)) # Expected output: 0\nprint(test_three_equal(1,2,2)) # Expected output: 2"}
{"instruction": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "output": "def pack_consecutive_duplicates(input_list):\n    result = []\n    count = 1\n    for i in range(1, len(input_list)):\n        if input_list[i] == input_list[i - 1]:\n            count += 1\n        else:\n            result.append([input_list[i - 1]] * count)\n            count = 1\n    result.append([input_list[-1]] * count)  # Append the last group if it's not empty\n    return result"}
{"instruction": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "output": "def remove_list_range(lst, start, end):\n    return [sublist for sublist in lst if all(item >= start and item <= end for item in sublist)]"}
{"instruction": "Write a function to remove the parenthesis area in a string.", "output": "def remove_parenthesis(s):\n    # Split the string into list of substrings based on '(' and ')'\n    sub_strings = s.split(')')\n    # Join the substrings back together with no separators\n    return ''.join(sub_strings)\n\n# Test cases\nprint(remove_parenthesis([\"python (chrome)\"]))  # Expected output: \"python\"\nprint(remove_parenthesis([\"string(.abc)\"]))  # Expected output: \"string\"\nprint(remove_parenthesis([\"alpha(num)\"]))  # Expected output: \"alpha\""}
{"instruction": "Write a function to remove multiple spaces in a string by using regex.", "output": "import re\n\ndef remove_multiple_spaces(text):\n    # Replace one or more whitespace characters (\\s+) with a single space\n    return re.sub(r'\\s+', ' ', text).strip()\n\n# Test cases\nassert remove_multiple_spaces('Google      Assistant') == 'Google Assistant', \"Test case 1 failed\"\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core', \"Test case 2 failed\"\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")"}
{"instruction": "Write a python function to count number of vowels in the string.", "output": "def Check_Vow(s, pattern):\n    # Initialize vowel counter\n    v = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char.lower() in 'aeiou':\n            v += 1\n    \n    # Return the count of matching vowels\n    return v\n\n# Example check functions (not part of the solution)\nprint(Check_Vow(\"corner\", \"AaEeIiOoUu\"))   # Should print 2\nprint(Check_Vow(\"valid\", \"AaEeIiOoUu\"))    # Should print 2\nprint(Check_Vow(\"true\", \"AaEeIiOoUu\"))     # Should print 2"}
{"instruction": "Write a python function to find the cube sum of first n odd natural numbers.", "output": "def cube_Sum(n):\n    # Initialize the total sum to 0\n    total_sum = 0\n    \n    # Iterate through the first n odd natural numbers\n    for i in range(1, n * 2, 2):\n        total_sum += i**3  # Add the cube of each odd number to the total sum\n        \n    return total_sum"}
{"instruction": "Write a function to find average value of the numbers in a given tuple of tuples.", "output": "def average_tuple(tuples_list):\n    return [sum(values) / len(values) for values in zip(*tuples_list)]"}
{"instruction": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "output": "def raw_heap(lst):\n    # Convert lst into a min-heap using build_min_heap method\n    return build_min_heap(lst)\n\ndef build_min_heap(heap_list):\n    n = len(heap_list) // 2 - 1\n    for i in range(n, -1, -1):\n        heapify(i, len(heap_list), heap_list)\n    return heap_list\n\ndef heapify(i, size, heap_list):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    smallest = i\n    if l < size and heap_list[l] < heap_list[i]:\n        smallest = l\n    if r < size and heap_list[r] < heap_list[smallest]:\n        smallest = r\n    if smallest != i:\n        swap(i, smallest, heap_list)\n        heapify(smallest, size, heap_list)\n\ndef swap(i, j, arr):\n    arr[i], arr[j] = arr[j], arr[i]\n\n# Example usage\nprint(raw_heap([25, 44, 68, 21, 39, 23, 89]))\nprint(raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58]))\nprint(raw_heap([4, 5, 6, 2]))"}
{"instruction": "Write a python function to find the sum of all even natural numbers within the range l and r.", "output": "def sum_Even(l, r):\n    # Initialize sum\n    total_sum = 0\n    \n    # Loop from 'l' to 'r'\n    for num in range(l, r+1):\n        # Check if the number is even\n        if num % 2 == 0:\n            # Add the even number to the sum\n            total_sum += num\n            \n    # Return the final sum\n    return total_sum"}
{"instruction": "Write a function to combine two given sorted lists using heapq module.", "output": "from heapq import merge\n\ndef combine_lists(list1, list2):\n    return list(merge(list1, list2))"}
{"instruction": "Write a function to find the item with maximum occurrences in a given list.", "output": "from collections import Counter\ndef max_occurrences(lst):\n    # Count the occurrences of each item in the list\n    count = Counter(lst)\n    # Find the item with the maximum occurrence\n    max_count_item = max(count, key=count.get)\n    return max_count_item"}
{"instruction": "Write a function to find the nth jacobsthal number.", "output": "def jacobsthal_num(n):\n    \"\"\"\n    Calculate the nth Jacobsthal number.\n    \n    :param n: The position in the sequence of Jacobsthal numbers to calculate.\n    :return: The nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        def helper(k):\n            if k == 0:\n                return 0\n            elif k == 1:\n                return 1\n            else:\n                return helper(k-1) + 2 * helper(k-2)\n        \n        return helper(n)\n\n# Test cases\nprint(jacobsthal_num(5))  # Expected output: 11\nprint(jacobsthal_num(2))  # Expected output: 1\nprint(jacobsthal_num(4))  # Expected output: 5"}
{"instruction": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "output": "def max_sum_of_three_consecutive(arr, n):\n    # Initialize variables to store the current maximum and previous maximum sums\n    cur_max = prev_max = 0\n    \n    for i in range(n):\n        # Update the maximum sum including the current element if it doesn't violate the rule of three consecutive elements\n        cur_max, prev_max = max(cur_max + arr[i], arr[i]), max(prev_max, cur_max)\n    \n    return cur_max\n\n# Test the function with provided data points\nprint(max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5))  # Expected output: 2101\nprint(max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5))   # Expected output: 5013\nprint(max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8))   # Expected output: 27"}
{"instruction": "Write a python function to print duplicants from a list of integers.", "output": "def find_duplicates(arr):\n    duplicates = []\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            if num not in duplicates:\n                duplicates.append(num)\n        else:\n            seen.add(num)\n            \n    return duplicates"}
{"instruction": "Write a function to multiply two lists using map and lambda function.", "output": "from functools import reduce\nfrom operator import mul\n\ndef mul_list(list1, list2):\n    return [mul(i, j) for i, j in zip(list1, list2)]"}
{"instruction": "Write a function to perform chunking of tuples each of size n.", "output": "def chunk_tuples(lst, n):\n    \"\"\"\n    Splits a list into chunks of specified size.\n    \n    Parameters:\n    lst (list): The list to be split.\n    n (int): The size of each chunk.\n    \n    Returns:\n    list: A list containing sublists of size 'n' from the input list 'lst'.\n    \"\"\"\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n# Test cases\nprint(chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3)) # Should print: [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nprint(chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2)) # Should print: [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nprint(chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4)) # Should print: [(11, 14, 16, 17), (19, 21, 22, 25)]"}
{"instruction": "Write a function to extract unique values from the given dictionary values.", "output": "def extract_unique(dict_values):\n    # Extracting and converting all items in list form into sets to remove duplicates,\n    # then back into lists to be returned.\n    return sorted(list(set([item for sublist in dict_values.values() for item in sublist])))\n\n\n# Test cases:\nprint(extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} )) # Output: [1, 2, 5, 6, 7, 8, 10, 11, 12]\nprint(extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} )) # Output: [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nprint(extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35] })) # Output: [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"}
{"instruction": "Write a function to convert a roman numeral to an integer.", "output": "def roman_to_int(s):\n    \"\"\"\n    Converts a Roman numeral string to an integer.\n    \n    Parameters:\n    s (str): A string representing a Roman numeral.\n    \n    Returns:\n    int: The integer value of the Roman numeral.\n    \"\"\"\n    # Mapping of Roman numerals to integers\n    rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50,\n               'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    \n    for char in reversed(s):\n        current_value = rom_val[char]\n        if current_value < prev_value:\n            total -= current_value\n        else:\n            total += current_value\n        prev_value = current_value\n    \n    return total"}
{"instruction": "Write a function to find out, if the given number is abundant.", "output": "def is_abundant(n):\n    # Initialize sum of proper divisors\n    divisor_sum = 0\n    \n    # Find all proper divisors and their sums\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            divisor_sum += i\n    \n    # Check if the sum of divisors exceeds the number itself\n    return divisor_sum > n\n\n# Test cases\nprint(is_abundant(12))  # Expected output: True\nprint(is_abundant(13))  # Expected output: False\nprint(is_abundant(9))   # Expected output: False"}
{"instruction": "Write a function to find the minimum number of platforms required for a railway/bus station.", "output": "def find_platform(arrival_time, departure_time, n):\n    # Sort arrival and departure times in ascending order\n    arrival_time.sort()\n    departure_time.sort()\n\n    plat_needed = 1\n    max_plat_needed = 1\n    i, j = 1, 0\n    \n    while i < n and j < n:\n        if arrival_time[i] <= departure_time[j]:\n            plat_needed += 1\n            i += 1\n            max_plat_needed = max(max_plat_needed, plat_needed)\n        else:\n            plat_needed -= 1\n            j += 1\n            \n    return max_plat_needed"}
{"instruction": "Write a function to convert camel case string to snake case string by using regex.", "output": "import re\n\ndef camel_to_snake(text):\n    # Replace each uppercase letter with an underscore followed by the letter and make all lowercase\n    result = re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', text)\n    # Convert the entire result to lowercase\n    return result.lower()\n\n# Test cases\nprint(camel_to_snake('GoogleAssistant'))  # Should print 'google_assistant'\nprint(camel_to_snake('ChromeCast'))      # Should print 'chrome_cast'\nprint(camel_to_snake('QuadCore'))        # Should print 'quad_core'"}
{"instruction": "Write a function to reverse words in a given string.", "output": "def reverse_words(s):\n    return ' '.join(reversed(s.split()))\n\n# Test cases\nprint(reverse_words(\"python program\")) # Expected output: \"program python\"\nprint(reverse_words(\"java language\"))  # Expected output: \"language java\"\nprint(reverse_words(\"indian man\"))     # Expected output: \"man indian\""}
{"instruction": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "output": "def change_date_format(date_string):\n    # Split the input string into year, month, and day components\n    ymd = date_string.split('-')\n    \n    # Swap the order of month and day for the output\n    return f\"{ymd[2]}-{ymd[1]}-{ymd[0]}\""}
{"instruction": "Write a python function to check whether every odd index contains odd numbers of a given list.", "output": "def odd_position(nums):\n    \"\"\"\n    Check if every odd index in the given list contains an odd number of elements.\n    \n    Parameters:\n    nums (list): A list of integers\n    \n    Returns:\n    bool: True if every odd index contains an odd number of elements, False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"}
{"instruction": "Write a function to find the largest subset where each pair is divisible.", "output": "from typing import List\n\ndef largest_subset(arr: List[int], n: int) -> int:\n    arr.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] % arr[j] == 0 and 1 + dp[j] > dp[i]:\n                dp[i] = 1 + dp[j]\n    return max(dp)"}
{"instruction": "Write a python function to find the sum of xor of all pairs of numbers in the given array.", "output": "from itertools import combinations_with_replacement\nfrom functools import reduce\n\ndef pair_OR_Sum(arr, n):\n    # Calculate XOR for each pair and store in a list\n    xor_list = [reduce(lambda x, y: x ^ y, comb) for comb in combinations_with_replacement(arr, 2)]\n    \n    # Sum up all XOR values from the list\n    result = sum(xor_list)\n    \n    return result"}
{"instruction": "Write a python function to access multiple elements of specified index from a given list.", "output": "def access_elements(lst, indices):\n    \"\"\"\n    Accesses and returns elements at specified indices in the given list.\n    \n    Args:\n    lst (list): The input list containing numeric values.\n    indices (list): A list of integers representing the indices for accessing elements.\n    \n    Returns:\n    list: A list containing elements from the input list based on the provided indices.\n    \"\"\"\n    return [lst[i] for i in indices]\n\n# Test cases to verify the correctness of the solution\nassert access_elements([2,3,8,4,7,9], [0,3,5]) == [2, 4, 9], \"Test case 1 failed\"\nassert access_elements([1, 2, 3, 4, 5], [1,2]) == [2,3], \"Test case 2 failed\"\nassert access_elements([1,0,2,3], [0,1]) == [1,0], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")"}
{"instruction": "Write a function to re-arrange the given tuples based on the given ordered list.", "output": "def re_arrange_tuples(tuples_list, order_list):\n    # Sort the tuples list based on the provided order list\n    sorted_tuples = sorted(tuples_list, key=lambda x: order_list.index(x[0]))\n    return sorted_tuples"}
{"instruction": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "output": "def check_smaller(tup1, tup2):\n    # Compare each element of tup2 with its corresponding element in tup1\n    for i in range(len(tup1)):\n        if tup2[i] >= tup1[i]:\n            return False\n    return True"}
{"instruction": "Write a function to calculate wind chill index.", "output": "def wind_chill(temp, speed):\n    return round((35.74 + 0.6215 * temp - 35.75 * (speed ** 0.16) + 0.4275 * temp * (speed ** 0.16)) - 11.37, 0)"}
{"instruction": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "output": "def replace_specialchar(s):\n    return s.replace(',',':').replace('.',':').replace(' ',':')\n\n# Test cases\nprint(replace_specialchar('Python language, Programming language.')) # Should output 'Python:language::Programming:language:'\nprint(replace_specialchar('a b c,d e f')) # Should output 'a:b:c:d:e:f'\nprint(replace_specialchar('ram reshma,ram rahim')) # Should output 'ram:reshma:ram:rahim'"}
{"instruction": "Write a python function to merge the first and last elements separately in a list of lists.", "output": "def merge(lst):\n    result = []\n    for sublist in lst:\n        temp_result = [sublist[0]] + sublist[1:] + [sublist[-1]]\n        result.append(temp_result)\n    return result"}
{"instruction": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "output": "def find_triplet_array(arr, target_sum, desired_sum):\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == desired_sum:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < desired_sum:\n                left += 1\n            else:\n                right -= 1\n    return None\n\n# Example usage:\nprint(find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22))  # Output: (4, 10, 8)\nprint(find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24))   # Output: (12, 3, 9)\nprint(find_triplet_array([1, 2, 3, 4, 5], 5, 9))       # Output: (1, 3, 5)"}
{"instruction": "Write a function to check whether the given month number contains 28 days or not.", "output": "def check_monthnum_number(month_num):\n    # Define the number of days in each month\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Return True if the month has 28 days and False otherwise\n    return days_in_month[month_num - 1] == 28"}
{"instruction": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "output": "def removals(A, k, n):\n    A.sort()\n    count = 0\n    \n    for i in range(len(A)):\n        if A[i] - A[0] > k:\n            break\n        elif A[len(A)-1] - A[i] > k:\n            count += 1\n        else:\n            continue\n    \n    return len(A) - count"}
{"instruction": "Write a function to round up a number to specific digits.", "output": "import math\n\ndef round_up(number, ndigits):\n    # Round up to the specified number of decimal places using the built-in ceil function.\n    return round(math.ceil(float(number) * 10**ndigits) / 10**ndigits, ndigits)"}
{"instruction": "Write a function to check for a number at the end of a string.", "output": "def end_num(str_val):\n    # Check if the last character in the string is a digit\n    return str_val[-1].isdigit()"}
{"instruction": "Write a function to remove duplicate words from a given string using collections module.", "output": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    return ' '.join(OrderedDict.fromkeys(s.split()))\n\n# Test cases\nprint(remove_duplicate(\"Python Exercises Practice Solution Exercises\")) # Expected output: \"Python Exercises Practice Solution\"\nprint(remove_duplicate(\"Python Exercises Practice Solution Python\"))   # Expected output: \"Python Exercises Practice Solution\"\nprint(remove_duplicate(\"Python Exercises Practice Solution Practice\")) # Expected output: \"Python Exercises Practice Solution\""}
{"instruction": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "output": "from typing import List\n\ndef max_sum_subseq(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    include = arr[0]\n    exclude = 0\n    \n    for i in range(1, len(arr)):\n        newExclude = max(include, exclude)\n        include = exclude + arr[i]\n        exclude = newExclude\n        \n    return max(include, exclude)\n\n# Test cases\nprint(max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]))  # Expected output: 26\nprint(max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]))  # Expected output: 28\nprint(max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]))  # Expected output: 44"}
{"instruction": "Write a function to check whether the given month number contains 30 days or not.", "output": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check if the specified month number has 30 days.\n    \n    Args:\n    - month_number (int): The month number to be checked\n    \n    Returns:\n    - bool: True if the month has 30 days, False otherwise\n    \"\"\"\n    return month_number in [4, 6, 9, 11]  # Months with 30 days"}
{"instruction": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "output": "def super_seq(str1, str2, len_str1, len_str2):\n    dp = [[0] * (len_str2 + 1) for _ in range(len_str1 + 1)]\n    \n    for i in range(1, len_str1 + 1):\n        for j in range(1, len_str2 + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                \n    return len_str1 + len_str2 - dp[len_str1][len_str2]\n\n# Test cases\nprint(super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7))  # Output: 9\nprint(super_seq(\"feek\", \"eke\", 4, 3))       # Output: 5\nprint(super_seq(\"PARRT\", \"RTA\", 5, 3))      # Output: 6"}
{"instruction": "Write a function to find the combinations of sums with tuples in the given tuple list.", "output": "from typing import List, Tuple\n\ndef find_combinations(tuples_list: List[Tuple[int]]) -> List[Tuple[int]]:\n    \"\"\"\n    Generate all unique combinations of two integers from the provided list of tuples.\n    \n    Args:\n    tuples_list (List[Tuple[int]]): A list of tuples containing integer elements.\n    \n    Returns:\n    List[Tuple[int]]: A list of unique combinations where each combination is a tuple of two integers.\n    \"\"\"\n    result = []\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            result.append((tuples_list[i][0] + tuples_list[j][0], tuples_list[i][1] + tuples_list[j][1]))\n    return result\n\n# Check function with provided data points\nprint(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])) # Expected output: [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nprint(find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)])) # Expected output: [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nprint(find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)])) # Expected output: [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"}
{"instruction": "Write a function to calculate the sum of all digits of the base to the specified power.", "output": "def power_base_sum(base, n):\n    return sum(int(digit) for digit in str(base**n))"}
{"instruction": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "output": "def replace_spaces(input_string):\n    # Replace spaces with %20 using Python's str.replace method\n    return input_string.replace(' ', '%20')\n\n# Test cases\nprint(replace_spaces(\"My Name is Dawood\"))  # Expected output: \"My%20Name%20is%20Dawood\"\nprint(replace_spaces(\"I am a Programmer\"))  # Expected output: \"I%20am%20a%20Programmer\"\nprint(replace_spaces(\"I love Coding\"))      # Expected output: \"I%20love%20Coding\""}
{"instruction": "Write a python function to find the kth element in an array containing odd elements first and then even elements.", "output": "def get_Number(arr_length, k):\n    # Check if k is valid for the given array length\n    if k < 1 or k > arr_length:\n        raise ValueError(\"k must be within the range of array length\")\n\n    total_odd_elements = int(arr_length / 2)\n    total_even_elements = arr_length - total_odd_elements\n\n    # Determine which part of the array the k-th element belongs to\n    if k <= total_odd_elements:\n        # The k-th element is an odd number\n        return 2 * (k - 1) + 1\n    else:\n        # The k-th element is an even number\n        return 2 * ((k - 1) % total_odd_elements)\n\n# Test cases\nprint(get_Number(8, 5))  # Expected output: 2\nprint(get_Number(7, 2))  # Expected output: 3\nprint(get_Number(5, 2))  # Expected output: 3"}
{"instruction": "Write a function to find the product of it\u2019s kth index in the given tuples.", "output": "def find_k_product(tuples_list, k_index):\n    result = 1\n    for tuple_ in tuples_list:\n        if len(tuple_) <= k_index:\n            break\n        result *= tuple_[k_index]\n    return result"}
{"instruction": "Write a python function to find sum of prime numbers between 1 to n.", "output": "def sum_Of_Primes(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    total_sum = 0\n    for num in range(2, n + 1):\n        if is_prime(num):\n            total_sum += num\n    return total_sum"}
{"instruction": "Write a function to remove all the words with k length in the given string.", "output": "def remove_length(text, k):\n    \"\"\"\n    Removes all words from the input text that have exactly k characters.\n    \n    Parameters:\n        text (str): The input string containing multiple words.\n        k (int): The exact number of characters each word must have for it to be removed.\n        \n    Returns:\n        str: A new string with all words of length k removed.\n    \"\"\"\n    # Splitting the text into individual words\n    words = text.split()\n    # Filtering out words whose length matches k and removing them from the list\n    filtered_words = [word for word in words if len(word) != k]\n    # Joining the remaining words back into a single string\n    result_text = ' '.join(filtered_words)\n    return result_text\n\n# Example check function to verify the correctness of the solution\ndef check_solution():\n    assert remove_length('The person is most value tet', 3) == 'person is most value'\n    assert remove_length('If you told me about this ok', 4) == 'If you me about ok'\n    assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n    print(\"All test cases passed successfully.\")\n\ncheck_solution()"}
{"instruction": "Write a function to check if the given tuple contains all valid values or not.", "output": "def check_valid(test_tuple):\n    # Check each value in the tuple and count the number of 'False' values\n    false_count = test_tuple.count(False)\n    \n    # If there is more than one 'False', it means there's at least one invalid value\n    if false_count > 0:\n        return False\n    else:\n        return True"}
{"instruction": "Write a function to find the lateral surface area of a cone.", "output": "import math\n\ndef lateralsurface_cone(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n    \n    Parameters:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n    \n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    slant_height = math.sqrt(height**2 + radius**2)\n    return math.pi * radius * slant_height"}
{"instruction": "Write a python function to count the number of digits in factorial of a given number.", "output": "def find_Digits(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = str(factorial(n))\n    digit_count = len(result)\n    return digit_count\n\n# Test cases\nprint(find_Digits(7))  # Output: 4\nprint(find_Digits(5))  # Output: 3\nprint(find_Digits(4))  # Output: 2"}
{"instruction": "Write a function that gives profit amount if the given amount has profit else return none.", "output": "def profit_amount(sale_price, cost_price):\n    # Calculate profit amount and check if it is non-zero.\n    profit = sale_price - cost_price\n    # Return the profit amount if non-zero, otherwise return None.\n    return profit if profit > 0 else None"}
{"instruction": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "output": "from typing import List\n\ndef min_difference(tuples_list: List[tuple]) -> int:\n    \"\"\"\n    Finds the smallest absolute difference between any two consecutive elements in each pair of the given list of tuples.\n    \n    :param tuples_list: A list of tuples where each tuple contains at least two integers.\n    :return: The smallest absolute difference between two consecutive elements in each tuple pair as an integer.\n    \"\"\"\n    min_diff = float('inf')\n    for t in tuples_list:\n        # Calculate differences and keep track of the minimum difference found\n        current_min_diff = abs(t[0] - t[1])\n        if current_min_diff < min_diff:\n            min_diff = current_min_diff\n    return min_diff"}
{"instruction": "Write a function to count number of unique lists within a list.", "output": "from collections import defaultdict\n\ndef unique_sublists(lst):\n    # Create a dictionary to store sublists and their counts\n    sublist_counts = defaultdict(int)\n    \n    # Iterate through each sublist in the input list\n    for lst_to_process in lst:\n        # Convert the sublist to a tuple and increment its count in the dictionary\n        sublist_counts[tuple(sorted(lst_to_process))] += 1\n    \n    # Create a result dictionary with tuples as keys and their counts as values\n    result_dict = dict(sublist_counts.items())\n    \n    return result_dict"}
{"instruction": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "output": "def road_rd(s):\n    return s.replace('Road', 'Rd.')"}
{"instruction": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "output": "def tuple_to_dict(tup):\n    d = {}\n    for i in range(0, len(tup), 2):\n        if i + 1 < len(tup):\n            d[tup[i]] = tup[i + 1]\n    return d"}
{"instruction": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "output": "from collections import Counter\n\ndef find_longest_conseq_subseq(arr, n):\n    # Count all the occurrences of each number\n    count = Counter(arr)\n    \n    max_length = 0\n    \n    for num in range(n + 1):  # Iterate through numbers from 0 to n inclusive\n        if not count[num]:  # If the current number is not present\n            continue\n        \n        # Length of the current sequence starting at num\n        seq_len = 1\n        while count[num + 1]:\n            seq_len += 1\n            num += 1\n        \n        max_length = max(max_length, seq_len)\n    \n    return max_length"}
{"instruction": "Write a function to find a pair with the highest product from a given array of integers.", "output": "def max_product(arr):\n    # Find all unique pairs and their products\n    unique_pairs = [(arr[i], arr[j]) for i in range(len(arr)) for j in range(i+1, len(arr))]\n    \n    # Sort the list of pairs based on the sum of their elements\n    unique_pairs.sort(key=lambda x: x[0] + x[1])\n    \n    # Return the pair with the largest product\n    return max(unique_pairs, key=lambda x: x[0]*x[1])\n\n# Example usage:\nprint(max_product([1, 2, 3, 4, 7, 0, 8, 4]))  # Output should be (7, 8)"}
{"instruction": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "output": "def odd_Num_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through the first n odd numbers\n    for i in range(1, 2*n, 2):\n        # Calculate the fourth power and add it to the sum\n        sum += i**4\n    \n    # Return the total sum\n    return sum"}
{"instruction": "Write a python function to find lcm of two positive integers.", "output": "def lcm(x, y):\n    \"\"\"Return the least common multiple of x and y.\"\"\"\n    def gcd(a, b):\n        \"\"\"Return greatest common divisor of a and b using Euclid's algorithm.\"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n    \n    # Calculate the product of x and y\n    product = x * y\n    \n    # Divide the product by their greatest common divisor (gcd)\n    result = product // gcd(x, y)\n    \n    return result"}
{"instruction": "Write a function to extract values between quotation marks of the given string by using regex.", "output": "import re\n\ndef extract_quotation(input_string):\n    # Define the pattern to match text within double quotes.\n    pattern = r'\"(.*?)\"'\n    \n    # Use regex to find all matches in the input string.\n    matches = re.findall(pattern, input_string)\n    \n    return matches"}
{"instruction": "Write a function to sort a list in a dictionary.", "output": "def sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}"}
{"instruction": "Write a python function to find sum of products of all possible subarrays.", "output": "def sum_Of_Subarray_Prod(nums, n):\n    total = 0\n    for i in range(n):\n        product = 1\n        for j in range(i+1, n+1):\n            product *= nums[j-1]\n            total += product\n    return total"}
{"instruction": "Write a python function to get the last element of each sublist.", "output": "def extract(lst):\n    return [sublist[-1] for sublist in lst]\n\n# Test cases\nprint(extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]))  # Output: [3, 5, 9]\nprint(extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]))  # Output: ['z', 'm', 'b', 'v']\nprint(extract([[1, 2, 3], [4, 5]]))  # Output: [3, 5]"}
{"instruction": "Write a function to print n-times a list using map function.", "output": "def ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))"}
{"instruction": "Write a function to find the sum of first even and odd number of a given list.", "output": "from typing import List\n\ndef sum_even_odd(nums: List[int]) -> int:\n    return sum(x for x in nums if x % 2 == 0), sum(x for x in nums if x % 2 != 0)"}
{"instruction": "Write a function to validate a gregorian date.", "output": "def check_date(month, day, year):\n    try:\n        import datetime\n        datetime.datetime(year, month, day)\n        return True\n    except ValueError:\n        return False"}
{"instruction": "Write a function to add a dictionary to the tuple.", "output": "def add_dict_to_tuple(tup, new_dict):\n    # Convert the original tuple into a list for modification\n    converted_list = list(tup)\n    # Append the new dictionary as a key-value pair after the last element of the tuple\n    converted_list.append(new_dict)\n    # Return the modified tuple with the added dictionary\n    return tuple(converted_list)\n\n# Test cases to verify the correctness of the function\nprint(add_dict_to_tuple((4, 5, 6), {\"MSAM\": 1, \"is\": 2, \"best\": 3}))  # Expected output: (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nprint(add_dict_to_tuple((1, 2, 3), {\"UTS\": 2, \"is\": 3, \"Worst\": 4}))  # Expected output: (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nprint(add_dict_to_tuple((8, 9, 10), {\"POS\": 3, \"is\": 4, \"Okay\": 5}))  # Expected output: (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"}
{"instruction": "Write a function that matches a string that has an a followed by zero or one 'b'.", "output": "def text_match_zero_one(text):\n    # Check if the first character is 'a' and optionally followed by 'b'\n    return 'Found a match!' if text.startswith('a') and (text.count('b', 0, 1) == 0 or text.count('b', 0, 1) == 1) else 'Not matched!'"}
{"instruction": "Write a function to sort the given array by using heap sort.", "output": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < n and arr[i] < arr[left]:\n        largest = left\n        \n    if right < n and arr[largest] < arr[right]:\n        largest = right\n        \n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    \n    for i in range(n//2 - 1, -1, -1):\n        heapify(arr, n, i)\n        \n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    \n    return arr\n\n# Test Cases\nprint(heap_sort([12, 2, 4, 5, 2, 3])) # Expected output: [2, 2, 3, 4, 5, 12]\nprint(heap_sort([32, 14, 5, 6, 7, 19])) # Expected output: [5, 6, 7, 14, 19, 32]\nprint(heap_sort([21, 15, 29, 78, 65])) # Expected output: [15, 21, 29, 65, 78]"}
{"instruction": "Write a python function to find the minimum sum of absolute differences of two arrays.", "output": "from typing import List\nimport math\n\ndef find_Min_Sum(arr1: List[int], arr2: List[int], n: int) -> int:\n    # Initialize variables to store cumulative sums and the maximum difference\n    cum_sum_1 = [0]\n    cum_sum_2 = [0]\n    \n    # Calculate cumulative sums for both arrays\n    for i in range(n):\n        cum_sum_1.append(cum_sum_1[-1] + arr1[i])\n        cum_sum_2.append(cum_sum_2[-1] + arr2[i])\n\n    min_diff = float('inf')\n    \n    # Iterate through the arrays to calculate the minimum sum of absolute differences\n    for i in range(n):\n        diff = abs(cum_sum_1[i+1] - cum_sum_2[i+1]) - (cum_sum_1[n] - cum_sum_1[i+1]) + \\\n              (cum_sum_2[n] - cum_sum_2[i+1])\n        \n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff"}
{"instruction": "Write a function to calculate the height of the given binary tree.", "output": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef max_height(node):\n    if node is None:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        return max(left_height, right_height) + 1\n\n# Test cases\nroot = TreeNode(1,\n                TreeNode(2,\n                         TreeNode(4),\n                         TreeNode(5)),\n                TreeNode(3))\nprint(max_height(root))  # Expected output: 3\n\nroot1 = TreeNode(1,\n                 TreeNode(2,\n                          TreeNode(4,\n                                   TreeNode(8)),\n                          TreeNode(5)),\n                 TreeNode(3))\nprint(max_height(root1))  # Expected output: 5\n\nroot2 = TreeNode(1,\n                 TreeNode(2,\n                          TreeNode(4,\n                                   TreeNode(8)),\n                          TreeNode(5)),\n                 TreeNode(3))\nprint(max_height(root2))  # Expected output: 4"}
{"instruction": "Write a python function to find minimum possible value for the given periodic function.", "output": "import math\n\ndef floor_Min(a, b, c):\n    # Find the maximum number from the three inputs\n    max_num = max(a, b, c)\n    \n    # Return half of the difference between the maximum and second largest numbers\n    return int((max_num - max(num for num in [a,b,c] if num != max_num)) / 2)\n\n# Test cases\nprint(floor_Min(10, 20, 30))  # Expected output: 15\nprint(floor_Min(1, 2, 1))     # Expected output: 0\nprint(floor_Min(11, 10, 9))   # Expected output: 9"}
{"instruction": "Write a function to check if the given tuple contains only k elements.", "output": "def check_tuples(input_tuple, required_elements):\n    # Check if the input_tuple has exactly as many unique elements as required_elements\n    if len(set(input_tuple)) == len(required_elements):\n        return True\n    else:\n        return False"}
{"instruction": "Write a function to count the number of unique lists within a list.", "output": "from collections import defaultdict\n\ndef unique_sublists(lst):\n    # Initialize a dictionary to store sublists as keys and their occurrence counts as values\n    result = defaultdict(int)\n    \n    for sublist in lst:\n        # Convert the sublist to a tuple so it can be used as a key in the dictionary\n        tuple_list = tuple(sublist)\n        \n        # Increment the count of the current tuple\n        result[tuple_list] += 1\n    \n    return dict(result)"}
{"instruction": "Write a function to get dictionary keys as a list.", "output": "def get_key(my_dict):\n    return list(my_dict.keys())"}
{"instruction": "Write a function to check if the given tuple has any none value or not.", "output": "def check_none(test_tuple):\n    # Iterate through each element in the tuple\n    for item in test_tuple:\n        # If an 'None' is found, return True\n        if item is None:\n            return True\n    # If no 'None' is found, return False\n    return False"}
{"instruction": "Write a function that matches a string that has an a followed by zero or more b's.", "output": "import re\n\ndef text_match(text):\n    \"\"\"\n    This function checks if the input text contains at least one 'a' character followed by zero or more 'b'\n    characters using regular expressions.\n    \n    Args:\n        text (str): The text to be checked.\n        \n    Returns:\n        str: \"Found a match!\" if the pattern is found in the text, otherwise \"Not matched!\".\n    \"\"\"\n    # Define the regex pattern to match 'a' followed by zero or more 'b's\n    pattern = r'a(b*)'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match(\"ac\"))   # Expected output: Found a match!\nprint(text_match(\"dc\"))   # Expected output: Not matched!\nprint(text_match(\"abba\")) # Expected output: Found a match!"}
{"instruction": "Write a function that matches a string that has an a followed by three 'b'.", "output": "def text_match_three(text):\n    if text.startswith('a') and len(text) >= 4:\n        for i in range(1, 4):\n            if text[i] == 'b':\n                return ('Found a match!')\n    return ('Not matched!')\n\n# Test cases\nprint(text_match_three(\"ac\")) # Expected output: 'Not matched!'\nprint(text_match_three(\"dc\")) # Expected output: 'Not matched!'\nprint(text_match_three(\"abbbba\")) # Expected output: 'Found a match!'"}
{"instruction": "Write a function that matches a word containing 'z', not at the start or end of the word.", "output": "def text_match_wordz_middle(text):\n    # Check if the string contains 'z' and is neither at the start nor at the end\n    return ('Found a match!' if 'z' in text[1:-1] else 'Not matched!')\n\n# Test cases to verify the correctness of the function\nprint(text_match_wordz_middle(\"pythonzabc.\"))   # Expected output: Found a match!\nprint(text_match_wordz_middle(\"xyzabc.\"))       # Expected output: Found a match!\nprint(text_match_wordz_middle(\"  lang  \"))      # Expected output: Not matched!"}
{"instruction": "Write a python function to find the largest triangle that can be inscribed in the semicircle.", "output": "def triangle_area(a):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with radius 'a'.\n    \n    Parameters:\n    a (float): The radius of the semicircle.\n    \n    Returns:\n    float: The area of the largest possible inscribed triangle.\n    \"\"\"\n    # The base of the largest inscribed triangle is twice the radius of the semicircle.\n    # The height is equal to the radius of the semicircle.\n    b = 2 * a\n    h = a\n    \n    # Area formula for a triangle: 1/2 * base * height\n    area = 0.5 * b * h\n    return area"}
{"instruction": "Write a function to count those characters which have vowels as their neighbors in the given string.", "output": "def count_vowels(s):\n    # Initialize a counter for vowel counts and set up variables\n    vowel_count = 0\n    start = -1\n    \n    # Iterate through each character in the string\n    for i, char in enumerate(s):\n        if char.lower() == 'a' or char.lower() == 'e' or char.lower() == 'i' or char.lower() == 'o' or char.lower() == 'u':\n            # Adjust index based on whether it's the first occurrence of an adjacent vowel\n            if start == -1:\n                start = i\n            \n            # Increment the vowel count and adjust the start variable accordingly\n            vowel_count += 1\n            if start != -1:\n                start += 1\n    \n    return vowel_count\n\n# Test cases to verify the correctness of the function\nprint(count_vowels('bestinstareels'))  # Expected output: 7\nprint(count_vowels('partofthejourneyistheend'))  # Expected output: 12\nprint(count_vowels('amazonprime'))  # Expected output: 5"}
{"instruction": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "output": "def sum_nums(a, b, min_range, max_range):\n    total = a + b\n    if min_range <= total <= max_range:\n        return 20\n    else:\n        return total"}
{"instruction": "Write a function to find the perimeter of a rombus.", "output": "def rombus_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a rhombus.\n    \n    Parameters:\n    side_length (int): The length of one side of the rhombus.\n    \n    Returns:\n    int: The perimeter of the rhombus.\n    \"\"\"\n    return 4 * side_length\n\n# Check function with provided data points\nassert rombus_perimeter(10) == 40, \"Test case 1 failed\"\nassert rombus_perimeter(5) == 20, \"Test case 2 failed\"\nassert rombus_perimeter(4) == 16, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")"}
{"instruction": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "output": "import re\n\ndef text_match(text):\n    pattern = r\"a.*?b$\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n\n# Test cases to verify the correctness of the solution\nprint(text_match(\"aabbbbd\"))   # Expected output: Not matched!\nprint(text_match(\"aabAbbbc\"))  # Expected output: Not matched!\nprint(text_match(\"accddbbjjjb\")) # Expected output: Found a match!"}
{"instruction": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "output": "def sample_nam(names):\n    # Remove names starting with a lowercase letter and calculate their lengths\n    return sum(len(name) for name in names if not name[0].islower())"}
{"instruction": "Write a python function to check whether every even index contains even numbers of a given list.", "output": "def even_position(arr):\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 != 0:\n            return False\n    return True"}
{"instruction": "Write a python function to check whether the given two arrays are equal or not.", "output": "def are_Equal(arr1, arr2, n1, n2):\n    # Check if both arrays have the same length and each element is also equal in count for comparison\n    return sorted(arr1) == sorted(arr2)\n\n# Test cases\nprint(are_Equal([1,2,3],[3,2,1],3,3))  # Expected output: True\nprint(are_Equal([1,1,1],[2,2,2],3,3))  # Expected output: False\nprint(are_Equal([8,9],[4,5,6],2,3))    # Expected output: False"}
{"instruction": "Write a python function to check whether the given number can be represented by sum of two squares or not.", "output": "import math\n\ndef sum_Square(n):\n    for i in range(int(math.sqrt(n)) + 1):\n        j = int(math.sqrt(n - i**2))\n        if i*i + j*j == n:\n            return True\n    return False"}
{"instruction": "Write a function to multiply consecutive numbers of a given list.", "output": "def mul_consecutive_nums(lst):\n    return [lst[i] * lst[i+1] if i < len(lst) - 1 else None for i in range(len(lst)-1)]"}
{"instruction": "Write a python function to find the index of an extra element present in one sorted array.", "output": "def find_Extra(arr1, arr2, n):\n    i = 0\n    for j in range(n):\n        if arr1[j] != arr2[i]:\n            break\n        i += 1\n    return i"}
{"instruction": "Write a function to display sign of the chinese zodiac for given year.", "output": "def chinese_zodiac(year):\n    signs = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep']\n    return signs[(year - 1) % 12]"}
{"instruction": "Write a function to remove the nested record from the given tuple.", "output": "def remove_nested(tup):\n    # Iterate over tuples within the given tuple.\n    for i in tup:\n        if isinstance(i, tuple):\n            # If an inner tuple is found, remove it.\n            tup = list(filter(lambda x: not isinstance(x, tuple), tup))\n            break\n    else:\n        # If no nested tuples were found, return the original tuple unchanged.\n        return tup\n    # Convert the filtered tuple back into a tuple and return it.\n    return tuple(tup)\n\n# Test cases to verify the correctness of the solution.\nprint(remove_nested((1, 5, 7, (4, 6), 10)))  # Expected output: (1, 5, 7, 10)\nprint(remove_nested((2, 6, 8, (5, 7), 11)))  # Expected output: (2, 6, 8, 11)\nprint(remove_nested((3, 7, 9, (6, 8), 12)))  # Expected output: (3, 7, 9, 12)"}
{"instruction": "Write a function to find the fixed point in the given array.", "output": "def find_fixed_point(arr):\n    for i in range(len(arr)):\n        if arr[i] == i:\n            return i\n    return -1\n\n# Test cases\nprint(find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100])) # Expected output: 3\nprint(find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8])) # Expected output: -1\nprint(find_fixed_point([0, 2, 5, 8, 17])) # Expected output: 0"}
{"instruction": "Write a function to create a new tuple from the given string and list.", "output": "def new_tuple(items, value):\n    # Convert items to a tuple if not already a tuple\n    items = tuple(items) if not isinstance(items, tuple) else items\n    # Combine items with value into a single tuple\n    result = (*items, value)\n    return result"}
{"instruction": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "output": "from collections import Counter\n\n# Function to find anagrams using lambda\nanagram_lambda = lambda strs, target_str: [strs[i] for i in range(len(strs)) if Counter(strs[i]) == Counter(target_str)]"}
{"instruction": "Write a function to check if the given string starts with a substring using regex.", "output": "import re\n\ndef check_substring(input_string, search_term):\n    # Use regular expression to find if the input_string starts with the search_term\n    pattern = f\"^{re.escape(search_term)}\"\n    match = re.search(pattern, input_string)\n    \n    # If match is found, it means the input_string starts with the search_term\n    if match:\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'\n\n# Test cases\nprint(check_substring(\"dreams for dreams makes life fun\", \"makes\"))\nprint(check_substring(\"Hi there how are you Hi alex\", \"Hi\"))\nprint(check_substring(\"Its been a long day\", \"been\"))"}
{"instruction": "Write a function to check if the given expression is balanced or not.", "output": "def check_expression(expression):\n    \"\"\"\n    Check if the given string expression has balanced brackets.\n    \n    Args:\n        expression (str): The string expression to be checked for balance.\n        \n    Returns:\n        bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if stack == [] or bracket_map[char] != stack.pop():\n                return False\n    return len(stack) == 0\n\n# Test cases\nprint(check_expression(\"{()}[{}]\"))  # Expected output: True\nprint(check_expression(\"{()}[{}][]({})\"))  # Expected output: True\nprint(check_expression(\"{()[]}\") )   # Expected output: True\nprint(check_expression(\")(\"))         # Expected output: False\nprint(check_expression(\"[{{}}][{]}\") )  # Expected output: False"}
{"instruction": "Write a function where a string will start with a specific number.", "output": "def match_num(num_str):\n    if num_str.startswith(\"5\"):\n        return True\n    else:\n        return False"}
{"instruction": "Write a python function to find the length of the last word in a given string.", "output": "def length_Of_Last_Word(s):\n    # Splitting the string at spaces and finding the last element\n    words = s.split()\n    if not words:\n        return 0\n    else:\n        return len(words[-1])"}
{"instruction": "Write a python function to check for odd parity of a given number.", "output": "def check_Odd_Parity(num):\n    # Check if the sum of all digits in the binary representation of the number is odd.\n    bin_num = bin(num)[2:]  # Convert to binary and remove '0b' prefix\n    count_odd = 0\n    for digit in bin_num:\n        if int(digit) % 2 != 0:\n            count_odd += 1\n    return count_odd % 2 == 1"}
{"instruction": "Write a function to concatenate the given two tuples to a nested tuple.", "output": "def concatenate_nested(tuple1, tuple2):\n    # Concatenate the given two tuples and create a new nested tuple\n    return (tuple1 + tuple2)\n\n# Test cases\nprint(concatenate_nested((3, 4), (5, 6)))  # Expected output: (3, 4, 5, 6)\nprint(concatenate_nested((1, 2), (3, 4)))  # Expected output: (1, 2, 3, 4)\nprint(concatenate_nested((4, 5), (6, 8)))  # Expected output: (4, 5, 6, 8)"}
{"instruction": "Write a function to find the perimeter of a rectangle.", "output": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)"}
{"instruction": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.", "output": "def sum_Range_list(nums, start_index, end_index):\n    total = 0\n    for i in range(start_index, end_index + 1):\n        total += nums[i]\n    return total"}
{"instruction": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "output": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    # Initialize a min-heap with the first element as 1 (super ugly number)\n    min_heap = [1]\n    seen = set()\n    seen.add(1)\n    \n    for _ in range(n - 1):\n        current_min = heapq.heappop(min_heap)  # Get the smallest element\n        \n        # Generate new ugly numbers by multiplying current_min with each prime and checking if it's already seen\n        for prime in primes:\n            new_num = current_min * prime\n            \n            if new_num not in seen:\n                heapq.heappush(min_heap, new_num)\n                seen.add(new_num)\n                \n    return min_heap[0]\n\n# Test cases\nprint(nth_super_ugly_number(12, [2, 7, 13, 19]))  # Output should be 32\nprint(nth_super_ugly_number(10, [2, 7, 13, 19]))  # Output should be 26\nprint(nth_super_ugly_number(100, [2, 7, 13, 19]))  # Output should be 5408"}
{"instruction": "Write a function to find the number which occurs for odd number of times in the given array.", "output": "def get_odd_occurence(arr, n):\n    count = {}\n    \n    # Count occurrences of each element in the array\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Find and return the element with an odd occurrence\n    for key, value in count.items():\n        if value % 2 != 0:\n            return key\n\n# Test the function\nprint(get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13))  # Output: 5\nprint(get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7))                  # Output: 3\nprint(get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7))                   # Output: 5"}
{"instruction": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "output": "import re\n\ndef replace_spaces(text):\n    # Replace all whitespace characters with underscores and vice versa.\n    replaced_text = re.sub(r'\\s', '_', text) if re.search(r'\\s', text) else text\n    return replaced_text.replace('_', ' ').replace(' ', '_')"}
{"instruction": "Write a function to check a decimal with a precision of 2.", "output": "import re\n\ndef is_decimal(num_str):\n    \"\"\"\n    Check if the given string represents a valid decimal number with exactly two digits after the decimal point.\n    \n    Parameters:\n    num_str (str): The string to be checked.\n    \n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    # Regular expression to match a decimal with exactly two digits after the decimal point\n    pattern = r'^\\d+(\\.\\d{2})?$'\n    return bool(re.match(pattern, num_str))\n\n# Test cases\nprint(is_decimal('123.11'))  # Expected output: True\nprint(is_decimal('e666.86'))  # Expected output: False\nprint(is_decimal('3.124587'))  # Expected output: False"}
{"instruction": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "output": "def matrix_to_list(matrix):\n    # Flatten the tuple matrix and convert it into a single string separated by commas\n    flat_tuple = [item for sublist in matrix for item in sublist]\n    result = ','.join(map(str, flat_tuple))\n    return result"}
{"instruction": "Write a function to find the previous palindrome of a specified number.", "output": "def previous_palindrome(num):\n    while True:\n        num -= 1\n        if str(num) == str(num)[::-1]:\n            return num\n\n# Test the function with provided data points\nassert previous_palindrome(99) == 88\nassert previous_palindrome(1221) == 1111\nassert previous_palindrome(120) == 111"}
{"instruction": "Write a function to remove all whitespaces from a string.", "output": "def remove_all_spaces(s):\n    return ''.join(s.split())\n\n# Test cases\nprint(remove_all_spaces('python  program'))  # Output: 'pythonprogram'\nprint(remove_all_spaces('python   programming    language'))  # Output: 'pythonprogramminglanguage'\nprint(remove_all_spaces('python                     program'))  # Output: 'pythonprogram'"}
{"instruction": "Write a python function to check whether the product of numbers is even or not.", "output": "def is_Product_Even(numbers_list, divisor):\n    \"\"\"\n    This function checks if the product of all elements in a list is divisible by a given number.\n    \n    Parameters:\n    - numbers_list: List[int] -- A list of integers whose product's divisibility is to be checked.\n    - divisor: int -- The number to check against the product for divisibility.\n    \n    Returns:\n    bool -- True if the product of all elements in the list is divisible by the given number; otherwise, False.\n    \"\"\"\n    product = 1\n    for num in numbers_list:\n        product *= num\n    \n    # Check if the product modulo the divisor equals zero\n    return product % divisor == 0\n\n# Test Cases\nassert is_Product_Even([1,2,3], 3) == True\nassert is_Product_Even([1,2,1,4], 4) == True\nassert is_Product_Even([1,1], 2) == False\nprint(\"All test cases passed.\")"}
{"instruction": "Write a function to rotate a given list by specified number of items to the right direction.", "output": "def rotate_right(lst, num_items, n=0):\n    \"\"\"\n    Rotates the elements of lst by 'num_items' positions to the right.\n    \n    Parameters:\n    lst (list): The list to be rotated.\n    num_items (int): Number of positions to rotate to the right.\n    n (int): Optional argument for debugging purposes; currently unused.\n    \n    Returns:\n    list: The rotated list.\n    \"\"\"\n    return lst[-num_items:] + lst[:-num_items]\n\n# Test cases\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)) # Expected output: [8, 9, 10, 1, 2, 3, 4, 5]\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)) # Expected output: [9, 10, 1, 2, 3, 4, 5, 6]\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)) # Expected output: [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"}
{"instruction": "Write a function to count the pairs of reverse strings in the given string list.", "output": "def count_reverse_pairs(string_list):\n    # Initialize the count of reverse pairs\n    pair_count = 0\n    \n    # Iterate through each unique combination of two strings in the list\n    for i in range(len(string_list)):\n        for j in range(i + 1, len(string_list)):\n            # Check if both strings and their reverse form an exact match\n            if string_list[i] == string_list[j][::-1] and string_list[j] == string_list[i][::-1]:\n                pair_count += 1\n                \n    return str(pair_count)"}
{"instruction": "Write a function to get a lucid number smaller than or equal to n.", "output": "def get_lucid(n):\n    result = []\n    i = 2\n    while len(result) < n:\n        if all(i % x != 0 for x in result): \n            result.append(i)\n        i += 1\n    return result[:n]\n\n# Test cases\nprint(get_lucid(10))   # Should print [1, 2, 3, 5, 7]\nprint(get_lucid(25))   # Should print [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nprint(get_lucid(45))   # Should print [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"}
{"instruction": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "output": "import heapq\n\ndef maximum_product(nums):\n    # Find the three largest and two smallest elements in O(n) time.\n    three_largest = heapq.nlargest(3, nums)\n    two_smallest = heapq.nsmallest(2, nums)\n    \n    # Calculate both possible products:\n    # 1. Product of the three largest elements.\n    # 2. Product of the two smallest elements (which could be negative) multiplied with the largest element.\n    return max(three_largest[0] * three_largest[1] * three_largest[2], \n               two_smallest[0] * two_smallest[1] * three_largest[0])"}
{"instruction": "Write a python function to count numeric values in a given string.", "output": "def number_ctr(s):\n    count = sum(c.isdigit() for c in s)\n    return count"}
{"instruction": "Write a function to return true if the password is valid.", "output": "import re\n\ndef pass_validity(password):\n    # Check if password length is at least 8 characters\n    if len(password) < 8:\n        return False\n    \n    # Regular expression for checking password complexity requirements\n    has_uppercase = bool(re.search(r'[A-Z]', password))\n    has_lowercase = bool(re.search(r'[a-z]', password))\n    has_digit = bool(re.search(r'\\d', password))\n    \n    # Check for specific pattern\n    contains_special_chars = bool(re.search(r'[@#$%^&+=!~\\'(),.?\\\":;<>|{}[\\]]', password))\n    \n    # Password should have at least one uppercase letter, one lowercase letter, one digit and one special character.\n    if not (has_uppercase and has_lowercase and has_digit and contains_special_chars):\n        return False\n    \n    return True"}
{"instruction": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "output": "def max_sum_list(lists):\n    # Calculate the sum for each sublist and return the one with the maximum sum\n    return max(lists, key=sum)"}
{"instruction": "Write a function to caluclate the area of a tetrahedron.", "output": "import math\n\ndef area_tetrahedron(sidelength):\n    # Calculate the surface area of a regular tetrahedron given one side length.\n    return math.sqrt(3) * pow(sidelength, 2)"}
{"instruction": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "output": "def Check_Solution(a, b, c):\n    # Calculate the discriminant\n    D = b**2 - 4*a*c\n    \n    if D == 0:\n        # If the discriminant is zero, there's exactly one real root\n        return \"Yes\" if abs(b/a) < 1 else \"No\"\n    elif D > 0:\n        # If the discriminant is positive, there are two distinct real roots\n        x1 = (-b + D**(1/2)) / (2*a)\n        x2 = (-b - D**(1/2)) / (2*a)\n        \n        if abs(x1) < 1 and abs(x2) >= 1 or abs(x1) >= 1 and abs(x2) < 1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        # If the discriminant is negative, there are no real roots\n        return \"No\"\n\n# Test Cases\nprint(Check_Solution(2, 0, -1))  # Expected output: Yes\nprint(Check_Solution(1, -5, 6))  # Expected output: No\nprint(Check_Solution(2, 0, 2))   # Expected output: Yes"}
{"instruction": "Write a python function to find the minimum number of swaps required to convert one binary string to another.", "output": "def min_Swaps(s1, s2):\n    diff_count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            diff_count += 1\n    # If difference is not even and less than length, it's not possible\n    if diff_count % 2 != 0 or diff_count > len(s1):\n        return \"Not Possible\"\n    else:\n        return diff_count // 2\n\n# Test cases\nprint(min_Swaps(\"1101\", \"1110\"))  # Output: 1\nprint(min_Swaps(\"1111\", \"0100\"))  # Output: Not Possible\nprint(min_Swaps(\"1110000\", \"0001101\"))  # Output: 3"}
{"instruction": "Write a function to check whether the given key is present in the dictionary or not.", "output": "def is_key_present(dictionary, key):\n    return key in dictionary"}
{"instruction": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "output": "from collections import Counter\n\ndef second_frequent(sequence):\n    # Count occurrences of each string\n    counts = Counter(sequence)\n    \n    # Find the highest and second-highest frequencies\n    max_freq = max(counts.values())\n    second_max_freq = max([count for count in counts.values() if count != max_freq])\n    \n    # Return the first occurrence with the second-highest frequency\n    for item in sequence:\n        if counts[item] == second_max_freq:\n            return item"}
{"instruction": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "output": "def maximum_value(records):\n    max_values = []\n    for key, value in records:\n        if not isinstance(value, list) or len(value) == 0:\n            continue\n        max_val = max(value)\n        max_values.append((key, max_val))\n    return max_values"}
{"instruction": "Write a python function to find the last position of an element in a sorted array.", "output": "def last(arr, x, n):\n    left, right = 0, n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            # If x is found at index mid and it's the last occurrence\n            if mid == len(arr) - 1 or arr[mid + 1] != x:\n                return mid\n            else:\n                left = mid + 1\n\n    return -1  # Return -1 if x is not present in the array\n\n# Test cases\nprint(last([1,2,3],1,3))  # Expected output: 0\nprint(last([1,1,1,2,3,4],1,6))  # Expected output: 2\nprint(last([2,3,2,3,6,8,9],3,8))  # Expected output: 3"}
{"instruction": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "output": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if all(int(digit) != 0 and int(num) % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"instruction": "Write a function to find the largest possible value of k such that k modulo x is y.", "output": "def find_max_val(k, x, y):\n    # Calculate the maximum value k such that k % x = y\n    max_value = ((k // x) * x) + y\n    return max_value\n\n# Test cases\nprint(find_max_val(15, 10, 5))  # Output: 15\nprint(find_max_val(187, 10, 5))  # Output: 185\nprint(find_max_val(16, 11, 1))   # Output: 12"}
{"instruction": "Write a function to check whether the given month name contains 31 days or not.", "output": "def check_monthnumb(month_name):\n    \"\"\"\n    Check if the provided month name has 31 days.\n    \n    Args:\n        month_name (str): The name of the month.\n        \n    Returns:\n        bool: True if the month has 31 days, False otherwise.\n    \"\"\"\n    months = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\",\n              \"December\"]\n    return month_name in months"}
