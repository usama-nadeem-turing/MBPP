{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the number of lists in a given number of lists.\n\nTask ID: 792\n\nExpected behavior (test cases):\n1. count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) should return 4\n2. count_list([[1,2],[2,3],[4,5]]) should return 3\n3. count_list([[1,0],[2,0]]) should return 2\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def count_list(input_list): \r\n    return len(input_list)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert a roman numeral to an integer.\n\nTask ID: 961\n\nExpected behavior (test cases):\n1. roman_to_int('MMMCMLXXXVI')==3986\n2. roman_to_int('MMMM')==4000\n3. roman_to_int('C')==100\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\nTask ID: 649\n\nExpected behavior (test cases):\n1. sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) should return 29\n2. sum_Range_list([1,2,3,4,5],1,2) should return 5\n3. sum_Range_list([1,0,1,2,5,6],4,5) should return 11\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\nTask ID: 840\n\nExpected behavior (test cases):\n1. Check_Solution(2,0,-1) should return \"Yes\"\n2. Check_Solution(1,-5,6) should return \"No\"\n3. Check_Solution(2,0,2) should return \"Yes\"\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given month name contains 31 days or not.\n\nTask ID: 866\n\nExpected behavior (test cases):\n1. check_monthnumb(\"February\")==False\n2. check_monthnumb(\"January\")==True\n3. check_monthnumb(\"March\")==True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to count the number of unique lists within a list.\n\nTask ID: 779\n\nExpected behavior (test cases):\n1. unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n2. unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n3. unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert camel case string to snake case string.\n\nTask ID: 965\n\nExpected behavior (test cases):\n1. camel_to_snake('PythonProgram')==('python_program')\n2. camel_to_snake('pythonLanguage')==('python_language')\n3. camel_to_snake('ProgrammingLanguage')==('programming_language')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if any list element is present in the given list.\n\nTask ID: 942\n\nExpected behavior (test cases):\n1. check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) should return True\n2. check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) should return True\n3. check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) should return False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to push all values into a heap and then pop off the smallest values one at a time.\n\nTask ID: 635\n\nExpected behavior (test cases):\n1. heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n2. heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n3. heap_sort( [7, 1, 9, 5])==[1,5,7,9]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the area of a rombus.\n\nTask ID: 814\n\nExpected behavior (test cases):\n1. rombus_area(10,20)==100\n2. rombus_area(10,5)==25\n3. rombus_area(4,2)==4\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find palindromes in a given list of strings using lambda function.\n\nTask ID: 864\n\nExpected behavior (test cases):\n1. palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\n2. palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\n3. palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the kth element in an array containing odd elements first and then even elements.\n\nTask ID: 844\n\nExpected behavior (test cases):\n1. get_Number(8,5) should return 2\n2. get_Number(7,2) should return 3\n3. get_Number(5,2) should return 3\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to sort the given string.\n\nTask ID: 877\n\nExpected behavior (test cases):\n1. sort_String(\"cba\") should return \"abc\"\n2. sort_String(\"data\") should return \"aadt\"\n3. sort_String(\"zxy\") should return \"xyz\"\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the product of it\u2019s kth index in the given tuples.\n\nTask ID: 645\n\nExpected behavior (test cases):\n1. find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) should return 665\n2. find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) should return 280\n3. find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) should return 210\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to count repeated items of a tuple.\n\nTask ID: 929\n\nExpected behavior (test cases):\n1. count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\n2. count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\n3. count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the given expression is balanced or not.\n\nTask ID: 771\n\nExpected behavior (test cases):\n1. check_expression(\"{()}[{}]\") should return True\n2. check_expression(\"{()}[{]\") should return False\n3. check_expression(\"{()}[{}][]({})\") should return True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to pack consecutive duplicates of a given list elements into sublists.\n\nTask ID: 778\n\nExpected behavior (test cases):\n1. pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n2. pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n3. pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to count alphabets,digits and special charactes in a given string.\n\nTask ID: 828\n\nExpected behavior (test cases):\n1. count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\n2. count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\n3. count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\nTask ID: 896\n\nExpected behavior (test cases):\n1. sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \n2. sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \n3. sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] \n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count number of vowels in the string.\n\nTask ID: 667\n\nExpected behavior (test cases):\n1. Check_Vow('corner','AaEeIiOoUu') should return 2\n2. Check_Vow('valid','AaEeIiOoUu') should return 2\n3. Check_Vow('true','AaEeIiOoUu') ==2\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract values between quotation marks of the given string by using regex.\n\nTask ID: 725\n\nExpected behavior (test cases):\n1. extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') should return ['A53', 'multi', 'Processor']\n2. extract_quotation('Cast your \"favorite\" entertainment \"apps\"') should return ['favorite', 'apps']\n3. extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') should return ['4k Ultra HD', 'HDR 10']\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the length of the shortest word.\n\nTask ID: 947\n\nExpected behavior (test cases):\n1. len_log([\"win\",\"lose\",\"great\"]) should return 3\n2. len_log([\"a\",\"ab\",\"abc\"]) should return 1\n3. len_log([\"12\",\"12\",\"1234\"]) should return 2\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove multiple spaces in a string.\n\nTask ID: 892\n\nExpected behavior (test cases):\n1. remove_spaces('python  program')==('python program')\n2. remove_spaces('python   programming    language')==('python programming language')\n3. remove_spaces('python                     program')==('python program')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to remove even numbers from a given list.\n\nTask ID: 824\n\nExpected behavior (test cases):\n1. remove_even([1,3,5,2]) should return [1,3,5]\n2. remove_even([5,6,7]) should return [5,7]\n3. remove_even([1,2,3,4]) should return [1,3]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the longest common subsequence for the given three string sequence.\n\nTask ID: 747\n\nExpected behavior (test cases):\n1. lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) should return 2\n2. lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) should return 5 \n3. lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) should return 3\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to get an item of a tuple.\n\nTask ID: 948\n\nExpected behavior (test cases):\n1. get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\n2. get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\n3. get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to access multiple elements of specified index from a given list.\n\nTask ID: 825\n\nExpected behavior (test cases):\n1. access_elements([2,3,8,4,7,9],[0,3,5]) should return [2, 4, 9]\n2. access_elements([1, 2, 3, 4, 5],[1,2]) should return [2,3]\n3. access_elements([1,0,2,3],[0,1]) should return [1,0]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given amount has no profit and no loss\n\nTask ID: 637\n\nExpected behavior (test cases):\n1. noprofit_noloss(1500,1200)==False\n2. noprofit_noloss(100,100)==True\n3. noprofit_noloss(2000,5000)==False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to create a new tuple from the given string and list.\n\nTask ID: 788\n\nExpected behavior (test cases):\n1. new_tuple([\"WEB\", \"is\"], \"best\") should return ('WEB', 'is', 'best')\n2. new_tuple([\"We\", \"are\"], \"Developers\") should return ('We', 'are', 'Developers')\n3. new_tuple([\"Part\", \"is\"], \"Wrong\") should return ('Part', 'is', 'Wrong')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find maximum run of uppercase characters in the given string.\n\nTask ID: 806\n\nExpected behavior (test cases):\n1. max_run_uppercase('GeMKSForGERksISBESt') should return 5\n2. max_run_uppercase('PrECIOusMOVemENTSYT') should return 6\n3. max_run_uppercase('GooGLEFluTTER') should return 4\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the index of the first occurrence of a given number in a sorted array.\n\nTask ID: 733\n\nExpected behavior (test cases):\n1. find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) should return 1\n2. find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) should return 2\n3. find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) should return 4\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to left rotate the bits of a given number.\n\nTask ID: 799\n\nExpected behavior (test cases):\n1. left_Rotate(16,2) should return 64\n2. left_Rotate(10,2) should return 40\n3. left_Rotate(99,3) should return 792\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the sum of all digits of the base to the specified power.\n\nTask ID: 724\n\nExpected behavior (test cases):\n1. power_base_sum(2,100)==115\n2. power_base_sum(8,10)==37\n3. power_base_sum(8,15)==62\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given number is a perfect square or not.\n\nTask ID: 803\n\nExpected behavior (test cases):\n1. is_Perfect_Square(10) should return False\n2. is_Perfect_Square(36) should return True\n3. is_Perfect_Square(14) should return False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to count occurrence of a character in a string.\n\nTask ID: 666\n\nExpected behavior (test cases):\n1. count_char(\"Python\",'o')==1\n2. count_char(\"little\",'t')==2\n3. count_char(\"assert\",'s')==2\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to count the number of inversions in the given array.\n\nTask ID: 841\n\nExpected behavior (test cases):\n1. get_inv_count([1, 20, 6, 4, 5], 5) should return 5\n2. get_inv_count([8, 4, 2, 1], 4) should return 6\n3. get_inv_count([3, 1, 2], 3) should return 2\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to sum elements in two lists.\n\nTask ID: 728\n\nExpected behavior (test cases):\n1. sum_list([10,20,30],[15,25,35])==[25,45,65]\n2. sum_list([1,2,3],[5,6,7])==[6,8,10]\n3. sum_list([15,20,30],[15,45,75])==[30,65,105]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the minimum number of platforms required for a railway/bus station.\n\nTask ID: 846\n\nExpected behavior (test cases):\n1. find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\n2. find_platform([100,200,300,400],[700,800,900,1000],4)==4\n3. find_platform([5,6,7,8],[4,3,2,1],4)==1\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a list in a dictionary.\n\nTask ID: 662\n\nExpected behavior (test cases):\n1. sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\n2. sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\n3. sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to get a lucid number smaller than or equal to n.\n\nTask ID: 603\n\nExpected behavior (test cases):\n1. get_ludic(10) should return [1, 2, 3, 5, 7]\n2. get_ludic(25) should return [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n3. get_ludic(45) should return [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to remove the k'th element from a given list.\n\nTask ID: 610\n\nExpected behavior (test cases):\n1. remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n2. remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n3. remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to iterate over all pairs of consecutive items in a given list.\n\nTask ID: 766\n\nExpected behavior (test cases):\n1. pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n2. pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n3. pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to convert a list of multiple integers into a single integer.\n\nTask ID: 673\n\nExpected behavior (test cases):\n1. convert([1,2,3]) should return 123\n2. convert([4,5,6]) should return 456\n3. convert([7,8,9]) should return 789\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n\nTask ID: 614\n\nExpected behavior (test cases):\n1. cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) should return 30\n2. cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) should return 37\n3. cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) should return 44\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the most common elements and their counts of a specified text.\n\nTask ID: 946\n\nExpected behavior (test cases):\n1. most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \n2. most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\n3. most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the n-th power of individual elements in a list using lambda function.\n\nTask ID: 623\n\nExpected behavior (test cases):\n1. nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n2. nth_nums([10,20,30],3)==([1000, 8000, 27000])\n3. nth_nums([12,15],5)==([248832, 759375])\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to multiply consecutive numbers of a given list.\n\nTask ID: 690\n\nExpected behavior (test cases):\n1. mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\n2. mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\n3. mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether all the characters are same or not.\n\nTask ID: 741\n\nExpected behavior (test cases):\n1. all_Characters_Same(\"python\") should return False\n2. all_Characters_Same(\"aaa\") should return True\n3. all_Characters_Same(\"data\") should return False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count numeric values in a given string.\n\nTask ID: 764\n\nExpected behavior (test cases):\n1. number_ctr('program2bedone') should return 1\n2. number_ctr('3wonders') ==1\n3. number_ctr('123') should return 3\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate wind chill index.\n\nTask ID: 638\n\nExpected behavior (test cases):\n1. wind_chill(120,35)==40\n2. wind_chill(40,70)==86\n3. wind_chill(10,100)==116\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check if the string is a concatenation of another string.\n\nTask ID: 874\n\nExpected behavior (test cases):\n1. check_Concat(\"abcabcabc\",\"abc\") should return True\n2. check_Concat(\"abcab\",\"abc\") should return False\n3. check_Concat(\"aba\",\"ab\") should return False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if a triangle of positive area is possible with the given angles.\n\nTask ID: 850\n\nExpected behavior (test cases):\n1. is_triangleexists(50,60,70)==True\n2. is_triangleexists(90,45,45)==True\n3. is_triangleexists(150,30,70)==False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find out the second most repeated (or frequent) string in the given sequence.\n\nTask ID: 829\n\nExpected behavior (test cases):\n1. second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) should return 'bbb'\n2. second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) should return 'abc'\n3. second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) should return 'gsm'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given string is starting with a vowel or not using regex.\n\nTask ID: 737\n\nExpected behavior (test cases):\n1. check_str(\"annie\") should return 'Valid'\n2. check_str(\"dawood\") should return 'Invalid'\n3. check_str(\"Else\") should return 'Valid'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the occurrences of n most common words in a given text.\n\nTask ID: 862\n\nExpected behavior (test cases):\n1. n_common_words(\"python is a programming language\",1)==[('python', 1)]\n2. n_common_words(\"python is a programming language\",1)==[('python', 1)]\n3. n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given strings are rotations of each other or not.\n\nTask ID: 871\n\nExpected behavior (test cases):\n1. are_Rotations(\"abc\",\"cba\") should return False\n2. are_Rotations(\"abcd\",\"cdba\") should return False\n3. are_Rotations(\"abacd\",\"cdaba\") should return True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given ip address is valid or not using regex.\n\nTask ID: 669\n\nExpected behavior (test cases):\n1. check_IP(\"192.168.0.1\") should return 'Valid IP address'\n2. check_IP(\"110.234.52.124\") should return 'Valid IP address'\n3. check_IP(\"366.1.2.2\") should return 'Invalid IP address'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of squares of binomial co-efficients.\n\nTask ID: 905\n\nExpected behavior (test cases):\n1. sum_of_square(4) should return 70\n2. sum_of_square(5) should return 252\n3. sum_of_square(2) should return 6\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert tuple string to integer tuple.\n\nTask ID: 785\n\nExpected behavior (test cases):\n1. tuple_str_int(\"(7, 8, 9)\") should return (7, 8, 9)\n2. tuple_str_int(\"(1, 2, 3)\") should return (1, 2, 3)\n3. tuple_str_int(\"(4, 5, 6)\") should return (4, 5, 6)\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\nTask ID: 661\n\nExpected behavior (test cases):\n1. max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) should return 2101\n2. max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) should return 5013\n3. max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) should return 27\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\nTask ID: 639\n\nExpected behavior (test cases):\n1. sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n2. sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\n3. sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to remove spaces from a given string.\n\nTask ID: 678\n\nExpected behavior (test cases):\n1. remove_spaces(\"a b c\") should return \"abc\"\n2. remove_spaces(\"1 2 3\") should return \"123\"\n3. remove_spaces(\" b c\") should return \"bc\"\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\nTask ID: 928\n\nExpected behavior (test cases):\n1. change_date_format('2026-01-02')=='02-01-2026'\n2. change_date_format('2021-01-04')=='04-01-2021'\n3. change_date_format('2030-06-06')=='06-06-2030'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find sum of all prime divisors of a given number.\n\nTask ID: 849\n\nExpected behavior (test cases):\n1. Sum(60) should return 10\n2. Sum(39) should return 16\n3. Sum(40) should return 7\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to count the same pair in two given lists using map function.\n\nTask ID: 723\n\nExpected behavior (test cases):\n1. count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n2. count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\n3. count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the second smallest number in a list.\n\nTask ID: 755\n\nExpected behavior (test cases):\n1. second_smallest([1, 2, -8, -2, 0, -2])==-2\n2. second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\n3. second_smallest([2,2])==None\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to count the elements in a list until an element is a tuple.\n\nTask ID: 941\n\nExpected behavior (test cases):\n1. count_elim([10,20,30,(10,20),40])==3\n2. count_elim([10,(20,30),(10,20),40])==1\n3. count_elim([(10,(20,30,(10,20),40))])==0\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the given integer is a prime number.\n\nTask ID: 605\n\nExpected behavior (test cases):\n1. prime_num(13)==True\n2. prime_num(7)==True\n3. prime_num(-1010)==False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function that matches a string that has an a followed by zero or more b's.\n\nTask ID: 719\n\nExpected behavior (test cases):\n1. text_match(\"ac\")==('Found a match!')\n2. text_match(\"dc\")==('Not matched!')\n3. text_match(\"abba\")==('Found a match!')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to reverse an array upto a given position.\n\nTask ID: 644\n\nExpected behavior (test cases):\n1. reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) should return [4, 3, 2, 1, 5, 6]\n2. reverse_Array_Upto_K([4, 5, 6, 7], 2) should return [5, 4, 6, 7]\n3. reverse_Array_Upto_K([9, 8, 7, 6, 5],3) should return [7, 8, 9, 6, 5]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the length of the last word in a given string.\n\nTask ID: 868\n\nExpected behavior (test cases):\n1. length_Of_Last_Word(\"python language\") should return 8\n2. length_Of_Last_Word(\"PHP\") should return 3\n3. length_Of_Last_Word(\"\") should return 0\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to re-arrange the given tuples based on the given ordered list.\n\nTask ID: 936\n\nExpected behavior (test cases):\n1. re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) should return [(1, 9), (4, 3), (2, 10), (3, 2)]\n2. re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) should return [(3, 11), (4, 3), (2, 10), (3, 11)]\n3. re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) should return [(2, 4), (5, 7), (3, 8), (6, 3)]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n\nTask ID: 935\n\nExpected behavior (test cases):\n1. series_sum(6)==91\n2. series_sum(7)==140\n3. series_sum(12)==650\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count lower case letters in a given string.\n\nTask ID: 818\n\nExpected behavior (test cases):\n1. lower_ctr('abc') should return 3\n2. lower_ctr('string') should return 6\n3. lower_ctr('Python') should return 5\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find sum of products of all possible subarrays.\n\nTask ID: 734\n\nExpected behavior (test cases):\n1. sum_Of_Subarray_Prod([1,2,3],3) should return 20\n2. sum_Of_Subarray_Prod([1,2],2) should return 5\n3. sum_Of_Subarray_Prod([1,2,3,4],4) should return 84\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether every odd index contains odd numbers of a given list.\n\nTask ID: 775\n\nExpected behavior (test cases):\n1. odd_position([2,1,4,3,6,7,6,3]) should return True\n2. odd_position([4,1,2]) should return True\n3. odd_position([1,2,3]) should return False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove all the words with k length in the given string.\n\nTask ID: 772\n\nExpected behavior (test cases):\n1. remove_length('The person is most value tet', 3) should return 'person is most value'\n2. remove_length('If you told me about this ok', 4) should return 'If you me about ok'\n3. remove_length('Forces of darkeness is come into the play', 4) should return 'Forces of darkeness is the'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\nTask ID: 817\n\nExpected behavior (test cases):\n1. div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\n2. div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\n3. div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert the given tuples into set.\n\nTask ID: 945\n\nExpected behavior (test cases):\n1. tuple_to_set(('x', 'y', 'z') ) should return {'y', 'x', 'z'}\n2. tuple_to_set(('a', 'b', 'c') ) should return {'c', 'a', 'b'}\n3. tuple_to_set(('z', 'd', 'e') ) should return {'d', 'e', 'z'}\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to left rotate the string.\n\nTask ID: 973\n\nExpected behavior (test cases):\n1. left_rotate(\"python\",2) should return \"thonpy\"   \n2. left_rotate(\"bigdata\",3 ) should return \"databig\" \n3. left_rotate(\"hadoop\",1 ) should return \"adooph\" \n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the product of numbers is even or not.\n\nTask ID: 804\n\nExpected behavior (test cases):\n1. is_Product_Even([1,2,3],3) should return True\n2. is_Product_Even([1,2,1,4],4) should return True\n3. is_Product_Even([1,1],2) should return False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert degrees to radians.\n\nTask ID: 606\n\nExpected behavior (test cases):\n1. radian_degree(90)==1.5707963267948966\n2. radian_degree(60)==1.0471975511965976\n3. radian_degree(120)==2.0943951023931953\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to count the number of elements in a list which are within a specific range.\n\nTask ID: 700\n\nExpected behavior (test cases):\n1. count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\n2. count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\n3. count_range_in_list([7,8,9,15,17,19,45],15,20)==3\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to add all the numbers in a list and divide it with the length of the list.\n\nTask ID: 886\n\nExpected behavior (test cases):\n1. sum_num((8, 2, 3, 0, 7))==4.0\n2. sum_num((-10,-20,-30))==-20.0\n3. sum_num((19,15,18))==17.333333333333332\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to add a minimum number such that the sum of array becomes even.\n\nTask ID: 867\n\nExpected behavior (test cases):\n1. min_Num([1,2,3,4,5,6,7,8,9],9) should return 1\n2. min_Num([1,2,3,4,5,6,7,8],8) should return 2\n3. min_Num([1,2,3],3) should return 2\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert rgb color to hsv color.\n\nTask ID: 783\n\nExpected behavior (test cases):\n1. rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n2. rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\n3. rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\nTask ID: 870\n\nExpected behavior (test cases):\n1. sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\n2. sum_positivenum([10,15,-14,13,-18,12,-20])==50\n3. sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert the given string of float type into tuple.\n\nTask ID: 894\n\nExpected behavior (test cases):\n1. float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") should return (1.2, 1.3, 2.3, 2.4, 6.5)\n2. float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") should return (2.3, 2.4, 5.6, 5.4, 8.9)\n3. float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") should return (0.3, 0.5, 7.8, 9.4)\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to access dictionary key\u2019s element by index.\n\nTask ID: 679\n\nExpected behavior (test cases):\n1. access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\n2. access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\n3. access_key({'program':15,'computer':45},1)== 'computer'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\nTask ID: 895\n\nExpected behavior (test cases):\n1. max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) should return 26\n2. max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) should return 28\n3. max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) should return 44\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove everything except alphanumeric characters from the given string by using regex.\n\nTask ID: 676\n\nExpected behavior (test cases):\n1. remove_extra_char('**//Google Android// - 12. ') should return 'GoogleAndroid12'\n2. remove_extra_char('****//Google Flutter//*** - 36. ') should return 'GoogleFlutter36'\n3. remove_extra_char('**//Google Firebase// - 478. ') should return 'GoogleFirebase478'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to rotate a given list by specified number of items to the right direction.\n\nTask ID: 743\n\nExpected behavior (test cases):\n1. rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\n2. rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n3. rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find maximum of three numbers.\n\nTask ID: 672\n\nExpected behavior (test cases):\n1. max_of_three(10,20,30)==30\n2. max_of_three(55,47,39)==55\n3. max_of_three(10,49,30)==49\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to remove negative numbers from a list.\n\nTask ID: 852\n\nExpected behavior (test cases):\n1. remove_negs([1,-2,3,-4]) should return [1,3]\n2. remove_negs([1,2,3,-4]) should return [1,2,3]\n3. remove_negs([4,5,-6,7,-8]) should return [4,5,7]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the minimum total path sum in the given triangle.\n\nTask ID: 974\n\nExpected behavior (test cases):\n1. min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) should return 6\n2. min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) should return 10 \n3. min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) should return 9\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of an array.\n\nTask ID: 798\n\nExpected behavior (test cases):\n1. _sum([1, 2, 3]) should return 6\n2. _sum([15, 12, 13, 10]) should return 50\n3. _sum([0, 1, 2]) should return 3\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to add the given tuple to the given list.\n\nTask ID: 750\n\nExpected behavior (test cases):\n1. add_tuple([5, 6, 7], (9, 10)) should return [5, 6, 7, 9, 10]\n2. add_tuple([6, 7, 8], (10, 11)) should return [6, 7, 8, 10, 11]\n3. add_tuple([7, 8, 9], (11, 12)) should return [7, 8, 9, 11, 12]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check for a number at the end of a string.\n\nTask ID: 913\n\nExpected behavior (test cases):\n1. end_num('abcdef')==False\n2. end_num('abcdef7')==True\n3. end_num('abc')==False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the average of even numbers till a given even number.\n\nTask ID: 664\n\nExpected behavior (test cases):\n1. average_Even(2) should return 2\n2. average_Even(4) should return 3\n3. average_Even(100) should return 51\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of fifth power of n natural numbers.\n\nTask ID: 655\n\nExpected behavior (test cases):\n1. fifth_Power_Sum(2) should return 33\n2. fifth_Power_Sum(4) should return 1300\n3. fifth_Power_Sum(3) should return 276\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the count of divisors is even or odd.\n\nTask ID: 781\n\nExpected behavior (test cases):\n1. count_Divisors(10) should return \"Even\"\n2. count_Divisors(100) should return \"Odd\"\n3. count_Divisors(125) should return \"Even\"\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to get the length of a complex number.\n\nTask ID: 688\n\nExpected behavior (test cases):\n1. len_complex(3,4)==5.0\n2. len_complex(9,10)==13.45362404707371\n3. len_complex(7,9)==11.40175425099138\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to validate a gregorian date.\n\nTask ID: 910\n\nExpected behavior (test cases):\n1. check_date(11,11,2002)==True\n2. check_date(13,11,2002)==False\n3. check_date('11','11','2002')==True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the given tuples contain the k or not.\n\nTask ID: 808\n\nExpected behavior (test cases):\n1. check_K((10, 4, 5, 6, 8), 6) should return True\n2. check_K((1, 2, 3, 4, 5, 6), 7) should return False\n3. check_K((7, 8, 9, 44, 11, 12), 11) should return True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check for odd parity of a given number.\n\nTask ID: 768\n\nExpected behavior (test cases):\n1. check_Odd_Parity(13) should return True\n2. check_Odd_Parity(21) should return True\n3. check_Odd_Parity(18) should return False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to move all zeroes to the end of the given list.\n\nTask ID: 632\n\nExpected behavior (test cases):\n1. move_zero([1,0,2,0,3,4]) should return [1,2,3,4,0,0]\n2. move_zero([2,3,2,0,0,4,0,5,0]) should return [2,3,2,4,5,0,0,0,0]\n3. move_zero([0,1,0,1,1]) should return [1,1,1,0,0]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n\nTask ID: 916\n\nExpected behavior (test cases):\n1. find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) should return (4, 10, 8)\n2. find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) should return (12, 3, 9)\n3. find_triplet_array([1, 2, 3, 4, 5], 5, 9) should return (1, 3, 5)\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\nTask ID: 854\n\nExpected behavior (test cases):\n1. raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\n2. raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\n3. raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the list in a list of lists whose sum of elements is the highest.\n\nTask ID: 805\n\nExpected behavior (test cases):\n1. max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n2. max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \n3. max_sum_list([[2,3,1]])==[2,3,1] \n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def max_sum_list(lists):\r\n return max(lists, key=sum)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the cube sum of first n odd natural numbers.\n\nTask ID: 837\n\nExpected behavior (test cases):\n1. cube_Sum(2) should return 28\n2. cube_Sum(3) should return 153\n3. cube_Sum(4) should return 496\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n\nTask ID: 732\n\nExpected behavior (test cases):\n1. replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n2. replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\n3. replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove multiple spaces in a string by using regex.\n\nTask ID: 693\n\nExpected behavior (test cases):\n1. remove_multiple_spaces('Google      Assistant') should return 'Google Assistant'\n2. remove_multiple_spaces('Quad      Core') should return 'Quad Core'\n3. remove_multiple_spaces('ChromeCast      Built-in') should return 'ChromeCast Built-in'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to access the initial and last data of the given tuple record.\n\nTask ID: 710\n\nExpected behavior (test cases):\n1. front_and_rear((10, 4, 5, 6, 7)) should return (10, 7)\n2. front_and_rear((1, 2, 3, 4, 5)) should return (1, 5)\n3. front_and_rear((6, 7, 8, 9, 10)) should return (6, 10)\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\nTask ID: 691\n\nExpected behavior (test cases):\n1. group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) should return {5: [6, 2], 7: [2, 8, 3], 8: [9]}\n2. group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) should return {6: [7, 3], 8: [3, 9, 4], 9: [10]}\n3. group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) should return {7: [8, 4], 9: [4, 10, 5], 10: [11]}\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a given list of strings of numbers numerically.\n\nTask ID: 749\n\nExpected behavior (test cases):\n1. sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n2. sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n3. sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the frequency of each element in the given list.\n\nTask ID: 686\n\nExpected behavior (test cases):\n1. freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) should return '{4: 3, 5: 4, 6: 2}'\n2. freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) should return '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\n3. freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) should return '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the two given strings are isomorphic to each other or not.\n\nTask ID: 885\n\nExpected behavior (test cases):\n1. is_Isomorphic(\"paper\",\"title\") should return True\n2. is_Isomorphic(\"ab\",\"ba\") should return True\n3. is_Isomorphic(\"ab\",\"aa\") should return False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find sum of prime numbers between 1 to n.\n\nTask ID: 685\n\nExpected behavior (test cases):\n1. sum_Of_Primes(10) should return 17\n2. sum_Of_Primes(20) should return 77\n3. sum_Of_Primes(5) should return 10\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove an empty tuple from a list of tuples.\n\nTask ID: 966\n\nExpected behavior (test cases):\n1. remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \n2. remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \n3. remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  \n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove consecutive duplicates of a given list.\n\nTask ID: 730\n\nExpected behavior (test cases):\n1. consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n2. consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n3. consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to caluclate the area of a tetrahedron.\n\nTask ID: 742\n\nExpected behavior (test cases):\n1. area_tetrahedron(3)==15.588457268119894\n2. area_tetrahedron(20)==692.8203230275509\n3. area_tetrahedron(10)==173.20508075688772\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether a sequence of numbers has an increasing trend or not.\n\nTask ID: 680\n\nExpected behavior (test cases):\n1. increasing_trend([1,2,3,4]) should return True\n2. increasing_trend([4,3,2,1]) should return False\n3. increasing_trend([0,1,4,9]) should return True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to copy a list from a singleton tuple.\n\nTask ID: 847\n\nExpected behavior (test cases):\n1. lcopy([1, 2, 3]) should return [1, 2, 3]\n2. lcopy([4, 8, 2, 10, 15, 18]) should return [4, 8, 2, 10, 15, 18]\n3. lcopy([4, 5, 6]) should return [4, 5, 6]\n\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def lcopy(xs):\n  return xs[:]\n"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of all even natural numbers within the range l and r.\n\nTask ID: 962\n\nExpected behavior (test cases):\n1. sum_Even(2,5) should return 6\n2. sum_Even(3,8) should return 18\n3. sum_Even(4,6) should return 10\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to abbreviate 'road' as 'rd.' in a given string.\n\nTask ID: 812\n\nExpected behavior (test cases):\n1. road_rd(\"ravipadu Road\")==('ravipadu Rd.')\n2. road_rd(\"palnadu Road\")==('palnadu Rd.')\n3. road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\nTask ID: 883\n\nExpected behavior (test cases):\n1. div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\n2. div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\n3. div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the item with maximum occurrences in a given list.\n\nTask ID: 658\n\nExpected behavior (test cases):\n1. max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\n2. max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\n3. max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n\nTask ID: 931\n\nExpected behavior (test cases):\n1. sum_series(7)==784\n2. sum_series(5)==225\n3. sum_series(15)==14400\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to print n-times a list using map function.\n\nTask ID: 865\n\nExpected behavior (test cases):\n1. ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\n2. ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\n3. ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given month number contains 30 days or not.\n\nTask ID: 762\n\nExpected behavior (test cases):\n1. check_monthnumber_number(6)==True\n2. check_monthnumber_number(2)==False\n3. check_monthnumber_number(12)==False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to multiply two lists using map and lambda function.\n\nTask ID: 682\n\nExpected behavior (test cases):\n1. mul_list([1, 2, 3],[4,5,6])==[4,10,18]\n2. mul_list([1,2],[3,4])==[3,8]\n3. mul_list([90,120],[50,70])==[4500,8400]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the combinations of sums with tuples in the given tuple list.\n\nTask ID: 780\n\nExpected behavior (test cases):\n1. find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) should return [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n2. find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) should return [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n3. find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) should return [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find out, if the given number is abundant.\n\nTask ID: 955\n\nExpected behavior (test cases):\n1. is_abundant(12)==True\n2. is_abundant(13)==False\n3. is_abundant(9)==False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find all anagrams of a string in a given list of strings using lambda function.\n\nTask ID: 861\n\nExpected behavior (test cases):\n1. anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\n2. anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\n3. anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert camel case string to snake case string by using regex.\n\nTask ID: 933\n\nExpected behavior (test cases):\n1. camel_to_snake('GoogleAssistant') should return 'google_assistant'\n2. camel_to_snake('ChromeCast') should return 'chrome_cast'\n3. camel_to_snake('QuadCore') should return 'quad_core'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort the tuples alphabetically by the first item of each tuple.\n\nTask ID: 839\n\nExpected behavior (test cases):\n1. sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) should return [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n2. sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) should return [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n3. sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) should return [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to reverse words in a given string.\n\nTask ID: 604\n\nExpected behavior (test cases):\n1. reverse_words(\"python program\")==(\"program python\")\n2. reverse_words(\"java language\")==(\"language java\")\n3. reverse_words(\"indian man\")==(\"man indian\")\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of fourth power of first n even natural numbers.\n\nTask ID: 634\n\nExpected behavior (test cases):\n1. even_Power_Sum(2) should return 272\n2. even_Power_Sum(3) should return 1568\n3. even_Power_Sum(4) should return 5664\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function that gives profit amount if the given amount has profit else return none.\n\nTask ID: 954\n\nExpected behavior (test cases):\n1. profit_amount(1500,1200)==300\n2. profit_amount(100,200)==None\n3. profit_amount(2000,5000)==None\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find minimum k records from tuple list.\n\nTask ID: 753\n\nExpected behavior (test cases):\n1. min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) should return [('Akash', 2), ('Akshat', 4)]\n2. min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) should return [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n3. min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) should return [('Ayesha', 9)]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert the given string of integers into a tuple.\n\nTask ID: 715\n\nExpected behavior (test cases):\n1. str_to_tuple(\"1, -5, 4, 6, 7\") should return (1, -5, 4, 6, 7)\n2. str_to_tuple(\"1, 2, 3, 4, 5\") should return (1, 2, 3, 4, 5)\n3. str_to_tuple(\"4, 6, 9, 11, 13, 14\") should return (4, 6, 9, 11, 13, 14)\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the given tuple contains all valid values or not.\n\nTask ID: 713\n\nExpected behavior (test cases):\n1. check_valid((True, True, True, True) ) should return True\n2. check_valid((True, False, True, True) ) should return False\n3. check_valid((True, True, True, True) ) should return True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the first odd number in a given list of numbers.\n\nTask ID: 807\n\nExpected behavior (test cases):\n1. first_odd([1,3,5]) should return 1\n2. first_odd([2,4,1,3]) should return 1\n3. first_odd ([8,9,1]) should return 9\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to count the pairs of reverse strings in the given string list.\n\nTask ID: 757\n\nExpected behavior (test cases):\n1. count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\n2. count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) should return '1'\n3. count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) should return '2' \n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to concatenate the given two tuples to a nested tuple.\n\nTask ID: 972\n\nExpected behavior (test cases):\n1. concatenate_nested((3, 4), (5, 6)) should return (3, 4, 5, 6)\n2. concatenate_nested((1, 2), (3, 4)) should return (1, 2, 3, 4)\n3. concatenate_nested((4, 5), (6, 8)) should return (4, 5, 6, 8)\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the length of the word is even or not.\n\nTask ID: 964\n\nExpected behavior (test cases):\n1. word_len(\"program\") should return False\n2. word_len(\"solution\") should return True\n3. word_len(\"data\") should return True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find average value of the numbers in a given tuple of tuples.\n\nTask ID: 615\n\nExpected behavior (test cases):\n1. average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n2. average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\n3. average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the equilibrium index of the given array.\n\nTask ID: 701\n\nExpected behavior (test cases):\n1. equilibrium_index([1, 2, 3, 4, 1, 2, 3]) should return 3\n2. equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) should return 3\n3. equilibrium_index([1, 2, 3]) should return -1\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write function to find the sum of all items in the given dictionary.\n\nTask ID: 796\n\nExpected behavior (test cases):\n1. return_sum({'a': 100, 'b':200, 'c':300}) should return 600\n2. return_sum({'a': 25, 'b':18, 'c':45}) should return 88\n3. return_sum({'a': 36, 'b':39, 'c':49}) should return 124\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\nTask ID: 631\n\nExpected behavior (test cases):\n1. replace_spaces('Jumanji The Jungle') should return 'Jumanji_The_Jungle'\n2. replace_spaces('The Avengers') should return 'The_Avengers'\n3. replace_spaces('Fast and Furious') should return 'Fast_and_Furious'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to count number of lists in a given list of lists and square the count.\n\nTask ID: 858\n\nExpected behavior (test cases):\n1. count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\n2. count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\n3. count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def count_list(input_list): \r\n    return (len(input_list))**2"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to sum a specific column of a list in a given list of lists.\n\nTask ID: 827\n\nExpected behavior (test cases):\n1. sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\n2. sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\n3. sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\nTask ID: 628\n\nExpected behavior (test cases):\n1. replace_spaces(\"My Name is Dawood\") should return 'My%20Name%20is%20Dawood'\n2. replace_spaces(\"I am a Programmer\") should return 'I%20am%20a%20Programmer'\n3. replace_spaces(\"I love Coding\") should return 'I%20love%20Coding'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the number of digits in factorial of a given number.\n\nTask ID: 845\n\nExpected behavior (test cases):\n1. find_Digits(7) should return 4\n2. find_Digits(5) should return 3\n3. find_Digits(4) should return 2\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove sublists from a given list of lists, which are outside a given range.\n\nTask ID: 869\n\nExpected behavior (test cases):\n1. remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\n2. remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\n3. remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the slope of a line.\n\nTask ID: 835\n\nExpected behavior (test cases):\n1. slope(4,2,2,5) should return -1.5\n2. slope(2,4,4,6) should return 1\n3. slope(1,2,4,2) should return 0\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\nTask ID: 653\n\nExpected behavior (test cases):\n1. grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\n2. grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\n3. grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the total set bits from 1 to n.\n\nTask ID: 707\n\nExpected behavior (test cases):\n1. count_Set_Bits(16) should return 33\n2. count_Set_Bits(2) should return 2\n3. count_Set_Bits(14) should return 28\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if two lists of tuples are identical or not.\n\nTask ID: 811\n\nExpected behavior (test cases):\n1. check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) should return True\n2. check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) should return False\n3. check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) should return True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to create a list taking alternate elements from another given list.\n\nTask ID: 718\n\nExpected behavior (test cases):\n1. alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\n2. alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\n3. alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to add two integers. however, if the sum is between the given range it will return 20.\n\nTask ID: 675\n\nExpected behavior (test cases):\n1. sum_nums(2,10,11,20)==20\n2. sum_nums(15,17,1,10)==32\n3. sum_nums(10,15,5,30)==20\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove all characters except letters and numbers using regex\n\nTask ID: 727\n\nExpected behavior (test cases):\n1. remove_char(\"123abcjw:, .@! eiw\") should return '123abcjweiw'\n2. remove_char(\"Hello1234:, ! Howare33u\") should return 'Hello1234Howare33u'\n3. remove_char(\"Cool543Triks@:, Make@987Trips\") should return 'Cool543TriksMake987Trips' \n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the given tuple contains only k elements.\n\nTask ID: 878\n\nExpected behavior (test cases):\n1. check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) should return True\n2. check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) should return True\n3. check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) should return False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\nTask ID: 740\n\nExpected behavior (test cases):\n1. tuple_to_dict((1, 5, 7, 10, 13, 5)) should return {1: 5, 7: 10, 13: 5}\n2. tuple_to_dict((1, 2, 3, 4, 5, 6)) should return {1: 2, 3: 4, 5: 6}\n3. tuple_to_dict((7, 8, 9, 10, 11, 12)) should return {7: 8, 9: 10, 11: 12}\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to add a dictionary to the tuple.\n\nTask ID: 720\n\nExpected behavior (test cases):\n1. add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) should return (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n2. add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) should return (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n3. add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) should return (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to locate the right insertion point for a specified value in sorted order.\n\nTask ID: 786\n\nExpected behavior (test cases):\n1. right_insertion([1,2,4,5],6)==4\n2. right_insertion([1,2,4,5],3)==2\n3. right_insertion([1,2,4,5],7)==4\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to clear the values of the given tuples.\n\nTask ID: 816\n\nExpected behavior (test cases):\n1. clear_tuple((1, 5, 3, 6, 8)) should return ()\n2. clear_tuple((2, 1, 4 ,5 ,6)) should return ()\n3. clear_tuple((3, 2, 5, 6, 8)) should return ()\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check a decimal with a precision of 2.\n\nTask ID: 759\n\nExpected behavior (test cases):\n1. is_decimal('123.11')==True\n2. is_decimal('e666.86')==False\n3. is_decimal('3.124587')==False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given two arrays are equal or not.\n\nTask ID: 650\n\nExpected behavior (test cases):\n1. are_Equal([1,2,3],[3,2,1],3,3) should return True\n2. are_Equal([1,1,1],[2,2,2],3,3) should return False\n3. are_Equal([8,9],[4,5,6],2,3) should return False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\nTask ID: 923\n\nExpected behavior (test cases):\n1. super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) should return 9\n2. super_seq(\"feek\", \"eke\", 4, 3) should return 5\n3. super_seq(\"PARRT\", \"RTA\", 5, 3) should return 6\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of xor of all pairs of numbers in the given array.\n\nTask ID: 633\n\nExpected behavior (test cases):\n1. pair_OR_Sum([5,9,7,6],4) should return 47\n2. pair_OR_Sum([7,3,5],3) should return 12\n3. pair_OR_Sum([7,3],2) should return 4\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to interchange first and last elements in a given list.\n\nTask ID: 625\n\nExpected behavior (test cases):\n1. swap_List([1,2,3]) should return [3,2,1]\n2. swap_List([1,2,3,4,4]) should return [4,2,3,4,1]\n3. swap_List([4,5,6]) should return [6,5,4]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to extract the maximum numeric value from a string by using regex.\n\nTask ID: 832\n\nExpected behavior (test cases):\n1. extract_max('100klh564abc365bg') should return 564\n2. extract_max('hello300how546mer231') should return 546\n3. extract_max('its233beenalong343journey234') should return 343\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to divide two lists using map and lambda function.\n\nTask ID: 618\n\nExpected behavior (test cases):\n1. div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n2. div_list([3,2],[1,4])==[3.0, 0.5]\n3. div_list([90,120],[50,70])==[1.8, 1.7142857142857142]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to get dictionary keys as a list.\n\nTask ID: 833\n\nExpected behavior (test cases):\n1. get_key({1:'python',2:'java'})==[1,2]\n2. get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\n3. get_key({27:'language',39:'java',44:'little'})==[27,39,44]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function that matches a string that has an a followed by zero or one 'b'.\n\nTask ID: 756\n\nExpected behavior (test cases):\n1. text_match_zero_one(\"ac\")==('Found a match!')\n2. text_match_zero_one(\"dc\")==('Not matched!')\n3. text_match_zero_one(\"abbbba\")==('Found a match!')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the given tuple has any none value or not.\n\nTask ID: 744\n\nExpected behavior (test cases):\n1. check_none((10, 4, 5, 6, None)) should return True\n2. check_none((7, 8, 9, 11, 14)) should return False\n3. check_none((1, 2, 3, 4, None)) should return True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of all odd natural numbers within the range l and r.\n\nTask ID: 797\n\nExpected behavior (test cases):\n1. sum_in_Range(2,5) should return 8\n2. sum_in_Range(5,7) should return 12\n3. sum_in_Range(7,13) should return 40\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to count the most common character in a given string.\n\nTask ID: 937\n\nExpected behavior (test cases):\n1. max_char(\"hello world\")==('l')\n2. max_char(\"hello \")==('l')\n3. max_char(\"python pr\")==('p')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to merge two dictionaries into a single expression.\n\nTask ID: 821\n\nExpected behavior (test cases):\n1. merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\n2. merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\n3. merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to reverse each list in a given list of lists.\n\nTask ID: 889\n\nExpected behavior (test cases):\n1. reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n2. reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\n3. reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove the parenthesis area in a string.\n\nTask ID: 640\n\nExpected behavior (test cases):\n1. remove_parenthesis([\"python (chrome)\"])==(\"python\")\n2. remove_parenthesis([\"string(.abc)\"])==(\"string\")\n3. remove_parenthesis([\"alpha(num)\"])==(\"alpha\")\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to choose points from two ranges such that no point lies in both the ranges.\n\nTask ID: 660\n\nExpected behavior (test cases):\n1. find_Points(5,10,1,5) should return (1,10)\n2. find_Points(3,5,7,9) should return (3,9)\n3. find_Points(1,5,2,8) should return (1,8)\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the string is a valid email address or not using regex.\n\nTask ID: 774\n\nExpected behavior (test cases):\n1. check_email(\"ankitrai326@gmail.com\") should return 'Valid Email'\n2. check_email(\"my.ownsite@ourearth.org\") should return 'Valid Email'\n3. check_email(\"ankitaoie326.com\") should return 'Invalid Email'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the perimeter of a rombus.\n\nTask ID: 716\n\nExpected behavior (test cases):\n1. rombus_perimeter(10)==40\n2. rombus_perimeter(5)==20\n3. rombus_perimeter(4)==16\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\nTask ID: 879\n\nExpected behavior (test cases):\n1. text_match(\"aabbbbd\") should return 'Not matched!'\n2. text_match(\"aabAbbbc\") should return 'Not matched!'\n3. text_match(\"accddbbjjjb\") should return 'Found a match!'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to perfom the modulo of tuple elements in the given two tuples.\n\nTask ID: 616\n\nExpected behavior (test cases):\n1. tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) should return (0, 4, 5, 1)\n2. tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) should return (5, 5, 6, 1)\n3. tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) should return (5, 6, 7, 1)\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the nth delannoy number.\n\nTask ID: 934\n\nExpected behavior (test cases):\n1. dealnnoy_num(3, 4) should return 129\n2. dealnnoy_num(3, 3) should return 63\n3. dealnnoy_num(4, 5) should return 681\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to list out the list of given strings individually using map function.\n\nTask ID: 857\n\nExpected behavior (test cases):\n1. listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\n2. listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\n3. listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given number can be represented by sum of two squares or not.\n\nTask ID: 683\n\nExpected behavior (test cases):\n1. sum_Square(25) should return True\n2. sum_Square(24) should return False\n3. sum_Square(17) should return True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given month number contains 28 days or not.\n\nTask ID: 820\n\nExpected behavior (test cases):\n1. check_monthnum_number(2)==True\n2. check_monthnum_number(1)==False\n3. check_monthnum_number(3)==False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to convert the given string to upper case.\n\nTask ID: 624\n\nExpected behavior (test cases):\n1. is_upper(\"person\") ==\"PERSON\"\n2. is_upper(\"final\") should return \"FINAL\"\n3. is_upper(\"Valid\") should return \"VALID\"\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def is_upper(string):\r\n  return (string.upper())"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to split the given string at uppercase letters by using regex.\n\nTask ID: 956\n\nExpected behavior (test cases):\n1. split_list(\"LearnToBuildAnythingWithGoogle\") should return ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\n2. split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") should return ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\n3. split_list(\"UpdateInTheGoEcoSystem\") should return ['Update', 'In', 'The', 'Go', 'Eco', 'System']\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\nTask ID: 607\n\nExpected behavior (test cases):\n1. find_literals('The quick brown fox jumps over the lazy dog.', 'fox') should return ('fox', 16, 19)\n2. find_literals('Its been a very crazy procedure right', 'crazy') should return ('crazy', 16, 21)\n3. find_literals('Hardest choices required strongest will', 'will') should return ('will', 35, 39)\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\nTask ID: 911\n\nExpected behavior (test cases):\n1. maximum_product( [12, 74, 9, 50, 61, 41])==225700\n2. maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\n3. maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to display sign of the chinese zodiac for given year.\n\nTask ID: 950\n\nExpected behavior (test cases):\n1. chinese_zodiac(1997)==('Ox')\n2. chinese_zodiac(1998)==('Tiger')\n3. chinese_zodiac(1994)==('Dog')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to add two lists using map and lambda function.\n\nTask ID: 729\n\nExpected behavior (test cases):\n1. add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\n2. add_list([1,2],[3,4])==[4,6]\n3. add_list([10,20],[50,70])==[60,90]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\nTask ID: 687\n\nExpected behavior (test cases):\n1. recur_gcd(12,14) should return 2\n2. recur_gcd(13,17) should return 1\n3. recur_gcd(9, 3) should return 3\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort a list of lists by length and value.\n\nTask ID: 705\n\nExpected behavior (test cases):\n1. sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n2. sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n3. sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\nTask ID: 698\n\nExpected behavior (test cases):\n1. sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) should return {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\n2. sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) should return {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\n3. sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) should return {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the largest subset where each pair is divisible.\n\nTask ID: 620\n\nExpected behavior (test cases):\n1. largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) should return 4\n2. largest_subset([10, 5, 3, 15, 20], 5) should return 3\n3. largest_subset([18, 1, 3, 6, 13, 17], 6) should return 4\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to increment the numeric values in the given strings by k.\n\nTask ID: 621\n\nExpected behavior (test cases):\n1. increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) should return ['MSM', '240', 'is', '104', '129', 'best', '10']\n2. increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) should return ['Dart', '368', 'is', '100', '181', 'Super', '18']\n3. increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) should return ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to print duplicants from a list of integers.\n\nTask ID: 659\n\nExpected behavior (test cases):\n1. Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) should return [20, 30, -20, 60]\n2. Repeat([-1, 1, -1, 8]) should return [-1]\n3. Repeat([1, 2, 3, 1, 2,]) should return [1, 2]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\nTask ID: 809\n\nExpected behavior (test cases):\n1. check_smaller((1, 2, 3), (2, 3, 4)) should return False\n2. check_smaller((4, 5, 6), (3, 4, 5)) should return True\n3. check_smaller((11, 12, 13), (10, 11, 12)) should return True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to get the last element of each sublist.\n\nTask ID: 893\n\nExpected behavior (test cases):\n1. Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) should return [3, 5, 9]\n2. Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) should return ['z', 'm', 'b', 'v']\n3. Extract([[1, 2, 3], [4, 5]]) should return [3, 5]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def Extract(lst): \r\n    return [item[-1] for item in lst] "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find sum of odd factors of a number.\n\nTask ID: 853\n\nExpected behavior (test cases):\n1. sum_of_odd_Factors(30) should return 24\n2. sum_of_odd_Factors(18) should return 13\n3. sum_of_odd_Factors(2) should return 1\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find lcm of two positive integers.\n\nTask ID: 876\n\nExpected behavior (test cases):\n1. lcm(4,6) should return 12\n2. lcm(15,17) should return 255\n3. lcm(2,6) should return 6\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to locate the left insertion point for a specified value in sorted order.\n\nTask ID: 736\n\nExpected behavior (test cases):\n1. left_insertion([1,2,4,5],6)==4\n2. left_insertion([1,2,4,5],3)==2\n3. left_insertion([1,2,4,5],7)==4\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to calculate the perimeter of a regular polygon.\n\nTask ID: 789\n\nExpected behavior (test cases):\n1. perimeter_polygon(4,20)==80\n2. perimeter_polygon(10,15)==150\n3. perimeter_polygon(9,7)==63\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the area of a trapezium.\n\nTask ID: 848\n\nExpected behavior (test cases):\n1. area_trapezium(6,9,4)==30\n2. area_trapezium(10,20,30)==450\n3. area_trapezium(15,25,35)==700\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the perimeter of a rectangle.\n\nTask ID: 654\n\nExpected behavior (test cases):\n1. rectangle_perimeter(10,20)==60\n2. rectangle_perimeter(10,5)==30\n3. rectangle_perimeter(4,2)==12\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\nTask ID: 860\n\nExpected behavior (test cases):\n1. check_alphanumeric(\"dawood@\") should return 'Discard'\n2. check_alphanumeric(\"skdmsam326\") should return 'Accept'\n3. check_alphanumeric(\"cooltricks@\") should return 'Discard'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check if the given string starts with a substring using regex.\n\nTask ID: 823\n\nExpected behavior (test cases):\n1. check_substring(\"dreams for dreams makes life fun\", \"makes\") should return 'string doesnt start with the given substring'\n2. check_substring(\"Hi there how are you Hi alex\", \"Hi\") should return 'string starts with the given substring'\n3. check_substring(\"Its been a long day\", \"been\") should return 'string doesnt start with the given substring'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to round up a number to specific digits.\n\nTask ID: 830\n\nExpected behavior (test cases):\n1. round_up(123.01247,0)==124\n2. round_up(123.01247,1)==123.1\n3. round_up(123.01247,2)==123.02\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\nTask ID: 863\n\nExpected behavior (test cases):\n1. find_longest_conseq_subseq([1, 2, 2, 3], 4) should return 3\n2. find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) should return 4\n3. find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) should return 5\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function that matches a string that has an a followed by three 'b'.\n\nTask ID: 787\n\nExpected behavior (test cases):\n1. text_match_three(\"ac\")==('Not matched!')\n2. text_match_three(\"dc\")==('Not matched!')\n3. text_match_three(\"abbbba\")==('Found a match!')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\nTask ID: 794\n\nExpected behavior (test cases):\n1. text_starta_endb(\"aabbbb\")==('Found a match!')\n2. text_starta_endb(\"aabAbbbc\")==('Not matched!')\n3. text_starta_endb(\"accddbbjjj\")==('Not matched!')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given two numbers have same number of digits or not.\n\nTask ID: 891\n\nExpected behavior (test cases):\n1. same_Length(12,1) should return False\n2. same_Length(2,2) should return True\n3. same_Length(10,20) should return True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function that matches a string that has an a followed by zero or more b's by using regex.\n\nTask ID: 930\n\nExpected behavior (test cases):\n1. text_match(\"msb\") should return 'Not matched!'\n2. text_match(\"a0c\") should return 'Found a match!'\n3. text_match(\"abbc\") should return 'Found a match!'\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the sum of fourth power of first n odd natural numbers.\n\nTask ID: 770\n\nExpected behavior (test cases):\n1. odd_Num_Sum(2) should return 82\n2. odd_Num_Sum(3) should return 707\n3. odd_Num_Sum(4) should return 3108\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the smallest missing number from the given array.\n\nTask ID: 627\n\nExpected behavior (test cases):\n1. find_First_Missing([0,1,2,3],0,3) should return 4\n2. find_First_Missing([0,1,2,6,9],0,4) should return 3\n3. find_First_Missing([2,3,5,8,9],0,4) should return 0\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to remove all whitespaces from a string.\n\nTask ID: 800\n\nExpected behavior (test cases):\n1. remove_all_spaces('python  program')==('pythonprogram')\n2. remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\n3. remove_all_spaces('python                     program')==('pythonprogram')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the smallest prime divisor of a number.\n\nTask ID: 681\n\nExpected behavior (test cases):\n1. smallest_Divisor(10) should return 2\n2. smallest_Divisor(25) should return 5\n3. smallest_Divisor(31) should return 31\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to sort the given array by using heap sort.\n\nTask ID: 940\n\nExpected behavior (test cases):\n1. heap_sort([12, 2, 4, 5, 2, 3]) should return [2, 2, 3, 4, 5, 12]\n2. heap_sort([32, 14, 5, 6, 7, 19]) should return [5, 6, 7, 14, 19, 32]\n3. heap_sort([21, 15, 29, 78, 65]) should return [15, 21, 29, 65, 78]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\nTask ID: 648\n\nExpected behavior (test cases):\n1. exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \n2. exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \n3. exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] \n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count equal element pairs from the given array.\n\nTask ID: 831\n\nExpected behavior (test cases):\n1. count_Pairs([1,1,1,1],4) should return 6\n2. count_Pairs([1,5,1],3) should return 1\n3. count_Pairs([3,2,1,7,8,9],6) should return 0\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to convert an integer into a roman numeral.\n\nTask ID: 958\n\nExpected behavior (test cases):\n1. int_to_roman(1)==(\"I\")\n2. int_to_roman(50)==(\"L\")\n3. int_to_roman(4)==(\"IV\")\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find maximum of two numbers.\n\nTask ID: 924\n\nExpected behavior (test cases):\n1. max_of_two(10,20)==20\n2. max_of_two(19,15)==19\n3. max_of_two(-10,-20)==-10\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to check whether the given number is odd or not using bitwise operator.\n\nTask ID: 887\n\nExpected behavior (test cases):\n1. is_odd(5) should return True\n2. is_odd(6) should return False\n3. is_odd(7) should return True\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to multiply the adjacent elements of the given tuple.\n\nTask ID: 726\n\nExpected behavior (test cases):\n1. multiply_elements((1, 5, 7, 8, 10)) should return (5, 35, 56, 80)\n2. multiply_elements((2, 4, 5, 6, 7)) should return (8, 20, 30, 42)\n3. multiply_elements((12, 13, 14, 9, 15)) should return (156, 182, 126, 135)\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\nTask ID: 613\n\nExpected behavior (test cases):\n1. maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) should return [('key1', 5), ('key2', 4), ('key3', 9)]\n2. maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) should return [('key1', 6), ('key2', 5), ('key3', 10)]\n3. maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) should return [('key1', 7), ('key2', 6), ('key3', 11)]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find minimum of two numbers.\n\nTask ID: 970\n\nExpected behavior (test cases):\n1. min_of_two(10,20)==10\n2. min_of_two(19,15)==15\n3. min_of_two(-10,-20)==-20\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to count the number of distinct power of prime factor of given number.\n\nTask ID: 714\n\nExpected behavior (test cases):\n1. count_Fac(24) should return 3\n2. count_Fac(12) should return 2\n3. count_Fac(4) should return 1\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the lateral surface area of a cone.\n\nTask ID: 731\n\nExpected behavior (test cases):\n1. lateralsurface_cone(5,12)==204.20352248333654\n2. lateralsurface_cone(10,15)==566.3586699569488\n3. lateralsurface_cone(19,17)==1521.8090132193388\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find length of the string.\n\nTask ID: 813\n\nExpected behavior (test cases):\n1. string_length('python')==6\n2. string_length('program')==7\n3. string_length('language')==8\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\nTask ID: 702\n\nExpected behavior (test cases):\n1. removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) should return 5\n2. removals([1, 5, 6, 2, 8], 5, 2) should return 3\n3. removals([1, 2, 3 ,4, 5, 6], 6, 3) should return 2\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to check whether the given key is present in the dictionary or not.\n\nTask ID: 703\n\nExpected behavior (test cases):\n1. is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\n2. is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\n3. is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n\nTask ID: 745\n\nExpected behavior (test cases):\n1. divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n2. divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n3. divisible_by_digits(20,25)==[22, 24]\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to multiply all items in the list.\n\nTask ID: 919\n\nExpected behavior (test cases):\n1. multiply_list([1,-2,3]) should return -6\n2. multiply_list([1,2,3,4]) should return 24\n3. multiply_list([3,1,2,3]) should return 18\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to return true if the given number is even else return false.\n\nTask ID: 904\n\nExpected behavior (test cases):\n1. even_num(13.5)==False\n2. even_num(0)==True\n3. even_num(-9)==False\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a python function to find the last position of an element in a sorted array.\n\nTask ID: 793\n\nExpected behavior (test cases):\n1. last([1,2,3],1,3) should return 0\n2. last([1,1,1,2,3,4],1,6) should return 2\n3. last([2,3,2,3,6,8,9],3,8) should return 3\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to substract the elements of the given nested tuples.\n\nTask ID: 888\n\nExpected behavior (test cases):\n1. substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) should return ((-5, -4), (1, -4), (1, 8), (-6, 7))\n2. substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) should return ((-6, -4), (0, -4), (1, 8), (-6, 7))\n3. substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) should return ((7, -4), (1, -4), (6, 8), (-2, 7))\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function that matches a word containing 'z', not at the start or end of the word.\n\nTask ID: 643\n\nExpected behavior (test cases):\n1. text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\n2. text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\n3. text_match_wordz_middle(\"  lang  .\")==('Not matched!')\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"instruction": "Please solve the following Python programming problem:\n\nProblem: Write a function to find number of even elements in the given list using lambda function.\n\nTask ID: 697\n\nExpected behavior (test cases):\n1. count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\n2. count_even([10,15,14,13,-18,12,-20])==5\n3. count_even([1, 2, 4, 8, 9])==3\n\nPlease provide a complete Python function that solves this problem. Write only the function code without any explanations or comments.", "output": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"}
