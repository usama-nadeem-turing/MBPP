[
  {
    "mbpp_id": 11,
    "problem_statement": "Write a python function to remove first and last occurrence of a given character from the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_Occ(s, char):\n    i = 0\n    while i < len(s) and s[i] != char:\n        i += 1\n    j = len(s) - 1\n    while j >= 0 and s[j] != char:\n        j -= 1\n    if i > 0 and j < len(s) - 1:\n        return s[:i] + s[j+1:]\n    else:\n        return \"\" if i == 0 and j == len(s) - 1 else None",
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "mbpp_id": 12,
    "problem_statement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport numpy as np\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    # Convert the list of lists into a NumPy array for easier manipulation\n    arr = np.array(matrix)\n    # Sort the array based on the sum of elements along axis=1 (rows) in ascending order\n    sorted_arr = arr[np.argsort(arr.sum(axis=1))]\n    return sorted_arr.tolist()",
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "mbpp_id": 13,
    "problem_statement": "Write a function to count the most common words in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\nfrom typing import List, Tuple\n\ndef count_common(words: List[str]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Counts the frequency of each word and returns the n most common words.\n    \n    :param words: List of strings representing the dictionary entries.\n    :return: A list of tuples where each tuple contains a word and its frequency.\n             The list is sorted in descending order based on the frequency.\n    \"\"\"\n    # Count the occurrences of each word in the list\n    counts = Counter(words)\n    # Get the top N most common words along with their frequencies\n    top_n_counts = counts.most_common(10)  # Assuming we want up to 10 most common words for simplicity\n    # Convert the result into a list of tuples (word, frequency)\n    return [(word, freq) for word, freq in top_n_counts]",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ]
  },
  {
    "mbpp_id": 14,
    "problem_statement": "Write a python function to find the volume of a triangular prism.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Volume(length,height,width):\n    # Calculate and return the volume of the triangular prism\n    return length * height * width",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 15,
    "problem_statement": "Write a function to split a string at lowercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_lowerstring(s):\n    return [s[i] for i in range(len(s)) if s[i].islower()]",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ]
  },
  {
    "mbpp_id": 16,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_lowercase_underscore(text):\n    # Check if all characters in the string are lowercase and underscores are present between them\n    return 'Found a match!' if text.islower() and '_' in text.replace('_', '') else 'Not matched!'",
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 17,
    "problem_statement": "Write a function to find the perimeter of a square.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_perimeter(side_length):\n    return 4 * side_length",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 18,
    "problem_statement": "Write a function to remove characters from the first string which are present in the second string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_dirty_chars(source_str, dirty_list):\n    # Convert list of characters to set for efficient lookup\n    dirty_set = set(dirty_list)\n    # Filter out characters not in the dirty list and join into a new string\n    clean_str = ''.join([char for char in source_str if char not in dirty_set])\n    return clean_str",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ]
  },
  {
    "mbpp_id": 19,
    "problem_statement": "Write a function to find whether a given array of integers contains any duplicate element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def test_duplicate(arr):\n    # Your implementation here\n    pass",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ]
  },
  {
    "mbpp_id": 20,
    "problem_statement": "Write a function to check if the given number is woodball or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_woodall(n):\n    \"\"\"\n    Checks if n is a Woodall number.\n    \n    A Woodall number is defined as a positive integer of the form n = i * 2^i - 1 for some non-negative integer i.\n    \n    Parameters:\n    n (int): The number to be checked.\n    \n    Returns:\n    bool: True if n is a Woodall number, False otherwise.\n    \"\"\"\n    # Initialize i with 0\n    i = 0\n    # Loop until we exceed the number n or find an i such that n equals i*2^i-1\n    while True:\n        # Calculate i * 2^i - 1 and compare it with n\n        current_value = i * 2**i - 1\n        if current_value == n:\n            return True\n        elif current_value > n:\n            return False\n        # Increment i for the next iteration\n        i += 1\n\n# Test cases to verify the correctness of the function\nprint(is_woodall(383))  # Expected output: True\nprint(is_woodall(254))  # Expected output: False\nprint(is_woodall(200))  # Expected output: False",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ]
  },
  {
    "mbpp_id": 21,
    "problem_statement": "Write a function to find m number of multiples of n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiples_of_num(m, n):\n    return [i * n for i in range(1, m+1)]",
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ]
  },
  {
    "mbpp_id": 22,
    "problem_statement": "Write a function to find the first duplicate element in a given array of integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1",
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ]
  },
  {
    "mbpp_id": 23,
    "problem_statement": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximum_Sum(lists):\n    # Initialize total_sum with 0 and max_sum as the first list's sum\n    total_sum = 0\n    max_sum = lists[0][0] if len(lists) else 0\n    \n    # Iterate through each list in the given list of lists\n    for sublist in lists:\n        # Update total_sum by adding the current sublist's sum\n        total_sum += sum(sublist)\n        \n        # Update max_sum by comparing it with the current sublist's sum\n        max_sum = max(max_sum, sum(sublist))\n    \n    # Return the larger value between total_sum and max_sum\n    return max(total_sum, max_sum)\n\n# Test cases\nprint(maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]))  # Expected output: 33\nprint(maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]))             # Expected output: 6\nprint(maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]))  # Expected output: 19",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ]
  },
  {
    "mbpp_id": 24,
    "problem_statement": "Write a function to convert the given binary number to its decimal equivalent.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - int() can't convert non-string with explicit base",
      "Test 2: FAIL - int() can't convert non-string with explicit base",
      "Test 3: FAIL - int() can't convert non-string with explicit base"
    ],
    "generated_code": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number represented as a string to its decimal equivalent.\n    \n    Args:\n    binary_str (str): A string representing the binary number.\n    \n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    return int(binary_str, 2)",
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ]
  },
  {
    "mbpp_id": 25,
    "problem_statement": "Write a python function to find the product of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Product(arr, n): \n    # Calculate factorial of each element and store it in an array\n    fact = [1] * len(arr)\n    for i in range(1, n): \n        fact[i] = arr[i - 1] * fact[i - 1]\n    \n    # Initialize result as 1\n    res = 1\n    \n    # Calculate the product of all non-repeated elements\n    for j in range(n): \n        if fact[j] != 0: \n            res *= fact[j]\n    \n    return res",
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ]
  },
  {
    "mbpp_id": 26,
    "problem_statement": "Write a function to check if the given tuple list has all k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unsupported operand type(s) for -: 'Counter' and 'set'"
    ],
    "generated_code": "def check_k_elements(tuple_list, k):\n    # Check if each element in the tuple_list is equal to k and count them using Counter from collections module\n    import collections\n    return len(collections.Counter([item for item in tuple_list if isinstance(item, tuple)]) - {k}) == 0\n\n# Test cases\nprint(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4))  # Expected output: True\nprint(check_k_elements([(7, 7, 7), (7, 7)], 7))  # Expected output: True\nprint(check_k_elements([(9, 9), (9, 9, 9, 9)], 7))  # Expected output: False",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ]
  },
  {
    "mbpp_id": 27,
    "problem_statement": "Write a python function to remove all digits from a list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove(digits_list):\n    # Use a generator expression to filter out digit strings and convert them back to lists\n    result = [list(filter(lambda x: not x.isdigit(), string)) for string in digits_list]\n    return result\n\n# Test cases\nprint(remove(['4words', '3letters', '4digits']))  # Expected output: [['words'], ['letters'], ['digits']]\nprint(remove(['28Jan', '12Jan', '11Jan']))        # Expected output: [['Jan'], ['Jan'], ['Jan']]\nprint(remove(['wonder1', 'wonder2', 'wonder3']))  # Expected output: [['wonder'], ['wonder'], ['wonder']]",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ]
  },
  {
    "mbpp_id": 28,
    "problem_statement": "Write a python function to find binomial co-efficient.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'math' is not defined",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - name 'math' is not defined"
    ],
    "generated_code": "def binomial_Coeff(n, k):\n    \"\"\"\n    Calculate binomial coefficient C(n, k)\n\n    Parameters:\n    n (int): Total number of items.\n    k (int): Number of groups to be formed.\n\n    Returns:\n    int: Binomial coefficient C(n, k).\n    \"\"\"\n    # Using the formula for binomial coefficient: C(n, k) = n! / (k!(n-k)!)\n    numerator = math.factorial(n)\n    denominator = math.factorial(k) * math.factorial(n - k)\n    return int(numerator / denominator)",
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ]
  },
  {
    "mbpp_id": 29,
    "problem_statement": "Write a python function to find the element occurring odd number of times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: get_Odd_Occurrence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def get_Odd_Occurrence(arr):\n    from collections import Counter\n    \n    # Count occurrences of each element in the array\n    count = Counter(arr)\n    \n    # Find and return the element with an odd occurrence\n    for key, value in count.items():\n        if value % 2 != 0:\n            return key\n\n# Test cases\nprint(get_Odd_Occurrence([1,2,3,1,2,3,1],7))   # Expected output: 1\nprint(get_Odd_Occurrence([1,2,3,2,3,1,3],7))   # Expected output: 3\nprint(get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13))   # Expected output: 5",
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ]
  },
  {
    "mbpp_id": 30,
    "problem_statement": "Write a python function to count all the substrings starting and ending with same characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(s):\n    n = len(s)\n    result = 0\n    \n    for i in range(n):\n        # Check if the substring starting at index i has equal first and last characters\n        if s[i] == s[-i-1]:\n            result += 1\n            \n    return result",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ]
  },
  {
    "mbpp_id": 31,
    "problem_statement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\n\ndef func(lists, k):\n    max_heap = []\n    for lst in lists:\n        for num in lst:\n            if len(max_heap) < k:\n                heapq.heappush(max_heap, -num)\n            else:\n                if -num > max_heap[0]:\n                    heapq.heapreplace(max_heap, -num)\n    result = [-heapq.heappop(max_heap) for _ in range(k)]\n    return result[::-1]\n\n# Test cases\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3)) # Expected output: [5, 7, 1]\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1)) # Expected output: [1]\nprint(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5)) # Expected output: [6, 5, 7, 8, 1]",
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ]
  },
  {
    "mbpp_id": 32,
    "problem_statement": "Write a python function to find the largest prime factor of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'max_Prime_Factors' is not defined",
      "Test 2: FAIL - name 'max_Prime_Factors' is not defined",
      "Test 3: FAIL - name 'max_Prime_Factors' is not defined"
    ],
    "generated_code": "import math\n\ndef max_prime_factors(n):\n    i = 2\n    factors = []\n    \n    while n % i == 0:\n        factors.append(i)\n        n //= i\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    \n    if n > 2:\n        factors.append(n)\n    \n    return factors[-1]\n\n# Test cases\nassert max_prime_factors(15) == 5\nassert max_prime_factors(6) == 3\nassert max_prime_factors(2) == 2",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ]
  },
  {
    "mbpp_id": 33,
    "problem_statement": "Write a python function to convert a decimal number to binary number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'decimal_To_Binary' is not defined",
      "Test 2: FAIL - name 'decimal_To_Binary' is not defined",
      "Test 3: FAIL - name 'decimal_To_Binary' is not defined"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a given decimal number to its binary representation as a string.\n    \n    Parameters:\n    decimal_number (int): The decimal number to be converted.\n    \n    Returns:\n    str: The binary representation of the input decimal number.\n    \"\"\"\n    return bin(decimal_number)[2:]\n\n# Test cases\nprint(decimal_to_binary(10)) # Expected output: \"1010\"\nprint(decimal_to_binary(1))  # Expected output: \"1\"\nprint(decimal_to_binary(20)) # Expected output: \"10100\"",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ]
  },
  {
    "mbpp_id": 34,
    "problem_statement": "Write a python function to find the missing number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_missing(arr, n):\n    low = 0\n    high = n - 1\n    \n    # Use binary search algorithm\n    while low <= high:\n        mid = (low + high) // 2\n        \n        # If middle element is equal to its index, decrement high\n        if arr[mid] == mid:\n            high = mid - 1\n        else:\n            # If middle element is greater than its index, it means the target number must be on the left side\n            low = mid + 1\n            \n    # After the loop, low will be pointing at the missing number\n    return low",
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ]
  },
  {
    "mbpp_id": 35,
    "problem_statement": "Write a function to find the n-th rectangular number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rect_num(n):\n    # Calculate the nth rectangular number using the formula for triangular numbers\n    rect_num = n * (n + 1)\n    return rect_num",
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ]
  },
  {
    "mbpp_id": 36,
    "problem_statement": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Nth_Digit(numerator, denominator, n):\n    num_str = str((numerator * 10**(len(str(denominator)) - 1) + numerator % denominator))\n    if len(num_str) <= n:\n        return int(num_str)\n    else:\n        return int(num_str[n-1])\n\n# Test cases\nprint(find_Nth_Digit(1, 2, 1)) # Expected output: 5\nprint(find_Nth_Digit(3, 5, 1)) # Expected output: 6\nprint(find_Nth_Digit(5, 6, 5)) # Expected output: 3",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ]
  },
  {
    "mbpp_id": 37,
    "problem_statement": "Write a function to sort a given mixed list of integers and strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 2: FAIL - '<' not supported between instances of 'str' and 'int'",
      "Test 3: FAIL - '<' not supported between instances of 'str' and 'int'"
    ],
    "generated_code": "def sort_mixed_list(lst):\n    return sorted(lst)",
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ]
  },
  {
    "mbpp_id": 38,
    "problem_statement": "Write a function to find the division of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef div_even_odd(nums: List[int]) -> int:\n    if not nums:\n        return None\n    \n    even_sum = sum(num for num in nums if num % 2 == 0)\n    odd_sum = sum(num for num in nums if num % 2 != 0)\n    \n    if len(nums) % 2 == 0:\n        return even_sum / odd_sum if odd_sum else None\n    else:\n        return odd_sum / even_sum if even_sum else None",
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 39,
    "problem_statement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "from collections import Counter\n\ndef rearange_string(s):\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    result = \"\"\n    while char_count:\n        most_common_char = max(char_count.items(), key=lambda x: x[1])[0]\n        \n        for _ in range(min(char_count.values())):\n            if most_common_char not in result and len(result) < sum(char_count.values()):\n                result += most_common_char\n        \n        # Remove the used character from the count dictionary\n        for char, freq in list(char_count.items()):\n            if char == most_common_char and freq > 1:\n                char_count[char] -= 1\n    \n    return result",
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ]
  },
  {
    "mbpp_id": 40,
    "problem_statement": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef freq_element(lst):\n    return Counter([item for sublist in lst for item in sublist])\n\n# Test cases\nprint(freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])) == {2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}\nprint(freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\nprint(freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])) == {30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1}",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ]
  },
  {
    "mbpp_id": 41,
    "problem_statement": "Write a function to filter even numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))",
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ]
  },
  {
    "mbpp_id": 42,
    "problem_statement": "Write a python function to find the sum of repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Sum(arr, target):\n    element_count = {}\n    for num in arr:\n        if num not in element_count:\n            element_count[num] = 0\n        element_count[num] += 1\n    \n    total_sum = 0\n    for key, value in element_count.items():\n        if value % target == 0:\n            total_sum += key * value // target\n    \n    return total_sum",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ]
  },
  {
    "mbpp_id": 43,
    "problem_statement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define a regular expression pattern to match lowercase letters followed by an underscore and another lowercase letter\n    pattern = '[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ]
  },
  {
    "mbpp_id": 44,
    "problem_statement": "Write a function that matches a word at the beginning of a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_string(text):\n    # Check if the first character of the text is in lowercase\n    return 'Not matched!' if not re.match(r'^[a-z]', text) else 'Found a match!'",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 45,
    "problem_statement": "Write a function to find the gcd of the given array elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "from typing import List\nimport math\n\ndef get_gcd(arr: List[int]) -> int:\n    # Calculate the GCD using the reduce method and math.gcd from the math module\n    return reduce(lambda x, y: math.gcd(x, y), arr)",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ]
  },
  {
    "mbpp_id": 46,
    "problem_statement": "Write a python function to determine whether all the numbers are different from each other are not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def test_distinct(nums):\n    \"\"\"\n    Check if all numbers in the list are distinct.\n    \n    Args:\n    nums: List[int] - A list of integers\n    \n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    num_set = set(nums)\n    return len(num_set) == len(nums)\n\n# Test cases\nprint(test_distinct([1,5,7,9]))  # Expected output: True\nprint(test_distinct([2,4,5,5,7,9]))  # Expected output: False\nprint(test_distinct([1,2,3]))  # Expected output: True",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ]
  },
  {
    "mbpp_id": 47,
    "problem_statement": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - integer division or modulo by zero",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def compute_Last_Digit(a, b):\n    # Calculate factorial using recursion and mod operation to get last digit\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return (n * factorial(n - 1)) % 10\n    \n    # Calculate last digit of factorials for both numbers\n    la = factorial(a)\n    lb = factorial(b)\n    \n    # Return the last digit of the division of two factorials\n    return (la // lb) % 10",
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 48,
    "problem_statement": "Write a python function to set all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def odd_bit_set_number(n):\n    # Create an empty string to store the result\n    result = ''\n    \n    # Loop through each bit in the binary representation of n\n    for i in range(32):  # Assuming we're dealing with numbers up to 32-bit integers\n        if (n >> i) & 1 == 1:\n            result += '1'  # Add '1' if the bit is odd\n        else:\n            result += '0'  # Add '0' if the bit is even\n    \n    return int(result, 2)  # Convert the resulting string back to an integer",
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ]
  },
  {
    "mbpp_id": 49,
    "problem_statement": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(list_of_lists, index):\n    return [element[index] for element in list_of_lists]\n\n# Test cases\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) # Expected output: [1, 4, 7]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) # Expected output: [3, 6, 9]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)) # Expected output: [2, 5, 1]",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ]
  },
  {
    "mbpp_id": 50,
    "problem_statement": "Write a function to find the list with minimum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef min_length_list(lst: List[List[int]]) -> Tuple[int, List[int]]:\n    return min(enumerate(lst), key=lambda x: len(x[1]))[1]",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ]
  },
  {
    "mbpp_id": 51,
    "problem_statement": "Write a function to print check if the triangle is equilateral or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_equilateral(a, b, c):\n    return a == b and b == c and c == a",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ]
  },
  {
    "mbpp_id": 52,
    "problem_statement": "Write a function to caluclate area of a parallelogram.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ]
  },
  {
    "mbpp_id": 53,
    "problem_statement": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"",
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ]
  },
  {
    "mbpp_id": 54,
    "problem_statement": "Write a function to sort the given array by using counting sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array of integers in ascending order using Counting Sort algorithm.\n    \n    :param arr: List[int] - The list of non-negative integers to be sorted.\n    :return: List[int] - The sorted list of integers.\n    \"\"\"\n    if not arr:\n        return []\n    \n    min_val = min(arr)\n    max_val = max(arr)\n    count_arr = [0] * (max_val - min_val + 1)\n    \n    for num in arr:\n        count_arr[num - min_val] += 1\n    \n    sorted_arr = []\n    for i, cnt in enumerate(count_arr):\n        sorted_arr.extend([i + min_val] * cnt)\n    \n    return sorted_arr\n\n# Test cases\nprint(counting_sort([1,23,4,5,6,7,8]))  # Expected output: [1, 4, 5, 6, 7, 8, 23]\nprint(counting_sort([12, 9, 28, 33, 69, 45]))  # Expected output: [9, 12, 28, 33, 45, 69]\nprint(counting_sort([8, 4, 14, 3, 2, 1]))  # Expected output: [1, 2, 3, 4, 8, 14]",
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ]
  },
  {
    "mbpp_id": 55,
    "problem_statement": "Write a function to find t-nth term of geometric series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def tn_gp(tn_num, gp_base, nth_term_index):\n    \"\"\"\n    This function calculates the 'nth' term in a geometric progression.\n    \n    Parameters:\n    tn_num (int): The 'tn'-th term index for which you want to calculate the value.\n    gp_base (float): The base or initial value of the geometric sequence.\n    nth_term_index (int): The specific term you need from the sequence.\n    \n    Returns:\n    float: The calculated value at the specified position in the sequence.\n    \"\"\"\n    # Calculate the 'nth' term using formula: a * r^(n-1)\n    return gp_base * pow(gp_base, nth_term_index - 1)\n\n# Test Cases\nassert tn_gp(1, 5, 2) == 16\nassert tn_gp(1, 5, 4) == 256\nassert tn_gp(2, 6, 3) == 486",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ]
  },
  {
    "mbpp_id": 56,
    "problem_statement": "Write a python function to check if a given number is one less than twice its reverse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'num' is not defined",
      "Test 2: FAIL - name 'num' is not defined",
      "Test 3: FAIL - name 'num' is not defined"
    ],
    "generated_code": "def check(number):\n    \"\"\"\n    This function checks if the input number is one less than twice its reverse.\n    \n    Parameters:\n    number (int): The number to be checked\n    \n    Returns:\n    bool: True if the number satisfies the condition, False otherwise.\n    \"\"\"\n    # Convert the number and its reverse to strings for easier comparison\n    str_num = str(number)\n    str_reverse = str(num)[::-1]\n    \n    # Check if the number is one less than twice its reverse\n    return int(str_num) == 2 * int(str_reverse) - 1",
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ]
  },
  {
    "mbpp_id": 57,
    "problem_statement": "Write a python function to find the largest number that can be formed with the given digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max_Num(digits,n_digits):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Join the sorted digits to form the maximum number and convert it to an integer\n    max_num_str = ''.join(map(str, sorted_digits))\n    \n    # Convert the string representation of the numbers back into integers\n    # Note: In Python, int() will interpret '9' as a single digit rather than ten if followed by another non-zero digit.\n    # Therefore, we need to remove the trailing zero from each digit before joining them.\n    max_num = int(max_num_str[:-n_digits] + str(int(max_num_str[-n_digits]) * n_digits), 10)\n    \n    return max_num",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ]
  },
  {
    "mbpp_id": 58,
    "problem_statement": "Write a python function to check whether the given two integers have opposite sign or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'opposite_Signs' is not defined",
      "Test 2: FAIL - name 'opposite_Signs' is not defined",
      "Test 3: FAIL - name 'opposite_Signs' is not defined"
    ],
    "generated_code": "def opposite_signs(num1, num2):\n    \"\"\"\n    Checks if the two provided integers have opposite signs.\n    \n    Parameters:\n    num1 (int): The first integer to compare.\n    num2 (int): The second integer to compare.\n    \n    Returns:\n    bool: True if both numbers have opposite signs, False otherwise.\n    \"\"\"\n    return ((num1 < 0 and num2 > 0) or (num1 > 0 and num2 < 0))\n\n# Check function with provided data points\nassert opposite_signs(1, -2) == True, \"Test case 1 failed\"\nassert opposite_signs(3, 2) == False, \"Test case 2 failed\"\nassert opposite_signs(-10, -10) == False, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ]
  },
  {
    "mbpp_id": 59,
    "problem_statement": "Write a function to find the nth octagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_octagonal(n):\n    \"\"\"\n    Returns the nth octagonal number.\n    \n    Parameters:\n    n (int): The position of the octagonal number in the sequence.\n    \n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    # Calculate the nth octagonal number using the formula: n^3 + 3n^2 - n\n    return n**3 + 3*n**2 - n",
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ]
  },
  {
    "mbpp_id": 60,
    "problem_statement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_len_sub(arr, k):\n    arr.append(0)\n    n = len(arr)\n    \n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize first row and column of DP table\n    for i in range(n):\n        dp[i][i] = 1\n        if i < n-1:\n            if abs(arr[i+1] - arr[i]) <= k:\n                dp[i][i+1] = 1\n    \n    # Fill up the DP table using bottom-up approach\n    for length in range(2, n):\n        for start in range(n-length):\n            end = start + length\n            if abs(arr[start+1] - arr[start]) <= k and dp[start+1][end-1]:\n                dp[start][end] = dp[start+1][end-1] + 1\n    \n    # Find the maximum length of subsequence\n    max_length = max(max(row) for row in dp)\n    \n    return max_length\n\n# Test cases\nprint(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8))  # Output: 5\nprint(max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7))  # Output: 4\nprint(max_len_sub([9, 11, 13, 15, 18], 5))       # Output: 1",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ]
  },
  {
    "mbpp_id": 61,
    "problem_statement": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Substrings(s, n):\n    result = 0\n    for i in range(n+1):\n        for j in range(i, n):\n            substring_sum = sum(int(digit) for digit in s[i:j+1])\n            if len(s[i:j+1]) == substring_sum:\n                result += 1\n    return result",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ]
  },
  {
    "mbpp_id": 62,
    "problem_statement": "Write a python function to find smallest number in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_num(nums):\n    # Initialize min with the first element of the list\n    min_val = nums[0]\n    \n    # Loop through all elements in the list\n    for num in nums:\n        if num < min_val:\n            min_val = num\n    \n    return min_val",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ]
  },
  {
    "mbpp_id": 63,
    "problem_statement": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_difference(tup_list: List[tuple]) -> int:\n    \"\"\"\n    Finds the maximum difference between two numbers from different tuples.\n    \n    Parameters:\n    tup_list (List[tuple]): A list of tuples where each tuple contains two integers.\n    \n    Returns:\n    int: The maximum difference found between any two numbers across all tuples.\n    \"\"\"\n    if not tup_list:\n        return None\n    \n    max_diff = 0\n    for i in range(len(tup_list)):\n        for j in range(i + 1, len(tup_list)):\n            current_diff = abs(tup_list[i][0] - tup_list[j][0])\n            max_diff = max(max_diff, current_diff)\n            \n    return max_diff\n\n# Test cases\nprint(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))  # Expected output: 7\nprint(max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]))  # Expected output: 15\nprint(max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]))  # Expected output: 23",
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ]
  },
  {
    "mbpp_id": 64,
    "problem_statement": "Write a function to sort a list of tuples using lambda.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def subject_marks(students):\n    return sorted(students, key=lambda x: x[1])\n\n# Test cases\nprint(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]))  # [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nprint(subject_marks([('Telugu',49),('Hindhi',54),('Social',33)]))  # [('', 33), ('Telugu', 49), ('Hindhi', 54)]\nprint(subject_marks([('Physics',96),('Chemistry',97),('Biology',45)]))  # [('Biology', 45), ('Physics', 96), ('Chemistry', 97)]",
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ]
  },
  {
    "mbpp_id": 65,
    "problem_statement": "Write a function of recursion list sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recursive_list_sum(lst):\n    if not lst:\n        return 0\n    elif isinstance(lst[0], int):\n        return lst[0] + recursive_list_sum(lst[1:])\n    else:\n        return lst[0][0] + lst[0][1] + recursive_list_sum(lst[1:])",
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ]
  },
  {
    "mbpp_id": 66,
    "problem_statement": "Write a python function to count positive numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pos_count(nums):\n    \"\"\"\n    Counts and returns the number of positive integers in the given list.\n    \n    Parameters:\n    nums (list): A list of integers\n    \n    Returns:\n    int: The count of positive numbers in the list\n    \"\"\"\n    return sum(1 for num in nums if num > 0)",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ]
  },
  {
    "mbpp_id": 67,
    "problem_statement": "Write a function to find the number of ways to partition a set of bell numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def bell_number(n):\n    # Initialize the Bell triangle with first row containing n+1 elements all equal to 1\n    bell_triangle = [[1] * (i + 1) for i in range(n)]\n    \n    # Fill the Bell triangle\n    for r in range(1, n):\n        for c in range(r, -1, -1):\n            if c == 0:\n                bell_triangle[r][c] += bell_triangle[r-1][c]\n            else:\n                bell_triangle[r][c] += bell_triangle[r][c-1]\n                \n    return bell_triangle[n-1][n-1]\n\n# Test the function with provided data points\nprint(bell_number(2))  # Expected output: 2\nprint(bell_number(10))  # Expected output: 115975\nprint(bell_number(56))  # Expected output: 6775685320645824322581483068371419745979053216268760300",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ]
  },
  {
    "mbpp_id": 68,
    "problem_statement": "Write a python function to check whether the given array is monotonic or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Monotonic(array):\n    # Check if array is monotonic\n    increasing = all(x <= y for x, y in zip(array, array[1:]))\n    decreasing = all(x >= y for x, y in zip(array, array[1:]))\n\n    return increasing or decreasing",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ]
  },
  {
    "mbpp_id": 69,
    "problem_statement": "Write a function to check whether a list contains the given sublist or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_sublist(main_list, sub_list):\n    # Check if each element in the main_list matches the first element of sub_list\n    for i in range(len(main_list)):\n        match = True\n        for j in range(len(sub_list)):\n            if main_list[i+j] != sub_list[j]:\n                match = False\n                break\n        if match:\n            return True\n    return False\n\n# Test cases\nprint(is_sublist([2,4,3,5,7], [3,7]))  # Expected output: False\nprint(is_sublist([2,4,3,5,7], [4,3]))  # Expected output: True\nprint(is_sublist([2,4,3,5,7], [1,6]))  # Expected output: False",
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ]
  },
  {
    "mbpp_id": 70,
    "problem_statement": "Write a function to find whether all the given tuples have equal length or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_equal(tuples_list, expected_length):\n    # Check if all tuples in the list have the same length as the expected length\n    if len(set(map(len, tuples_list))) != 1:\n        return 'All tuples do not have same length'\n    else:\n        return 'All tuples have same length'\n\n# Test cases\nprint(get_equal([(11, 22, 33), (44, 55, 66)], 3))  # Output: 'All tuples have same length'\nprint(get_equal([(1, 2, 3), (4, 5, 6, 7)], 3))      # Output: 'All tuples do not have same length'\nprint(get_equal([(1, 2), (3, 4)], 2))               # Output: 'All tuples have same length'",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ]
  },
  {
    "mbpp_id": 71,
    "problem_statement": "Write a function to sort a list of elements using comb sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    swapped = True\n    \n    while gap != 1 or swapped == True:\n        # Update the gap value for a next comb\n        gap = max(1, int(gap / 1.3))\n        \n        # Initialize swapped as False so that we can check if swap happened or not\n        swapped = False\n        \n        # Compare every 'gap' number of elements\n        for i in range(0, n-gap):\n            if arr[i] > arr[i+gap]:\n                # Swap elements\n                arr[i], arr[i+gap] = arr[i+gap], arr[i]\n                swapped = True\n                \n    return arr",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ]
  },
  {
    "mbpp_id": 72,
    "problem_statement": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - name 'math' is not defined",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dif_Square(n):\n    # Check if n is negative and even\n    if n < 0:\n        n = -n\n    elif n % 2 != 0:\n        return False\n    \n    # Calculate m^2 + n such that m * m - n = x\n    # Since we want n on right side, we need to find m where m*m - n == 0 \n    # We use math.sqrt for calculating the square root and then square it back to check if we get the original number.\n    m = int((math.sqrt(8*n + 1) - 1) / 2)\n    \n    return m * m == n",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ]
  },
  {
    "mbpp_id": 73,
    "problem_statement": "Write a function to split the given string with multiple delimiters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef multiple_split(input_string):\n    # Using regex to find all substrings between specified delimiters\n    parts = re.split(r'\\s*\\*\\s*', input_string)\n    return [part.strip() for part in parts if part.strip()]\n\n# Test cases\nprint(multiple_split('Forces of the \\ndarkness*are coming into the play.'))\nprint(multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.'))\nprint(multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.'))",
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ]
  },
  {
    "mbpp_id": 74,
    "problem_statement": "Write a function to check whether it follows the sequence given in the patterns array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_samepatterns(patterns, patterns_2):\n    if len(patterns) != len(patterns_2):\n        return False\n    \n    for i in range(len(patterns)):\n        if sorted(patterns[i]) != sorted(patterns_2[i]):\n            return False\n    \n    return True",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ]
  },
  {
    "mbpp_id": 75,
    "problem_statement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_tuples(test_list, divisor):\n    # Use filter with key as lambda returning tuple element modulo divisor\n    result = list(filter(lambda x: all([y % divisor == 0 for y in x]), test_list))\n    return result",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ]
  },
  {
    "mbpp_id": 76,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Squares(length,width):\n    \"\"\"\n    This function takes two integers as input and returns the total number of squares that can be formed within a rectangle with given dimensions.\n    \n    Parameters:\n    length (int): The height of the rectangle.\n    width (int): The width of the rectangle.\n    \n    Returns:\n    int: Total number of squares that can be formed within the rectangle.\n    \"\"\"\n    # Calculate the total number of squares\n    total_squares = 0\n    for i in range(length + 1):\n        for j in range(width + 1):\n            if i * j >= length * width:\n                break\n            elif i == j:\n                total_squares += 1\n            else:\n                continue\n    return total_squares",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 77,
    "problem_statement": "Write a python function to find the difference between sum of even and odd digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Diff(num):\n    # Convert number to string for easier digit extraction\n    num_str = str(num)\n    \n    # Initialize sums for even and odd digits\n    even_sum = 0\n    odd_sum = 0\n    \n    # Iterate through each digit in the number\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)  # Add even digit to even_sum\n        else:\n            odd_sum += int(digit)   # Add odd digit to odd_sum\n            \n    # Calculate and return the difference between sums of even and odd digits\n    return abs(even_sum - odd_sum)\n\n# Test cases\nprint(is_Diff(12345))  # Expected output: False\nprint(is_Diff(1212112))  # Expected output: True\nprint(is_Diff(1212))  # Expected output: False",
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ]
  },
  {
    "mbpp_id": 78,
    "problem_statement": "Write a python function to find number of integers with odd number of set bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    while n:\n        if n % 2 == 1:\n            count += 1\n        n >>= 1\n    return count",
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ]
  },
  {
    "mbpp_id": 79,
    "problem_statement": "Write a python function to check whether the length of the word is odd or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    # Check if the length of the word is odd\n    if len(word) % 2 != 0:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ]
  },
  {
    "mbpp_id": 80,
    "problem_statement": "Write a function to find the nth tetrahedral number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula n*(n+1)*(n+2)/6\n    return round(n * (n + 1) * (n + 2) / 6)",
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ]
  },
  {
    "mbpp_id": 81,
    "problem_statement": "Write a function to zip the two given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def zip_tuples(tup1, tup2):\n    return list(zip(tup1, tup2))\n\n# Test cases\nprint(zip_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6)))  # Expected output: [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nprint(zip_tuples((8, 9, 5, 6, 10, 11), (2, 6, 7)))  # Expected output: [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nprint(zip_tuples((9, 10, 6, 7, 11, 12), (3, 7, 8)))  # Expected output: [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ]
  },
  {
    "mbpp_id": 82,
    "problem_statement": "Write a function to find the volume of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculates and returns the volume of a sphere given its radius.\n    \n    Parameters:\n        radius (float): The radius of the sphere.\n        \n    Returns:\n        float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)\n\n# Check function with provided data points\nassert abs(volume_sphere(10)-4188.790204786391) < 1e-6\nassert abs(volume_sphere(25)-65449.84694978735) < 1e-6\nassert abs(volume_sphere(20)-33510.32163829113) < 1e-6\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ]
  },
  {
    "mbpp_id": 83,
    "problem_statement": "Write a python function to find the character made by adding all the characters of the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Char(input_string):\n    result = \"\"\n    for char in input_string:\n        # Convert each character into ASCII value and add it to 'result'\n        ascii_val = ord(char)\n        if not result:\n            result += chr(ascii_val + 1)  # Add next ASCII value starting from 'a'\n        else:\n            result += chr(ord(result[-1]) + 1)  # Add next ASCII value starting from 'b'\n    return result",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ]
  },
  {
    "mbpp_id": 84,
    "problem_statement": "Write a function to find the n-th number in newman conway sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        # Initialize the first two numbers of the sequence\n        a, b = 1, 1\n        for _ in range(3, n + 1):\n            # The next number is the sum of the previous two numbers\n            c = a + b\n            # Update a and b for the next iteration\n            a, b = b, c\n        return b\n\n# Test the function with provided data points\nprint(sequence(10))  # Expected output: 6\nprint(sequence(2))   # Expected output: 1\nprint(sequence(3))   # Expected output: 2",
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ]
  },
  {
    "mbpp_id": 85,
    "problem_statement": "Write a function to find the surface area of a sphere.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Parameters:\n    - radius: The radius of the sphere\n    \n    Returns:\n    float: The calculated surface area of the sphere\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n# Test Cases\nprint(surfacearea_sphere(10)) # Expected output: ~1256.6370614359173\nprint(surfacearea_sphere(15)) # Expected output: ~2827.4333882308138\nprint(surfacearea_sphere(20)) # Expected output: ~5026.548245743669",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ]
  },
  {
    "mbpp_id": 86,
    "problem_statement": "Write a function to find nth centered hexagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the n-th centered hexagonal number.\n    \n    Parameters:\n    n (int): The order of the centered hexagonal number to be calculated.\n    \n    Returns:\n    int: The n-th centered hexagonal number.\n    \"\"\"\n    return n * ((6*n - 3)/2)\n\n# Check function with provided data points\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217\n\nprint(\"All checks passed.\")",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ]
  },
  {
    "mbpp_id": 87,
    "problem_statement": "Write a function to merge three dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ]
  },
  {
    "mbpp_id": 88,
    "problem_statement": "Write a function to get the frequency of the elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def freq_count(lst):\n    # Initialize an empty dictionary to store frequencies\n    freq_dict = {}\n    \n    # Iterate through each element in the list\n    for num in lst:\n        # If the number is already in the dictionary, increment its count\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            # Otherwise, add the number to the dictionary with a count of 1\n            freq_dict[num] = 1\n    \n    return freq_dict",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ]
  },
  {
    "mbpp_id": 89,
    "problem_statement": "Write a function to find the closest smaller number than n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def closest_num(n):\n    \"\"\"\n    This function takes an integer 'n' and returns the largest integer less than 'n'.\n    \n    Parameters:\n    - n (int): An integer.\n    \n    Returns:\n    int: The largest integer less than 'n'.\n    \"\"\"\n    # Subtracting 1 from 'n' gives us the next lower number if it exists.\n    # If not, we return n itself as no smaller number is available.\n    return n-1 if n > 1 else n",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ]
  },
  {
    "mbpp_id": 90,
    "problem_statement": "Write a python function to find the length of the longest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words):\n    # Calculate the maximum length of words in the list\n    max_length = max(len(word) for word in words)\n    return max_length",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ]
  },
  {
    "mbpp_id": 91,
    "problem_statement": "Write a function to check if a substring is present in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_substring(lst, sub_str):\n    for item in lst:\n        if sub_str in item:\n            return True\n    return False",
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ]
  },
  {
    "mbpp_id": 92,
    "problem_statement": "Write a function to check whether the given number is undulating or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_undulating(s):\n    # Check if s contains only two different characters\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    \n    # If there's more than one unique character or more than one of each, it's not undulating\n    if len(char_count) > 2 or list(char_count.values()).count(list(char_count.values())[0]) > 1:\n        return False\n    return True",
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ]
  },
  {
    "mbpp_id": 93,
    "problem_statement": "Write a function to calculate the value of 'a' to the power 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result",
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ]
  },
  {
    "mbpp_id": 94,
    "problem_statement": "Write a function to extract the index minimum value record from the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: min() arg is an empty sequence"
    ],
    "generated_code": "def index_minimum(lst):\n    # Find the minimum value in the list of elements\n    min_value = min([x for x, y in lst])\n    \n    # Return the name corresponding to the tuple with the minimum element\n    return min(x for x, y in lst if y == min_value)[0]\n\n# Test cases\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ]
  },
  {
    "mbpp_id": 95,
    "problem_statement": "Write a python function to find the minimum length of sublist.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Min_Length(lst):\n    # Initialize the maximum length found so far with the first sublist's length\n    max_length = len(max(lst, key=len))\n    \n    # Iterate through each sublist in the list and update max_length if a shorter one is found\n    for sublist in lst:\n        current_length = len(sublist)\n        if current_length < max_length:\n            max_length = current_length\n    \n    return max_length",
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ]
  },
  {
    "mbpp_id": 96,
    "problem_statement": "Write a python function to find the number of divisors of a given integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "mbpp_id": 97,
    "problem_statement": "Write a function to find frequency count of list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_lists(lst):\n    result = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "mbpp_id": 98,
    "problem_statement": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ]
  },
  {
    "mbpp_id": 99,
    "problem_statement": "Write a function to convert the given decimal number to its binary equivalent.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decimal_to_binary(decimal_number):\n    return bin(decimal_number)[2:]\n\n# Test cases\nprint(decimal_to_binary(8))   # Expected output: \"1000\"\nprint(decimal_to_binary(18))  # Expected output: \"10010\"\nprint(decimal_to_binary(7))   # Expected output: \"111\"",
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ]
  },
  {
    "mbpp_id": 100,
    "problem_statement": "Write a function to find the next smallest palindrome of a specified number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n\n# Test cases\nprint(next_smallest_palindrome(99))   # Expected output: 101\nprint(next_smallest_palindrome(1221)) # Expected output: 1331\nprint(next_smallest_palindrome(120))  # Expected output: 121",
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "mbpp_id": 101,
    "problem_statement": "Write a function to find the kth element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def kth_element(arr, n, k):\n    if not arr or not isinstance(n, int) or n < 1:\n        raise ValueError(\"Invalid input\")\n    \n    for i in range(k-1):\n        if arr[i] == arr[k]:\n            return arr[i]\n    return arr[k]\n\n# Example usage and test cases\nprint(kth_element([12,3,5,7,19], 5, 2)) # Output: 3\nprint(kth_element([17,24,8,23], 4, 3))   # Output: 8\nprint(kth_element([16,21,25,36,4], 5, 4))# Output: 36",
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ]
  },
  {
    "mbpp_id": 102,
    "problem_statement": "Write a function to convert snake case string to camel case string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def snake_to_camel(snake_str):\n    return ''.join(word.capitalize() or '_' for word in snake_str.split('_'))\n\n# Example usage:\nprint(snake_to_camel('python_program'))  # Output: 'PythonProgram'\nprint(snake_to_camel('python_language'))  # Output: 'PythonLanguage'\nprint(snake_to_camel('programming_language'))  # Output: 'ProgrammingLanguage'",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "mbpp_id": 103,
    "problem_statement": "Write a function to find eulerian number a(n, m).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def eulerian_num(n, m):\n    if n == 0:\n        return 1\n    elif n < m * 2:\n        return int((m + 1)**n / (m + 1))\n    else:\n        result = 0\n        for i in range(m - 1, n - 1):\n            result += ((-1)**i * m**i * comb(n - 1, i) * (m + 1)**(n - i - 1)) // (m + 1)\n        return int(result)\n\n# Function to calculate combination using formula\ndef comb(a, b):\n    res = 1\n    for i in range(b):\n        res *= (a - i)\n        res //= (i + 1)\n    return res",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "mbpp_id": 104,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lists_of_strings):\n    return [sorted(sublist) for sublist in lists_of_strings]\n\n# Test cases\nprint(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])) # [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nprint(sort_sublists([[\"red \", \"green\"], [\"blue \", \"black\"], [\"orange\", \"brown\"]])) # [['red ', 'green'], ['black', 'blue '], ['orange', 'brown']]\nprint(sort_sublists([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]])) # [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']])",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "mbpp_id": 105,
    "problem_statement": "Write a python function to count true booleans in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(true_booleans):\n    \"\"\"\n    Counts and returns the number of True booleans in the provided list.\n    \n    Args:\n        true_booleans (list): A list containing boolean values.\n        \n    Returns:\n        int: The count of True booleans in the list.\n    \"\"\"\n    # Initialize a counter for counting True booleans\n    count_true = 0\n    \n    # Iterate through each element in the list\n    for bool_val in true_booleans:\n        if bool_val:\n            count_true += 1\n            \n    return count_true",
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "mbpp_id": 106,
    "problem_statement": "Write a function to add the given list to the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def add_lists(lists, tuples):\n    # Convert lists and tuples into separate sets of values for easy merging\n    merged_list = set()\n    for lst in lists:\n        merged_list.update(lst)\n    for tup in tuples:\n        merged_list.update(tup)\n\n    # Convert the set back into a tuple\n    result_tuple = tuple(merged_list)\n    return result_tuple\n\n# Test cases\nprint(add_lists([5, 6, 7], (9, 10)))  # Expected output: (9, 10, 5, 6, 7)\nprint(add_lists([6, 7, 8], (10, 11)))  # Expected output: (10, 11, 6, 7, 8)\nprint(add_lists([7, 8, 9], (11, 12)))  # Expected output: (11, 12, 7, 8, 9)",
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ]
  },
  {
    "mbpp_id": 107,
    "problem_statement": "Write a python function to count hexadecimal numbers for a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Hexadecimal(start, end):\n    hex_numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    count = 0\n    \n    # Iterate through each number in the range [start, end]\n    for num in range(start, end + 1):\n        # Check if the number is greater than 0 and ends with one of the hexadecimal digits\n        if num > 0 and hex(num)[-1] in hex_numbers:\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ]
  },
  {
    "mbpp_id": 108,
    "problem_statement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\nfrom heapq import heappush, heappop\nfrom itertools import chain\n\ndef merge_sorted_lists(*lists):\n    # Initialize a max-heap with all elements from lists in reverse order.\n    # This ensures that we always pop the largest element at the beginning of each iteration.\n    merged_list = list(chain.from_iterable(lists))\n    heap = [(num, index) for index, lst in enumerate(lists) for num in reversed(lst)]\n    \n    while len(heap) > 1:\n        # Pop the smallest and second-smallest elements from the heap.\n        smallest, _ = heappop(heap)\n        second_smallest, _ = heappop(heap)\n        \n        # Push the next element from both heaps back onto the heap.\n        if heap:\n            next_second_smallest, _ = heappop(heap)\n            heappush(heap, (smallest + next_second_smallest, heap[-1][1]))\n        else:\n            heappush(heap, (second_smallest, -1))  # Add it as the first value\n        \n    return [item[0] for item in heap]\n\n# Test cases\nassert merge_sorted_lists([25, 24, 15, 4, 5, 29, 110],\n                           [19, 20, 11, 56, 25, 233, 154],\n                           [24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\nassert merge_sorted_lists([1, 3, 5, 6, 8, 9],\n                          [2, 5, 7, 11],\n                          [1, 4, 7, 8, 12]) == [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n\nassert merge_sorted_lists([18, 14, 10, 9, 8,",
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ]
  },
  {
    "mbpp_id": 109,
    "problem_statement": "Write a python function to find the count of rotations of a binary string with odd value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: object of type 'int' has no len()"
    ],
    "generated_code": "def odd_Equivalent(binary_string, n):\n    \"\"\"\n    This function calculates the number of distinct rotations of a binary string that have an odd value.\n    \n    :param binary_string: A binary string.\n    :param n: The number of times the binary string is rotated.\n    :return: The count of unique rotations having odd value as their equivalent binary number.\n    \"\"\"\n    def count_odd_rotations(binary_str):\n        \"\"\" Helper function to count the number of unique rotations for given binary string.\"\"\"\n        odd_count = sum(1 for i in range(len(binary_str)) if int(binary_str[i:]) > int(binary_str))\n        return odd_count\n    \n    # Calculate the number of unique rotations after considering all possible rotations.\n    total_unique_ones = len(binary_string)\n    current_total_ones = count_odd_rotations(binary_string)\n    \n    while True:\n        current_total_ones = count_odd_rotations(current_total_ones)\n        \n        if current_total_ones == total_unique_ones:\n            break\n        \n        n -= 1\n    \n    return n\n\n# Test cases to verify the correctness of the solution\nprint(odd_Equivalent(\"011001\", 6))  # Expected output: 3\nprint(odd_Equivalent(\"11011\", 5))   # Expected output: 4\nprint(odd_Equivalent(\"1010\", 4))    # Expected output: 2",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ]
  },
  {
    "mbpp_id": 110,
    "problem_statement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_missing(ranges, start, end):\n    result = []\n    for i in range(start, min(end + 1, len(ranges)) - 1):\n        start_range, end_range = ranges[i]\n        if start >= start_range:\n            if start > end_range:\n                continue\n            else:\n                result.append((start, end_range))\n        if end <= end_range:\n            if end < start_range:\n                continue\n            else:\n                result.append((end_range, end))\n    return result",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ]
  },
  {
    "mbpp_id": 111,
    "problem_statement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def common_in_nested_lists(lists):\n    # Flatten the nested lists into one list of items\n    flattened_list = sum(lists, [])\n    \n    # Find and return unique common elements\n    return set(flattened_list)",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ]
  },
  {
    "mbpp_id": 112,
    "problem_statement": "Write a python function to find the perimeter of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'perimeter' is not defined",
      "Test 2: FAIL - name 'perimeter' is not defined",
      "Test 3: FAIL - name 'perimeter' is not defined"
    ],
    "generated_code": "def calculate_perimeter(r, h):\n    # Calculate the perimeter of the cylinder\n    return 2 * r * (r + h)\n\n# Test cases\nprint(calculate_perimeter(2, 4))  # Expected output: 12\nprint(calculate_perimeter(1, 2))  # Expected output: 6\nprint(calculate_perimeter(3, 1))  # Expected output: 8",
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ]
  },
  {
    "mbpp_id": 113,
    "problem_statement": "Write a function to check if a string represents an integer or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_integer(s):\n    # Check if the string is empty or contains non-digit characters\n    return s.isdigit() and len(s) > 0",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ]
  },
  {
    "mbpp_id": 114,
    "problem_statement": "Write a function to assign frequency to each tuple in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def assign_freq(lst):\n    max_count = max(len(t) for t in lst)\n    freqs = {tuple(t): i + 1 for i, t in enumerate(lst)}\n    assigned_frequencies = [(freqs[tuple(i)] if len(i) == max_count else None) for i in lst]\n    result = []\n    for item in assigned_frequencies:\n        temp = []\n        for sub_item in item:\n            temp.append(str(sub_item))\n        result.append(tuple(temp))\n    return result",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ]
  },
  {
    "mbpp_id": 115,
    "problem_statement": "Write a function to check whether all dictionaries in a list are empty or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'empty_dit' is not defined",
      "Test 2: FAIL - name 'empty_dit' is not defined",
      "Test 3: FAIL - name 'empty_dit' is not defined"
    ],
    "generated_code": "def is_all_dicts_empty(dicts_list):\n    # Check if every dictionary in the list is empty\n    return len([x for x in dicts_list if x]) == 0",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ]
  },
  {
    "mbpp_id": 116,
    "problem_statement": "Write a function to convert a given tuple of positive integers into an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_int(tup):\n    # Convert each element in the tuple to string and join them together\n    return int(''.join(map(str, tup)))",
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ]
  },
  {
    "mbpp_id": 117,
    "problem_statement": "Write a function to convert all possible convertible elements in the list to float.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def list_to_float(lst):\n    return [(float(a), b) if isinstance(b, str) else (a, float(b)) for a, b in lst]",
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ]
  },
  {
    "mbpp_id": 118,
    "problem_statement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_list(input_string):\n    return input_string.split()",
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ]
  },
  {
    "mbpp_id": 119,
    "problem_statement": "Write a python function to find the element that appears only once in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search(nums, n):\n    left = 0\n    right = len(nums) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the middle element is the unique one\n        if mid == 0 and nums[mid] != nums[0]:\n            return nums[mid]\n        \n        # Check if the next element is different from the current middle element\n        if mid < len(nums) - 1 and nums[mid] != nums[mid + 1]:\n            return nums[mid + 1]\n        \n        # If the current middle element is not unique, move to the right half\n        if nums[left] == nums[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return None",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ]
  },
  {
    "mbpp_id": 120,
    "problem_statement": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_product_tuple(tuples_list):\n    # Sort the tuples based on the first element in descending order and then by the second element in ascending order\n    sorted_tuples = sorted(tuples_list, key=lambda x: (-x[0], x[1]))\n    \n    # Calculate the maximum product for each pair\n    max_products = [a * b for a, b in sorted_tuples]\n    \n    return max(max_products)",
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ]
  },
  {
    "mbpp_id": 121,
    "problem_statement": "Write a function to find the triplet with sum of the given array",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 2: FAIL - check_triplet() takes 3 positional arguments but 4 were given",
      "Test 3: FAIL - check_triplet() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def check_triplet(arr, target_sum, expected_sum):\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == expected_sum:\n            return True\n        elif current_sum < expected_sum:\n            left += 1\n        else:\n            right -= 1\n            \n    return False\n\n# Test cases\nprint(check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6)) # Should return True\nprint(check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6)) # Should return False\nprint(check_triplet([10, 4, 2, 3, 5], 5, 15)) # Should return True",
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ]
  },
  {
    "mbpp_id": 122,
    "problem_statement": "Write a function to find n’th smart number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def isSmart(num):\n    i = 1\n    while True:\n        if sum(map(int, str(i))) > num:\n            break\n        elif sum(map(int, str(i))) == num:\n            j = 1\n            while True:\n                temp = list(str(j))\n                k = 0\n                for digit in temp:\n                    k += int(digit)\n                if k < num:\n                    j += 1\n                else:\n                    return i * j\n        i += 1\n\ndef smartNumber(n):\n    count = 1\n    while True:\n        result = isSmart(count)\n        if result >= n:\n            return result\n        count += 1",
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ]
  },
  {
    "mbpp_id": 123,
    "problem_statement": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def amicable_numbers_sum(n):\n    def is_amicable(x):\n        s = sum([d for d in range(1, x // 2 + 1) if x % d == 0])\n        return s > x and x == sum([d for d in range(1, s // 2 + 1) if s % d == 0])\n\n    return sum(x for x in range(1, n+1) if is_amicable(x))",
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ]
  },
  {
    "mbpp_id": 124,
    "problem_statement": "Write a function to get the angle of a complex number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef angle_complex(x,y):\n    \"\"\"\n    This function calculates the angle of a complex number.\n    \n    Parameters:\n    x (complex): The real part of the complex number.\n    y (complex): The imaginary part of the complex number.\n    \n    Returns:\n    float: The angle in radians between -pi and pi for the given complex number.\n    \"\"\"\n    return cmath.phase(complex(x, y))",
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ]
  },
  {
    "mbpp_id": 125,
    "problem_statement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_length(binary_str, n):\n    max_diff = float('-inf')\n    current_diff = 0\n    \n    for i in range(n):\n        if binary_str[i] == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        max_diff = max(max_diff, current_diff)\n    \n    # Calculate the length with the last character as '0' or '1'\n    last_char = binary_str[-1]\n    max_diff = max(max_diff, current_diff + (len(binary_str) - len(binary_str.rstrip(last_char))))\n    \n    return max_diff",
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ]
  },
  {
    "mbpp_id": 126,
    "problem_statement": "Write a python function to find the sum of common divisors of two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_of_common_divisors(x, y):\n    \"\"\"\n    Find and return the sum of all positive integers which are both divisors of x and divisors of y.\n    \n    Parameters:\n    - x: First number\n    - y: Second number\n    \n    Returns:\n    - The sum of common divisors of x and y\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, min(x, y) + 1):\n        if x % i == 0 and y % i == 0:\n            divisor_sum += i\n    return divisor_sum",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ]
  },
  {
    "mbpp_id": 127,
    "problem_statement": "Write a function to multiply two integers without using the * operator in python.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_int(a, b):\n    result = 0\n    for _ in range(b):\n        result += a\n    return result",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ]
  },
  {
    "mbpp_id": 128,
    "problem_statement": "Write a function to shortlist words that are longer than n from a given list of words.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def long_words(n, word_list):\n    # Return a new list containing words from word_list that have more than n characters\n    return [word for word in word_list if len(word) > n]",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ]
  },
  {
    "mbpp_id": 129,
    "problem_statement": "Write a function to calculate magic square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'magic_square_test' is not defined",
      "Test 2: FAIL - name 'magic_square_test' is not defined",
      "Test 3: FAIL - name 'magic_square_test' is not defined"
    ],
    "generated_code": "def is_magic_square(matrix):\n    \"\"\"\n    Checks if a given matrix represents a magic square.\n    \n    Parameters:\n    matrix (list of list of int): The matrix to check.\n    \n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    total_sum = sum(sum(row) for row in matrix)\n\n    # Calculate sums of rows and columns\n    row_sums = {sum(row) for row in matrix}\n    col_sums = {sum(matrix[i][j] for i in range(n)) for j in range(n)}\n\n    return len(row_sums) == 1 and len(col_sums) == 1 and all([row_sum == total_sum // n for row_sum in row_sums]) and all([col_sum == total_sum // n for col_sum in col_sums])\n\n# Test cases\nprint(is_magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))  # Expected output: True\nprint(is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))  # Expected output: True\nprint(is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 7]]))  # Expected output: False",
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ]
  },
  {
    "mbpp_id": 130,
    "problem_statement": "Write a function to find the item with maximum frequency in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef max_occurrences(lst):\n    \"\"\"\n    Finds the element with the highest occurrence count in the provided list.\n    \n    Parameters:\n    lst (list): A list of elements where occurrences need to be counted.\n    \n    Returns:\n    tuple: The most frequently occurring element and its occurrence count.\n    \"\"\"\n    # Counting the frequency of each element in the list\n    counts = Counter(lst)\n    # Finding the element with the maximum occurrence\n    most_common_element, _ = counts.most_common(1)[0]\n    return most_common_element, counts[most_common_element]\n\n# Test cases to verify the correctness of the function\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == (2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18]) == (8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10]) == (20, 3)\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ]
  },
  {
    "mbpp_id": 131,
    "problem_statement": "Write a python function to reverse only the vowels of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n            \n    return ''.join(s_list)\n\n# Test cases\nprint(reverse_vowels(\"Python\")) # Output: \"Python\"\nprint(reverse_vowels(\"USA\")) # Output: \"ASU\"\nprint(reverse_vowels(\"ab\")) # Output: \"ab\"",
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ]
  },
  {
    "mbpp_id": 132,
    "problem_statement": "Write a function to convert tuple to a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tup_string(tup):\n    # Convert the tuple to a string using join method and string concatenation\n    return ''.join(tup)",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ]
  },
  {
    "mbpp_id": 133,
    "problem_statement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_negativenum(lst):\n    return sum(filter(lambda x: x < 0, lst))",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ]
  },
  {
    "mbpp_id": 134,
    "problem_statement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_last(arr, p, q):\n    # Perform q operations on arr where each operation toggles all elements at positions divisible by i for some integer i.\n    # Check if the last element is even and not affected by the operations performed.\n    while p > 0:\n        if arr[0] % q == 0:\n            for i in range(1, len(arr)):\n                arr[i] = arr[i] ^ q\n        p -= 1\n    \n    return 'EVEN' if arr[-1] % 2 == 0 else 'ODD'",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ]
  },
  {
    "mbpp_id": 135,
    "problem_statement": "Write a function to find the nth hexagonal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hexagonal_num(n):\n    # Formula to calculate the nth hexagonal number: n * (2n - 1)\n    return n * (2 * n - 1)\n\n# Test cases to verify the correctness of the function\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ]
  },
  {
    "mbpp_id": 136,
    "problem_statement": "Write a function to calculate electricity bill.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_electbill(kWh_used):\n    # Calculate electricity bill based on kWh used and standard rate of 11 cents per kWh.\n    # Assuming a flat service charge of $12 for all users regardless of kWh usage.\n    return int((kWh_used * 11) + 12)",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ]
  },
  {
    "mbpp_id": 137,
    "problem_statement": "Write a function to find the ration of zeroes in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def zero_count(arr):\n    # Counting zeros in the array\n    count = sum(1 for num in arr if num == 0)\n    # Returning the ratio of zeros in the array\n    return count / len(arr)\n\n# Example usage and test cases\nprint(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))  # Output should be approximately 0.15\nprint(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))   # Output should be 0.00\nprint(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]))          # Output should be approximately 0.00",
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ]
  },
  {
    "mbpp_id": 138,
    "problem_statement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    \n    while n % 2 == 0 and n > 1:\n        n //= 2\n    \n    return n == 1",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ]
  },
  {
    "mbpp_id": 139,
    "problem_statement": "Write a function to find the circumference of a circle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ]
  },
  {
    "mbpp_id": 140,
    "problem_statement": "Write a function to extract elements that occur singly in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_singly(tuple_list):\n    # Convert each inner tuple into a set and remove duplicates\n    unique_elements = []\n    for t in tuple_list:\n        unique_elements.extend(set(t))\n    return unique_elements",
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ]
  },
  {
    "mbpp_id": 141,
    "problem_statement": "Write a function to sort a list of elements using pancake sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - attempt to assign sequence of size 1 to extended slice of size 0",
      "Test 2: FAIL - attempt to assign sequence of size 1 to extended slice of size 0",
      "Test 3: FAIL - attempt to assign sequence of size 1 to extended slice of size 0"
    ],
    "generated_code": "def pancake_sort(lst):\n    def flip(arr, index):\n        \"\"\"Reverse the first `index` elements in the given array.\"\"\"\n        for i in range(index // 2 + 1):\n            arr[i], arr[index - i] = arr[index - i], arr[i]\n\n    size = len(lst)\n    while size > 1:\n        # Find the maximum element's index within the unsorted portion\n        max_idx = lst.index(max(lst[:size]))\n        \n        # Move the maximum element to its correct position at the end if it hasn't already been there\n        if max_idx != size - 1:\n            lst[:max_idx+1], lst[max_idx+1:max_idx-1:-1] = lst[max_idx+1:max_idx-1:-1], lst[:max_idx+1]\n            \n        # Flip the entire sorted portion to its correct place\n        flip(lst, size - 1)\n        size -= 1\n    return lst",
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ]
  },
  {
    "mbpp_id": 142,
    "problem_statement": "Write a function to count the same pair in three given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_samepair(list1, list2, list3):\n    return len(set(zip(list1, list2, list3)))",
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ]
  },
  {
    "mbpp_id": 143,
    "problem_statement": "Write a function to find number of lists present in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_lists(test_tuple):\n    # Initialize count variable\n    list_count = 0\n    \n    # Iterate through each element in the tuple\n    for item in test_tuple:\n        if isinstance(item, list):\n            list_count += 1\n            \n    return list_count",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ]
  },
  {
    "mbpp_id": 144,
    "problem_statement": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef sum_Pairs(arr: List[int], n: int) -> int:\n    total_sum = 0\n    \n    # Calculate the sum of all elements in the array\n    for num in arr:\n        total_sum += num\n    \n    # Subtract twice the sum of unique numbers from total sum\n    return total_sum - 2 * sum(num for num in set(arr))",
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ]
  },
  {
    "mbpp_id": 145,
    "problem_statement": "Write a python function to find the maximum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def max_Abs_Diff(arr, k):\n    # Sort the array to easily access both ends of the array for comparison.\n    arr.sort()\n    \n    # Initialize the result with the maximum possible absolute difference.\n    res = abs(arr[-1] - arr[0])\n    \n    # Iterate through the sorted array from second element to last element.\n    for i in range(1, len(arr)):\n        # Update the result if the current difference is greater than the previous result.\n        res = min(res, abs(arr[i] - arr[i-1]))\n        \n    # Return the minimum value among all differences found.\n    return res\n\n# Test the function with provided data points.\nprint(max_Abs_Diff([2,1,5,3], 4))   # Expected output: 4\nprint(max_Abs_Diff([9,3,2,5,1], 5)) # Expected output: 8\nprint(max_Abs_Diff([3,2,1], 3))     # Expected output: 2",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ]
  },
  {
    "mbpp_id": 146,
    "problem_statement": "Write a function to find the ascii value of total characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ascii_value_string(s):\n    # Initialize sum to store the total ASCII values\n    total_ascii = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Add the ASCII value of the current character to the sum\n        total_ascii += ord(char)\n    \n    return total_ascii",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ]
  },
  {
    "mbpp_id": 147,
    "problem_statement": "Write a function to find the maximum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_path_sum(triangle, row_index, col_index):\n    # Base case: if we've reached the bottom of the triangle, return the current element\n    if row_index == len(triangle) - 1:\n        return triangle[row_index][col_index]\n    \n    # Recursively calculate the maximum path sum for the next row and column index\n    left = max_path_sum(triangle, row_index + 1, col_index)\n    right = max_path_sum(triangle, row_index + 1, col_index + 1)\n    \n    # Return the maximum value between moving down diagonally up or straight ahead\n    return triangle[row_index][col_index] + max(left, right)\n\n# Example usage:\ntriangle_example_1 = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]\nprint(max_path_sum(triangle_example_1, 0, 0))  # Expected output: 14\n\ntriangle_example_2 = [[13, 0, 0], [7, 4, 0], [2, 4, 6]]\nprint(max_path_sum(triangle_example_2, 0, 0))  # Expected output: 24\n\ntriangle_example_3 = [[2, 0, 0], [11, 18, 0], [21, 25, 33]]\nprint(max_path_sum(triangle_example_3, 0, 0))  # Expected output: 53",
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ]
  },
  {
    "mbpp_id": 148,
    "problem_statement": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_digits_twoparts(n):\n    # Convert the number to a string and calculate the sum of its digits\n    digit_sum = sum(int(digit) for digit in str(n))\n    \n    return digit_sum",
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ]
  },
  {
    "mbpp_id": 149,
    "problem_statement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def longest_subseq_with_diff_one(arr, diff):\n    n = len(arr)\n    dp = [0] * (n + 1)\n\n    max_len = 0\n\n    for i in range(1, n + 1):\n        for j in range(i - 1, -1, -1):\n            if abs(arr[i - 1] - arr[j]) == diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_len = max(max_len, dp[i])\n\n    return max_len\n\n# Test cases\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7))  # Expected output: 6\nprint(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7))  # Expected output: 3\nprint(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8))  # Expected output: 7",
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ]
  },
  {
    "mbpp_id": 150,
    "problem_statement": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def does_Contain_B(a, b, c):\n    # Check if 'a' and 'c' have opposite signs and their absolute values differ by exactly 'b'\n    if (abs(a) != abs(c)) or ((a < 0 and c > 0) or (a > 0 and c < 0)):\n        return False\n    else:\n        return True",
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ]
  },
  {
    "mbpp_id": 151,
    "problem_statement": "Write a python function to check whether the given number is co-prime or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef is_coprime(a, b):\n    \"\"\"\n    This function checks if two numbers 'a' and 'b' are coprime.\n    \n    Args:\n        a (int): The first number.\n        b (int): The second number.\n        \n    Returns:\n        bool: True if 'a' and 'b' are coprime, False otherwise.\n    \"\"\"\n    return math.gcd(a, b) == 1",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ]
  },
  {
    "mbpp_id": 152,
    "problem_statement": "Write a function to sort the given array by using merge sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    def merge(left, right):\n        sorted_arr = []\n        left_index, right_index = 0, 0\n        \n        while left_index < len(left) and right_index < len(right):\n            if left[left_index] < right[right_index]:\n                sorted_arr.append(left[left_index])\n                left_index += 1\n            else:\n                sorted_arr.append(right[right_index])\n                right_index += 1\n                \n        sorted_arr.extend(left[left_index:])\n        sorted_arr.extend(right[right_index:])\n        \n        return sorted_arr\n    \n    mid = len(arr) // 2\n    left_half = merge_sort(arr[:mid])\n    right_half = merge_sort(arr[mid:])\n    \n    return merge(left_half, right_half)\n\n# Test cases\nprint(merge_sort([3, 4, 2, 6, 5, 7, 1, 9]))  # Expected output: [1, 2, 3, 4, 5, 6, 7, 9]\nprint(merge_sort([7, 25, 45, 78, 11, 33, 19]))  # Expected output: [7, 11, 19, 25, 33, 45, 78]\nprint(merge_sort([3, 1, 4, 9, 8]))  # Expected output: [1, 3, 4, 8, 9]",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ]
  },
  {
    "mbpp_id": 153,
    "problem_statement": "Write a function to find the vertex of a parabola.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)\n\n# Test cases\nprint(parabola_vertex(5, 3, 2))  # Expected output: (-0.3, 1.55)\nprint(parabola_vertex(9, 8, 4))  # Expected output: (-0.4444444444444444, 2.2222222222222223)\nprint(parabola_vertex(2, 4, 6))  # Expected output: (-1.0, 4.0)",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ]
  },
  {
    "mbpp_id": 154,
    "problem_statement": "Write a function to extract every specified element from a given two dimensional list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def specified_element(matrix, index):\n    result = []\n    for sublist in matrix:\n        if len(sublist) > index:\n            result.append(sublist[index])\n    return result",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ]
  },
  {
    "mbpp_id": 155,
    "problem_statement": "Write a python function to toggle all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(number):\n    # Initialize an empty string to hold the toggled binary representation\n    toggled_binary = ''\n    \n    # Loop through each bit in the binary representation of the input number\n    for i in range(32):  # Assuming a 32-bit integer\n        if (number >> i) & 1 == 0:  # Check if the ith bit is 0\n            toggled_binary += '1'  # Toggle the bit and add it to the result\n        else:\n            toggled_binary += '0'\n    \n    # Convert the toggled binary back to decimal form\n    return int(toggled_binary, 2)\n\n# Test cases\nprint(even_bit_toggle_number(10))  # Expected output: 0\nprint(even_bit_toggle_number(20))  # Expected output: 30\nprint(even_bit_toggle_number(30))  # Expected output: 20",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ]
  },
  {
    "mbpp_id": 156,
    "problem_statement": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'"
    ],
    "generated_code": "def tuple_int_str(tup):\n    return tuple(map(int, tup))\n\n# Test cases\nprint(tuple_int_str( (('333', '33'), ('1416', '55')))) # Expected output: ((333, 33), (1416, 55))\nprint(tuple_int_str( (('999', '99'), ('1000', '500')))) # Expected output: ((999, 99), (1000, 500))\nprint(tuple_int_str( (('666', '66'), ('1500', '555')))) # Expected output: ((666, 66), (1500, 555))",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ]
  },
  {
    "mbpp_id": 157,
    "problem_statement": "Write a function to reflect the run-length encoding from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def encode_list(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        value = lst[i]\n        while i + 1 < len(lst) and lst[i] == lst[i+1]:\n            i += 1\n            count += 1\n        if count > 1:\n            result.append([count, value])\n        else:\n            result.append([1, value])\n        i += 1\n    return result",
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ]
  },
  {
    "mbpp_id": 158,
    "problem_statement": "Write a python function to find k number of operations required to make all elements equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Ops(nums, k, n):\n    nums.sort()\n    max_val = nums[-1]\n    \n    if n * k > len(nums) or n * k < 1:\n        return -1\n    \n    target_sum = sum(nums) / k\n    total_diffs = sum(abs(val - target_sum) for val in nums)\n    \n    # Calculate the difference if we were able to evenly distribute\n    even_dist = len(nums) // k\n    remaining = len(nums) % k\n    \n    # Adjust the difference based on whether there's an odd number left\n    if remaining == 1:\n        total_diffs += abs(max_val - target_sum)\n    elif remaining == 0:\n        pass\n    else:\n        total_diffs += min(remaining, even_dist - 1) + abs(max_val - target_sum)\n    \n    return int(total_diffs)",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ]
  },
  {
    "mbpp_id": 159,
    "problem_statement": "Write a function to print the season for the given month and day.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object has no attribute 'lower'",
      "Test 2: FAIL - 'int' object has no attribute 'lower'",
      "Test 3: FAIL - 'int' object has no attribute 'lower'"
    ],
    "generated_code": "def month_season(month, day):\n    seasons = {\n        'December': ['winter'], \n        'January': ['winter'],\n        'February': ['winter'],\n        'March': ['spring'],\n        'April': ['spring'],\n        'May': ['spring'],\n        'June': ['summer'],\n        'July': ['summer'],\n        'August': ['summer'],\n        'September': ['fall'],\n        'October': ['fall'],\n        'November': ['fall']\n    }\n    \n    return next((s[0] for s in seasons[month] if s[0].lower() == day.lower()), None)",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ]
  },
  {
    "mbpp_id": 160,
    "problem_statement": "Write a function to find x and y that satisfies ax + by = n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def solution(a, b, n):\n    if a == 0:\n        if b == 0:\n            if n % 2 == 0:\n                return 'No solution'\n            else:\n                return 'Infinite solutions'\n        else:\n            if n % b == 0:\n                return f'x = {int(n / b)}, y = 0'\n            else:\n                return 'No solution'\n    elif b == 0:\n        if n % a == 0:\n            return f'y = {int(n / a)}, x = 0'\n        else:\n            return 'No solution'\n    else:\n        # Extended Euclidean Algorithm to find integers x and y such that ax + by = gcd(a, b)\n        def extended_gcd(x, y):\n            if y == 0:\n                return x, 1, 0\n            gcd, x1, y1 = extended_gcd(y, x % y)\n            temp = x // y\n            x = y1 - temp * x1\n            y = x1\n            return gcd, x, y\n        \n        gcd, x, y = extended_gcd(a, b)\n        \n        # Find coefficients for equation ax + by = gcd\n        coefficient_x = y\n        coefficient_y = -x\n        \n        # Scale the solution by n/a to get the actual values of x and y in the original equation\n        scaled_coefficient_x = int((n / a) * coefficient_x)\n        scaled_coefficient_y = int((n / a) * coefficient_y)\n        \n        return f\"x = {scaled_coefficient_x}, y = {scaled_coefficient_y}\"",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ]
  },
  {
    "mbpp_id": 161,
    "problem_statement": "Write a function to remove all elements from a given list present in another list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_elements(source_list, to_remove):\n    return [element for element in source_list if element not in to_remove]\n\n# Test cases\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10], [2,4,6,8])) # Output: [1, 3, 5, 7, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])) # Output: [2, 4, 6, 8, 9, 10]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5,7])) # Output: [1, 2, 3, 4, 6, 8, 9, 10]",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ]
  },
  {
    "mbpp_id": 162,
    "problem_statement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    total_sum = 0\n    while n >= 0:\n        total_sum += n\n        n -= 2\n    return total_sum",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ]
  },
  {
    "mbpp_id": 163,
    "problem_statement": "Write a function to calculate the area of a regular polygon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef area_polygon(n_sides, side_length):\n    \"\"\"\n    Calculate the area of a regular polygon with 'n_sides' sides each of length 'side_length'.\n\n    Parameters:\n    n_sides (int): Number of sides of the polygon.\n    side_length (float): Length of each side of the polygon.\n\n    Returns:\n    float: The area of the polygon rounded to 2 decimal places.\n    \"\"\"\n    apothem = side_length / (2 * math.tan(math.pi / n_sides))\n    perimeter = n_sides * side_length\n    return round(perimeter * apothem / 2, 2)\n\n# Test Cases\nprint(area_polygon(4, 20)) # Expected output: 400.00\nprint(area_polygon(10, 15)) # Expected output: 1731.20\nprint(area_polygon(9, 7)) # Expected output: 302.91",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ]
  },
  {
    "mbpp_id": 164,
    "problem_statement": "Write a python function to check whether the sum of divisors are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def areEquivalent(num1, num2):\n    def sum_of_divisors(n):\n        if n == 1:\n            return 0\n        divisor_sum = 1\n        for i in range(2, int((n ** 0.5) + 1)):\n            if n % i == 0:\n                if i == n // i:\n                    divisor_sum += i\n                else:\n                    divisor_sum += i + n // i\n        return divisor_sum\n    \n    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ]
  },
  {
    "mbpp_id": 165,
    "problem_statement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_char_position(input_string):\n    # Initialize counter for matching characters\n    match_count = 0\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the current character is an alphabetic letter\n        if char.isalpha():\n            # Determine its position based on its case\n            pos_alpha = ord(char.upper()) - ord('A') + 1\n            # If the character appears more than once, increment the match count\n            if input_string.count(char) > 1:\n                match_count += 1\n                \n    return match_count\n\n# Test cases\nprint(count_char_position(\"xbcefg\"))  # Expected output: 2\nprint(count_char_position(\"ABcED\"))   # Expected output: 3\nprint(count_char_position(\"AbgdeF\"))  # Expected output: 5",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ]
  },
  {
    "mbpp_id": 166,
    "problem_statement": "Write a python function to count the pairs with xor as an even number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef find_even_Pair(nums, target):\n    \"\"\"\n    This function counts the number of pairs in 'nums' whose XOR is equal to 'target'.\n    It uses a counter to store occurrences of each number and then checks if for every \n    unique pair summing up to 'target', there exists another occurrence of that number.\n    \n    :param nums: List[int] - A list of integers.\n    :param target: int - The target XOR value to be found among pairs.\n    :return: int - The count of pairs having XOR as an even number.\n    \"\"\"\n    counter = Counter()\n    result = 0\n    \n    # Count occurrences of each number\n    for num in nums:\n        counter[num] += 1\n        \n    for num in counter:\n        if counter[target ^ num] > 0:\n            # If the required complement exists in the map, calculate how many such pairs exist\n            if num == target:\n                result += (counter[num] * (counter[num] - 1)) // 2\n            else:\n                result += (counter[num] * counter[target ^ num])\n                \n    return result\n\n# Check function with provided data points\nprint(find_even_Pair([5,4,7,2,1], 5))  # Expected output: 4\nprint(find_even_Pair([7,2,8,1,0,5,11], 7))  # Expected output: 9\nprint(find_even_Pair([1,2,3], 3))  # Expected output: 1",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ]
  },
  {
    "mbpp_id": 167,
    "problem_statement": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'next_Power_Of_2' is not defined",
      "Test 2: FAIL - name 'next_Power_Of_2' is not defined",
      "Test 3: FAIL - name 'next_Power_Of_2' is not defined"
    ],
    "generated_code": "def next_Power_OF_2(n):\n    \"\"\"\n    Find the smallest power of 2 which is not less than n.\n    \n    Parameters:\n    n (int): A non-negative integer\n    \n    Returns:\n    int: The smallest power of 2 greater than or equal to n\n    \"\"\"\n    # Using bit manipulation to find the next power of 2\n    if n == 0:\n        return 1\n    elif n & (n - 1) == 0:\n        # If n is already a power of 2, return it directly\n        return n\n    else:\n        # Calculate the next power of 2 using bit manipulation\n        return 1 << (n-1).bit_length()",
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ]
  },
  {
    "mbpp_id": 168,
    "problem_statement": "Write a python function to find the frequency of a number in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency(arr, num):\n    count = arr.count(num)\n    return count",
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ]
  },
  {
    "mbpp_id": 169,
    "problem_statement": "Write a function to calculate the nth pell number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_pell(n):\n    # Base case initialization\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Pell numbers\n    p = [0, 1]\n    \n    # Calculate P[n] for n > 1 using the recurrence relation\n    while len(p) <= n:\n        p.append(2 * p[-1] + p[-2])\n    \n    # Return the nth Pell number\n    return p[n]\n\n# Test cases\nassert get_pell(4) == 12, \"Test case 1 failed\"\nassert get_pell(7) == 169, \"Test case 2 failed\"\nassert get_pell(8) == 408, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ]
  },
  {
    "mbpp_id": 170,
    "problem_statement": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_range_list(lst, start_index, end_index):\n    return sum(lst[i] for i in range(start_index, end_index+1))",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ]
  },
  {
    "mbpp_id": 171,
    "problem_statement": "Write a function to find the perimeter of a pentagon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_pentagon(side_length):\n    return 5 * side_length",
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ]
  },
  {
    "mbpp_id": 172,
    "problem_statement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_occurance(string):\n    std_count = 0\n    for char in string:\n        if char == 'std':\n            std_count += 1\n    return std_count\n\n# Test cases\nprint(count_occurance(\"letstdlenstdporstd\"))  # Expected output: 3\nprint(count_occurance(\"truststdsolensporsd\"))  # Expected output: 1\nprint(count_occurance(\"makestdsostdworthit\"))  # Expected output: 2",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ]
  },
  {
    "mbpp_id": 173,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())",
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ]
  },
  {
    "mbpp_id": 174,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_keyvalue(keyvalue_pairs):\n    grouped_dict = {}\n    for key, value in keyvalue_pairs:\n        if key not in grouped_dict:\n            grouped_dict[key] = []\n        grouped_dict[key].append(value)\n    return grouped_dict",
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ]
  },
  {
    "mbpp_id": 175,
    "problem_statement": "Write a function to verify validity of a string of parentheses.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_valid_parenthese(parentheses):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in parentheses:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n        else:\n            return False\n    \n    return not stack",
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ]
  },
  {
    "mbpp_id": 176,
    "problem_statement": "Write a function to find the perimeter of a triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perimeter_triangle(a, b, c):\n    # Calculate the perimeter of the triangle using Heron's formula\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return int(area * 2)",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ]
  },
  {
    "mbpp_id": 177,
    "problem_statement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - answer() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - answer() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - answer() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from math import gcd\n\ndef lcm(x, y): \n    return x * y // gcd(x, y)\n\ndef answer(lcm_range):\n    for i in range(1, lcm_range[0]):\n        if all((lcm(i, j) >= lcm_range[0] and lcm(i, j) <= lcm_range[1]) for j in range(1, lcm_range[1])):\n            return (i, lcm(i, j))\n            \n# Test cases\nprint(answer([3, 6])) # Expected output: (3, 6)\nprint(answer([2, 4])) # Expected output: (2, 4)\nprint(answer([1, 3])) # Expected output: (1, 2)",
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ]
  },
  {
    "mbpp_id": 178,
    "problem_statement": "Write a function to search some literals strings in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef string_literals(strings, target):\n    for i in range(len(target)):\n        if re.search(strings[0], target[i]):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ]
  },
  {
    "mbpp_id": 179,
    "problem_statement": "Write a function to find if the given number is a keith number or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def is_num_keith(num):\n    \"\"\"\n    This function checks if the given number is a Keith number.\n    \n    Args:\n    num (int): The number to check\n    \n    Returns:\n    bool: True if the number is a Keith number, False otherwise\n    \"\"\"\n    k_list = [int(digit) for digit in str(num)]\n    while len(k_list) > 1:\n        new_k_list = []\n        for i in range(len(k_list)):\n            sum_val = sum([k_list[i-j] for j in range(1, len(k_list)+1)])\n            new_k_list.append(sum_val)\n        k_list = new_k_list\n    return num in k_list\n\n# Test cases\nprint(is_num_keith(14))  # Expected output: True\nprint(is_num_keith(12))  # Expected output: False\nprint(is_num_keith(197)) # Expected output: True",
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ]
  },
  {
    "mbpp_id": 180,
    "problem_statement": "Write a function to calculate distance between two points using latitude and longitude.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'atan2' is not defined",
      "Test 2: FAIL - name 'atan2' is not defined",
      "Test 3: FAIL - name 'atan2' is not defined"
    ],
    "generated_code": "from math import radians, sin, cos, acos\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # Convert degrees to radians\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    # Haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    r = 6371  # Radius of earth in kilometers\n    return round(c * r, 6)",
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ]
  },
  {
    "mbpp_id": 181,
    "problem_statement": "Write a function to find the longest common prefix in the given set of strings.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def common_prefix(strs, n): \n    # Initialize the prefix as an empty string\n    prefix = \"\"\n  \n    # Iterate through each character position up to the length of the shortest string\n    for i in range(len(min(strs, key=len))):\n        current_char = strs[0][i]\n        \n        # Check if all characters at the current position match the first character\n        if all(string[i] == current_char for string in strs):\n            prefix += current_char\n        else:\n            break\n    \n    return prefix",
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ]
  },
  {
    "mbpp_id": 182,
    "problem_statement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_character(input_string):\n    # Find all characters in upper case\n    upper_case = re.findall('[A-Z]', input_string)\n    \n    # Find all characters in lower case\n    lower_case = re.findall('[a-z]', input_string)\n    \n    # Find all special characters\n    special_characters = re.findall('[^A-Za-z0-9]', input_string)\n    \n    # Find all digits\n    digits = re.findall('\\d', input_string)\n    \n    return (upper_case, lower_case, special_characters, digits)\n\n# Test cases\nprint(find_character(\"ThisIsGeeksforGeeks\"))  # Should print: [('T', 'I', 'G', 'S'), ('h', 'i', 's', 'e', 'e', 'k', 's'), ('.', '#'), [''])\nprint(find_character(\"Hithere2\"))             # Should print: [('H',), ('i', 't', 'h', 'e', 'r', 'e'), ('2',), []]\nprint(find_character(\"HeyFolks32\"))           # Should print: [('H', 'E'), ('y', 'o', 'l', 'k', 's'), ('3', '2'), []]",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ]
  },
  {
    "mbpp_id": 183,
    "problem_statement": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "def count_pairs(arr, k, diff):\n    from collections import Counter\n    \n    # Count occurrences of each number in the array\n    num_count = Counter(arr)\n    \n    # Calculate the total number of pairs with the given difference 'diff'\n    pairs = sum(num_count[i] * num_count[j] for i in num_count.keys() if j := i + diff)\n    \n    return pairs\n\n# Example usage:\nprint(count_pairs([1, 5, 3, 4, 2], 5, 3))  # Output: 2\nprint(count_pairs([8, 12, 16, 4, 0, 20], 6, 4))  # Output: 5\nprint(count_pairs([2, 4, 1, 3, 4], 5, 2))  # Output: 3",
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ]
  },
  {
    "mbpp_id": 184,
    "problem_statement": "Write a function to find all the values in a list that are greater than a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def greater_specificnum(arr, num):\n    return [x for x in arr if x > num]",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ]
  },
  {
    "mbpp_id": 185,
    "problem_statement": "Write a function to find the focus of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parabola_focus(a,b,c):\n    return ((-b)/(2*a), c - b**2/(4*a))\n\n# Test cases\nprint(parabola_focus(5,3,2)) # Expected output: (-0.3, 1.6)\nprint(parabola_focus(9,8,4)) # Expected output: (-0.4444444444444444, 2.25)\nprint(parabola_focus(2,4,6)) # Expected output: (-1.0, 4.125)",
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ]
  },
  {
    "mbpp_id": 186,
    "problem_statement": "Write a function to search some literals strings in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_literals(input_string, pattern_list):\n    for pattern in pattern_list:\n        if re.search(pattern, input_string):\n            return 'Matched!'\n    return 'Not Matched!'\n\n# Example usage and test cases\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['fox']))  # Expected output: \"Matched!\"\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['horse']))  # Expected output: \"Not Matched!\"\nprint(check_literals('The quick brown fox jumps over the lazy dog.', ['lazy']))   # Expected output: \"Matched!\"",
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ]
  },
  {
    "mbpp_id": 187,
    "problem_statement": "Write a function to find the longest common subsequence for the given two sequences.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_common_subsequence(s1, s2, n1, n2):\n    # Initialize the table with dimensions (n1+1) x (n2+1)\n    dp = [[0] * (n2 + 1) for _ in range(n1 + 1)]\n    \n    # Fill the table in bottom-up manner\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                \n    # The value at position (n1, n2) contains the length of LCS\n    return dp[n1][n2]\n\n# Test the function with provided test cases\nassert longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4) == 2",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ]
  },
  {
    "mbpp_id": 188,
    "problem_statement": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def prod_Square(n):\n    import math\n    \n    # Calculate the square root of n\n    sqrt_n = int(math.sqrt(n))\n    \n    # Check if the square of sqrt_n is equal to n\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ]
  },
  {
    "mbpp_id": 189,
    "problem_statement": "Write a python function to find the first missing positive number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - first_Missing_Positive() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def first_Missing_Positive(nums):\n    \"\"\"\n    Finds the smallest positive integer that is not present in the given list of integers.\n    \n    Args:\n    nums (list): A list of integers\n    \n    Returns:\n    int: The smallest positive integer not present in the list\n    \"\"\"\n    for i in range(1, len(nums) + 2):\n        if i not in nums:\n            return i\n    return len(nums) + 1",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ]
  },
  {
    "mbpp_id": 190,
    "problem_statement": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Intgral_Points(x_min, y_min, x_max, y_max):\n    # Calculate the total number of integer points within the bounds\n    total_points = (x_max - x_min + 1) * (y_max - y_min + 1)\n    \n    # Adjust for each point on the boundary lines\n    horizontal_lines = abs(y_max - y_min) + 1\n    vertical_lines = abs(x_max - x_min) + 1\n    \n    # Subtract points at the boundaries where both dimensions change\n    diagonal_lines = min(horizontal_lines, vertical_lines)\n    \n    return total_points - 2 * diagonal_lines",
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ]
  },
  {
    "mbpp_id": 191,
    "problem_statement": "Write a function to check whether the given month name contains 30 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumber(month_name):\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    return month_name in months_with_30_days",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ]
  },
  {
    "mbpp_id": 192,
    "problem_statement": "Write a python function to check whether a string has atleast one letter and one number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_String(s):\n    # Check if string contains at least one letter and one number\n    return any(char.isalpha() for char in s) and any(char.isdigit() for char in s)",
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ]
  },
  {
    "mbpp_id": 193,
    "problem_statement": "Write a function to remove the duplicates from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'remove_tuple' is not defined"
    ],
    "generated_code": "def remove_duplicates(input_tuple):\n    seen = set()\n    result = []\n    for item in input_tuple:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)\n\n# Test cases\nprint(remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3))) # Expected output: (1, 2, 3, 5)\nprint(remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8))) # Expected output: (2, 3, 4, 5, 6, 7, 8)\nprint(remove_tuple((11, 12, 13, 11, 11, 12, 14, 13))) # Expected output: (11, 12, 13, 14)",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ]
  },
  {
    "mbpp_id": 194,
    "problem_statement": "Write a python function to convert octal number to decimal number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def octal_To_Decimal(octal_num):\n    # Convert octal string to integer and then divide by powers of 8 to get decimal equivalent.\n    return int(str(octal_num), 8)",
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ]
  },
  {
    "mbpp_id": 195,
    "problem_statement": "Write a python function to find the first position of an element in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first(sorted_array, target, start_position):\n    left = 0\n    right = len(sorted_array) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if sorted_array[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half for earlier occurrences\n        elif sorted_array[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result + start_position",
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ]
  },
  {
    "mbpp_id": 196,
    "problem_statement": "Write a function to remove all the tuples with length k.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_tuples(tuples_list, k):\n    # Remove tuples based on their length\n    return [t for t in tuples_list if len(t) != k]",
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ]
  },
  {
    "mbpp_id": 197,
    "problem_statement": "Write a function to perform the exponentiation of the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_exponentio(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(pow(tup1[i], tup2[i]))\n    return tuple(result)",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ]
  },
  {
    "mbpp_id": 198,
    "problem_statement": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: unterminated triple-quoted string literal (detected at line 83)"
    ],
    "generated_code": "```python\nimport math\nfrom scipy.optimize import fsolve\nimport numpy as np\n\ndef ellipse_equation(a, b, x, y):\n    \"\"\"Calculate points on the ellipse.\"\"\"\n    return ((x / a) ** 2 + (y / b) ** 2 - 1)\n\ndef tangent_slope(a, b, x, y):\n    \"\"\"Find the slope of the tangent line at (x, y).\"\"\"\n    return -(b * x) / (a * y)\n\ndef distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)\n\ndef is_inside_ellipse(x, y, a, b):\n    \"\"\"Check if a point is inside the ellipse.\"\"\"\n    return abs(distance((x, y), (0, 0)) - a * b) < 1e-6\n\ndef angle_between_points(x1, y1, x2, y2):\n    \"\"\"Calculate the angle between two points with respect to the positive x-axis.\"\"\"\n    return math.atan2(y2 - y1, x2 - x1)\n\ndef perpendicular_line(tangent_angle, radius):\n    \"\"\"Return the equation of the line perpendicular to the tangent and passing through (0, 0).\"\"\"\n    return f\"x = {radius}tan({tangent_angle})\"\n\ndef intersection_of_lines(line1, line2):\n    \"\"\"Find the intersection of two lines defined by their equations.\"\"\"\n    x1, y1, m1 = map(float, line1.split())\n    x2, y2, m2 = map(float, line2.split())\n\n    A = y2 - y1\n    B = x1 - x2\n    C = m1 * x1 - m2 * y1\n\n    det = A * B - B * C\n    if det == 0:\n        raise ValueError(\"Lines are parallel\")\n\n    t = (-C - A * x1) / det\n    u = (B * y1 - A * y2) / det\n    return tuple(map(lambda val: round(val * t, 6), [A * t, B * t]))\n\ndef largest_triangle(a, b):\n    \"\"\"\n    Finds the maximum area of a right-angled triangle inscribed in an ellipse\n    centered at the origin with semi-major axis 'a' and",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ]
  },
  {
    "mbpp_id": 199,
    "problem_statement": "Write a python function to find highest power of 2 less than or equal to given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(num):\n    # Calculate the highest power of 2 using math library for better precision\n    return pow(2, num.bit_length() - 1)",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 200,
    "problem_statement": "Write a function to find all index positions of the maximum values in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def position_max(lst):\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]",
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ]
  },
  {
    "mbpp_id": 201,
    "problem_statement": "Write a python function to check whether the elements in a list are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def chkList(lst):\n    if len(set(lst)) == 1:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ]
  },
  {
    "mbpp_id": 202,
    "problem_statement": "Write a function to remove even characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'p'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'l'"
    ],
    "generated_code": "def remove_even(s):\n    result = \"\"\n    for char in s:\n        if int(char) % 2 != 0:\n            result += char\n    return result",
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ]
  },
  {
    "mbpp_id": 203,
    "problem_statement": "Write a python function to find the hamming distance between given two integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def hamming_Distance(x, y):\n    xor_result = x ^ y  # XOR operation on x and y gives all bits that differ\n    count = 0\n    while xor_result:\n        xor_result &= (xor_result - 1)  # Remove rightmost set bit\n        count += 1\n    return count",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ]
  },
  {
    "mbpp_id": 204,
    "problem_statement": "Write a python function to count the occurrence of a given character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count(s, char):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == char:\n            count += 1\n    return count",
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ]
  },
  {
    "mbpp_id": 205,
    "problem_statement": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def inversion_elements(tup):\n    inverted = sorted(zip(*tup))\n    result = []\n    for i in range(len(inverted)):\n        if i % 2 == 0:\n            result.append(sum(abs(x) for x in tup[i]))\n        else:\n            result.append(0)\n    return tuple(result)\n\n# Test cases\nprint(inversion_elements((7, 8, 9, 1, 10, 7)))  # Output: (-8, -9, -10, -2, -11, -8)\nprint(inversion_elements((2, 4, 5, 6, 1, 7)))   # Output: (-3, -5, -6, -7, -2, -8)\nprint(inversion_elements((8, 9, 11, 14, 12, 13)))# Output: (-9, -10, -12, -15, -13, -14)",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ]
  },
  {
    "mbpp_id": 206,
    "problem_statement": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(tuples_list):\n    # Split each tuple into elements and join them with spaces\n    result = [\"\".join([str(x) for x in t]) for t in tuples_list]\n    return result\n\n# Test cases\nprint(concatenate_elements([(\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"), (\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"), (\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")]))  # Should print [['DSP IS', 'IS BEST', 'BEST FOR', 'FOR ALL', 'ALL UTS'], ['RES IS', 'IS BEST', 'BEST FOR', 'FOR ALL', 'ALL QESR'], ['MSAMIS', 'IS BEST', 'BEST FOR', 'FOR ALL', 'ALL SKD']]",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ]
  },
  {
    "mbpp_id": 207,
    "problem_statement": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n)]\n    \n    max_length = 0\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = dp[j-1][i-1] + 1\n                if dp[i][j] > max_length:\n                    max_length = dp[i][j]\n    \n    return max_length\n\n# Test cases\nprint(find_longest_repeating_subseq(\"AABEBCDD\"))  # Output: 3\nprint(find_longest_repeating_subseq(\"aabb\"))      # Output: 2\nprint(find_longest_repeating_subseq(\"aab\"))       # Output: 1",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ]
  },
  {
    "mbpp_id": 208,
    "problem_statement": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(decimal):\n    # Check if the input string matches the pattern for a valid decimal number with exactly two digits after the decimal point\n    return bool(re.match(r'^-?\\d+(\\.\\d{2})?$', decimal))\n\n# Test cases\nprint(is_decimal('123.11'))  # Expected output: True\nprint(is_decimal('0.21'))    # Expected output: True\nprint(is_decimal('123.1214'))# Expected output: False",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ]
  },
  {
    "mbpp_id": 209,
    "problem_statement": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def heap_replace(heap, item):\n    \"\"\"\n    This function takes a max-heap 'heap' and an integer 'item'.\n    It replaces the smallest element in the heap with the 'item', maintaining the max-heap property.\n    \n    Parameters:\n    - heap: List[int] representing the max-heap\n    - item: int, the new value to be inserted into the heap\n    \n    Returns:\n    - A modified list containing the elements of the updated heap after replacing the smallest element.\n    \"\"\"\n    # Inserting the new item at the end of the heap\n    heap.append(item)\n    # Restore max-heap property starting from the last parent node\n    i = len(heap) - 1\n    while (i // 2 > 0 and heap[i] > heap[(i - 1) // 2]):\n        temp = heap[i]\n        heap[i] = heap[(i - 1) // 2]\n        heap[(i - 1) // 2] = temp\n        i = (i - 1) // 2\n    return heap\n\n# Test cases to verify the correctness of the solution\nassert heap_replace([25, 44, 68, 21, 39, 23, 89], 21) == [21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89], 110) == [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89], 500) == [23, 25, 68, 44, 39, 500, 89]",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ]
  },
  {
    "mbpp_id": 210,
    "problem_statement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_allowed_specific_char(s):\n    # Define the regular expression pattern for allowed characters\n    pattern = '[a-zA-Z0-9]'\n    \n    # Check if the input string matches the pattern\n    return bool(re.match(pattern, s))",
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ]
  },
  {
    "mbpp_id": 211,
    "problem_statement": "Write a python function to count numbers whose oth and nth bits are set.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_Num() missing 1 required positional argument: 'm'",
      "Test 2: FAIL - count_Num() missing 1 required positional argument: 'm'",
      "Test 3: FAIL - count_Num() missing 1 required positional argument: 'm'"
    ],
    "generated_code": "def count_Num(n, m):\n    # Initialize a counter for numbers with the desired properties\n    count = 0\n    \n    # Iterate through all possible numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if both the ith bit and the mth bit of i are set\n        if ((i & (1 << (m-1))) != 0) and (((i >> (n-1)) & 1) == 1):\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ]
  },
  {
    "mbpp_id": 212,
    "problem_statement": "Write a python function to find the sum of fourth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fourth_Power_Sum(n):\n    # Initialize sum\n    total_sum = 0\n    \n    # Calculate the sum of fourth powers from 1 to n\n    for i in range(1, n + 1):\n        total_sum += i**4\n        \n    return total_sum",
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ]
  },
  {
    "mbpp_id": 213,
    "problem_statement": "Write a function to perform the concatenation of two string tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_strings(tuple1, tuple2):\n    # Concatenate the two input tuples and convert them into a list.\n    result = list(zip(tuple1, tuple2))\n    # Convert the resulting list back into a tuple.\n    final_result = tuple(result)\n    return final_result",
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ]
  },
  {
    "mbpp_id": 214,
    "problem_statement": "Write a function to convert radians to degrees.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def degree_radian(rad):\n    return rad * 180 / 3.141592653589793",
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ]
  },
  {
    "mbpp_id": 215,
    "problem_statement": "Write a function to decode a run-length encoded given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def decode_list(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        if isinstance(lst[i], list) and isinstance(lst[i+1], int):\n            for _ in range(lst[i+1]):\n                result.append(lst[i][0])\n            i += 2\n        else:\n            result.append(lst[i])\n            i += 1\n    return result",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 216,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def check_subset_list(subset, superset):\n    return all(item in superset for sublist in subset for item in sublist)\n\n# Test cases\nprint(check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])) # False\nprint(check_subset_list([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])) # True\nprint(check_subset_list([['a', 'b'], ['e'], ['c', 'd']], [['g']])) # False",
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ]
  },
  {
    "mbpp_id": 217,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Repeated_Char(input_string):\n    seen_chars = set()\n    \n    for char in input_string:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    \n    return '\\0'  # Return null character when no repeated character is found\n\n# Test cases\nprint(first_Repeated_Char(\"Google\"))  # Expected output: \"o\"\nprint(first_Repeated_Char(\"data\"))    # Expected output: \"a\"\nprint(first_Repeated_Char(\"python\"))  # Expected output: null character ('\\0')",
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ]
  },
  {
    "mbpp_id": 218,
    "problem_statement": "Write a python function to find the minimum operations required to make two numbers equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Operations(a, b):\n    \"\"\"\n    This function takes in two positive integers 'a' and 'b', returns the minimum number of operations needed to make both numbers equal.\n    \n    An operation consists of incrementing one of the numbers by 1.\n    \n    Parameters:\n    - a: First positive integer\n    - b: Second positive integer\n    \n    Returns:\n    The minimum number of operations required to make 'a' and 'b' equal.\n    \"\"\"\n    # Calculate the absolute difference between 'a' and 'b'\n    diff = abs(a - b)\n    # If 'a' is less than 'b', swap them for comparison efficiency\n    if a < b:\n        a, b = b, a\n    # The minimum operations will be the larger number minus the smaller number divided by 2\n    return max(diff // 2, 1)\n\n# Test cases\nprint(min_Operations(2, 4))  # Expected output: 1\nprint(min_Operations(4, 10)) # Expected output: 4\nprint(min_Operations(1, 4))  # Expected output: 3",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ]
  },
  {
    "mbpp_id": 219,
    "problem_statement": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_min_max(tup, k):\n    # Sort the tuple based on the values\n    sorted_tup = sorted(tup)\n    # Slice the first k elements for min and max\n    min_elements = sorted_tup[:k]\n    max_elements = sorted_tup[-k:]\n    return tuple(min_elements + max_elements)\n\n# Test cases\nprint(extract_min_max((5, 20, 3, 7, 6, 8), 2))  # Output: (3, 5, 8, 20)\nprint(extract_min_max((4, 5, 6, 1, 2, 7), 3))   # Output: (1, 2, 4, 5, 6, 7)\nprint(extract_min_max((2, 3, 4, 8, 9, 11, 7), 4))  # Output: (2, 3, 4, 7, 8, 9, 11)",
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ]
  },
  {
    "mbpp_id": 220,
    "problem_statement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import re\n\ndef replace_max_specialchar(s, max_occurrences=1):\n    \"\"\"\n    Replaces the maximum number of specified special characters (spaces, commas, dots) in the input string `s`\n    with a single colon. If there are more than one character, it replaces up to the given limit.\n    \n    Parameters:\n    s (str): The input string containing special characters to be replaced.\n    max_occurrences (int): The maximum number of replacements allowed for each type of special character.\n    \n    Returns:\n    str: The modified string with replaced special characters.\n    \"\"\"\n    # Define patterns for replacing spaces, commas, and dots separately\n    space_pattern = r'(\\s+)|[\\s,\\.]'\n    comma_pattern = r','\n    dot_pattern = r'\\.'\n    \n    def replace_one_char(match):\n        nonlocal max_occurrences\n        if match.group(0).isspace():\n            return ':' * (max_occurrences - len(match.group(0))) + match.group(0)\n        elif match.group(0) == ',':\n            return ':' * max_occurrences\n        elif match.group(0) == '.':\n            return ':'\n    \n    # Apply the replacement pattern twice to cover both occurrences\n    result = re.sub(space_pattern, replace_one_char, s, flags=re.DOTALL)[::-1]\n    result = re.sub(comma_pattern, replace_one_char, result, flags=re.DOTALL)[::-1]\n    result = re.sub(dot_pattern, replace_one_char, result, flags=re.DOTALL)[::-1]\n    return result[::-1]\n\n# Test cases to verify the correctness of the function\nassert replace_max_specialchar('Python language, Programming language.', 2) == 'Python:language: Programming language.'\nassert replace_max_specialchar('a b c,d e f', 3) == 'a:b:c:d e f'\nassert replace_max_specialchar('ram reshma,ram rahim', 1) == 'ram:reshma,ram rahim'\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ]
  },
  {
    "mbpp_id": 221,
    "problem_statement": "Write a python function to find the first even number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ]
  },
  {
    "mbpp_id": 222,
    "problem_statement": "Write a function to check if all the elements in tuple have same data type or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_type(tup):\n    types = {type(i) for i in tup}\n    return len(types) == 1",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "mbpp_id": 223,
    "problem_statement": "Write a function to check for majority element in the given sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_majority(nums, n, k):\n    \"\"\"\n    Check if the integer k appears more than n/2 times in the list nums.\n    \n    :param nums: List[int] - A sorted list of integers.\n    :param n: int - The number of elements we need to find as a majority.\n    :param k: int - The target value which might be a majority element.\n    :return: bool - True if k appears more than n/2 times, otherwise False.\n    \"\"\"\n    left, right = 0, len(nums) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if nums[mid] == k:\n            if mid + 1 >= n and nums[left] != k:\n                return True\n            elif mid - 1 < 0 or nums[mid-1] != k:\n                break\n            else:\n                right = mid - 1\n        elif nums[mid] < k:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return (nums[left] == k and nums[left+int((n-1)/k)] == k)\n\n# Test cases\nprint(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)) # Expected output: True\nprint(is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)) # Expected output: False\nprint(is_majority([1, 1, 1, 2, 2], 5, 1)) # Expected output: True",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ]
  },
  {
    "mbpp_id": 224,
    "problem_statement": "Write a python function to count set bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Test cases\nprint(count_Set_Bits(2))  # Expected output: 1\nprint(count_Set_Bits(4))  # Expected output: 1\nprint(count_Set_Bits(6))  # Expected output: 2",
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "mbpp_id": 225,
    "problem_statement": "Write a python function to find the minimum element in a sorted and rotated array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Min(arr, start, end):\n    # Base case: if there is one element left, return it\n    if start == end:\n        return arr[start]\n    \n    # Calculate the middle index\n    mid = (start + end) // 2\n    \n    # Check if the middle element is greater than its right neighbor\n    if mid < end and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    # Check if the middle element is less than its left neighbor\n    elif mid > start and arr[mid - 1] > arr[mid]:\n        return arr[mid]\n    # If none of the above conditions are met, continue searching in the unsorted part\n    else:\n        if arr[0] <= arr[end-1]: \n            return arr[0]\n        else:\n            return find_Min(arr, mid+1, end)\n\n# Example usage:\nprint(find_Min([1,2,3,4,5], 0, 4))  # Expected output: 1\nprint(find_Min([4,6,8], 0, 2))      # Expected output: 4\nprint(find_Min([2,3,5,7,9], 0, 4))  # Expected output: 2",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ]
  },
  {
    "mbpp_id": 226,
    "problem_statement": "Write a python function to remove the characters which have odd index values of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_values_string(input_str):\n    # Initialize an empty string to store characters at odd indices\n    result = \"\"\n    \n    # Iterate over the input string with index and character\n    for i in range(len(input_str)):\n        if i % 2 == 0:\n            # Append character to the result if its index is even\n            result += input_str[i]\n            \n    return result",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ]
  },
  {
    "mbpp_id": 227,
    "problem_statement": "Write a function to find minimum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_three(x, y, z):\n    return min(x, y, z)",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "mbpp_id": 228,
    "problem_statement": "Write a python function to check whether all the bits are unset in the given range or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(number, start_index, end_index):\n    # Check if the bit at 'start_index' is set and decrementing it.\n    for i in range(start_index, end_index + 1):\n        number = number & ~(1 << i)\n    \n    # If there's no remaining set bit, all bits were unset.\n    return bool(number & 1)\n\n# Test cases to verify the correctness of the solution\nprint(all_Bits_Set_In_The_Given_Range(4, 1, 2))  # Expected output: True\nprint(all_Bits_Set_In_The_Given_Range(17, 2, 4))  # Expected output: True\nprint(all_Bits_Set_In_The_Given_Range(39, 4, 6))  # Expected output: False",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "mbpp_id": 229,
    "problem_statement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def re_arrange_array(arr, n):\n    # Initialize two pointers for iterating through the array from both ends\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        # If the current element at 'left' pointer is negative,\n        # move it to the end of the array and increment the left pointer\n        if arr[left] < 0:\n            temp = arr[left]\n            arr[left] = arr[right]\n            arr[right] = temp\n            right -= 1\n        else:\n            left += 1\n            \n    return arr\n\n# Test cases\nprint(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))  # Output: [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nprint(re_arrange_array([12, -14, -26, 13, 15], 5))          # Output: [-14, -26, 12, 13, 15]\nprint(re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7))  # Output: [-42, -39, -78, 10, 24, 36, 85]",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "mbpp_id": 230,
    "problem_statement": "Write a function to replace blank spaces with any character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_blank(s, ch):\n    return s.replace(' ', ch)",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ]
  },
  {
    "mbpp_id": 231,
    "problem_statement": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum(triangle, k):\n    # Start from the second last row and move upwards to the top\n    for i in range(k-2, -1, -1):\n        for j in range(len(triangle[i])):\n            # Update each element with the maximum sum possible through it\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    # The top element now contains the maximum sum\n    return triangle[0][0]",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ]
  },
  {
    "mbpp_id": 232,
    "problem_statement": "Write a function to get the n largest items from a dataset.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def larg_nnum(nums, n):\n    return sorted(nums, reverse=True)[:n]\n\n# Test cases\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) # Expected output:[100, 90]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)) # Expected output:[100, 90, 80, 70, 60]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)) # Expected output:[100, 90, 80]",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ]
  },
  {
    "mbpp_id": 233,
    "problem_statement": "Write a function to find the lateral surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    # Calculate and return the lateral surface area of the cylinder\n    return 2 * math.pi * radius * height",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ]
  },
  {
    "mbpp_id": 234,
    "problem_statement": "Write a function to find the volume of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n    \n    Parameters:\n    side_length (int): The length of one side of the cube.\n    \n    Returns:\n    int: The volume of the cube.\n    \"\"\"\n    return side_length ** 3",
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ]
  },
  {
    "mbpp_id": 235,
    "problem_statement": "Write a python function to set all even bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_bit_set_number(number):\n    \"\"\"\n    Sets all even bits in the given integer number.\n    \n    Parameters:\n    - number: An integer whose even bits are to be set\n    \n    Returns:\n    The result after setting all even bits of the input number.\n    \"\"\"\n    # Shift left by 2 positions and then shift right by 2 positions to remove all odd bits\n    return (number << 2) >> 2\n\n# Test cases\nprint(even_bit_set_number(10))  # Expected output: 10\nprint(even_bit_set_number(20))  # Expected output: 30\nprint(even_bit_set_number(30))  # Expected output: 30",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ]
  },
  {
    "mbpp_id": 236,
    "problem_statement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'No_of_Triangle' is not defined",
      "Test 2: FAIL - name 'No_of_Triangle' is not defined",
      "Test 3: FAIL - name 'No_of_Triangle' is not defined"
    ],
    "generated_code": "def no_of_triangle(n, m):\n    if n <= 0 or m < 0:\n        return -1\n    # Base case: when m is less than n/2, there's no way to form an equilateral triangle with more than one triangle.\n    if m < n // 2:\n        return 0\n    # When we reach here, it means that each side length from 1 to m forms at least one possible larger triangle\n    return (m + 1) * ((m + 1) ** 2 - m) // 2 + m * (m + 1) // 2",
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ]
  },
  {
    "mbpp_id": 237,
    "problem_statement": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import defaultdict\nimport itertools\n\ndef check_occurences(tuples_list):\n    \"\"\"\n    This function takes a list of tuples and returns a dictionary where keys are tuples representing duplicate record occurrences,\n    and values are the count of such occurrences.\n    \n    :param tuples_list: List of tuples with numeric elements\n    :return: Dictionary mapping each occurrence tuple to its count\n    \"\"\"\n    # Using defaultdict to automatically initialize empty lists for storing counts\n    occurence_counts = defaultdict(list)\n    for tuple_ in tuples_list:\n        occurence_counts[tuple_].append(occurrence_count(tuple_, occurence_counts))\n        \n    result = {}\n    for key, value in occurence_counts.items():\n        if len(value) > 1:\n            sorted_key = tuple(sorted(key))\n            result[sorted_key] = len(value)\n            \n    return result\n\n\n# Helper function to simulate finding the most common element's count in a tuple\ndef occurrence_count(element_tuple, occurence_dict):\n    \"\"\"Counts the number of times an element appears in all existing dictionaries under the dict.\"\"\"\n    total_occurrences = sum(len(dict_values) for dict_values in [values for _, values in occurence_dict.items()])\n    return total_occurrences / len(occurence_dict)\n\n\n# Test Cases\nprint(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]))  # Should output {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nprint(check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]))  # Should output {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nprint(check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]))  # Should output {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1})",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ]
  },
  {
    "mbpp_id": 238,
    "problem_statement": "Write a python function to count number of non-empty substrings of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def number_of_substrings(s):\n    n = len(s)\n    total = 0\n    \n    for i in range(n):\n        left = right = i\n        while left >= 0 and s[left] == s[right]:\n            total += 1\n            if right + 1 < n:\n                right += 1\n        left -= 1\n    \n    return total * (n - 1) // 2\n\n# Test cases\nprint(number_of_substrings(\"abc\"))  # Expected output: 6\nprint(number_of_substrings(\"abcd\")) # Expected output: 10\nprint(number_of_substrings(\"abcde\"))# Expected output: 15",
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ]
  },
  {
    "mbpp_id": 239,
    "problem_statement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_total_number_of_sequences(n, m):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i // 2 + 1, min(m + 1, i) + 1):\n            if i - j >= 0:\n                dp[i] += dp[i - j]\n    \n    return dp[n]\n\n# Example usage\nprint(get_total_number_of_sequences(10, 4))  # Expected output: 4\nprint(get_total_number_of_sequences(5, 2))   # Expected output: 6\nprint(get_total_number_of_sequences(16, 3))  # Expected output: 84",
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ]
  },
  {
    "mbpp_id": 240,
    "problem_statement": "Write a function to replace the last element of the list with another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'replace_list' is not defined",
      "Test 2: FAIL - name 'replace_list' is not defined",
      "Test 3: FAIL - name 'replace_list' is not defined"
    ],
    "generated_code": "def replace_last_element(lst, new_lst):\n    lst[-1:] = new_lst\n    return lst",
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ]
  },
  {
    "mbpp_id": 241,
    "problem_statement": "Write a function to generate a 3d array having each element as '*'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def array_3d(x_dim, y_dim, z_dim):\n    return [[[ '*' for _ in range(y_dim)] for _ in range(z_dim)] for _ in range(x_dim)]",
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ]
  },
  {
    "mbpp_id": 242,
    "problem_statement": "Write a function to count total characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_charac(string):\n    return len(string)",
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ]
  },
  {
    "mbpp_id": 243,
    "problem_statement": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - KeyError: 1"
    ],
    "generated_code": "def sort_on_occurence(lst):\n    # Count the occurrences of each item in the sub-lists\n    count_dict = {}\n    for _, name in lst:\n        if name not in count_dict:\n            count_dict[name] = [0, []]\n        count_dict[name][0] += 1\n    \n    # Sort the list by occurrence and then alphabetically\n    sorted_list = sorted(lst, key=lambda x: (-count_dict[x[0]][0], x))\n    \n    return sorted_list\n\n# Test cases\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurrence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ]
  },
  {
    "mbpp_id": 244,
    "problem_statement": "Write a python function to find the next perfect square greater than a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def next_Perfect_Square(n):\n    import math\n    # Find the next integer whose square is not less than n+1\n    return int(math.sqrt(n + 1)) ** 2",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ]
  },
  {
    "mbpp_id": 245,
    "problem_statement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - max_sum() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - max_sum() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - max_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    \n    # Initialize variables to store prefix and suffix sums\n    prefix_sum = [0] * n\n    suffix_sum = [0] * n\n    \n    # Calculate prefix sums from left to right\n    prefix_sum[0] = arr[0]\n    for i in range(1, n):\n        prefix_sum[i] = max(prefix_sum[i-1], arr[i])\n    \n    # Calculate suffix sums from right to left\n    suffix_sum[n-1] = arr[-1]\n    for i in range(n-2, -1, -1):\n        suffix_sum[i] = max(suffix_sum[i+1], arr[i])\n    \n    max_sum = 0\n    \n    # Traverse the array to find the maximum bi-tonic sum\n    for i in range(n):\n        if prefix_sum[i-1] < arr[i] and arr[i] > suffix_sum[i+1]:\n            max_sum += arr[i]\n    \n    return max_sum",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ]
  },
  {
    "mbpp_id": 246,
    "problem_statement": "Write a function for computing square roots using the babylonian method.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def babylonian_squareroot(n):\n    \"\"\"\n    Compute the square root of n using the babylonian method.\n    \n    Parameters:\n    - n (float): The number to compute the square root of.\n    \n    Returns:\n    float: The approximate square root of n.\n    \"\"\"\n    guess = n / 2.0\n    while abs(guess * guess - n) > 0.0001:\n        guess = (guess + n / guess) / 2.0\n    return guess",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ]
  },
  {
    "mbpp_id": 247,
    "problem_statement": "Write a function to find the longest palindromic subsequence in the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lps(s):\n    \"\"\"\n    This function takes a string s as input and returns the length of the longest palindromic subsequence.\n    A palindromic subsequence is a sequence that reads the same backward as forward.\n    \n    Example:\n    >>> lps(\"TENS FOR TENS\")\n    5\n    >>> lps(\"CARDIO FOR CARDS\")\n    7\n    >>> lps(\"PART OF THE JOURNEY IS PART\")\n    9\n    \"\"\"\n    # Your solution goes here\n    \n    def expand_around_center(text, left, right):\n        while left >= 0 and right < len(text) and text[left] == text[right]:\n            left -= 1\n            right += 1\n        return right - left - 1\n    \n    n = len(s)\n    if n <= 1:\n        return n\n    \n    # Initialize variables for dynamic programming table\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    max_length = 1\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Check all substrings for palindrome lengths greater than 1\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if length == 2 and s[start] == s[end]:\n                dp[start][end] = 2\n            elif s[start] == s[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start][end - 1], dp[start + 1][end])\n            max_length = max(max_length, dp[start][end])\n            \n    return max_length",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ]
  },
  {
    "mbpp_id": 248,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \n    Parameters:\n    - n (int): The number up to which the harmonic sum is calculated.\n    \n    Returns:\n    float: The harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        total += 1 / i\n    return total",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ]
  },
  {
    "mbpp_id": 249,
    "problem_statement": "Write a function to find the intersection of two arrays using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n# Test Cases\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))  # Expected output: [1, 2, 8, 9]\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))     # Expected output: [3, 5, 7, 9]\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))# Expected output: [10]",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ]
  },
  {
    "mbpp_id": 250,
    "problem_statement": "Write a python function to count the occcurences of an element in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_X(tup, x):\n    # Initialize counter to zero\n    count = 0\n    \n    # Iterate through each item in the tuple\n    for item in tup:\n        # If the current item is equal to x, increment the counter\n        if item == x:\n            count += 1\n            \n    # Return the final count\n    return count",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ]
  },
  {
    "mbpp_id": 251,
    "problem_statement": "Write a function to insert an element before each element of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def insert_element(lst, elem):\n    result = [elem]\n    for item in lst:\n        result.append(item)\n        result.append(elem)\n    return result[:-len(lst)]  # Remove the last occurrence of elem from the result\n    \n# Test cases\nprint(insert_element(['Red', 'Green', 'Black'], 'c'))  # Expected output: ['c', 'Red', 'c', 'Green', 'c', 'Black']\nprint(insert_element(['python', 'java'], 'program'))   # Expected output: ['program', 'python', 'program', 'java']\nprint(insert_element(['happy', 'sad'], 'laugh'))       # Expected output: ['laugh', 'happy', 'laugh', 'sad']",
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ]
  },
  {
    "mbpp_id": 252,
    "problem_statement": "Write a python function to convert complex numbers to polar coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'cmath' is not defined"
    ],
    "generated_code": "def convert(complex_number):\n    \"\"\"\n    Converts a given complex number into its polar representation.\n    \n    Args:\n    complex_number: A complex number in the form of x + yi\n    \n    Returns:\n    A tuple containing the magnitude and angle of the complex number in radians.\n    \"\"\"\n    magnitude = abs(complex_number)\n    angle_in_radians = cmath.phase(complex_number)\n    return (magnitude, angle_in_radians)\n\n# Test cases\nprint(convert(1))   # Expected output: (1.0, 0.0)\nprint(convert(4j))  # Expected output: (4.0, 0.0)\nprint(convert(5+3j))# Expected output: (6.588, 1.249)",
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ]
  },
  {
    "mbpp_id": 253,
    "problem_statement": "Write a python function to count integers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_integer(lst):\n    return len([x for x in lst if isinstance(x, int)])\n\n# Test cases\nprint(count_integer([1,2,'abc',1.2])) # Output: 2\nprint(count_integer([1,2,3])) # Output: 3\nprint(count_integer([1,1.2,4,5.1])) # Output: 2",
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ]
  },
  {
    "mbpp_id": 254,
    "problem_statement": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def words_ae(input_string):\n    \"\"\"\n    Returns a list of words from the input_string that start with 'a' or 'e'.\n    \n    Parameters:\n        input_string (str): The string containing words separated by spaces.\n        \n    Returns:\n        List[str]: A list of words that start with 'a' or 'e'.\n    \"\"\"\n    # Splitting the input_string into individual words and filtering those that start with 'a' or 'e'\n    return [word for word in input_string.split() if word[0] in ['a', 'e']]",
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ]
  },
  {
    "mbpp_id": 255,
    "problem_statement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import product\n\ndef combinations_colors(colours, n):\n    return list(product(colours, repeat=n))",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ]
  },
  {
    "mbpp_id": 256,
    "problem_statement": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Counts and returns the number of prime numbers less than n.\n    \n    Parameters:\n    - n (int): A non-negative integer\n    \n    Returns:\n    int: The count of prime numbers less than n\n    \"\"\"\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    p = 2\n    while p * p < n:\n        if primes[p]:\n            for i in range(p * p, n, p):\n                primes[i] = False\n        p += 1\n    prime_count = sum(primes[2:])\n    return prime_count",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ]
  },
  {
    "mbpp_id": 257,
    "problem_statement": "Write a function to swap two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_numbers(x, y):\n    return(y, x)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ]
  },
  {
    "mbpp_id": 258,
    "problem_statement": "Write a function to find number of odd elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "count_odd = lambda x: sum(1 for i in x if i % 2 != 0)",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ]
  },
  {
    "mbpp_id": 259,
    "problem_statement": "Write a function to maximize the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - not enough values to unpack (expected 4, got 2)",
      "Test 2: FAIL - not enough values to unpack (expected 4, got 2)",
      "Test 3: FAIL - not enough values to unpack (expected 4, got 2)"
    ],
    "generated_code": "def maximize_elements(tuples1, tuples2):\n    # Sort each tuple in ascending order based on its elements\n    sorted_tuples1 = [tuple(sorted(x)) for x in tuples1]\n    sorted_tuples2 = [tuple(sorted(x)) for x in tuples2]\n    \n    # Pair up the sorted tuples and select the max values for each pair\n    result = [(max(a,b), max(c,d)) for a,b,c,d in zip(sorted_tuples1, sorted_tuples2)]\n    \n    return result",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ]
  },
  {
    "mbpp_id": 260,
    "problem_statement": "Write a function to find the nth newman–shanks–williams prime number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ZeroDivisionError: integer division or modulo by zero"
    ],
    "generated_code": "import math\n\ndef newman_shanks_williams(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    x = 2\n    while True:\n        value = pow(x, x, n)\n        y = pow(x - 1, n - 1, n)\n        z = pow(y, y, n)\n        \n        if ((x - y) ** 2 * (z - y) * (n - 1) + 8 * n // (y - 1)) % n != 0 and not is_prime((x - y) * z % n):\n            count += 1\n            if count == n:\n                return x - 1\n    \n        x += 1\n\n# Test the function with provided data points\nassert(newman_shanks_williams(3) == 7)\nassert(newman_shanks_wills_ams_11(4) == 17)\nassert(newman_shanks_williams(5) == 41)\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ]
  },
  {
    "mbpp_id": 261,
    "problem_statement": "Write a function to perform mathematical division operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def division_elements(a, b):\n    # Check if both inputs are non-empty and of the same length\n    if not a or not b or len(a) != len(b):\n        return ()\n    \n    # Perform element-wise division\n    result = [a[i] / b[i] for i in range(len(a))]\n    return tuple(result)\n\n# Test cases\nprint(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))  # Expected output: (2, 2, 2, 3)\nprint(division_elements((12, 6, 8, 16), (6, 3, 4, 4)))  # Expected output: (2, 2, 2, 4)\nprint(division_elements((20, 14, 36, 18), (5, 7, 6, 9)))  # Expected output: (4, 2, 6, 2)",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ]
  },
  {
    "mbpp_id": 262,
    "problem_statement": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split_two_parts(input_list, n):\n    return input_list[:n], input_list[n:]\n\n# Test cases\nprint(split_two_parts([1,1,2,3,4,4,5,1],3)) # Expected output: ([1, 1, 2], [3, 4, 4, 5, 1])\nprint(split_two_parts(['a', 'b', 'c', 'd'],2)) # Expected output: (['a', 'b'], ['c', 'd'])\nprint(split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)) # Expected output: (['p', 'y', 't', 'h'], ['o', 'n'])",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ]
  },
  {
    "mbpp_id": 263,
    "problem_statement": "Write a function to merge two dictionaries.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def merge_dict(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ]
  },
  {
    "mbpp_id": 264,
    "problem_statement": "Write a function to calculate a dog's age in dog's years.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dog_age(dog_years):\n    # Convert human years to dog years\n    if dog_years <= 2:\n        return dog_years * 10.5\n    else:\n        return (dog_years - 2) * 4 + 21\n\n# Test cases\nprint(dog_age(12))  # Expected output: 61\nprint(dog_age(15))  # Expected output: 73\nprint(dog_age(24))  # Expected output: 109",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ]
  },
  {
    "mbpp_id": 265,
    "problem_statement": "Write a function to split a list for every nth element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]",
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ]
  },
  {
    "mbpp_id": 266,
    "problem_statement": "Write a function to find the lateral surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2",
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ]
  },
  {
    "mbpp_id": 267,
    "problem_statement": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def square_Sum(n):\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers and calculate their squares\n    for i in range(1, 2*n, 2):\n        total_sum += i*i\n    \n    return total_sum",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ]
  },
  {
    "mbpp_id": 268,
    "problem_statement": "Write a function to find the n'th star number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def find_star_num(n):\n    \"\"\"\n    Calculate the nth star number.\n    \n    A star number is defined as:\n    S_n = n^3 + 2n^2 + n\n    \n    Args:\n    n (int): The position in the sequence of star numbers.\n    \n    Returns:\n    int: The nth star number.\n    \"\"\"\n    return n**3 + 2*n**2 + n\n\n# Test cases to verify the correctness of the solution\nassert find_star_num(3) == 37, \"Test case 1 failed\"\nassert find_star_num(4) == 73, \"Test case 2 failed\"\nassert find_star_num(5) == 121, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ]
  },
  {
    "mbpp_id": 269,
    "problem_statement": "Write a function to find the ascii value of a character.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def ascii_value(char):\n    return ord(char)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ]
  },
  {
    "mbpp_id": 270,
    "problem_statement": "Write a python function to find the sum of even numbers at even positions.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_even_and_even_index(arr, k):\n    # Initialize total sum\n    total_sum = 0\n    \n    # Iterate through the array from index 2 to k-1 (even indices)\n    for i in range(2, k, 2):\n        if arr[i] % 2 == 0:\n            total_sum += arr[i]\n    \n    return total_sum",
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ]
  },
  {
    "mbpp_id": 271,
    "problem_statement": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        # Calculate the ith even number and raise it to the 5th power\n        current_even_number = 2 * i\n        total_sum += pow(current_even_number, 5)\n    return total_sum\n\n# Test the function with provided data points\nassert even_Power_Sum(2) == 1056, \"Test case 1 failed\"\nassert even_Power_Sum(3) == 8832, \"Test case 2 failed\"\nassert even_Power_Sum(1) == 32, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ]
  },
  {
    "mbpp_id": 272,
    "problem_statement": "Write a function to perfom the rear element extraction from list of tuples records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rear_extract(lst):\n    # Extracts and returns the last elements of each tuple in the list\n    return [item[2] for item in lst]\n\n# Test cases to verify the correctness of the function\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19], \"Test case 1 failed\"\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45], \"Test case 2 failed\"\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ]
  },
  {
    "mbpp_id": 273,
    "problem_statement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    return tuple(result)\n\n# Test cases\nprint(substract_elements((10, 4, 5), (2, 5, 18))) # Output: (8, -1, -13)\nprint(substract_elements((11, 2, 3), (24, 45 ,16))) # Output: (-13, -43, -13)\nprint(substract_elements((7, 18, 9), (10, 11, 12))) # Output: (-3, 7, -3)",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ]
  },
  {
    "mbpp_id": 274,
    "problem_statement": "Write a python function to find sum of even index binomial coefficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - UnboundLocalError: local variable 'i' referenced before assignment"
    ],
    "generated_code": "def even_binomial_Coeff_Sum(n):\n    # Calculate the sum of binomial coefficients for even indices up to n\n    total_sum = sum(binomial_coefficient(i) for i in range(n + 1) if i % 2 == 0)\n    return total_sum\n\n# Helper function to calculate binomial coefficient C(n, k)\ndef binomial_coefficient(n):\n    import math\n    result = 1\n    for i in range(1, min(n // 2 + 1, n - i)):\n        result *= n - i\n        result //= i\n    return result\n\n# Test cases\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 275,
    "problem_statement": "Write a python function to find the position of the last removed element from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Position(arr, n, k):\n    # Check if k is out of bounds in terms of array length\n    if k > len(arr) - 1:\n        return \"Error: k exceeds array length.\"\n    \n    # If k equals the index of 'k', we found our answer\n    if k == arr.index(k):\n        return k\n    \n    # Loop through the array from end to start to find the first occurrence of k\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == k and i != k:\n            return i + 1  # Return the index as per task requirements",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ]
  },
  {
    "mbpp_id": 276,
    "problem_statement": "Write a function to find the volume of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height",
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ]
  },
  {
    "mbpp_id": 277,
    "problem_statement": "Write a function to filter a dictionary based on values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def dict_filter(data_dict, threshold_value):\n    return {key:value for key,value in data_dict.items() if value > threshold_value}",
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ]
  },
  {
    "mbpp_id": 278,
    "problem_statement": "Write a function to find the element count that occurs before the record in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_first_elements(tuple_like):\n    # Convert the tuple-like object into an actual tuple for easier iteration\n    elements = tuple(x[0] if isinstance(x, tuple) else x for x in tuple_like)\n    \n    # Initialize variables\n    first_occurrence_index = -1\n    count_before_record = 0\n    \n    # Iterate through the list of elements\n    for i, element in enumerate(elements):\n        # If we encounter a tuple and it is not the initial one, reset counter\n        if isinstance(element, tuple) and first_occurrence_index == -1:\n            first_occurrence_index = i + 1\n        \n        # Increment counter if we're within the expected occurrence range\n        if isinstance(element, tuple) and first_occurrence_index < i <= len(elements) - 1:\n            count_before_record += 1\n    \n    return count_before_record",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "mbpp_id": 279,
    "problem_statement": "Write a function to find the nth decagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_num_decagonal(nth_term):\n    # Calculate the formula for n-th term of decagonal numbers\n    result = ((2 * nth_term - 1) ** 2)\n    return result\n\n# Test the function with provided data points\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370\nprint(\"All tests passed successfully.\")",
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "mbpp_id": 280,
    "problem_statement": "Write a function to search an element in the given array by using sequential search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True, i\n    return False, -1",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "mbpp_id": 281,
    "problem_statement": "Write a python function to check if the elements of a given list are unique or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'all_unique' is not defined",
      "Test 2: FAIL - name 'all_unique' is not defined",
      "Test 3: FAIL - name 'all_unique' is not defined"
    ],
    "generated_code": "def is_unique(lst):\n    # Remove duplicates and compare lengths before and after removing them\n    return len(lst) == len(set(lst))",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 282,
    "problem_statement": "Write a function to substaract two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef sub_list(list_a: List[int], list_b: List[int]) -> List[int]:\n    return list(map(lambda x, y: x - y, list_a, list_b))",
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "mbpp_id": 283,
    "problem_statement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def validate(num):\n    digits = [int(digit) for digit in str(num)]\n    for i in range(len(digits)):\n        if digits[i] > num // 10:\n            return False\n    return True",
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "mbpp_id": 284,
    "problem_statement": "Write a function to check whether all items of a list are equal to a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(list_of_items, target_string):\n    return len(set(list_of_items)) == 1 and list_of_items[0] == target_string",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "mbpp_id": 285,
    "problem_statement": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 're' is not defined"
    ],
    "generated_code": "def text_match_two_three(text):\n    if text.startswith('a') and len(re.findall(r'ab{2,3}', text)) > 0:\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Test Cases\nprint(text_match_two_three(\"ac\"))  # Expected output: Not matched!\nprint(text_match_two_three(\"dc\"))  # Expected output: Not matched!\nprint(text_match_two_three(\"abbbba\"))  # Expected output: Found a match!",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 286,
    "problem_statement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Find the maximum sum of contiguous subarray in arr repeated 'k' times.\n    \n    Parameters:\n    arr (list): The original list of integers.\n    k (int): The number of times the list will be repeated.\n    n (int): The size of the initial list before repetition.\n    \n    Returns:\n    int: The maximum sum of contiguous subarray in the repeated list.\n    \"\"\"\n    # Initialize dp array where dp[i] represents max sum for first i elements in arr repeated k times\n    dp = [[-float('inf')] * n for _ in range(n)]\n    \n    # Fill up the dp table with prefix sums and differences\n    for i in range(n):\n        for j in range(i + 1, min(i + n, n)):\n            if j == i + n - 1:\n                dp[j][i % n] = sum(arr[:j + 1])\n            else:\n                dp[j][i % n] = dp[j + 1][(i + 1) % n] - sum(arr[(i + 1) % n:j + 1]) + arr[(i + 1) % n]\n    \n    # Return the best value among the last element of all columns in the dp table\n    return max(dp[n - 1])\n\n# Example usage\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))  # Output: 30\nprint(max_sub_array_sum_repeated([-1, 10, 20], 3, 2))       # Output: 59\nprint(max_sub_array_sum_repeated([-1, -2, -3], 3, 3))       # Output: -1",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "mbpp_id": 287,
    "problem_statement": "Write a python function to find the sum of squares of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'square_Sum' is not defined",
      "Test 2: FAIL - name 'square_Sum' is not defined",
      "Test 3: FAIL - name 'square_Sum' is not defined"
    ],
    "generated_code": "def square_sum(n):\n    \"\"\"\n    Calculate the sum of squares of first n even natural numbers.\n    \n    Parameters:\n    n (int): The number of terms for which the sum is calculated.\n    \n    Returns:\n    int: Sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 2\n    return total\n\n# Check function with provided data points\nassert square_sum(2) == 20\nassert square_sum(3) == 56\nassert square_sum(4) == 120\n\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "mbpp_id": 288,
    "problem_statement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: modular_inverse() takes 2 positional arguments but 3 were given"
    ],
    "generated_code": "from math import gcd\nfrom functools import reduce\n\ndef modular_inverse(arr, p):\n    def is_invertible(n):\n        return gcd(p - n, p) == 1\n    \n    def modular_inverse_helper(nums):\n        mod_inv = [0] * len(nums)\n        \n        for i in range(len(nums)):\n            if nums[i] >= p:\n                raise ValueError(\"Number exceeds prime value\")\n            \n            if is_invertible(nums[i]):\n                mod_inv[i] = nums[i]\n                \n        return mod_inv\n    \n    result = reduce(lambda x, y: x + \" \" + str(y), \n                    map(modular_inverse_helper, arr), \"\")\n    \n    # Removing trailing space and adding comma for readability\n    return f\"{result[:-1]}\"\n\n\n# Test cases\nprint(modular_inverse([ 1, 6, 4, 5 ], 4, 7))  # Expected output: \"1 4\"\nprint(modular_inverse([1, 3, 8, 12, 12], 5, 13))  # Expected output: \"1 3 9\"\nprint(modular_inverse([2, 3, 4, 5], 4, 6))  # Expected output: \"1 3 5\"",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ]
  },
  {
    "mbpp_id": 289,
    "problem_statement": "Write a python function to calculate the number of odd days in a given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def odd_Days(year):\n    # A leap year has 366 days and a non-leap year has 365 days.\n    # An odd day is calculated as follows:\n    # - In a non-leap year, every 4 years except for century years will have an extra day on February 29th,\n    #   making it 366 days instead of 365.\n    # - Therefore, each non-century year contributes 1 additional day to the total count of odd days,\n    #   while each century year does not contribute an additional day due to its special rules for leap year calculation.\n    # The result is computed by dividing the input year by 4 (for regular years contributing an extra day),\n    # taking modulo 4 to account for centuries, subtracting from 365 to get the actual number of days,\n    # and finally adding back the adjusted value based on the century rule.\n    if year % 4 != 0:\n        return 365 + (year // 4 - year // 100)\n    else:\n        return 365 + (year // 4 - year // 100 - 1)\n\n\n# Test cases\nassert odd_Days(100) == 5\nassert odd_Days(50) == 6\nassert odd_Days(75) == 2\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ]
  },
  {
    "mbpp_id": 290,
    "problem_statement": "Write a function to find the list of lists with maximum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length(lists):\n    if not lists:\n        return (0, [])\n    else:\n        max_len = max(len(sublist) for sublist in lists)\n        max_lists = [sublist for sublist in lists if len(sublist) == max_len]\n        return (max_len, max_lists)\n\n# Test cases\nprint(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) # Expected output: (3, [13, 15, 17])\nprint(max_length([[1], [5, 7], [10, 12, 14,15]])) # Expected output: (4, [10, 12, 14,15])\nprint(max_length([[5], [15,20,25]])) # Expected output: (3, [15,20,25])",
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ]
  },
  {
    "mbpp_id": 291,
    "problem_statement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    else:\n        dp = [0] * (n + 1)\n        dp[0], dp[1] = 1, k\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n            if i < k:\n                dp[i] += k - i\n        return dp[n]\n\n# Example usage\nprint(count_no_of_ways(2, 4))  # Expected output: 16\nprint(count_no_of_ways(3, 2))  # Expected output: 6\nprint(count_no_of_ways(4, 4))  # Expected output: 228",
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ]
  },
  {
    "mbpp_id": 292,
    "problem_statement": "Write a python function to find quotient of two numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(x, y):\n    # Check if division results in an integer\n    return x // y if x % y == 0 else None",
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ]
  },
  {
    "mbpp_id": 293,
    "problem_statement": "Write a function to find the third side of a right angled triangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Calculate the length of the hypotenuse in a right-angled triangle given the lengths of \n    the other two sides.\n    \n    Parameters:\n        a (float): The length of one side of the triangle.\n        b (float): The length of the other side of the triangle.\n        \n    Returns:\n        float: The length of the hypotenuse.\n    \"\"\"\n    return math.sqrt(a**2 + b**2)",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ]
  },
  {
    "mbpp_id": 294,
    "problem_statement": "Write a function to find the maximum value in a given heterogeneous list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_val(lst):\n    return max([item for item in lst if isinstance(item, int) or isinstance(item, float)])",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ]
  },
  {
    "mbpp_id": 295,
    "problem_statement": "Write a function to return the sum of all divisors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def sum_div(n):\n    \"\"\"\n    This function calculates the sum of all divisors of n.\n    \n    Parameters:\n    - n: An integer\n    \n    Returns:\n    - The sum of all divisors of n\n    \"\"\"\n    total_sum = 0\n    for i in range(1, int(n**0.5) + 1): # Only need to check up to sqrt(n)\n        if n % i == 0:\n            total_sum += i\n            if i != n // i: # Avoid adding the square root twice for perfect squares\n                total_sum += n // i\n    return total_sum\n\nassert(sum_div(8) == 7)\nassert(sum_div(12) == 16)\nassert(sum_div(7) == 1)",
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ]
  },
  {
    "mbpp_id": 296,
    "problem_statement": "Write a python function to count inversions in an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_Inv_Count(arr, n):\n    inversion_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inversion_count += 1\n    return inversion_count",
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ]
  },
  {
    "mbpp_id": 297,
    "problem_statement": "Write a function to flatten a given nested list structure.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def flatten_list(nested_list):\n    return [item for sublist in nested_list for item in (sublist if isinstance(sublist, list) else [sublist])]",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 298,
    "problem_statement": "Write a function to find the nested list elements which are present in another list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - unhashable type: 'list'",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def intersection_nested_lists(nested_list_1, nested_list_2):\n    result = []\n    for sublist in nested_list_1:\n        if isinstance(sublist, list) and set(sublist).issubset(set(nested_list_2)):\n            result.append(sublist)\n    return result",
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ]
  },
  {
    "mbpp_id": 299,
    "problem_statement": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_aggregate(tuples_list):\n    return max(tuples_list, key=lambda x: x[1])[0]",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ]
  },
  {
    "mbpp_id": 300,
    "problem_statement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    Calculate the number of binary sequences of length 2n where the sum of the first n bits equals the sum of the last n bits.\n    \n    Args:\n    n (int): The length of each sequence and half the length of the total sequence.\n    \n    Returns:\n    float: The count of such binary sequences.\n    \"\"\"\n    # Formula for calculating combinations: C(n, k)\n    def combination(n, k):\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n    \n    # Sum of binomial coefficients C(2n, n) gives us the count\n    result = combination(2 * n, n)\n    return result / (2 ** n)\n\n# Test cases to verify the correctness of the solution\nassert round(count_binary_seq(1), 5) == 1.0\nassert round(count_binary_seq(2), 5) == 2.0\nassert round(count_binary_seq(3), 5) == 4.0\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ]
  },
  {
    "mbpp_id": 301,
    "problem_statement": "Write a function to find the depth of a dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dict_depth(d):\n    return max((dict_depth(v) if isinstance(v, dict) else 0 for v in d.values()), default=0) + 1",
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ]
  },
  {
    "mbpp_id": 302,
    "problem_statement": "Write a python function to find the most significant bit number which is also a set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def set_Bit_Number(n):\n    # Find the position of the rightmost set bit and subtract 1 to get the most significant bit\n    msb = n & -n\n    return msb",
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ]
  },
  {
    "mbpp_id": 303,
    "problem_statement": "Write a python function to check whether the count of inversion of two types are same or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def solve(nums, n):\n    # Implementing the logic here\n    inv_count_type1 = 0\n    inv_count_type2 = 0\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] > nums[j]:\n                inv_count_type1 += 1\n                \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] == nums[j]:\n                inv_count_type2 += 1\n                \n    return inv_count_type1 == inv_count_type2\n\n# Test Cases\nprint(solve([1,0,2],3))  # Expected output: True\nprint(solve([1,2,0],3))  # Expected output: False\nprint(solve([1,2,1],3))  # Expected output: True",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ]
  },
  {
    "mbpp_id": 304,
    "problem_statement": "Write a python function to find element at a given index after number of rotations.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: find_Element() takes 3 positional arguments but 4 were given"
    ],
    "generated_code": "def find_Element(arr, queries, idx):\n    n = len(arr)\n    for q in queries:\n        start, end = q[0], q[1]\n        if start <= idx < end and end < n-1:\n            idx += 1\n        elif start > idx >= end:\n            idx -= 1\n        else:\n            break\n    return arr[idx]\n\n# Test cases\nprint(find_Element([1,2,3,4,5],[[[0,2],[0,3]]],2,1))  # Output: 3\nprint(find_Element([1,2,3,4],[[[0,1],[0,2]]],1,2))   # Output: 3\nprint(find_Element([1,2,3,4,5,6],[[[0,1],[0,2]]],1,1))  # Output: 1",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ]
  },
  {
    "mbpp_id": 305,
    "problem_statement": "Write a function to match two words from a list of words starting with letter 'p'.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def start_withp(words):\n    for word in words:\n        if word.startswith(\"p\"):\n            return (word.split()[0], word)\n    return None",
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ]
  },
  {
    "mbpp_id": 306,
    "problem_statement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_increasing_subseq(arr: List[int], n: int, x: int, y: int) -> int:\n    # Initialize variables for the main loop\n    current_max = arr[x]\n    result = arr[y]\n    \n    for i in range(x+1, min(n, y)):\n        if arr[i] > current_max:\n            current_max = arr[i]\n        \n        # Check if adding 'i' makes the sum greater than the previous result\n        if arr[i] + current_max > result:\n            result = arr[i] + current_max\n    \n    return result",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ]
  },
  {
    "mbpp_id": 307,
    "problem_statement": "Write a function to get a colon of a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def colon_tuplex(tpl, n, value):\n    # Convert the tuple to a list for modification\n    lst = list(tpl)\n    \n    # Insert 'value' after every nth element in the list\n    for i in range(0, len(lst), n):\n        lst.insert(i + 1, value)\n    \n    # Convert back to tuple and return\n    return tuple(lst)\n\n# Test cases\nprint(colon_tuplex((\"HELLO\", 5, [], True), 2, 50)) # (\"HELLO\", 5, [50], True)\nprint(colon_tuplex((\"HELLO\", 5, [], True), 2, 100)) # (\"HELLO\", 5, [100], True)\nprint(colon_tuplex((\"HELLO\", 5, [], True), 2, 500)) # (\"HELLO\", 5, [500], True)",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ]
  },
  {
    "mbpp_id": 308,
    "problem_statement": "Write a function to find the specified number of largest products from two given lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
      "Test 2: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
      "Test 3: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"
    ],
    "generated_code": "from typing import List\nimport numpy as np\n\ndef large_product(list1: List[int], list2: List[int], num_products: int) -> List[int]:\n    # Calculate all possible products using numpy for efficiency\n    product_matrix = np.outer(np.array(list1), np.array(list2))\n    # Get the top `num_products` largest elements in the matrix\n    top_elements = np.partition(product_matrix, -num_products)[-num_products:]\n    # Convert back to integers and sort them in descending order\n    sorted_top_elements = sorted(top_elements, reverse=True)\n    return [int(x) for x in sorted_top_elements]",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ]
  },
  {
    "mbpp_id": 309,
    "problem_statement": "Write a python function to find the maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ]
  },
  {
    "mbpp_id": 310,
    "problem_statement": "Write a function to convert a given string to a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ]
  },
  {
    "mbpp_id": 311,
    "problem_statement": "Write a python function to set the left most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_left_most_unset_bit(n):\n    # Find the position of the rightmost set bit\n    for i in range(1, n + 1):\n        if n & (1 << i - 1):\n            # Shift all bits to the left and clear the first bit\n            return n | (n >> 1)\n    return n  # Return original number if no unset bit is found\n    \n# Test cases\nprint(set_left_most_unset_bit(10))  # Expected output: 14\nprint(set_left_most_unset_bit(12))  # Expected output: 14\nprint(set_left_most_unset_bit(15))  # Expected output: 15",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 312,
    "problem_statement": "Write a function to find the volume of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef volume_cone(radius, height):\n    # Calculate and return the volume of the cone\n    base_area = math.pi * radius ** 2\n    volume = 1/3 * base_area * height\n    return round(volume, 10)",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ]
  },
  {
    "mbpp_id": 313,
    "problem_statement": "Write a python function to print positive numbers in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pos_nos(nums):\n    # Filter out non-positive numbers and return the result as a tuple\n    return tuple(num for num in nums if num > 0)",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ]
  },
  {
    "mbpp_id": 314,
    "problem_statement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_rectangular_grid(grid: List[List[int]], n: int) -> int:\n    # Initialize the first row of the DP table with values from the grid\n    dp = [[grid[0][i] if i < len(grid[0]) else 0 for i in range(len(grid))] for j in range(n + 1)]\n    \n    # Fill the DP table\n    for r in range(1, n + 1):\n        for c in range(1, len(dp[r - 1])):\n            dp[r][c] = max(dp[r-1][c-1], dp[r-1][c]) + grid[r-1][c]\n            \n    # The result is the maximum value in the last row of the DP table\n    return max(dp[-1])",
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ]
  },
  {
    "mbpp_id": 315,
    "problem_statement": "Write a python function to find the first maximum length of even word.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Max_Len_Even(s):\n    # Initialize variables to store the maximum length and corresponding even word\n    max_len = -1\n    max_word = \"\"\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Iterate through each word in the list\n    for word in words:\n        if len(word) % 2 == 0:  # Check if the word is even\n            if len(word) > max_len:  # Update max_len if the current word is longer\n                max_len = len(word)\n                max_word = word\n    \n    return max_word\n\n# Test cases\nprint(find_Max_Len_Even(\"python language\"))  # Output: \"language\"\nprint(find_Max_Len_Even(\"maximum even length\"))  # Output: \"length\"\nprint(find_Max_Len_Even(\"eve\"))  # Output: \"-1\"",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ]
  },
  {
    "mbpp_id": 316,
    "problem_statement": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_last_occurrence(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            result = mid\n            low = mid + 1\n    \n    return result\n\n# Test cases\nprint(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 3\nprint(find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9))  # Output: 9\nprint(find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6))  # Output: 6",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ]
  },
  {
    "mbpp_id": 317,
    "problem_statement": "Write a function to reflect the modified run-length encoding from a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def modified_encode(arr):\n    result = []\n    i = 0\n    while i < len(arr):\n        count = 1\n        current_value = arr[i]\n        while i + 1 < len(arr) and arr[i] == arr[i+1]:\n            count += 1\n            i += 1\n        if count > 1:\n            result.append(str(count))\n        result.append(current_value)\n        i += 1\n    return result\n\n# Test cases\nprint(modified_encode([1,1,2,3,4,4,5,1])) # Expected output: [[2, 1], 2, 3, [2, 4], 5, 1]\nprint(modified_encode('automatically')) # Expected output: ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nprint(modified_encode('python')) # Expected output: ['p', 'y', 't', 'h', 'o', 'n']",
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ]
  },
  {
    "mbpp_id": 318,
    "problem_statement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_volume(sides_sum):\n    \"\"\"\n    Find the maximum volume of a cuboid with the sum of its sides equal to the input 'sides_sum'.\n    \n    Parameters:\n    - sides_sum: An integer representing the sum of the sides of the cuboid.\n    \n    Returns:\n    - The maximum possible volume as an integer.\n    \"\"\"\n    # Start from the largest possible side length and work downwards\n    for side in range(sides_sum // 3, 0, -1):\n        remaining = sides_sum - 3 * side\n        if remaining > 0:\n            third_side = int(remaining / 2)\n            if second_side := remaining - third_side:\n                return side * second_side * third_side\n    return 0\n\n# Test cases\nprint(max_volume(8))  # Expected output: 18\nprint(max_volume(4))  # Expected output: 2\nprint(max_volume(1))  # Expected output: 0",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ]
  },
  {
    "mbpp_id": 319,
    "problem_statement": "Write a function to find all five characters long word in the given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import re\n\ndef find_long_word(input_string):\n    # Define the regular expression pattern for a five-character word\n    pattern = r'\\b\\w{5}\\b'\n    \n    # Find all matches of the pattern in the input string\n    result = re.findall(pattern, input_string)\n    \n    return result\n\n# Test cases to verify the correctness of the function\nassert find_long_word('Please move back to stream') == ['stream'], \"Test case 1 failed\"\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra'], \"Test case 2 failed\"\nassert find_long_word('Streaming Media Player') == ['Media'], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ]
  },
  {
    "mbpp_id": 320,
    "problem_statement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_difference(n):\n    return pow(sum(range(1,n+1)), 2) - sum(map(lambda x: x**2, range(1,n+1)))",
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ]
  },
  {
    "mbpp_id": 321,
    "problem_statement": "Write a function to find the demlo number for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'reversed_dials' is not defined. Did you mean: 'reversed_digits'?"
    ],
    "generated_code": "def find_demlo(num):\n    # Initialize variables to store digits and reversed digits\n    num_str = str(num)\n    digits = []\n    reversed_digits = []\n\n    # Convert the number into a string to easily access each digit\n    for digit in num_str:\n        digits.append(int(digit))\n\n    # Calculate the total sum of all digits\n    total_sum = sum(digits)\n\n    # Generate the demlo number based on the total sum\n    demlo_num = ''\n    current_digit = 1\n    while len(demlo_num) < len(num_str):\n        demlo_num += str(current_digit * int(len(num_str) - len(str(total_sum))))\n        current_digit += 1\n\n    return ''.join(reversed_dials)\n\n# Test cases to verify the correctness of the function\nassert find_demlo(\"111111\") == \"12345654321\"\nassert find_demlo(\"1111\") == \"1234321\"\nassert find_demlo(\"13333122222\") == \"123456789101110987654321\"\n\nprint(find_demlo(\"111111\"))",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ]
  },
  {
    "mbpp_id": 322,
    "problem_statement": "Write a function to find all index positions of the minimum values in a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def position_min(lst):\n    min_index = lst.index(min(lst))\n    return [min_index] + [i for i, x in enumerate(lst) if x == min(x for y in lst if isinstance(y, int))]\n\n# Test cases\nprint(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])) # Output: [3, 11]\nprint(position_min([1,2,2,2,4,4,4,5,5,5,5])) # Output: [0]\nprint(position_min([2,1,5,6,8,3,4,9,10,11,8,12])) # Output: [1]",
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ]
  },
  {
    "mbpp_id": 323,
    "problem_statement": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef re_arrange(arr: List[int], n: int) -> List[int]:\n    pos = []\n    neg = []\n\n    # Separate positive and negative numbers into two lists\n    for num in arr:\n        if num >= 0:\n            pos.append(num)\n        else:\n            neg.append(num)\n\n    result = []\n    \n    # Alternate between positive and negative numbers\n    while len(result) < n:\n        if len(pos) > 0:\n            result.append(pos.pop(0))\n        if len(neg) > 0:\n            result.append(neg.pop(0))\n\n    return result",
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ]
  },
  {
    "mbpp_id": 324,
    "problem_statement": "Write a function to extract the sum of alternate chains of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 't' is not defined"
    ],
    "generated_code": "def sum_of_alternates(tuples_list):\n    # Extract elements at even indices and add them as first part of result tuple\n    sum_even = sum(t[::2])\n    \n    # Extract elements at odd indices and add them as second part of result tuple\n    sum_odd = sum(t[1::2])\n    \n    return (sum_even, sum_odd)\n\n# Test cases\nprint(sum_of_alternates((5, 6, 3, 6, 10, 34)))  # Expected output: (46, 18)\nprint(sum_of_alternates((1, 2, 3, 4, 5)))        # Expected output: (6, 9)\nprint(sum_of_alternates((6, 7, 8, 9, 4, 5)))     # Expected output: (21, 18)",
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ]
  },
  {
    "mbpp_id": 325,
    "problem_statement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    \n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1 + (n // i - i >= i)\n    \n    return count\n\n# Test Cases\nassert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ]
  },
  {
    "mbpp_id": 326,
    "problem_statement": "Write a function to get the word with most number of occurrences in the given strings list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef most_occurrences(strings: List[str]) -> str:\n    max_count = 0\n    word_with_max_count = \"\"\n    for string in strings:\n        words = string.split()\n        for word in words:\n            if string.count(word) > max_count:\n                max_count = string.count(word)\n                word_with_max_count = word\n    return word_with_max_count",
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ]
  },
  {
    "mbpp_id": 327,
    "problem_statement": "Write a function to print check if the triangle is isosceles or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Check if any two sides of the triangle are equal\n    return a == b or b == c or a == c",
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ]
  },
  {
    "mbpp_id": 328,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the left direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_left(lst, k, n):\n    return lst[n:] + lst[:n]\n\n# Test cases\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)) # [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)) # [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)) # [6, 7, 8, 9, 10, 1, 2]",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ]
  },
  {
    "mbpp_id": 329,
    "problem_statement": "Write a python function to count negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_count(nums):\n    # Initialize counter for negative numbers\n    count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num < 0:\n            count += 1\n            \n    # Return the total count of negative numbers\n    return count",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ]
  },
  {
    "mbpp_id": 330,
    "problem_statement": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_char(text):\n    # Define regex pattern for matching three, four, and five character words\n    pattern = r'\\b\\w{3,5}\\b'\n    \n    # Find matches using regex\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Test cases\nprint(find_char('For the four consumer complaints contact manager AKR reddy'))  # Should return ['For', 'the', 'four', 'AKR', 'reddy']\nprint(find_char('Certain service are subject to change MSR'))  # Should return ['are', 'MSR']\nprint(find_char('Third party legal desclaimers'))  # Should return ['Third', 'party', 'legal']",
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ]
  },
  {
    "mbpp_id": 331,
    "problem_statement": "Write a python function to count unset bits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_unset_bits(number):\n    # Initialize a counter for unset bits\n    unset_count = 0\n    \n    # Loop through each bit in the binary representation of the number\n    while number:\n        # If the least significant bit is not set (i.e., it's 0), increment the counter\n        if number & 1 == 0:\n            unset_count += 1\n        \n        # Right shift the number to check the next bit\n        number >>= 1\n    \n    return unset_count",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ]
  },
  {
    "mbpp_id": 332,
    "problem_statement": "Write a function to count character frequency of a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def char_frequency(s):\n    return {char: s.count(char) for char in set(s)}",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ]
  },
  {
    "mbpp_id": 333,
    "problem_statement": "Write a python function to sort a list according to the second element in sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sort' is not defined",
      "Test 2: FAIL - name 'Sort' is not defined",
      "Test 3: FAIL - name 'Sort' is not defined"
    ],
    "generated_code": "def sort_list(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst",
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ]
  },
  {
    "mbpp_id": 334,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Validity(a, b, c):\n    # Check for non-positive side lengths and zero length\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Sort the sides to simplify comparison\n    sides = sorted([a, b, c])\n    \n    # Check the triangle inequality theorem\n    if sides[0] + sides[1] >= sides[2]:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ]
  },
  {
    "mbpp_id": 335,
    "problem_statement": "Write a function to find the sum of arithmetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ap_sum(a, d, n):\n    # Calculate the sum using the formula for the sum of an arithmetic series:\n    return n * (2*a + (n-1)*d) // 2",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ]
  },
  {
    "mbpp_id": 336,
    "problem_statement": "Write a function to check whether the given month name contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum(month_name):\n    months_with_28_days = [\"April\", \"June\", \"September\", \"November\"]\n    return month_name in months_with_28_days",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ]
  },
  {
    "mbpp_id": 337,
    "problem_statement": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_word(text):\n    \"\"\"\n    This function checks if the given 'text' ends with a word.\n    The search is case-insensitive and looks for words ending with one or more characters\n    followed by '.', ',' , ';' , '?' or '!'.\n    \n    Parameters:\n    - text (str): The input string to be checked\n    \n    Returns:\n    - str: A message indicating whether a match was found ('Found a match!') or not ('Not matched!').\n    \"\"\"\n    pattern = r'\\b\\w+\\.\\W*$|\\b\\w+,\\W*$|\\b\\w+;\\W*$|\\b\\w+?\\?[\\W]*$|\\b\\w*!\\W*$'\n    if re.search(pattern, text.lower()):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match_word(\"python.\")) # Expected output: \"Found a match!\"\nprint(text_match_word(\"java,\"))   # Expected output: \"Found a match!\"\nprint(text_match_word(\"c++;\"))    # Expected output: \"Found a match!\"\nprint(text_match_word(\"java?\"))   # Expected output: \"Found a match!\"\nprint(text_match_word(\"C#!\"))     # Expected output: \"Found a match!\"\nprint(text_match_word(\"go\"))      # Expected output: \"Not matched!\"",
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 338,
    "problem_statement": "Write a python function to count the number of substrings with same first and last characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i] == s[j - 1]:\n                count += 1\n    return count",
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ]
  },
  {
    "mbpp_id": 339,
    "problem_statement": "Write a python function to find the maximum occuring divisor in an interval.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>' not supported between instances of 'int' and 'NoneType'",
      "Test 2: FAIL - '>' not supported between instances of 'int' and 'NoneType'",
      "Test 3: FAIL - '>' not supported between instances of 'int' and 'NoneType'"
    ],
    "generated_code": "def find_Divisor(l, r):\n    max_divisor = None\n    for i in range(l, r + 1):\n        divisors = set()\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                divisors.add(j)\n                if i // j != j:\n                    divisors.add(i // j)\n        max_divisor = max(max_divisor, len(divisors))\n    return max_divisor",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ]
  },
  {
    "mbpp_id": 340,
    "problem_statement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_three_smallest_nums(nums):\n    # Remove duplicates and sort the list in ascending order\n    sorted_nums = sorted(set(nums))\n    \n    # Sum the first three elements in the sorted list\n    result_sum = sum(sorted_nums[:3])\n    \n    return result_sum",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ]
  },
  {
    "mbpp_id": 341,
    "problem_statement": "Write a function to convert the given set into ordered tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_to_tuple(input_set):\n    return tuple(sorted(input_set))",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ]
  },
  {
    "mbpp_id": 342,
    "problem_statement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - AttributeError: 'itertools._tee' object has no attribute 'isdisjoint'"
    ],
    "generated_code": "def find_minimum_range(lists):\n    lists.sort(key=lambda x: len(x), reverse=True)  # Sort with length in descending order for easier comparison\n    start, end = min(lists[0]), max(lists[0])  # Initialize ranges with first array elements\n    n = len(lists)\n\n    while True:\n        all_included = True\n        for i in range(n):\n            if not sets[i].isdisjoint(set.intersection(*maps)):\n                continue\n            else:\n                all_included = False\n                break\n        if all_included:\n            return (start, end)\n        \n        new_start, new_end = sorted([min(l[start:end+1]) for l in lists])\n        start = new_start\n        end = new_end\n\n# Example usage\nfrom collections import defaultdict\nimport itertools\n\nlists = [[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]\nmaps = defaultdict(lambda: set())\nfor i, lst in enumerate(lists):\n    for val in lst:\n        maps[val-i].add(i)\nsets = itertools.tee(lst, len(maps))\nfor s in sets:\n    next(s, None)\n\nfind_minimum_range(lists)",
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ]
  },
  {
    "mbpp_id": 343,
    "problem_statement": "Write a function to calculate the number of digits and letters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def dig_let(s):\n    num_digits = 0\n    num_letters = 0\n    \n    for char in s:\n        if char.isdigit():\n            num_digits += 1\n        elif char.isalpha():\n            num_letters += 1\n            \n    return (num_letters, num_digits)",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ]
  },
  {
    "mbpp_id": 344,
    "problem_statement": "Write a python function to find number of elements with odd factors in a given range.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'primeFactors' is not defined",
      "Test 2: FAIL - name 'primeFactors' is not defined",
      "Test 3: FAIL - name 'primeFactors' is not defined"
    ],
    "generated_code": "import math\nfrom typing import Tuple\n\ndef count_Odd_Squares(start: int, end: int) -> int:\n    \"\"\"\n    Count the number of integers within the specified range [start, end] \n    that have an odd number of unique prime factors.\n    \n    Parameters:\n    start (int): The starting integer of the range.\n    end (int): The ending integer of the range.\n    \n    Returns:\n    int: The count of integers within the range that have an odd number of unique prime factors.\n    \"\"\"\n    def has_odd_prime_factors(n: int) -> bool:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0 and isPrime(i):\n                while n % i == 0:\n                    n //= i\n                if n > 1 and isPrime(n):\n                    return True\n        return False\n    \n    def isPrime(num: int) -> bool:\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for num in range(max(2, start), min(end + 1, len(primeFactors) - 1)):\n        if has_odd_prime_factors(num):\n            count += 1\n    return count\n\n# Assuming primeFactors is defined elsewhere as {2, 3, 5, 7, ...}",
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ]
  },
  {
    "mbpp_id": 345,
    "problem_statement": "Write a function to find the difference between two consecutive numbers in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diff_consecutivenums(nums):\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]",
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ]
  },
  {
    "mbpp_id": 346,
    "problem_statement": "Write a function to find entringer number e(n, k).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def zigzag(n, k):\n    \"\"\"\n    This function calculates the value of 'e' based on the formula:\n    e = n + k * (k - 1) / 2\n    where n is an integer and k is another integer.\n    \n    :param n: Integer representing some numerical value.\n    :param k: Integer used in the calculation of 'e'.\n    :return: The calculated value of 'e'.\n    \"\"\"\n    result = n + k * (k - 1) // 2\n    return result\n\n# Test cases to verify the correctness of the function\nassert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1\n\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ]
  },
  {
    "mbpp_id": 347,
    "problem_statement": "Write a python function to count the number of squares in a rectangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Squares(length, width):\n    # Calculate the total number of squares\n    total_squares = length * width + length * width - (length - 1) * (width - 1)\n    return total_squares",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ]
  },
  {
    "mbpp_id": 348,
    "problem_statement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_ways() missing 1 required positional argument: 'values'",
      "Test 2: FAIL - find_ways() missing 1 required positional argument: 'values'",
      "Test 3: FAIL - find_ways() missing 1 required positional argument: 'values'"
    ],
    "generated_code": "from collections import defaultdict\n\ndef find_ways(length, values):\n    \"\"\"\n    Given an integer 'length' and a list of integers 'values', \n    calculate how many ways you can select 'length' elements such that their sum is positive.\n    \n    :param length: An integer representing the number of elements to select.\n    :param values: A list of integers representing the possible values for each element.\n    :return: An integer representing the number of ways to choose 'length' elements with a positive sum.\n    \"\"\"\n    # Initialize a dictionary to store the cumulative sums and their counts\n    cum_sum_counts = defaultdict(int)\n    cum_sum_counts[0] = 1  # There's one way to have a sum of zero starting from 0\n    \n    total_ways = 0\n    cum_sum = 0\n    \n    for value in values:\n        # Update the cumulative sum after including the current value\n        cum_sum += value\n        \n        # Check if there exists a previous sum that when added to the current value gives a positive sum\n        for prev_sum in range(cum_sum - 1, cum_sum // 2 + 1, -1):\n            total_ways += cum_sum_counts[cum_sum - prev_sum]\n        \n        # Store the current cumulative sum in the dictionary\n        cum_sum_counts[cum_sum] = cum_sum_counts.get(cum_sum, 0) + 1\n    \n    return total_ways\n\n# Example usage\nprint(find_ways(4, [1]))  # Output: 2\nprint(find_ways(6, [2]))  # Output: 5\nprint(find_ways(8, [3]))  # Output: 14",
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ]
  },
  {
    "mbpp_id": 349,
    "problem_statement": "Write a python function to check whether the given string is a binary string or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check(string):\n    # Regular expression to match binary strings\n    pattern = r'^[01]*$'\n    \n    # Search for the pattern in the input string\n    if re.search(pattern, string):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test cases\nprint(check(\"01010101010\"))  # Expected output: Yes\nprint(check(\"name0\"))        # Expected output: No\nprint(check(\"101\"))          # Expected output: Yes",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ]
  },
  {
    "mbpp_id": 350,
    "problem_statement": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def minimum_Length(s):\n    # Initialize pointers for the start and end of the substring\n    left = 0\n    right = len(s) - 1\n    \n    # Loop until the two pointers meet each other\n    while left < right:\n        # If the characters at the current positions match,\n        # move both pointers towards the center\n        if s[left] == s[right]:\n            left += 1\n            right -= 1\n        # If the characters do not match, move the pointer in the direction with fewer changes\n        elif s[left+1:right+1] != s[left:right]:\n            left += 1\n        else:\n            right -= 1\n    \n    # Return the length of the substring from left to right pointer\n    return right - left + 1",
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ]
  },
  {
    "mbpp_id": 351,
    "problem_statement": "Write a python function to find the first element occurring k times in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\nimport collections\n\ndef first_Element(arr: List[int], n: int, k: int) -> int:\n    # Initialize a dictionary to count occurrences of each element\n    counter = {}\n    \n    for num in arr:\n        if num not in counter:\n            counter[num] = 1\n        else:\n            counter[num] += 1\n            \n    # Iterate through the elements in the array\n    for i in range(len(arr)):\n        # Check if the current element occurs exactly 'k' times and is not None\n        if counter[arr[i]] == k and arr[i] != None:\n            return arr[i]\n            \n    # If no such element exists, return None\n    return None",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ]
  },
  {
    "mbpp_id": 352,
    "problem_statement": "Write a python function to check whether all the characters in a given string are unique.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'unique_Characters' is not defined",
      "Test 2: FAIL - name 'unique_Characters' is not defined",
      "Test 3: FAIL - name 'unique_Characters' is not defined"
    ],
    "generated_code": "def is_all_unique_chars(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return False\n        char_set.add(char)\n    return True\n\n# Test cases\nprint(is_all_unique_chars('aba'))  # Expected output: False\nprint(is_all_unique_chars('abc'))  # Expected output: True\nprint(is_all_unique_chars('abab')) # Expected output: False",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ]
  },
  {
    "mbpp_id": 353,
    "problem_statement": "Write a function to remove a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_column(matrix, col_index):\n    return [[row[i] for i in range(len(row)) if i != col_index] for row in matrix]\n\nprint(remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0))\n# Expected output: [[2, 3], [4, 5], [1, 1]]\n\nprint(remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2))\n# Expected output: [[1, 2], [-2, 4], [1, -1]]\n\nprint(remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0))\n# Expected output: [[3], [7], [3], [15, 17], [7], [11]]",
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ]
  },
  {
    "mbpp_id": 354,
    "problem_statement": "Write a function to find t-nth term of arithemetic progression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tn_ap(n, d, a): \n    # Calculate the nth term of an arithmetic progression using the formula:\n    # tn = a + (n - 1) * d\n    return a + (n - 1) * d",
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ]
  },
  {
    "mbpp_id": 355,
    "problem_statement": "Write a python function to count the number of rectangles in a circle of radius r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ZeroDivisionError: float division by zero"
    ],
    "generated_code": "import math\n\ndef count_Rectangles(r):\n    # Calculate the area of the circle using pi and radius squared\n    circle_area = math.pi * r**2\n    \n    # Since every square with side length equal to the diameter will be counted as a rectangle,\n    # we can simply calculate the total number of squares by taking the area of the circle divided by the area of a single square.\n    # Each square has a side length equal to twice the radius (diameter).\n    \n    # The formula is:\n    # Number_of_Squares = πr^2 / ((2r)^2)\n    # Which simplifies to:\n    # Number_of_Squares = π / 4\n    num_rectangles = circle_area / (4 * r**2)\n\n    return int(num_rectangles)\n\n# Example usage\nprint(count_Rectangles(2))  # Expected output: 8\nprint(count_Rectangles(1))  # Expected output: 1\nprint(count_Rectangles(0))  # Expected output: 0",
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ]
  },
  {
    "mbpp_id": 356,
    "problem_statement": "Write a function to find the third angle of a triangle using two angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_angle(angle1, angle2):\n    \"\"\"\n    This function takes in two angles of a triangle and returns the third angle.\n    \n    :param angle1: float - The first angle of the triangle.\n    :param angle2: float - The second angle of the triangle.\n    :return: float - The third angle of the triangle.\n    \"\"\"\n    return 180 - angle1 - angle2\n\n# Test cases\nprint(find_angle(47, 89))   # Expected output: 44\nprint(find_angle(45, 95))   # Expected output: 40\nprint(find_angle(50, 40))   # Expected output: 90",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ]
  },
  {
    "mbpp_id": 357,
    "problem_statement": "Write a function to find the maximum element of all the given tuple records.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_max(tuples_list):\n    # Initialize max_element with the first element of the first tuple in the list.\n    max_element = max(tuples_list[0][0], tuples_list[0][1])\n    \n    # Iterate through each tuple and update max_element if needed.\n    for t in tuples_list:\n        max_element = max(max_element, max(t[0], t[1]))\n        \n    return max_element",
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ]
  },
  {
    "mbpp_id": 358,
    "problem_statement": "Write a function to find modulo division of two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef moddiv_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Calculates the modulus for each pair of corresponding elements from two given lists.\n    \n    Args:\n    list1 (List[int]): The first input list containing integers.\n    list2 (List[int]): The second input list containing integers.\n    \n    Returns:\n    List[int]: A new list where each element is the result of the modulus operation on corresponding elements of the input lists.\n    \"\"\"\n    return [x % y for x, y in zip(list1, list2)]",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ]
  },
  {
    "mbpp_id": 359,
    "problem_statement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "def check_solution(a, b, c):\n    \"\"\"\n    This function checks if one root of the quadratic equation ax^2 + bx + c = 0 is twice the other.\n    \n    Parameters:\n    a (float): Coefficient of x^2\n    b (float): Coefficient of x\n    c (float): Constant term\n    \n    Returns:\n    str: 'Yes' if one root is twice the other, otherwise returns 'No'.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    # Calculate roots using the quadratic formula\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Check if one root is twice the other\n    if abs(root1) <= 1e-8 * abs(root2):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Example usage and test cases\nprint(check_solution(1, 3, 2))  # Expected output: Yes\nprint(check_solution(1, 2, 3))  # Expected output: No\nprint(check_solution(1, -5, 6)) # Expected output: No",
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ]
  },
  {
    "mbpp_id": 360,
    "problem_statement": "Write a function to find the n’th carol number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: can only concatenate str (not \"int\") to str"
    ],
    "generated_code": "def get_carol(n):\n    def helper(a, b, c, d, num, count):\n        if count == n:\n            return int(str(num + '0' * 2**(count - 1)))\n        for i in range(d):\n            res = ''\n            for j in [a, b]:\n                res += str((i // j + 1))\n            if len(res) < d:\n                for k in range(d - len(res)):\n                    res = '0' + res\n            yield from helper(i, b, d, max(c, len(res)), num + int(''.join(res)), count + 1)\n    \n    return next(helper(1, 1, 1, 2, '', 0))\n\n# Test cases\nprint(get_carol(2))  # Expected output: 7\nprint(get_carol(4))  # Expected output: 223\nprint(get_carol(5))  # Expected output: 959",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ]
  },
  {
    "mbpp_id": 361,
    "problem_statement": "Write a function to remove empty lists from a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lists):\n    return [item for item in lists if item]\n\n# Test Cases\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]) == ['Red', 'Green', [1, 2], 'Blue'], \"Test Case 1 Failed\"\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []]) == ['Green', [1, 2], 'Blue'], \"Test Case 2 Failed\"\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []]) == ['Python', 'programming', 'language'], \"Test Case 3 Failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ]
  },
  {
    "mbpp_id": 362,
    "problem_statement": "Write a python function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef max_occurrences(lst):\n    # Count the occurrences of each item in the list\n    counts = Counter(lst)\n    # Find the item(s) with the highest count\n    most_common_items = [item for item, count in counts.items() if count == counts.most_common(1)[0][1]]\n    # Return the first occurrence as it's assumed there is only one for lists where all items occur equally\n    return most_common_items[0]",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ]
  },
  {
    "mbpp_id": 363,
    "problem_statement": "Write a function to add the k elements to each element in the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_K_element(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        temp = []\n        for i in range(len(t)):\n            temp.append((t[i] + k))\n        result.append(tuple(temp))\n    return result\n\n# Test case 1\nprint(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)) # Output: [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\n# Test case 2\nprint(add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)) # Output: [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n\n# Test case 3\nprint(add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)) # Output: [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ]
  },
  {
    "mbpp_id": 364,
    "problem_statement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed: expected 2, got 7"
    ],
    "generated_code": "def min_flip_to_make_string_alternate(s):\n    \"\"\"\n    Finds the minimum number of flips needed for each character in the binary string s \n    so that no two consecutive characters are the same.\n    \n    Parameters:\n    s (str): The input binary string.\n    \n    Returns:\n    int: The minimum number of flips required.\n    \"\"\"\n    # Initialize variables to track the current and next character mismatches\n    current_mismatch = prev_char = None\n    \n    # Iterate through the string to calculate flips needed\n    for char in s:\n        if char == prev_char:\n            # If the current character matches the previous one, increment the mismatch count\n            current_mismatch += 1\n        else:\n            # Reset the current mismatch count when a new character is encountered\n            current_mismatch = 1\n        \n        # Update the variable tracking the last character seen\n        prev_char = char\n    \n    # Return the total number of flips needed\n    return max(current_mismatch, len(s) - current_mismatch)\n\n# Example check function to verify the correctness of the solution with provided data points\ndef check_solution():\n    test_cases = [\n        (\"0001010111\", 2),\n        (\"001\", 1),\n        (\"010111011\", 2)\n    ]\n    \n    for i, (input_str, expected) in enumerate(test_cases):\n        result = min_flip_to_make_string_alternate(input_str)\n        assert result == expected, f\"Test case {i+1} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i+1} passed.\")\n\ncheck_solution()",
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ]
  },
  {
    "mbpp_id": 365,
    "problem_statement": "Write a python function to count the number of digits of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Digit(number):\n    # Convert the number to string and then use len() to get the length which is the number of digits.\n    return len(str(number))\n\n# Test Cases\nprint(count_Digit(12345))  # Expected output: 5\nprint(count_Digit(11223305))  # Expected output: 8\nprint(count_Digit(4123459))  # Expected output: 7",
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ]
  },
  {
    "mbpp_id": 366,
    "problem_statement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def adjacent_num_product(nums):\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        current_product = nums[i-1] * nums[i+1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ]
  },
  {
    "mbpp_id": 367,
    "problem_statement": "Write a function to check if a binary tree is balanced or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'Node' is not defined. Did you mean: 'None'?"
    ],
    "generated_code": "def is_tree_balanced(root):\n    def dfs(node):\n        nonlocal max_height\n        if node is None:\n            return -1\n        left_height = dfs(node.left)\n        right_height = dfs(node.right)\n        if left_height == -float('inf') or right_height == -float('inf'):\n            return float('inf')\n        height_diff = abs(left_height - right_height)\n        if height_diff > 1:\n            return float('inf')\n        return max(0, left_height + 1, right_height + 1)\n\n    max_height = float('-inf')\n    if root is None:\n        return True\n    return dfs(root) != float('inf')\n\n# Test cases\nroot1 = Node(5)\nroot1.left = Node(-10)\nroot1.right = Node(10)\nroot1.left.left = Node(3)\nroot1.right.right = Node(8)\n\nprint(is_tree_balanced(root1))  # Expected output: True\n\nroot2 = Node(4)\nroot2.left = Node(9)\nroot2.right = Node(1)\n\nprint(is_tree_balanced(root2))  # Expected output: False\n\nroot3 = Node(5)\nroot3.left = Node(-3)\nroot3.right = Node(-4)\nroot3.left.left = Node(6)\nroot3.right.right = Node(1)\n\nprint(is_tree_balanced(root3))  # Expected output: False",
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ]
  },
  {
    "mbpp_id": 368,
    "problem_statement": "Write a function to repeat the given tuple n times.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def repeat_tuples(tup, n):\n    result = ()\n    for _ in range(n):\n        result += tup,\n    return result",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ]
  },
  {
    "mbpp_id": 369,
    "problem_statement": "Write a function to find the lateral surface area of cuboid",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lateralsurface_cuboid(length, width, height):\n    # Calculate and return the lateral surface area of a cuboid\n    return 2 * (length + width) * height",
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ]
  },
  {
    "mbpp_id": 370,
    "problem_statement": "Write a function to sort a tuple by its float element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def float_sort(tuples_list):\n    # Sort the list of tuples based on the float values in each tuple's second item\n    return sorted(tuples_list, key=lambda x: float(x[1]))",
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ]
  },
  {
    "mbpp_id": 371,
    "problem_statement": "Write a function to find the smallest missing element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_missing(arr, start, end):\n    if arr[start] != start:\n        return start\n    while start <= end and arr[start] == start:\n        start += 1\n    return start\n\n# Example usage\nprint(smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6))  # Output: 7\nprint(smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6))  # Output: 3\nprint(smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7))  # Output: 0",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ]
  },
  {
    "mbpp_id": 372,
    "problem_statement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - _siftup_max() missing 1 required positional argument: 'pos'",
      "Test 2: FAIL - _siftup_max() missing 1 required positional argument: 'pos'",
      "Test 3: FAIL - _siftup_max() missing 1 required positional argument: 'pos'"
    ],
    "generated_code": "def heap_assending(arr):\n    import heapq\n    # Convert the array into a max-heap\n    heapq._heapify_max(arr)\n    \n    # Extract elements from the heap and place them back into the original array in sorted order\n    for i in range(len(arr)-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i] \n        heapq._siftup_max(0) \n\n    return arr",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ]
  },
  {
    "mbpp_id": 373,
    "problem_statement": "Write a function to find the volume of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ]
  },
  {
    "mbpp_id": 374,
    "problem_statement": "Write a function to print all permutations of a given string including duplicates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'str' object does not support item assignment",
      "Test 2: FAIL - 'str' object does not support item assignment",
      "Test 3: FAIL - 'str' object does not support item assignment"
    ],
    "generated_code": "from typing import List\n\ndef permute_string(s: str) -> List[str]:\n    def backtrack(start=0):\n        if start == len(s):\n            result.append(\"\".join(s))\n        for i in range(start, len(s)):\n            s[start], s[i] = s[i], s[start]\n            backtrack(start + 1)\n            s[start], s[i] = s[i], s[start]  # backtrack step\n            \n    result = []\n    backtrack()\n    return result",
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ]
  },
  {
    "mbpp_id": 375,
    "problem_statement": "Write a function to round the given number to the nearest multiple of a specific number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def round_num(n, precision):\n    return round(n / precision) * precision",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ]
  },
  {
    "mbpp_id": 376,
    "problem_statement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_replica(tpl):\n    d = {}\n    result = []\n    for i in tpl:\n        if i not in d:\n            d[i] = True\n        else:\n            result.append(i)\n    for j in range(len(result)):\n        if d.get(result[j]) is None:\n            result.insert(j, 'MSP')\n    return tuple(result)\n\n# Test cases\nprint(remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))) # Expected output: (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nprint(remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))) # Expected output: (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nprint(remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))) # Expected output: (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ]
  },
  {
    "mbpp_id": 377,
    "problem_statement": "Write a python function to remove all occurrences of a character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_Char(s, c):\n    # Initialize an empty result string\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # If the current character is not equal to the specified character, add it to the result\n        if char != c:\n            result += char\n    \n    # Return the resulting string with no occurrences of the specified character\n    return result",
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ]
  },
  {
    "mbpp_id": 378,
    "problem_statement": "Write a python function to shift last element to first position in the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def move_first(lst):\n    # Move the last element to the front of the list\n    lst.append(lst.pop())\n    return lst",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ]
  },
  {
    "mbpp_id": 379,
    "problem_statement": "Write a function to find the surface area of a cuboid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    # Calculate the surface area of a cuboid\n    return 2 * (length*width + length*height + width*height)",
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ]
  },
  {
    "mbpp_id": 380,
    "problem_statement": "Write a function to generate a two-dimensional array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
      "Test 2: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
      "Test 3: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"
    ],
    "generated_code": "import numpy as np\n\ndef multi_list(rows, cols):\n    return np.array([[i for j in range(cols)] for i in range(rows)])\n\n# Test cases\nprint(multi_list(3, 4))   # Expected output: [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\nprint(multi_list(5, 7))   # Expected output: [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nprint(multi_list(10, 15)) # Expected output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], ..., [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ]
  },
  {
    "mbpp_id": 381,
    "problem_statement": "Write a function to sort a list of lists by a given index of the inner list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def index_on_inner_list(lst, idx):\n    lst.sort(key=lambda x: x[idx])\n    return lst",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ]
  },
  {
    "mbpp_id": 382,
    "problem_statement": "Write a function to find the number of rotations in a circularly sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_rotation_count(arr):\n    \"\"\"\n    Finds the number of times the array has been rotated.\n    \n    Parameters:\n    arr (list): The input list which is assumed to be circularly sorted and then rotated.\n    \n    Returns:\n    int: The count of how many times the array was rotated.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        \n        mid = (low + high) // 2\n        next_idx = (mid + 1) % len(arr)\n        prev_idx = (mid - 1 + len(arr)) % len(arr)\n        \n        # Check if the middle element is the largest one\n        if arr[mid] >= arr[next_idx] and arr[mid] >= arr[prev_idx]:\n            return mid\n        elif arr[mid] < arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1",
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ]
  },
  {
    "mbpp_id": 383,
    "problem_statement": "Write a python function to toggle all odd bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def even_bit_toggle_number(num):\n    # Convert the number to binary string, remove the '0b' prefix and change each bit from 0 to 1 or vice versa\n    result = ''.join('1' if int(bit) % 2 else '0' for bit in bin(num)[2:])\n    # Convert back to integer with base 2\n    return int(result, 2)\n\n# Test cases\nprint(even_bit_toggle_number(10))  # Expected output: 15\nprint(even_bit_toggle_number(20))  # Expected output: 1\nprint(even_bit_toggle_number(30))  # Expected output: 11",
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ]
  },
  {
    "mbpp_id": 384,
    "problem_statement": "Write a python function to find the frequency of the smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def frequency_Of_Smallest(count,arr):\n    # Find the smallest element in the array\n    min_element = min(arr)\n    \n    # Initialize the count for the minimum value\n    count_min_value = arr.count(min_element)\n    \n    return count_min_value",
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ]
  },
  {
    "mbpp_id": 385,
    "problem_statement": "Write a function to find the n'th perrin number using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - maximum recursion depth exceeded in comparison",
      "Test 2: FAIL - maximum recursion depth exceeded in comparison",
      "Test 3: FAIL - maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_perrin(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 2\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 3)",
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ]
  },
  {
    "mbpp_id": 386,
    "problem_statement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def swap_count(expression):\n    stack = []\n    swap_count = 0\n    \n    for char in expression:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            # When closing bracket appears but there's no corresponding opening bracket, it means we need an extra swap\n            swap_count += 1\n            \n    # Every opening bracket left in stack needs one additional swap after all brackets are balanced\n    swap_count += len(stack)\n    \n    return swap_count",
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ]
  },
  {
    "mbpp_id": 387,
    "problem_statement": "Write a python function to check whether the hexadecimal number is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_or_odd(hex_number):\n    # Convert the hex number to its integer value.\n    int_value = int(hex_number, 16)\n    \n    # Check if the integer value is divisible by 2 and return 'Even' or 'Odd'.\n    if int_value % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n\n# Test the function with provided data points.\nassert even_or_odd(\"AB3454D\") == \"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"\n\nprint(even_or_odd(\"AB3454D\")) # Should print \"Odd\".",
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ]
  },
  {
    "mbpp_id": 388,
    "problem_statement": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    Finds the largest power of 2 which is less than or equal to n.\n    \n    Parameters:\n    n (int): The input number.\n    \n    Returns:\n    int: The largest power of 2 less than or equal to n.\n    \"\"\"\n    i = 1\n    while i <= n:\n        if pow(2, i) > n:\n            return pow(2, i-1)\n        i += 1\n\n# Check function with provided data points\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\n\nprint(\"All tests passed.\")",
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ]
  },
  {
    "mbpp_id": 389,
    "problem_statement": "Write a function to find the n'th lucas number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_lucas(n):\n    \"\"\"\n    This function returns the nth Lucas number.\n    \n    Parameters:\n    n (int): The position in the Lucas sequence to retrieve.\n    \n    Returns:\n    int: The nth Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n\n# Check function with provided data points\nassert find_lucas(9) == 76, \"Test case 1 failed\"\nassert find_lucas(4) == 7, \"Test case 2 failed\"\nassert find_lucas(3) == 4, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ]
  },
  {
    "mbpp_id": 390,
    "problem_statement": "Write a function to insert a given string at the beginning of all items in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_string(lst, s):\n    return [s.format(item) for item in lst]",
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ]
  },
  {
    "mbpp_id": 391,
    "problem_statement": "Write a function to convert more than one list to nested dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def convert_list_dictionary(list_keys, list_values, list_scores):\n    # Convert lists into dictionaries and nest them as required.\n    result = {}\n    for i in range(len(list_keys)):\n        if len(list_values) > i:\n            result[list_keys[i]] = {list_keys[i]: list_scores[i]}\n    return result",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ]
  },
  {
    "mbpp_id": 392,
    "problem_statement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - RecursionError: maximum recursion depth exceeded in comparison"
    ],
    "generated_code": "def get_max_sum(num):\n    memo = {0: 0, 1: 1}\n\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        \n        res = 0\n        for i in range(1, min(5, n // 2) + 1):\n            temp_res = helper(n // i)\n            res = max(res, temp_res + i)\n        memo[n] = res\n        return res\n\n    return helper(num)\n\n# Test Cases\nprint(get_max_sum(60)) # Expected output: 106\nprint(get_max_sum(10)) # Expected output: 12\nprint(get_max_sum(2))  # Expected output: 2",
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 393,
    "problem_statement": "Write a function to find the list with maximum length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_length_list(lst):\n    return len(max(lst, key=len)), [max(lst, key=len)]",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ]
  },
  {
    "mbpp_id": 394,
    "problem_statement": "Write a function to check if given tuple is distinct or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_distinct(test_tuple):\n    # Convert the tuple to a set and compare its length with the original tuple's length.\n    # If lengths differ, it means there were duplicate elements in the tuple.\n    return len(set(test_tuple)) == len(test_tuple)",
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ]
  },
  {
    "mbpp_id": 395,
    "problem_statement": "Write a python function to find the first non-repeated character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_non_repeating_character(input_string):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char in input_string:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n\n# Test cases\nprint(first_non_repeating_character(\"abcabc\"))  # Expected output: None\nprint(first_non_repeating_character(\"abc\"))     # Expected output: 'a'\nprint(first_non_repeating_character(\"ababc\"))   # Expected output: 'c'",
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ]
  },
  {
    "mbpp_id": 396,
    "problem_statement": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_char(s):\n    # Check if the first and last characters of the string are the same\n    pattern = r'^.{1}' + re.escape(s[0]) + r'.{0}$'\n    match = re.search(pattern, s)\n    if match:\n        return 'Valid'\n    else:\n        return 'Invalid'\n\n# Test cases\nprint(check_char(\"abba\"))  # Expected output: Valid\nprint(check_char(\"a\"))     # Expected output: Valid\nprint(check_char(\"abcd\"))  # Expected output: Invalid",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ]
  },
  {
    "mbpp_id": 397,
    "problem_statement": "Write a function to find the median of three specific numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def median_numbers(a,b,c):\n    # Sort the input numbers in ascending order\n    sorted_nums = sorted([a,b,c])\n    # Calculate the median as the middle number after sorting\n    return float(sorted_nums[1])\n\n# Test cases\nprint(median_numbers(25,55,65))  # Expected output: 55.0\nprint(median_numbers(20,10,30))  # Expected output: 20.0\nprint(median_numbers(15,45,75))  # Expected output: 45.0",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ]
  },
  {
    "mbpp_id": 398,
    "problem_statement": "Write a function to compute the sum of digits of each number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - invalid literal for int() with base 10: '['",
      "Test 3: FAIL - invalid literal for int() with base 10: '-'"
    ],
    "generated_code": "def sum_of_digits(nums):\n    return sum(int(digit) for num in nums for digit in str(num))",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ]
  },
  {
    "mbpp_id": 399,
    "problem_statement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def bitwise_xor(tuple1, tuple2):\n    # Convert each tuple into integers and then apply bitwise XOR\n    result = [a ^ b for a, b in zip(tuple1, tuple2)]\n    # Convert each integer back into a tuple and return it\n    return tuple(result)\n\n# Test cases\nprint(bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)))  # Expected output: (15, 6, 5, 10)\nprint(bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)))  # Expected output: (13, 6, 3, 14)\nprint(bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)))  # Expected output: (11, 2, 13, 13)",
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ]
  },
  {
    "mbpp_id": 400,
    "problem_statement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_freq(lst):\n    freq = {}\n    for tup in lst:\n        # Convert tuple to string format for key\n        key_str = str(tup)\n        if key_str not in freq:\n            freq[key_str] = 1\n        else:\n            freq[key_str] += 1\n    return len(freq)\n\n# Test cases\nprint(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])) # Expected output: 3\nprint(extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)])) # Expected output: 4\nprint(extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)])) # Expected output: 4",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ]
  },
  {
    "mbpp_id": 401,
    "problem_statement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_nested_tuples(tup1, tup2):\n    result = []\n    for t1, t2 in zip(tup1, tup2):\n        result.append(tuple(map(sum, zip(t1, t2))))\n    return tuple(result)",
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ]
  },
  {
    "mbpp_id": 402,
    "problem_statement": "Write a function to compute the value of ncr%p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def ncr_modp(n, r, p):\n    def factorial(num, mod):\n        fact = 1\n        for i in range(1, num + 1):\n            fact *= i\n            fact %= mod\n        return fact\n    \n    def modInverse(a, m):\n        \"\"\"Computes x such that (a*x) % m == 1\"\"\"\n        m0, y, x = m, 0, 1\n        if m == 1:\n            return None\n        while a > 1:\n            # q is quotient\n            q = a // m\n            t = m\n            m = a % m\n            a = t\n            t = y\n            y = x - q * y\n            x = t\n        if x < 0:\n            x += m0\n        return x % m\n        \n    numerator = factorial(n, p)\n    denominator = factorial(r, p) * factorial(n - r, p)\n    \n    return numerator * pow(denominator, p - 2, p) % p",
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ]
  },
  {
    "mbpp_id": 403,
    "problem_statement": "Write a function to check if a url is valid or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    # Define a regular expression pattern for validating URLs\n    regex = r'^(http|https)://(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$'\n    \n    # Check if the URL matches the defined pattern\n    if re.match(regex, url):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ]
  },
  {
    "mbpp_id": 404,
    "problem_statement": "Write a python function to find the minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def minimum(x, y):\n    if x < y:\n        return x\n    else:\n        return y",
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ]
  },
  {
    "mbpp_id": 405,
    "problem_statement": "Write a function to check whether an element exists within a tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_tuplex' is not defined",
      "Test 2: FAIL - name 'check_tuplex' is not defined",
      "Test 3: FAIL - name 'check_tuplex' is not defined"
    ],
    "generated_code": "def check_tuple(tup, elem):\n    return elem in tup",
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ]
  },
  {
    "mbpp_id": 406,
    "problem_statement": "Write a python function to find the parity of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Parity(num):\n    \"\"\"\n    This function takes an integer as input and returns 'Even Parity' if the number is even,\n    and 'Odd Parity' if the number is odd.\n    \n    :param num: Integer - The number whose parity needs to be found.\n    :return: String - Either 'Even Parity' or 'Odd Parity'.\n    \"\"\"\n    return 'Even Parity' if num % 2 == 0 else 'Odd Parity'",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ]
  },
  {
    "mbpp_id": 407,
    "problem_statement": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rearrange_bigger(n):\n    \"\"\"\n    Rearrange the digits of n to form the smallest possible integer greater than n.\n    \n    :param n: Integer input from which digits need to be rearranged.\n    :return: Next bigger integer if it exists, otherwise False.\n    \"\"\"\n    str_n = list(str(n))\n    len_n = len(str_n)\n    \n    # Traverse through all pairs and find the first pair where arr[i] < arr[j]\n    for i in range(len_n - 1):\n        for j in range(i + 1, len_n):\n            # If current pair is in descending order then break\n            if int(str_n[i] + str_n[j]) > int(str_n[j] + str_n[i]):\n                temp = str_n[i]\n                str_n[i] = str_n[j]\n                str_n[j] = temp\n                # Convert back to integer and return\n                return int(''.join(str_n))\n    \n    # Return False if no such rearrangement can be done\n    return False",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ]
  },
  {
    "mbpp_id": 408,
    "problem_statement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def k_smallest_pairs(nums1, nums2, k):\n    result = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(result) == k:\n                break\n            result.append([num1, num2])\n    return result[:k]\n\n# Example usage\nprint(k_smallest_pairs([1,3,7],[2,4,6],2))  # Output: [[1, 2], [1, 4]]\nprint(k_smallest_pairs([1,3,7],[2,4,6],1))  # Output: [[1, 2]]\nprint(k_smallest_pairs([1,3,7],[2,4,6],7))  # Output: [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ]
  },
  {
    "mbpp_id": 409,
    "problem_statement": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef min_product_tuple(tuples_list: List[Tuple[int]]) -> int:\n    \"\"\"\n    Finds the tuple with the smallest product from a given list of tuples.\n    \n    :param tuples_list: A list of tuples containing integers.\n    :return: The integer representing the smallest product among all tuples in the list.\n    \"\"\"\n    return min(tuple[0] * tuple[1] for tuple in tuples_list)",
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ]
  },
  {
    "mbpp_id": 410,
    "problem_statement": "Write a function to find the minimum value in a given heterogeneous list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '<' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '<' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '<' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def min_val(lst):\n    # Initialize result with the first element of the list\n    result = lst[0]\n    \n    # Iterate through each element in the list starting from the second element\n    for item in lst[1:]:\n        # If the current item is less than the result, update the result\n        if item < result:\n            result = item\n            \n    return result",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "mbpp_id": 411,
    "problem_statement": "Write a function to convert the given snake case string to camel case string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    Converts a snake_case string to a camelCase string.\n    \n    Parameters:\n    snake_str (str): The snake_case string to be converted.\n    \n    Returns:\n    str: The converted camelCase string.\n    \"\"\"\n    # Split the input string into words based on underscores and capitalize each word except the first one\n    return ''.join(word.capitalize() for word in re.split('_+', snake_str))\n\n# Example check function to verify correctness with provided data points\ndef check_snake_to_camel():\n    test_cases = {\n        \"android_tv\": \"AndroidTv\",\n        \"google_pixel\": \"GooglePixel\",\n        \"apple_watch\": \"AppleWatch\"\n    }\n    \n    for input_str, expected_output in test_cases.items():\n        assert snake_to_camel(input_str) == expected_output, f\"Failed for {input_str}\"\n    print(\"All tests passed!\")\n\ncheck_snake_to_camel()",
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "mbpp_id": 412,
    "problem_statement": "Write a python function to remove odd numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_odd(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only even numbers from the original list.\n    Example:\n    >>> remove_odd([1,2,3])\n    [2]\n    >>> remove_odd([2,4,6])\n    [2, 4, 6]\n    >>> remove_odd([10,20,3])\n    [10, 20]\n    \"\"\"\n    result = []\n    for num in numbers:\n        if num % 2 == 0:\n            result.append(num)\n    return result",
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "mbpp_id": 413,
    "problem_statement": "Write a function to extract the nth element from a given list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]",
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "mbpp_id": 414,
    "problem_statement": "Write a python function to check whether the value exists in a sequence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def overlapping(sequence1, sequence2):\n    # Check if any element of the first sequence is present in the second sequence\n    for item in sequence1:\n        if item in sequence2:\n            return True\n    return False",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "mbpp_id": 415,
    "problem_statement": "Write a python function to find a pair with highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef max_Product(nums: List[int]) -> tuple:\n    if not nums or len(nums) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in nums:\n        if num > 0:\n            # If current number is positive and it's smaller than both min and max, update min.\n            if num <= min_num:\n                min_num = num\n            # If current number is larger than min, update max as well since negative numbers can make it so.\n            elif num >= min_num and num > max_num:\n                max_num = min_num\n                min_num = num\n        else:\n            # For negative numbers, treat them as positive temporarily.\n            temp_min = min_num\n            min_num = min(num, min_num * num)\n            max_num = max(temp_min * num, max_num * num)\n\n    # Handle the case where all numbers are negative or zero.\n    if min_num == max_num == float('-inf'):\n        min_num, max_num = -max(abs(min), abs(max)), -min(abs(min), abs(max))\n\n    return (min_num, max_num)",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "mbpp_id": 416,
    "problem_statement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def breakSum(n):\n    # Base case: if n is less than 0, return an appropriate value\n    if n < 0:\n        return float('inf')\n    \n    # If n is already less than or equal to 3, return it as is\n    elif n <= 3:\n        return n\n    \n    # Recursive case: divide the number into two parts and find the max sum of their broken sums\n    else:\n        part1 = min(n // 3 + breakSum(n - 3), n // 2 + breakSum(n - 2))\n        part2 = n % 3 + breakSum(n - 1)\n        \n        return max(part1, part2)\n\n# Example usage:\nprint(breakSum(12))  # Expected output: 13\nprint(breakSum(24))  # Expected output: 27\nprint(breakSum(23))  # Expected output: 23",
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ]
  },
  {
    "mbpp_id": 417,
    "problem_statement": "Write a function to find common first element in given list of tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'repeat' is not defined",
      "Test 2: FAIL - name 'repeat' is not defined",
      "Test 3: FAIL - name 'repeat' is not defined"
    ],
    "generated_code": "def group_tuples(tuples_list):\n    # Find the minimum length among all tuples\n    min_length = min(len(x) for x in tuples_list)\n    \n    # Use zip with repeat and extend to collect results\n    result = [tuple(zip(*repeat(tuple, min_length))) for tuple in tuples_list]\n    \n    return result",
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "mbpp_id": 418,
    "problem_statement": "Write a python function to find the sublist having maximum length.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Find_Max(Lists):\n    if not Lists:\n        return []\n    \n    max_length = -1\n    result = []\n\n    for i in range(len(Lists)):\n        if len(Lists[i]) > max_length:\n            max_length = len(Lists[i])\n            result = Lists[i]\n\n    return result\n\n# Test Cases\nprint(Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']])) # Output: ['A', 'B', 'C']\nprint(Find_Max([[1], [1, 2], [1, 2, 3]])) # Output: [1, 2, 3]\nprint(Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]])) # Output: [1, 5, 6, 1]",
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "mbpp_id": 419,
    "problem_statement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef round_and_sum(numbers: List[float]) -> int:\n    \"\"\"\n    Takes a list of floating point numbers as input.\n    Rounds each element in the list to the nearest integer.\n    Calculates the total sum of these rounded integers.\n    Returns the product of this total sum and the length of the original list.\n    \n    >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n    243\n    >>> round_and_sum([5,2,9,24.3,29])\n    345\n    >>> round_and_sum([25.0,56.7,89.2])\n    513\n    \"\"\"\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)\n\n# Check function with provided data points\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243\nassert round_and_sum([5,2,9,24.3,29]) == 345\nassert round_and_sum([25.0,56.7,89.2]) == 513\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "mbpp_id": 420,
    "problem_statement": "Write a python function to find the cube sum of first n even natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def cube_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        number = 2 * i\n        total_sum += number ** 3\n    return total_sum",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  },
  {
    "mbpp_id": 421,
    "problem_statement": "Write a function to concatenate each element of tuple by the delimiter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for +: 'int' and 'str'",
      "Test 2: FAIL - unsupported operand type(s) for +: 'int' and 'str'",
      "Test 3: FAIL - unsupported operand type(s) for +: 'int' and 'str'"
    ],
    "generated_code": "def concatenate_tuple(tup):\n    result = ''\n    for i in range(len(tup)):\n        if i == len(tup) - 1:\n            result += tup[i]\n        else:\n            result += tup[i] + '-'\n    return result",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ]
  },
  {
    "mbpp_id": 422,
    "problem_statement": "Write a python function to find the average of cubes of first n natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes using the formula for the sum of the first n cubes\n    total_sum = int((n * (n + 1) / 2)) ** 2\n    \n    # Calculate and return the average of cubes\n    return total_sum / (n * n)",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ]
  },
  {
    "mbpp_id": 423,
    "problem_statement": "Write a function to solve gold mine problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def get_maxgold(mine_field, rows, cols):\n    \"\"\"\n    Function to find the maximum amount of gold you can collect in a grid.\n    \n    Parameters:\n    - mine_field (list): A 2D list representing the mine field with gold values.\n    - rows (int): Number of rows in the mine field.\n    - cols (int): Number of columns in the mine field.\n    \n    Returns:\n    - int: The maximum gold collectible from the given mine field.\n    \"\"\"\n    for i in range(rows):\n        for j in range(cols):\n            if mine_field[i][j] != 0:\n                mine_field[i][j] = max(0, mine_field[i-1][j-1], mine_field[i-1][j], mine_field[i-1][j+1]) + mine_field[i][j]\n    return max(max(row) for row in mine_field)\n\n# Test cases\nprint(get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4))  # Expected output: 16\nprint(get_maxgold([[10, 20], [30, 40]], 2, 2))  # Expected output: 70\nprint(get_maxgold([[4, 9], [3, 7]], 2, 2))  # Expected output: 13",
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ]
  },
  {
    "mbpp_id": 424,
    "problem_statement": "Write a function to extract only the rear index element of each string in the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_rear(tup):\n    result = []\n    for word in tup:\n        # Extracting the last character from each string and appending it to the list\n        result.append(word[-1])\n    return result",
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ]
  },
  {
    "mbpp_id": 425,
    "problem_statement": "Write a function to count the number of sublists containing a particular element.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_in_list(lst, element):\n    # Initialize counter for elements found in lists\n    count = 0\n    \n    # Iterate through each sublist in the list\n    for sublist in lst:\n        # Check if the given element is present in the current sublist\n        if element in sublist:\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ]
  },
  {
    "mbpp_id": 426,
    "problem_statement": "Write a function to filter odd numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))",
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ]
  },
  {
    "mbpp_id": 427,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef change_date_format(date_string):\n    # Define the pattern to match yyyy-mm-dd format and replace with dd-mm-yyyy\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    replacement = r'\\3-\\2-\\1'\n    \n    # Replace the matched patterns in the input string with the new formatted string\n    converted_date = re.sub(pattern, replacement, date_string)\n    \n    return converted_date\n\n# Test cases\nprint(change_date_format(\"2026-01-02\"))  # Output: \"02-01-2026\"\nprint(change_date_format(\"2020-11-13\"))  # Output: \"13-11-2020\"\nprint(change_date_format(\"2021-04-26\"))  # Output: \"26-04-2021\"",
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ]
  },
  {
    "mbpp_id": 428,
    "problem_statement": "Write a function to sort the given array by using shell sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # Put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        gap //= 2\n    \n    return arr",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ]
  },
  {
    "mbpp_id": 429,
    "problem_statement": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def and_tuples(tuple1, tuple2):\n    # Extract elements at the same index from both tuples\n    result = [a & b for a, b in zip(tuple1, tuple2)]\n    return result\n\n# Test cases\nprint(and_tuples((10, 4, 6, 9), (5, 2, 3, 3)))  # Expected output: (0, 0, 2, 1)\nprint(and_tuples((1, 2, 3, 4), (5, 6, 7, 8)))   # Expected output: (1, 2, 3, 0)\nprint(and_tuples((8, 9, 11, 12), (7, 13, 14, 17)))  # Expected output: (0, 9, 10, 0)",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ]
  },
  {
    "mbpp_id": 430,
    "problem_statement": "Write a function to find the directrix of a parabola.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sqrt' is not defined",
      "Test 2: FAIL - name 'sqrt' is not defined",
      "Test 3: FAIL - name 'sqrt' is not defined"
    ],
    "generated_code": "def parabola_directrix(a, b, c):\n    return -c / 4/b - a * sqrt((b**2 + 1)**2)",
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ]
  },
  {
    "mbpp_id": 431,
    "problem_statement": "Write a function that takes two lists and returns true if they have at least one common element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'common_element' is not defined. Did you mean: 'has_common_element'?"
    ],
    "generated_code": "def has_common_element(list1, list2):\n    return bool(set(list1) & set(list2))\n\n# Test cases\nprint(common_element([1,2,3,4,5], [5,6,7,8,9]))  # Expected output: True\nprint(common_element([1,2,3,4,5], [6,7,8,9]))   # Expected output: False\nprint(common_element(['a','b','c'], ['d','b','e']))  # Expected output: True",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ]
  },
  {
    "mbpp_id": 432,
    "problem_statement": "Write a function to find the median of a trapezium.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def median_trapezium(a,b,c):\n    # Calculate the lengths of the parallel sides and the height of the trapezium\n    length_of_parallel_sides = b + c\n    total_length = a + b + c\n    base1 = min(a, b)\n    height = abs(b - c)\n\n    # Calculate the area of the trapezium using the formula A = 1/2 * h * (a+b)\n    area = 0.5 * height * length_of_parallel_sides\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = total_length\n\n    # Calculate the semi-perimeter S = P / 2\n    S = perimeter / 2\n\n    # Calculate the inradius r = Area / Perimeter\n    r = area / perimeter\n\n    # Calculate the sum of the squares of all sides minus twice the square of the height divided by four\n    sum_of_squares_minus_half_square_of_height_divided_by_four = ((base1 ** 2) + (c ** 2)) - ((height ** 2) / 4)\n\n    # Calculate the product of two sums of squared sides divided by their sum minus half the square of the height divided by four\n    product_of_two_sums_of_squared_sides_divided_by_sum_minus_half_square_of_height_divided_by_four = ((length_of_parallel_sides ** 2) + (total_length ** 2)) - ((sum_of_squares_minus_half_square_of_height_divided_by_four ** 2))\n\n    # Check if the result is equal to 1\n    if product_of_two_sums_of_squared_sides_divided_by_sum_minus_half_square_of_height_divided_by_four == 1:\n        return round((base1 + c) / 2, 2)\n    else:\n        return None",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ]
  },
  {
    "mbpp_id": 433,
    "problem_statement": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(arr, num):\n    if arr[0] > num:\n        return f\"Yes, {num} is less than those in the array\"\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > num:\n                return f\"No, entered number is less than those in the array\"\n        return f\"YES, the entered number is greater than those in the array\"\n\n# Test cases\nprint(check_greater([1, 2, 3, 4, 5], 4)) # No, entered number is less than those in the array\nprint(check_greater([2, 3, 4, 5, 6], 8)) # Yes, the entered number is greater than those in the array\nprint(check_greater([9, 7, 4, 8, 6, 1], 11)) # Yes, the entered number is greater than those in the array",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ]
  },
  {
    "mbpp_id": 434,
    "problem_statement": "Write a function that matches a string that has an a followed by one or more b's.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def text_match_one(text):\n    if not (text.startswith('a') and text[1:].isdigit()):\n        return 'Not matched!'\n    \n    # Assuming 'b' is represented by digits from '2' to '9'\n    for char in text[1:]:\n        if char.isdigit() and int(char) % 2 != 0:\n            continue\n        else:\n            return 'Not matched!'\n    \n    return 'Found a match!'",
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 435,
    "problem_statement": "Write a python function to find the last digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit(n):\n    # Extracting and returning the last digit of the integer n\n    return abs(int(str(abs(n))[::-1][0]))",
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ]
  },
  {
    "mbpp_id": 436,
    "problem_statement": "Write a python function to print negative numbers in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def neg_nos(lst):\n    return [num for num in lst if num < 0]",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ]
  },
  {
    "mbpp_id": 437,
    "problem_statement": "Write a function to remove odd characters in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_odd(s):\n    # Remove all even position characters from the string\n    return ''.join([c for i, c in enumerate(s) if i % 2 == 0])",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ]
  },
  {
    "mbpp_id": 438,
    "problem_statement": "Write a function to count bidirectional tuple pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_bidirectional(tuples_list):\n    count = 0\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            if tuples_list[i] == tuples_list[j]:\n                count += 1\n    return count\n\n# Test cases\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])) # Output: 3\nprint(count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])) # Output: 2\nprint(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])) # Output: 4",
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ]
  },
  {
    "mbpp_id": 439,
    "problem_statement": "Write a function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiple_to_single(nums):\n    # Convert each number in the list to a string and concatenate them\n    return int(''.join(map(str, nums)))",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ]
  },
  {
    "mbpp_id": 440,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef find_adverb_position(sentence: str) -> Tuple[int, int, str]:\n    \"\"\"\n    Finds all occurrences of adverbs in the provided sentence along with their starting indices.\n    \n    Parameters:\n        sentence (str): The input sentence from which to extract adverbs.\n        \n    Returns:\n        Tuple[int, int, str]: A tuple containing the starting index of an adverb, its ending index,\n                              and the word itself as a string.\n    \"\"\"\n    # Splitting the sentence into words for easy indexing\n    words = sentence.split()\n    adverb_positions = []\n\n    i = 0\n    while i < len(words):\n        if words[i].endswith('ly') or words[i].endswith('ingly'):\n            adverb_positions.append((i, i + len(words[i]), words[i]))\n        else:\n            i += 1\n    \n    return tuple(adverb_positions)\n\n# Example usage\nprint(find_adverb_position(\"clearly!! we can see the sky\"))  # Output: [(0, 7, 'clearly')]\nprint(find_adverb_position(\"seriously!! there are many roses\"))  # Output: [(0, 9, 'seriously')]\nprint(find_adverb_position(\"unfortunately!! sita is going to home\"))  # Output: [(0, 13, 'unfortunately')]",
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ]
  },
  {
    "mbpp_id": 441,
    "problem_statement": "Write a function to find the surface area of a cube.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surfacearea_cube(side_length):\n    return 6 * side_length ** 2",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ]
  },
  {
    "mbpp_id": 442,
    "problem_statement": "Write a function to find the ration of positive numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def positive_count(arr):\n    count = sum(1 for num in arr if num > 0)\n    return count / len(arr) if arr else 0",
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ]
  },
  {
    "mbpp_id": 443,
    "problem_statement": "Write a python function to find the largest negative number from the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_neg(nums):\n    # Initialize max_negative with the first element of nums\n    max_negative = float('-inf')\n    \n    for num in nums:\n        if num < 0 and num > max_negative:\n            max_negative = num\n    \n    return max_negative",
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ]
  },
  {
    "mbpp_id": 444,
    "problem_statement": "Write a function to trim each tuple by k in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def trim_tuple(test_list, k):\n    return [(x - k if i == 0 else x) for i, test in enumerate(test_list) for x in test]",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ]
  },
  {
    "mbpp_id": 445,
    "problem_statement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def index_multiplication(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        temp = [x * y for x, y in zip(tup1[i], tup2[i])]\n        result.append(temp)\n    return tuple(result)\n\n# Test cases\nprint(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3))))  # Should return ((6, 21), (12, 45), (2, 9), (7, 30))\nprint(index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4))))  # Should return ((14, 32), (20, 60), (6, 20), (16, 44))\nprint(index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5))))  # Should return ((24, 45), (30, 77), (12, 33), (27, 60))",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ]
  },
  {
    "mbpp_id": 446,
    "problem_statement": "Write a python function to count the occurence of all elements of list in a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Occurrence(list_of_elements, target_elements):\n    # Initialize result dictionary with target elements as keys and occurrences as values\n    occurrence_dict = {element: 0 for element in target_elements}\n    \n    # Iterate over each element in the list_of_elements\n    for element in list_of_elements:\n        # If element is in the target elements, increment its count in the dictionary\n        if element in occurrence_dict:\n            occurrence_dict[element] += 1\n    \n    # Sum up all counts to get total number of times elements appeared in the list\n    total_occurrences = sum(occurrence_dict.values())\n    \n    return total_occurrences",
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ]
  },
  {
    "mbpp_id": 447,
    "problem_statement": "Write a function to find cubes of individual elements in a list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "cube_nums = lambda nums: [num ** 3 for num in nums]",
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ]
  },
  {
    "mbpp_id": 448,
    "problem_statement": "Write a function to calculate the sum of perrin numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def cal_sum(n):\n    # Initialize the first two Pern numbers as per definition\n    prev_pern = 3\n    curr_pern = 0\n    \n    if n == 1:\n        return prev_pern\n    \n    elif n == 2:\n        return prev_pern + curr_pern\n    \n    else:\n        total = prev_pern + curr_pern\n        for _ in range(4, n+1):\n            temp = curr_pern\n            curr_pern += prev_pern - temp\n            prev_pern = temp\n            total += curr_pern\n        \n        return total",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ]
  },
  {
    "mbpp_id": 449,
    "problem_statement": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate distances between all pairs of points\n    d1 = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n    d2 = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    d3 = ((x2 - x3)**2 + (y2 - y3)**2)**0.5\n    \n    # Check if any side length is greater than or equal to sum of the other two sides\n    if max(d1, d2, d3) <= min(d1, d2, d3):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(check_Triangle(1,5,2,5,4,6))  # Expected output: Yes\nprint(check_Triangle(1,1,1,4,1,5))  # Expected output: No\nprint(check_Triangle(1,1,1,1,1,1))  # Expected output: No",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ]
  },
  {
    "mbpp_id": 450,
    "problem_statement": "Write a function to extract specified size of strings from a give list of string values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_string(lst, n):\n    return [s[-n:] for s in lst]",
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ]
  },
  {
    "mbpp_id": 451,
    "problem_statement": "Write a function to remove all whitespaces from the given string using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_whitespaces(input_string):\n    # Remove spaces from the input string\n    no_whitespace = re.sub(r'\\s+', '', input_string)\n    return no_whitespace",
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ]
  },
  {
    "mbpp_id": 452,
    "problem_statement": "Write a function that gives loss amount if the given amount has loss else return none.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def loss_amount(price_paid, price_sold):\n    # Calculate loss\n    loss = abs(price_paid - price_sold)\n    \n    # Check if there is loss and return it, otherwise return None\n    if loss > 0:\n        return loss\n    else:\n        return None",
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ]
  },
  {
    "mbpp_id": 453,
    "problem_statement": "Write a python function to find the sum of even factors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sumofFactors(num):\n    total_sum = 0\n    # Check for each number from 2 to sqrt(num)\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            # If i is a factor\n            total_sum += i\n            # Check if i squared equals num (to avoid adding it twice if num is a perfect square)\n            if i * i != num:\n                total_sum += i\n    return total_sum\n\n# Test cases\nprint(sumofFactors(18))  # Expected output: 26\nprint(sumofFactors(30))  # Expected output: 48\nprint(sumofFactors(6))   # Expected output: 8",
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ]
  },
  {
    "mbpp_id": 454,
    "problem_statement": "Write a function that matches a word containing 'z'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_wordz(text):\n    import re\n    if re.search(r'\\b\\w*z\\b', text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Test cases to verify the correctness of the function\nprint(text_match_wordz(\"pythonz.\"))  # Expected output: Found a match!\nprint(text_match_wordz(\"xyz.\"))      # Expected output: Found a match!\nprint(text_match_wordz(\"  lang  \"))  # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 455,
    "problem_statement": "Write a function to check whether the given month number contains 31 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumb_number(month):\n    \"\"\"\n    This function takes an integer representing a month and returns True if the month has 31 days, False otherwise.\n    \n    :param month: Integer - The month number for which to determine if it has 31 days.\n    :return: Boolean - True if the month has 31 days, False otherwise.\n    \"\"\"\n    # Months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    return month in months_with_31_days",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ]
  },
  {
    "mbpp_id": 456,
    "problem_statement": "Write a function to reverse strings in a given list of string values.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]",
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ]
  },
  {
    "mbpp_id": 457,
    "problem_statement": "Write a python function to find the sublist having minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Min' is not defined",
      "Test 2: FAIL - name 'Find_Min' is not defined",
      "Test 3: FAIL - name 'Find_Min' is not defined"
    ],
    "generated_code": "def find_min(lst):\n    # Initialize min_length and result as an empty list.\n    min_length = float('inf')\n    result = []\n\n    # Iterate through each element in the input list.\n    for i in lst:\n        # Check if the current sub-list is shorter than the current minimum.\n        if len(i) < min_length:\n            # Update the minimum length and reset the result with the new shortest sub-list.\n            min_length = len(i)\n            result = i\n    \n    return result",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ]
  },
  {
    "mbpp_id": 458,
    "problem_statement": "Write a function to find the area of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_area(length, width):\n    return length * width",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ]
  },
  {
    "mbpp_id": 459,
    "problem_statement": "Write a function to remove uppercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_uppercase(input_string):\n    # Use regular expression to find and replace all upper case characters with an empty string\n    modified_string = re.sub(r'[A-Z]', '', input_string)\n    return modified_string\n\n# Test cases\nprint(remove_uppercase('cAstyoUrFavoRitETVshoWs'))  # Expected output: cstyoravoitshos\nprint(remove_uppercase('wAtchTheinTernEtrAdIo'))     # Expected output: wtchheinerntrdo\nprint(remove_uppercase('VoicESeaRchAndreComMendaTionS'))  # Expected output: voiceachndreomendaion",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ]
  },
  {
    "mbpp_id": 460,
    "problem_statement": "Write a python function to get the first element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    \"\"\"\n    Given a list of lists, returns a new list containing the first elements of each sublist.\n    \n    :param lst: List[List[int]]\n    :return: List[int]\n    \"\"\"\n    return [sublist[0] for sublist in lst]\n\n# Test cases\nprint(extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])) # Should print [1, 3, 6]\nprint(extract([[1,2,3],[4, 5]])) # Should print [1, 4]\nprint(extract([[9,8,1],[1,2]])) # Should print [9, 1]",
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ]
  },
  {
    "mbpp_id": 461,
    "problem_statement": "Write a python function to count the upper case characters in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def upper_ctr(s):\n    # Initialize counter for uppercase letters\n    count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # If the character is an uppercase letter, increment the counter\n        if 'A' <= char <= 'Z':\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ]
  },
  {
    "mbpp_id": 462,
    "problem_statement": "Write a function to find all possible combinations of the elements of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import chain, combinations\n\ndef combinations_list(lst):\n    return [list(combinations(lst, i)) for i in range(len(lst) + 1)]",
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ]
  },
  {
    "mbpp_id": 463,
    "problem_statement": "Write a function to find the maximum product subarray of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    min_val = max_val = result = arr[0]\n    \n    for i in range(1, len(arr)):\n        x = arr[i]\n        \n        # Update minimum and maximum values considering the possibility of negative numbers\n        min_val = min(min_val * x, max_val * x, x)\n        max_val = max(min_val * x, max_val * x, x)\n        \n        # Update the result with the current maximum product found\n        result = max(result, max_val)\n    \n    return result",
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ]
  },
  {
    "mbpp_id": 464,
    "problem_statement": "Write a function to check if all values are same in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_value(dict_data, value):\n    return len(set(dict_data.values())) == 1\n\n# Test cases\nprint(check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 10))  # False\nprint(check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 12))  # True\nprint(check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 5))   # False",
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ]
  },
  {
    "mbpp_id": 465,
    "problem_statement": "Write a function to drop empty items from a given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def drop_empty(input_dict):\n    return {k: v for k, v in input_dict.items() if v is not None}",
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ]
  },
  {
    "mbpp_id": 466,
    "problem_statement": "Write a function to find the peak element in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_peak(arr, n):\n    low = 0\n    high = n - 1\n    \n    while low < high:\n        mid = (low + high) // 2\n        \n        if arr[mid] > arr[mid + 1]:\n            high = mid\n        else:\n            low = mid + 1\n            \n    return arr[low]",
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ]
  },
  {
    "mbpp_id": 467,
    "problem_statement": "Write a python function to convert decimal number to octal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def decimal_to_Octal(decimal_number):\n    \"\"\"\n    Convert a given decimal number to its octal representation.\n    \n    Args:\n        decimal_number (int): The decimal number to be converted.\n        \n    Returns:\n        str: The octal representation of the decimal number as a string.\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n    octal_number = \"\"\n    while decimal_number > 0:\n        octal_number = str(decimal_number % 8) + octal_number\n        decimal_number //= 8\n    return octal_number\n\n# Test cases\nprint(decimal_to_Octal(10))  # Expected output: '12'\nprint(decimal_to_Octal(2))   # Expected output: '2'\nprint(decimal_to_Octal(33))  # Expected output: '41'",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ]
  },
  {
    "mbpp_id": 468,
    "problem_statement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_product(arr, k):\n    # Your implementation goes here\n    pass\n\n# Test cases\nprint(max_product([3, 100, 4, 5, 150, 6], 6))  # Expected output: 45000\nprint(max_product([4, 42, 55, 68, 80], 5))  # Expected output: 50265600\nprint(max_product([10, 22, 9, 33, 21, 50, 41, 60], 8))  # Expected output: 21780000",
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ]
  },
  {
    "mbpp_id": 469,
    "problem_statement": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_profit(prices, k):\n    n = len(prices)\n    \n    # If there are less than k+1 prices available, it's not possible to make any transactions.\n    if n < k + 1:\n        return 0\n    \n    # Initialize buy array and sell array with zeros\n    buy = [float('-inf')] * (k + 1)\n    sell = [0] * (k + 1)\n    \n    for price in prices:\n        # Update buy values\n        for j in range(1, k + 1):\n            buy[j] = max(buy[j], sell[j - 1] - price)\n        \n        # Update sell values\n        sell[0] = max(sell[0], buy[0] + price)\n        for i in range(1, k + 1):\n            sell[i] = max(sell[i], buy[i] + price)\n    \n    return sell[k]\n\n# Example usage:\nprint(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3))  # Expected output: 10\nprint(max_profit([2, 4, 7, 5, 4, 3, 5], 2))     # Expected output: 7\nprint(max_profit([10, 6, 8, 4, 2], 2))          # Expected output: 2",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ]
  },
  {
    "mbpp_id": 470,
    "problem_statement": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def add_pairwise(tuples_list):\n    # Flatten the list and convert each element to integer\n    flattened_list = [int(i) for sublist in tuples_list for i in sublist]\n    # Pairwise addition of elements\n    result = [(flattened_list[i], flattened_list[i+1]) for i in range(0, len(flattened_list), 2)]\n    return result",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ]
  },
  {
    "mbpp_id": 471,
    "problem_statement": "Write a python function to find remainder of array multiplication divided by n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_remainder(arr, n, x):\n    # Initialize result as 1 (since 1^n is always 1)\n    res = 1\n    \n    # Multiply each element in arr with x and take modulo n\n    for i in range(len(arr)):\n        res *= (arr[i] * x % n)\n    \n    # Return the final result after all multiplications\n    return res % n",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ]
  },
  {
    "mbpp_id": 472,
    "problem_statement": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Consecutive(lst):\n    # Check if the difference between each pair of adjacent elements is exactly 1.\n    for i in range(len(lst) - 1):\n        if lst[i+1] - lst[i] != 1:\n            return False\n    return True",
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 473,
    "problem_statement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_intersection(tup_list1, tup_list2):\n    set1 = set(tuple(sorted(sublist)) for sublist in tup_list1)\n    set2 = set(tuple(sorted(sublist)) for sublist in tup_list2)\n    result = {tuple(sorted((a, b))) for a in set1 for b in set2 if a == b}\n    return sorted(result)\n\n# Test cases\nprint(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\nprint(tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]))\nprint(tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]))",
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ]
  },
  {
    "mbpp_id": 474,
    "problem_statement": "Write a function to replace characters in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)",
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ]
  },
  {
    "mbpp_id": 475,
    "problem_statement": "Write a function to sort counter by value.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_counter(counter_dict):\n    return sorted(counter_dict.items(), key=lambda x: x[1], reverse=True)",
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ]
  },
  {
    "mbpp_id": 476,
    "problem_statement": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_sum(arr):\n    # Find the maximum element in the array\n    max_element = max(arr)\n    # Find the minimum element in the array\n    min_element = min(arr)\n    # Return the sum of the maximum and minimum elements\n    return max_element + min_element",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ]
  },
  {
    "mbpp_id": 477,
    "problem_statement": "Write a python function to convert the given string to lower case.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_lower(s):\n    \"\"\"\n    Convert all characters in the input string 's' to lowercase.\n    \n    Parameters:\n    s (str): The string to be converted.\n    \n    Returns:\n    str: A new string with all characters in lowercase.\n    \"\"\"\n    return s.lower()\n\n# Check function with provided data points to verify correctness\nassert is_lower(\"InValid\") == \"invalid\", \"Test case 1 failed\"\nassert is_lower(\"TruE\") == \"true\", \"Test case 2 failed\"\nassert is_lower(\"SenTenCE\") == \"sentence\", \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ]
  },
  {
    "mbpp_id": 478,
    "problem_statement": "Write a function to remove lowercase substrings from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(s):\n    # Use regular expression to replace all lowercase letters with an empty string\n    return re.sub('[a-z]', '', s)",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ]
  },
  {
    "mbpp_id": 479,
    "problem_statement": "Write a python function to find the first digit of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_Digit(number):\n    # Convert the number to string and remove trailing zeros if any\n    str_num = str(abs(number))\n    # Find the index of the first non-zero character and convert it back to integer\n    return int(str_num[0])\n\n# Test cases\nprint(first_Digit(123))  # Expected output: 1\nprint(first_Digit(456))  # Expected output: 4\nprint(first_Digit(12))   # Expected output: 1",
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ]
  },
  {
    "mbpp_id": 480,
    "problem_statement": "Write a python function to find the maximum occurring character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_max_occuring_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_char = \"\"\n    max_count = 0\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    \n    return max_char\n\ndef check_solution(func):\n    assert func(\"data\") == \"a\", \"Test case 1 failed\"\n    assert func(\"create\") == \"e\", \"Test case 2 failed\"\n    assert func(\"brilliant girl\") == \"i\", \"Test case 3 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the check function to verify the solution works as expected.\ncheck_solution(get_max_occuring_char)",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ]
  },
  {
    "mbpp_id": 481,
    "problem_statement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: negative shift count"
    ],
    "generated_code": "def is_subset_sum(nums, target, total_sum):\n    nums.sort()\n    n = len(nums)\n    \n    for i in range(1 << n):  # Generate all possible subsets\n        if sum(filter(lambda x: (i >> x - 1) & 1, range(n))) == target:\n            return True\n    \n    return False\n\n# Test cases\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9))  # Expected output: True\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30))  # Expected output: False\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15))  # Expected output: True",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ]
  },
  {
    "mbpp_id": 482,
    "problem_statement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef match(string):\n    \"\"\"\n    Check if there exists at least one sequence where an uppercase letter is immediately followed by lowercase letters.\n    \n    Args:\n        string (str): The input string to check.\n        \n    Returns:\n        bool: True if such a sequence exists, False otherwise.\n    \"\"\"\n    pattern = r'[A-Z][a-z]'\n    return bool(re.search(pattern, string))",
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ]
  },
  {
    "mbpp_id": 483,
    "problem_statement": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'factorial' is not defined",
      "Test 2: FAIL - name 'factorial' is not defined",
      "Test 3: FAIL - name 'factorial' is not defined"
    ],
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        if len(str(i)) == sum(int(digit) for digit in str(factorial(i))) and i % x == 0:\n            return i\n        i += 1",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ]
  },
  {
    "mbpp_id": 484,
    "problem_statement": "Write a function to remove the matching tuples from the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_matching_tuple(tuples_list_1, tuples_list_2):\n    result = []\n    for tup in tuples_list_1:\n        if not any((tup == x) for x in tuples_list_2):\n            result.append(tup)\n    return result",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ]
  },
  {
    "mbpp_id": 485,
    "problem_statement": "Write a function to find the largest palindromic number in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def largest_palindrome(arr, n):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Iterate through each element and check if it's a palindrome\n    for i in range(n-1):\n        temp = arr[i]\n        for j in range(i+1, n):\n            temp2 = int(str(temp)+str(temp)[::-1])\n            if temp2 == arr[j] and len(str(temp)) > len(str(arr[j])):\n                arr[i], arr[j] = arr[j], arr[i]\n                \n    # Return the first element of the sorted array which is the largest palindrome\n    return arr[0]\n\n# Test cases\nprint(largest_palindrome([1, 232, 54545, 999991], 4))  # Expected output: 54545\nprint(largest_palindrome([1, 2, 3, 4, 5, 50], 6))     # Expected output: 5\nprint(largest_palindrome([1, 3, 7, 9, 45], 5))        # Expected output: 9",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ]
  },
  {
    "mbpp_id": 486,
    "problem_statement": "Write a function to compute binomial probability for the given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Computes the binomial probability of getting exactly k successes in n trials.\n    \n    Parameters:\n    n (int): Number of trials.\n    k (int): Number of successful outcomes.\n    p (float): Probability of success on an individual trial.\n    \n    Returns:\n    float: The binomial probability.\n    \"\"\"\n    factorial = lambda x: math.factorial(x)\n    return math.comb(n, k) * (p**k) * ((1-p)**(n-k))\n\n# Test cases\nprint(binomial_probability(10, 5, 1.0 / 3)) # Expected output: 0.13656454808718185\nprint(binomial_probability(11, 6, 2.0 / 4)) # Expected output: 0.2255859375\nprint(binomial_probability(12, 7, 3.0 / 5)) # Expected output: 0.227030335488",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ]
  },
  {
    "mbpp_id": 487,
    "problem_statement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuples_list):\n    # Sort the list of tuples based on the last element of each tuple\n    return sorted(tuples_list, key=lambda x: x[-1])\n\n# Test the function with provided data points\nassert sort_tuple([(1, 3), (3, 2), (2, 1)]) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)]) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)]) == [(4, 3), (6, 7), (3, 9)]",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ]
  },
  {
    "mbpp_id": 488,
    "problem_statement": "Write a function to find the area of a pentagon.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'tan' is not defined",
      "Test 2: FAIL - name 'tan' is not defined",
      "Test 3: FAIL - name 'tan' is not defined"
    ],
    "generated_code": "import math\n\ndef area_pentagon(side_length):\n    \"\"\"\n    Calculate the area of a regular pentagon with side length 'side_length'.\n    \n    Args:\n        side_length (float): The length of each side of the pentagon.\n        \n    Returns:\n        float: The area of the pentagon.\n    \"\"\"\n    apothem = side_length / (2 * tan(math.pi / 5))\n    perimeter = 5 * side_length\n    return 0.25 * perimeter * apothem",
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ]
  },
  {
    "mbpp_id": 489,
    "problem_statement": "Write a python function to find the frequency of the largest value in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - frequency_Of_Largest() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def frequency_Of_Largest(arr):\n    max_value = max(arr)\n    count_max = arr.count(max_value)\n    return count_max\n\n# Test Cases\nprint(frequency_Of_Largest([1,2,3,4,4]))  # Expected output: 2\nprint(frequency_Of_Largest([5,6,5]))      # Expected output: 1\nprint(frequency_Of_Largest([2,7,7,7]))    # Expected output: 3",
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ]
  },
  {
    "mbpp_id": 490,
    "problem_statement": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_symmetric(tuples_list):\n    result = set()\n    for tup in tuples_list:\n        # Check if the reverse of the tuple is not equal to itself and add it to result\n        if len(set(tup)) == 2 and tup != tuple(reversed(tup)):\n            result.add(tuple(sorted(tup)))\n    return result\n\n# Test cases\nprint(extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]))  # {(8, 9), (6, 7)}\nprint(extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)]))  # {(9, 10), (7, 8)}\nprint(extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)]))  # {(8, 9), (10, 11)}",
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ]
  },
  {
    "mbpp_id": 491,
    "problem_statement": "Write a function to find the sum of geometric progression series.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_gp(a, r, n):\n    # Calculate the sum using the formula for the sum of a geometric progression\n    return a * ((1 - r**n) / (1 - r)) if r != 1 else a * n",
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ]
  },
  {
    "mbpp_id": 492,
    "problem_statement": "Write a function to search an element in the given array by using binary search.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ]
  },
  {
    "mbpp_id": 493,
    "problem_statement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - not enough values to unpack (expected 2, got 1)",
      "Test 2: FAIL - too many values to unpack (expected 2)",
      "Test 3: FAIL - not enough values to unpack (expected 2, got 0)"
    ],
    "generated_code": "def calculate_polygons(row_start, row_end, col_start, col_end, level=3):\n    if level == 1:\n        return [\n            tuple(((x - row_start * 2)**2 + (y - col_start**2)**2)**0.5 for x in range(col_start, col_end+1)) \n            for y in range(row_start, row_end+1)\n        ]\n    \n    polygons = []\n    step = ((col_end - col_start)//level)**0.5\n    \n    for i in range(level-1):\n        new_col_start = col_start + i*step\n        new_col_end = new_col_start + step\n        for j in range(i+1):\n            polygon = calculate_polygons(j+1, level, col_start, col_end, level-1)\n            polygon = [[(new_col_start+x-step, row_start+y),(new_col_start+x, row_start+y+1),\n                        (new_col_start+x+1, row_start+y+1),(new_col_start+x+1, row_start+y)]\n                        for x, y in polygon]\n            polygon += [[(new_col_start-x, row_start+y),(new_col_start-x, row_start+y+1),\n                        (new_col_start-x-1, row_start+y+1),(new_col_start-x-1, row_start+y)]\n                        for x, y in reversed(polygon)]\n            polygon += [[(new_col_start+x, row_start+y),(new_col_start+x, row_start+y+1),\n                        (new_col_start+x+1, row_start+y+1),(new_col_start+x+1, row_start+y)]\n                        for x, y in reversed(polygon[::-1])]\n            polygon += [[(new_col_start-x, row_start+y),(new_col_start-x, row_start+y+1),\n                        (new_col_start-x-1, row_start+y+1),(new_col_start-x-1, row_start+y)]\n                        for x, y in polygon[:i]]\n            polygons.extend(polygon)\n    \n    return polygons",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ]
  },
  {
    "mbpp_id": 494,
    "problem_statement": "Write a function to convert the given binary tuple to integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def binary_to_integer(binary_tuple):\n    # Convert binary tuple to string and then to an integer\n    result = int(''.join(map(str, binary_tuple)), 2)\n    return str(result)\n\n# Test cases\nprint(binary_to_integer((1, 1, 0, 1, 0, 0, 1)))  # Expected output: \"105\"\nprint(binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)))  # Expected output: \"101\"\nprint(binary_to_integer((1, 1, 0, 1, 0, 1)))  # Expected output: \"53\"",
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ]
  },
  {
    "mbpp_id": 495,
    "problem_statement": "Write a function to remove lowercase substrings from a given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_lowercase(s):\n    # Use regex to find and replace all lowercase letters with an empty string\n    return re.sub('[a-z]', '', s)\n\n# Test cases to verify the correctness of the function\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI', \"Test case 1 failed\"\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY', \"Test case 2 failed\"\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ]
  },
  {
    "mbpp_id": 496,
    "problem_statement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef heap_queue_smallest(numbers, k):\n    \"\"\"\n    This function takes a list of numbers and an integer k as input.\n    It returns the k smallest integers from the list in ascending order.\n    \"\"\"\n    return sorted(heapq.nsmallest(k, numbers))\n\n# Example usage:\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)) # Expected output: [14, 22, 25]\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)) # Expected output: [14, 22]\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)) # Expected output: [14, 22, 22, 25, 35]",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ]
  },
  {
    "mbpp_id": 497,
    "problem_statement": "Write a function to find the surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'surfacearea_cone' is not defined",
      "Test 2: FAIL - name 'surfacearea_cone' is not defined",
      "Test 3: FAIL - name 'surfacearea_cone' is not defined"
    ],
    "generated_code": "import math\n\ndef surface_area_of_cone(radius, slant_height):\n    base_area = math.pi * radius ** 2\n    lateral_surface_area = math.pi * radius * slant_height\n    total_surface_area = base_area + lateral_surface_area\n    return total_surface_area",
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ]
  },
  {
    "mbpp_id": 498,
    "problem_statement": "Write a python function to find gcd of two positive integers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def gcd(a, b):\n    while(b):\n        t = b\n        b = a % b\n        a = t\n    return a\n\n# Test cases\nprint(gcd(12, 17)) # Expected output: 1\nprint(gcd(4,6)) # Expected output: 2\nprint(gcd(2,9)) # Expected output: 1",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ]
  },
  {
    "mbpp_id": 499,
    "problem_statement": "Write a function to find the diameter of a circle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ]
  },
  {
    "mbpp_id": 500,
    "problem_statement": "Write a function to concatenate all elements of the given list into a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def concatenate_elements(lst):\n    result = \"\"\n    for item in lst:\n        result += \" \" + item\n    return result[1:]\n\n# Test Cases\nprint(concatenate_elements(['hello','there','have','a','rocky','day'])) # Should print: \"hello there have a rocky day\"\nprint(concatenate_elements(['Hi', 'there', 'How','are', 'you'])) # Should print: \"Hi there How are you\"\nprint(concatenate_elements(['Part', 'of', 'the','journey', 'is', 'end'])) # Should print: \"Part of the journey is end\"",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ]
  },
  {
    "mbpp_id": 501,
    "problem_statement": "Write a python function to find common divisor between two numbers in a given pair.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - integer division or modulo by zero",
      "Test 2: FAIL - integer division or modulo by zero",
      "Test 3: FAIL - integer division or modulo by zero"
    ],
    "generated_code": "def num_comm_div(num1, num2):\n    # Ensure num1 is the smaller number for efficiency\n    if num1 > num2:\n        num1, num2 = num2, num1\n    \n    # Initialize the largest common divisor with num1\n    comm_div = num1\n    \n    # Divide both numbers by their greatest common divisor until num1 becomes less than num2\n    while num1 != num2:\n        if num1 > num2:\n            num1 -= num2\n        else:\n            num2 -= num1\n            \n        comm_div = comm_div // abs(comm_div - comm_div)\n    \n    return comm_div",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ]
  },
  {
    "mbpp_id": 502,
    "problem_statement": "Write a python function to find remainder of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find(a, b):\n    return a % b",
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ]
  },
  {
    "mbpp_id": 503,
    "problem_statement": "Write a function to add consecutive numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def add_consecutive_nums(nums):\n    result = []\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        result.append(current_sum)\n    return result",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ]
  },
  {
    "mbpp_id": 504,
    "problem_statement": "Write a python function to find the cube sum of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Of_Series(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ]
  },
  {
    "mbpp_id": 505,
    "problem_statement": "Write a function to move all zeroes to the end of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def re_order(arr):\n    # Separate non-zero elements and zero elements\n    non_zero = [x for x in arr if x != 0]\n    zero = [0 for _ in range(len(arr) - len(non_zero))]\n    \n    # Combine non-zero and zero elements\n    result = non_zero + zero\n    \n    return result",
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ]
  },
  {
    "mbpp_id": 506,
    "problem_statement": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef permutation_coefficient(p, k):\n    \"\"\"\n    Calculate the permutation coefficient of n choose k.\n    \n    Parameters:\n    - p (int): The value of p in p(n, k).\n    - k (int): The number for which you want to find the permutation coefficient.\n    \n    Returns:\n    int: The permutation coefficient p(n, k).\n    \"\"\"\n    # Calculate factorial of p and k, then divide p! / (p-k)!\n    return math.factorial(p) // math.factorial(p - k)\n\n# Test cases\nprint(permutation_coefficient(10, 2))  # Expected output: 90\nprint(permutation_coefficient(10, 3))  # Expected output: 720\nprint(permutation_coefficient(10, 1))  # Expected output: 10",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ]
  },
  {
    "mbpp_id": 507,
    "problem_statement": "Write a function to remove specific words from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_words(words_list, delete_list):\n    result = []\n    for word in words_list:\n        if word not in delete_list:\n            result.append(word)\n    return result\n\n# Test cases\nprint(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange']))  # Expected output: ['red', 'green', 'blue', 'black']\nprint(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['black', 'orange']))  # Expected output: ['red', 'green', 'blue', 'white']\nprint(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['blue', 'white']))  # Expected output: ['red', 'green', 'black', 'orange']",
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ]
  },
  {
    "mbpp_id": 508,
    "problem_statement": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def same_order(list1, list2):\n    # Check if both lists have the same length and their elements match in the same order\n    return len(set(list1) & set(list2)) == len(list1) and all(a == b for a, b in zip(list1, list2))",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ]
  },
  {
    "mbpp_id": 509,
    "problem_statement": "Write a python function to find the average of odd numbers till a given odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'average_Odd' is not defined",
      "Test 2: FAIL - name 'average_Odd' is not defined",
      "Test 3: FAIL - name 'average_Odd' is not defined"
    ],
    "generated_code": "def average_odd(n):\n    total = sum(num for num in range(1, n+1, 2))\n    count = len([num for num in range(1, n+1, 2)])\n    return total / count if count != 0 else 0",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ]
  },
  {
    "mbpp_id": 510,
    "problem_statement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def no_of_subsequences(arr, k):\n    arr.sort()\n    count = 0\n    n = len(arr)\n    \n    i, j = 0, 0\n    while i < n and j < n:\n        if arr[i] * arr[j] <= k:\n            count += n - j\n            j += 1\n        else:\n            i += 1\n    \n    return count",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ]
  },
  {
    "mbpp_id": 601,
    "problem_statement": "Write a function to find the longest chain which can be formed from the given set of pairs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: pop from empty list"
    ],
    "generated_code": "from typing import List, Tuple\nimport heapq\n\nclass Pair:\n    def __init__(self, start: int, end: int):\n        self.start = start\n        self.end = end\n    \n    def __lt__(self, other):\n        return self.end < other.end\n\ndef max_chain_length(pairs: List[Pair], length: int) -> int:\n    # Sort the list of pairs based on their end values\n    sorted_pairs = sorted(pairs)\n    \n    # Initialize a queue for dynamic programming with first element's end value\n    dp_queue = [sorted_pairs[0].end]\n    \n    for i in range(length - 1):\n        prev_end = dp_queue.pop(0)\n        \n        # Update previous maximum end if current pair is better than previous one\n        if sorted_pairs[i + 1].start > prev_end:\n            dp_queue.append(sorted_pairs[i + 1].end)\n            \n    # The size of dp_queue will give the length of the longest chain\n    return len(dp_queue)\n\n# Test cases\nassert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
    "test_cases": [
      "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3",
      "assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4",
      "assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5"
    ]
  },
  {
    "mbpp_id": 602,
    "problem_statement": "Write a python function to find the first repeated character in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_cases": [
      "assert first_repeated_char(\"abcabc\") == \"a\"",
      "assert first_repeated_char(\"abc\") == \"None\"",
      "assert first_repeated_char(\"123123\") == \"1\""
    ]
  },
  {
    "mbpp_id": 603,
    "problem_statement": "Write a function to get a lucid number smaller than or equal to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_prime(num):\n    \"\"\"Check if num is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef get_ludic(n):\n    \"\"\"Generate a list of all lucid numbers less than or equal to n.\"\"\"\n    ludics = []\n    current_num = 1\n    while len(ludics) < n:\n        if is_prime(current_num):\n            ludics.append(current_num)\n        current_num += 1\n    return ludics[:n]\n\n# Test cases\nprint(get_ludic(10))  # Expected output: [1, 2, 3, 5, 7]\nprint(get_ludic(25))  # Expected output: [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nprint(get_ludic(45))  # Expected output: [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
    "test_cases": [
      "assert get_ludic(10) == [1, 2, 3, 5, 7]",
      "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]",
      "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
    ]
  },
  {
    "mbpp_id": 604,
    "problem_statement": "Write a function to reverse words in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_words(input_string):\n    # Split the input string into words and then join them in reverse order\n    return ' '.join(input_string.split()[::-1])",
    "test_cases": [
      "assert reverse_words(\"python program\")==(\"program python\")",
      "assert reverse_words(\"java language\")==(\"language java\")",
      "assert reverse_words(\"indian man\")==(\"man indian\")"
    ]
  },
  {
    "mbpp_id": 605,
    "problem_statement": "Write a function to check if the given integer is a prime number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
    "test_cases": [
      "assert prime_num(13)==True",
      "assert prime_num(7)==True",
      "assert prime_num(-1010)==False"
    ]
  },
  {
    "mbpp_id": 606,
    "problem_statement": "Write a function to convert degrees to radians.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef radian_degree(degree):\n    return degree * math.pi / 180\n\n# Test cases\nprint(radian_degree(90))  # Expected output: approximately 1.5707963267948966\nprint(radian_degree(60))  # Expected output: approximately 1.0471975511965976\nprint(radian_degree(120)) # Expected output: approximately 2.0943951023931953",
    "test_cases": [
      "assert radian_degree(90)==1.5707963267948966",
      "assert radian_degree(60)==1.0471975511965976",
      "assert radian_degree(120)==2.0943951023931953"
    ]
  },
  {
    "mbpp_id": 607,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return (pattern, start_index, end_index)\n    else:\n        return None",
    "test_cases": [
      "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
      "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)",
      "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"
    ]
  },
  {
    "mbpp_id": 608,
    "problem_statement": "Write a python function to find nth bell number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def bell_Number(n):\n    \"\"\"\n    Calculate the n-th Bell number.\n    \n    Parameters:\n    - n: An integer representing the position in the sequence of Bell numbers.\n    \n    Returns:\n    The value of the n-th Bell number.\n    \"\"\"\n    # Initialize a list with one element which is always equal to 1\n    bell_numbers = [1]\n    \n    # Calculate each Bell number from B(1) to B(n)\n    for i in range(1, n + 1):\n        # Add the last two elements and shift left\n        next_bell_number = sum(bell_numbers[-2:])\n        bell_numbers.append(next_bell_number)\n        \n    return bell_numbers[n]\n\n# Test the function with provided data points\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert bell_Number(2) == 2",
      "assert bell_Number(3) == 5",
      "assert bell_Number(4) == 15"
    ]
  },
  {
    "mbpp_id": 609,
    "problem_statement": "Write a python function to find minimum possible value for the given periodic function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def floor_Min(a, b, c):\n    # Calculate the sum of the three values\n    total = a + b + c\n    \n    # Find the minimum value among the three numbers and add it to the sum\n    min_value = min(a, b, c)\n    total += min_value\n    \n    # Return half of the total if the total is even, otherwise subtract one from the total before dividing\n    if total % 2 == 0:\n        return int(total / 2)\n    else:\n        return int((total - 1) / 2)\n\n# Test cases\nprint(floor_Min(10, 20, 30))  # Expected output: 15\nprint(floor_Min(1, 2, 1))     # Expected output: 0\nprint(floor_Min(11, 10, 9))   # Expected output: 9",
    "test_cases": [
      "assert floor_Min(10,20,30) == 15",
      "assert floor_Min(1,2,1) == 0",
      "assert floor_Min(11,10,9) == 9"
    ]
  },
  {
    "mbpp_id": 610,
    "problem_statement": "Write a python function to remove the k'th element from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_kth_element(lst, k):\n    # Remove the first occurrence of k\n    del lst[k-1]\n    # Return the modified list\n    return lst",
    "test_cases": [
      "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
      "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
      "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
    ]
  },
  {
    "mbpp_id": 611,
    "problem_statement": "Write a function to find the maximum of nth column from the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_of_nth(tuple_list, n):\n    # Extracting the nth element from each tuple in the list\n    nth_elements = [sublist[n-1] for sublist in tuple_list]\n    # Finding and returning the maximum value\n    return max(nth_elements)\n\n# Test cases\nprint(max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2))  # Output: 19\nprint(max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1))  # Output: 10\nprint(max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1))  # Output: 11",
    "test_cases": [
      "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19",
      "assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10",
      "assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11"
    ]
  },
  {
    "mbpp_id": 612,
    "problem_statement": "Write a python function to merge the first and last elements separately in a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge(lst_of_lists):\n    # Merging the first element with itself to form two new elements at the start\n    merged_list = lst_of_lists[0] * len(lst_of_lists)\n    \n    # Merging the last element with itself to form two new elements at the end\n    final_merged_list = merged_list + lst_of_lists[-1] * len(lst_of_lists)\n    \n    return final_merged_list",
    "test_cases": [
      "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
      "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]",
      "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
    ]
  },
  {
    "mbpp_id": 613,
    "problem_statement": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def maximum_value(records):\n    max_values = []\n    for key, values in records:\n        if not isinstance(values, list) or len(values) == 0:\n            raise ValueError(\"Each value must be a non-empty list\")\n        current_max = max(values)\n        max_values.append((key, current_max))\n    return max_values",
    "test_cases": [
      "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]",
      "assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]",
      "assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]"
    ]
  },
  {
    "mbpp_id": 614,
    "problem_statement": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef cummulative_sum(tup_list: List[Tuple[int]]) -> int:\n    total = 0\n    for tup in tup_list:\n        for num in tup:\n            total += num\n    return total\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",
      "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37",
      "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"
    ]
  },
  {
    "mbpp_id": 615,
    "problem_statement": "Write a function to find average value of the numbers in a given tuple of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def average_tuple(tuples_list):\n    return [(sum(i)/len(i)) for i in zip(*tuples_list)]",
    "test_cases": [
      "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
      "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]",
      "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"
    ]
  },
  {
    "mbpp_id": 616,
    "problem_statement": "Write a function to perfom the modulo of tuple elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_modulo(tup1, tup2):\n    return tuple(a % b for a, b in zip(tup1, tup2))",
    "test_cases": [
      "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
      "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
      "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
    ]
  },
  {
    "mbpp_id": 617,
    "problem_statement": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Jumps(d, k, n):\n    if d < k:\n        return float('inf')\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for j in range(k, -1, -1):\n            if j <= i and dp[i - j] != float('inf'):\n                dp[i] = min(dp[i], dp[i - j] + 1)\n    return dp[n]\n\n# Test cases\nprint(min_Jumps(3, 4, 11))  # Output should be 3.5\nprint(min_Jumps(3, 4, 0))   # Output should be 0\nprint(min_Jumps(11, 14, 11)) # Output should be 1",
    "test_cases": [
      "assert min_Jumps(3,4,11)==3.5",
      "assert min_Jumps(3,4,0)==0",
      "assert min_Jumps(11,14,11)==1"
    ]
  },
  {
    "mbpp_id": 618,
    "problem_statement": "Write a function to divide two lists using map and lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\nimport operator\n\ndef div_list(list1: List[int], list2: List[int]) -> List[float]:\n    \"\"\"\n    Divide each element of the first list 'list1' by corresponding elements in the second list 'list2'.\n    \n    Args:\n    list1: A list of integers.\n    list2: A list of integers with the same length as list1.\n    \n    Returns:\n    A list containing the results of dividing each element of list1 by the corresponding element of list2.\n    \"\"\"\n    return list(map(lambda x, y: round(x / y, 1), list1, list2))",
    "test_cases": [
      "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
      "assert div_list([3,2],[1,4])==[3.0, 0.5]",
      "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
    ]
  },
  {
    "mbpp_id": 619,
    "problem_statement": "Write a function to move all the numbers in it to the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: move_num() missing 1 required positional argument: 'target_str'"
    ],
    "generated_code": "def move_num(num_str, target_str):\n    result = ''\n    index = 0\n    for char in num_str:\n        if char.isnumeric():\n            # Move characters until we find a non-number character\n            while index < len(target_str) and not target_str[index].isnumeric():\n                result += target_str[index]\n                index += 1\n            result += char\n            # Move to the next part of the number\n            start_index = index\n            while index < len(target_str) and target_str[index].isdigit():\n                index += 1\n            end_index = index - 1\n            # Replace the matched number substring with the original position + length\n            for i in range(start_index, end_index + 1):\n                target_str = target_str[:i] + str(i + index - start_index) + target_str[i+1:]\n    result += target_str[index:]  # Append remaining parts after last number match\n    return result\n\n# Test cases\nprint(move_num('I1love143you55three3000thousand'))  # Output: \"Iloveyouthreethousand1143553000\"\nprint(move_num('Avengers124Assemble'))  # Output: \"AvengersAssemble124\"\nprint(move_num('Its11our12path13to14see15things16do17things'))  # Output: \"Itsourpathtoseethingsdothings11121314151617\"",
    "test_cases": [
      "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
      "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'",
      "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"
    ]
  },
  {
    "mbpp_id": 620,
    "problem_statement": "Write a function to find the largest subset where each pair is divisible.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def largest_subset(arr, n):\n    # Implementing a dynamic programming approach similar to the longest common substring problem with modifications for divisibility.\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    max_count = 0\n    \n    for i in range(1, n + 1):\n        for j in range(i - 1, -1, -1):\n            if arr[i-1] % arr[j-1] == 0:\n                dp[i][j] = 1 + dp[j][i]\n                max_count = max(max_count, dp[i][j])\n    \n    return max_count\n\n# Test cases\nprint(largest_subset([1, 3, 6, 13, 17, 18], 6))  # Expected output: 4\nprint(largest_subset([10, 5, 3, 15, 20], 5))     # Expected output: 3\nprint(largest_subset([18, 1, 3, 6, 13, 17], 6))  # Expected output: 4",
    "test_cases": [
      "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4",
      "assert largest_subset([10, 5, 3, 15, 20], 5) == 3",
      "assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4"
    ]
  },
  {
    "mbpp_id": 621,
    "problem_statement": "Write a function to increment the numeric values in the given strings by k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'MSM'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'Dart'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'Flutter'"
    ],
    "generated_code": "def increment_numerics(strings, k):\n    def inc(num_str):\n        num = int(num_str)\n        num += k\n        return str(num)\n\n    result = [inc(str(int(x))) for x in strings]\n    return result",
    "test_cases": [
      "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']",
      "assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']",
      "assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"
    ]
  },
  {
    "mbpp_id": 622,
    "problem_statement": "Write a function to find the median of two sorted arrays of same size.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - get_median() missing 1 required positional argument: 'n'",
      "Test 2: FAIL - get_median() missing 1 required positional argument: 'n'",
      "Test 3: FAIL - get_median() missing 1 required positional argument: 'n'"
    ],
    "generated_code": "def get_median(nums1, nums2, m, n):\n    # Ensure nums1 is always the smaller array for better performance\n    if m > n:\n        return get_median(nums2, nums1, n, m)\n    \n    low = max(0, (m + n - 1) // 2 - n)\n    high = min(m, (m + n) // 2)\n    \n    while low <= high:\n        i = (low + high) // 2\n        j = ((m + n + 1) // 2) - i\n        \n        if i < m and nums2[j-1] > nums1[i]:\n            low = i + 1\n        elif i > 0 and nums1[i-1] > nums2[j]:\n            high = i - 1\n        else:\n            if i == 0:\n                max_of_left = nums2[j-1]\n            elif j == 0:\n                max_of_left = nums1[i-1]\n            else:\n                max_of_left = max(nums1[i-1], nums2[j-1])\n            \n            if (m + n) % 2 == 1:\n                return max_of_left\n            \n            if i == m:\n                min_of_right = nums2[j]\n            elif j == n:\n                min_of_right = nums1[i]\n            else:\n                min_of_right = min(nums1[i], nums2[j])\n                \n            return (max_of_left + min_of_right) / 2.0",
    "test_cases": [
      "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
      "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
      "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"
    ]
  },
  {
    "mbpp_id": 623,
    "problem_statement": "Write a function to find the n-th power of individual elements in a list using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
      "Test 2: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
      "Test 3: FAIL - The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"
    ],
    "generated_code": "import numpy as np\n\ndef nth_nums(nums, n):\n    return np.array(nums)**n",
    "test_cases": [
      "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
      "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
      "assert nth_nums([12,15],5)==([248832, 759375])"
    ]
  },
  {
    "mbpp_id": 624,
    "problem_statement": "Write a python function to convert the given string to upper case.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_upper(input_string):\n    # Check if all characters in the input_string are uppercase letters.\n    # If yes, return the string converted to upper case; otherwise, return None.\n    return input_string.upper() if all(char.isupper() for char in input_string) else None",
    "test_cases": [
      "assert is_upper(\"person\") ==\"PERSON\"",
      "assert is_upper(\"final\") == \"FINAL\"",
      "assert is_upper(\"Valid\") == \"VALID\""
    ]
  },
  {
    "mbpp_id": 625,
    "problem_statement": "Write a python function to interchange first and last elements in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    if len(lst) > 0:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert swap_List([1,2,3]) == [3,2,1]",
      "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]",
      "assert swap_List([4,5,6]) == [6,5,4]"
    ]
  },
  {
    "mbpp_id": 626,
    "problem_statement": "Write a python function to find the largest triangle that can be inscribed in the semicircle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef triangle_area(radius):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle.\n    \n    Parameters:\n        radius (float): The radius of the semicircle.\n        \n    Returns:\n        float: The area of the inscribed triangle.\n    \"\"\"\n    # The largest triangle that can be inscribed in a semicircle has its base as the diameter and height equal to the radius.\n    base = 2 * radius\n    height = radius\n    \n    return 0.5 * base * height",
    "test_cases": [
      "assert triangle_area(0) == 0",
      "assert triangle_area(-1) == -1",
      "assert triangle_area(2) == 4"
    ]
  },
  {
    "mbpp_id": 627,
    "problem_statement": "Write a python function to find the smallest missing number from the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - list index out of range",
      "Test 2: FAIL - list index out of range",
      "Test 3: FAIL - list index out of range"
    ],
    "generated_code": "def find_First_Missing(arr, low, high): \n    while(low <= high):  \n        mid = low + int((high - low)/2) \n        if ((mid == len(arr)-1 or arr[mid] > arr[mid+1]) and \n                (arr[low] > arr[low+1])): \n            return low\n        elif(mid != 0 and arr[mid-1] > arr[mid]):\n            return mid\n        elif((mid < high and arr[mid+1] < arr[mid]) and \n              (arr[high] < arr[high-1])):\n            return mid+1\n        elif(mid < high and arr[mid+1] >= arr[mid]): \n            low = mid + 1\n        else:\n            high = mid - 1\n    return low",
    "test_cases": [
      "assert find_First_Missing([0,1,2,3],0,3) == 4",
      "assert find_First_Missing([0,1,2,6,9],0,4) == 3",
      "assert find_First_Missing([2,3,5,8,9],0,4) == 0"
    ]
  },
  {
    "mbpp_id": 628,
    "problem_statement": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_spaces(s):\n    return s.replace(' ', '%20')",
    "test_cases": [
      "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'",
      "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'",
      "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"
    ]
  },
  {
    "mbpp_id": 629,
    "problem_statement": "Write a python function to find even numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(lst):\n    # Initialize an empty list to store even numbers\n    even_numbers = []\n    \n    # Iterate through each element in the input list\n    for num in lst:\n        # Check if the current number is even\n        if num % 2 == 0:\n            # If it's even, append it to the even_numbers list\n            even_numbers.append(num)\n    \n    # Return the list of even numbers\n    return even_numbers",
    "test_cases": [
      "assert Split([1,2,3,4,5]) == [2,4]",
      "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
      "assert Split ([8,12,15,19]) == [8,12]"
    ]
  },
  {
    "mbpp_id": 630,
    "problem_statement": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_coordinates(point):\n    result = []\n    for x in range(max(0, point[0]-1), min(point[0]+2, 10)):\n        for y in range(max(0, point[1]-1), min(point[1]+2, 10)):\n            result.append([x, y])\n    return result\n\n# Test cases\nprint(get_coordinates((3, 4)))  # Expected output: [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nprint(get_coordinates((4, 5)))  # Expected output: [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nprint(get_coordinates((5, 6)))  # Expected output: [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
    "test_cases": [
      "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
      "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]",
      "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
    ]
  },
  {
    "mbpp_id": 631,
    "problem_statement": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef replace_spaces(input_string):\n    \"\"\"\n    This function takes a string as input and returns a new string where all spaces are replaced \n    with underscores and vice versa.\n    \n    :param input_string: str - The original string containing spaces.\n    :return: str - The modified string with spaces replaced by underscores and underscores replaced by spaces.\n    \"\"\"\n    # Replace spaces with underscores and vice versa using regular expression\n    result = re.sub(r'\\s', '_', input_string)\n    result = result.replace('_', r'\\\\s')\n    return result\n\n# Test cases\nprint(replace_spaces('Jumanji The Jungle'))  # Expected output: Jumanji_The_Jungle\nprint(replace_spaces('The Avengers'))        # Expected output: The_Avengers\nprint(replace_spaces('Fast and Furious'))    # Expected output: Fast_and_Furious",
    "test_cases": [
      "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
      "assert replace_spaces('The Avengers') == 'The_Avengers'",
      "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
    ]
  },
  {
    "mbpp_id": 632,
    "problem_statement": "Write a python function to move all zeroes to the end of the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def move_zero(nums):\n    i = 0\n    for j in range(len(nums)):\n        if nums[j] != 0:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n    return nums",
    "test_cases": [
      "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
      "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
      "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
    ]
  },
  {
    "mbpp_id": 633,
    "problem_statement": "Write a python function to find the sum of xor of all pairs of numbers in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "def pair_OR_Sum(arr, n):\n    # Calculate XOR of all elements in the array\n    xor_all = reduce(lambda x, y: x ^ y, arr)\n    \n    # Calculate total number of pairs\n    num_pairs = n * (n - 1) // 2\n    \n    # Calculate sum of xor of all pairs\n    result = xor_all * num_pairs\n    \n    return result",
    "test_cases": [
      "assert pair_OR_Sum([5,9,7,6],4) == 47",
      "assert pair_OR_Sum([7,3,5],3) == 12",
      "assert pair_OR_Sum([7,3],2) == 4"
    ]
  },
  {
    "mbpp_id": 634,
    "problem_statement": "Write a python function to find the sum of fourth power of first n even natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'even_Power_Sum' is not defined",
      "Test 2: FAIL - name 'even_Power_Sum' is not defined",
      "Test 3: FAIL - name 'even_Power_Sum' is not defined"
    ],
    "generated_code": "def even_power_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        number = 2 * i\n        total += number ** 4\n    return total",
    "test_cases": [
      "assert even_Power_Sum(2) == 272",
      "assert even_Power_Sum(3) == 1568",
      "assert even_Power_Sum(4) == 5664"
    ]
  },
  {
    "mbpp_id": 635,
    "problem_statement": "Write a function to push all values into a heap and then pop off the smallest values one at a time.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def heap_sort(arr):\n    import heapq\n    \n    # Convert list into a min-heap\n    heapq.heapify(arr)\n    \n    result = []\n    while arr:\n        # Pop and return the smallest item from the heap\n        result.append(heapq.heappop(arr))\n    \n    return result",
    "test_cases": [
      "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
      "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"
    ]
  },
  {
    "mbpp_id": 636,
    "problem_statement": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "def check_roots(root1, root2, coeff_a):\n    # Calculate the product of the roots using Vieta's formulas\n    product_of_roots = -coeff_a / (root1 * root2)\n    \n    # If the product is equal to 1, the roots are reciprocal\n    return product_of_roots == 1",
    "test_cases": [
      "assert Check_Solution(2,0,2) == \"Yes\"",
      "assert Check_Solution(2,-5,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\""
    ]
  },
  {
    "mbpp_id": 637,
    "problem_statement": "Write a function to check whether the given amount has no profit and no loss",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def noprofit_noloss(price_sold, price_bought):\n    return price_sold == price_bought",
    "test_cases": [
      "assert noprofit_noloss(1500,1200)==False",
      "assert noprofit_noloss(100,100)==True",
      "assert noprofit_noloss(2000,5000)==False"
    ]
  },
  {
    "mbpp_id": 638,
    "problem_statement": "Write a function to calculate wind chill index.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def wind_chill(tempature, wind_speed):\n    if tempature >= 50:\n        return -42 + 9 * (tempature - 10) / (1 + 0.2 * wind_speed)\n    else:\n        return -15 + 9 * (tempature - 32) / (1 + 0.2 * wind_speed)\n\n# Test cases\nprint(wind_chill(120, 35))  # Expected output: 40\nprint(wind_chill(40, 70))   # Expected output: 86\nprint(wind_chill(10, 100))  # Expected output: 116",
    "test_cases": [
      "assert wind_chill(120,35)==40",
      "assert wind_chill(40,70)==86",
      "assert wind_chill(10,100)==116"
    ]
  },
  {
    "mbpp_id": 639,
    "problem_statement": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sample_nam' is not defined",
      "Test 2: FAIL - name 'sample_nam' is not defined",
      "Test 3: FAIL - name 'sample_nam' is not defined"
    ],
    "generated_code": "def sample_name(lst):\n    return sum(len(name) for name in lst if name[0].isupper())\n\n# Test cases\nprint(sample_name(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])) # Output: 16\nprint(sample_name([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])) # Output: 10\nprint(sample_name([\"abcd\", \"Python\", \"abba\", \"aba\"])) # Output: 6",
    "test_cases": [
      "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
      "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10",
      "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"
    ]
  },
  {
    "mbpp_id": 640,
    "problem_statement": "Write a function to remove the parenthesis area in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_parenthesis(s: str) -> str:\n    # Remove all occurrences of '()' from the input string\n    return ''.join([char for char in s if not (char == '(' and char == ')')])",
    "test_cases": [
      "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")",
      "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")",
      "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"
    ]
  },
  {
    "mbpp_id": 641,
    "problem_statement": "Write a function to find the nth nonagonal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_nonagonal(n):\n    # Calculate the nth nonagonal number using the formula for n-agonals\n    return int((7*n*(n-1))/2)",
    "test_cases": [
      "assert is_nonagonal(10) == 325",
      "assert is_nonagonal(15) == 750",
      "assert is_nonagonal(18) == 1089"
    ]
  },
  {
    "mbpp_id": 642,
    "problem_statement": "Write a function to remove similar rows from the given tuple matrix.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_similar_row(matrix):\n    \"\"\"\n    Removes duplicate rows from a matrix of tuples.\n    \n    Args:\n    matrix (list of lists of tuples): The input matrix where each sublist represents a row in the matrix.\n    \n    Returns:\n    dict: A dictionary with unique tuples as keys and their corresponding indices in the original matrix as values.\n    \"\"\"\n    seen = set()\n    result = {}\n    for i, row in enumerate(matrix):\n        # Sort the row to handle unordered pairs\n        sorted_row = tuple(sorted(row))\n        if sorted_row not in seen:\n            seen.add(sorted_row)\n            result[sorted_row] = i\n    \n    return result\n\n# Test Cases\nprint(remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]]))\nprint(remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]]))\nprint(remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]]))",
    "test_cases": [
      "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}",
      "assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}",
      "assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}"
    ]
  },
  {
    "mbpp_id": 643,
    "problem_statement": "Write a function that matches a word containing 'z', not at the start or end of the word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_wordz_middle(text):\n    # Use regular expression to find words containing 'z' in the middle part,\n    # not at the start or end of the word.\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match_wordz_middle(\"pythonzabc.\"))   # Expected output: Found a match!\nprint(text_match_wordz_middle(\"xyzabc.\"))       # Expected output: Not matched!\nprint(text_match_wordz_middle(\"  lang  \"))      # Expected output: Not matched!",
    "test_cases": [
      "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')",
      "assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')",
      "assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 644,
    "problem_statement": "Write a python function to reverse an array upto a given position.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def reverse_Array_Upto_K(arr, k):\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n    \n    return arr[:k+1]\n\n# Test cases\nprint(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4)) # Expected output: [4, 3, 2, 1, 5, 6]\nprint(reverse_Array_Upto_K([4, 5, 6, 7], 2)) # Expected output: [5, 4, 6, 7]\nprint(reverse_Array_Upto_K([9, 8, 7, 6, 5], 3)) # Expected output: [7, 8, 9, 6, 5]",
    "test_cases": [
      "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
      "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
      "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
    ]
  },
  {
    "mbpp_id": 645,
    "problem_statement": "Write a function to find the product of it’s kth index in the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_k_product(tuples_list, k_index):\n    \"\"\"\n    Given a list of tuples and an index k, calculate the product of the elements at index k in each tuple.\n    \n    :param tuples_list: List of tuples containing integer elements.\n    :param k_index: Integer representing the index position within each tuple to be multiplied.\n    :return: Product of elements at specified index across all tuples.\n    \"\"\"\n    result = 1\n    for tup in tuples_list:\n        if len(tup) > k_index:\n            result *= tup[k_index]\n    return result\n\n# Test cases\nprint(find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)) # Expected output: 665\nprint(find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)) # Expected output: 280\nprint(find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0)) # Expected output: 210",
    "test_cases": [
      "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665",
      "assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280",
      "assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210"
    ]
  },
  {
    "mbpp_id": 646,
    "problem_statement": "Write a python function to count number of cubes of size k in a cube of size n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'No_of_cubes' is not defined",
      "Test 2: FAIL - name 'No_of_cubes' is not defined",
      "Test 3: FAIL - name 'No_of_cubes' is not defined"
    ],
    "generated_code": "def no_of_cubes(n, k):\n    # Calculate the total number of unit cubes in an n x n x n cube\n    total_unit_cubes = n**3\n    \n    # Calculate the maximum possible cube side length for each layer starting from top down\n    max_side_lengths = [min(k + i, n - i) for i in range(n)]\n    \n    # Sum up the volumes of all possible smaller cubes that can fit within the original cube\n    result = sum(max_side_length ** 3 for max_side_length in max_side_lengths)\n    \n    return result",
    "test_cases": [
      "assert No_of_cubes(2,1) == 8",
      "assert No_of_cubes(5,2) == 64",
      "assert No_of_cubes(1,1) == 1"
    ]
  },
  {
    "mbpp_id": 647,
    "problem_statement": "Write a function to split a string at uppercase letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef split_upperstring(s):\n    # Use regular expression to find all substrings starting with an uppercase letter\n    return [match.group() for match in re.finditer(r\"([A-Z])\", s)]",
    "test_cases": [
      "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']",
      "assert split_upperstring(\"PythonProgram\")==['Python','Program']",
      "assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']"
    ]
  },
  {
    "mbpp_id": 648,
    "problem_statement": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def exchange_elements(lst):\n    for i in range(0, len(lst), 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n\n# Test Cases\nprint(exchange_elements([0,1,2,3,4,5])) # Expected output: [1, 0, 3, 2, 5, 4]\nprint(exchange_elements([5,6,7,8,9,10])) # Expected output: [6,5,8,7,10,9]\nprint(exchange_elements([25,35,45,55,75,95])) # Expected output: [35,25,55,45,95,75]",
    "test_cases": [
      "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ",
      "assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] ",
      "assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] "
    ]
  },
  {
    "mbpp_id": 649,
    "problem_statement": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Range_list(lst, start_index, end_index):\n    # Ensure the start index is not greater than the end index for valid input handling\n    if start_index > end_index:\n        raise ValueError(\"Start index cannot be greater than end index.\")\n    \n    # Calculate the length of the list and ensure the end index is within bounds\n    lst_length = len(lst)\n    if end_index >= lst_length:\n        raise IndexError(\"End index is out of bounds.\")\n    \n    # Initialize the total sum\n    total_sum = 0\n    \n    # Iterate through the list from the start index to the end index, adding each element to the total sum\n    for i in range(start_index, end_index + 1):\n        total_sum += lst[i]\n        \n    return total_sum",
    "test_cases": [
      "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29",
      "assert sum_Range_list([1,2,3,4,5],1,2) == 5",
      "assert sum_Range_list([1,0,1,2,5,6],4,5) == 11"
    ]
  },
  {
    "mbpp_id": 650,
    "problem_statement": "Write a python function to check whether the given two arrays are equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def are_Equal(arr1, arr2, n1, n2):\n    if len(arr1) != n1 or len(arr2) != n2:\n        return False\n    for i in range(n1):\n        if arr1[i] != arr2[i]:\n            return False\n    return True",
    "test_cases": [
      "assert are_Equal([1,2,3],[3,2,1],3,3) == True",
      "assert are_Equal([1,1,1],[2,2,2],3,3) == False",
      "assert are_Equal([8,9],[4,5,6],2,3) == False"
    ]
  },
  {
    "mbpp_id": 651,
    "problem_statement": "Write a function to check if one tuple is a subset of another tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_subset(tup1, tup2):\n    # Check if all elements in tup1 exist in tup2\n    return set(tup1).issubset(set(tup2))",
    "test_cases": [
      "assert check_subset((10, 4, 5, 6), (5, 10)) == True",
      "assert check_subset((1, 2, 3, 4), (5, 6)) == False",
      "assert check_subset((7, 8, 9, 10), (10, 8)) == True"
    ]
  },
  {
    "mbpp_id": 652,
    "problem_statement": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def matrix_to_list(matrix):\n    # Initialize an empty result list\n    res = []\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Initialize a temporary list for storing each element of the current row\n        temp = []\n        \n        # Iterate over each element in the current row\n        for ele in row:\n            # Append each element to the temporary list\n            temp.append(ele)\n        \n        # Convert the temporary list to a tuple and append it to the result list\n        res.append(tuple(temp))\n    \n    # Join all tuples in the result list with commas to form the final string representation\n    return ','.join(str(t) for t in res)\n\n# Test cases\nprint(matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]))  # Expected output: \"(4, 7, 10, 18, 0, 10),(5, 8, 13, 17, 4, 1)\"\nprint(matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]))  # Expected output: \"(5, 8, 11, 19, 1, 11),(6, 9, 14, 18, 5, 2)\"\nprint(matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]))  # Expected output: \"(6, 9, 12, 20, 23, 15),(7, 10, 15, 21, 7, 8)\"",
    "test_cases": [
      "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'",
      "assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'",
      "assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'"
    ]
  },
  {
    "mbpp_id": 653,
    "problem_statement": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef grouping_dictionary(pairs):\n    # Use defaultdict to automatically create keys if they don't exist and append values for each entry\n    grouped = defaultdict(list)\n    for k, v in pairs:\n        grouped[k].append(v)\n    return dict(grouped)\n\n# Test cases to verify the correctness of the solution\nassert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]) == {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)]) == {'yellow': [10, 30], 'blue': [20, 40], 'red': [10]}\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)]) == {'yellow': [15, 35], 'blue': [25, 45], 'red': [15]}",
    "test_cases": [
      "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})",
      "assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})",
      "assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"
    ]
  },
  {
    "mbpp_id": 654,
    "problem_statement": "Write a function to find the perimeter of a rectangle.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_cases": [
      "assert rectangle_perimeter(10,20)==60",
      "assert rectangle_perimeter(10,5)==30",
      "assert rectangle_perimeter(4,2)==12"
    ]
  },
  {
    "mbpp_id": 655,
    "problem_statement": "Write a python function to find the sum of fifth power of n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def fifth_Power_Sum(n):\n    # Initialize sum with 0\n    total_sum = 0\n    \n    # Iterate through numbers from 1 to n\n    for i in range(1, n + 1):\n        # Add the fifth power of each number to the sum\n        total_sum += pow(i, 5)\n    \n    # Return the final sum\n    return total_sum",
    "test_cases": [
      "assert fifth_Power_Sum(2) == 33",
      "assert fifth_Power_Sum(4) == 1300",
      "assert fifth_Power_Sum(3) == 276"
    ]
  },
  {
    "mbpp_id": 656,
    "problem_statement": "Write a python function to find the minimum sum of absolute differences of two arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef find_Min_Sum(arr1: List[int], arr2: List[int], n: int) -> int:\n    diff_sum = 0\n    for i in range(n):\n        diff_sum += abs(arr1[i] - arr2[i])\n    return diff_sum",
    "test_cases": [
      "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0",
      "assert find_Min_Sum([1,2,3],[4,5,6],3) == 9",
      "assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6"
    ]
  },
  {
    "mbpp_id": 657,
    "problem_statement": "Write a python function to find the first digit in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def first_Digit(n):\n    # Initialize the result as 1 because the first digit of any non-zero number is always 1\n    res = 1\n    \n    # Calculate n! and divide it by powers of 10 until we get a number less than 10\n    while n >= 5:\n        n //= 10\n        res *= n\n        \n    # Return the last digit of the resulting factorial\n    return int(res % 10)",
    "test_cases": [
      "assert first_Digit(5) == 1",
      "assert first_Digit(10) == 3",
      "assert first_Digit(7) == 5"
    ]
  },
  {
    "mbpp_id": 658,
    "problem_statement": "Write a function to find the item with maximum occurrences in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\ndef max_occurrences(nums):\n    # Count the frequency of each number in the list\n    count = Counter(nums)\n    # Find the number with the highest occurrence and return it\n    most_common = count.most_common(1)[0][0]\n    return most_common",
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2",
      "assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1",
      "assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1"
    ]
  },
  {
    "mbpp_id": 659,
    "problem_statement": "Write a python function to print duplicants from a list of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Repeat' is not defined",
      "Test 2: FAIL - name 'Repeat' is not defined",
      "Test 3: FAIL - name 'Repeat' is not defined"
    ],
    "generated_code": "def repeat(nums):\n    # Use a set to store unique elements and then convert it back to a list\n    return list(set(nums))\n\n# Test cases\nprint(repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]))  # Output: [20, 30, -20, 60]\nprint(repeat([-1, 1, -1, 8]))  # Output: [-1]\nprint(repeat([1, 2, 3, 1, 2,]))  # Output: [1, 2]",
    "test_cases": [
      "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]",
      "assert Repeat([-1, 1, -1, 8]) == [-1]",
      "assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]"
    ]
  },
  {
    "mbpp_id": 660,
    "problem_statement": "Write a python function to choose points from two ranges such that no point lies in both the ranges.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef find_Points(x1_min, x1_max, y1_min, y1_max, x2_min, x2_max):\n    \"\"\"\n    Finds and returns points within given range pairs where no point is common to both ranges.\n    \n    Parameters:\n    - x1_min, x1_max: Range limits for the first set of coordinates.\n    - y1_min, y1_max: Range limits for the second set of coordinates.\n    - x2_min, x2_max: Range limits for the third set of coordinates.\n    - y2_min, y2_max: Range limits for the fourth set of coordinates.\n    \n    Returns: A tuple representing the selected points with the highest y-coordinate values.\n    \"\"\"\n    # Finding common points between both sets of coordinates\n    common_points = list(set(range(x1_min, x1_max + 1)).intersection(range(y1_min, y1_max + 1)))\n    \n    # Filtering out these points from each individual range\n    filtered_x2 = [x if x not in common_points else None for x in range(x2_min, x2_max + 1)]\n    filtered_y2 = [y if y not in common_points else None for y in range(y2_min, y2_max + 1)]\n    \n    # Selecting maximum y-value for each valid coordinate in the filtered ranges\n    max_values_x2 = {x: max(filtered_y2[y] for y in range(len(filtered_y2)) if x == filtered_x2[y]) for x in filtered_x2}\n    max_values_y2 = {y: max(filtered_x2[x] for x in range(len(filtered_x2)) if y == filtered_y2[x]) for y in filtered_y2}\n    \n    # Combining the results into one tuple\n    final_result = ()\n    for i, j in zip(max_values_x2.keys(), max_values_y2.keys()):\n        if max_values_x2[i] is not None and max_values_y2[j] is not None:\n            final_result += (max(max_values_x2[i], max_values_y2[j]), )\n    \n    return final_result\n\n\n# Test Cases\nprint(find_Points(5, 10, 1, 5))  # Expected output: (1, 10)\nprint(find_Points(3, 5, 7, 9))   # Expected output: (3, 9)\nprint(find_Points(1, 5,",
    "test_cases": [
      "assert find_Points(5,10,1,5) == (1,10)",
      "assert find_Points(3,5,7,9) == (3,9)",
      "assert find_Points(1,5,2,8) == (1,8)"
    ]
  },
  {
    "mbpp_id": 661,
    "problem_statement": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from itertools import combinations_with_replacement\n\ndef max_sum_of_three_consecutive(nums, k):\n    \"\"\"\n    Finds the maximum sum of any contiguous subarray of length at most k from an array of integers.\n    \n    :param nums: List[int] - The list of integers.\n    :param k: int - The maximum size of the subarray considered.\n    :return: int - The maximum sum possible with no three consecutive numbers in the subarray.\n    \"\"\"\n    # Generate all possible subsets and calculate their sums if they fit within the given constraint\n    allowed_subarrays = [list(subset) for subset in combinations_with_replacement(nums, k) if len(set(subset)) <= 2]\n    max_sum = max(sum(subarr) for subarr in allowed_subarrays)\n    return max_sum\n\n# Example usage:\nprint(max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5))\nprint(max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5))\nprint(max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8))",
    "test_cases": [
      "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101",
      "assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013",
      "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27"
    ]
  },
  {
    "mbpp_id": 662,
    "problem_statement": "Write a function to sort a list in a dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sorted_dict(dict_):\n    \"\"\"\n    This function takes a dictionary where each value is a list and sorts it.\n    It returns a new dictionary with the same structure but all lists sorted.\n\n    Example:\n    >>> sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})\n    {'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\n    >>> sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})\n    {'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\n    >>> sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})\n    {'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}\n    \"\"\"\n    return {key: sorted(value) for key, value in dict_.items()}",
    "test_cases": [
      "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}",
      "assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}",
      "assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"
    ]
  },
  {
    "mbpp_id": 663,
    "problem_statement": "Write a function to find the largest possible value of k such that k modulo x is y.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_max_val(n, x, y):\n    max_val = n % x - y + (x - y)\n    if max_val < 0:\n        return -1\n    else:\n        return max_val\n\n# Test cases\nprint(find_max_val(15, 10, 5))  # Expected output: 15\nprint(find_max_val(187, 10, 5))  # Expected output: 185\nprint(find_max_val(16, 11, 1))   # Expected output: 12",
    "test_cases": [
      "assert find_max_val(15, 10, 5) == 15",
      "assert find_max_val(187, 10, 5) == 185",
      "assert find_max_val(16, 11, 1) == 12"
    ]
  },
  {
    "mbpp_id": 664,
    "problem_statement": "Write a python function to find the average of even numbers till a given even number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'average_Even' is not defined",
      "Test 2: FAIL - name 'average_Even' is not defined",
      "Test 3: FAIL - name 'average_Even' is not defined"
    ],
    "generated_code": "def average_even(n):\n    # Initialize sum and count for odd numbers\n    total_sum = 0\n    even_count = 0\n    \n    # Loop through all numbers from 2 up to n\n    for num in range(2, n + 1, 2):\n        total_sum += num\n        even_count += 1\n        \n    if even_count == 0:\n        return 0\n    else:\n        return total_sum / even_count",
    "test_cases": [
      "assert average_Even(2) == 2",
      "assert average_Even(4) == 3",
      "assert average_Even(100) == 51"
    ]
  },
  {
    "mbpp_id": 665,
    "problem_statement": "Write a python function to shift first element to the end of given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def move_last(lst):\n    \"\"\"\n    Move the last element of the given list 'lst' to the beginning.\n    \n    Parameters:\n    lst (list): The input list from which the last element will be moved.\n    \n    Returns:\n    list: A new list with the last element of the original list at the start.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List cannot be empty\")\n    \n    last_element = lst.pop()\n    lst.insert(0, last_element)\n    return lst",
    "test_cases": [
      "assert move_last([1,2,3,4]) == [2,3,4,1]",
      "assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]",
      "assert move_last([5,4,3,2,1]) == [4,3,2,1,5]"
    ]
  },
  {
    "mbpp_id": 666,
    "problem_statement": "Write a function to count occurrence of a character in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_char(input_str, char_to_count):\n    # Initialize counter for occurrences\n    count = 0\n    \n    # Iterate over each character in the input string\n    for current_char in input_str:\n        # Check if the current character matches the target character\n        if current_char == char_to_count:\n            count += 1\n            \n    return count",
    "test_cases": [
      "assert count_char(\"Python\",'o')==1",
      "assert count_char(\"little\",'t')==2",
      "assert count_char(\"assert\",'s')==2"
    ]
  },
  {
    "mbpp_id": 667,
    "problem_statement": "Write a python function to count number of vowels in the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Check_Vow(s, s_):\n    \"\"\"\n    Count the number of vowels in the given string.\n    \n    Parameters:\n    - s (str): The main string.\n    - s_ (str): The substring containing only vowels for comparison.\n    \n    Returns:\n    int: The count of vowels in the main string.\n    \"\"\"\n    vowel_count = sum(1 for char in s if char.lower() in 'aeiou')\n    return vowel_count\n\n# Test cases to verify the correctness of the solution\nassert Check_Vow('corner', 'AaEeIiOoUu') == 2\nassert Check_Vow('valid', 'AaEeIiOoUu') == 2\nassert Check_Vow('true', 'AaEeIiOoUu') == 2",
    "test_cases": [
      "assert Check_Vow('corner','AaEeIiOoUu') == 2",
      "assert Check_Vow('valid','AaEeIiOoUu') == 2",
      "assert Check_Vow('true','AaEeIiOoUu') ==2"
    ]
  },
  {
    "mbpp_id": 668,
    "problem_statement": "Write a python function to replace multiple occurence of character by single.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - replace() missing 1 required positional argument: 'new_char'",
      "Test 2: FAIL - replace() missing 1 required positional argument: 'new_char'",
      "Test 3: FAIL - replace() missing 1 required positional argument: 'new_char'"
    ],
    "generated_code": "def replace(string, old_char, new_char):\n    # Replace all occurrences of old_char with new_char in string\n    replaced_string = ''\n    for char in string:\n        if char == old_char:\n            replaced_string += new_char\n        else:\n            replaced_string += char\n    return replaced_string",
    "test_cases": [
      "assert replace('peep','e') == 'pep'",
      "assert replace('Greek','e') == 'Grek'",
      "assert replace('Moon','o') == 'Mon'"
    ]
  },
  {
    "mbpp_id": 669,
    "problem_statement": "Write a function to check whether the given ip address is valid or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef check_IP(ip_address):\n    # Regular expression for validating an IPv4 address\n    pattern = r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\"\n    \n    # Match the input with the pattern\n    if re.match(pattern, ip_address):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n\n# Test cases\nprint(check_IP(\"192.168.0.1\"))  # Expected output: Valid IP address\nprint(check_IP(\"110.234.52.124\"))  # Expected output: Valid IP address\nprint(check_IP(\"366.1.2.2\"))  # Expected output: Invalid IP address",
    "test_cases": [
      "assert check_IP(\"192.168.0.1\") == 'Valid IP address'",
      "assert check_IP(\"110.234.52.124\") == 'Valid IP address'",
      "assert check_IP(\"366.1.2.2\") == 'Invalid IP address'"
    ]
  },
  {
    "mbpp_id": 670,
    "problem_statement": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'decreasing_trend' is not defined",
      "Test 2: FAIL - name 'decreasing_trend' is not defined",
      "Test 3: FAIL - name 'decreasing_trend' is not defined"
    ],
    "generated_code": "def is_decreasing(nums):\n    # Check if each number in the list is greater than the previous one\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i-1]:\n            return False\n    return True\n\n# Test cases\nprint(is_decreasing([-4,-3,-2,-1]))  # Expected output: True\nprint(is_decreasing([1,2,3]))       # Expected output: True\nprint(is_decreasing([3,2,1]))       # Expected output: False",
    "test_cases": [
      "assert decreasing_trend([-4,-3,-2,-1]) == True",
      "assert decreasing_trend([1,2,3]) == True",
      "assert decreasing_trend([3,2,1]) == False"
    ]
  },
  {
    "mbpp_id": 671,
    "problem_statement": "Write a python function to set the right most unset bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def set_Right_most_Unset_Bit(num):\n    # Flip the least significant '0' bit and add one to it.\n    result = num | (num - 1)\n    return result",
    "test_cases": [
      "assert set_Right_most_Unset_Bit(21) == 23",
      "assert set_Right_most_Unset_Bit(11) == 15",
      "assert set_Right_most_Unset_Bit(15) == 15"
    ]
  },
  {
    "mbpp_id": 672,
    "problem_statement": "Write a function to find maximum of three numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_of_three(x, y, z):\n    return max(x, y, z)",
    "test_cases": [
      "assert max_of_three(10,20,30)==30",
      "assert max_of_three(55,47,39)==55",
      "assert max_of_three(10,49,30)==49"
    ]
  },
  {
    "mbpp_id": 673,
    "problem_statement": "Write a python function to convert a list of multiple integers into a single integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def convert(nums):\n    # Convert each number in the list to string and join them together.\n    result = ''.join(str(num) for num in nums)\n    # Convert the resulting string back to an integer.\n    return int(result)\n\n# Test cases to verify the correctness of the function.\nassert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
    "test_cases": [
      "assert convert([1,2,3]) == 123",
      "assert convert([4,5,6]) == 456",
      "assert convert([7,8,9]) == 789"
    ]
  },
  {
    "mbpp_id": 674,
    "problem_statement": "Write a function to remove duplicate words from a given string using collections module.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: too many values to unpack (expected 2)"
    ],
    "generated_code": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    \"\"\"\n    Remove duplicate words from a given string.\n    \n    Args:\n    s (str): The input string with possible duplicate words.\n    \n    Returns:\n    str: A new string with all duplicate words removed and words in order of first occurrence.\n    \"\"\"\n    # Split the string into words, sort them alphabetically, then join back into a single string\n    return ' '.join(OrderedDict(sorted((x for x in s.split())))).strip()\n\n# Test cases\nprint(remove_duplicate(\"Python Exercises Practice Solution Exercises\"))  # Expected output: \"Python Exercises Practice Solution\"\nprint(remove_duplicate(\"Python Exercises Practice Solution Python\"))   # Expected output: \"Python Exercises Practice Solution\"\nprint(remove_duplicate(\"Python Exercises Practice Solution Practice\"))  # Expected output: \"Python Exercises Practice Solution\"",
    "test_cases": [
      "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")",
      "assert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")",
      "assert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")"
    ]
  },
  {
    "mbpp_id": 675,
    "problem_statement": "Write a function to add two integers. however, if the sum is between the given range it will return 20.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_nums(x, low, high, result):\n    \"\"\"\n    This function takes four parameters x and two ranges defined as low and high.\n    It adds x with itself twice, then checks if the total sum falls within the specified range [low, high].\n    If so, it returns 20; otherwise, it returns the sum of x added with itself.\n    \n    :param x: Integer value for which the addition operation needs to be performed.\n    :param low: Lower limit of the range (inclusive).\n    :param high: Upper limit of the range (inclusive).\n    :param result: The result to be returned based on the condition mentioned above.\n    :return: 20 if the sum of x with itself equals anything other than values within the provided range,\n             otherwise returns the sum of x added with itself.\n    \"\"\"\n    # Perform the addition operation twice\n    doubled_sum = 2 * x\n    \n    # Check if the sum falls within the specified range\n    if low <= doubled_sum <= high:\n        return 20\n    else:\n        return doubled_sum",
    "test_cases": [
      "assert sum_nums(2,10,11,20)==20",
      "assert sum_nums(15,17,1,10)==32",
      "assert sum_nums(10,15,5,30)==20"
    ]
  },
  {
    "mbpp_id": 676,
    "problem_statement": "Write a function to remove everything except alphanumeric characters from the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_extra_char(text):\n    # Use regular expression to replace all non-alphanumeric characters with an empty string\n    cleaned_text = re.sub('[\\W_]+', '', text)\n    return cleaned_text.strip()",
    "test_cases": [
      "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'",
      "assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'",
      "assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'"
    ]
  },
  {
    "mbpp_id": 677,
    "problem_statement": "Write a function to check if the triangle is valid or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def validity_triangle(a, b, c):\n    # Check if all sides are positive\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    # Sort the lengths of the sides\n    sides = sorted([a, b, c])\n    # Check for Pythagorean theorem condition\n    return sides[0]**2 + sides[1]**2 == sides[2]**2",
    "test_cases": [
      "assert validity_triangle(60,50,90)==False",
      "assert validity_triangle(45,75,60)==True",
      "assert validity_triangle(30,50,100)==True"
    ]
  },
  {
    "mbpp_id": 678,
    "problem_statement": "Write a python function to remove spaces from a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_spaces(input_string):\n    # Remove all spaces from the input string using str.replace()\n    return input_string.replace(' ', '')\n\n# Test cases\nprint(remove_spaces(\"a b c\"))  # Expected output: \"abc\"\nprint(remove_spaces(\"1 2 3\"))  # Expected output: \"123\"\nprint(remove_spaces(\" b c\"))   # Expected output: \"bc\"",
    "test_cases": [
      "assert remove_spaces(\"a b c\") == \"abc\"",
      "assert remove_spaces(\"1 2 3\") == \"123\"",
      "assert remove_spaces(\" b c\") == \"bc\""
    ]
  },
  {
    "mbpp_id": 679,
    "problem_statement": "Write a function to access dictionary key’s element by index.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def access_key(dictionary, index):\n    # Check if the dictionary is empty and return an error message\n    if not dictionary:\n        return \"Error: Dictionary is empty\"\n    \n    # Access the value at the given index in the dictionary\n    try:\n        result = list(dictionary.keys())[index]\n    except IndexError:\n        return \"Error: Index out of range\"\n    \n    return result",
    "test_cases": [
      "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'",
      "assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'",
      "assert access_key({'program':15,'computer':45},1)== 'computer'"
    ]
  },
  {
    "mbpp_id": 680,
    "problem_statement": "Write a python function to check whether a sequence of numbers has an increasing trend or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'increasing_trend' is not defined",
      "Test 2: FAIL - name 'increasing_trend' is not defined",
      "Test 3: FAIL - name 'increasing_trend' is not defined"
    ],
    "generated_code": "def is_increasing(t):\n    # Check if all consecutive elements in the list are greater than their preceding element\n    for i in range(len(t) - 1):\n        if t[i] >= t[i + 1]:\n            return False\n    return True",
    "test_cases": [
      "assert increasing_trend([1,2,3,4]) == True",
      "assert increasing_trend([4,3,2,1]) == False",
      "assert increasing_trend([0,1,4,9]) == True"
    ]
  },
  {
    "mbpp_id": 681,
    "problem_statement": "Write a python function to find the smallest prime divisor of a number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def smallest_Divisor(n):\n    \"\"\"\n    This function finds the smallest prime divisor of a given integer n.\n    \n    Parameters:\n    - n: An integer for which we want to find the smallest prime divisor\n    \n    Returns:\n    - The smallest prime divisor of n as an integer\n    \"\"\"\n    if n % 2 == 0 and n > 2:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n# Check function with provided data points\nassert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert smallest_Divisor(10) == 2",
      "assert smallest_Divisor(25) == 5",
      "assert smallest_Divisor(31) == 31"
    ]
  },
  {
    "mbpp_id": 682,
    "problem_statement": "Write a function to multiply two lists using map and lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def mul_list(list1, list2):\n    return list(map(lambda x, y: x * y, list1, list2))",
    "test_cases": [
      "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]",
      "assert mul_list([1,2],[3,4])==[3,8]",
      "assert mul_list([90,120],[50,70])==[4500,8400]"
    ]
  },
  {
    "mbpp_id": 683,
    "problem_statement": "Write a python function to check whether the given number can be represented by sum of two squares or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Square(n):\n    import math\n    \n    for i in range(int(math.sqrt(n)) + 1):\n        j = int(math.sqrt(n - i*i))\n        if i*i + j*j == n:\n            return True\n    return False",
    "test_cases": [
      "assert sum_Square(25) == True",
      "assert sum_Square(24) == False",
      "assert sum_Square(17) == True"
    ]
  },
  {
    "mbpp_id": 684,
    "problem_statement": "Write a python function to count occurences of a character in a repeated string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_Char(repeat_str, target_char):\n    # Calculate how many times the target char will repeat within one full iteration\n    num_iterations = len(repeat_str) // len(target_char)\n    \n    # Calculate total occurrences of the target char in the repeated string\n    total_occurrences = num_iterations * len(target_char)\n    \n    # Adjust for partial iterations if necessary\n    remainder = len(repeat_str) % len(target_char)\n    if remainder > 0:\n        remaining_count = int(remainder / len(target_char))\n        total_occurrences += remaining_count\n    \n    return total_occurrences",
    "test_cases": [
      "assert count_Char(\"abcac\",'a') == 4",
      "assert count_Char(\"abca\",'c') == 2",
      "assert count_Char(\"aba\",'a') == 7"
    ]
  },
  {
    "mbpp_id": 685,
    "problem_statement": "Write a python function to find sum of prime numbers between 1 to n.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_prime(num):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_Of_Primes(n):\n    \"\"\"Calculate the sum of all prime numbers from 1 to n.\"\"\"\n    total = 0\n    for num in range(1, n+1):\n        if is_prime(num):\n            total += num\n    return total",
    "test_cases": [
      "assert sum_Of_Primes(10) == 17",
      "assert sum_Of_Primes(20) == 77",
      "assert sum_Of_Primes(5) == 10"
    ]
  },
  {
    "mbpp_id": 686,
    "problem_statement": "Write a function to find the frequency of each element in the given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def freq_element(lst):\n    # Create an empty dictionary to store frequencies\n    frequency_dict = {}\n    \n    # Iterate through the list and update the dictionary with frequencies\n    for item in lst:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    \n    # Convert the dictionary to a string representation\n    result_str = \"{\"\n    for key in frequency_dict.keys():\n        result_str += f\"'{key}': {frequency_dict[key]}, \"\n    result_str = result_str.rstrip(\", \") + \"}\"\n    return result_str",
    "test_cases": [
      "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'",
      "assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'",
      "assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'"
    ]
  },
  {
    "mbpp_id": 687,
    "problem_statement": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)",
    "test_cases": [
      "assert recur_gcd(12,14) == 2",
      "assert recur_gcd(13,17) == 1",
      "assert recur_gcd(9, 3) == 3"
    ]
  },
  {
    "mbpp_id": 688,
    "problem_statement": "Write a function to get the length of a complex number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\nfrom typing import Union\n\ndef len_complex(real: float, imag: float) -> float:\n    \"\"\"\n    Calculate the magnitude of a complex number.\n\n    Parameters:\n    real (float): The real part of the complex number.\n    imag (float): The imaginary part of the complex number.\n\n    Returns:\n    float: The magnitude of the complex number.\n    \"\"\"\n    return math.sqrt(real**2 + imag**2)\n\n# Check function with provided data points\nassert abs(len_complex(3, 4) - 5.0) < 1e-9\nassert abs(len_complex(9, 10) - 13.45362404707371) < 1e-9\nassert abs(len_complex(7, 9) - 11.40175425099138) < 1e-9\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert len_complex(3,4)==5.0",
      "assert len_complex(9,10)==13.45362404707371",
      "assert len_complex(7,9)==11.40175425099138"
    ]
  },
  {
    "mbpp_id": 689,
    "problem_statement": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - min_jumps() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - min_jumps() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - min_jumps() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def min_jumps(nums):\n    if len(nums) <= 1:\n        return 0\n    dp = [float('inf')] * len(nums)\n    dp[0] = 0\n    \n    for i in range(len(nums)):\n        if dp[i] != float('inf'):\n            next_pos = nums[i]\n            for j in range(i + 1, min(i + nums[i] + 1, len(nums))):\n                if dp[j] == float('inf') or dp[j] >= dp[i] + 1:\n                    dp[j] = dp[i] + 1\n    return dp[-1]\n\n# Test cases\nprint(min_jumps([1, 3, 6, 1, 0, 9])) # Output: 3\nprint(min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9])) # Output: 3\nprint(min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) # Output: 10",
    "test_cases": [
      "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3",
      "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3",
      "assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10"
    ]
  },
  {
    "mbpp_id": 690,
    "problem_statement": "Write a function to multiply consecutive numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef mul_consecutive_nums(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(nums)):\n        product = nums[i-1] * nums[i]\n        result.append(product)\n    return result",
    "test_cases": [
      "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]",
      "assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]",
      "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"
    ]
  },
  {
    "mbpp_id": 691,
    "problem_statement": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def group_element(tuples_list):\n    grouped = {}\n    for item in tuples_list:\n        if item[1] in grouped:\n            grouped[item[1]].append(item[0])\n        else:\n            grouped[item[1]] = [item[0]]\n    return grouped\n\n# Test cases\nprint(group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]))  # Returns: {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nprint(group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]))  # Returns: {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nprint(group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]))  # Returns: {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
    "test_cases": [
      "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}",
      "assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}",
      "assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}"
    ]
  },
  {
    "mbpp_id": 692,
    "problem_statement": "Write a python function to find the last two digits in factorial of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def last_Two_Digits(n):\n    # Calculate n! using modular arithmetic to get the last two digits\n    result = pow(n, 5, 100)\n    return str(result)[-2:]",
    "test_cases": [
      "assert last_Two_Digits(7) == 40",
      "assert last_Two_Digits(5) == 20",
      "assert last_Two_Digits(2) == 2"
    ]
  },
  {
    "mbpp_id": 693,
    "problem_statement": "Write a function to remove multiple spaces in a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_multiple_spaces(input_string):\n    # Remove multiple spaces using regular expression\n    modified_string = re.sub(r'\\s+', ' ', input_string).strip()\n    return modified_string\n\n# Test cases to verify the correctness of the solution\nassert remove_multiple_spaces('Google      Assistant') == 'Google Assistant', \"Test case 1 failed\"\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core', \"Test case 2 failed\"\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'",
      "assert remove_multiple_spaces('Quad      Core') == 'Quad Core'",
      "assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'"
    ]
  },
  {
    "mbpp_id": 694,
    "problem_statement": "Write a function to extract unique values from the given dictionary values.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_unique(values_dict):\n    # Convert each value list into a set to remove duplicates and then convert back to a list\n    return list(set().union(*values_dict.values()))",
    "test_cases": [
      "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]",
      "assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]",
      "assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"
    ]
  },
  {
    "mbpp_id": 695,
    "problem_statement": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_greater(tup1, tup2):\n    # Compare each element of the second tuple with its corresponding index in the first tuple\n    for i in range(len(tup1)):\n        if tup1[i] <= tup2[i]:\n            return False\n    return True\n\n# Test cases\nprint(check_greater((10, 4, 5), (13, 5, 18)))  # Expected output: True\nprint(check_greater((1, 2, 3), (2, 1, 4)))     # Expected output: False\nprint(check_greater((4, 5, 6), (5, 6, 7)))     # Expected output: True",
    "test_cases": [
      "assert check_greater((10, 4, 5), (13, 5, 18)) == True",
      "assert check_greater((1, 2, 3), (2, 1, 4)) == False",
      "assert check_greater((4, 5, 6), (5, 6, 7)) == True"
    ]
  },
  {
    "mbpp_id": 696,
    "problem_statement": "Write a function to zip two given lists of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'zip_list' is not defined",
      "Test 2: FAIL - name 'zip_list' is not defined",
      "Test 3: FAIL - name 'zip_list' is not defined"
    ],
    "generated_code": "def zip_lists(lists_1, lists_2):\n    return list(zip(*lists_1 + lists_2))",
    "test_cases": [
      "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]",
      "assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]",
      "assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]"
    ]
  },
  {
    "mbpp_id": 697,
    "problem_statement": "Write a function to find number of even elements in the given list using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "count_even = lambda l: sum(1 for x in l if x % 2 == 0)",
    "test_cases": [
      "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3",
      "assert count_even([10,15,14,13,-18,12,-20])==5",
      "assert count_even([1, 2, 4, 8, 9])==3"
    ]
  },
  {
    "mbpp_id": 698,
    "problem_statement": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_dict_item(d):\n    # Convert tuples into lists to use as dict key and then convert back after sorting\n    d_list = list(d.items())\n    # Sort based on the product of elements in each tuple\n    sorted_items = sorted(d_list, key=lambda x: x[0][0]*x[0][1])\n    # Convert back from list of tuples to dictionary\n    sorted_dict = {key: value for key, value in sorted_items}\n    return sorted_dict",
    "test_cases": [
      "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}",
      "assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}",
      "assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}"
    ]
  },
  {
    "mbpp_id": 699,
    "problem_statement": "Write a python function to find the minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(s1, s2):\n    # Count mismatches between s1 and s2\n    mismatches = sum(c1 != c2 for c1, c2 in zip(s1, s2))\n    \n    # If there's more than one mismatch, it's not possible to convert one to another with a swap\n    if mismatches > 1:\n        return \"Not Possible\"\n    \n    # Calculate the minimum number of swaps needed based on the number of mismatches\n    swaps_needed = mismatches - max(0, mismatches - 1)\n    \n    return swaps_needed",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"",
      "assert min_Swaps(\"1110000\",\"0001101\") == 3"
    ]
  },
  {
    "mbpp_id": 700,
    "problem_statement": "Write a function to count the number of elements in a list which are within a specific range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_range_in_list(lst, start, end):\n    return sum(start <= x <= end for x in lst)",
    "test_cases": [
      "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6",
      "assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5",
      "assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3"
    ]
  },
  {
    "mbpp_id": 701,
    "problem_statement": "Write a function to find the equilibrium index of the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def equilibrium_index(arr):\n    \"\"\"\n    Finds an index in the array such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes.\n    \n    Parameters:\n    arr (list): A list of integers\n    \n    Returns:\n    int: The index where the condition is met, returns -1 if no such index exists.\n    \"\"\"\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        # If left sum equals to total sum minus right sum (total sum minus left sum minus element), it's an equilibrium point\n        if left_sum == total_sum - left_sum - num:\n            return i\n        left_sum += num\n    return -1\n\n# Check function with provided data points\nprint(equilibrium_index([1, 2, 3, 4, 1, 2, 3]))  # Expected output: 3\nprint(equilibrium_index([-7, 1, 5, 2, -4, 3, 0]))  # Expected output: 3\nprint(equilibrium_index([1, 2, 3]))  # Expected output: -1",
    "test_cases": [
      "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3",
      "assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3",
      "assert equilibrium_index([1, 2, 3]) == -1"
    ]
  },
  {
    "mbpp_id": 702,
    "problem_statement": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def removals(arr, k, target_sum):\n    # Calculate prefix sum array\n    arr_prefix = [arr[0]]\n    for i in range(1, len(arr)):\n        arr_prefix.append(arr_prefix[-1] + arr[i])\n    \n    count = 0\n    \n    # Iterate through the array to check if we can reduce the maximum difference\n    for num in arr:\n        current_sum = arr_prefix[len(arr) - 1] - arr_prefix[arr.index(num)]\n        \n        # If we have found a valid subarray where max difference <= k and total length >= target_sum,\n        # we calculate how many elements need to be removed to make their difference <= k\n        if current_sum <= k * (len(arr) - arr.index(num)) and count + len(arr) - arr.index(num) >= target_sum:\n            count += len(arr) - arr.index(num)\n            \n    return count",
    "test_cases": [
      "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5",
      "assert removals([1, 5, 6, 2, 8], 5, 2) == 3",
      "assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2"
    ]
  },
  {
    "mbpp_id": 703,
    "problem_statement": "Write a function to check whether the given key is present in the dictionary or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_key_present(dct, key):\n    return key in dct",
    "test_cases": [
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True",
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True",
      "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False"
    ]
  },
  {
    "mbpp_id": 704,
    "problem_statement": "Write a function to calculate the harmonic sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def harmonic_sum(n):\n    h_sum = 0.0\n    for i in range(1, n):\n        h_sum += 1/i\n    return h_sum",
    "test_cases": [
      "assert harmonic_sum(10)==2.9289682539682538",
      "assert harmonic_sum(4)==2.083333333333333",
      "assert harmonic_sum(7)==2.5928571428571425 "
    ]
  },
  {
    "mbpp_id": 705,
    "problem_statement": "Write a function to sort a list of lists by length and value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_sublists(lst):\n    # Sort the input list based on sublist length in ascending order\n    lst.sort(key=len)\n    return lst\n\n# Test cases\nprint(sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]))  # Expected output: [[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nprint(sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]]))  # Expected output: [[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nprint(sort_sublists([[\"python\"], [\"java\",\"C\",\"C++\"], [\"DBMS\"], [\"SQL\",\"HTML\"]]))  # Expected output: [['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
    "test_cases": [
      "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]",
      "assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]",
      "assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"
    ]
  },
  {
    "mbpp_id": 706,
    "problem_statement": "Write a function to find whether an array is subset of another array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_subset(main_array, main_length, sub_array, sub_length):\n    if len(sub_array) > main_length:\n        return False\n    count = 0\n    for i in range(main_length - sub_length + 1):\n        flag = True\n        for j in range(sub_length):\n            if main_array[i + j] != sub_array[j]:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return count == sub_length",
    "test_cases": [
      "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True",
      "assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True",
      "assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False"
    ]
  },
  {
    "mbpp_id": 707,
    "problem_statement": "Write a python function to count the total set bits from 1 to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "TIMEOUT"
    ],
    "generated_code": "def count_Set_Bits(n):\n    # Initialize result with 1 as it has one bit set.\n    result = 1\n    \n    # Iterate through each power of two less than n,\n    # adding them to the result if they have at least one bit set in n.\n    while (n & (n - 1)) != 0:\n        result += 2**((result + 1) // 2)\n    \n    return result",
    "test_cases": [
      "assert count_Set_Bits(16) == 33",
      "assert count_Set_Bits(2) == 2",
      "assert count_Set_Bits(14) == 28"
    ]
  },
  {
    "mbpp_id": 708,
    "problem_statement": "Write a python function to convert a string to a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Convert' is not defined",
      "Test 2: FAIL - name 'Convert' is not defined",
      "Test 3: FAIL - name 'Convert' is not defined"
    ],
    "generated_code": "def convert(s):\n    # Splitting the input string by spaces and returning the result as a list\n    return s.split()\n\n# Test cases to verify the correctness of the function\nassert convert('python program') == ['python', 'program']\nassert convert('Data Analysis') == ['Data', 'Analysis']\nassert convert('Hadoop Training') == ['Hadoop', 'Training']",
    "test_cases": [
      "assert Convert('python program') == ['python','program']",
      "assert Convert('Data Analysis') ==['Data','Analysis']",
      "assert Convert('Hadoop Training') == ['Hadoop','Training']"
    ]
  },
  {
    "mbpp_id": 709,
    "problem_statement": "Write a function to count unique keys for each value present in the tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_unique(tuples):\n    # Create an empty dictionary to store tuples grouped by their first elements\n    grouped_tuples = {}\n    \n    # Iterate over the given list of tuples\n    for key, val in tuples:\n        if key not in grouped_tuples:\n            grouped_tuples[key] = []\n        grouped_tuples[key].append(val)\n        \n    # Create another dictionary with counts of each unique first element\n    count_dict = {key: len(grouped_tuples[key]) for key in grouped_tuples}\n    \n    # Sort both dictionaries by the length of their values and create a final string representation\n    sorted_count_dict = dict(sorted(count_dict.items(), key=lambda item: item[1], reverse=True))\n    result_string = \"{\" + \", \".join(f\"{val}: {count}\" for val, count in sorted_count_dict.items()) + \"}\"\n    \n    return result_string",
    "test_cases": [
      "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'",
      "assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'",
      "assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"
    ]
  },
  {
    "mbpp_id": 710,
    "problem_statement": "Write a function to access the initial and last data of the given tuple record.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def front_and_rear(tup_record):\n    return tup_record[:1], tup_record[-1:]",
    "test_cases": [
      "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)",
      "assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)",
      "assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)"
    ]
  },
  {
    "mbpp_id": 711,
    "problem_statement": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def product_Equal(num):\n    # Calculate sum of multiplication of digits at even and odd positions\n    total = num % 10 + (num // 10) % 10\n    \n    # Remove last digit from the number\n    new_num = num // 10\n    \n    # If total equals the last digit, then it satisfies the condition\n    if total == new_num:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert product_Equal(2841) == True",
      "assert product_Equal(1234) == False",
      "assert product_Equal(1212) == False"
    ]
  },
  {
    "mbpp_id": 712,
    "problem_statement": "Write a function to remove duplicates from a list of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unhashable type: 'list'"
    ],
    "generated_code": "def remove_duplicates(lst):\n    return list(set(lst))\n\n# Test cases\nprint(remove_duplicates([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]))  # Output: [[10, 20], [30, 56, 25], [33], [40]]\nprint(remove_duplicates([\"a\", \"b\", \"a\", \"c\", \"c\"]))  # Output: [\"a\", \"b\", \"c\"]\nprint(remove_duplicates([1, 3, 5, 6, 3, 5, 6, 1]))  # Output: [1, 3, 5, 6]",
    "test_cases": [
      "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ",
      "assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]",
      "assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]"
    ]
  },
  {
    "mbpp_id": 713,
    "problem_statement": "Write a function to check if the given tuple contains all valid values or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_valid(tup):\n    for item in tup:\n        if isinstance(item, bool) == False:\n            return False\n    return True",
    "test_cases": [
      "assert check_valid((True, True, True, True) ) == True",
      "assert check_valid((True, False, True, True) ) == False",
      "assert check_valid((True, True, True, True) ) == True"
    ]
  },
  {
    "mbpp_id": 714,
    "problem_statement": "Write a python function to count the number of distinct power of prime factor of given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Fac(n):\n    # Initialize a set to store unique factors\n    fac = set()\n    \n    # Divide n by each prime number starting from 2 until it becomes 1\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            fac.add(i)\n            n //= i\n    \n    if n > 1:\n        fac.add(n)\n    \n    # Return the size of the set which represents the number of distinct factors\n    return len(fac)\n\n# Test cases\nprint(count_Fac(24))  # Expected output: 3\nprint(count_Fac(12))  # Expected output: 2\nprint(count_Fac(4))   # Expected output: 1",
    "test_cases": [
      "assert count_Fac(24) == 3",
      "assert count_Fac(12) == 2",
      "assert count_Fac(4) == 1"
    ]
  },
  {
    "mbpp_id": 715,
    "problem_statement": "Write a function to convert the given string of integers into a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def str_to_tuple(s):\n    # Split the input string by commas and map each element to an integer\n    int_list = map(int, s.split(\", \"))\n    # Convert the list of integers into a tuple\n    return tuple(int_list)\n\n# Test cases\nprint(str_to_tuple(\"1, -5, 4, 6, 7\"))  # Expected output: (1, -5, 4, 6, 7)\nprint(str_to_tuple(\"1, 2, 3, 4, 5\"))   # Expected output: (1, 2, 3, 4, 5)\nprint(str_to_tuple(\"4, 6, 9, 11, 13, 14\"))  # Expected output: (4, 6, 9, 11, 13, 14)",
    "test_cases": [
      "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)",
      "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)",
      "assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)"
    ]
  },
  {
    "mbpp_id": 716,
    "problem_statement": "Write a function to find the perimeter of a rombus.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rombus_perimeter(sidelength):\n    # The perimeter of a rhombus is 4 times the side length\n    return 4 * sidelength",
    "test_cases": [
      "assert rombus_perimeter(10)==40",
      "assert rombus_perimeter(5)==20",
      "assert rombus_perimeter(4)==16"
    ]
  },
  {
    "mbpp_id": 717,
    "problem_statement": "Write a function to calculate the standard deviation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef sd_calc(data):\n    mean = sum(data) / len(data)\n    variance = sum((x - mean)**2 for x in data) / len(data)\n    return math.sqrt(variance)\n\n# Test cases\nprint(sd_calc([4, 2, 5, 8, 6])) # Should print approximately 2.236\nprint(sd_calc([1,2,3,4,5,6,7])) # Should print approximately 2.160\nprint(sd_calc([5,9,10,15,6,4])) # Should print approximately 4.070",
    "test_cases": [
      "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979",
      "assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287",
      "assert sd_calc([5,9,10,15,6,4])==4.070217029430577"
    ]
  },
  {
    "mbpp_id": 718,
    "problem_statement": "Write a function to create a list taking alternate elements from another given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def alternate_elements(lst):\n    return lst[::2]\n\n# Test cases\nprint(alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"]))  # Should print ['red', 'white', 'orange']\nprint(alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2]))  # Should print [2, 3, 0, 8, 4]\nprint(alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Should print [1, 3, 5, 7, 9]",
    "test_cases": [
      "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']",
      "assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]",
      "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"
    ]
  },
  {
    "mbpp_id": 719,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or more b's.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define the pattern to match strings containing 'a' followed by zero or more 'b's\n    pattern = r\"ab*\"\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n\n# Test cases\nprint(text_match(\"ac\"))   # Expected output: 'Found a match!'\nprint(text_match(\"dc\"))   # Expected output: 'Not matched!'\nprint(text_match(\"abba\")) # Expected output: 'Found a match!'",
    "test_cases": [
      "assert text_match(\"ac\")==('Found a match!')",
      "assert text_match(\"dc\")==('Not matched!')",
      "assert text_match(\"abba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 720,
    "problem_statement": "Write a function to add a dictionary to the tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_dict_to_tuple(input_tup, new_data):\n    \"\"\"\n    Adds a dictionary as the last element in the given tuple.\n    \n    Parameters:\n    input_tup (tuple): The original tuple to which a dictionary will be added.\n    new_data (dict): A dictionary that needs to be appended to the end of the tuple.\n    \n    Returns:\n    tuple: A new tuple with the original elements followed by the new dictionary.\n    \"\"\"\n    # Create a copy of the original tuple to avoid modifying it directly\n    modified_tup = list(input_tup)\n    # Append the dictionary at the end of the copied tuple\n    modified_tup.append(new_data)\n    # Convert the list back to a tuple and return\n    return tuple(modified_tup)\n\n# Check function with provided data points\nprint(add_dict_to_tuple((4, 5, 6), {\"MSAM\": 1, \"is\": 2, \"best\": 3}))  # Expected output: (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nprint(add_dict_to_tuple((1, 2, 3), {\"UTS\": 2, \"is\": 3, \"Worst\": 4}))  # Expected output: (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nprint(add_dict_to_tuple((8, 9, 10), {\"POS\": 3, \"is\": 4, \"Okay\": 5}))  # Expected output: (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
    "test_cases": [
      "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})",
      "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})",
      "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
    ]
  },
  {
    "mbpp_id": 721,
    "problem_statement": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maxAverageOfPath(matrix, n):\n    def helper(start_row, end_row):\n        if start_row == end_row:\n            return sum(matrix[start_row]) / len(matrix)\n        \n        mid = (start_row + end_row) // 2\n        left_sum = sum(sum(row) for row in matrix[:mid+1])\n        right_sum = sum(sum(row) for row in matrix[mid+1:])\n        \n        return max(helper(start_row, mid), helper(mid + 1, end_row), left_sum / (end_row - start_row + 1), right_sum / (end_row - start_row + 1))\n    \n    return helper(0, n-1)\n\n# Test cases\nprint(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3)) # Expected output: 5.2\nprint(maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3)) # Expected output: 6.2\nprint(maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3)) # Expected output: 7.2",
    "test_cases": [
      "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2",
      "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2",
      "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "
    ]
  },
  {
    "mbpp_id": 722,
    "problem_statement": "Write a function to filter the height and width of students which are stored in a dictionary.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def filter_data(students, min_height, max_width):\n    # Use list comprehension with if statement inside to filter data based on criteria\n    return {name: (height, width) for name, (height, width) in students.items() if min_height <= height <= max_width}",
    "test_cases": [
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}",
      "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"
    ]
  },
  {
    "mbpp_id": 723,
    "problem_statement": "Write a function to count the same pair in two given lists using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef count_same_pair(list1: List[int], list2: List[int]) -> int:\n    return sum(map(lambda x, y: 1 if x == y else 0, list1, list2))",
    "test_cases": [
      "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
      "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
      "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1"
    ]
  },
  {
    "mbpp_id": 724,
    "problem_statement": "Write a function to calculate the sum of all digits of the base to the specified power.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def power_base_sum(base, exp):\n    \"\"\"\n    Calculate the sum of all digits in base raised to the power of exp.\n    \n    Parameters:\n    base (int): The base number.\n    exp (int): The exponent.\n    \n    Returns:\n    int: The sum of all digits in base^exp.\n    \"\"\"\n    return sum(int(digit) for digit in str(base**exp))",
    "test_cases": [
      "assert power_base_sum(2,100)==115",
      "assert power_base_sum(8,10)==37",
      "assert power_base_sum(8,15)==62"
    ]
  },
  {
    "mbpp_id": 725,
    "problem_statement": "Write a function to extract values between quotation marks of the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef extract_quotation(input_string):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, input_string)\n    return matches\n\n# Test cases\nprint(extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')) # Should print ['A53', 'multi', 'Processor']\nprint(extract_quotation('Cast your \"favorite\" entertainment \"apps\"')) # Should print ['favorite', 'apps']\nprint(extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support')) # Should print ['4k Ultra HD', 'HDR 10']",
    "test_cases": [
      "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']",
      "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
      "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']"
    ]
  },
  {
    "mbpp_id": 726,
    "problem_statement": "Write a function to multiply the adjacent elements of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_elements(tup):\n    result = ()\n    for i in range(len(tup) - 1):\n        result += (tup[i] * tup[i + 1],)\n    return result\n\n# Test cases\nprint(multiply_elements((1, 5, 7, 8, 10))) # Expected output: (5, 35, 56, 80)\nprint(multiply_elements((2, 4, 5, 6, 7)))   # Expected output: (8, 20, 30, 42)\nprint(multiply_elements((12, 13, 14, 9, 15))) # Expected output: (156, 182, 126, 135)",
    "test_cases": [
      "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)",
      "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
      "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)"
    ]
  },
  {
    "mbpp_id": 727,
    "problem_statement": "Write a function to remove all characters except letters and numbers using regex",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef remove_char(input_str):\n    # Remove special characters from the input string\n    cleaned_string = re.sub(r'\\W+', '', input_str)\n    return cleaned_string\n\n# Test cases\nprint(remove_char(\"123abcjw:, .@! eiw\"))  # Expected output: '123abcjweiw'\nprint(remove_char(\"Hello1234:, ! Howare33u\"))  # Expected output: 'Hello1234Howare33u'\nprint(remove_char(\"Cool543Triks@:, Make@987Trips\"))  # Expected output: 'Cool543TriksMake987Trips'",
    "test_cases": [
      "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'",
      "assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'",
      "assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' "
    ]
  },
  {
    "mbpp_id": 728,
    "problem_statement": "Write a function to sum elements in two lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]",
    "test_cases": [
      "assert sum_list([10,20,30],[15,25,35])==[25,45,65]",
      "assert sum_list([1,2,3],[5,6,7])==[6,8,10]",
      "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"
    ]
  },
  {
    "mbpp_id": 729,
    "problem_statement": "Write a function to add two lists using map and lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'add_list' is not defined",
      "Test 2: FAIL - name 'add_list' is not defined",
      "Test 3: FAIL - name 'add_list' is not defined"
    ],
    "generated_code": "from typing import List\nimport operator\n\ndef add_lists(list1: List[int], list2: List[int]) -> List[int]:\n    return list(map(operator.add, list1, list2))",
    "test_cases": [
      "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]",
      "assert add_list([1,2],[3,4])==[4,6]",
      "assert add_list([10,20],[50,70])==[60,90]"
    ]
  },
  {
    "mbpp_id": 730,
    "problem_statement": "Write a function to remove consecutive duplicates of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def consecutive_duplicates(lst):\n    return [lst[i] for i in range(len(lst)) if i == 0 or lst[i] != lst[i - 1]]",
    "test_cases": [
      "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
      "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
      "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"
    ]
  },
  {
    "mbpp_id": 731,
    "problem_statement": "Write a function to find the lateral surface area of a cone.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def lateralsurface_cone(radius, slant_height):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n    \n    Parameters:\n    radius (float): The radius of the base of the cone.\n    slant_height (float): The slant height of the cone.\n    \n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    return 3.1415 * radius * slant_height\n\n# Test cases\nassert abs(lateralsurface_cone(5,12) - 204.20352248333654) < 0.001\nassert abs(lateralsurface_cone(10,15) - 566.3586699569488) < 0.001\nassert abs(lateralsurface_cone(19,17) - 1521.8090132193388) < 0.001",
    "test_cases": [
      "assert lateralsurface_cone(5,12)==204.20352248333654",
      "assert lateralsurface_cone(10,15)==566.3586699569488",
      "assert lateralsurface_cone(19,17)==1521.8090132193388"
    ]
  },
  {
    "mbpp_id": 732,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def replace_specialchar(text):\n    # Replace spaces, commas, and dots with a colon\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n# Test cases\nprint(replace_specialchar('Python language, Programming language.'))  # Expected output: 'Python:language::Programming:language:'\nprint(replace_specialchar('a b c,d e f'))  # Expected output: 'a:b:c:d:e:f'\nprint(replace_specialchar('ram reshma,ram rahim'))  # Expected output: 'ram:reshma:ram:rahim'",
    "test_cases": [
      "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
      "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
      "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
    ]
  },
  {
    "mbpp_id": 733,
    "problem_statement": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_first_occurrence(sorted_array, target):\n    left, right = 0, len(sorted_array) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if sorted_array[mid] == target:\n            # Move the 'left' pointer to check for the next occurrence.\n            left = mid + 1\n        elif sorted_array[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    # If the loop ends without finding the target, it's not present.\n    return left if left <= len(sorted_array) and sorted_array[left] == target else -1",
    "test_cases": [
      "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
      "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
      "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
    ]
  },
  {
    "mbpp_id": 734,
    "problem_statement": "Write a python function to find sum of products of all possible subarrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def sum_of_subarray_prod(arr, k):\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + arr[i]\n    \n    total = 0\n    for i in range(n - k + 1):\n        product = 1\n        start = i\n        end = i + k\n        while start <= end:\n            product *= arr[start]\n            start += 1\n        total += product\n    \n    result = 0\n    for i in range(1, n+1):\n        if prefix_sum[i] == total:\n            result += i - 1\n        elif prefix_sum[n] - prefix_sum[i-1] == total:\n            result += n - i\n    \n    return result\n\n# Test cases\nprint(sum_of_subarray_prod([1,2,3],3))  # Output: 20\nprint(sum_of_subarray_prod([1,2],2))    # Output: 5\nprint(sum_of_subarray_prod([1,2,3,4],4))# Output: 84",
    "test_cases": [
      "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
      "assert sum_Of_Subarray_Prod([1,2],2) == 5",
      "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
    ]
  },
  {
    "mbpp_id": 735,
    "problem_statement": "Write a python function to toggle bits of the number except the first and the last bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def toggle_middle_bits(n):\n    \"\"\"\n    Toggle middle bits of the given integer n, excluding the first and last bits.\n    \n    Parameters:\n    n (int): The integer whose middle bits will be toggled.\n    \n    Returns:\n    int: The modified integer with middle bits toggled.\n    \"\"\"\n    # Shift right twice to get rid of the first and last bits\n    left = n >> 1\n    \n    # Toggle the bits in the remaining part of the number\n    result = left ^ ((left & -left) << 1)\n    \n    return result",
    "test_cases": [
      "assert toggle_middle_bits(9) == 15",
      "assert toggle_middle_bits(10) == 12",
      "assert toggle_middle_bits(11) == 13"
    ]
  },
  {
    "mbpp_id": 736,
    "problem_statement": "Write a function to locate the left insertion point for a specified value in sorted order.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def left_insertion(sorted_list, target_value):\n    low = 0\n    high = len(sorted_list) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if sorted_list[mid] < target_value:\n            low = mid + 1\n        elif sorted_list[mid] > target_value:\n            high = mid - 1\n        else:\n            return mid\n            \n    return low",
    "test_cases": [
      "assert left_insertion([1,2,4,5],6)==4",
      "assert left_insertion([1,2,4,5],3)==2",
      "assert left_insertion([1,2,4,5],7)==4"
    ]
  },
  {
    "mbpp_id": 737,
    "problem_statement": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef check_str(str_):\n    # Regular expression to match strings starting with a vowel\n    pattern = r'^[aeiou]'\n    \n    # Search for the pattern in the input string\n    if re.search(pattern, str_):\n        return 'Valid'\n    else:\n        return 'Invalid'\n\n# Test cases\nprint(check_str(\"annie\"))  # Expected output: Valid\nprint(check_str(\"dawood\"))  # Expected output: Invalid\nprint(check_str(\"Else\"))   # Expected output: Valid",
    "test_cases": [
      "assert check_str(\"annie\") == 'Valid'",
      "assert check_str(\"dawood\") == 'Invalid'",
      "assert check_str(\"Else\") == 'Valid'"
    ]
  },
  {
    "mbpp_id": 738,
    "problem_statement": "Write a function to calculate the geometric sum of n-1.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n    \n    Parameters:\n    - n: An integer representing the number of terms in the series.\n    \n    Returns:\n    The geometric sum as a float.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # Recursive call to calculate the next term and add it to the previous term\n        return geometric_sum(n - 1) + (1 / (2 ** (n - 1)))\n\n# Test cases\nprint(geometric_sum(7))  # Expected output: 1.9921875\nprint(geometric_sum(4))  # Expected output: 1.9375\nprint(geometric_sum(8))  # Expected output: 1.99609375",
    "test_cases": [
      "assert geometric_sum(7) == 1.9921875",
      "assert geometric_sum(4) == 1.9375",
      "assert geometric_sum(8) == 1.99609375"
    ]
  },
  {
    "mbpp_id": 739,
    "problem_statement": "Write a python function to find the index of smallest triangular number with n digits.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Index(n):\n    count = 0\n    num = 1\n    \n    while True:\n        # Calculate the nth triangular number\n        tri_num = num * (num + 1) // 2\n        \n        # Increment the counter for each triangular number found\n        count += 1\n        \n        # If the current triangular number has 'n' digits, return its position\n        if len(str(tri_num)) == n:\n            return count\n        \n        # Move on to the next triangular number\n        num += 1",
    "test_cases": [
      "assert find_Index(2) == 4",
      "assert find_Index(3) == 14",
      "assert find_Index(4) == 45"
    ]
  },
  {
    "mbpp_id": 740,
    "problem_statement": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_dict(tup):\n    dict = {}\n    for i in range(0, len(tup), 2):\n        if i + 1 < len(tup):  # Ensure we don't try to pair an odd number of items\n            dict[tup[i]] = tup[i+1]\n    return dict\n\n# Test cases\nprint(tuple_to_dict((1, 5, 7, 10, 13, 5)))  # Expected output: {1: 5, 7: 10, 13: 5}\nprint(tuple_to_dict((1, 2, 3, 4, 5, 6)))   # Expected output: {1: 2, 3: 4, 5: 6}\nprint(tuple_to_dict((7, 8, 9, 10, 11, 12)))# Expected output: {7: 8, 9: 10, 11: 12}",
    "test_cases": [
      "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
      "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
      "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"
    ]
  },
  {
    "mbpp_id": 741,
    "problem_statement": "Write a python function to check whether all the characters are same or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Characters_Same(input_str):\n    # Check if input string is empty\n    if len(input_str) == 0:\n        return True\n    \n    # Get the first character of the string and convert it to lowercase for comparison\n    first_char = input_str[0].lower()\n    \n    # Compare each character in the string with the first character\n    for char in input_str:\n        if char.lower() != first_char:\n            return False\n            \n    return True",
    "test_cases": [
      "assert all_Characters_Same(\"python\") == False",
      "assert all_Characters_Same(\"aaa\") == True",
      "assert all_Characters_Same(\"data\") == False"
    ]
  },
  {
    "mbpp_id": 742,
    "problem_statement": "Write a function to caluclate the area of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'sidelen' is not defined. Did you mean: 'sidelength'?"
    ],
    "generated_code": "import math\n\ndef area_tetrahedron(sidelength):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given one side length.\n    \n    Parameters:\n        sidelength (float): The length of one edge of the tetrahedron.\n        \n    Returns:\n        float: The total surface area of the tetrahedron.\n    \"\"\"\n    # Area of one face = (sqrt(3) / 4) * side^2\n    face_area = (math.sqrt(3) / 4) * sidelen^2\n    # Surface area of a tetrahedron = 4 * face_area\n    return 4 * face_area\n\n# Test Cases\nprint(area_tetrahedron(3)) # Expected output: 15.588457268119894\nprint(area_tetrahedron(20)) # Expected output: 692.8203230275509\nprint(area_tetrahedron(10)) # Expected output: 173.20508075688772",
    "test_cases": [
      "assert area_tetrahedron(3)==15.588457268119894",
      "assert area_tetrahedron(20)==692.8203230275509",
      "assert area_tetrahedron(10)==173.20508075688772"
    ]
  },
  {
    "mbpp_id": 743,
    "problem_statement": "Write a function to rotate a given list by specified number of items to the right direction.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def rotate_right(arr, n, k):\n    \"\"\"\n    Rotate the array 'arr' to the right by 'k' positions.\n    \n    Parameters:\n    arr (list): The original array to be rotated.\n    n (int): Number of elements in the array.\n    k (int): The rotation count.\n    \n    Returns:\n    list: The rotated array.\n    \"\"\"\n    return [arr[(i - 1) % n + k] for i in range(1, n + 1)]\n\n# Check function with provided data points\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4))  # Expected output: [8, 9, 10, 1, 2, 3, 4, 5, 6]\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2))  # Expected output: [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))  # Expected output: [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
    "test_cases": [
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]",
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
      "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
    ]
  },
  {
    "mbpp_id": 744,
    "problem_statement": "Write a function to check if the given tuple has any none value or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_none(tuple_val):\n    for item in tuple_val:\n        if item is None:\n            return True\n    return False",
    "test_cases": [
      "assert check_none((10, 4, 5, 6, None)) == True",
      "assert check_none((7, 8, 9, 11, 14)) == False",
      "assert check_none((1, 2, 3, 4, None)) == True"
    ]
  },
  {
    "mbpp_id": 745,
    "problem_statement": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from itertools import count\n\ndef divisible_by_digits(start, end):\n    def is_divisible(num):\n        for d in str(num):\n            if int(d) == 0 or num % int(d) != 0:\n                return False\n        return True\n    \n    result = [i for i in range(start, end + 1) if is_divisible(i)]\n    return result",
    "test_cases": [
      "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
      "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
      "assert divisible_by_digits(20,25)==[22, 24]"
    ]
  },
  {
    "mbpp_id": 746,
    "problem_statement": "Write a function to find area of a sector.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef sector_area(radius, angle_in_degrees):\n    \"\"\"\n    Calculates the area of a sector given its radius and central angle in degrees.\n    \n    Parameters:\n    - radius: The radius of the circle.\n    - angle_in_degrees: The central angle of the sector in degrees.\n    \n    Returns:\n    - The area of the sector as a float. If the angle is not between 0 and 360,\n      returns None instead.\n    \"\"\"\n    if angle_in_degrees < 0 or angle_in_degrees > 360:\n        return None\n    else:\n        return 0.25 * math.pi * radius ** 2 * (angle_in_degrees / 360)\n\n# Check function with provided data points\nprint(sector_area(4, 45))  # Expected output: approximately 6.2857\nprint(sector_area(9, 45))  # Expected output: approximately 31.8214\nprint(sector_area(9, 360))  # Expected output: None",
    "test_cases": [
      "assert sector_area(4,45)==6.285714285714286",
      "assert sector_area(9,45)==31.82142857142857",
      "assert sector_area(9,360)==None"
    ]
  },
  {
    "mbpp_id": 747,
    "problem_statement": "Write a function to find the longest common subsequence for the given three string sequence.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lcs_of_three(str1, str2, str3, m, n, o):\n    # Initialize DP table with zeros\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Fill dp table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # Reconstruct LCS from dp table\n    index = dp[m][n]\n    lcs = [''] * (index + 1)\n    lcs[index] = ''\n    i, j = m, n\n    \n    while i > 0 and j > 0:\n        if str1[i - 1] == str2[j - 1]:\n            lcs[index - 1] = str1[i - 1]\n            i -= 1\n            j -= 1\n            index -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n            \n    return ''.join(lcs)\n\n# Test cases\nprint(lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5))  # Output: 2\nprint(lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13))  # Output: 5\nprint(lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5))  # Output: 3",
    "test_cases": [
      "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2",
      "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ",
      "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"
    ]
  },
  {
    "mbpp_id": 748,
    "problem_statement": "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'capital_words_spaces' is not defined",
      "Test 2: FAIL - name 'capital_words_spaces' is not defined",
      "Test 3: FAIL - name 'capital_words_spaces' is not defined"
    ],
    "generated_code": "import re\n\ndef capitalize_words_with_space(s):\n    # Use regex to find all words that start with a capital letter and replace them with themselves followed by a space\n    result = re.sub(r'\\b[A-Z]\\w*', lambda match: ' ' + match.group(0), s)\n    return result.strip()  # Remove leading/trailing spaces if any\n\n# Test cases\nprint(capitalize_words_with_space(\"Python\"))  # Expected output: \"Python\"\nprint(capitalize_words_with_space(\"PythonProgrammingExamples\"))  # Expected output: \"Python Programming Examples\"\nprint(capitalize_words_with_space(\"GetReadyToBeCodingFreak\"))  # Expected output: \"Get Ready To Be Coding Freak\"",
    "test_cases": [
      "assert capital_words_spaces(\"Python\") == 'Python'",
      "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
      "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
    ]
  },
  {
    "mbpp_id": 749,
    "problem_statement": "Write a function to sort a given list of strings of numbers numerically.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_numeric_strings(lst):\n    return sorted([int(i) for i in lst])",
    "test_cases": [
      "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
      "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
      "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
    ]
  },
  {
    "mbpp_id": 750,
    "problem_statement": "Write a function to add the given tuple to the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def add_tuple(lst, t):\n    lst.extend(t)\n    return lst",
    "test_cases": [
      "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
      "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]",
      "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"
    ]
  },
  {
    "mbpp_id": 751,
    "problem_statement": "Write a function to check if the given array represents min heap or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_min_heap(arr, index=0):\n    n = len(arr)\n    if n <= 1:\n        return True\n    \n    for i in range(n):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if the current node is smaller than its children\n        if (left_child_index < n and arr[i] > arr[left_child_index]):\n            return False\n        \n        if (right_child_index < n and arr[i] > arr[right_child_index]):\n            return False\n    \n    return True",
    "test_cases": [
      "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True",
      "assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True",
      "assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"
    ]
  },
  {
    "mbpp_id": 752,
    "problem_statement": "Write a function to find the nth jacobsthal number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def jacobsthal_num(n):\n    \"\"\"\n    Returns the nth Jacobsthal number.\n    \n    Parameters:\n    n (int): The position in the sequence of Jacobsthal numbers.\n    \n    Returns:\n    int: The nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + 2*b\n        return b\n\n# Check function with provided data points\nassert jacobsthal_num(5) == 11, \"Test case 1 failed\"\nassert jacobsthal_num(2) == 1, \"Test case 2 failed\"\nassert jacobsthal_num(4) == 5, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert jacobsthal_num(5) == 11",
      "assert jacobsthal_num(2) == 1",
      "assert jacobsthal_num(4) == 5"
    ]
  },
  {
    "mbpp_id": 753,
    "problem_statement": "Write a function to find minimum k records from tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List, Tuple\nimport heapq\n\ndef min_k(tuples: List[Tuple[str, int]], k: int) -> List[Tuple[str, int]]:\n    # Using heap data structure to efficiently get the k smallest elements\n    return heapq.nsmallest(k, tuples)",
    "test_cases": [
      "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
      "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
      "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
    ]
  },
  {
    "mbpp_id": 754,
    "problem_statement": "Write a function to find common index elements from three lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'set' object is not subscriptable",
      "Test 2: FAIL - 'set' object is not subscriptable",
      "Test 3: FAIL - 'set' object is not subscriptable"
    ],
    "generated_code": "def extract_index_list(list1, list2, list3):\n    # Find the intersection of the sets formed by converting lists into sets for easy comparison\n    common_elements = set(list1).intersection(set(list2), set(list3))\n    return [index for index in range(len(common_elements)) if common_elements[index] == list1.index(common_elements[index]) and common_elements[index] == list2.index(common_elements[index]) and common_elements[index] == list3.index(common_elements[index])]",
    "test_cases": [
      "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
      "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
      "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"
    ]
  },
  {
    "mbpp_id": 755,
    "problem_statement": "Write a function to find the second smallest number in a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def second_smallest(nums):\n    if len(set(nums)) < 2:\n        return None\n    \n    nums = sorted(set(nums))\n    \n    # Check if there is exactly two unique numbers in the set.\n    if len(nums) == 2:\n        return nums[1]\n    else:\n        return min(nums)",
    "test_cases": [
      "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
      "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
      "assert second_smallest([2,2])==None"
    ]
  },
  {
    "mbpp_id": 756,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or one 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab?'  # 'a' followed by zero or one 'b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the function\nprint(text_match_zero_one(\"ac\"))  # Expected output: Found a match!\nprint(text_match_zero_one(\"dc\"))  # Expected output: Not matched!\nprint(text_match_zero_one(\"abbbba\"))  # Expected output: Found a match!",
    "test_cases": [
      "assert text_match_zero_one(\"ac\")==('Found a match!')",
      "assert text_match_zero_one(\"dc\")==('Not matched!')",
      "assert text_match_zero_one(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 757,
    "problem_statement": "Write a function to count the pairs of reverse strings in the given string list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef count_reverse_pairs(lst):\n    \"\"\"\n    Counts the number of unique reverse-pair strings in the provided list.\n    \n    Parameters:\n        lst (list): A list of lowercase strings.\n        \n    Returns:\n        int: The count of unique reverse-pair strings.\n    \"\"\"\n    # Create a set for storing unique reversed pairs as keys and their counts as values\n    pair_counts = Counter()\n    n = len(lst)\n    result = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i][::-1] == lst[j]:\n                # Increment result by one if the key is not already present in the counter\n                result += 1\n                pair_counts[lst[i]] = 1\n                \n    return result",
    "test_cases": [
      "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'",
      "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'",
      "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' "
    ]
  },
  {
    "mbpp_id": 758,
    "problem_statement": "Write a function to count number of unique lists within a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "def unique_sublists(lst):\n    from collections import defaultdict\n    sub_lists = set(tuple(sub) for sublist in lst for sub in sublist)\n    return {tuple(sorted(sub)): lst.count(list(set(sub))) for sub in sub_lists}\n\n# Test cases\nprint(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\nprint(unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]))\n\n# Expected outputs\n# {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n# {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n# {(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
    "test_cases": [
      "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
      "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
      "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}"
    ]
  },
  {
    "mbpp_id": 759,
    "problem_statement": "Write a function to check a decimal with a precision of 2.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef is_decimal(decimal_str):\n    \"\"\"\n    Check if the provided string represents a valid decimal number with exactly two digits after the decimal point.\n    \n    Parameters:\n    - decimal_str (str): The string representation of the decimal number to check.\n    \n    Returns:\n    - bool: True if the string matches the pattern of a decimal with two decimal places, False otherwise.\n    \"\"\"\n    # Regular expression to match a valid decimal with exactly two decimal places\n    regex_pattern = r'^-?\\d+(\\.\\d{2})?$'\n    return bool(re.match(regex_pattern, decimal_str))\n\n# Test cases\nprint(is_decimal('123.11'))   # Expected output: True\nprint(is_decimal('e666.86')) # Expected output: False\nprint(is_decimal('3.124587')) # Expected output: False",
    "test_cases": [
      "assert is_decimal('123.11')==True",
      "assert is_decimal('e666.86')==False",
      "assert is_decimal('3.124587')==False"
    ]
  },
  {
    "mbpp_id": 760,
    "problem_statement": "Write a python function to check whether an array contains only one distinct element or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def unique_Element(arr, n):\n    count = {}\n    \n    # Count occurrences of each element in the array\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    \n    # Check if there is exactly one distinct element\n    for j in range(n):\n        if count[arr[j]] == 1:\n            return 'YES'\n    return 'NO'",
    "test_cases": [
      "assert unique_Element([1,1,1],3) == 'YES'",
      "assert unique_Element([1,2,1,2],4) == 'NO'",
      "assert unique_Element([1,2,3,4,5],5) == 'NO'"
    ]
  },
  {
    "mbpp_id": 761,
    "problem_statement": "Write a function to caluclate arc length of an angle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef arc_length(radius, angle_in_degrees):\n    if angle_in_degrees == 360:\n        return radius * 2 * math.pi\n    elif angle_in_degrees % 360 != 0:\n        return None\n    else:\n        return radius * 2 * math.acos(math.sin(angle_in_degrees/360) * math.sin(180-angle_in_degrees/360)) / math.cos(angle_in_degrees/360)",
    "test_cases": [
      "assert arc_length(9,45)==3.5357142857142856",
      "assert arc_length(9,480)==None",
      "assert arc_length(5,270)==11.785714285714285"
    ]
  },
  {
    "mbpp_id": 762,
    "problem_statement": "Write a function to check whether the given month number contains 30 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_monthnumber_number' is not defined",
      "Test 2: FAIL - name 'check_monthnumber_number' is not defined",
      "Test 3: FAIL - name 'check_monthnumber_number' is not defined"
    ],
    "generated_code": "def check_monthnumber(month_number):\n    # Check if the month number is between 4 and 9 inclusive\n    return month_number in range(4, 10)",
    "test_cases": [
      "assert check_monthnumber_number(6)==True",
      "assert check_monthnumber_number(2)==False",
      "assert check_monthnumber_number(12)==False"
    ]
  },
  {
    "mbpp_id": 763,
    "problem_statement": "Write a python function to find the minimum difference between any two elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 2: FAIL - 'tuple' object has no attribute 'sort'",
      "Test 3: FAIL - 'tuple' object has no attribute 'sort'"
    ],
    "generated_code": "def find_Min_Diff(arr, target):\n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n                \n    return min_diff\n\n# Test cases\nprint(find_Min_Diff([1,5,3,19,18,25], 6))  # Output should be 1\nprint(find_Min_Diff([4,3,2,6], 4))         # Output should be 1\nprint(find_Min_Diff([30,5,20,9], 4))       # Output should be 4",
    "test_cases": [
      "assert find_Min_Diff((1,5,3,19,18,25),6) == 1",
      "assert find_Min_Diff((4,3,2,6),4) == 1",
      "assert find_Min_Diff((30,5,20,9),4) == 4"
    ]
  },
  {
    "mbpp_id": 764,
    "problem_statement": "Write a python function to count numeric values in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def number_ctr(s):\n    # Initialize counter for numeric digits\n    num_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is a digit\n        if char.isdigit():\n            num_count += 1\n            \n    return num_count",
    "test_cases": [
      "assert number_ctr('program2bedone') == 1",
      "assert number_ctr('3wonders') ==1",
      "assert number_ctr('123') == 3"
    ]
  },
  {
    "mbpp_id": 765,
    "problem_statement": "Write a function to find nth polite number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_polite(nth):\n    # Initialize variables for calculation\n    i = n = count = 0\n    while True:\n        if not n % ith(i + 1):  # Check if nth polite number has nth digit\n            return nth - 1\n        i += 1\n        n += ith(i)\n        \n# Helper function to calculate nth polite number using a formula\ndef ith(k):\n    \"\"\"Calculate k-th polite number.\"\"\"\n    if k == 1:\n        return 1\n    elif k == 2:\n        return 3\n    else:\n        sum_of_powers = (k * ((k ** 2) + 1)) // 2\n        return 2 ** sum_of_powers\n\n# Test cases\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert is_polite(7) == 11",
      "assert is_polite(4) == 7",
      "assert is_polite(9) == 13"
    ]
  },
  {
    "mbpp_id": 766,
    "problem_statement": "Write a function to iterate over all pairs of consecutive items in a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def pair_wise(lst):\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i + 1]))\n    return result",
    "test_cases": [
      "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
      "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
      "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
    ]
  },
  {
    "mbpp_id": 767,
    "problem_statement": "Write a python function to count the number of pairs whose sum is equal to ‘sum’.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_Pairs_Count(arr, target_sum, max_value):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count\n\n# Test cases\nprint(get_Pairs_Count([1,1,1,1],4,2))  # Output: 6\nprint(get_Pairs_Count([1,5,7,-1,5],5,6))  # Output: 3\nprint(get_Pairs_Count([1,-2,3],3,1))  # Output: 1",
    "test_cases": [
      "assert get_Pairs_Count([1,1,1,1],4,2) == 6",
      "assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3",
      "assert get_Pairs_Count([1,-2,3],3,1) == 1"
    ]
  },
  {
    "mbpp_id": 768,
    "problem_statement": "Write a python function to check for odd parity of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Odd_Parity(n):\n    # Calculate the XOR of all digits in the number\n    xor_sum = 0\n    while n > 0:\n        digit = n % 10\n        xor_sum ^= digit\n        n //= 10\n    \n    # If the result is 0, it has even parity; otherwise, it has odd parity\n    return xor_sum == 0",
    "test_cases": [
      "assert check_Odd_Parity(13) == True",
      "assert check_Odd_Parity(21) == True",
      "assert check_Odd_Parity(18) == False"
    ]
  },
  {
    "mbpp_id": 769,
    "problem_statement": "Write a python function to get the difference between two lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Diff' is not defined",
      "Test 2: FAIL - name 'Diff' is not defined",
      "Test 3: FAIL - name 'Diff' is not defined"
    ],
    "generated_code": "def diff_list(list1, list2):\n    # Remove duplicates from both lists and sort them\n    unique_list1 = sorted(set(list1))\n    unique_list2 = sorted(set(list2))\n    \n    # Use set comprehension to find elements in one list but not in the other\n    result = [x for x in unique_list1 if x not in unique_list2] + \\\n             [y for y in unique_list2 if y not in unique_list1]\n    \n    return result\n\n# Test cases\nprint(diff_list([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]))  # Expected output: [10, 20, 30, 15]\nprint(diff_list([1,2,3,4,5], [6,7,1]))                       # Expected output: [2,3,4,5,6,7]\nprint(diff_list([1,2,3], [6,7,1]))                            # Expected output: [2,3,6,7]",
    "test_cases": [
      "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
      "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
      "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
    ]
  },
  {
    "mbpp_id": 770,
    "problem_statement": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test case 1: 82",
      "Test case 2: 707",
      "Test case 3: 3108",
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    \"\"\"\n    This function calculates the sum of the fourth powers of the first n odd natural numbers.\n    \n    Parameters:\n    n (int): The number of initial odd natural numbers to consider.\n    \n    Returns:\n    int: The sum of the fourth powers of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n + 1):\n        # Calculate the i-th odd natural number\n        odd_number = 2 * i - 1\n        \n        # Add the fourth power of the current odd number to the total sum\n        total_sum += pow(odd_number, 4)\n        \n    return total_sum\n\n# Test cases\nprint(\"Test case 1:\", odd_Num_Sum(2))   # Expected output: 82\nprint(\"Test case 2:\", odd_Num_Sum(3))   # Expected output: 707\nprint(\"Test case 3:\", odd_Num_Sum(4))   # Expected output: 3108",
    "test_cases": [
      "assert odd_Num_Sum(2) == 82",
      "assert odd_Num_Sum(3) == 707",
      "assert odd_Num_Sum(4) == 3108"
    ]
  },
  {
    "mbpp_id": 771,
    "problem_statement": "Write a function to check if the given expression is balanced or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_expression(expression):\n    stack = []\n    pairs = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys() and stack and stack[-1] == pairs[char]:\n            stack.pop()\n        else:\n            return False\n    \n    return len(stack) == 0",
    "test_cases": [
      "assert check_expression(\"{()}[{}]\") == True",
      "assert check_expression(\"{()}[{]\") == False",
      "assert check_expression(\"{()}[{}][]({})\") == True"
    ]
  },
  {
    "mbpp_id": 772,
    "problem_statement": "Write a function to remove all the words with k length in the given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_length(s, k):\n    # Split the string into words based on spaces and filter out words with length equal to k\n    return ' '.join([word for word in s.split() if len(word) != k])",
    "test_cases": [
      "assert remove_length('The person is most value tet', 3) == 'person is most value'",
      "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'",
      "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"
    ]
  },
  {
    "mbpp_id": 773,
    "problem_statement": "Write a function to find the occurrence and position of the substrings within a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def occurance_substring(main_string, substring):\n    \"\"\"\n    Find the occurrences and positions of each substring within the main string.\n    \n    Parameters:\n        main_string (str): The string in which to search for substrings.\n        substring (str): The substring to find within the main string.\n        \n    Returns:\n        list of tuples: Each tuple contains the index start, end index, and substring found within the main string.\n    \"\"\"\n    return [(i, i+len(substring)-1) for i in range(len(main_string)) if main_string.startswith(substring, i)]\n\n# Test cases\nprint(occurance_substring('python programming, python language','python')) # [('python', 0, 6)]\nprint(occurance_substring('python programming,programming language','programming')) # [('programming', 7, 18)]\nprint(occurance_substring('python programming,programming language','language')) # [('language', 31, 39)]",
    "test_cases": [
      "assert occurance_substring('python programming, python language','python')==('python', 0, 6)",
      "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)",
      "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"
    ]
  },
  {
    "mbpp_id": 774,
    "problem_statement": "Write a function to check if the string is a valid email address or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_email(email):\n    # Regular expression for validating an Email\n    regex = r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    # Compile the ReGex\n    pattern = re.compile(regex)\n    # If the string is empty\n    if email == \"\":\n        return \"Invalid Email\"\n    else:\n        if pattern.match(email):\n            return \"Valid Email\"\n        else:\n            return \"Invalid Email\"\n\n# Test Cases\nprint(check_email(\"ankitrai326@gmail.com\"))  # Expected output: Valid Email\nprint(check_email(\"my.ownsite@ourearth.org\"))  # Expected output: Valid Email\nprint(check_email(\"ankitaoie326.com\"))  # Expected output: Invalid Email",
    "test_cases": [
      "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'",
      "assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'",
      "assert check_email(\"ankitaoie326.com\") == 'Invalid Email'"
    ]
  },
  {
    "mbpp_id": 775,
    "problem_statement": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "def is_odd_positions_have_odds(numbers):\n    \"\"\"\n    Check if all elements at odd indices in the list have an odd number of occurrences.\n    \n    Parameters:\n    numbers (list): The input list containing integers.\n    \n    Returns:\n    bool: True if all elements at odd indices have odd occurrences, otherwise False.\n    \"\"\"\n    for i in range(1, len(numbers), 2):\n        count = sum(1 for num in numbers[i::2] if num % 2 != 0)\n        if count % 2 == 0:\n            return False\n    return True\n\n# Test cases to verify the correctness of the function\nassert is_odd_positions_have_odds([2,1,4,3,6,7,6,3]) == True, \"Test case 1 failed\"\nassert is_odd_positions_have_odds([4,1,2]) == True, \"Test case 2 failed\"\nassert is_odd_positions_have_odds([1,2,3]) == False, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert odd_position([2,1,4,3,6,7,6,3]) == True",
      "assert odd_position([4,1,2]) == True",
      "assert odd_position([1,2,3]) == False"
    ]
  },
  {
    "mbpp_id": 776,
    "problem_statement": "Write a function to count those characters which have vowels as their neighbors in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_vowels(s):\n    total = 0\n    for i in range(1, len(s) - 1):\n        if s[i] in 'aeiouAEIOU':\n            total += s.count('*', i)\n    return total",
    "test_cases": [
      "assert count_vowels('bestinstareels') == 7",
      "assert count_vowels('partofthejourneyistheend') == 12",
      "assert count_vowels('amazonprime') == 5"
    ]
  },
  {
    "mbpp_id": 777,
    "problem_statement": "Write a python function to find the sum of non-repeated elements in a given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Sum(arr, target_sum):\n    total_sum = sum(set(arr))  # Sum of all unique elements\n    diff_sum = sum(arr) - total_sum  # Difference between original sum and unique sum\n    \n    if abs(diff_sum) > target_sum:\n        return None\n    else:\n        return diff_sum",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21",
      "assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71",
      "assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78"
    ]
  },
  {
    "mbpp_id": 778,
    "problem_statement": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def pack_consecutive_duplicates(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + 1 < len(lst) and lst[i] == lst[i + 1]:\n            i += 1\n            count += 1\n        if count > 1:\n            result.append(list(range(i, i + count)))\n        else:\n            result.append([lst[i]])\n        i += 1\n    return result\n\n# Test cases\nprint(pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])) # [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nprint(pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])) # [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nprint(pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])) # [['a', 'a'], ['b'], ['c'], ['d', 'd']]",
    "test_cases": [
      "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
      "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]",
      "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
    ]
  },
  {
    "mbpp_id": 779,
    "problem_statement": "Write a function to count the number of unique lists within a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\nfrom typing import List, Tuple\n\ndef unique_sublists(lst: List[List]) -> defaultdict:\n    \"\"\"\n    Counts the number of unique lists within a given list.\n    \n    Args:\n    lst (List[List]): A list containing sub-lists.\n    \n    Returns:\n    defaultdict: A dictionary where keys are tuples representing unique sub-lists and values are counts of their occurrences.\n    \"\"\"\n    result = defaultdict(int)\n    for sublist in lst:\n        # Sort each sublist to ensure order doesn't matter when comparing tuples\n        sorted_sublist = tuple(sorted(sublist))\n        result[sorted_sublist] += 1\n    return dict(result)\n\n# Test cases\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]]) == {(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
    "test_cases": [
      "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
      "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
      "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"
    ]
  },
  {
    "mbpp_id": 780,
    "problem_statement": "Write a function to find the combinations of sums with tuples in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for +: 'int' and 'tuple'",
      "Test 2: FAIL - unsupported operand type(s) for +: 'int' and 'tuple'",
      "Test 3: FAIL - unsupported operand type(s) for +: 'int' and 'tuple'"
    ],
    "generated_code": "from typing import List, Tuple\n\ndef find_combinations(tuple_list: List[Tuple[int]]) -> List[Tuple[int]]:\n    def backtrack(start, path):\n        if start == len(tuple_list) - 1:\n            result.append(path[:])\n            return\n        \n        for i in range(start + 1, len(tuple_list)):\n            if sum(tuple_list[start:i+1]) < sum(tuple_list[i+1:]):\n                backtrack(i, path + [sum(tuple_list[start:i+1])])\n\n    results = []\n    backtrack(0, [])\n    return results",
    "test_cases": [
      "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
      "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]",
      "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
    ]
  },
  {
    "mbpp_id": 781,
    "problem_statement": "Write a python function to check whether the count of divisors is even or odd.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Divisors(n):\n    \"\"\"\n    This function takes an integer n and returns 'Even' if the number of divisors of n is even,\n    otherwise it returns 'Odd'.\n    \n    :param n: Integer to find the divisor count for.\n    :return: String indicating if the divisor count is Even or Odd.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            # If factors are equal, they should be counted once\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return 'Even' if count % 2 == 0 else 'Odd'\n\n# Test Cases\nprint(count_Divisors(10))  # Output: Even\nprint(count_Divisors(100)) # Output: Odd\nprint(count_Divisors(125)) # Output: Even",
    "test_cases": [
      "assert count_Divisors(10) == \"Even\"",
      "assert count_Divisors(100) == \"Odd\"",
      "assert count_Divisors(125) == \"Even\""
    ]
  },
  {
    "mbpp_id": 782,
    "problem_statement": "Write a python function to find the sum of all odd length subarrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef Odd_Length_Sum(arr: List[int]) -> int:\n    total_sum = 0\n    for start in range(len(arr)):\n        current_sum = 0\n        for end in range(start, len(arr), 2):  # Increment by 2 to consider only odd lengths\n            current_sum += arr[end]\n            if (start + end) % 2 == 0 and start < len(arr) - 1: \n                break\n            elif (end + 1 < len(arr)) and ((start + end + 1) % 2 != 0):\n                continue\n            else:\n                total_sum += current_sum\n    return total_sum",
    "test_cases": [
      "assert Odd_Length_Sum([1,2,4]) == 14",
      "assert Odd_Length_Sum([1,2,1,2]) == 15",
      "assert Odd_Length_Sum([1,7]) == 8"
    ]
  },
  {
    "mbpp_id": 783,
    "problem_statement": "Write a function to convert rgb color to hsv color.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ZeroDivisionError: float division by zero"
    ],
    "generated_code": "def rgb_to_hsv(r, g, b):\n    # Convert RGB to HSV\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    \n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    \n    if max_color == 0:\n        return (0, 0.0, 0.0)  # Avoid division by zero for saturated value\n    \n    h = 0\n    if max_color == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_color == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    else:\n        h = (60 * ((r - g) / delta) + 240) % 360\n    \n    s = 0 if delta == 0 else (delta / max_color) * 100\n    v = max_color * 100\n    \n    return (h, s, v)\n\n# Test cases\nprint(rgb_to_hsv(255, 255, 255))  # Expected output: (0.0, 100.0, 100.0)\nprint(rgb_to_hsv(0, 215, 0))     # Expected output: (120.0, 100.0, 84.31372549019608)\nprint(rgb_to_hsv(10, 215, 110))  # Expected output: (149.26829268292684, 95.34883720930233, 84.31372549019608)",
    "test_cases": [
      "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)",
      "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)",
      "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"
    ]
  },
  {
    "mbpp_id": 784,
    "problem_statement": "Write a function to find the product of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def mul_even_odd(lst):\n    # Initialize product to 1 for odd numbers multiplication\n    product = 1\n    \n    # Flag to check if there is at least one even number in the list\n    has_even = False\n    \n    # Iterate through each number in the list\n    for num in lst:\n        if num % 2 == 0:  # Check if it's an even number\n            has_even = True  # Mark as true because we found at least one even number\n            \n            # If current number is greater than 1, multiply with previous even number\n            if product > 1:\n                product *= num\n                \n    return product if has_even else 0  # Return product if there was at least one even number; otherwise, return 0",
    "test_cases": [
      "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert mul_even_odd([1,5,7,9,10])==10"
    ]
  },
  {
    "mbpp_id": 785,
    "problem_statement": "Write a function to convert tuple string to integer tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_str_int(tuple_str):\n    # Split the input string into a list of integers\n    int_list = [int(x) for x in tuple_str[1:-1].split(',')]\n    # Convert the list back to a tuple and return it\n    return tuple(int_list)\n\n# Test cases\nprint(tuple_str_int(\"(7, 8, 9)\"))   # Expected output: (7, 8, 9)\nprint(tuple_str_int(\"(1, 2, 3)\"))   # Expected output: (1, 2, 3)\nprint(tuple_str_int(\"(4, 5, 6)\"))   # Expected output: (4, 5, 6)",
    "test_cases": [
      "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)",
      "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
      "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)"
    ]
  },
  {
    "mbpp_id": 786,
    "problem_statement": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def right_insertion(sorted_list, target_value):\n    left, right = 0, len(sorted_list) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if sorted_list[mid] == target_value:\n            return mid\n        elif sorted_list[mid] < target_value:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    # In case the element is greater than all elements\n    return left\n\n# Test cases\nprint(right_insertion([1,2,4,5], 6))   # Output should be 4\nprint(right_insertion([1,2,4,5], 3))   # Output should be 2\nprint(right_insertion([1,2,4,5], 7))   # Output should be 4",
    "test_cases": [
      "assert right_insertion([1,2,4,5],6)==4",
      "assert right_insertion([1,2,4,5],3)==2",
      "assert right_insertion([1,2,4,5],7)==4"
    ]
  },
  {
    "mbpp_id": 787,
    "problem_statement": "Write a function that matches a string that has an a followed by three 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def text_match_three(text):\n    if text.startswith('a') and len(text) >= 4 and text[1] == 'b' and text[2] == 'b' and text[3] == 'b':\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Test cases to verify the correctness of the solution\nprint(text_match_three(\"ac\"))  # Expected output: 'Not matched!'\nprint(text_match_three(\"dc\"))  # Expected output: 'Not matched!'\nprint(text_match_three(\"abbbba\"))  # Expected output: 'Found a match!'",
    "test_cases": [
      "assert text_match_three(\"ac\")==('Not matched!')",
      "assert text_match_three(\"dc\")==('Not matched!')",
      "assert text_match_three(\"abbbba\")==('Found a match!')"
    ]
  },
  {
    "mbpp_id": 788,
    "problem_statement": "Write a function to create a new tuple from the given string and list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def new_tuple(a_list, string):\n    # Split the string into a list of words and add it to the end of the list\n    split_string = string.split()\n    # Create a new tuple with the elements of the original list followed by the list of words from the string\n    result_tuple = tuple(a_list) + tuple(split_string)\n    # Return the new tuple\n    return result_tuple",
    "test_cases": [
      "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')",
      "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')",
      "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"
    ]
  },
  {
    "mbpp_id": 789,
    "problem_statement": "Write a function to calculate the perimeter of a regular polygon.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def perimeter_polygon(sides, length):\n    return sides * length",
    "test_cases": [
      "assert perimeter_polygon(4,20)==80",
      "assert perimeter_polygon(10,15)==150",
      "assert perimeter_polygon(9,7)==63"
    ]
  },
  {
    "mbpp_id": 790,
    "problem_statement": "Write a python function to check whether every even index contains even numbers of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'even_position' is not defined",
      "Test 2: FAIL - name 'even_position' is not defined",
      "Test 3: FAIL - name 'even_position' is not defined"
    ],
    "generated_code": "def is_even_at_even_indices(nums):\n    # Check if every element at an even index in the list is divisible by 2\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nprint(is_even_at_even_indices([3,2,1]))  # Expected output: False\nprint(is_even_at_even_indices([1,2,3]))  # Expected output: False\nprint(is_even_at_even_indices([2,1,4]))  # Expected output: True",
    "test_cases": [
      "assert even_position([3,2,1]) == False",
      "assert even_position([1,2,3]) == False",
      "assert even_position([2,1,4]) == True"
    ]
  },
  {
    "mbpp_id": 791,
    "problem_statement": "Write a function to remove the nested record from the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_nested(tup):\n    # Convert list comprehension to generator expression for readability\n    result = tuple(item for item in tup if not isinstance(item, tuple))\n    return result\n\n# Test cases\nprint(remove_nested((1, 5, 7, (4, 6), 10)))  # Expected output: (1, 5, 7, 10)\nprint(remove_nested((2, 6, 8, (5, 7), 11)))   # Expected output: (2, 6, 8, 11)\nprint(remove_nested((3, 7, 9, (6, 8), 12)))   # Expected output: (3, 7, 9, 12)",
    "test_cases": [
      "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)",
      "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
      "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)"
    ]
  },
  {
    "mbpp_id": 792,
    "problem_statement": "Write a python function to count the number of lists in a given number of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_list(lists):\n    \"\"\"\n    Counts and returns the number of sublists within a list of lists.\n    \n    Parameters:\n    - lists (list of list): A list containing multiple sublists\n    \n    Returns:\n    - int: The total number of sublists within the input list.\n    \"\"\"\n    # Initialize counter for sublist counts\n    count = 0\n    \n    # Iterate through each element in the outer list\n    for lst in lists:\n        # Increment count if current element is not empty\n        if len(lst) > 0:\n            count += 1\n            \n    return count\n\n# Example check function calls\nprint(count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]))  # Expected output: 4\nprint(count_list([[1,2],[2,3],[4,5]]))  # Expected output: 3\nprint(count_list([[1,0],[2,0]]))  # Expected output: 2",
    "test_cases": [
      "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
      "assert count_list([[1,2],[2,3],[4,5]]) == 3",
      "assert count_list([[1,0],[2,0]]) == 2"
    ]
  },
  {
    "mbpp_id": 793,
    "problem_statement": "Write a python function to find the last position of an element in a sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last(arr, x, n):\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = low + ((high - low) // 2)\n        \n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            # Check if it's the last occurrence\n            if mid == n - 1 or arr[mid + 1] != x:\n                return mid\n            else:\n                low = mid + 1\n                \n    return -1",
    "test_cases": [
      "assert last([1,2,3],1,3) == 0",
      "assert last([1,1,1,2,3,4],1,6) == 2",
      "assert last([2,3,2,3,6,8,9],3,8) == 3"
    ]
  },
  {
    "mbpp_id": 794,
    "problem_statement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_starta_endb(\"aabbbb\")==('Found a match!')",
      "assert text_starta_endb(\"aabAbbbc\")==('Not matched!')",
      "assert text_starta_endb(\"accddbbjjj\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 795,
    "problem_statement": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import heapq\n\ndef cheap_items(items, k):\n    # Convert the list of dictionaries into a max-heap based on the price key.\n    return heapq.nlargest(k, items, key=lambda x: x['price'])\n\n# Example usage and test cases\nitems_example = [dict(name='Item-1', price=101.1), dict(name='Item-2', price=555.22)]\nprint(cheap_items(items_example, 1))  # Output: [{'name': 'Item-1', 'price': 101.1}]\nprint(cheap_items(items_example, 2))  # Output: [{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}]\nprint(cheap_items(items_example, 1))  # Output: [{'name': 'Item-4', 'price': 22.75}]",
    "test_cases": [
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]",
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]",
      "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]"
    ]
  },
  {
    "mbpp_id": 796,
    "problem_statement": "Write function to find the sum of all items in the given dictionary.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def return_sum(data_dict):\n    total = 0\n    for value in data_dict.values():\n        total += value\n    return total",
    "test_cases": [
      "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600",
      "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88",
      "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"
    ]
  },
  {
    "mbpp_id": 797,
    "problem_statement": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - 'int' object is not iterable",
      "Test 2: FAIL - 'int' object is not iterable",
      "Test 3: FAIL - 'int' object is not iterable"
    ],
    "generated_code": "def sum_in_Range(l, r):\n    total = 0\n    for i in range(max(l-1, 1), min(r+1)):\n        if i % 2 != 0:\n            total += i\n    return total",
    "test_cases": [
      "assert sum_in_Range(2,5) == 8",
      "assert sum_in_Range(5,7) == 12",
      "assert sum_in_Range(7,13) == 40"
    ]
  },
  {
    "mbpp_id": 798,
    "problem_statement": "Write a python function to find the sum of an array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total",
    "test_cases": [
      "assert _sum([1, 2, 3]) == 6",
      "assert _sum([15, 12, 13, 10]) == 50",
      "assert _sum([0, 1, 2]) == 3"
    ]
  },
  {
    "mbpp_id": 799,
    "problem_statement": "Write a python function to left rotate the bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def left_Rotate(num, bit_count):\n    # Convert the integer to binary string and remove the '0b' prefix\n    num_bin = bin(num)[2:]\n    \n    # Calculate how many positions to shift\n    shifts = len(num_bin) - bit_count\n    \n    # Perform bitwise rotation\n    result_bin = num_bin[shifts:] + num_bin[:shifts]\n    \n    # Convert back to integer and return\n    return int(result_bin, 2)\n\n# Test cases\nprint(left_Rotate(16, 2))  # Expected output: 64\nprint(left_Rotate(10, 2))  # Expected output: 40\nprint(left_Rotate(99, 3))  # Expected output: 792",
    "test_cases": [
      "assert left_Rotate(16,2) == 64",
      "assert left_Rotate(10,2) == 40",
      "assert left_Rotate(99,3) == 792"
    ]
  },
  {
    "mbpp_id": 800,
    "problem_statement": "Write a function to remove all whitespaces from a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_all_spaces(s):\n    return ''.join(filter(lambda x: x != ' ', s))",
    "test_cases": [
      "assert remove_all_spaces('python  program')==('pythonprogram')",
      "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')",
      "assert remove_all_spaces('python                     program')==('pythonprogram')"
    ]
  },
  {
    "mbpp_id": 801,
    "problem_statement": "Write a python function to count the number of equal numbers from three given integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'test_three_equal' is not defined",
      "Test 2: FAIL - name 'test_three_equal' is not defined",
      "Test 3: FAIL - name 'test_three_equal' is not defined"
    ],
    "generated_code": "def count_equal_numbers(x, y, z):\n    \"\"\"\n    Counts the number of equal numbers among x, y, and z.\n    \n    Parameters:\n    - x (int): First integer input.\n    - y (int): Second integer input.\n    - z (int): Third integer input.\n    \n    Returns:\n    int: The count of how many integers between x, y, and z are equal.\n    \"\"\"\n    # Initialize counter for counting equal numbers\n    equal_count = 0\n    \n    # Check if all inputs are the same\n    if x == y == z:\n        equal_count += 3\n    else:\n        # Check if two out of three numbers are equal\n        if x == y or x == z or y == z:\n            equal_count += 2\n            \n    return equal_count",
    "test_cases": [
      "assert test_three_equal(1,1,1) == 3",
      "assert test_three_equal(-1,-2,-3) == 0",
      "assert test_three_equal(1,2,2) == 2"
    ]
  },
  {
    "mbpp_id": 802,
    "problem_statement": "Write a python function to count the number of rotations required to generate a sorted array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - count_Rotation() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - count_Rotation() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - count_Rotation() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def count_Rotation(arr):\n    n = len(arr)\n    for i in range(n-1): # Iterate until we find an element which is not equal to its next element\n        if arr[i] > arr[i+1]:\n            return i + 1 # Return the index plus one as it counts from zero\n    return n # If no such index found, return the size of array as all elements were out of order initially",
    "test_cases": [
      "assert count_Rotation([3,2,1],3) == 1",
      "assert count_Rotation([4,5,1,2,3],5) == 2",
      "assert count_Rotation([7,8,9,1,2,3],6) == 3"
    ]
  },
  {
    "mbpp_id": 803,
    "problem_statement": "Write a python function to check whether the given number is a perfect square or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Perfect_Square(num):\n    if num < 0:\n        return False\n    root = int(num ** 0.5)\n    return root * root == num",
    "test_cases": [
      "assert is_Perfect_Square(10) == False",
      "assert is_Perfect_Square(36) == True",
      "assert is_Perfect_Square(14) == False"
    ]
  },
  {
    "mbpp_id": 804,
    "problem_statement": "Write a python function to check whether the product of numbers is even or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def is_Product_Even(numbers, target_product):\n    \"\"\"\n    Check if the product of elements in 'numbers' equals 'target_product'.\n    \n    Args:\n        numbers (list): A list of integers.\n        target_product (int): The expected product value.\n        \n    Returns:\n        bool: True if the product matches 'target_product', otherwise False.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n        # If the current product exceeds 'target_product', break early as further products won't affect equality\n        if result > target_product:\n            break\n        # Early exit if found a number whose multiplication results in 'target_product'\n        elif result == target_product:\n            return True\n    else:\n        # If loop completes without finding a match, the condition is not met\n        return False\n\n# Test cases\nassert is_Product_Even([1,2,3], 3) == True\nassert is_Product_Even([1,2,1,4], 4) == True\nassert is_Product_Even([1,1], 2) == False\nprint(\"All test cases passed.\")",
    "test_cases": [
      "assert is_Product_Even([1,2,3],3) == True",
      "assert is_Product_Even([1,2,1,4],4) == True",
      "assert is_Product_Even([1,1],2) == False"
    ]
  },
  {
    "mbpp_id": 805,
    "problem_statement": "Write a function to find the list in a list of lists whose sum of elements is the highest.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_list(lst):\n    return sorted([sum(sublist) for sublist in lst], reverse=True)[0]\n\n# Test cases\nprint(max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])) # Output should be [10, 11, 12]\nprint(max_sum_list([[3,2,1], [6,5,4], [12,11,10]]))         # Output should be [12,11,10]\nprint(max_sum_list([[2,3,1]]))                             # Output should be [2,3,1]",
    "test_cases": [
      "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ",
      "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ",
      "assert max_sum_list([[2,3,1]])==[2,3,1] "
    ]
  },
  {
    "mbpp_id": 806,
    "problem_statement": "Write a function to find maximum run of uppercase characters in the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_run_uppercase(s):\n    max_length = 0\n    current_length = 0\n    \n    for i in range(1, len(s)):\n        if s[i] >= s[i - 1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n            \n    # Check for the last sequence at the end of the string\n    max_length = max(max_length, current_length)\n    \n    return max_length\n\n# Test cases\nprint(max_run_uppercase('GeMKSForGERksISBESt'))  # Expected output: 5\nprint(max_run_uppercase('PrECIOUsMOVemENTSYT'))  # Expected output: 6\nprint(max_run_uppercase('GooGLEFluTTER'))       # Expected output: 4",
    "test_cases": [
      "assert max_run_uppercase('GeMKSForGERksISBESt') == 5",
      "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6",
      "assert max_run_uppercase('GooGLEFluTTER') == 4"
    ]
  },
  {
    "mbpp_id": 807,
    "problem_statement": "Write a python function to find the first odd number in a given list of numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_cases": [
      "assert first_odd([1,3,5]) == 1",
      "assert first_odd([2,4,1,3]) == 1",
      "assert first_odd ([8,9,1]) == 9"
    ]
  },
  {
    "mbpp_id": 808,
    "problem_statement": "Write a function to check if the given tuples contain the k or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_K(tupl, k):\n    # Check if all elements in the tuple are equal to k\n    return len(set(tupl)) == 1 and tupl[0] == k\n\n# Test cases\nprint(check_K((10, 4, 5, 6, 8), 6))  # Expected output: True\nprint(check_K((1, 2, 3, 4, 5, 6), 7))  # Expected output: False\nprint(check_K((7, 8, 9, 44, 11, 12), 11))  # Expected output: True",
    "test_cases": [
      "assert check_K((10, 4, 5, 6, 8), 6) == True",
      "assert check_K((1, 2, 3, 4, 5, 6), 7) == False",
      "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"
    ]
  },
  {
    "mbpp_id": 809,
    "problem_statement": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_smaller(tup1, tup2):\n    for i in range(len(tup1)):\n        if tup1[i] >= tup2[i]:\n            return False\n    return True",
    "test_cases": [
      "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
      "assert check_smaller((4, 5, 6), (3, 4, 5)) == True",
      "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"
    ]
  },
  {
    "mbpp_id": 810,
    "problem_statement": "Write a function to iterate over elements repeating each as many times as its count.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Invalid argument type: <class 'int'>",
      "Test 2: FAIL - Invalid argument type: <class 'int'>",
      "Test 3: FAIL - Invalid argument type: <class 'int'>"
    ],
    "generated_code": "from collections import Counter\n\ndef count_variable(*args):\n    c = Counter(args)\n    result = []\n    for key in sorted(c.keys()):\n        n = c[key]\n        if isinstance(key, str): # check if it's a string (variable)\n            result.extend([key] * n)\n        else:\n            raise ValueError(f\"Invalid argument type: {type(key)}\")\n    return result",
    "test_cases": [
      "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ",
      "assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] ",
      "assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"
    ]
  },
  {
    "mbpp_id": 811,
    "problem_statement": "Write a function to check if two lists of tuples are identical or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_identical(list1, list2):\n    # Check if both lists have the same length\n    if len(list1) != len(list2):\n        return False\n    \n    # Compare each tuple in list1 with the corresponding tuple in list2\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n            \n    return True",
    "test_cases": [
      "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True",
      "assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False",
      "assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True"
    ]
  },
  {
    "mbpp_id": 812,
    "problem_statement": "Write a function to abbreviate 'road' as 'rd.' in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def road_rd(input_str):\n    return input_str.replace(\"Road\", \"Rd.\")",
    "test_cases": [
      "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')",
      "assert road_rd(\"palnadu Road\")==('palnadu Rd.')",
      "assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')"
    ]
  },
  {
    "mbpp_id": 813,
    "problem_statement": "Write a function to find length of the string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_length(s):\n    return len(s)",
    "test_cases": [
      "assert string_length('python')==6",
      "assert string_length('program')==7",
      "assert string_length('language')==8"
    ]
  },
  {
    "mbpp_id": 814,
    "problem_statement": "Write a function to find the area of a rombus.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def rombus_area(diagonal_1, diagonal_2):\n    return (diagonal_1 * diagonal_2) / 2",
    "test_cases": [
      "assert rombus_area(10,20)==100",
      "assert rombus_area(10,5)==25",
      "assert rombus_area(4,2)==4"
    ]
  },
  {
    "mbpp_id": 815,
    "problem_statement": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - sort_by_dnf() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - sort_by_dnf() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - sort_by_dnf() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def sort_by_dnf(arr):\n    # Initialize pointers for three partitions\n    low = 0\n    mid = 0\n    high = len(arr) - 1\n    \n    while mid <= high:\n        if arr[mid] == 0:\n            arr[low], arr[mid] = arr[mid], arr[low]\n            low += 1\n            mid += 1\n        elif arr[mid] == 1:\n            mid += 1\n        else:\n            arr[mid], arr[high] = arr[high], arr[mid]\n            high -= 1\n            \n    return arr",
    "test_cases": [
      "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]",
      "assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
      "assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
    ]
  },
  {
    "mbpp_id": 816,
    "problem_statement": "Write a function to clear the values of the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def clear_tuple(tup):\n    return () if isinstance(tup, tuple) else tup",
    "test_cases": [
      "assert clear_tuple((1, 5, 3, 6, 8)) == ()",
      "assert clear_tuple((2, 1, 4 ,5 ,6)) == ()",
      "assert clear_tuple((3, 2, 5, 6, 8)) == ()"
    ]
  },
  {
    "mbpp_id": 817,
    "problem_statement": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def div_of_nums(numbers, divisor1, divisor2):\n    return [num for num in numbers if num % divisor1 == 0 or num % divisor2 == 0]\n\n# Test cases\nprint(div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 19, 13))  # Expected output: [19, 65, 57, 39, 152, 190]\nprint(div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5))  # Expected output: [2, 5, 8, 10]\nprint(div_of_nums([10,15,14,13,18,12,20],10,5))  # Expected output: [10, 15, 20]",
    "test_cases": [
      "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]",
      "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]",
      "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]"
    ]
  },
  {
    "mbpp_id": 818,
    "problem_statement": "Write a python function to count lower case letters in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lower_ctr(s):\n    # Initialize counter for lowercase characters\n    lower_count = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if 'a' <= char <= 'z':\n            lower_count += 1\n            \n    # Return the total count of lowercase characters\n    return lower_count",
    "test_cases": [
      "assert lower_ctr('abc') == 3",
      "assert lower_ctr('string') == 6",
      "assert lower_ctr('Python') == 5"
    ]
  },
  {
    "mbpp_id": 819,
    "problem_statement": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_duplic(nums):\n    from collections import defaultdict\n    \n    # Initialize counters for each number and its occurrences\n    cnt = defaultdict(int)\n    res_cnt = defaultdict(int)\n    \n    for num in nums:\n        if cnt[num] == 0:\n            res_cnt[cnt[num]] += 1\n        cnt[num] += 1\n    \n    return ([res_cnt[i] for i in range(len(res_cnt))], [cnt[j] - 1 for j in range(1, len(cnt) + 1)])",
    "test_cases": [
      "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])",
      "assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])",
      "assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ]
  },
  {
    "mbpp_id": 820,
    "problem_statement": "Write a function to check whether the given month number contains 28 days or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnum_number(month_num):\n    \"\"\"\n    This function checks if the input month number contains 28 days.\n    \n    Args:\n        month_num (int): The month number from 1 to 12.\n        \n    Returns:\n        bool: True if the month has 28 days, False otherwise.\n    \"\"\"\n    # Months with 28 days\n    months_with_28_days = [4, 6, 9, 11]\n    return month_num in months_with_28_days",
    "test_cases": [
      "assert check_monthnum_number(2)==True",
      "assert check_monthnum_number(1)==False",
      "assert check_monthnum_number(3)==False"
    ]
  },
  {
    "mbpp_id": 821,
    "problem_statement": "Write a function to merge two dictionaries into a single expression.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def merge_dictionaries(dict1, dict2):\n    # Merge both dictionaries and return the result\n    return dict1.update(dict2)\n\n# Test the function with provided data points\nprint(merge_dictionaries({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}))  \nprint(merge_dictionaries({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}))\nprint(merge_dictionaries({'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}))",
    "test_cases": [
      "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}",
      "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}",
      "assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"
    ]
  },
  {
    "mbpp_id": 822,
    "problem_statement": "Write a function to return true if the password is valid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef pass_validity(password):\n    # Check for at least one digit and one uppercase letter\n    has_digit = bool(re.search(r'\\d', password))\n    has_uppercase = bool(re.search(r'[A-Z]', password))\n    \n    # Password should be more than 8 characters long\n    min_length = len(password) > 8\n    \n    # If all conditions are met, return True else False\n    return has_digit and has_uppercase and min_length",
    "test_cases": [
      "assert pass_validity(\"password\")==False",
      "assert pass_validity(\"Password@10\")==True",
      "assert pass_validity(\"password@10\")==False"
    ]
  },
  {
    "mbpp_id": 823,
    "problem_statement": "Write a function to check if the given string starts with a substring using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_substring(string, sub_string):\n    # Check if the pattern exists at the beginning of the input string\n    pattern = r'^{}+'.format(re.escape(sub_string))\n    match = re.match(pattern, string)\n    \n    # Return the appropriate message based on the existence of the pattern\n    if match:\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'\n\n# Test cases\nprint(check_substring(\"dreams for dreams makes life fun\", \"makes\"))  # Expected output: 'string doesnt start with the given substring'\nprint(check_substring(\"Hi there how are you Hi alex\", \"Hi\"))  # Expected output: 'string starts with the given substring'\nprint(check_substring(\"Its been a long day\", \"been\"))  # Expected output: 'string doesnt start with the given substring'",
    "test_cases": [
      "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'",
      "assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'",
      "assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'"
    ]
  },
  {
    "mbpp_id": 824,
    "problem_statement": "Write a python function to remove even numbers from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_even(nums):\n    # Use list comprehension to filter out even numbers and create a new list with odd numbers\n    return [num for num in nums if num % 2 != 0]\n\n# Test the function with provided data points\nprint(remove_even([1, 3, 5, 2]))  # Expected output: [1, 3, 5]\nprint(remove_even([5, 6, 7]))     # Expected output: [5, 7]\nprint(remove_even([1, 2, 3, 4]))  # Expected output: [1, 3]",
    "test_cases": [
      "assert remove_even([1,3,5,2]) == [1,3,5]",
      "assert remove_even([5,6,7]) == [5,7]",
      "assert remove_even([1,2,3,4]) == [1,3]"
    ]
  },
  {
    "mbpp_id": 825,
    "problem_statement": "Write a python function to access multiple elements of specified index from a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def access_elements(lst, indices):\n    \"\"\"\n    Accesses multiple elements of specified index from the given list.\n    \n    Parameters:\n    lst (list): The input list from which elements will be accessed.\n    indices (list): A list containing the indices at which the elements will be retrieved from the input list.\n    \n    Returns:\n    list: A list containing the elements fetched based on the provided indices.\n    \"\"\"\n    # Use slicing with comprehension to fetch the required elements\n    result = [lst[i] for i in indices if 0 <= i < len(lst)]\n    return result\n\n# Test cases to verify the correctness of the function\nassert access_elements([2,3,8,4,7,9], [0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5], [1,2]) == [2, 3]\nassert access_elements([1,0,2,3], [0,1]) == [1,0]",
    "test_cases": [
      "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]",
      "assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]",
      "assert access_elements([1,0,2,3],[0,1]) == [1,0]"
    ]
  },
  {
    "mbpp_id": 826,
    "problem_statement": "Write a python function to find the type of triangle from the given sides.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_Type_Of_Triangle(a, b, c):\n    \"\"\"\n    Function to determine the type of triangle based on the lengths of its three sides.\n    \n    Parameters:\n    a (float): length of side a\n    b (float): length of side b\n    c (float): length of side c\n    \n    Returns:\n    str: Type of the triangle (\"Acute-angled Triangle\", \"Right-angled Triangle\", \"Obtuse-angled Triangle\")\n    \"\"\"\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a valid triangle\"\n\n    # Calculate squares of the sides\n    A = a ** 2\n    B = b ** 2\n    C = c ** 2\n\n    # Check for right angle\n    if A == B + C or B == A + C or C == A + B:\n        return \"Right-angled Triangle\"\n    \n    # Check for obtuse angle\n    if A > B + C or B > A + C or C > A + B:\n        return \"Obtuse-angled Triangle\"\n    \n    # If none of the above conditions met, it's an acute-angled triangle\n    return \"Acute-angled Triangle\"",
    "test_cases": [
      "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"",
      "assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"",
      "assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\""
    ]
  },
  {
    "mbpp_id": 827,
    "problem_statement": "Write a function to sum a specific column of a list in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_column(matrix, col_index):\n    return sum(row[col_index] for row in matrix)",
    "test_cases": [
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12",
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15",
      "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9"
    ]
  },
  {
    "mbpp_id": 828,
    "problem_statement": "Write a function to count alphabets,digits and special charactes in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: invalid syntax"
    ],
    "generated_code": "```python\ndef count_alpha_dig_spl(str):\n    alpha = 0\n    dig = 0\n    spl = 0\n    \n    for char in str:\n        if char.isalpha():\n            alpha += 1\n        elif char.isdigit():\n            dig += 1\n        else:\n            spl += 1\n            \n    return (alpha, dig, spl)\n\nprint(count_alpha_dig_spl(\"abc!@#123\"))\nprint(count_alpha_dig_spl(\"dgsuy@#$%&1255\"))\nprint(count_alpha_dig_spl(\"fjdsif627348#%$^&\"))",
    "test_cases": [
      "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)",
      "assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)",
      "assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)"
    ]
  },
  {
    "mbpp_id": 829,
    "problem_statement": "Write a function to find out the second most repeated (or frequent) string in the given sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def second_frequent(strings):\n    from collections import Counter\n    \n    # Count the frequency of each string in the list\n    freq = Counter(strings)\n    \n    # Get the frequencies and their corresponding strings\n    freq_list = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # Return the second highest frequency string if it exists, otherwise None\n    return freq_list[1][0] if len(freq_list) > 1 else None\n\n# Test cases\nprint(second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']))  # Expected output: 'bbb'\nprint(second_frequent(['abc','bcd','abc','bcd','bcd','bcd']))  # Expected output: 'abc'\nprint(second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']))  # Expected output: 'gsm'",
    "test_cases": [
      "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'",
      "assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'",
      "assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'"
    ]
  },
  {
    "mbpp_id": 830,
    "problem_statement": "Write a function to round up a number to specific digits.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: '.'",
      "Test 2: FAIL - invalid literal for int() with base 10: '.'",
      "Test 3: FAIL - invalid literal for int() with base 10: '.'"
    ],
    "generated_code": "def round_up(number, ndigits):\n    return int(''.join(str(int(digit)) for digit in str(round(float(number), -ndigits))))",
    "test_cases": [
      "assert round_up(123.01247,0)==124",
      "assert round_up(123.01247,1)==123.1",
      "assert round_up(123.01247,2)==123.02"
    ]
  },
  {
    "mbpp_id": 831,
    "problem_statement": "Write a python function to count equal element pairs from the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    total_pairs = 0\n    for value, freq in count.items():\n        if freq > 1:\n            # For each number with frequency greater than 1, calculate the number of pairs it can form.\n            total_pairs += ((freq * (freq - 1)) // 2)\n    \n    return total_pairs",
    "test_cases": [
      "assert count_Pairs([1,1,1,1],4) == 6",
      "assert count_Pairs([1,5,1],3) == 1",
      "assert count_Pairs([3,2,1,7,8,9],6) == 0"
    ]
  },
  {
    "mbpp_id": 832,
    "problem_statement": "Write a function to extract the maximum numeric value from a string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef extract_max(input_string):\n    # Extract all numbers in the input string\n    numbers = re.findall(r'\\d+', input_string)\n    \n    # Convert extracted strings to integers and find the maximum\n    max_value = max(map(int, numbers))\n    \n    return max_value\n\n# Test cases to verify the correctness of the function\nassert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
    "test_cases": [
      "assert extract_max('100klh564abc365bg') == 564",
      "assert extract_max('hello300how546mer231') == 546",
      "assert extract_max('its233beenalong343journey234') == 343"
    ]
  },
  {
    "mbpp_id": 833,
    "problem_statement": "Write a function to get dictionary keys as a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_key(d):\n    return list(d.keys())",
    "test_cases": [
      "assert get_key({1:'python',2:'java'})==[1,2]",
      "assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]",
      "assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]"
    ]
  },
  {
    "mbpp_id": 834,
    "problem_statement": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def generate_matrix(n):\n    result = []\n    for i in range(n // 2 + 1):\n        top = i\n        bottom = n - i - 1\n        left = i\n        right = n - i - 1\n        # Fill top row if not empty\n        if top != 0:\n            for j in range(left, right + 1):\n                result.append([top * top, top * top + 1, top * top + 2])\n            top += 1\n        # Fill right column if not empty\n        if right != 0:\n            for k in range(top, bottom + 1):\n                result.append([right * right, right * right + 1, right * right + 2])\n            right -= 1\n        # Fill bottom row if not empty\n        if bottom != 0:\n            for m in range(right, left - 1, -1):\n                result.append([bottom * bottom, bottom * bottom + 1, bottom * bottom + 2])\n            bottom -= 1\n        # Fill left column if not empty\n        if left != 0:\n            for o in range(bottom, top - 1, -1):\n                result.append([left * left, left * left + 1, left * left + 2])\n            left += 1\n    return result",
    "test_cases": [
      "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ",
      "assert generate_matrix(2)==[[1,2],[4,3]]",
      "assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"
    ]
  },
  {
    "mbpp_id": 835,
    "problem_statement": "Write a python function to find the slope of a line.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def slope(x1, y1, x2, y2):\n    \"\"\"\n    Calculate the slope of a line given two points.\n    \n    Parameters:\n    x1, y1 (float): Coordinates of the first point on the line.\n    x2, y2 (float): Coordinates of the second point on the line.\n    \n    Returns:\n    float: The slope of the line passing through the two points.\n    \"\"\"\n    if x2 == x1:\n        return None # Handle vertical lines\n    return (y2 - y1) / (x2 - x1)\n\n# Test cases\nprint(slope(4, 2, 2, 5)) # Expected output: -1.5\nprint(slope(2, 4, 4, 6)) # Expected output: 1\nprint(slope(1, 2, 4, 2)) # Expected output: 0",
    "test_cases": [
      "assert slope(4,2,2,5) == -1.5",
      "assert slope(2,4,4,6) == 1",
      "assert slope(1,2,4,2) == 0"
    ]
  },
  {
    "mbpp_id": 836,
    "problem_statement": "Write a function to find length of the subarray having maximum sum.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: max_sub_array_sum() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from itertools import accumulate\nfrom operator import mul\n\ndef max_sub_array_sum(nums):\n    \"\"\"\n    Finds the length of the longest contiguous subarray with a sum equal to the maximum sum found in nums.\n    \n    Args:\n        nums (list): A list of integers\n    \n    Returns:\n        int: The length of the longest subarray\n    \"\"\"\n    max_so_far = cur_max = 0\n    for num in nums:\n        cur_max += num\n        if cur_max > max_so_far:\n            max_so_far = cur_max\n        elif cur_max < 0:\n            cur_max = 0\n    return len(nums) - max_so_far + max_so_far // abs(max_so_far)\n\n# Test cases\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1], 6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5], 5) == 3",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5",
      "assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2",
      "assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3"
    ]
  },
  {
    "mbpp_id": 837,
    "problem_statement": "Write a python function to find the cube sum of first n odd natural numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'cube_Sum' is not defined",
      "Test 2: FAIL - name 'cube_Sum' is not defined",
      "Test 3: FAIL - name 'cube_Sum' is not defined"
    ],
    "generated_code": "def cube_sum(n):\n    # Initialize total to 0\n    total = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the cube of each odd number to total\n        total += i**3\n    \n    return total\n\n# Test the function with provided data points\nprint(cube_sum(2))   # Expected output: 28\nprint(cube_sum(3))   # Expected output: 153\nprint(cube_sum(4))   # Expected output: 496",
    "test_cases": [
      "assert cube_Sum(2) == 28",
      "assert cube_Sum(3) == 153",
      "assert cube_Sum(4) == 496"
    ]
  },
  {
    "mbpp_id": 838,
    "problem_statement": "Write a python function to find minimum number swaps required to make two binary strings equal.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_Swaps(binary_str1, binary_str2):\n    count = sum([bin(int(x) - int(y)).count('1') for x, y in zip(binary_str1[::-1], binary_str2[::-1])])\n    return count // 2",
    "test_cases": [
      "assert min_Swaps(\"0011\",\"1111\") == 1",
      "assert min_Swaps(\"00011\",\"01001\") == 2",
      "assert min_Swaps(\"111\",\"111\") == 0"
    ]
  },
  {
    "mbpp_id": 839,
    "problem_statement": "Write a function to sort the tuples alphabetically by the first item of each tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_tuple(tuples_list):\n    # Sort the list of tuples using key parameter for sorting by the first element of each tuple\n    sorted_tuples = sorted(tuples_list)\n    return sorted_tuples",
    "test_cases": [
      "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]",
      "assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]",
      "assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"
    ]
  },
  {
    "mbpp_id": 840,
    "problem_statement": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef Check_Solution(a, b, c):\n    # Calculate the discriminant\n    D = b**2 - 4*a*c\n    \n    if D == 0:\n        root = -b / (2 * a)\n        return f\"Roots are Numerically Equal and Opposite: {root}\"\n    \n    sqrt_D = math.sqrt(abs(D))\n    \n    if D > 0:\n        x1 = (-b + sqrt_D) / (2 * a)\n        x2 = (-b - sqrt_D) / (2 * a)\n        if abs(x1 - x2) < 1e-9:\n            return f\"Roots are Numerically Equal and Opposite: {x1}\"\n        else:\n            return \"Roots are Numerically Equal but Not Opposite\"\n    elif D == 0:\n        return \"Roots are Numerically Equal\"\n    else:\n        real_part = -b / (2 * a)\n        imaginary_part = sqrt_D\n        return f\"Complex Roots with Real Part: {real_part} and Imaginary Parts: {imaginary_part}\"\n\n# Test cases\nprint(Check_Solution(2, 0, -1))  # Output: 'Roots are Numerically Equal and Opposite: -0.5'\nprint(Check_Solution(1, -5, 6))  # Output: 'Roots are Numerically Equal and Opposite: 2.5'\nprint(Check_Solution(2, 0, 2))   # Output: 'Roots are Numerically Equal but Not Opposite'",
    "test_cases": [
      "assert Check_Solution(2,0,-1) == \"Yes\"",
      "assert Check_Solution(1,-5,6) == \"No\"",
      "assert Check_Solution(2,0,2) == \"Yes\""
    ]
  },
  {
    "mbpp_id": 841,
    "problem_statement": "Write a function to count the number of inversions in the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_inv_count(arr, n): \n    cnt = 0  \n    for i in range(n):  \n        for j in range(i + 1, n):  \n            if arr[i] > arr[j]:  \n                cnt += 1\n    return cnt",
    "test_cases": [
      "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5",
      "assert get_inv_count([8, 4, 2, 1], 4) == 6",
      "assert get_inv_count([3, 1, 2], 3) == 2"
    ]
  },
  {
    "mbpp_id": 842,
    "problem_statement": "Write a function to find the number which occurs for odd number of times in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - get_odd_occurence() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - get_odd_occurence() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - get_odd_occurence() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "from typing import List\n\ndef get_odd_occurence(arr: List[int]) -> int:\n    from collections import Counter\n    \n    # Count occurrences of each element in the array\n    count = Counter(arr)\n    \n    # Find the element with an odd occurrence and return it\n    for num, freq in count.items():\n        if freq % 2 != 0:\n            return num",
    "test_cases": [
      "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5",
      "assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3",
      "assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5"
    ]
  },
  {
    "mbpp_id": 843,
    "problem_statement": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - index out of range"
    ],
    "generated_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    # Initialize variables\n    max_heap = [(prime ** i, prime, i + 1) for i, prime in enumerate(primes)]\n    seen = set([max_heap[0][1]])\n    \n    while n > 0:\n        min_val, current_prime, index = heapq.heappop(max_heap)\n        n -= 1\n        \n        if not n:\n            return min_val\n        \n        for next_prime in primes:\n            new_val = current_prime * next_prime\n            if new_val not in seen:\n                seen.add(new_val)\n                heapq.heappush(max_heap, (new_val, next_prime, index))\n                \n    return -1  # This line should theoretically never be reached as we have an infinite loop",
    "test_cases": [
      "assert nth_super_ugly_number(12,[2,7,13,19])==32",
      "assert nth_super_ugly_number(10,[2,7,13,19])==26",
      "assert nth_super_ugly_number(100,[2,7,13,19])==5408"
    ]
  },
  {
    "mbpp_id": 844,
    "problem_statement": "Write a python function to find the kth element in an array containing odd elements first and then even elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'get_Number' is not defined",
      "Test 2: FAIL - name 'get_Number' is not defined",
      "Test 3: FAIL - name 'get_Number' is not defined"
    ],
    "generated_code": "def get_number(k, n):\n    \"\"\"\n    This function takes two integers k and n as input.\n    It returns the kth element from an array of numbers where all odd numbers come before even numbers,\n    with each set starting from 0.\n    \n    :param k: The position of the number we want to retrieve from the combined list of odd and even numbers.\n    :param n: The total count of odd and even numbers.\n    :return: The kth number from the combined list.\n    \"\"\"\n    # Calculate the index of the kth number in a single group of numbers (odd or even).\n    index_in_group = (k - 1) // (n + 1)\n    # Determine if we're dealing with odd or even numbers at this index.\n    if (k - 1) % (n + 1) == 0:\n        is_odd = True\n    else:\n        is_odd = False\n        \n    # Generate the sequence of odd/even numbers based on our index.\n    current_index = 0\n    for _ in range(index_in_group * 2):\n        if is_odd:\n            yield odd_numbers[current_index]\n            current_index += 1\n        else:\n            yield even_numbers[current_index]\n            current_index += 1\n            \n            if current_index < len(even_numbers):\n                is_odd = not is_odd\n                \nif __name__ == \"__main__\":\n    print(get_number(8, 5))  # Should output 2\n    print(get_number(7, 2))  # Should output 3\n    print(get_number(5, 2))  # Should output 3",
    "test_cases": [
      "assert get_Number(8,5) == 2",
      "assert get_Number(7,2) == 3",
      "assert get_Number(5,2) == 3"
    ]
  },
  {
    "mbpp_id": 845,
    "problem_statement": "Write a python function to count the number of digits in factorial of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Digits(n):\n    \"\"\"\n    This function calculates the number of digits in the factorial of a given number.\n    \n    Parameters:\n    n (int): The input number\n    \n    Returns:\n    int: Number of digits in the factorial of the given number\n    \"\"\"\n    if n == 0:\n        return 1\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return len(str(fact))\n\n# Test cases\nprint(find_Digits(7)) # Expected output: 4\nprint(find_Digits(5)) # Expected output: 3\nprint(find_Digits(4)) # Expected output: 2",
    "test_cases": [
      "assert find_Digits(7) == 4",
      "assert find_Digits(5) == 3",
      "assert find_Digits(4) == 2"
    ]
  },
  {
    "mbpp_id": 846,
    "problem_statement": "Write a function to find the minimum number of platforms required for a railway/bus station.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_platform(arrival_time, departure_time, n):\n    arrival_time.sort()\n    departure_time.sort()\n\n    max_plates = 1\n    current_plates = 1\n\n    i = 1\n    j = 0\n\n    while i < n and j < n:\n        if arrival_time[i] < departure_time[j]:\n            current_plates += 1\n            i += 1\n        else:\n            current_plates -= 1\n            j += 1\n\n        max_plates = max(max_plates, current_plates)\n\n    return max_plates\n\n# Test cases\nprint(find_platform([900, 940, 950, 1100, 1500, 1800], [910, 1200, 1120, 1130, 1900, 2000], 6)) # Output: 3\nprint(find_platform([100,200,300,400], [700,800,900,1000], 4)) # Output: 4\nprint(find_platform([5,6,7,8], [4,3,2,1], 4)) # Output: 1",
    "test_cases": [
      "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3",
      "assert find_platform([100,200,300,400],[700,800,900,1000],4)==4",
      "assert find_platform([5,6,7,8],[4,3,2,1],4)==1"
    ]
  },
  {
    "mbpp_id": 847,
    "problem_statement": "Write a python function to copy a list from a singleton tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def lcopy(lst):\n    # Copy the input list into a new list and return it.\n    return lst[:]",
    "test_cases": [
      "assert lcopy([1, 2, 3]) == [1, 2, 3]",
      "assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]",
      "assert lcopy([4, 5, 6]) == [4, 5, 6]\n"
    ]
  },
  {
    "mbpp_id": 848,
    "problem_statement": "Write a function to find the area of a trapezium.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def area_trapezium(base_1, base_2, height):\n    return ((base_1 + base_2) * height) / 2",
    "test_cases": [
      "assert area_trapezium(6,9,4)==30",
      "assert area_trapezium(10,20,30)==450",
      "assert area_trapezium(15,25,35)==700"
    ]
  },
  {
    "mbpp_id": 849,
    "problem_statement": "Write a python function to find sum of all prime divisors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Sum' is not defined",
      "Test 2: FAIL - name 'Sum' is not defined",
      "Test 3: FAIL - name 'Sum' is not defined"
    ],
    "generated_code": "import math\n\ndef sum_of_prime_divisors(n):\n    total = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            # Check if both factors are prime\n            while n % i == 0:\n                total += i\n                n //= i\n            # If there's another factor left which is not prime, add it separately\n            if n > 1 and n != i**2:\n                total += n\n                break\n    return total",
    "test_cases": [
      "assert Sum(60) == 10",
      "assert Sum(39) == 16",
      "assert Sum(40) == 7"
    ]
  },
  {
    "mbpp_id": 850,
    "problem_statement": "Write a function to check if a triangle of positive area is possible with the given angles.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_triangleexists(angle1, angle2, angle3):\n    # Check if the sum of all three angles equals 180 degrees\n    return angle1 + angle2 + angle3 == 180 and angle1 > 0 and angle2 > 0 and angle3 > 0",
    "test_cases": [
      "assert is_triangleexists(50,60,70)==True",
      "assert is_triangleexists(90,45,45)==True",
      "assert is_triangleexists(150,30,70)==False"
    ]
  },
  {
    "mbpp_id": 851,
    "problem_statement": "Write a python function to find sum of inverse of divisors.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\n\ndef Sum_of_Inverse_Divisors(numerator, denominator):\n    total_sum = 0\n    for divisor in range(1, min(denominator, numerator) + 1):\n        if numerator % divisor == 0 and denominator % divisor == 0:\n            total_sum += 1 / divisor\n    return total_sum\n\n# Test cases\nprint(Sum_of_Inverse_Divisors(6, 12)) # Output should be approximately 2\nprint(Sum_of_Inverse_Divisors(9, 13)) # Output should be approximately 1.44\nprint(Sum_of_Inverse_Divisors(1, 4))  # Output should be 4",
    "test_cases": [
      "assert Sum_of_Inverse_Divisors(6,12) == 2",
      "assert Sum_of_Inverse_Divisors(9,13) == 1.44",
      "assert Sum_of_Inverse_Divisors(1,4) == 4"
    ]
  },
  {
    "mbpp_id": 852,
    "problem_statement": "Write a python function to remove negative numbers from a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_negs(lst):\n    # Use list comprehension to filter out negative numbers and return the result\n    return [x for x in lst if x >= 0]\n\n# Test cases\nprint(remove_negs([1,-2,3,-4]))  # Expected output: [1, 3]\nprint(remove_negs([1,2,3,-4]))   # Expected output: [1, 2, 3]\nprint(remove_negs([4,5,-6,7,-8]))  # Expected output: [4, 5, 7]",
    "test_cases": [
      "assert remove_negs([1,-2,3,-4]) == [1,3]",
      "assert remove_negs([1,2,3,-4]) == [1,2,3]",
      "assert remove_negs([4,5,-6,7,-8]) == [4,5,7]"
    ]
  },
  {
    "mbpp_id": 853,
    "problem_statement": "Write a python function to find sum of odd factors of a number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_odd_Factors(n):\n    result = 1\n    for i in range(1, int((n**0.5)+1)):\n        if n % i == 0:\n            # If both divisors are same then add it only once\n            if i == n // i:\n                result += i\n            else:\n                # Add both divisors\n                result += i + n // i\n    return result - n",
    "test_cases": [
      "assert sum_of_odd_Factors(30) == 24",
      "assert sum_of_odd_Factors(18) == 13",
      "assert sum_of_odd_Factors(2) == 1"
    ]
  },
  {
    "mbpp_id": 854,
    "problem_statement": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def raw_heap(arr):\n    # Implementing heapify from scratch for educational purposes\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):  # Start with the second last element\n        sift_down(i, arr)  # Sift down to maintain max-heap property\n    return arr\n\ndef sift_down(start, heap):\n    largest = start\n    left = 2 * start + 1\n    right = 2 * start + 2\n    \n    if left < len(heap) and heap[left] > heap[largest]:\n        largest = left\n    \n    if right < len(heap) and heap[right] > heap[largest]:\n        largest = right\n    \n    if largest != start:\n        swap(start, largest, heap)\n        sift_down(largest, heap)\n\ndef swap(i, j, heap):\n    heap[i], heap[j] = heap[j], heap[i]\n\n# Test cases\nprint(raw_heap([25, 44, 68, 21, 39, 23, 89]))  # Expected output: [21, 25, 23, 44, 39, 68, 89]\nprint(raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58]))  # Expected output: [14, 25, 22, 25, 35, 65, 75, 85, 58]\nprint(raw_heap([4, 5, 6, 2]))  # Expected output: [2, 4, 6, 5]",
    "test_cases": [
      "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]",
      "assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]",
      "assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"
    ]
  },
  {
    "mbpp_id": 855,
    "problem_statement": "Write a python function to check for even parity of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Even_Parity(n):\n    # Convert the number to binary and count the '0's\n    binary_representation = bin(n)[2:]  # Remove the '0b' prefix from the binary string\n    zero_count = binary_representation.count('0')\n    \n    # If there is an odd number of zeros, it has odd parity\n    if zero_count % 2 != 0:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_Even_Parity(10))  # Expected output: True\nprint(check_Even_Parity(11))  # Expected output: False\nprint(check_Even_Parity(18))  # Expected output: True",
    "test_cases": [
      "assert check_Even_Parity(10) == True",
      "assert check_Even_Parity(11) == False",
      "assert check_Even_Parity(18) == True"
    ]
  },
  {
    "mbpp_id": 856,
    "problem_statement": "Write a python function to find minimum adjacent swaps required to sort binary array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min_Swaps(arr, n):\n    swap_count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            swap_count += 1\n    # If all elements are in order, no swaps needed\n    return swap_count\n\n# Example usage:\nprint(find_Min_Swaps([1,0,1,0], 4))  # Output: 3\nprint(find_Min_Swaps([0,1,0], 3))     # Output: 1\nprint(find_Min_Swaps([0,0,1,1,0], 5)) # Output: 2",
    "test_cases": [
      "assert find_Min_Swaps([1,0,1,0],4) == 3",
      "assert find_Min_Swaps([0,1,0],3) == 1",
      "assert find_Min_Swaps([0,0,1,1,0],5) == 2"
    ]
  },
  {
    "mbpp_id": 857,
    "problem_statement": "Write a function to list out the list of given strings individually using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def listify_list(string_list):\n    return list(map(list, string_list))",
    "test_cases": [
      "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]",
      "assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]",
      "assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"
    ]
  },
  {
    "mbpp_id": 858,
    "problem_statement": "Write a function to count number of lists in a given list of lists and square the count.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_list(l):\n    # Count the number of lists in the input list\n    count = len([item for sublist in l for item in sublist if isinstance(item, list)])\n    return count ** 2",
    "test_cases": [
      "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25",
      "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16",
      "assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9"
    ]
  },
  {
    "mbpp_id": 859,
    "problem_statement": "Write a function to generate all sublists of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sub_lists(input_list):\n    result = [[]]\n    for element in input_list:\n        # Create new sublists by adding the current element to each existing sublist\n        result += [current_element + [element] for current_element in result]\n    return result\n\n# Test cases\nprint(sub_lists([10, 20, 30, 40]))  # Expected output: [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nprint(sub_lists(['X', 'Y', 'Z']))   # Expected output: [[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nprint(sub_lists([1,2,3]))           # Expected output: [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]",
    "test_cases": [
      "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
      "assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]",
      "assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"
    ]
  },
  {
    "mbpp_id": 860,
    "problem_statement": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef check_alphanumeric(s):\n    \"\"\"\n    This function checks if the input string ends with only alphanumeric characters.\n    \n    Parameters:\n    s (str): The input string to be checked.\n    \n    Returns:\n    str: \"Accept\" if the string ends with only alphanumeric characters, otherwise returns \"Discard\".\n    \"\"\"\n    # Regex pattern to match strings that end with one or more alphanumeric characters\n    pattern = r'.*\\w+$'\n    if re.match(pattern, s):\n        return 'Accept'\n    else:\n        return 'Discard'\n\n# Test cases to verify the correctness of the function\nassert check_alphanumeric(\"dawood@\") == 'Discard', \"Test case 1 failed\"\nassert check_alphanumeric(\"skdmsam326\") == 'Accept', \"Test case 2 failed\"\nassert check_alphanumeric(\"cooltricks@\") == 'Discard', \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert check_alphanumeric(\"dawood@\") == 'Discard'",
      "assert check_alphanumeric(\"skdmsam326\") == 'Accept'",
      "assert check_alphanumeric(\"cooltricks@\") == 'Discard'"
    ]
  },
  {
    "mbpp_id": 861,
    "problem_statement": "Write a function to find all anagrams of a string in a given list of strings using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import defaultdict\n\ndef anagram_lambda(lst, s):\n    # Create a dictionary where keys are sorted versions of words and values are lists of original words\n    d = defaultdict(list)\n    \n    for word in lst:\n        # Sort the characters in each word and add it as a key to the dictionary with the word itself as the value\n        d[str(sorted(word))].append(word)\n        \n    # Filter out non-anagrams from the original list\n    return [item[0] for item in d.values() if str(sorted(item[0])) == str(sorted(s))]",
    "test_cases": [
      "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']",
      "assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]",
      "assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]"
    ]
  },
  {
    "mbpp_id": 862,
    "problem_statement": "Write a function to find the occurrences of n most common words in a given text.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\nimport re\n\ndef n_common_words(text,n=1):\n    # Split the text into words and count their occurrences using Counter\n    word_counts = Counter(re.findall(r'\\w+', text.lower()))\n    \n    # Sort the words by their counts in descending order\n    sorted_word_counts = sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Return the top 'n' most common words as a list of tuples (word, count)\n    return sorted_word_counts[:n]",
    "test_cases": [
      "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
      "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
      "assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"
    ]
  },
  {
    "mbpp_id": 863,
    "problem_statement": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\n\ndef find_longest_conseq_subseq(arr, n):\n    # Count all the occurrences of each number\n    count = Counter(arr)\n    \n    max_length = 0\n    \n    for num in range(n + 1):  # Iterate through numbers from 0 to n inclusive\n        if not count[num]:  # If the current number is not present\n            continue\n        \n        # Length of the current sequence starting at num\n        seq_len = 1\n        while count[num + 1]:\n            seq_len += 1\n            num += 1\n        \n        max_length = max(max_length, seq_len)\n    \n    return max_length",
    "test_cases": [
      "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3",
      "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4",
      "assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"
    ]
  },
  {
    "mbpp_id": 864,
    "problem_statement": "Write a function to find palindromes in a given list of strings using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def palindrome_lambda(lst):\n    return list(filter(lambda x: x == x[::-1], lst))",
    "test_cases": [
      "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']",
      "assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']",
      "assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']"
    ]
  },
  {
    "mbpp_id": 865,
    "problem_statement": "Write a function to print n-times a list using map function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef ntimes_list(lst: List[int], n: int) -> List[int]:\n    return list(map(lambda x: x * n, lst))",
    "test_cases": [
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]",
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]",
      "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"
    ]
  },
  {
    "mbpp_id": 866,
    "problem_statement": "Write a function to check whether the given month name contains 31 days or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_monthnumb(month_name):\n    months_with_31_days = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    \n    return month_name in months_with_31_days",
    "test_cases": [
      "assert check_monthnumb(\"February\")==False",
      "assert check_monthnumb(\"January\")==True",
      "assert check_monthnumb(\"March\")==True"
    ]
  },
  {
    "mbpp_id": 867,
    "problem_statement": "Write a python function to add a minimum number such that the sum of array becomes even.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Num(arr, n):\n    # Calculate the sum of all elements in the array\n    total_sum = sum(arr)\n    \n    # If the total sum is already even, no additional element is needed\n    if total_sum % 2 == 0:\n        return None\n    \n    # Find the smallest odd number greater than half of the total sum\n    target_odd_num = (total_sum // 2) + 1\n    \n    # Check if there's enough numbers to form an odd number greater than half\n    for num in arr:\n        if num > target_odd_num and num % 2 != 0:\n            return num\n    \n    # Return the smallest possible odd number if not found\n    return target_odd_num - 1\n\n# Test cases\nprint(min_Num([1,2,3,4,5,6,7,8,9], 9))  # Expected output: 1\nprint(min_Num([1,2,3,4,5,6,7,8], 8))     # Expected output: 2\nprint(min_Num([1,2,3], 3))               # Expected output: 2",
    "test_cases": [
      "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1",
      "assert min_Num([1,2,3,4,5,6,7,8],8) == 2",
      "assert min_Num([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 868,
    "problem_statement": "Write a python function to find the length of the last word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'length_Of_Last_Word' is not defined",
      "Test 2: FAIL - name 'length_Of_Last_Word' is not defined",
      "Test 3: FAIL - name 'length_Of_Last_Word' is not defined"
    ],
    "generated_code": "def length_of_last_word(s):\n    # Remove leading and trailing spaces from the input string\n    s = s.strip()\n    # Split the string into words based on space as delimiter\n    words = s.split(' ')\n    # Return the length of the last word if it exists, otherwise return 0\n    return len(words[-1]) if words else 0",
    "test_cases": [
      "assert length_Of_Last_Word(\"python language\") == 8",
      "assert length_Of_Last_Word(\"PHP\") == 3",
      "assert length_Of_Last_Word(\"\") == 0"
    ]
  },
  {
    "mbpp_id": 869,
    "problem_statement": "Write a function to remove sublists from a given list of lists, which are outside a given range.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_list_range(lst, start, end):\n    return [sublist for sublist in lst if start <= min(sublist) <= end]",
    "test_cases": [
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]",
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]",
      "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"
    ]
  },
  {
    "mbpp_id": 870,
    "problem_statement": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_positivenum(numbers):\n    return sum(x for x in numbers if x > 0)",
    "test_cases": [
      "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48",
      "assert sum_positivenum([10,15,-14,13,-18,12,-20])==50",
      "assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522"
    ]
  },
  {
    "mbpp_id": 871,
    "problem_statement": "Write a python function to check whether the given strings are rotations of each other or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    \n    # Concatenate string s1 with itself and compare it with s2\n    doubled_s1 = s1 + s1\n    return s2 in doubled_s1\n\n# Test Cases\nprint(are_Rotations(\"abc\", \"cba\"))   # Expected output: False\nprint(are_Rotations(\"abcd\", \"cdba\")) # Expected output: False\nprint(are_Rotations(\"abacd\", \"cdaba\")) # Expected output: True",
    "test_cases": [
      "assert are_Rotations(\"abc\",\"cba\") == False",
      "assert are_Rotations(\"abcd\",\"cdba\") == False",
      "assert are_Rotations(\"abacd\",\"cdaba\") == True"
    ]
  },
  {
    "mbpp_id": 872,
    "problem_statement": "Write a function to check if a nested list is a subset of another nested list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: unhashable type: 'list'"
    ],
    "generated_code": "def check_subset(subset_list, superset_list):\n    # Convert lists within lists into tuples for easier comparison\n    subset_set = set(map(tuple, subset_list))\n    superset_set = set(superset_list)\n    \n    # Check if all elements in subset are present in superset\n    return superset_set.issuperset(subset_set)\n\n# Test cases\nprint(check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]], [[1, 3], [13,15,17]]))  # Expected output: True\nprint(check_subset([[1, 2], [2, 3], [3, 4], [5, 6]], [[3, 4], [5, 6]]))  # Expected output: True\nprint(check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]], [[[3, 4], [5, 6]]]))  # Expected output: False",
    "test_cases": [
      "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True",
      "assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True",
      "assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False"
    ]
  },
  {
    "mbpp_id": 873,
    "problem_statement": "Write a function to solve the fibonacci sequence using recursion.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def fibonacci(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_cases": [
      "assert fibonacci(7) == 13",
      "assert fibonacci(8) == 21",
      "assert fibonacci(9) == 34"
    ]
  },
  {
    "mbpp_id": 874,
    "problem_statement": "Write a python function to check if the string is a concatenation of another string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_Concat(str1, str2):\n    \"\"\"\n    Check if str1 can be formed by concatenating str2 multiple times.\n    \n    Parameters:\n        str1 (str): The first concatenated string.\n        str2 (str): The second string used for concatenation.\n        \n    Returns:\n        bool: True if str1 can be formed from str2, otherwise False.\n    \"\"\"\n    # Concatenate str2 with itself until it's longer than str1\n    while len(str2) < len(str1):\n        str2 += str2\n    \n    # Compare the concatenated version of str2 with str1\n    return str2 == str1\n\n# Test cases\nprint(check_Concat(\"abcabcabc\", \"abc\"))  # Expected output: True\nprint(check_Concat(\"abcab\", \"abc\"))      # Expected output: False\nprint(check_Concat(\"aba\", \"ab\"))         # Expected output: False",
    "test_cases": [
      "assert check_Concat(\"abcabcabc\",\"abc\") == True",
      "assert check_Concat(\"abcab\",\"abc\") == False",
      "assert check_Concat(\"aba\",\"ab\") == False"
    ]
  },
  {
    "mbpp_id": 875,
    "problem_statement": "Write a function to find the minimum difference in the tuple pairs of given tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_difference(tuples_list):\n    # Sort each tuple pair\n    sorted_pairs = [tuple(sorted(pair)) for pair in tuples_list]\n    \n    # Calculate the differences between consecutive sorted pairs and find the minimum\n    min_diff = float('inf')\n    for i in range(1, len(sorted_pairs)):\n        diff = sorted_pairs[i][0] - sorted_pairs[i-1][0]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff",
    "test_cases": [
      "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1",
      "assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2",
      "assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6"
    ]
  },
  {
    "mbpp_id": 876,
    "problem_statement": "Write a python function to find lcm of two positive integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'math' is not defined"
    ],
    "generated_code": "def lcm(x, y):\n    return x * y // math.gcd(x, y)\n\n# Example usage:\nprint(lcm(4, 6))   # Expected output: 12\nprint(lcm(15, 17)) # Expected output: 255\nprint(lcm(2, 6))   # Expected output: 6",
    "test_cases": [
      "assert lcm(4,6) == 12",
      "assert lcm(15,17) == 255",
      "assert lcm(2,6) == 6"
    ]
  },
  {
    "mbpp_id": 877,
    "problem_statement": "Write a python function to sort the given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sort_String(s):\n    # Convert the input string into a list of characters\n    char_list = list(s)\n    # Sort the character list in alphabetical order\n    char_list.sort()\n    # Join the sorted list back into a string and convert it to uppercase\n    result = ''.join(char_list).upper()\n    # Return the sorted string\n    return result",
    "test_cases": [
      "assert sort_String(\"cba\") == \"abc\"",
      "assert sort_String(\"data\") == \"aadt\"",
      "assert sort_String(\"zxy\") == \"xyz\""
    ]
  },
  {
    "mbpp_id": 878,
    "problem_statement": "Write a function to check if the given tuple contains only k elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_tuples(test_tup, required_k):\n    # Check if the length of the test tuple matches the required number of elements\n    if len(test_tup) != required_k:\n        return False\n    else:\n        # Convert both tuples into sets and compare their sizes\n        return set(test_tup) == set(range(min(test_tup), max(test_tup)+1))\n\n# Test cases\nprint(check_tuples((3, 5, 6, 5, 3, 6), [3, 6, 5]))  # Expected output: True\nprint(check_tuples((4, 5, 6, 4, 6, 5), [4, 5, 6]))  # Expected output: True\nprint(check_tuples((9, 8, 7, 6, 8, 9), [9, 8, 1]))  # Expected output: False",
    "test_cases": [
      "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True",
      "assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True",
      "assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False"
    ]
  },
  {
    "mbpp_id": 879,
    "problem_statement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    pattern = r\"^(?=.*a).*b$\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return 'Not matched!'",
    "test_cases": [
      "assert text_match(\"aabbbbd\") == 'Not matched!'",
      "assert text_match(\"aabAbbbc\") == 'Not matched!'",
      "assert text_match(\"accddbbjjjb\") == 'Found a match!'"
    ]
  },
  {
    "mbpp_id": 880,
    "problem_statement": "Write a python function to find number of solutions in quadratic equation.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Check_Solution' is not defined",
      "Test 2: FAIL - name 'Check_Solution' is not defined",
      "Test 3: FAIL - name 'Check_Solution' is not defined"
    ],
    "generated_code": "import math\n\ndef check_solution(a, b, c):\n    # Calculate discriminant\n    disc = b**2 - 4*a*c\n    \n    if disc < 0:\n        return \"No solutions\"\n    elif disc == 0:\n        return \"1 solution\"\n    else:\n        sqrt_disc = math.sqrt(disc)\n        x1 = (-b + sqrt_disc) / (2 * a)\n        x2 = (-b - sqrt_disc) / (2 * a)\n        return str(int(x1)) + \" solutions\" if int(x1) == x1 else str(int(x1)) + \" and \" + str(int(x2))\n\n# Test Cases\nprint(check_solution(2,5,2))  # Output: \"2 solutions\"\nprint(check_solution(1,1,1))  # Output: \"No solutions\"\nprint(check_solution(1,2,1))  # Output: \"1 solution\"",
    "test_cases": [
      "assert Check_Solution(2,5,2) == \"2 solutions\"",
      "assert Check_Solution(1,1,1) == \"No solutions\"",
      "assert Check_Solution(1,2,1) == \"1 solution\""
    ]
  },
  {
    "mbpp_id": 881,
    "problem_statement": "Write a function to find the sum of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_even_odd(numbers):\n    sum_evens = 0\n    sum_odds = 0\n    \n    for num in numbers:\n        if num % 2 == 0:\n            sum_evens += num\n        else:\n            sum_odds += num\n            \n    return sum_evens + sum_odds",
    "test_cases": [
      "assert sum_even_odd([1,3,5,7,4,1,6,8])==5",
      "assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3",
      "assert sum_even_odd([1,5,7,9,10])==11"
    ]
  },
  {
    "mbpp_id": 882,
    "problem_statement": "Write a function to caluclate perimeter of a parallelogram.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def parallelogram_perimeter(a,b):\n    # calculate and return the perimeter of the parallelogram\n    return 2 * (a + b)",
    "test_cases": [
      "assert parallelogram_perimeter(10,20)==400",
      "assert parallelogram_perimeter(15,20)==600",
      "assert parallelogram_perimeter(8,9)==144"
    ]
  },
  {
    "mbpp_id": 883,
    "problem_statement": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 and num % n == 0]",
    "test_cases": [
      "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]",
      "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]",
      "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]"
    ]
  },
  {
    "mbpp_id": 884,
    "problem_statement": "Write a python function to check whether all the bits are within a given range or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def all_Bits_Set_In_The_Given_Range(num, start_bit, end_bit):\n    \"\"\"\n    Check if all bits in the number 'num' fall within the specified range [start_bit, end_bit].\n    \n    Parameters:\n    num (int): The number to be checked.\n    start_bit (int): The starting bit of the range.\n    end_bit (int): The ending bit of the range.\n    \n    Returns:\n    bool: True if all bits from start_bit to end_bit inclusive are set in num, otherwise False.\n    \"\"\"\n    mask = ((1 << end_bit) - 1) & (~((1 << start_bit) - 1)) # Create a bitmask for the range [start_bit, end_bit]\n    return num & mask == mask # Check if num has at least one bit set in the masked value\n    \n# Test Cases\nprint(all_Bits_Set_In_The_Given_Range(10,2,1))  # Expected output: True\nprint(all_Bits_Set_In_The_Given_Range(5,2,4))   # Expected output: False\nprint(all_Bits_Set_In_The_Given_Range(22,2,3))  # Expected output: True",
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True ",
      "assert all_Bits_Set_In_The_Given_Range(5,2,4) == False",
      "assert all_Bits_Set_In_The_Given_Range(22,2,3) == True "
    ]
  },
  {
    "mbpp_id": 885,
    "problem_statement": "Write a python function to check whether the two given strings are isomorphic to each other or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Isomorphic(str1, str2):\n    # Check if both strings have the same length and all characters in one string map to unique characters in the other.\n    if len(str1) != len(str2):\n        return False\n    \n    mapping = {}\n    \n    for char1, char2 in zip(str1, str2):\n        if char1 not in mapping:\n            if char2 in mapping.values():\n                return False\n            mapping[char1] = char2\n        elif mapping[char1] != char2:\n            return False\n            \n    return True\n\n# Test cases\nprint(is_Isomorphic(\"paper\", \"title\"))  # Expected output: True\nprint(is_Isomorphic(\"ab\", \"ba\"))        # Expected output: True\nprint(is_Isomorphic(\"ab\", \"aa\"))        # Expected output: False",
    "test_cases": [
      "assert is_Isomorphic(\"paper\",\"title\") == True",
      "assert is_Isomorphic(\"ab\",\"ba\") == True",
      "assert is_Isomorphic(\"ab\",\"aa\") == False"
    ]
  },
  {
    "mbpp_id": 886,
    "problem_statement": "Write a function to add all the numbers in a list and divide it with the length of the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_num(numbers):\n    total = sum(numbers)\n    return total / len(numbers)",
    "test_cases": [
      "assert sum_num((8, 2, 3, 0, 7))==4.0",
      "assert sum_num((-10,-20,-30))==-20.0",
      "assert sum_num((19,15,18))==17.333333333333332"
    ]
  },
  {
    "mbpp_id": 887,
    "problem_statement": "Write a python function to check whether the given number is odd or not using bitwise operator.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_odd(n):\n    \"\"\"\n    Check if the given integer n is odd.\n    \n    Parameters:\n    n (int): The integer to check\n    \n    Returns:\n    bool: True if n is odd, False otherwise\n    \"\"\"\n    # Using bitwise AND operation with 1 to check the least significant bit\n    return (n & 1) == 1",
    "test_cases": [
      "assert is_odd(5) == True",
      "assert is_odd(6) == False",
      "assert is_odd(7) == True"
    ]
  },
  {
    "mbpp_id": 888,
    "problem_statement": "Write a function to substract the elements of the given nested tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def substract_elements(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append((tup1[i][0] - tup2[i][0], tup1[i][1] - tup2[i][1]))\n    return tuple(result)",
    "test_cases": [
      "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))",
      "assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))",
      "assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))"
    ]
  },
  {
    "mbpp_id": 889,
    "problem_statement": "Write a function to reverse each list in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def reverse_list_lists(lst):\n    return [[x for x in reversed(y)] for y in lst]",
    "test_cases": [
      "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]",
      "assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]",
      "assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]"
    ]
  },
  {
    "mbpp_id": 890,
    "problem_statement": "Write a python function to find the index of an extra element present in one sorted array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Extra(arr1, arr2, n):\n    i = 0\n    for j in range(n):\n        if arr1[j] != arr2[i]:\n            break\n        i += 1\n    return i",
    "test_cases": [
      "assert find_Extra([1,2,3,4],[1,2,3],3) == 3",
      "assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4",
      "assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5"
    ]
  },
  {
    "mbpp_id": 891,
    "problem_statement": "Write a python function to check whether the given two numbers have same number of digits or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def same_Length(num1, num2):\n    # Convert numbers to strings and compare their length\n    if len(str(num1)) == len(str(num2)):\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert same_Length(12,1) == False",
      "assert same_Length(2,2) == True",
      "assert same_Length(10,20) == True"
    ]
  },
  {
    "mbpp_id": 892,
    "problem_statement": "Write a function to remove multiple spaces in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_spaces(input_str):\n    # Splitting the input string into a list of words, then joining them with one space between each word\n    return ' '.join(input_str.split())\n\n# Test cases\nprint(remove_spaces('python  program'))  # Expected output: 'python program'\nprint(remove_spaces('python   programming    language'))  # Expected output: 'python programming language'\nprint(remove_spaces('python                     program'))  # Expected output: 'python program'",
    "test_cases": [
      "assert remove_spaces('python  program')==('python program')",
      "assert remove_spaces('python   programming    language')==('python programming language')",
      "assert remove_spaces('python                     program')==('python program')"
    ]
  },
  {
    "mbpp_id": 893,
    "problem_statement": "Write a python function to get the last element of each sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Extract' is not defined",
      "Test 2: FAIL - name 'Extract' is not defined",
      "Test 3: FAIL - name 'Extract' is not defined"
    ],
    "generated_code": "def extract(lst):\n    return [sublist[-1] for sublist in lst]\n\n# Test cases\nprint(extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])) # Output: [3, 5, 9]\nprint(extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']])); # Output: ['z', 'm', 'b', 'v']\nprint(extract([[1, 2, 3], [4, 5]])) # Output: [3, 5]",
    "test_cases": [
      "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]",
      "assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']",
      "assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]"
    ]
  },
  {
    "mbpp_id": 894,
    "problem_statement": "Write a function to convert the given string of float type into tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def float_to_tuple(string_of_floats):\n    # Split the input string by commas and convert each substring to float\n    converted_list = [float(x) for x in string_of_floats.split(\",\")]\n    # Convert the list to a tuple\n    result_tuple = tuple(converted_list)\n    return result_tuple",
    "test_cases": [
      "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)",
      "assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)",
      "assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)"
    ]
  },
  {
    "mbpp_id": 895,
    "problem_statement": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sum_subseq(arr):\n    incl = arr[0]\n    excl = 0\n    for i in range(1, len(arr)):\n        new_excl = max(incl, excl)\n        incl = excl + arr[i]\n        excl = new_excl\n    return max(incl, excl)\n\n# Test cases\nprint(max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6])) # Expected output: 26\nprint(max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7])) # Expected output: 28\nprint(max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21])) # Expected output: 44",
    "test_cases": [
      "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26",
      "assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28",
      "assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44"
    ]
  },
  {
    "mbpp_id": 896,
    "problem_statement": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_list_last(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_cases": [
      "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ",
      "assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] ",
      "assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] "
    ]
  },
  {
    "mbpp_id": 897,
    "problem_statement": "Write a python function to check whether the word is present in a given sentence or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Word_Present(sentence, word):\n    # Split the sentence into words and check if the word is in the list of words\n    words = sentence.split()\n    if word.lower() in [w.lower() for w in words]:\n        return True\n    else:\n        return False",
    "test_cases": [
      "assert is_Word_Present(\"machine learning\",\"machine\") == True",
      "assert is_Word_Present(\"easy\",\"fun\") == False",
      "assert is_Word_Present(\"python language\",\"code\") == False"
    ]
  },
  {
    "mbpp_id": 898,
    "problem_statement": "Write a function to extract specified number of elements from a given list, which follow each other continuously.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_elements(lst, n):\n    # Check if the length of the list is less than the required count\n    if len(lst) < n:\n        return []\n    else:\n        # Return a sublist containing the first 'n' elements\n        return lst[:n]\n\n# Test cases\nprint(extract_elements([1, 1, 3, 4, 4, 5, 6, 7], 2))  # Expected output: [1, 4]\nprint(extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4))  # Expected output: [4]\nprint(extract_elements([0, 0, 0, 0, 0], 5))  # Expected output: [0]",
    "test_cases": [
      "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]",
      "assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]",
      "assert extract_elements([0,0,0,0,0],5)==[0]"
    ]
  },
  {
    "mbpp_id": 899,
    "problem_statement": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(nums, n):\n    # Check if the array has at least 4 elements\n    if len(nums) < 4:\n        return False\n    \n    # Initialize pointers for left and right corners\n    l = 0\n    r = n - 1\n    \n    while l < r:\n        # Compare corner elements and move the appropriate pointer\n        if nums[l] > nums[r]:\n            temp = nums[l]\n            nums[l] = nums[r]\n            nums[r] = temp\n            l += 1\n            r -= 1\n        elif nums[l] <= nums[r]:\n            l += 1\n            \n    # If all elements in the subarray [l, r-1] are non-decreasing,\n    # it means the entire array can be sorted by picking corner elements.\n    return l == r\n\n# Test cases\nprint(check([3,2,1,2,3,4], 6))  # Expected output: True\nprint(check([2,1,4,5,1], 5))    # Expected output: True\nprint(check([1,2,2,1,2,3], 6))  # Expected output: True",
    "test_cases": [
      "assert check([3,2,1,2,3,4],6) == True",
      "assert check([2,1,4,5,1],5) == True",
      "assert check([1,2,2,1,2,3],6) == True"
    ]
  },
  {
    "mbpp_id": 900,
    "problem_statement": "Write a function where a string will start with a specific number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def match_num(string):\n    return string.startswith(('1', '2', '3', '4', '5'))",
    "test_cases": [
      "assert match_num('5-2345861')==True",
      "assert match_num('6-2345861')==False",
      "assert match_num('78910')==False"
    ]
  },
  {
    "mbpp_id": 901,
    "problem_statement": "Write a function to find the smallest multiple of the first n numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'reduce' is not defined",
      "Test 2: FAIL - name 'reduce' is not defined",
      "Test 3: FAIL - name 'reduce' is not defined"
    ],
    "generated_code": "import math\ndef smallest_multiple(n):\n    # Calculate factorial of n and multiply it with powers of prime factors up to sqrt(n)\n    return int(math.factorial(n) * reduce(lambda x,y: x*y, [i for i in range(2,int(math.sqrt(n))+1) if not n % i], 1))",
    "test_cases": [
      "assert smallest_multiple(13)==360360",
      "assert smallest_multiple(2)==2",
      "assert smallest_multiple(1)==1"
    ]
  },
  {
    "mbpp_id": 902,
    "problem_statement": "Write a function to combine two dictionaries by adding values for common keys.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'w' is not defined",
      "Test 2: FAIL - name 'w' is not defined",
      "Test 3: FAIL - name 'w' is not defined"
    ],
    "generated_code": "def add_dict(dict_a, dict_b):\n    result = {}\n    # Add all items from dict_a and update existing ones in result\n    result.update({k: v + w for k, v in dict_a.items() if k in dict_b})\n    # Add all items from dict_b, keeping only unique keys\n    result.update({k: w + v for k, v in dict_b.items()})\n    return result",
    "test_cases": [
      "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) ",
      "assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) ",
      "assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})"
    ]
  },
  {
    "mbpp_id": 903,
    "problem_statement": "Write a python function to count the total unset bits from 1 to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'count_Unset_Bits' is not defined",
      "Test 2: FAIL - name 'count_Unset_Bits' is not defined",
      "Test 3: FAIL - name 'count_Unset_Bits' is not defined"
    ],
    "generated_code": "def count_unset_bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count('1') == 0:\n            count += 1\n    return count",
    "test_cases": [
      "assert count_Unset_Bits(2) == 1",
      "assert count_Unset_Bits(5) == 4",
      "assert count_Unset_Bits(14) == 17"
    ]
  },
  {
    "mbpp_id": 904,
    "problem_statement": "Write a function to return true if the given number is even else return false.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def even_num(num):\n    return num % 2 == 0",
    "test_cases": [
      "assert even_num(13.5)==False",
      "assert even_num(0)==True",
      "assert even_num(-9)==False"
    ]
  },
  {
    "mbpp_id": 905,
    "problem_statement": "Write a python function to find the sum of squares of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sum_of_square(n):\n    total = 0\n    for i in range(n + 1):\n        total += int((n * (n - i)) / (i + 1))\n    return total",
    "test_cases": [
      "assert sum_of_square(4) == 70",
      "assert sum_of_square(5) == 252",
      "assert sum_of_square(2) == 6"
    ]
  },
  {
    "mbpp_id": 906,
    "problem_statement": "Write a function to extract year, month and date from a url by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef extract_date(url):\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, url)\n    if match:\n        return [match.group(1), match.group(2), match.group(3)]\n    else:\n        return None\n\n# Test cases\nprint(extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\")) # Should print ['2016', '09', '02']\nprint(extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\")) # Should print ['2020', '11', '03']\nprint(extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\")) # Should print ['2020', '12', '29']",
    "test_cases": [
      "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]",
      "assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]",
      "assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]"
    ]
  },
  {
    "mbpp_id": 907,
    "problem_statement": "Write a function to print the first n lucky numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lucky_num(n):\n    lucky_numbers = []\n    i = 1\n    while len(lucky_numbers) < n:\n        if is_lucky(i):\n            lucky_numbers.append(i)\n        i += 1\n    return lucky_numbers[:n]\n\ndef is_lucky(num):\n    while num > 1 and num % 2 == 0:\n        num //= 2\n    return num == 1",
    "test_cases": [
      "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] ",
      "assert lucky_num(5)==[1, 3, 7, 9, 13]",
      "assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]"
    ]
  },
  {
    "mbpp_id": 908,
    "problem_statement": "Write a function to find the fixed point in the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - find_fixed_point() takes 1 positional argument but 2 were given",
      "Test 2: FAIL - find_fixed_point() takes 1 positional argument but 2 were given",
      "Test 3: FAIL - find_fixed_point() takes 1 positional argument but 2 were given"
    ],
    "generated_code": "def find_fixed_point(arr):\n    for i in range(len(arr)):\n        if arr[i] == i:\n            return i\n    return -1\n\n# Test cases\nprint(find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100])) # Output: 3\nprint(find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8])) # Output: -1\nprint(find_fixed_point([0, 2, 5, 8, 17])) # Output: 0",
    "test_cases": [
      "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3",
      "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1",
      "assert find_fixed_point([0, 2, 5, 8, 17],5) == 0"
    ]
  },
  {
    "mbpp_id": 909,
    "problem_statement": "Write a function to find the previous palindrome of a specified number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def previous_palindrome(num):\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    \n    # Subtract one from the reversed number\n    prev_palindrome = int(reversed_num) - 1\n    \n    # Return the integer representation of the previous palindrome\n    return int(prev_palindrome)",
    "test_cases": [
      "assert previous_palindrome(99)==88",
      "assert previous_palindrome(1221)==1111",
      "assert previous_palindrome(120)==111"
    ]
  },
  {
    "mbpp_id": 910,
    "problem_statement": "Write a function to validate a gregorian date.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'datetime' is not defined",
      "Test 2: FAIL - name 'datetime' is not defined",
      "Test 3: FAIL - name 'datetime' is not defined"
    ],
    "generated_code": "def check_date(day, month, year):\n    try:\n        datetime.datetime(year, month, day)\n        return True\n    except ValueError:\n        return False",
    "test_cases": [
      "assert check_date(11,11,2002)==True",
      "assert check_date(13,11,2002)==False",
      "assert check_date('11','11','2002')==True"
    ]
  },
  {
    "mbpp_id": 911,
    "problem_statement": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: 'int' object is not iterable"
    ],
    "generated_code": "import heapq\n\ndef maximum_product(arr):\n    \"\"\"\n    Finds the maximum product of any triplet in an integer array.\n    \n    Args:\n    arr : List[int] -- An array of integers\n    \n    Returns:\n    int -- The maximum product of any triplet in the array\n    \"\"\"\n    # Using two heaps - one for the largest values and one for the smallest negative values\n    positive_max = max_heap = heapq.nlargest(3, arr)\n    negative_min = min_heap = heapq.nsmallest(3, arr)\n    \n    # Maximum product can be either from the three largest numbers or from the two smallest (most negative) and the largest number\n    return max(max(x * y * z for x, y, z in zip(positive_max, positive_max[1:], positive_max[2:])), \n               max(x * y * z for x, y, z in zip(negative_min, negative_min[1], negative_min[2])), \n               max(x * y * z for x, y, z in zip(positive_max, negative_min)))\n\n# Example check function to verify the solution with provided data points\ndef check_solution():\n    assert maximum_product([12, 74, 9, 50, 61, 41]) == 225700\n    assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58]) == 414375\n    assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]) == 2520\n    print(\"All test cases passed.\")\n\ncheck_solution()",
    "test_cases": [
      "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700",
      "assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375",
      "assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520"
    ]
  },
  {
    "mbpp_id": 912,
    "problem_statement": "Write a function to find ln, m lobb number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "import math\n\ndef lobb_num(n, k):\n    result = 1\n    for i in range(k):\n        result *= n - i\n        result //= i + 1\n    return result\n\n# Test cases\nassert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert int(lobb_num(5, 3)) == 35",
      "assert int(lobb_num(3, 2)) == 5",
      "assert int(lobb_num(4, 2)) == 20"
    ]
  },
  {
    "mbpp_id": 913,
    "problem_statement": "Write a function to check for a number at the end of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: 'abcdef'",
      "Test 2: FAIL - invalid literal for int() with base 10: 'abcdef7'",
      "Test 3: FAIL - invalid literal for int() with base 10: 'abc'"
    ],
    "generated_code": "def end_num(s):\n    return s.endswith(str(int(s.split()[-1]))) if len(s.split()) > 0 else False",
    "test_cases": [
      "assert end_num('abcdef')==False",
      "assert end_num('abcdef7')==True",
      "assert end_num('abc')==False"
    ]
  },
  {
    "mbpp_id": 914,
    "problem_statement": "Write a python function to check whether the given string is made up of two alternating characters or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Two_Alter(s):\n    for i in range(0, len(s) - 1):\n        if s[i] == s[i + 1]:\n            continue\n        elif s[i] != s[i + 1]:\n            return True\n    return False\n\n# Test cases\nprint(is_Two_Alter(\"abab\"))  # Expected output: True\nprint(is_Two_Alter(\"aaaa\"))  # Expected output: False\nprint(is_Two_Alter(\"xyz\"))   # Expected output: False",
    "test_cases": [
      "assert is_Two_Alter(\"abab\") == True",
      "assert is_Two_Alter(\"aaaa\") == False",
      "assert is_Two_Alter(\"xyz\") == False"
    ]
  },
  {
    "mbpp_id": 915,
    "problem_statement": "Write a function to rearrange positive and negative numbers in a given array using lambda function.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef rearrange_numbs(nums: List[int]) -> List[int]:\n    # Separate positive and negative numbers using lambda functions\n    pos_nums = sorted(filter(lambda x: x > 0, nums))\n    neg_nums = sorted(filter(lambda x: x < 0, nums))\n\n    # Combine both lists starting with the first positive number followed by negative numbers\n    return pos_nums + neg_nums[::]\n\n# Test cases\nprint(rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10]))  # Expected output: [2, 5, 7, 8, 9, -10, -3, -1]\nprint(rearrange_numbs([10,15,14,13,-18,12,-20]))      # Expected output: [10, 12, 13, 14, 15, -20, -18]\nprint(rearrange_numbs([-20,20,-10,10,-30,30]))        # Expected output: [10, 20, 30, -30, -20, -10]",
    "test_cases": [
      "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]",
      "assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]",
      "assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"
    ]
  },
  {
    "mbpp_id": 916,
    "problem_statement": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def find_triplet_array(arr, target_sum, length_of_array):\n    arr.sort()  # Sort the array to make it easier to use two-pointer technique.\n    \n    for i in range(length_of_array - 2):  # Iterate through all elements except the last two.\n        left = i + 1\n        right = length_of_array - 1\n        \n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            \n            if current_sum == target_sum:\n                return [arr[i], arr[left], arr[right]]  # Return the found triplets.\n            elif current_sum < target_sum:\n                left += 1  # Move the left pointer to the right.\n            else:\n                right -= 1  # Move the right pointer to the left.\n                \n    return None  # Return None if no triplet with the required sum is found.\n\n# Test cases\nprint(find_triplet_array([1, 4, 45, 6, 10, 8], 6, 6))  # Expected output: [4, 6, 10]\nprint(find_triplet_array([12, 3, 5, 2, 6, 9], 6, 7))  # Expected output: [12, 3, 9]\nprint(find_triplet_array([1, 2, 3, 4, 5], 5, 5))      # Expected output: [1, 2, 3]",
    "test_cases": [
      "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)",
      "assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)",
      "assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)"
    ]
  },
  {
    "mbpp_id": 917,
    "problem_statement": "Write a function to find the sequences of one upper case letter followed by lower case letters.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 're' is not defined"
    ],
    "generated_code": "def text_uppercase_lowercase(text):\n    # Define the pattern for matching \"one uppercase letter followed by lower case letters\"\n    pattern = r\"^[A-Z][a-z]+$\"\n\n    # Search for the pattern in the given text\n    result = re.search(pattern, text)\n\n    # Check if the search was successful and return the appropriate message\n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_uppercase_lowercase(\"AaBbGg\"))  # Expected output: 'Found a match!'\nprint(text_uppercase_lowercase(\"aA\"))       # Expected output: 'Not matched!'\nprint(text_uppercase_lowercase(\"PYTHON\"))   # Expected output: 'Not matched!'",
    "test_cases": [
      "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')",
      "assert text_uppercase_lowercase(\"aA\")==('Not matched!')",
      "assert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')"
    ]
  },
  {
    "mbpp_id": 918,
    "problem_statement": "Write a function to count coin change.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def coin_change(coins, amount, capacity):\n    dp = [0] + [float('inf')] * amount\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1",
    "test_cases": [
      "assert coin_change([1, 2, 3],3,4)==4",
      "assert coin_change([4,5,6,7,8,9],6,9)==2",
      "assert coin_change([4,5,6,7,8,9],6,4)==1"
    ]
  },
  {
    "mbpp_id": 919,
    "problem_statement": "Write a python function to multiply all items in the list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def multiply_list(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result",
    "test_cases": [
      "assert multiply_list([1,-2,3]) == -6",
      "assert multiply_list([1,2,3,4]) == 24",
      "assert multiply_list([3,1,2,3]) == 18"
    ]
  },
  {
    "mbpp_id": 920,
    "problem_statement": "Write a function to remove all tuples with all none values in the given tuple list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_tuple(tuple_list):\n    # Filter out all tuples containing only None values\n    filtered_tuples = [t for t in tuple_list if not all(x is None for x in t)]\n    return filtered_tuples\n\n# Test cases\nprint(remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )]))  # Expected output: [(None, 2), (3, 4), (12, 3)]\nprint(remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None, 1)]))  # Expected output: [(3, 6), (17, 3), (None, 1)]\nprint(remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None)]))  # Expected output: [(1, 2), (2, None), (3, None), (24, 3)]",
    "test_cases": [
      "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'",
      "assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'",
      "assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'"
    ]
  },
  {
    "mbpp_id": 921,
    "problem_statement": "Write a function to perform chunking of tuples each of size n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def chunk_tuples(tuples_list, chunk_size):\n    \"\"\"\n    Splits a list of tuples into chunks of specified size.\n    \n    Parameters:\n    tuples_list (list): A list of tuples.\n    chunk_size (int): The size of each chunk.\n    \n    Returns:\n    list: A list of tuples, where each tuple is a chunk from the input list.\n    \"\"\"\n    return [tuples_list[i:i + chunk_size] for i in range(0, len(tuples_list), chunk_size)]\n\n# Check function with provided data points\nassert chunk_tuples([(10, 4, 5, 6, 7, 6, 8, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9)], 3) == [\n        ([10, 4, 5], [6, 7, 6], [8, 3, 4]),\n        ([1, 2], [3, 4], [5, 6]), \n        ([7, 8, 9], [], []) # Since we're working with tuples and no third element exists\n    ]\nassert chunk_tuples([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\nassert chunk_tuples([11, 14, 16, 17, 19, 21, 22, 25], 4) == [[11, 14, 16, 17], [19, 21, 22, 25]]\n\nprint(\"All tests passed!\")",
    "test_cases": [
      "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]",
      "assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]",
      "assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]"
    ]
  },
  {
    "mbpp_id": 922,
    "problem_statement": "Write a function to find a pair with the highest product from a given array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "from typing import List\nimport itertools\n\ndef max_product(nums: List[int]) -> tuple:\n    \"\"\"\n    Finds the maximum product pair in a list of integers.\n    \n    Args:\n    nums: A list of integers\n    \n    Returns:\n    A tuple containing the two numbers that have the maximum product and their product.\n    If there is an even number of negative values, returns the pair closest to zero as per their absolute value.\n    \"\"\"\n    # Generate all possible pairs using itertools.combinations\n    for i, j in itertools.combinations(nums, 2):\n        if i * j > 0:  # Only consider positive products\n            break\n    else:\n        return min((i, j) for i, j in itertools.permutations(nums)), min(i * j for i, j in itertools.product(nums, repeat=2))\n        \n    return (i, j)\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    assert max_product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8), \"Test case 1 failed\"\n    assert max_product([0, -1, -2, -4, 5, 0, -6]) == (-4, -6), \"Test case 2 failed\"\n    assert max_product([1, 3, 5, 6, 8, 9]) == (8, 9), \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()",
    "test_cases": [
      "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)",
      "assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)",
      "assert max_product([1, 3, 5, 6, 8, 9])==(8,9)"
    ]
  },
  {
    "mbpp_id": 923,
    "problem_statement": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def super_seq(str1, str2, m, n):\n    # Create a DP table where dp[i][j] represents the length of the shortest subsequence in str1[0..i-1]\n    # which is also a subsequence of str2[0..j-1].\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    \n    # Fill the dp table from bottom-right corner.\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    # The answer is at dp[m][n].\n    return dp[m][n]\n\n# Test cases\nprint(super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7))  # Expected output: 9\nprint(super_seq(\"feek\", \"eke\", 4, 3))       # Expected output: 5\nprint(super_seq(\"PARRT\", \"RTA\", 5, 3))      # Expected output: 6",
    "test_cases": [
      "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9",
      "assert super_seq(\"feek\", \"eke\", 4, 3) == 5",
      "assert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6"
    ]
  },
  {
    "mbpp_id": 924,
    "problem_statement": "Write a function to find maximum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_of_two(x, y):\n    return x if x > y else y",
    "test_cases": [
      "assert max_of_two(10,20)==20",
      "assert max_of_two(19,15)==19",
      "assert max_of_two(-10,-20)==-10"
    ]
  },
  {
    "mbpp_id": 925,
    "problem_statement": "Write a python function to calculate the product of all the numbers of a given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def mutiple_tuple(tup):\n    # Initialize result variable\n    res = 1\n    \n    # Iterate through each number in the tuple and multiply it with the result\n    for num in tup:\n        res *= num\n        \n    # Return the final product\n    return res",
    "test_cases": [
      "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864",
      "assert mutiple_tuple((1,2,3)) == 6",
      "assert mutiple_tuple((-2,-4,-6)) == -48"
    ]
  },
  {
    "mbpp_id": 926,
    "problem_statement": "Write a function to find n-th rencontres number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'rendezvous_number' is not defined. Did you mean: 'rencontres_number'?"
    ],
    "generated_code": "import math\n\ndef rencontres_number(n, k):\n    if k == 0:\n        return math.factorial(n)\n    else:\n        return math.comb(n + k - 1, k)\n\n# Test cases\nprint(rendezvous_number(7, 2))  # Expected output: 924\nprint(rendezvous_number(3, 0))   # Expected output: 2\nprint(rendezvous_number(3, 1))   # Expected output: 3",
    "test_cases": [
      "assert rencontres_number(7, 2) == 924",
      "assert rencontres_number(3, 0) == 2",
      "assert rencontres_number(3, 1) == 3"
    ]
  },
  {
    "mbpp_id": 927,
    "problem_statement": "Write a function to calculate the height of the given binary tree.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'root' is not defined",
      "Test 2: FAIL - name 'root1' is not defined",
      "Test 3: FAIL - name 'root2' is not defined"
    ],
    "generated_code": "def max_height(node):\n    if node is None:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        return max(left_height, right_height) + 1",
    "test_cases": [
      "assert (max_height(root)) == 3",
      "assert (max_height(root1)) == 5 ",
      "assert (max_height(root2)) == 4"
    ]
  },
  {
    "mbpp_id": 928,
    "problem_statement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def change_date_format(date_str):\n    # Split the input string into year, month and day parts\n    ymd = date_str.split('-')\n    \n    # Reverse the list to put day first before converting to integer\n    reversed_parts = [int(ymd[2]), int(ymd[1]), int(ymd[0])]\n    \n    # Convert reversed parts back to string in original order\n    return '-'.join(map(str, reversed_parts))\n\n# Test cases\nprint(change_date_format('2026-01-02'))  # Expected output: '02-01-2026'\nprint(change_date_format('2021-01-04'))  # Expected output: '04-01-2021'\nprint(change_date_format('2030-06-06'))  # Expected output: '06-06-2030'",
    "test_cases": [
      "assert change_date_format('2026-01-02')=='02-01-2026'",
      "assert change_date_format('2021-01-04')=='04-01-2021'",
      "assert change_date_format('2030-06-06')=='06-06-2030'"
    ]
  },
  {
    "mbpp_id": 929,
    "problem_statement": "Write a function to count repeated items of a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_tuplex(tup, item):\n    return tup.count(item)",
    "test_cases": [
      "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3",
      "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2",
      "assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4"
    ]
  },
  {
    "mbpp_id": 930,
    "problem_statement": "Write a function that matches a string that has an a followed by zero or more b's by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef text_match(text):\n    # Define the regex pattern to find \"a\" followed by zero or more \"b\"s\n    pattern = r'a(b*)'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases to verify the correctness of the function\nassert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
    "test_cases": [
      "assert text_match(\"msb\") == 'Not matched!'",
      "assert text_match(\"a0c\") == 'Found a match!'",
      "assert text_match(\"abbc\") == 'Found a match!'"
    ]
  },
  {
    "mbpp_id": 931,
    "problem_statement": "Write a function to calculate the sum of series 1³+2³+3³+….+n³.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_series(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i**3\n    return total",
    "test_cases": [
      "assert sum_series(7)==784",
      "assert sum_series(5)==225",
      "assert sum_series(15)==14400"
    ]
  },
  {
    "mbpp_id": 932,
    "problem_statement": "Write a function to remove duplicate words from a given list of strings.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_duplic_list(list_str):\n    return list(set(list_str))\n\n# Test cases\nprint(remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])) # Should print ['Python', 'Exercises', 'Practice', 'Solution']\nprint(remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])) # Should print ['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nprint(remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])) # Should print ['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
    "test_cases": [
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']",
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']",
      "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']"
    ]
  },
  {
    "mbpp_id": 933,
    "problem_statement": "Write a function to convert camel case string to snake case string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef camel_to_snake(string):\n    # Split the input string on uppercase letters and join with an underscore\n    return '_'.join(re.findall('[A-Z][^A-Z]*', string)).lower()",
    "test_cases": [
      "assert camel_to_snake('GoogleAssistant') == 'google_assistant'",
      "assert camel_to_snake('ChromeCast') == 'chrome_cast'",
      "assert camel_to_snake('QuadCore') == 'quad_core'"
    ]
  },
  {
    "mbpp_id": 934,
    "problem_statement": "Write a function to find the nth delannoy number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - NameError: name 'dealnumoy_num' is not defined. Did you mean: 'dealnnoy_num'?"
    ],
    "generated_code": "def dealnnoy_num(n, k):\n    \"\"\"\n    Calculate the n-th Delannoy number for grid size k x k.\n    \n    Parameters:\n    n (int): The order of the Delannoy number to calculate.\n    k (int): The dimension of the square grid (k x k).\n    \n    Returns:\n    int: The value of the n-th Delannoy number.\n    \"\"\"\n    if n == 0:\n        return 1\n    dp = [[0] * (k + 1) for _ in range(k + 1)]\n    dp[0][0] = 1\n    \n    for i in range(k + 1):\n        for j in range(i + 1):\n            if i > 0:\n                dp[i][j] += dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j - 1]\n                \n    result = sum(dp[n])\n    return result\n\n# Test cases\nprint(dealnumoy_num(3, 4))  # Expected output: 129\nprint(dealnumoy_num(3, 3))  # Expected output: 63\nprint(dealnumoy_num(4, 5))  # Expected output: 681",
    "test_cases": [
      "assert dealnnoy_num(3, 4) == 129",
      "assert dealnnoy_num(3, 3) == 63",
      "assert dealnnoy_num(4, 5) == 681"
    ]
  },
  {
    "mbpp_id": 935,
    "problem_statement": "Write a function to calculate the sum of series 1²+2²+3²+….+n².",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def series_sum(n):\n    return int((n * (n + 1) * (2 * n + 1)) / 6)",
    "test_cases": [
      "assert series_sum(6)==91",
      "assert series_sum(7)==140",
      "assert series_sum(12)==650"
    ]
  },
  {
    "mbpp_id": 936,
    "problem_statement": "Write a function to re-arrange the given tuples based on the given ordered list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - ValueError: 5 is not in list"
    ],
    "generated_code": "def re_arrange_tuples(tuples_list, order_list):\n    # Re-arranging the tuple list according to the provided order list.\n    sorted_tuples = [(i[0], i[1]) for i in tuples_list if i[0] == order_list.index(i[0])]\n    sorted_tuples.extend([tup for tup in tuples_list if tup not in sorted_tuples])\n    \n    return sorted_tuples\n\n# Test Cases:\nprint(re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3])) # Should print [(1, 9), (4, 3), (2, 10), (3, 2)]\nprint(re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3])) # Should print [(3, 11), (4, 3), (2, 10), (3, 11)]\nprint(re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6])) # Should print [(2, 4), (5, 7), (3, 8), (6, 3)]",
    "test_cases": [
      "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]",
      "assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]",
      "assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]"
    ]
  },
  {
    "mbpp_id": 937,
    "problem_statement": "Write a function to count the most common character in a given string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_char(s):\n    from collections import Counter\n    char_count = Counter(s)\n    return char_count.most_common(1)[0][0]",
    "test_cases": [
      "assert max_char(\"hello world\")==('l')",
      "assert max_char(\"hello \")==('l')",
      "assert max_char(\"python pr\")==('p')"
    ]
  },
  {
    "mbpp_id": 938,
    "problem_statement": "Write a function to find three closest elements from three sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "import heapq\n\ndef find_closet(arr1, arr2, arr3, k, n1, n2):\n    heap = [(arr1[i] + arr2[i] + arr3[i], i) for i in range(n1+n2)]\n    heapq.heapify(heap)\n\n    result = []\n    while len(result) < k and heap:\n        dist, idx = heapq.heappop(heap)\n        if n1 > idx >= 0:\n            result.append((arr1[idx], arr2[idx], arr3[idx]))\n        if n2 > idx >= 0:\n            result.append((arr1[idx], arr2[idx], arr3[idx]))\n\n    # Find the k smallest distances\n    return tuple(sorted(list(set(map(lambda x: x[0], result)))), key=lambda x: x[k-1])\n\n# Example usage\nprint(find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2))  # Output: (10, 15, 10)\nprint(find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5))  # Output: (24, 22, 23)\nprint(find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2))  # Output: (11, 16, 11)",
    "test_cases": [
      "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)",
      "assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)",
      "assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)"
    ]
  },
  {
    "mbpp_id": 939,
    "problem_statement": "Write a function to sort a list of dictionaries using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['make'])",
    "test_cases": [
      "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]",
      "assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])",
      "assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])"
    ]
  },
  {
    "mbpp_id": 940,
    "problem_statement": "Write a function to sort the given array by using heap sort.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def heapify(arr, n, i): \n    largest = i  \n    l = 2 * i + 1     \n    r = 2 * i + 2     \n      \n    # See if left child of root exists and is greater than root\n    if l < n and arr[i] < arr[l]: \n        largest = l  \n\n    # See if right child of root exists and is greater than root\n    if r < n and arr[largest] < arr[r]: \n        largest = r  \n\n    # Change root, if needed\n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i]  # swap \n\n        # Heapify the root.\n        heapify(arr, n, largest) \n\n\ndef heap_sort(arr): \n    n = len(arr) \n  \n    # Build a maxheap.\n    for i in range(n//2 - 1, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements\n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap \n        heapify(arr, i, 0) \n\n# Example usage:\narr = [12, 2, 4, 5, 2, 3]\nheap_sort(arr)\nprint(arr)  # Output: [2, 2, 3, 4, 5, 12]\n\narr = [32, 14, 5, 6, 7, 19]\nheap_sort(arr)\nprint(arr)  # Output: [5, 6, 7, 14, 19, 32]\n\narr = [21, 15, 29, 78, 65]\nheap_sort(arr)\nprint(arr)  # Output: [15, 21, 29, 65, 78]",
    "test_cases": [
      "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]",
      "assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]",
      "assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]"
    ]
  },
  {
    "mbpp_id": 941,
    "problem_statement": "Write a function to count the elements in a list until an element is a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_elim(lst):\n    # Initialize counter\n    count = 0\n    for item in lst:\n        if isinstance(item, tuple):\n            break\n        else:\n            count += 1\n    return count\n\n# Test cases\nassert count_elim([10,20,30,(10,20),40]) == 3\nassert count_elim([10,(20,30),(10,20),40]) == 1\nassert count_elim([(10,(20,30,(10,20),40))]) == 0",
    "test_cases": [
      "assert count_elim([10,20,30,(10,20),40])==3",
      "assert count_elim([10,(20,30),(10,20),40])==1",
      "assert count_elim([(10,(20,30,(10,20),40))])==0"
    ]
  },
  {
    "mbpp_id": 942,
    "problem_statement": "Write a function to check if any list element is present in the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_element(list_a, list_b):\n    # Check if any element of list_a is in list_b using all() and any()\n    return not all(i not in list_b for i in list_a)\n\n# Test cases\nprint(check_element([4, 5, 7, 9, 3], [6, 7, 10, 11]))  # Expected output: True\nprint(check_element([1, 2, 3, 4], [4, 6, 7, 8, 9]))    # Expected output: True\nprint(check_element([3, 2, 1, 4, 5], [9, 8, 7, 6]))    # Expected output: False",
    "test_cases": [
      "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True",
      "assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True",
      "assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False"
    ]
  },
  {
    "mbpp_id": 943,
    "problem_statement": "Write a function to combine two given sorted lists using heapq module.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import heapq\n\ndef combine_lists(list1, list2):\n    # Use heapq.merge() to merge and sort the two lists.\n    return list(heapq.merge(*map(sorted, [list1, list2])))\n\n# Test cases\nprint(combine_lists([1, 3, 5, 7, 9, 11], [0, 2, 4, 6, 8, 10]))  # Expected output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11]))  # Expected output: [1, 2, 3, 5, 5, 6, 7, 8, 9, 11]\nprint(combine_lists([1, 3, 7], [2, 4, 6]))  # Expected output: [1, 2, 3, 4, 6, 7]",
    "test_cases": [
      "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
      "assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]",
      "assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]"
    ]
  },
  {
    "mbpp_id": 944,
    "problem_statement": "Write a function to separate and print the numbers and their position of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def num_position(input_string):\n    # Split the input string into words based on spaces\n    words = input_string.split()\n    \n    # Initialize variables for tracking number count and sum\n    num_count = 0\n    num_sum = 0\n    \n    # Iterate through each word in the list\n    for i in range(len(words)):\n        # Check if the current element is a digit\n        if words[i].isdigit():\n            num_count += 1\n            num_sum += int(words[i])\n    \n    return num_count",
    "test_cases": [
      "assert num_position(\"there are 70 flats in this apartment\")==10",
      "assert num_position(\"every adult have 32 teeth\")==17",
      "assert num_position(\"isha has 79 chocolates in her bag\")==9"
    ]
  },
  {
    "mbpp_id": 945,
    "problem_statement": "Write a function to convert the given tuples into set.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def tuple_to_set(input_tuple):\n    \"\"\"\n    Convert a tuple into a set.\n    \n    Parameters:\n        input_tuple (tuple): The original tuple to be converted.\n        \n    Returns:\n        set: A set containing unique elements from the input tuple.\n    \"\"\"\n    return set(input_tuple)",
    "test_cases": [
      "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}",
      "assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}",
      "assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}"
    ]
  },
  {
    "mbpp_id": 946,
    "problem_statement": "Write a function to find the most common elements and their counts of a specified text.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from collections import Counter\nimport re\n\ndef most_common_elem(text, n=5):\n    # Find all words in the text using regex\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_counts = Counter(words)\n    \n    # Return the top 'n' most common words along with their counts\n    return word_counts.most_common(n)\n\n# Test cases to verify the correctness of the function\nprint(most_common_elem('lkseropewdssafsdfafkpwe',3))\nprint(most_common_elem('lkseropewdssafsdfafkpwe',2))\nprint(most_common_elem('lkseropewdssafsdfafkpwe',7))",
    "test_cases": [
      "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] ",
      "assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]",
      "assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"
    ]
  },
  {
    "mbpp_id": 947,
    "problem_statement": "Write a python function to find the length of the shortest word.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def len_log(words_list):\n    # Find the minimum length among all words in the list\n    min_length = min(len(word) for word in words_list)\n    return min_length\n\n# Test cases\nprint(len_log([\"win\", \"lose\", \"great\"]))  # Expected output: 3\nprint(len_log([\"a\", \"ab\", \"abc\"]))       # Expected output: 1\nprint(len_log([\"12\", \"12\", \"1234\"]))     # Expected output: 2",
    "test_cases": [
      "assert len_log([\"win\",\"lose\",\"great\"]) == 3",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 1",
      "assert len_log([\"12\",\"12\",\"1234\"]) == 2"
    ]
  },
  {
    "mbpp_id": 948,
    "problem_statement": "Write a function to get an item of a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def get_item(tup, index):\n    if isinstance(index, int) and -len(tup) <= index < len(tup):\n        return tup[index]\n    else:\n        raise IndexError(\"Index out of range\")\n\n# Test cases\nprint(get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3)) # Expected output: ('e')\ntry:\n    print(get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), -5))\nexcept Exception as e:\n    print(e) # Expected output: Index out of range\ntry:\n    print(get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), -6))\nexcept Exception as e:\n    print(e) # Expected output: Index out of range",
    "test_cases": [
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')",
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')",
      "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')"
    ]
  },
  {
    "mbpp_id": 949,
    "problem_statement": "Write a function to sort the given tuple list basis the total digits in tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - invalid literal for int() with base 10: '('",
      "Test 2: FAIL - invalid literal for int() with base 10: '('",
      "Test 3: FAIL - invalid literal for int() with base 10: '('"
    ],
    "generated_code": "def sort_list(tpl_list):\n    return sorted(tpl_list, key=lambda x: sum(int(digit) for digit in str(x)))",
    "test_cases": [
      "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'",
      "assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'",
      "assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'"
    ]
  },
  {
    "mbpp_id": 950,
    "problem_statement": "Write a function to display sign of the chinese zodiac for given year.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - '>=' not supported between instances of 'int' and 'str'",
      "Test 2: FAIL - '>=' not supported between instances of 'int' and 'str'",
      "Test 3: FAIL - '>=' not supported between instances of 'int' and 'str'"
    ],
    "generated_code": "def chinese_zodiac(year):\n    # Mapping from year to Chinese zodiac animal and its corresponding month\n    zodiac_map = {\n        'Ox': [1964, 1976],\n        'Tiger': [1965, 1977],\n        'Rat': [1966, 1978],\n        'Monkey': [1967, 1979],\n        'Rooster': [1968, 1980],\n        'Dog': [1969, 1981],\n        'Pig': [1970, 1982],\n        'Rabbit': [1971, 1983],\n        'Dragon': [1972, 1984],\n        'Snake': [1973, 1985],\n        'Horse': [1974, 1986]\n    }\n    \n    # Find the range in which the given year falls\n    start_year, end_year = min(zodiac_map.keys()), max(zodiac_map.values())\n    \n    if year >= start_year and year <= end_year:\n        return list(zodiac_map.keys())[zodiac_map[year].index(year) % len(zodiac_map)]\n    else:\n        return None  # Return None if the year is not within the expected range",
    "test_cases": [
      "assert chinese_zodiac(1997)==('Ox')",
      "assert chinese_zodiac(1998)==('Tiger')",
      "assert chinese_zodiac(1994)==('Dog')"
    ]
  },
  {
    "mbpp_id": 951,
    "problem_statement": "Write a function to find the maximum of similar indices in two lists of tuples.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_similar_indices(list1, list2):\n    result = []\n    for i, j in zip(list1, list2):\n        if i == j:\n            result.append((i, j))\n    return result",
    "test_cases": [
      "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]",
      "assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]",
      "assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]"
    ]
  },
  {
    "mbpp_id": 952,
    "problem_statement": "Write a function to compute the value of ncr mod p.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def nCr_mod_p(n, r, p):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result % p\n    \n    numerator = factorial(n)\n    denominator = (factorial(r) * factorial(n - r)) % p\n    return (numerator * pow(denominator, p - 2, p)) % p",
    "test_cases": [
      "assert nCr_mod_p(10, 2, 13) == 6",
      "assert nCr_mod_p(11, 3, 14) == 11",
      "assert nCr_mod_p(18, 14, 19) == 1"
    ]
  },
  {
    "mbpp_id": 953,
    "problem_statement": "Write a python function to find the minimun number of subsets with distinct elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def subset(arr,n):\n    # Initialize count and set for storing unique elements\n    count = 0\n    unique_set = set()\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Check if current element is already present in the set\n        if arr[i] not in unique_set:\n            # If it's not, increment count and add the element to the set\n            count += 1\n            unique_set.add(arr[i])\n    \n    # Return the minimum number of subsets required\n    return count",
    "test_cases": [
      "assert subset([1, 2, 3, 4],4) == 1",
      "assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2",
      "assert subset([1, 2, 3 ],3) == 1"
    ]
  },
  {
    "mbpp_id": 954,
    "problem_statement": "Write a function that gives profit amount if the given amount has profit else return none.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def profit_amount(prices, cost):\n    # Calculate the profit and check if it's positive.\n    profit = prices - cost\n    # Return None if there is no profit, otherwise return the profit value.\n    return None if profit <= 0 else profit\n\n# Test cases to verify the correctness of the function.\nprint(profit_amount(1500, 1200))  # Expected output: 300\nprint(profit_amount(100, 200))    # Expected output: None\nprint(profit_amount(2000, 5000))  # Expected output: None",
    "test_cases": [
      "assert profit_amount(1500,1200)==300",
      "assert profit_amount(100,200)==None",
      "assert profit_amount(2000,5000)==None"
    ]
  },
  {
    "mbpp_id": 955,
    "problem_statement": "Write a function to find out, if the given number is abundant.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_abundant(n):\n    divisors_sum = sum([i for i in range(1, n) if n % i == 0])\n    return divisors_sum > n",
    "test_cases": [
      "assert is_abundant(12)==True",
      "assert is_abundant(13)==False",
      "assert is_abundant(9)==False"
    ]
  },
  {
    "mbpp_id": 956,
    "problem_statement": "Write a function to split the given string at uppercase letters by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef split_list(s):\n    # Use regular expression to find all uppercase letters in the input string\n    uppercase_letters = re.findall(r'[A-Z]', s)\n    \n    # Join the uppercase letters with spaces and convert to list of strings\n    result = ' '.join(uppercase_letters).split()\n    \n    return result",
    "test_cases": [
      "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']",
      "assert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']",
      "assert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']"
    ]
  },
  {
    "mbpp_id": 957,
    "problem_statement": "Write a python function to get the position of rightmost set bit.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_First_Set_Bit_Pos(n):\n    i = 0\n    while n > 0:\n        if n & 1 == 1:\n            break\n        n >>= 1\n        i += 1\n    return i",
    "test_cases": [
      "assert get_First_Set_Bit_Pos(12) == 3",
      "assert get_First_Set_Bit_Pos(18) == 2",
      "assert get_First_Set_Bit_Pos(16) == 5"
    ]
  },
  {
    "mbpp_id": 958,
    "problem_statement": "Write a function to convert an integer into a roman numeral.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def int_to_roman(num):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_cases": [
      "assert int_to_roman(1)==(\"I\")",
      "assert int_to_roman(50)==(\"L\")",
      "assert int_to_roman(4)==(\"IV\")"
    ]
  },
  {
    "mbpp_id": 959,
    "problem_statement": "Write a python function to find the average of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Average' is not defined",
      "Test 2: FAIL - name 'Average' is not defined",
      "Test 3: FAIL - name 'Average' is not defined"
    ],
    "generated_code": "def average(numbers):\n    # Calculate sum of all numbers in the list\n    total = sum(numbers)\n    \n    # Return the average by dividing the total by the number of elements\n    return round(total / len(numbers), 2)\n\n# Test cases\nprint(average([15, 9, 55, 41, 35, 20, 62, 49]))  # Expected output: 35.75\nprint(average([4, 5, 1, 2, 9, 7, 10, 8]))        # Expected output: 5.75\nprint(average([1,2,3]))                           # Expected output: 2.0",
    "test_cases": [
      "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75",
      "assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75",
      "assert Average([1,2,3]) == 2"
    ]
  },
  {
    "mbpp_id": 960,
    "problem_statement": "Write a function to solve tiling problem.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_noOfways(n):\n    # Base case initialization\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        dp = [0] * (n + 1)\n        dp[1], dp[2] = 1, 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]\n\n# Test cases\nprint(get_noOfways(4))   # Output should be 3\nprint(get_noOfways(3))   # Output should be 2\nprint(get_noOfways(5))   # Output should be 5",
    "test_cases": [
      "assert get_noOfways(4)==3",
      "assert get_noOfways(3)==2",
      "assert get_noOfways(5)==5"
    ]
  },
  {
    "mbpp_id": 961,
    "problem_statement": "Write a function to convert a roman numeral to an integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def roman_to_int(s):\n    # Define Roman numeral values\n    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    \n    total = prev_value = 0\n    \n    for char in s[::-1]:\n        current_value = roman_values[char]\n        \n        if current_value < prev_value:\n            total -= current_value\n        else:\n            total += current_value\n        \n        prev_value = current_value\n    \n    return total",
    "test_cases": [
      "assert roman_to_int('MMMCMLXXXVI')==3986",
      "assert roman_to_int('MMMM')==4000",
      "assert roman_to_int('C')==100"
    ]
  },
  {
    "mbpp_id": 962,
    "problem_statement": "Write a python function to find the sum of all even natural numbers within the range l and r.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_Even(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total_sum += num\n    return total_sum",
    "test_cases": [
      "assert sum_Even(2,5) == 6",
      "assert sum_Even(3,8) == 18",
      "assert sum_Even(4,6) == 10"
    ]
  },
  {
    "mbpp_id": 963,
    "problem_statement": "Write a function to calculate the discriminant value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - division by zero"
    ],
    "generated_code": "def discriminant_value(a,b,c):\n    \"\"\"Given coefficients of quadratic equation ax^2 + bx + c = 0, returns the discriminant.\"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"two solutions\", -b/(2*a), (b**2-4*a*c)**(1/2)/(2*a))\n    elif discriminant == 0:\n        return (\"one solution\", -b/(2*a), None)\n    else:\n        return (\"no real solution\", None, None)",
    "test_cases": [
      "assert discriminant_value(4,8,2)==(\"Two solutions\",32)",
      "assert discriminant_value(5,7,9)==(\"no real solution\",-131)",
      "assert discriminant_value(0,0,9)==(\"one solution\",0)"
    ]
  },
  {
    "mbpp_id": 964,
    "problem_statement": "Write a python function to check whether the length of the word is even or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def word_len(word):\n    # Check if the length of the input string is even\n    return len(word) % 2 == 0",
    "test_cases": [
      "assert word_len(\"program\") == False",
      "assert word_len(\"solution\") == True",
      "assert word_len(\"data\") == True"
    ]
  },
  {
    "mbpp_id": 965,
    "problem_statement": "Write a function to convert camel case string to snake case string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def camel_to_snake(s):\n    return ''.join('_' + char.lower() if char.isupper() else char for char in s).replace('_', '')",
    "test_cases": [
      "assert camel_to_snake('PythonProgram')==('python_program')",
      "assert camel_to_snake('pythonLanguage')==('python_language')",
      "assert camel_to_snake('ProgrammingLanguage')==('programming_language')"
    ]
  },
  {
    "mbpp_id": 966,
    "problem_statement": "Write a function to remove an empty tuple from a list of tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def remove_empty(lst):\n    return [item for item in lst if item]",
    "test_cases": [
      "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  ",
      "assert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  ",
      "assert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  "
    ]
  },
  {
    "mbpp_id": 967,
    "problem_statement": "Write a python function to accept the strings which contains all vowels.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check(s):\n    # Define vowels\n    vowels = set('aeiouAEIOU')\n    \n    # Convert string to lowercase and get its unique characters as a set\n    chars_set = set(s.lower())\n    \n    # Check if the set of characters in the string is equal to the vowels set\n    return \"accepted\" if chars_set == vowels else \"not accepted\"\n\n# Test cases\nprint(check(\"SEEquoiaL\"))  # Expected output: \"accepted\"\nprint(check('program'))    # Expected output: \"not accepted\"\nprint(check('fine'))       # Expected output: \"not accepted\"",
    "test_cases": [
      "assert check(\"SEEquoiaL\") == 'accepted'",
      "assert check('program') == \"not accepted\"",
      "assert check('fine') == \"not accepted\""
    ]
  },
  {
    "mbpp_id": 968,
    "problem_statement": "Write a python function to find maximum possible value for the given periodic function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import numpy as np\n\ndef floor_Max(a, b, c):\n    \"\"\"\n    This function calculates the largest integer less than or equal to the division of 'a' by 'b',\n    and then subtracts the remainder from 'c'.\n    \n    Parameters:\n    a (int): The numerator in the division.\n    b (int): The denominator in the division.\n    c (int): The initial value before the subtraction of the remainder.\n    \n    Returns:\n    int: The result after performing the specified operation on the inputs.\n    \"\"\"\n    # Calculate the quotient when 'a' is divided by 'b'\n    q = a // b\n    \n    # Subtract the remainder of 'a' divided by 'b' from 'c'\n    max_value = c - ((a % b) if b != 0 else 0)\n    \n    return max_value",
    "test_cases": [
      "assert floor_Max(11,10,9) == 9",
      "assert floor_Max(5,7,4) == 2",
      "assert floor_Max(2,2,1) == 1"
    ]
  },
  {
    "mbpp_id": 969,
    "problem_statement": "Write a function to join the tuples if they have similar initial elements.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - TypeError: object of type 'itertools._grouper' has no len()"
    ],
    "generated_code": "def join_tuples(lst):\n    from itertools import groupby\n    \n    # Sort the list based on the first element of each tuple\n    lst.sort(key=lambda x: x[0])\n    \n    # Group adjacent tuples with the same first element together\n    grouped = [[item] for item in lst]\n    \n    # Create new groups where two tuples share an element and sort them\n    for key, group in groupby(grouped, lambda x: x[0]):\n        temp_group = []\n        for i in range(1, len(group)):\n            if group[i][0] == group[i - 1][0]:\n                temp_group.append(group[i])\n            else:\n                temp_group.sort(key=lambda x: x[-1])  # Ensure descending order for sorting\n                yield temp_group\n                temp_group = [group[i]]\n        \n        temp_group.sort(key=lambda x: x[-1])  # Ensure descending order for sorting\n        yield temp_group\n\n# Example usage\nprint(list(join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)])))",
    "test_cases": [
      "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]",
      "assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]",
      "assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]"
    ]
  },
  {
    "mbpp_id": 970,
    "problem_statement": "Write a function to find minimum of two numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def min_of_two(a, b):\n    return min(a, b)",
    "test_cases": [
      "assert min_of_two(10,20)==10",
      "assert min_of_two(19,15)==15",
      "assert min_of_two(-10,-20)==-20"
    ]
  },
  {
    "mbpp_id": 971,
    "problem_statement": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def maximum_segments(n, a, b, c):\n    \"\"\"\n    Calculate the maximum number of segments that can be formed with lengths 'a', 'b', and 'c'.\n    \n    Args:\n    n (int): Total length available for forming segments.\n    a (int): Length of the first segment.\n    b (int): Length of the second segment.\n    c (int): Length of the third segment.\n    \n    Returns:\n    int: Maximum number of segments that can be formed.\n    \"\"\"\n    if n < max(a, b, c):\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return min(max(a, b, c), n - max(b + c, a)) // (min(a, b, c))",
    "test_cases": [
      "assert maximum_segments(7, 5, 2, 5) == 2",
      "assert maximum_segments(17, 2, 1, 3) == 17",
      "assert maximum_segments(18, 16, 3, 6) == 6"
    ]
  },
  {
    "mbpp_id": 972,
    "problem_statement": "Write a function to concatenate the given two tuples to a nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def concatenate_nested(tuple1, tuple2):\n    # Concatenate the two tuples and create a new tuple with each element of the first tuple followed by each element of the second tuple\n    return (*tuple1, *tuple2)",
    "test_cases": [
      "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)",
      "assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)",
      "assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)"
    ]
  },
  {
    "mbpp_id": 973,
    "problem_statement": "Write a python function to left rotate the string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def left_rotate(s,n):\n    # Calculate effective rotation steps\n    n = n % len(s)\n    \n    # Perform the rotation\n    return s[-n:] + s[:-n]",
    "test_cases": [
      "assert left_rotate(\"python\",2) == \"thonpy\"   ",
      "assert left_rotate(\"bigdata\",3 ) == \"databig\" ",
      "assert left_rotate(\"hadoop\",1 ) == \"adooph\" "
    ]
  },
  {
    "mbpp_id": 974,
    "problem_statement": "Write a function to find the minimum total path sum in the given triangle.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef min_sum_path(triangle: List[List[int]]) -> int:\n    # Initialize memoization dictionary with base case for last row of the triangle\n    memo = {}\n    \n    def dfs(row_index, prev_row_index):\n        if row_index == len(triangle):\n            return 0\n        \n        if row_index not in memo and prev_row_index != -1:\n            # Recursively calculate the minimum path sum for each cell in the current row\n            memo[row_index] = min(dfs(row_index + 1, i) + triangle[row_index][i]\n                                  for i in range(len(triangle[row_index])))\n        \n        # If we have already computed the result for the current state, return it from memoization\n        elif row_index in memo and prev_row_index != -1:\n            return memo[row_index]\n        \n        else:\n            # Otherwise, compute the path sum as the smallest path sum of adjacent cells in the previous row plus the current cell's value\n            return dfs(row_index + 1, -1) + triangle[row_index][-1]\n    \n    return dfs(0, -1)",
    "test_cases": [
      "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6",
      "assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 ",
      "assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9"
    ]
  },
  {
    "mbpp_id": 511,
    "problem_statement": "Write a python function to find minimum sum of factors of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Min_Sum(n):\n    # Initialize the total sum to store the result\n    total_sum = 0\n    \n    # Loop through possible factors starting from 1 up to n-1\n    for i in range(1, n):\n        if n % i == 0:\n            # If i is a factor, add its value to the total sum\n            total_sum += i\n            \n    return total_sum",
    "test_cases": [
      "assert find_Min_Sum(12) == 7",
      "assert find_Min_Sum(105) == 15",
      "assert find_Min_Sum(2) == 2"
    ]
  },
  {
    "mbpp_id": 512,
    "problem_statement": "Write a function to count the element frequency in the mixed nested tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_element_freq(mixed_tuple):\n    import collections\n    result = collections.Counter()\n    for item in mixed_tuple:\n        if isinstance(item, tuple):\n            result.update(count_element_freq(item))\n        else:\n            result[item] += 1\n    return dict(result)\n\n# Test cases\nprint(count_element_freq((5, 6, (5, 6), 7, (8, 9), 9))) # Should return {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nprint(count_element_freq((6, 7, (6, 7), 8, (9, 10), 10))) # Should return {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nprint(count_element_freq((7, 8, (7, 8), 9, (10, 11), 11))) # Should return {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
    "test_cases": [
      "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
      "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
      "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
    ]
  },
  {
    "mbpp_id": 513,
    "problem_statement": "Write a function to convert tuple into list by adding the given string after every element.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - unsupported operand type(s) for +: 'int' and 'str'",
      "Test 2: FAIL - unsupported operand type(s) for +: 'int' and 'str'",
      "Test 3: FAIL - unsupported operand type(s) for +: 'int' and 'str'"
    ],
    "generated_code": "def add_str(tuple_input, str_addition):\n    # Convert tuple to list and then append each element with addition string\n    result = [element + str_addition for element in list(tuple_input)]\n    return result",
    "test_cases": [
      "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
      "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
      "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
    ]
  },
  {
    "mbpp_id": 514,
    "problem_statement": "Write a function to find the summation of tuple elements in the given tuple list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_elements(tuple_list):\n    total_sum = sum(element for element in tuple_list)\n    return total_sum\n\n# Test cases\nprint(sum_elements((7, 8, 9, 1, 10, 7)))  # Expected output: 42\nprint(sum_elements((1, 2, 3, 4, 5, 6)))   # Expected output: 21\nprint(sum_elements((11, 12 ,13 ,45, 14))) # Expected output: 95",
    "test_cases": [
      "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
      "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
      "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
    ]
  },
  {
    "mbpp_id": 515,
    "problem_statement": "Write a function to check if there is a subset with sum divisible by m.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from typing import List\n\ndef modular_sum(nums: List[int], mod: int, target: int) -> bool:\n    seen = {0}\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num % mod\n        complement = (current_sum - target + mod) % mod\n        \n        if complement in seen:\n            return True\n        \n        seen.add(current_sum)\n    \n    return False",
    "test_cases": [
      "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
      "assert modular_sum([1, 7], 2, 5) == False",
      "assert modular_sum([1, 6], 2, 5) == False"
    ]
  },
  {
    "mbpp_id": 516,
    "problem_statement": "Write a function to sort a list of elements using radix sort.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def radix_sort(arr):\n    max_num = max(arr)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    return arr\n\ndef counting_sort(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    for i in range(n):\n        arr[i] = output[i]\n\n# Test cases\nprint(radix_sort([15, 79, 25, 68, 37]))  # Expected output: [15, 25, 37, 68, 79]\nprint(radix_sort([9, 11, 8, 7, 3, 2]))   # Expected output: [2, 3, 7, 8, 9, 11]\nprint(radix_sort([36, 12, 24, 26, 29]))  # Expected output: [12, 24, 26, 29, 36]",
    "test_cases": [
      "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
      "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
      "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
    ]
  },
  {
    "mbpp_id": 517,
    "problem_statement": "Write a python function to find the largest postive number from the given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def largest_pos(nums):\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num",
    "test_cases": [
      "assert largest_pos([1,2,3,4,-1]) == 4",
      "assert largest_pos([0,1,2,-5,-1,6]) == 6",
      "assert largest_pos([0,0,1,0]) == 1"
    ]
  },
  {
    "mbpp_id": 518,
    "problem_statement": "Write a function to find the square root of a perfect number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef sqrt_root(num):\n    return int(math.sqrt(num))",
    "test_cases": [
      "assert sqrt_root(4)==2",
      "assert sqrt_root(16)==4",
      "assert sqrt_root(400)==20"
    ]
  },
  {
    "mbpp_id": 519,
    "problem_statement": "Write a function to calculate volume of a tetrahedron.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sqrt' is not defined",
      "Test 2: FAIL - name 'sqrt' is not defined",
      "Test 3: FAIL - name 'sqrt' is not defined"
    ],
    "generated_code": "def volume_tetrahedron(side_length):\n    \"\"\"\n    Calculate the volume of a regular tetrahedron.\n    \n    Parameters:\n    side_length (float): The length of each edge of the tetrahedron.\n    \n    Returns:\n    float: The volume of the tetrahedron.\n    \"\"\"\n    return (side_length ** 3) / (6 * sqrt(2))",
    "test_cases": [
      "assert volume_tetrahedron(10)==117.85",
      "assert volume_tetrahedron(15)==397.75",
      "assert volume_tetrahedron(20)==942.81"
    ]
  },
  {
    "mbpp_id": 520,
    "problem_statement": "Write a function to find the lcm of the given array elements.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import math\n\ndef get_lcm(arr):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n    \n    arr.sort()\n    lcm = arr[0]\n    for i in range(1, len(arr)):\n        lcm = lcm * (arr[i] // gcd(lcm, arr[i]))\n    return lcm",
    "test_cases": [
      "assert get_lcm([2, 7, 3, 9, 4]) == 252",
      "assert get_lcm([1, 2, 8, 3]) == 24",
      "assert get_lcm([3, 8, 4, 10, 5]) == 120"
    ]
  },
  {
    "mbpp_id": 521,
    "problem_statement": "Write a function to print check if the triangle is scalene or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def check_isosceles(a, b, c):\n    # Compare all sides of the triangle.\n    return a != b and b != c and c != a",
    "test_cases": [
      "assert check_isosceles(6,8,12)==True",
      "assert check_isosceles(6,6,12)==False",
      "assert check_isosceles(6,15,20)==True"
    ]
  },
  {
    "mbpp_id": 522,
    "problem_statement": "Write a function to find the longest bitonic subsequence for the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def lbs(arr):\n    n = len(arr)\n    \n    # Initialize variables\n    dp = [1] * n\n    inc = [False] * n\n    \n    # Fill in the DP table\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    inc[i] = inc[j]\n                elif dp[j] == dp[i]:\n                    inc[i] = True\n            \n    max_len = 0\n    for i in range(n):\n        if max_len < dp[i]:\n            max_len = dp[i]\n            ans = i\n        elif max_len == dp[i]:\n            if not inc[i]:\n                ans = -1\n                \n    return max_len",
    "test_cases": [
      "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
      "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
      "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
    ]
  },
  {
    "mbpp_id": 523,
    "problem_statement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_string(input_str):\n    def is_uppercase(char):\n        return char >= 'A' and char <= 'Z'\n    \n    def is_lowercase(char):\n        return char >= 'a' and char <= 'z'\n    \n    def is_number(char):\n        return char.isdigit()\n    \n    def valid_length(length):\n        return len(input_str) >= 8\n    \n    result = [\n        \"String must have 1 upper case character.\" if not any(is_uppercase(char) for char in input_str) else \"\",\n        \"String must have 1 number.\" if not any(is_number(char) for char in input_str) else \"\",\n        \"String length should be atleast 8.\" if not valid_length(len(input_str)) else \"\"\n    ]\n    \n    return result",
    "test_cases": [
      "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
      "assert check_string('123python')==['String must have 1 upper case character.']",
      "assert check_string('123Python')==['Valid string.']"
    ]
  },
  {
    "mbpp_id": 524,
    "problem_statement": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def max_sum_increasing_subsequence(arr, n):\n    # Initialize an empty list to store the maximum sum ending at each index\n    dp = [arr[0]] * n\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, n):\n        # Find the largest value less than arr[i] and add its value to dp[i]\n        dp[i] += max(dp[max(i - 1, 0)], arr[i])\n    \n    # Return the maximum value found in dp which is the result\n    return max(dp)",
    "test_cases": [
      "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
      "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
      "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
    ]
  },
  {
    "mbpp_id": 525,
    "problem_statement": "Write a python function to check whether two given lines are parallel or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'parallel_lines' is not defined",
      "Test 2: FAIL - name 'parallel_lines' is not defined",
      "Test 3: FAIL - name 'parallel_lines' is not defined"
    ],
    "generated_code": "def is_parallel(lines1, lines2):\n    # Extracting coefficients from line equations in the form ax + by = c\n    x1_coeff, y1_coeff, _ = lines1[0]\n    _, x2_coeff, _ = lines2[0]\n\n    # Check if the ratios of coefficients are equal for both lines\n    return x1_coeff / x2_coeff == y1_coeff / y2_coeff",
    "test_cases": [
      "assert parallel_lines([2,3,4], [2,3,8]) == True",
      "assert parallel_lines([2,3,4], [4,-3,8]) == False",
      "assert parallel_lines([3,3],[5,5]) == True"
    ]
  },
  {
    "mbpp_id": 526,
    "problem_statement": "Write a python function to capitalize first and last letters of each word of a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def capitalize_first_last_letters(input_string):\n    # Splitting the input string into words, then joining them back together with capitalized first and last characters\n    result = ' '.join([word[0].upper() + word[:-1] + word[-1].upper() if len(word) > 1 else word.upper() for word in input_string.split()])\n    return result",
    "test_cases": [
      "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
      "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
      "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
    ]
  },
  {
    "mbpp_id": 527,
    "problem_statement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def get_pairs_count(arr, k, n):\n    count = 0\n    arr.sort()  # Sort the array for better efficiency\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] + arr[right] == k:\n            count += 1\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] > k:\n            right -= 1\n        else:\n            left += 1\n            \n    return count",
    "test_cases": [
      "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
      "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
      "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
    ]
  },
  {
    "mbpp_id": 528,
    "problem_statement": "Write a function to find the list of lists with minimum length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_length(lists):\n    return min(zip(*lists), key=len)",
    "test_cases": [
      "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
      "assert min_length([[5], [15,20,25]])==(1, [5])"
    ]
  },
  {
    "mbpp_id": 529,
    "problem_statement": "Write a function to find the nth jacobsthal-lucas number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 5\n    else:\n        return jacobsthal_lucas(n-1) + jacobsthal_lucas(n-2)",
    "test_cases": [
      "assert jacobsthal_lucas(5) == 31",
      "assert jacobsthal_lucas(2) == 5",
      "assert jacobsthal_lucas(4) == 17"
    ]
  },
  {
    "mbpp_id": 530,
    "problem_statement": "Write a function to find the ration of negative numbers in an array of integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def negative_count(nums):\n    # Count the number of negative numbers in the list\n    count = sum(1 for num in nums if num < 0)\n    \n    # Calculate and return the ratio of negative numbers\n    return count / len(nums)\n\n# Test cases\nprint(negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))  # Expected output: 0.31\nprint(negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))   # Expected output: 0.31\nprint(negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17]))          # Expected output: 0.44",
    "test_cases": [
      "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
      "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
    ]
  },
  {
    "mbpp_id": 531,
    "problem_statement": "Write a function to find minimum number of coins that make a given value.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "def min_coins(coins, target, n):\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    \n    for i in range(1, target + 1):\n        for j in range(n):\n            if i >= coins[j]:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n                \n    return dp[target]\n\n# Test cases\nprint(min_coins([9, 6, 5, 1], 4, 11)) # Expected output: 2\nprint(min_coins([4, 5, 6, 7, 8, 9], 6, 9)) # Expected output: 1\nprint(min_coins([1, 2, 3], 3, 4)) # Expected output: 2",
    "test_cases": [
      "assert min_coins([9, 6, 5, 1] ,4,11)==2",
      "assert min_coins([4,5,6,7,8,9],6,9)==1",
      "assert min_coins([1, 2, 3],3,4)==2"
    ]
  },
  {
    "mbpp_id": 532,
    "problem_statement": "Write a function to check if the two given strings are permutations of each other.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'check_permutation' is not defined",
      "Test 2: FAIL - name 'check_permutation' is not defined",
      "Test 3: FAIL - name 'check_permutation' is not defined"
    ],
    "generated_code": "def is_permutation(str1, str2):\n    # Check if both strings have the same length\n    if len(str1) != len(str2):\n        return False\n    \n    # Create frequency dictionaries for both strings\n    from collections import Counter\n    counter1 = Counter(str1)\n    counter2 = Counter(str2)\n    \n    # Compare the frequency dictionaries\n    return counter1 == counter2\n\n# Test cases\nprint(is_permutation(\"abc\", \"cba\"))  # Expected output: True\nprint(is_permutation(\"test\", \"ttew\"))  # Expected output: False\nprint(is_permutation(\"xxyz\", \"yxzx\"))  # Expected output: True",
    "test_cases": [
      "assert check_permutation(\"abc\", \"cba\") == True",
      "assert check_permutation(\"test\", \"ttew\") == False",
      "assert check_permutation(\"xxyz\", \"yxzx\") == True"
    ]
  },
  {
    "mbpp_id": 533,
    "problem_statement": "Write a function to remove particular data type elements from the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_datatype(data_tuple, datatype):\n    # Filter out elements of the specified datatype and convert the result back into a tuple\n    filtered_tuple = tuple(element for element in data_tuple if not isinstance(element, datatype))\n    return filtered_tuple",
    "test_cases": [
      "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
      "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
      "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
    ]
  },
  {
    "mbpp_id": 534,
    "problem_statement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def search_literal(text, pattern):\n    if not text or not pattern:\n        return None, None\n    \n    start = 0\n    while True:\n        pos = text.find(pattern, start)\n        if pos == -1:\n            break\n        yield pos, pos + len(pattern) - 1\n        start = pos + 1\n    return None, None\n\n# Test cases\nprint(search_literal('python', 'python programming language')) # (0, 6)\nprint(search_literal('programming', 'python programming language')) # (7, 18)\nprint(search_literal('language', 'python programming language')) # (19, 27)",
    "test_cases": [
      "assert search_literal('python','python programming language')==(0,6)",
      "assert search_literal('programming','python programming language')==(7,18)",
      "assert search_literal('language','python programming language')==(19,27)"
    ]
  },
  {
    "mbpp_id": 535,
    "problem_statement": "Write a function to find the top or bottom surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def topbottom_surfacearea(radius):\n    \"\"\"\n    Calculate the surface area of the top and bottom surfaces of a cylinder.\n    \n    Parameters:\n    radius (float): The radius of the cylinder's base.\n    \n    Returns:\n    float: The total surface area of the top and bottom surfaces of the cylinder.\n    \"\"\"\n    # Surface area of one circular end is πr^2\n    end_area = 3.14 * (radius ** 2)\n    # Since there are two ends, multiply by 2\n    total_end_area = 2 * end_area\n    return total_end_area\n\n# Check function with provided data points\nassert abs(topbottom_surfacearea(10) - 314.15) < 1e-9\nassert abs(topbottom_surfacearea(5) - 78.54) < 1e-9\nassert abs(topbottom_surfacearea(4) - 50.26) < 1e-9",
    "test_cases": [
      "assert topbottom_surfacearea(10)==314.15000000000003",
      "assert topbottom_surfacearea(5)==78.53750000000001",
      "assert topbottom_surfacearea(4)==50.264"
    ]
  },
  {
    "mbpp_id": 536,
    "problem_statement": "Write a function to select the nth items of a list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def nth_items(lst,n):\n    return lst[n::n]",
    "test_cases": [
      "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
      "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
      "assert nth_items([14,16,19,15,17],4)==[14,17]"
    ]
  },
  {
    "mbpp_id": 537,
    "problem_statement": "Write a python function to find the first repeated word in a given string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def first_repeated_word(s):\n    \"\"\"\n    This function takes a string s as input and returns the first repeated word found in the string.\n    If no repeated word is found, it returns None.\n    \n    :param s: A string where we need to find the first repeated word.\n    :return: The first repeated word if present, otherwise None.\n    \"\"\"\n    words = set()\n    for word in s.split():\n        if word in words:\n            return word\n        else:\n            words.add(word)\n    return None\n\n# Test case 1\nassert first_repeated_word(\"ab ca bc ab\") == \"ab\"\n\n# Test case 2\nassert first_repeated_word(\"ab ca bc\") == \"None\"\n\n# Test case 3\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
    "test_cases": [
      "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
      "assert first_repeated_word(\"ab ca bc\") == 'None'",
      "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
    ]
  },
  {
    "mbpp_id": 538,
    "problem_statement": "Write a python function to convert a given string list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def string_list_to_tuple(string_list):\n    # Convert the input list of strings into a single string with all elements separated by spaces\n    combined_string = \" \".join(string_list)\n    # Split the combined string back into individual characters and then join them back together as a tuple\n    result_tuple = tuple(combined_string.split())\n    return result_tuple",
    "test_cases": [
      "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
      "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
    ]
  },
  {
    "mbpp_id": 539,
    "problem_statement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 2: FAIL - name 'basesnum_coresspondingnum' is not defined",
      "Test 3: FAIL - name 'basesnum_coresspondingnum' is not defined"
    ],
    "generated_code": "from typing import List\n\ndef basesnum_correspondingnum(bases: List[int], num: List[int]) -> List[int]:\n    return [x**y for x, y in zip(bases, num)]",
    "test_cases": [
      "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
      "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
      "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
    ]
  },
  {
    "mbpp_id": 540,
    "problem_statement": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from collections import Counter\n\ndef find_Diff(arr, n):\n    # Count the frequency of each number in the array\n    count = Counter(arr)\n    \n    # Find the maximum and minimum frequencies\n    max_freq = max(count.values())\n    min_freq = min(count.values())\n    \n    # Calculate the difference between the maximum and minimum frequencies\n    diff = max_freq - min_freq\n    \n    return diff",
    "test_cases": [
      "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
      "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
      "assert find_Diff([1,2,1,2],4) == 0"
    ]
  },
  {
    "mbpp_id": 541,
    "problem_statement": "Write a function to find if the given number is abundant or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: PASS - All Clear",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def check_abundant(n):\n    # Initialize sum of proper divisors\n    sum_div = 0\n    \n    # Iterate from 1 to n-1 and add all proper divisors\n    for i in range(1, int((n+1)/2)):\n        if n % i == 0:\n            sum_div += i\n            \n    # Check if the sum exceeds half of n\n    return sum_div > n\n\n# Test cases\nprint(check_abundant(12))  # Expected output: True\nprint(check_abundant(15))  # Expected output: False\nprint(check_abundant(18))  # Expected output: True",
    "test_cases": [
      "assert check_abundant(12) == True",
      "assert check_abundant(15) == False",
      "assert check_abundant(18) == True"
    ]
  },
  {
    "mbpp_id": 542,
    "problem_statement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import re\n\ndef fill_spaces(input_string):\n    # Replace spaces, commas, and dots with a colon\n    modified_string = re.sub(r'[ ,.]', ':', input_string)\n    return modified_string",
    "test_cases": [
      "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
      "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
      "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
    ]
  },
  {
    "mbpp_id": 543,
    "problem_statement": "Write a function to add two numbers and print number of digits of sum.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_digits(x, y):\n    # Calculate the sum of x and y\n    sum_ = x + y\n    \n    # Convert the sum to a string to easily count its length\n    str_sum = str(sum_)\n    \n    # Count the number of digits in the sum\n    num_digits = len(str_sum)\n    \n    return num_digits",
    "test_cases": [
      "assert count_digits(9875,10)==(4)",
      "assert count_digits(98759853034,100)==(11)",
      "assert count_digits(1234567,500)==(7)"
    ]
  },
  {
    "mbpp_id": 544,
    "problem_statement": "Write a function to flatten the tuple list to a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def flatten_tuple(tup):\n    result = []\n    for sublist in tup:\n        for item in sublist:\n            result.append(item)\n    return ''.join(result)\n\n# Test cases\nprint(flatten_tuple([['1', '4', '6'], ['5', '8'], ['2', '9'], ['1', '10']]))  # Output: \"1 4 6 5 8 2 9 1 10\"\nprint(flatten_tuple([['2', '3', '4'], ['6', '9'], ['3', '2'], ['2', '11']]))  # Output: \"2 3 4 6 9 3 2 2 11\"\nprint(flatten_tuple([['14', '21', '9'], ['24', '19'], ['12', '29'], ['23', '17']]))  # Output: \"14 21 9 24 19 12 29 23 17\"",
    "test_cases": [
      "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
      "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
      "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
    ]
  },
  {
    "mbpp_id": 545,
    "problem_statement": "Write a python function to toggle only first and last bits of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed"
    ],
    "generated_code": "def toggle_F_and_L_bits(num):\n    # Shift right by 2 positions to isolate the first bit (MSB)\n    first_bit = num >> 2\n    # Shift left by 2 positions to isolate the last bit (LSB)\n    last_bit = num << 2\n    \n    # XOR the two isolated bits to toggle them\n    result = first_bit ^ last_bit\n    \n    return result\n\n# Test the function with provided data points\nassert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert toggle_F_and_L_bits(10) == 3",
      "assert toggle_F_and_L_bits(15) == 6",
      "assert toggle_F_and_L_bits(20) == 5"
    ]
  },
  {
    "mbpp_id": 546,
    "problem_statement": "Write a function to find the last occurrence of a character in a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def last_occurence_char(s, c):\n    return s.rfind(c)",
    "test_cases": [
      "assert last_occurence_char(\"hello world\",'l')==10",
      "assert last_occurence_char(\"language\",'g')==7",
      "assert last_occurence_char(\"little\",'y')==None"
    ]
  },
  {
    "mbpp_id": 547,
    "problem_statement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Assertion failed: Test case 1 failed"
    ],
    "generated_code": "import numpy as np\n\ndef Total_Hamming_Distance(n):\n    \"\"\"\n    Calculate the total Hamming distance for all pairs of consecutive integers from 0 to n.\n    \n    Args:\n    - n: An integer representing the upper limit of the range.\n    \n    Returns:\n    - The total Hamming distance calculated across all consecutive integers.\n    \"\"\"\n    # Create an array of numbers from 0 to n\n    arr = np.arange(n + 1)\n    # Compute and return the total Hamming distance using numpy's histogram function\n    return int(np.histogram(arr, bins=np.arange(-n, n + 1))[1][:-1].sum())\n\n# Test the function with provided data points\nassert Total_Hamming_Distance(4) == 7, \"Test case 1 failed\"\nassert Total_Hamming_Distance(2) == 3, \"Test case 2 failed\"\nassert Total_Hamming_Distance(5) == 8, \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert Total_Hamming_Distance(4) == 7",
      "assert Total_Hamming_Distance(2) == 3",
      "assert Total_Hamming_Distance(5) == 8"
    ]
  },
  {
    "mbpp_id": 548,
    "problem_statement": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    \n    dp = [1] * len(sequence)\n    \n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return max(dp)\n\n# Example usage and test case\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))  # Expected output: 5\nprint(longest_increasing_subsequence([3, 10, 2, 1, 20]))  # Expected output: 3\nprint(longest_increasing_subsequence([50, 3, 10, 7, 40, 80]))  # Expected output: 4",
    "test_cases": [
      "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
      "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
      "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
    ]
  },
  {
    "mbpp_id": 549,
    "problem_statement": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(1, 2*n, 2):  # Loop through the first n odd numbers\n        total += i ** 5  # Add the fifth power of each odd number to the total\n    return total\n\n# Test cases\nprint(odd_Num_Sum(1))  # Expected output: 1\nprint(odd_Num_Sum(2))  # Expected output: 244\nprint(odd_Num_Sum(3))  # Expected output: 3369",
    "test_cases": [
      "assert odd_Num_Sum(1) == 1",
      "assert odd_Num_Sum(2) == 244",
      "assert odd_Num_Sum(3) == 3369"
    ]
  },
  {
    "mbpp_id": 550,
    "problem_statement": "Write a python function to find the maximum element in a sorted and rotated array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_Max(arr, start, end):\n    # Base case: if the array contains only one element\n    if start == end:\n        return arr[start]\n    \n    # Find the pivot point where the array is rotated\n    mid = (start + end) // 2\n    \n    # If there is no rotation (array is not rotated)\n    if mid < end and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    # If the first element is greater than the last element\n    elif start < mid and arr[mid] < arr[start]:\n        return arr[mid]\n    else:\n        # Recursively find the maximum in the left half of the array\n        if arr[mid-1] > arr[mid]:\n            return find_Max(arr, start, mid - 1)\n        # Otherwise, recursively find the maximum in the right half of the array\n        else:\n            return find_Max(arr, mid + 1, end)\n\n# Test cases\nprint(find_Max([2,3,5,6,9],0,4))  # Expected output: 9\nprint(find_Max([3,4,5,2,1],0,4))  # Expected output: 5\nprint(find_Max([1,2,3],0,2))      # Expected output: 3",
    "test_cases": [
      "assert find_Max([2,3,5,6,9],0,4) == 9",
      "assert find_Max([3,4,5,2,1],0,4) == 5",
      "assert find_Max([1,2,3],0,2) == 3"
    ]
  },
  {
    "mbpp_id": 551,
    "problem_statement": "Write a function to extract a specified column from a given nested list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def extract_column(nested_list, col_index):\n    result = []\n    for sublist in nested_list:\n        try:\n            # Extracting the desired column and adding it to the result list\n            result.append(sublist[col_index])\n        except IndexError:\n            continue\n    return result",
    "test_cases": [
      "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
      "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
      "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
    ]
  },
  {
    "mbpp_id": 552,
    "problem_statement": "Write a python function to check whether a given sequence is linear or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def Seq_Linear(seq):\n    # Check if all differences between consecutive elements are equal\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i-1] != 2:\n            return \"Non Linear Sequence\"\n    return \"Linear Sequence\"\n\n# Test cases\nprint(Seq_Linear([0,2,4,6,8,10]))  # Expected output: Linear Sequence\nprint(Seq_Linear([1,2,3]))         # Expected output: Linear Sequence\nprint(Seq_Linear([1,5,2]))         # Expected output: Non Linear Sequence",
    "test_cases": [
      "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
      "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
    ]
  },
  {
    "mbpp_id": 553,
    "problem_statement": "Write a function to convert the given tuple to a floating-point number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def tuple_to_float(tup):\n    # Convert each element in the tuple to float and sum them up\n    return sum(float(i) for i in tup)",
    "test_cases": [
      "assert tuple_to_float((4, 56)) == 4.56",
      "assert tuple_to_float((7, 256)) == 7.256",
      "assert tuple_to_float((8, 123)) == 8.123"
    ]
  },
  {
    "mbpp_id": 554,
    "problem_statement": "Write a python function to find odd numbers from a mixed list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Split' is not defined",
      "Test 2: FAIL - name 'Split' is not defined",
      "Test 3: FAIL - name 'Split' is not defined"
    ],
    "generated_code": "def split(lst):\n    # Using filter to keep only odd numbers in the list\n    return list(filter(lambda x: x % 2 != 0, lst))\n\n# Test cases to verify the correctness of the function\nassert split([1,2,3,4,5,6]) == [1,3,5], \"Test case 1 failed\"\nassert split([10,11,12,13]) == [11,13], \"Test case 2 failed\"\nassert split([7,8,9,1]) == [7,9,1], \"Test case 3 failed\"\n\nprint(\"All test cases passed!\")",
    "test_cases": [
      "assert Split([1,2,3,4,5,6]) == [1,3,5]",
      "assert Split([10,11,12,13]) == [11,13]",
      "assert Split([7,8,9,1]) == [7,9,1]"
    ]
  },
  {
    "mbpp_id": 555,
    "problem_statement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def difference(n):\n    # Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = int((n * (n + 1) / 2) ** 2)\n    \n    # Calculate the sum of first n natural numbers\n    total_sum = n * (n + 1) // 2\n    \n    # Return the difference between the two sums\n    return sum_of_cubes - total_sum",
    "test_cases": [
      "assert difference(3) == 30",
      "assert difference(5) == 210",
      "assert difference(2) == 6"
    ]
  },
  {
    "mbpp_id": 556,
    "problem_statement": "Write a python function to count the pairs with xor as an odd number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def find_Odd_Pair(arr, target):\n    \"\"\"\n    This function takes an array of integers and a target integer.\n    It returns the total number of unique pairs in the array whose XOR is equal to the target value.\n    \n    :param arr: List[int] - A list of integers.\n    :param target: int - The target value for the XOR operation.\n    :return: int - The count of pairs with XOR equal to the target.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] ^ arr[j] == target:\n                count += 1\n    return count\n\n# Check function with provided data points\nprint(find_Odd_Pair([5,4,7,2,1], 5))  # Expected output: 6\nprint(find_Odd_Pair([7,2,8,1,0,5,11], 7))  # Expected output: 12\nprint(find_Odd_Pair([1,2,3], 3))  # Expected output: 2",
    "test_cases": [
      "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
      "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
      "assert find_Odd_Pair([1,2,3],3) == 2"
    ]
  },
  {
    "mbpp_id": 557,
    "problem_statement": "Write a function to toggle characters case in a string.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def toggle_string(s):\n    return s.swapcase()",
    "test_cases": [
      "assert toggle_string(\"Python\")==(\"pYTHON\")",
      "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
      "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
    ]
  },
  {
    "mbpp_id": 558,
    "problem_statement": "Write a python function to find the digit distance between two integers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def digit_distance_nums(num1, num2):\n    # Convert both numbers to strings and concatenate them\n    concatenated = str(num1) + str(num2)\n    \n    # Calculate the total length of digits in the combined number\n    total_length = len(concatenated)\n    \n    # Initialize sum to store the sum of all digits\n    sum_digits = 0\n    \n    # Iterate through each character in the concatenated string\n    for char in concatenated:\n        # Convert the current character back to an integer and add it to the sum\n        sum_digits += int(char)\n    \n    # Subtract 9 from the sum twice as per the formula\n    result = sum_digits - 18\n    \n    return result",
    "test_cases": [
      "assert digit_distance_nums(1,2) == 1",
      "assert digit_distance_nums(23,56) == 6",
      "assert digit_distance_nums(123,256) == 7"
    ]
  },
  {
    "mbpp_id": 559,
    "problem_statement": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def max_sub_array_sum(A, k):\n    current_max = A[0]\n    global_max = A[0]\n\n    for i in range(1, len(A)):\n        current_max = max(A[i], current_max + A[i])\n        if current_max > global_max:\n            global_max = current_max\n\n    return global_max\n\n# Test cases\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8))  # Output: 7\nprint(max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8))  # Output: 8\nprint(max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8))  # Output: 10",
    "test_cases": [
      "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
      "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
    ]
  },
  {
    "mbpp_id": 560,
    "problem_statement": "Write a function to find the union of elements of the given tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def union_elements(tup1, tup2):\n    # Convert both tuples into sets and then back into tuples\n    return tuple(set(tup1).union(set(tup2)))",
    "test_cases": [
      "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
      "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
    ]
  },
  {
    "mbpp_id": 561,
    "problem_statement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - cannot unpack non-iterable int object",
      "Test 2: FAIL - cannot unpack non-iterable int object",
      "Test 3: FAIL - cannot unpack non-iterable int object"
    ],
    "generated_code": "def assign_elements(pairs):\n    # Dictionary comprehension to create pairs of each element and their corresponding values.\n    assigned_pairs = {element: [value for value in pairs if element == value[0]] + [pair[1] for pair in pairs if element == pair[1][0]] for element, value in set(pair for sublist in pairs for pair in sublist)}\n    return assigned_pairs",
    "test_cases": [
      "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
      "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
      "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
    ]
  },
  {
    "mbpp_id": 562,
    "problem_statement": "Write a python function to find the maximum length of sublist.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'Find_Max_Length' is not defined",
      "Test 2: FAIL - name 'Find_Max_Length' is not defined",
      "Test 3: FAIL - name 'Find_Max_Length' is not defined"
    ],
    "generated_code": "def find_max_length(lists):\n    # Initialize max_len with the length of the first list in lists\n    max_len = len(lists[0])\n    \n    # Iterate through each list in the provided lists parameter\n    for i in range(1, len(lists)):\n        # Update max_len if the current list is longer than max_len found so far\n        max_len = max(max_len, len(lists[i]))\n    \n    return max_len",
    "test_cases": [
      "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
      "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
      "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
    ]
  },
  {
    "mbpp_id": 563,
    "problem_statement": "Write a function to extract values between quotation marks of a string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef extract_values(input_string):\n    # Extracting values between quotation marks\n    return [match.group(0) for match in re.finditer(r'\"([^\"]*)\"', input_string)]",
    "test_cases": [
      "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
      "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
      "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
    ]
  },
  {
    "mbpp_id": 564,
    "problem_statement": "Write a python function to count unequal element pairs from the given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "test_cases": [
      "assert count_Pairs([1,2,1],3) == 2",
      "assert count_Pairs([1,1,1,1],4) == 0",
      "assert count_Pairs([1,2,3,4,5],5) == 10"
    ]
  },
  {
    "mbpp_id": 565,
    "problem_statement": "Write a python function to split a string into characters.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def split(input_string):\n    # Splitting the input string into individual characters and returning them as a list\n    return [char for char in input_string]",
    "test_cases": [
      "assert split('python') == ['p','y','t','h','o','n']",
      "assert split('Name') == ['N','a','m','e']",
      "assert split('program') == ['p','r','o','g','r','a','m']"
    ]
  },
  {
    "mbpp_id": 566,
    "problem_statement": "Write a function to get the sum of a non-negative integer.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_digits(n):\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(int(n / 10))",
    "test_cases": [
      "assert sum_digits(345)==12",
      "assert sum_digits(12)==3",
      "assert sum_digits(97)==16"
    ]
  },
  {
    "mbpp_id": 567,
    "problem_statement": "Write a function to check whether a specified list is sorted or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def issort_list(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
    "test_cases": [
      "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
      "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
      "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
    ]
  },
  {
    "mbpp_id": 568,
    "problem_statement": "Write a function to create a list of empty dictionaries.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - SyntaxError: closing parenthesis '}' does not match opening parenthesis '['"
    ],
    "generated_code": "def empty_list(n):\n    return [{}} * n]\n\n# Test cases\nprint(empty_list(5))   # Output should be [{''}, {''}, {''}, {''}, {''}]\nprint(empty_list(6))   # Output should be [{''}, {''}, {''}, {''}, {''}, {''}]\nprint(empty_list(7))   # Output should be [{''}, {''}, {''}, {''}, {''}, {''}, {''}]",
    "test_cases": [
      "assert empty_list(5)==[{},{},{},{},{}]",
      "assert empty_list(6)==[{},{},{},{},{},{}]",
      "assert empty_list(7)==[{},{},{},{},{},{},{}]"
    ]
  },
  {
    "mbpp_id": 569,
    "problem_statement": "Write a function to sort each sublist of strings in a given list of lists.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_cases": [
      "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
      "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
    ]
  },
  {
    "mbpp_id": 570,
    "problem_statement": "Write a function to remove words from a given list of strings containing a character or string.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def remove_words(words_list, unwanted_chars):\n    return [word for word in words_list if all(char not in word for char in unwanted_chars)]",
    "test_cases": [
      "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
      "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
    ]
  },
  {
    "mbpp_id": 571,
    "problem_statement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "from typing import List\n\ndef max_sum_pair_diff_lessthan_K(arr: List[int], k: int, m: int) -> int:\n    arr.sort()\n    l, r = 0, len(arr) - 1\n    res = 0\n    \n    while l < r:\n        diff = arr[r] - arr[l]\n        if diff <= k:\n            res += arr[l] + arr[r]\n            l += 1\n            r -= 1\n        else:\n            l += 1\n            \n    return res",
    "test_cases": [
      "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
      "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
      "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
    ]
  },
  {
    "mbpp_id": 572,
    "problem_statement": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def two_unique_nums(lst):\n    # Remove duplicates using set and convert back to list\n    unique_set = set(lst)\n    unique_list = list(unique_set)\n    # Return all elements except for the last one\n    return unique_list[:-1]\n\n# Test cases\nprint(two_unique_nums([1,2,3,2,3,4,5]))  # Expected output: [1, 4, 5]\nprint(two_unique_nums([1,2,3,2,4,5]))   # Expected output: [1, 3, 4, 5]\nprint(two_unique_nums([1,2,3,4,5]))     # Expected output: [1, 2, 3, 4, 5]",
    "test_cases": [
      "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
      "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
      "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
    ]
  },
  {
    "mbpp_id": 573,
    "problem_statement": "Write a python function to calculate the product of the unique numbers of a given list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def unique_product(lst):\n    from collections import Counter\n    \n    # Remove duplicates and convert list to set for uniqueness\n    unique_numbers = set(lst)\n    \n    # Calculate the product of unique numbers using Counter\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    \n    return product\n\n# Test cases\nprint(unique_product([10, 20, 30, 40, 20, 50, 60, 40]))  # Expected output: 720000000\nprint(unique_product([1, 2, 3, 1,]))                  # Expected output: 6\nprint(unique_product([7, 8, 9, 0, 1, 1]))              # Expected output: 0",
    "test_cases": [
      "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "assert unique_product([1, 2, 3, 1,]) == 6",
      "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
    ]
  },
  {
    "mbpp_id": 574,
    "problem_statement": "Write a function to find the surface area of a cylinder.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import math\ndef surfacearea_cylinder(radius, height):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n    \n    Args:\n        radius (float): The radius of the cylinder's base.\n        height (float): The height of the cylinder.\n        \n    Returns:\n        float: The surface area of the cylinder.\n    \"\"\"\n    top_bottom_area = 2 * math.pi * radius**2 # Area of the top and bottom circles\n    side_area = 2 * math.pi * radius * height   # Area of the side rectangle\n    total_surface_area = top_bottom_area + side_area\n    \n    return round(total_surface_area, 3)",
    "test_cases": [
      "assert surfacearea_cylinder(10,5)==942.45",
      "assert surfacearea_cylinder(4,5)==226.18800000000002",
      "assert surfacearea_cylinder(4,10)==351.848"
    ]
  },
  {
    "mbpp_id": 575,
    "problem_statement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def count_no(n, m, k, x):\n    total = n * ((k + x - 1) // x)\n    remainder_count = (k * x - 1) % x if x > 1 else 0\n    return min(total, (x - 1) * m - remainder_count)",
    "test_cases": [
      "assert count_no(2,3,1,10) == 5",
      "assert count_no(3,6,4,20) == 11",
      "assert count_no(5,10,4,20) == 16"
    ]
  },
  {
    "mbpp_id": 576,
    "problem_statement": "Write a python function to check whether an array is subarray of another or not.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def is_Sub_Array(A,B,N,M):\n    # Check if all elements of B exist in A and they appear in consecutive order\n    for i in range(N-M+1): \n        j = M-1 \n        while(j>=i):  \n            if(A[i+j] != B[j]):  \n                break  \n            j -= 1  \n        else:\n            return \"true\"\n    return \"false\"\n\n# Test cases\nprint(is_Sub_Array([1,4,3,5], [1,2], 4, 2))  # Expected output: \"false\"\nprint(is_Sub_Array([1,2,1], [1,2,1], 3, 3))   # Expected output: \"true\"\nprint(is_Sub_Array([1,0,2,2], [2,2,0], 4, 3))  # Expected output: \"false\"",
    "test_cases": [
      "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
      "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
      "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
    ]
  },
  {
    "mbpp_id": 577,
    "problem_statement": "Write a python function to find the last digit in factorial of a given number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    # Return the last digit of factorial\n    return factorial % 10",
    "test_cases": [
      "assert last_Digit_Factorial(4) == 4",
      "assert last_Digit_Factorial(21) == 0",
      "assert last_Digit_Factorial(30) == 0"
    ]
  },
  {
    "mbpp_id": 578,
    "problem_statement": "Write a function to interleave lists of the same length.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def interleave_lists(list1, list2, list3):\n    return [list1[i] if i < len(list1) else list2[i - len(list1)] if i % 2 == 0 else list3[i - len(list1)] for i in range(max(len(list1), len(list2), len(list3)))]\n\n# Test cases\nprint(interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]))  # Output: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nprint(interleave_lists([10,20],[15,2],[5,10]))  # Output: [10, 15, 5, 20, 2, 10]\nprint(interleave_lists([11,44], [10,15], [20,5]))  # Output: [11, 10, 20, 44, 15, 5]",
    "test_cases": [
      "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
      "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
    ]
  },
  {
    "mbpp_id": 579,
    "problem_statement": "Write a function to find the dissimilar elements in the given two tuples.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def find_dissimilar(tuple1, tuple2):\n    # Use set difference to find elements unique to each tuple\n    return tuple(set(tuple1) ^ set(tuple2))",
    "test_cases": [
      "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
      "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
    ]
  },
  {
    "mbpp_id": 580,
    "problem_statement": "Write a function to extract the even elements in the nested mixed tuple.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def extract_even(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, tuple) and len(result) % 2 == 0:\n            result.append(tuple(item))\n        elif isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n    return tuple(result)\n\n# Test cases\nprint(extract_even((4, 5, (7, 6, (2, 4)), 6, 8))) # Expected output: (4, (6, (2, 4)), 6, 8)\nprint(extract_even((5, 6, (8, 7, (4, 8)), 7, 9))) # Expected output: (6, (8, (4, 8)))\nprint(extract_even((5, 6, (9, 8, (4, 6)), 8, 10))) # Expected output: (6, (8, (4, 6)), 8, 10)",
    "test_cases": [
      "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
      "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
      "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
    ]
  },
  {
    "mbpp_id": 581,
    "problem_statement": "Write a python function to find the surface area of the square pyramid.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def surface_Area(base_edge_length, slant_height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n    \n    Args:\n        base_edge_length (int): The length of one edge of the square base.\n        slant_height (int): The height from the center of the base to the apex of the pyramid.\n        \n    Returns:\n        int: The total surface area of the square pyramid.\n    \"\"\"\n    # Area of the square base\n    base_area = base_edge_length ** 2\n    \n    # Four triangular faces have equal area, so calculate the area of one and multiply by 4\n    triangle_area = base_edge_length * slant_height / 2\n    total_triangle_area = 4 * triangle_area\n    \n    # Total surface area is the sum of the base area and all four triangular face areas\n    surface_area = base_area + total_triangle_area\n    \n    return surface_area\n\n# Test cases\nassert surface_Area(3, 4) == 33\nassert surface_Area(4, 5) == 56\nassert surface_Area(1, 2) == 5",
    "test_cases": [
      "assert surface_Area(3,4) == 33",
      "assert surface_Area(4,5) == 56",
      "assert surface_Area(1,2) == 5"
    ]
  },
  {
    "mbpp_id": 582,
    "problem_statement": "Write a function to check if a dictionary is empty or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def my_dict(input_dict):\n    # Check if the input dictionary is empty\n    return len(input_dict) == 0",
    "test_cases": [
      "assert my_dict({10})==False",
      "assert my_dict({11})==False",
      "assert my_dict({})==True"
    ]
  },
  {
    "mbpp_id": 583,
    "problem_statement": "Write a function for nth catalan number.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        total = 0\n        for i in range(n):\n            total += catalan_number(i) * catalan_number(n-i-1)\n        return total",
    "test_cases": [
      "assert catalan_number(10)==16796",
      "assert catalan_number(9)==4862",
      "assert catalan_number(7)==429"
    ]
  },
  {
    "mbpp_id": 584,
    "problem_statement": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import re\n\ndef find_adverbs(sentence):\n    # Define the pattern to match adverbs\n    adverb_pattern = r'\\b([A-Z][a-z]*\\son|better|good|well)\\b'\n    \n    # Find all matches of the pattern in the sentence\n    matches = re.findall(adverb_pattern, sentence)\n    \n    # If no matches found, return an empty list; otherwise, return the matches as strings joined with newlines\n    return '\\n'.join(matches) if matches else []\n\n# Test the function with provided test cases\nprint(find_adverbs(\"Clearly, he has no excuse for such behavior.\"))\nprint(find_adverbs(\"Please handle the situation carefuly\"))\nprint(find_adverbs(\"Complete the task quickly\"))",
    "test_cases": [
      "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
      "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
      "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
    ]
  },
  {
    "mbpp_id": 585,
    "problem_statement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "from heapq import heappush, heappop\nimport json\n\ndef expensive_items(dataset, n):\n    # Convert each item in the dataset into a tuple with price first and name second,\n    # then push all these tuples onto a min heap.\n    price_queue = [(-item['price'], item['name']) for item in dataset]\n    \n    # Create an empty result list to store the top-n expensive items.\n    result = []\n    \n    # Pop up the smallest element from the priority queue which is equivalent to poping off the biggest price value.\n    while len(result) < n:\n        _, name = heappop(price_queue)\n        result.append(name)\n        \n    return result\n\n\n# Test Cases\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 1))  # Should print [{'name': 'Item-2', 'price': 555.22}]\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2))  # Should print [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}], 1))  # Should print [{'name': 'Item-2', 'price': 555.22}]",
    "test_cases": [
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
      "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
    ]
  },
  {
    "mbpp_id": 586,
    "problem_statement": "Write a python function to split the array and add the first part to the end.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def split_Arr(arr, n, m):\n    # Splitting the array into two parts\n    arr[:n] = []\n    # Adding the first part of the split array to the end\n    arr.extend(arr[:n])\n    return arr",
    "test_cases": [
      "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
      "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
      "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
    ]
  },
  {
    "mbpp_id": 587,
    "problem_statement": "Write a function to convert a list to a tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_cases": [
      "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
      "assert list_tuple([58,44,56])==(58,44,56)"
    ]
  },
  {
    "mbpp_id": 588,
    "problem_statement": "Write a python function to find the difference between largest and smallest value in a given array.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def big_diff(arr):\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    return diff",
    "test_cases": [
      "assert big_diff([1,2,3,4]) == 3",
      "assert big_diff([4,5,12]) == 8",
      "assert big_diff([9,2,3]) == 7"
    ]
  },
  {
    "mbpp_id": 589,
    "problem_statement": "Write a function to find perfect squares between two given numbers.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def perfect_squares(start_num, end_num):\n    \"\"\"\n    Returns a list of all perfect squares within the range [start_num, end_num].\n    \n    Parameters:\n    start_num (int): The starting number of the range.\n    end_num (int): The ending number of the range.\n    \n    Returns:\n    List[int]: A list containing all perfect squares between start_num and end_num inclusive.\n    \"\"\"\n    return [i**2 for i in range(int((end_num**0.5)), int((start_num**0.5))+1)]\n\n# Check function with provided data points\nprint(perfect_squares(1,30))  # Expected output: [1, 4, 9, 16, 25]\nprint(perfect_squares(50,100))  # Expected output: [64, 81, 100]\nprint(perfect_squares(100,200))  # Expected output: [100, 121, 144, 169, 196]",
    "test_cases": [
      "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
      "assert perfect_squares(50,100)==[64, 81, 100]",
      "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
    ]
  },
  {
    "mbpp_id": 590,
    "problem_statement": "Write a function to convert polar coordinates to rectangular coordinates.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The magnitude in polar coordinates.\n    theta (float): The angle in radians in polar coordinates.\n    \n    Returns:\n    tuple: A tuple containing two elements - the first element is a complex number representing the x-coordinate,\n           and the second element is a complex number representing the y-coordinate.\n    \"\"\"\n    rect = r * cmath.exp(complex(0, theta))\n    return (rect.real, rect.imag)\n\n# Test cases\nprint(polar_rect(3, 4)) # Should output ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nprint(polar_rect(4, 7)) # Should output ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nprint(polar_rect(15, 17)) # Should output ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
    "test_cases": [
      "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
      "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
    ]
  },
  {
    "mbpp_id": 591,
    "problem_statement": "Write a python function to interchange the first and last elements in a list.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def swap_List(lst):\n    # Interchange the first and last elements in the list\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_cases": [
      "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "assert swap_List([1, 2, 3]) == [3, 2, 1]",
      "assert swap_List([4, 5, 6]) == [6, 5, 4]"
    ]
  },
  {
    "mbpp_id": 592,
    "problem_statement": "Write a python function to find sum of product of binomial co-efficients.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - name 'sum_Of_product' is not defined",
      "Test 2: FAIL - name 'sum_Of_product' is not defined",
      "Test 3: FAIL - name 'sum_Of_product' is not defined"
    ],
    "generated_code": "import math\n\ndef sum_of_product(n):\n    \"\"\"\n    Calculate the sum of products of binomial coefficients.\n    \n    Args:\n    n : int - The upper limit of the binomial coefficient calculation\n    \n    Returns:\n    int - The sum of products of binomial coefficients up to n\n    \"\"\"\n    total_sum = 0\n    for i in range(n + 1):\n        for j in range(i + 1):\n            total_sum += math.comb(n, i) * math.comb(n, j)\n    return total_sum\n\n# Test cases\nprint(sum_of_product(3)) # Expected output: 15\nprint(sum_of_product(4)) # Expected output: 56\nprint(sum_of_product(1)) # Expected output: 1",
    "test_cases": [
      "assert sum_Of_product(3) == 15",
      "assert sum_Of_product(4) == 56",
      "assert sum_Of_product(1) == 1"
    ]
  },
  {
    "mbpp_id": 593,
    "problem_statement": "Write a function to remove leading zeroes from an ip address.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def removezero_ip(ip_address):\n    # Split the IP address into its components\n    octets = ip_address.split('.')\n    \n    # Convert each component to integer and check for zero\n    if int(octets[0]) == 0:\n        return ' '.join([str(int(n)) for n in octets])\n    else:\n        return ip_address\n\n# Test cases\nprint(removezero_ip(\"216.08.094.196\"))  # Expected output: \"216.8.94.196\"\nprint(removezero_ip(\"12.01.024\"))      # Expected output: \"12.1.24\"\nprint(removezero_ip(\"216.08.094.0196\")) # Expected output: \"216.8.94.196\"",
    "test_cases": [
      "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
      "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
      "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
    ]
  },
  {
    "mbpp_id": 594,
    "problem_statement": "Write a function to find the difference of first even and odd number of a given list.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - Result does not match expected output",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def diff_even_odd(lst):\n    # Find the last index where an even number occurs\n    evens = [i for i, x in enumerate(lst) if x % 2 == 0]\n    \n    if not evens:\n        return lst[0] - lst[-1]  # If no even numbers found, calculate difference between largest and smallest\n    \n    return lst[evens[-1]] - lst[evens[0]]\n\n# Test cases\nprint(diff_even_odd([1,3,5,7,4,1,6,8]))  # Expected output: 3\nprint(diff_even_odd([1,2,3,4,5,6,7,8,9,10]))  # Expected output: 1\nprint(diff_even_odd([1,5,7,9,10]))  # Expected output: 9",
    "test_cases": [
      "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
      "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
      "assert diff_even_odd([1,5,7,9,10])==9"
    ]
  },
  {
    "mbpp_id": 595,
    "problem_statement": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: FAIL - Result does not match expected output",
      "Test 3: FAIL - Result does not match expected output"
    ],
    "generated_code": "def min_Swaps(binary_str1, binary_str2):\n    # Check if both strings have the same length\n    if len(binary_str1) != len(binary_str2):\n        return \"Not Possible\"\n\n    count = 0\n    for i in range(len(binary_str1)):\n        if binary_str1[i] != binary_str2[i]:\n            count += 1\n\n    return count - 1  # Subtracting 1 because we need to consider all characters except the last one",
    "test_cases": [
      "assert min_Swaps(\"1101\",\"1110\") == 1",
      "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
      "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
    ]
  },
  {
    "mbpp_id": 596,
    "problem_statement": "Write a function to find the size of the given tuple.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "import sys\n\ndef tuple_size(input_tuple):\n    # Calculate and return the system's memory usage for the input tuple.\n    return sys.getsizeof(input_tuple)",
    "test_cases": [
      "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
      "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
      "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
    ]
  },
  {
    "mbpp_id": 597,
    "problem_statement": "Write a function to find kth element from the given two sorted arrays.",
    "passed": false,
    "error": null,
    "test_outputs": [
      "Test 1: FAIL - IndexError: list index out of range"
    ],
    "generated_code": "from typing import List\n\ndef find_kth(nums1: List[int], nums2: List[int], m: int, n: int, k: int) -> int:\n    \"\"\"\n    Finds the k-th smallest element in the union of two sorted arrays.\n    \n    Args:\n    nums1: First sorted array.\n    nums2: Second sorted array.\n    m: Number of elements in the first array.\n    n: Number of elements in the second array.\n    k: The rank of the element to find.\n    \n    Returns:\n    The k-th smallest element in the merged sorted list of both arrays.\n    \"\"\"\n    if m == 0:\n        return nums2[k-1]\n    if n == 0:\n        return nums1[k-1]\n\n    i = min(k // 2, m)\n    j = min(k // 2, n)\n\n    if nums1[i-1] > nums2[j-1]:\n        return find_kth(nums1[:i], nums2[j:], i, n, k - i)\n    else:\n        return find_kth(nums1[i:], nums2[:j], m - j, j, k - j)\n\n# Example usage\nprint(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5))  # Output: 6\nprint(find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7))  # Output: 256\nprint(find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6))  # Output: 8",
    "test_cases": [
      "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
      "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
      "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
    ]
  },
  {
    "mbpp_id": 598,
    "problem_statement": "Write a function to check whether the given number is armstrong or not.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def armstrong_number(n):\n    # Convert the number to string to iterate over each digit\n    num_str = str(n)\n    length = len(num_str)\n    \n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_digits = sum([int(digit) ** length for digit in num_str])\n    \n    return sum_of_digits == n",
    "test_cases": [
      "assert armstrong_number(153)==True",
      "assert armstrong_number(259)==False",
      "assert armstrong_number(4458)==False"
    ]
  },
  {
    "mbpp_id": 599,
    "problem_statement": "Write a function to find sum and average of first n natural numbers.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def sum_average(n):\n    total = sum(range(1, n + 1))\n    return total, total / n",
    "test_cases": [
      "assert sum_average(10)==(55, 5.5)",
      "assert sum_average(15)==(120, 8.0)",
      "assert sum_average(20)==(210, 10.5)"
    ]
  },
  {
    "mbpp_id": 600,
    "problem_statement": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "passed": true,
    "error": null,
    "test_outputs": [
      "Test 1: PASS - All Clear",
      "Test 2: PASS - All Clear",
      "Test 3: PASS - All Clear"
    ],
    "generated_code": "def is_Even(n):\n    \"\"\"\n    Function to check if the input number 'n' is even or odd.\n    \n    Args:\n        n (int): The number to be checked.\n        \n    Returns:\n        bool: True if 'n' is an even number, otherwise False.\n    \"\"\"\n    # Using bitwise AND operation with 1 to determine if the least significant bit is set\n    return (n & 1) == 0",
    "test_cases": [
      "assert is_Even(1) == False",
      "assert is_Even(2) == True",
      "assert is_Even(3) == False"
    ]
  }
]